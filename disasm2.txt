
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 39 02 c0       	mov    eax,0xc0023944
c0000025:	3d 44 39 02 c0       	cmp    eax,0xc0023944
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 39 02 c0       	push   0xc0023944
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 39 02 c0       	mov    eax,0xc0023944
c0000051:	2d 44 39 02 c0       	sub    eax,0xc0023944
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 39 02 c0       	push   0xc0023944
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 1c 00 02 c0       	mov    ebx,0xc002001c
c0000097:	81 eb 18 00 02 c0    	sub    ebx,0xc0020018
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 18 00 02 c0       	mov    esi,0xc0020018
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 39 02 c0       	push   0xc0023944
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 44 39 02 c0       	push   0xc0023944
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 23 52 01 00       	call   c00154d0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 01 52 01 00       	call   c00154d0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 0e 57 01 00       	call   c00159fc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 a9 5d 01 00       	call   c00160a0 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 05 0f 01 00       	jmp    c0011284 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 20 00 02 c0 02 	test   BYTE PTR [edx-0x3ffdffe0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 20 00 02 c0 01 	test   BYTE PTR [edx-0x3ffdffe0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 20 00 02 c0 08 	test   BYTE PTR [edx-0x3ffdffe0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 20 00 02 c0 08 	test   BYTE PTR [edx-0x3ffdffe0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 20 00 02 c0 04 	test   BYTE PTR [ecx-0x3ffdffe0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 20 00 02 c0 01 	test   BYTE PTR [edx-0x3ffdffe0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 24 01 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfedc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 8e 78 01 00       	jmp    c0019668 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 b8 78 01 00       	jmp    c00196a8 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 d9 78 01 00       	jmp    c00196e8 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 80 02 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfd80]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 80 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfd80]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 64 29 02 c0       	mov    edx,0xc0022964
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 3c 01 02 c0       	mov    edx,0xc002013c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 42 01 02 c0       	mov    eax,0xc0020142
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 00 02 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfe00]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 4b 01 02 c0       	mov    eax,0xc002014b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 80 02 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdfd80]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 d0 01 02 c0       	mov    eax,0xc00201d0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb c0 01 02 c0       	mov    ebx,0xc00201c0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 a0 01 02 c0       	mov    eax,0xc00201a0
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 b0 01 02 c0       	mov    eax,0xc00201b0
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 52 01 02 c0       	mov    edx,0xc0020152
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 5e 01 02 c0       	mov    edx,0xc002015e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 72 01 02 c0       	mov    edx,0xc0020172
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c a0 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc00205a0
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 a0 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc00205a0
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 a0 03 02 c0       	mov    eax,0xc00203a0
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 e0 02 02 c0       	mov    eax,0xc00202e0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 a0 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfd60]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 a0 06 02 c0       	push   0xc00206a0
c0006147:	e8 c0 3e 01 00       	call   c001a00c <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 ae 06 02 c0       	push   0xc00206ae
c000617f:	e8 88 3e 01 00       	call   c001a00c <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 f1 3d 01 00       	call   c0019fb0 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 bd 06 02 c0       	push   0xc00206bd
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 c0 06 02 c0       	push   0xc00206c0
c000682f:	e8 d8 37 01 00       	call   c001a00c <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 e6 37 01 00       	call   c001a028 <iso_kprintfd>
c0006842:	c7 04 24 c5 06 02 c0 	mov    DWORD PTR [esp],0xc00206c5
c0006849:	e8 be 37 01 00       	call   c001a00c <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 ce 37 01 00       	call   c001a028 <iso_kprintfd>
c000685a:	c7 04 24 cb 06 02 c0 	mov    DWORD PTR [esp],0xc00206cb
c0006861:	e8 a6 37 01 00       	call   c001a00c <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 b6 37 01 00       	call   c001a028 <iso_kprintfd>
c0006872:	c7 04 24 d1 06 02 c0 	mov    DWORD PTR [esp],0xc00206d1
c0006879:	e8 8e 37 01 00       	call   c001a00c <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 9e 37 01 00       	call   c001a028 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 bd 06 02 c0       	push   0xc00206bd
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 da 06 02 c0       	push   0xc00206da
c0006a52:	e8 b5 35 01 00       	call   c001a00c <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 e5 06 02 c0       	push   0xc00206e5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 ec 06 02 c0       	push   0xc00206ec
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 f3 06 02 c0       	push   0xc00206f3
c0006b69:	e8 9e 34 01 00       	call   c001a00c <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 fe 06 02 c0       	push   0xc00206fe
c0006b84:	e8 83 34 01 00       	call   c001a00c <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 52 9e 00 00       	call   c0010ae6 <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 7f 5b 00 00       	call   c000c822 <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 0f 07 02 c0       	push   0xc002070f
c0006cd4:	e8 ec 9e 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 28 07 02 c0       	push   0xc0020728
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 27 eb 00 00       	call   c0015828 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 36 ed 00 00       	call   c0015a4c <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 10 65 01 c0       	push   0xc0016510
c0006d25:	52                   	push   edx
c0006d26:	e8 21 ed 00 00       	call   c0015a4c <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 24 08 02 c0       	push   0xc0020824
c0006d33:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d38:	e8 88 9e 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d44:	e8 07 a7 00 00       	call   c0011450 <KeInitRand()>
c0006d49:	e8 e5 fb 00 00       	call   c0016933 <Vm::initialise8086()>
c0006d4e:	e8 2b 48 00 00       	call   c000b57e <Fs::initVFS()>
c0006d53:	c7 04 24 35 07 02 c0 	mov    DWORD PTR [esp],0xc0020735
c0006d5a:	e8 66 9e 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 24 08 02 c0       	push   0xc0020824
c0006d7e:	e8 42 9e 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c0006d83:	e8 d4 44 00 00       	call   c000b25c <KeInitialiseSymlinks()>
c0006d88:	e8 6f a3 00 00       	call   c00110fc <KeLoadSystemEnv()>
c0006d8d:	e8 cc a5 00 00       	call   c001135e <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 4f 07 02 c0       	push   0xc002074f
c0006d9c:	68 58 07 02 c0       	push   0xc0020758
c0006da1:	e8 82 cc 00 00       	call   c0013a28 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 ce 53 00 00       	call   c000c17c <User::loadClockSettings(int)>
c0006dae:	c7 04 24 48 08 02 c0 	mov    DWORD PTR [esp],0xc0020848
c0006db5:	e8 0b 9e 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 54 5a 00 00       	call   c000c820 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 60 07 02 c0 	mov    DWORD PTR [esp],0xc0020760
c0006dd3:	e8 ed 9d 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 71 07 02 c0       	push   0xc0020771
c0006de7:	e8 42 e4 00 00       	call   c001522e <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 78 e6 00 00       	call   c001546d <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 96 f0 00 00       	call   c0015e98 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 8d 07 02 c0       	push   0xc002078d
c0006e17:	50                   	push   eax
c0006e18:	e8 7f 5a 00 00       	call   c000c89c <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba 94 08 02 c0       	mov    edx,0xc0020894
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 ff 80 01 00       	call   c001f016 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 a9 90 00 00       	call   c000fffe <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 82 90 00 00       	call   c000fffe <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 60 90 00 00       	call   c000fffe <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 3e 90 00 00       	call   c000fffe <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 4b 8f 00 00       	call   c000ff7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 26 8f 00 00       	call   c000ff7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 5e 7f 01 00       	call   c001efd0 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 ac 7b 01 00       	call   c001ec40 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 3c 8f 00 00       	call   c000fffe <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 96 07 02 c0       	push   0xc0020796
c0007104:	e8 90 a1 00 00       	call   c0011299 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 9c 07 02 c0       	push   0xc002079c
c0007140:	e8 54 a1 00 00       	call   c0011299 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 4b 89 00 00       	jmp    c000fad8 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 a2 07 02 c0       	push   0xc00207a2
c00071e3:	0f 94 05 a0 31 02 c0 	sete   BYTE PTR ds:0xc00231a0
c00071ea:	e8 d6 99 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 47 84 00 00       	call   c000f64c <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 f0 54 00 00       	call   c000c704 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 ba 07 02 c0 	mov    DWORD PTR [esp],0xc00207ba
c000722d:	e8 93 99 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 6e 8e 00 00       	call   c00100b6 <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 ad 54 00 00       	call   c000c704 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 68 08 02 c0       	push   0xc0020868
c0007274:	e8 4c 99 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c0007279:	e8 fb 08 01 00       	call   c0017b79 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 d4 07 02 c0 	mov    DWORD PTR [esp],0xc00207d4
c0007285:	e8 3b 99 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 de e8 00 00       	call   c0015b74 <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 ef 07 02 c0       	push   0xc00207ef
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 00 08 02 c0       	push   0xc0020800
c000730d:	e8 87 9f 00 00       	call   c0011299 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 0d 08 02 c0       	push   0xc002080d
c0007322:	e8 72 9f 00 00       	call   c0011299 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 17 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020817
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 58 9f 00 00       	jmp    c0011299 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 12 03 01 00       	call   c0017845 <HalSystemIdle()>
c0007533:	e8 9a 80 01 00       	call   c001f5d2 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 d0 ec 01 c0       	push   0xc001ecd0
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 e0 ec 01 c0       	push   0xc001ece0
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 ea ec 01 c0       	push   0xc001ecea
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 f4 ec 01 c0       	push   0xc001ecf4
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 fe ec 01 c0       	push   0xc001ecfe
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 08 ed 01 c0       	push   0xc001ed08
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 12 ed 01 c0       	push   0xc001ed12
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 1c ed 01 c0       	push   0xc001ed1c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 26 ed 01 c0       	push   0xc001ed26
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 2e ed 01 c0       	push   0xc001ed2e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 38 ed 01 c0       	push   0xc001ed38
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 40 ed 01 c0       	push   0xc001ed40
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 48 ed 01 c0       	push   0xc001ed48
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 50 ed 01 c0       	push   0xc001ed50
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 6a ed 01 c0       	push   0xc001ed6a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 72 ed 01 c0       	push   0xc001ed72
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 7c ed 01 c0       	push   0xc001ed7c
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 86 ed 01 c0       	push   0xc001ed86
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 90 ed 01 c0       	push   0xc001ed90
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 2a ee 01 c0       	push   0xc001ee2a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 31 ee 01 c0       	push   0xc001ee31
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 1c ee 01 c0       	push   0xc001ee1c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 23 ee 01 c0       	push   0xc001ee23
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 9a ed 01 c0       	push   0xc001ed9a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 a4 ed 01 c0       	push   0xc001eda4
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 ae ed 01 c0       	push   0xc001edae
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 b8 ed 01 c0       	push   0xc001edb8
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 c2 ed 01 c0       	push   0xc001edc2
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 cc ed 01 c0       	push   0xc001edcc
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 d6 ed 01 c0       	push   0xc001edd6
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 e0 ed 01 c0       	push   0xc001ede0
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 ea ed 01 c0       	push   0xc001edea
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 f4 ed 01 c0       	push   0xc001edf4
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 fe ed 01 c0       	push   0xc001edfe
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 08 ee 01 c0       	push   0xc001ee08
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 12 ee 01 c0       	push   0xc001ee12
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 6c ef 01 c0       	push   0xc001ef6c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 76 ef 01 c0       	push   0xc001ef76
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 80 ef 01 c0       	push   0xc001ef80
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 8a ef 01 c0       	push   0xc001ef8a
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 94 ef 01 c0       	push   0xc001ef94
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 9e ef 01 c0       	push   0xc001ef9e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 a8 ef 01 c0       	push   0xc001efa8
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 b2 ef 01 c0       	push   0xc001efb2
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 26 ed 01 c0       	push   0xc001ed26
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 94 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023194
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d 94 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023194
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 94 31 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023194,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 94 31 02 c0       	mov    eax,ds:0xc0023194
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 b8 08 02 c0       	push   0xc00208b8
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 e8 08 02 c0       	push   0xc00208e8
c0007a44:	e8 50 98 00 00       	call   c0011299 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 ed 08 02 c0       	push   0xc00208ed
c0007a5a:	e8 3a 98 00 00       	call   c0011299 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 f4 08 02 c0       	push   0xc00208f4
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 c3 8f 00 00       	call   c0010b49 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 ec 8e 00 00       	call   c0010a93 <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 ad 79 01 00       	call   c001f56a <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 0c 09 02 c0       	push   0xc002090c
c0007c4b:	e8 49 96 00 00       	call   c0011299 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 0c 09 02 c0       	push   0xc002090c
c0007cc5:	e8 cf 95 00 00       	call   c0011299 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 98 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023198
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 98 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023198
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 98 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023198
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 b1 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc00209b1
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 c9 94 00 00       	jmp    c0011299 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 34 09 02 c0       	push   0xc0020934
c0007e54:	e8 40 94 00 00       	call   c0011299 <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 c7 09 02 c0       	push   0xc00209c7
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 64 09 02 c0       	push   0xc0020964
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 df 09 02 c0       	push   0xc00209df
c000810a:	e8 8a 91 00 00       	call   c0011299 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 88 09 02 c0       	push   0xc0020988
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 ed 09 02 c0       	push   0xc00209ed
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 4c 0a 02 c0       	mov    edx,0xc0020a4c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 09 0a 02 c0       	push   0xc0020a09
c0008331:	e8 63 8f 00 00       	call   c0011299 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000837a:	e8 19 d9 00 00       	call   c0015c98 <schedule()>
c000837f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 43 70 01 00       	call   c001f450 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 26 0a 02 c0       	push   0xc0020a26
c0008422:	e8 72 8e 00 00       	call   c0011299 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 4c 0a 02 c0       	mov    edx,0xc0020a4c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba 94 0a 02 c0       	mov    edx,0xc0020a94
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 da 50 00 00       	call   c000d5e6 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 06 05 01 00       	call   c0018a38 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d c0 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdce40]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d c0 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdce40]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 78 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf88]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 50 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcfb0]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 38 02 01 00       	call   c00188cc <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 95 02 01 00       	jmp    c00189d4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 60 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a60
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 0d 8b 00 00       	jmp    c0011299 <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 3a 38 00 00       	jmp    c000c123 <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be 6e 0a 02 c0       	mov    esi,0xc0020a6e
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 ac fd 00 00       	call   c00189d4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba 94 0a 02 c0       	mov    edx,0xc0020a94
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 7f 0a 02 c0       	push   0xc0020a7f
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 85 0a 02 c0       	push   0xc0020a85
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 5c 0b 02 c0       	mov    edx,0xc0020b5c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 00 32 02 c0       	mov    eax,ds:0xc0023200
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 00 32 02 c0    	mov    DWORD PTR ds:0xc0023200,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 4f 64 01 00       	call   c001f638 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba 78 0b 02 c0       	mov    edx,0xc0020b78
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 5c 0b 02 c0       	mov    edx,0xc0020b5c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 4f 63 01 00       	call   c001f70c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 43 63 01 00       	call   c001f714 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 49 62 01 00       	call   c001f638 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 34 0b 02 c0       	push   0xc0020b34
c0009414:	e8 80 7e 00 00       	call   c0011299 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba 78 0b 02 c0       	mov    edx,0xc0020b78
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 4e 62 01 00       	call   c001f70c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 db 62 01 00       	call   c001f7b6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 99 60 01 00       	call   c001f5f6 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 90 31 02 c0       	push   0xc0023190
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 f4 f5 01 c0       	push   0xc001f5f4
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 08 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023208
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 08 32 02 c0    	mov    ecx,DWORD PTR ds:0xc0023208
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 04 32 02 c0    	mov    ebp,DWORD PTR ds:0xc0023204
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 04 32 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023204,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 04 32 02 c0    	mov    DWORD PTR ds:0xc0023204,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 8c 0b 02 c0       	push   0xc0020b8c
c0009674:	e8 20 7c 00 00       	call   c0011299 <KePanic(char const*)>
c0009679:	8b 2d 04 32 02 c0    	mov    ebp,DWORD PTR ds:0xc0023204
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 04 32 02 c0    	mov    DWORD PTR ds:0xc0023204,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 04 32 02 c0       	mov    eax,ds:0xc0023204
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 04 32 02 c0    	mov    DWORD PTR ds:0xc0023204,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 04 32 02 c0       	mov    ds:0xc0023204,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 0c 32 02 c0    	mov    edx,DWORD PTR ds:0xc002320c
c000973e:	8b 0d 14 32 02 c0    	mov    ecx,DWORD PTR ds:0xc0023214
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 10 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023210
c0009759:	8b 0d 0c 32 02 c0    	mov    ecx,DWORD PTR ds:0xc002320c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 20 0e 02 c0       	push   0xc0020e20
c000979e:	e8 f6 7a 00 00       	call   c0011299 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 37 0e 02 c0       	push   0xc0020e37
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 10 32 02 c0    	mov    DWORD PTR ds:0xc0023210,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 18 32 02 c0 43 	mov    BYTE PTR ds:0xc0023218,0x43
c000984f:	c7 05 0c 32 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002320c,0x8
c0009859:	a3 14 32 02 c0       	mov    ds:0xc0023214,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 10 32 02 c0       	mov    eax,ds:0xc0023210
c0009874:	f7 35 0c 32 02 c0    	div    DWORD PTR ds:0xc002320c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 ac 0b 02 c0       	push   0xc0020bac
c00098af:	e8 e5 79 00 00       	call   c0011299 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 4e 0e 02 c0       	push   0xc0020e4e
c0009981:	e8 13 79 00 00       	call   c0011299 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 d0 0b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020bd0
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 b0 78 00 00       	jmp    c0011299 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 6a 0e 02 c0       	push   0xc0020e6a
c00099f6:	e8 9e 78 00 00       	call   c0011299 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 86 0e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020e86
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 54 78 00 00       	jmp    c0011299 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 f4 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020bf4
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009cee:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 18 0c 02 c0       	push   0xc0020c18
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 80 0c 02 c0       	push   0xc0020c80
c0009d87:	e8 0d 75 00 00       	call   c0011299 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 a4 0c 02 c0       	push   0xc0020ca4
c0009e7b:	e8 19 74 00 00       	call   c0011299 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 d0 0c 02 c0       	push   0xc0020cd0
c0009fd9:	e8 bb 72 00 00       	call   c0011299 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 8a 27 00 00       	call   c000c998 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 a0 0e 02 c0       	push   0xc0020ea0
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 0c 32 02 c0       	mov    eax,ds:0xc002320c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 18 32 02 c0 	movsx  eax,BYTE PTR ds:0xc0023218
c000a2e7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 66 38 00 00       	call   c000db5a <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 0c 32 02 c0    	cmp    DWORD PTR ds:0xc002320c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 f4 0c 02 c0       	push   0xc0020cf4
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 ae 0e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020eae
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 d1 0e 02 c0       	push   0xc0020ed1
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 bf 0e 02 c0       	push   0xc0020ebf
c000a413:	e8 81 6e 00 00       	call   c0011299 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 24 0d 02 c0       	push   0xc0020d24
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 0c 32 02 c0       	mov    eax,ds:0xc002320c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 18 32 02 c0 	movsx  eax,BYTE PTR ds:0xc0023218
c000a4bf:	8b 2c 85 7c 87 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 22 36 00 00       	call   c000daee <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 0c 32 02 c0    	cmp    DWORD PTR ds:0xc002320c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 e4 0e 02 c0       	push   0xc0020ee4
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 44 0d 02 c0       	push   0xc0020d44
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 a4 0d 02 c0 	mov    DWORD PTR [esp],0xc0020da4
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 f9 0e 02 c0       	push   0xc0020ef9
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 0d 0f 02 c0       	push   0xc0020f0d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 20 0f 02 c0       	push   0xc0020f20
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 2d 0f 02 c0       	push   0xc0020f2d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 46 0f 02 c0       	push   0xc0020f46
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 46 0f 02 c0       	push   0xc0020f46
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 4e 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f4e
c000a7ec:	e8 a8 6a 00 00       	call   c0011299 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 66 0f 02 c0       	push   0xc0020f66
c000a7fe:	e8 96 6a 00 00       	call   c0011299 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 7c 0f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf084]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 cc 10 02 c0       	push   0xc00210cc
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 e0 10 02 c0       	push   0xc00210e0
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 ea 10 02 c0       	push   0xc00210ea
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 f4 10 02 c0       	push   0xc00210f4
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 38 12 02 c0       	push   0xc0021238
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 fe 10 02 c0       	push   0xc00210fe
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 58 12 02 c0       	push   0xc0021258
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 13 11 02 c0       	push   0xc0021113
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 2d 11 02 c0       	push   0xc002112d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 20 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcde0]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 80 12 02 c0       	push   0xc0021280
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 38 12 02 c0       	push   0xc0021238
c000ab78:	e8 1c 67 00 00       	call   c0011299 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 c8 12 02 c0       	push   0xc00212c8
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 c8 12 02 c0       	push   0xc00212c8
c000aba7:	e8 ed 66 00 00       	call   c0011299 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 38 11 02 c0       	push   0xc0021138
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 38 11 02 c0       	push   0xc0021138
c000abd3:	e8 c1 66 00 00       	call   c0011299 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 55 11 02 c0       	push   0xc0021155
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 55 11 02 c0       	push   0xc0021155
c000abff:	e8 95 66 00 00       	call   c0011299 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 e8 12 02 c0       	push   0xc00212e8
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 e8 12 02 c0       	push   0xc00212e8
c000ac2b:	e8 69 66 00 00       	call   c0011299 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 0c 13 02 c0       	push   0xc002130c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 0c 13 02 c0       	push   0xc002130c
c000ac57:	e8 3d 66 00 00       	call   c0011299 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 71 11 02 c0       	push   0xc0021171
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 71 11 02 c0       	push   0xc0021171
c000ac83:	e8 11 66 00 00       	call   c0011299 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 8d 11 02 c0       	push   0xc002118d
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 8d 11 02 c0       	push   0xc002118d
c000acaf:	e8 e5 65 00 00       	call   c0011299 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 2c 13 02 c0       	push   0xc002132c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 2c 13 02 c0       	push   0xc002132c
c000acdb:	e8 b9 65 00 00       	call   c0011299 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 50 13 02 c0       	push   0xc0021350
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 50 13 02 c0       	push   0xc0021350
c000ad07:	e8 8d 65 00 00       	call   c0011299 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateSymlinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 c5 66 00 00       	call   c00113e7 <KeRand()>
c000ad22:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateSymlinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 6f 13 02 c0       	push   0xc002136f
c000ad57:	e8 3d 65 00 00       	call   c0011299 <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateSymlinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateSymlinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	6a 01                	push   0x1
c000ad90:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000ad96:	68 78 13 02 c0       	push   0xc0021378
c000ad9b:	89 c3                	mov    ebx,eax
c000ad9d:	50                   	push   eax
c000ad9e:	e8 23 0a 00 00       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c000ada3:	83 c4 20             	add    esp,0x20
c000ada6:	85 db                	test   ebx,ebx
c000ada8:	75 10                	jne    c000adba <KiFlushSymlinkChanges()+0x3b>
c000adaa:	83 ec 0c             	sub    esp,0xc
c000adad:	68 96 13 02 c0       	push   0xc0021396
c000adb2:	e8 e2 64 00 00       	call   c0011299 <KePanic(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	50                   	push   eax
c000adbb:	50                   	push   eax
c000adbc:	6a 06                	push   0x6
c000adbe:	53                   	push   ebx
c000adbf:	e8 e0 0a 00 00       	call   c000b8a4 <File::open(FileOpenMode)>
c000adc4:	83 c4 10             	add    esp,0x10
c000adc7:	85 c0                	test   eax,eax
c000adc9:	74 10                	je     c000addb <KiFlushSymlinkChanges()+0x5c>
c000adcb:	83 ec 0c             	sub    esp,0xc
c000adce:	68 b0 13 02 c0       	push   0xc00213b0
c000add3:	e8 c1 64 00 00       	call   c0011299 <KePanic(char const*)>
c000add8:	83 c4 10             	add    esp,0x10
c000addb:	31 f6                	xor    esi,esi
c000addd:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade3:	7e 40                	jle    c000ae25 <KiFlushSymlinkChanges()+0xa6>
c000ade5:	83 ec 0c             	sub    esp,0xc
c000ade8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adea:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adee:	50                   	push   eax
c000adef:	89 f0                	mov    eax,esi
c000adf1:	c1 e0 08             	shl    eax,0x8
c000adf4:	05 00 60 02 c0       	add    eax,0xc0026000
c000adf9:	50                   	push   eax
c000adfa:	6a 00                	push   0x0
c000adfc:	68 00 01 00 00       	push   0x100
c000ae01:	53                   	push   ebx
c000ae02:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae05:	83 c4 20             	add    esp,0x20
c000ae08:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae10:	74 10                	je     c000ae22 <KiFlushSymlinkChanges()+0xa3>
c000ae12:	83 ec 0c             	sub    esp,0xc
c000ae15:	68 ca 13 02 c0       	push   0xc00213ca
c000ae1a:	e8 7a 64 00 00       	call   c0011299 <KePanic(char const*)>
c000ae1f:	83 c4 10             	add    esp,0x10
c000ae22:	46                   	inc    esi
c000ae23:	eb b8                	jmp    c000addd <KiFlushSymlinkChanges()+0x5e>
c000ae25:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae2f:	83 ec 0c             	sub    esp,0xc
c000ae32:	53                   	push   ebx
c000ae33:	e8 ca 0a 00 00       	call   c000b902 <File::close()>
c000ae38:	83 c4 10             	add    esp,0x10
c000ae3b:	85 db                	test   ebx,ebx
c000ae3d:	74 0c                	je     c000ae4b <KiFlushSymlinkChanges()+0xcc>
c000ae3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae41:	83 ec 0c             	sub    esp,0xc
c000ae44:	53                   	push   ebx
c000ae45:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae48:	83 c4 10             	add    esp,0x10
c000ae4b:	83 c4 14             	add    esp,0x14
c000ae4e:	5b                   	pop    ebx
c000ae4f:	5e                   	pop    esi
c000ae50:	c3                   	ret    

c000ae51 <KiDeinitialiseSymlinks(void*)>:
c000ae51:	e9 29 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae56 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae56:	53                   	push   ebx
c000ae57:	83 ec 0c             	sub    esp,0xc
c000ae5a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae62:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae67:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6b:	68 00 01 00 00       	push   0x100
c000ae70:	6a 00                	push   0x0
c000ae72:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae79:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae80:	c1 e0 08             	shl    eax,0x8
c000ae83:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae88:	50                   	push   eax
c000ae89:	e8 62 56 ff ff       	call   c00004f0 <memset>
c000ae8e:	58                   	pop    eax
c000ae8f:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae94:	5a                   	pop    edx
c000ae95:	c1 e0 08             	shl    eax,0x8
c000ae98:	53                   	push   ebx
c000ae99:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae9e:	50                   	push   eax
c000ae9f:	e8 ac 57 ff ff       	call   c0000650 <strcpy>
c000aea4:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aea9:	83 c4 10             	add    esp,0x10
c000aeac:	40                   	inc    eax
c000aead:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb2:	83 f8 03             	cmp    eax,0x3
c000aeb5:	7e 09                	jle    c000aec0 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb7:	83 c4 08             	add    esp,0x8
c000aeba:	5b                   	pop    ebx
c000aebb:	e9 bf fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec0:	83 c4 08             	add    esp,0x8
c000aec3:	5b                   	pop    ebx
c000aec4:	c3                   	ret    

c000aec5 <KiIsSymlinkRegistered(char const*)>:
c000aec5:	53                   	push   ebx
c000aec6:	31 db                	xor    ebx,ebx
c000aec8:	83 ec 08             	sub    esp,0x8
c000aecb:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000aed1:	7e 30                	jle    c000af03 <KiIsSymlinkRegistered(char const*)+0x3e>
c000aed3:	50                   	push   eax
c000aed4:	50                   	push   eax
c000aed5:	89 d8                	mov    eax,ebx
c000aed7:	c1 e0 08             	shl    eax,0x8
c000aeda:	05 00 60 02 c0       	add    eax,0xc0026000
c000aedf:	50                   	push   eax
c000aee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee4:	e8 97 58 ff ff       	call   c0000780 <strcmp>
c000aee9:	83 c4 10             	add    esp,0x10
c000aeec:	85 c0                	test   eax,eax
c000aeee:	75 10                	jne    c000af00 <KiIsSymlinkRegistered(char const*)+0x3b>
c000aef0:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000aef7:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000aefe:	eb 07                	jmp    c000af07 <KiIsSymlinkRegistered(char const*)+0x42>
c000af00:	43                   	inc    ebx
c000af01:	eb c8                	jmp    c000aecb <KiIsSymlinkRegistered(char const*)+0x6>
c000af03:	31 c0                	xor    eax,eax
c000af05:	31 d2                	xor    edx,edx
c000af07:	83 c4 08             	add    esp,0x8
c000af0a:	5b                   	pop    ebx
c000af0b:	c3                   	ret    

c000af0c <KeDereferenceSymlink(char const*, char*)>:
c000af0c:	55                   	push   ebp
c000af0d:	57                   	push   edi
c000af0e:	56                   	push   esi
c000af0f:	53                   	push   ebx
c000af10:	83 ec 44             	sub    esp,0x44
c000af13:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af17:	56                   	push   esi
c000af18:	68 e4 13 02 c0       	push   0xc00213e4
c000af1d:	e8 e8 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af22:	89 34 24             	mov    DWORD PTR [esp],esi
c000af25:	e8 9b ff ff ff       	call   c000aec5 <KiIsSymlinkRegistered(char const*)>
c000af2a:	83 c4 10             	add    esp,0x10
c000af2d:	89 c7                	mov    edi,eax
c000af2f:	89 d0                	mov    eax,edx
c000af31:	09 f8                	or     eax,edi
c000af33:	0f 84 dd 01 00 00    	je     c000b116 <KeDereferenceSymlink(char const*, char*)+0x20a>
c000af39:	53                   	push   ebx
c000af3a:	89 d5                	mov    ebp,edx
c000af3c:	53                   	push   ebx
c000af3d:	57                   	push   edi
c000af3e:	68 fe 13 02 c0       	push   0xc00213fe
c000af43:	e8 c2 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af48:	58                   	pop    eax
c000af49:	5a                   	pop    edx
c000af4a:	55                   	push   ebp
c000af4b:	68 0c 14 02 c0       	push   0xc002140c
c000af50:	e8 b5 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af55:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af5c:	e8 72 cb ff ff       	call   c0007ad3 <malloc>
c000af61:	6a 01                	push   0x1
c000af63:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af69:	56                   	push   esi
c000af6a:	89 c3                	mov    ebx,eax
c000af6c:	50                   	push   eax
c000af6d:	e8 54 08 00 00       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c000af72:	83 c4 20             	add    esp,0x20
c000af75:	85 db                	test   ebx,ebx
c000af77:	0f 84 68 01 00 00    	je     c000b0e5 <KeDereferenceSymlink(char const*, char*)+0x1d9>
c000af7d:	83 ec 0c             	sub    esp,0xc
c000af80:	68 00 20 02 c0       	push   0xc0022000
c000af85:	e8 80 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af8a:	5a                   	pop    edx
c000af8b:	59                   	pop    ecx
c000af8c:	6a 01                	push   0x1
c000af8e:	53                   	push   ebx
c000af8f:	e8 10 09 00 00       	call   c000b8a4 <File::open(FileOpenMode)>
c000af94:	83 c4 10             	add    esp,0x10
c000af97:	85 c0                	test   eax,eax
c000af99:	74 0b                	je     c000afa6 <KeDereferenceSymlink(char const*, char*)+0x9a>
c000af9b:	83 ec 0c             	sub    esp,0xc
c000af9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afa0:	53                   	push   ebx
c000afa1:	e9 39 01 00 00       	jmp    c000b0df <KeDereferenceSymlink(char const*, char*)+0x1d3>
c000afa6:	83 ec 0c             	sub    esp,0xc
c000afa9:	68 06 0a 02 c0       	push   0xc0020a06
c000afae:	e8 57 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afb3:	58                   	pop    eax
c000afb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afb6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000afba:	56                   	push   esi
c000afbb:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afbf:	52                   	push   edx
c000afc0:	6a 00                	push   0x0
c000afc2:	6a 08                	push   0x8
c000afc4:	53                   	push   ebx
c000afc5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afc8:	83 c4 20             	add    esp,0x20
c000afcb:	85 c0                	test   eax,eax
c000afcd:	0f 85 fe 00 00 00    	jne    c000b0d1 <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000afd3:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000afd8:	0f 85 f3 00 00 00    	jne    c000b0d1 <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000afde:	83 ec 0c             	sub    esp,0xc
c000afe1:	68 32 20 02 c0       	push   0xc0022032
c000afe6:	e8 1f f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afeb:	8d 54 24 20          	lea    edx,[esp+0x20]
c000afef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff1:	89 34 24             	mov    DWORD PTR [esp],esi
c000aff4:	52                   	push   edx
c000aff5:	6a 00                	push   0x0
c000aff7:	6a 08                	push   0x8
c000aff9:	53                   	push   ebx
c000affa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000affd:	83 c4 20             	add    esp,0x20
c000b000:	85 c0                	test   eax,eax
c000b002:	0f 85 c9 00 00 00    	jne    c000b0d1 <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b008:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b00d:	0f 85 be 00 00 00    	jne    c000b0d1 <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b013:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b017:	0f 85 f9 00 00 00    	jne    c000b116 <KeDereferenceSymlink(char const*, char*)+0x20a>
c000b01d:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b021:	0f 85 ef 00 00 00    	jne    c000b116 <KeDereferenceSymlink(char const*, char*)+0x20a>
c000b027:	83 ec 0c             	sub    esp,0xc
c000b02a:	68 1a 14 02 c0       	push   0xc002141a
c000b02f:	e8 d6 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b034:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b03c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b044:	83 c4 0c             	add    esp,0xc
c000b047:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b04b:	50                   	push   eax
c000b04c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b050:	50                   	push   eax
c000b051:	53                   	push   ebx
c000b052:	e8 4f 0b 00 00       	call   c000bba6 <File::stat(unsigned long long*, bool*)>
c000b057:	83 c4 10             	add    esp,0x10
c000b05a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b05f:	75 70                	jne    c000b0d1 <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b061:	b8 0f 00 00 00       	mov    eax,0xf
c000b066:	31 ff                	xor    edi,edi
c000b068:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b06c:	89 f8                	mov    eax,edi
c000b06e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b072:	73 5d                	jae    c000b0d1 <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	68 1a 14 02 c0       	push   0xc002141a
c000b07c:	e8 89 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b081:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b085:	b9 ff 00 00 00       	mov    ecx,0xff
c000b08a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b08e:	83 c0 f0             	add    eax,0xfffffff0
c000b091:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b095:	83 d2 ff             	adc    edx,0xffffffff
c000b098:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09c:	83 c4 10             	add    esp,0x10
c000b09f:	39 c1                	cmp    ecx,eax
c000b0a1:	19 d7                	sbb    edi,edx
c000b0a3:	72 40                	jb     c000b0e5 <KeDereferenceSymlink(char const*, char*)+0x1d9>
c000b0a5:	83 ec 0c             	sub    esp,0xc
c000b0a8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0aa:	56                   	push   esi
c000b0ab:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0af:	52                   	push   edx
c000b0b0:	50                   	push   eax
c000b0b1:	53                   	push   ebx
c000b0b2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0b5:	83 c4 20             	add    esp,0x20
c000b0b8:	85 c0                	test   eax,eax
c000b0ba:	75 15                	jne    c000b0d1 <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b0bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c0:	89 c7                	mov    edi,eax
c000b0c2:	c1 ff 1f             	sar    edi,0x1f
c000b0c5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b0c9:	75 06                	jne    c000b0d1 <KeDereferenceSymlink(char const*, char*)+0x1c5>
c000b0cb:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0cf:	74 19                	je     c000b0ea <KeDereferenceSymlink(char const*, char*)+0x1de>
c000b0d1:	83 ec 0c             	sub    esp,0xc
c000b0d4:	53                   	push   ebx
c000b0d5:	e8 28 08 00 00       	call   c000b902 <File::close()>
c000b0da:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0e2:	83 c4 10             	add    esp,0x10
c000b0e5:	83 c8 ff             	or     eax,0xffffffff
c000b0e8:	eb 2e                	jmp    c000b118 <KeDereferenceSymlink(char const*, char*)+0x20c>
c000b0ea:	83 ec 0c             	sub    esp,0xc
c000b0ed:	68 12 2b 02 c0       	push   0xc0022b12
c000b0f2:	e8 13 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0fa:	e8 03 08 00 00       	call   c000b902 <File::close()>
c000b0ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b101:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b104:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b107:	c7 04 24 1d 14 02 c0 	mov    DWORD PTR [esp],0xc002141d
c000b10e:	e8 f7 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	31 c0                	xor    eax,eax
c000b118:	83 c4 3c             	add    esp,0x3c
c000b11b:	5b                   	pop    ebx
c000b11c:	5e                   	pop    esi
c000b11d:	5f                   	pop    edi
c000b11e:	5d                   	pop    ebp
c000b11f:	c3                   	ret    

c000b120 <KeCreateSymlink(char const*, char const*)>:
c000b120:	55                   	push   ebp
c000b121:	57                   	push   edi
c000b122:	56                   	push   esi
c000b123:	53                   	push   ebx
c000b124:	83 ec 38             	sub    esp,0x38
c000b127:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b12b:	68 14 01 00 00       	push   0x114
c000b130:	e8 9e c9 ff ff       	call   c0007ad3 <malloc>
c000b135:	6a 00                	push   0x0
c000b137:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b13d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b141:	89 c3                	mov    ebx,eax
c000b143:	50                   	push   eax
c000b144:	e8 7d 06 00 00       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c000b149:	83 c4 20             	add    esp,0x20
c000b14c:	85 db                	test   ebx,ebx
c000b14e:	b8 01 00 00 00       	mov    eax,0x1
c000b153:	0f 84 fb 00 00 00    	je     c000b254 <KeCreateSymlink(char const*, char const*)+0x134>
c000b159:	52                   	push   edx
c000b15a:	52                   	push   edx
c000b15b:	6a 12                	push   0x12
c000b15d:	53                   	push   ebx
c000b15e:	e8 41 07 00 00       	call   c000b8a4 <File::open(FileOpenMode)>
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	85 c0                	test   eax,eax
c000b168:	74 0b                	je     c000b175 <KeCreateSymlink(char const*, char const*)+0x55>
c000b16a:	83 ec 0c             	sub    esp,0xc
c000b16d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b16f:	53                   	push   ebx
c000b170:	e9 d4 00 00 00       	jmp    c000b249 <KeCreateSymlink(char const*, char const*)+0x129>
c000b175:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b179:	be 20 14 02 c0       	mov    esi,0xc0021420
c000b17e:	b9 09 00 00 00       	mov    ecx,0x9
c000b183:	fc                   	cld    
c000b184:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b186:	83 ec 0c             	sub    esp,0xc
c000b189:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b18d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b18f:	56                   	push   esi
c000b190:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b194:	52                   	push   edx
c000b195:	6a 00                	push   0x0
c000b197:	6a 08                	push   0x8
c000b199:	53                   	push   ebx
c000b19a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b19d:	83 c4 20             	add    esp,0x20
c000b1a0:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1a5:	0f 85 90 00 00 00    	jne    c000b23b <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1ab:	85 c0                	test   eax,eax
c000b1ad:	0f 85 88 00 00 00    	jne    c000b23b <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1b3:	e8 5c fb ff ff       	call   c000ad14 <KiCreateSymlinkID()>
c000b1b8:	83 ec 0c             	sub    esp,0xc
c000b1bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b1c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c5:	56                   	push   esi
c000b1c6:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1ca:	52                   	push   edx
c000b1cb:	6a 00                	push   0x0
c000b1cd:	6a 08                	push   0x8
c000b1cf:	53                   	push   ebx
c000b1d0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1d3:	83 c4 20             	add    esp,0x20
c000b1d6:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1db:	75 5e                	jne    c000b23b <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1dd:	85 c0                	test   eax,eax
c000b1df:	75 5a                	jne    c000b23b <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1e3:	83 ec 0c             	sub    esp,0xc
c000b1e6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b1e9:	55                   	push   ebp
c000b1ea:	e8 91 53 ff ff       	call   c0000580 <strlen>
c000b1ef:	31 d2                	xor    edx,edx
c000b1f1:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1f4:	55                   	push   ebp
c000b1f5:	52                   	push   edx
c000b1f6:	50                   	push   eax
c000b1f7:	53                   	push   ebx
c000b1f8:	ff d7                	call   edi
c000b1fa:	83 c4 14             	add    esp,0x14
c000b1fd:	55                   	push   ebp
c000b1fe:	89 c6                	mov    esi,eax
c000b200:	e8 7b 53 ff ff       	call   c0000580 <strlen>
c000b205:	83 c4 10             	add    esp,0x10
c000b208:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b20c:	75 2d                	jne    c000b23b <KeCreateSymlink(char const*, char const*)+0x11b>
c000b20e:	85 f6                	test   esi,esi
c000b210:	75 29                	jne    c000b23b <KeCreateSymlink(char const*, char const*)+0x11b>
c000b212:	50                   	push   eax
c000b213:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b217:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b21f:	e8 32 fc ff ff       	call   c000ae56 <KeRegisterSymlink(char const*, unsigned long long)>
c000b224:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b227:	e8 d6 06 00 00       	call   c000b902 <File::close()>
c000b22c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b22e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b231:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b234:	83 c4 10             	add    esp,0x10
c000b237:	31 c0                	xor    eax,eax
c000b239:	eb 19                	jmp    c000b254 <KeCreateSymlink(char const*, char const*)+0x134>
c000b23b:	83 ec 0c             	sub    esp,0xc
c000b23e:	53                   	push   ebx
c000b23f:	e8 be 06 00 00       	call   c000b902 <File::close()>
c000b244:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b246:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b249:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b24c:	83 c4 10             	add    esp,0x10
c000b24f:	b8 01 00 00 00       	mov    eax,0x1
c000b254:	83 c4 2c             	add    esp,0x2c
c000b257:	5b                   	pop    ebx
c000b258:	5e                   	pop    esi
c000b259:	5f                   	pop    edi
c000b25a:	5d                   	pop    ebp
c000b25b:	c3                   	ret    

c000b25c <KeInitialiseSymlinks()>:
c000b25c:	53                   	push   ebx
c000b25d:	83 ec 10             	sub    esp,0x10
c000b260:	6a 00                	push   0x0
c000b262:	68 51 ae 00 c0       	push   0xc000ae51
c000b267:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b271:	e8 3c 58 00 00       	call   c0010ab2 <KeRegisterAtexit(void (*)(void*), void*)>
c000b276:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b27d:	e8 51 c8 ff ff       	call   c0007ad3 <malloc>
c000b282:	6a 01                	push   0x1
c000b284:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b28a:	68 78 13 02 c0       	push   0xc0021378
c000b28f:	89 c3                	mov    ebx,eax
c000b291:	50                   	push   eax
c000b292:	e8 2f 05 00 00       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c000b297:	83 c4 20             	add    esp,0x20
c000b29a:	85 db                	test   ebx,ebx
c000b29c:	75 10                	jne    c000b2ae <KeInitialiseSymlinks()+0x52>
c000b29e:	83 ec 0c             	sub    esp,0xc
c000b2a1:	68 29 14 02 c0       	push   0xc0021429
c000b2a6:	e8 ee 5f 00 00       	call   c0011299 <KePanic(char const*)>
c000b2ab:	83 c4 10             	add    esp,0x10
c000b2ae:	83 ec 0c             	sub    esp,0xc
c000b2b1:	53                   	push   ebx
c000b2b2:	e8 b1 08 00 00       	call   c000bb68 <File::exists()>
c000b2b7:	83 c4 10             	add    esp,0x10
c000b2ba:	84 c0                	test   al,al
c000b2bc:	75 2d                	jne    c000b2eb <KeInitialiseSymlinks()+0x8f>
c000b2be:	52                   	push   edx
c000b2bf:	52                   	push   edx
c000b2c0:	6a 12                	push   0x12
c000b2c2:	53                   	push   ebx
c000b2c3:	e8 dc 05 00 00       	call   c000b8a4 <File::open(FileOpenMode)>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	85 c0                	test   eax,eax
c000b2cd:	74 10                	je     c000b2df <KeInitialiseSymlinks()+0x83>
c000b2cf:	83 ec 0c             	sub    esp,0xc
c000b2d2:	68 46 14 02 c0       	push   0xc0021446
c000b2d7:	e8 bd 5f 00 00       	call   c0011299 <KePanic(char const*)>
c000b2dc:	83 c4 10             	add    esp,0x10
c000b2df:	83 ec 0c             	sub    esp,0xc
c000b2e2:	53                   	push   ebx
c000b2e3:	e8 1a 06 00 00       	call   c000b902 <File::close()>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	85 db                	test   ebx,ebx
c000b2ed:	74 0c                	je     c000b2fb <KeInitialiseSymlinks()+0x9f>
c000b2ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2f1:	83 ec 0c             	sub    esp,0xc
c000b2f4:	53                   	push   ebx
c000b2f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	50                   	push   eax
c000b2fc:	50                   	push   eax
c000b2fd:	68 63 14 02 c0       	push   0xc0021463
c000b302:	68 71 14 02 c0       	push   0xc0021471
c000b307:	e8 14 fe ff ff       	call   c000b120 <KeCreateSymlink(char const*, char const*)>
c000b30c:	83 c4 18             	add    esp,0x18
c000b30f:	5b                   	pop    ebx
c000b310:	c3                   	ret    
c000b311:	90                   	nop

c000b312 <File::read(unsigned long long, void*, int*)>:
c000b312:	53                   	push   ebx
c000b313:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b317:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b31b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b322:	83 f8 19             	cmp    eax,0x19
c000b325:	77 35                	ja     c000b35c <File::read(unsigned long long, void*, int*)+0x4a>
c000b327:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b32e:	85 c0                	test   eax,eax
c000b330:	74 2a                	je     c000b35c <File::read(unsigned long long, void*, int*)+0x4a>
c000b332:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b338:	85 c0                	test   eax,eax
c000b33a:	74 20                	je     c000b35c <File::read(unsigned long long, void*, int*)+0x4a>
c000b33c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b340:	74 21                	je     c000b363 <File::read(unsigned long long, void*, int*)+0x51>
c000b342:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b344:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b348:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b34e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b352:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b356:	5b                   	pop    ebx
c000b357:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b35a:	ff e0                	jmp    eax
c000b35c:	b8 0b 00 00 00       	mov    eax,0xb
c000b361:	eb 05                	jmp    c000b368 <File::read(unsigned long long, void*, int*)+0x56>
c000b363:	b8 05 00 00 00       	mov    eax,0x5
c000b368:	5b                   	pop    ebx
c000b369:	c3                   	ret    

c000b36a <File::write(unsigned long long, void*, int*)>:
c000b36a:	53                   	push   ebx
c000b36b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b36f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b373:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b37a:	83 f8 19             	cmp    eax,0x19
c000b37d:	77 35                	ja     c000b3b4 <File::write(unsigned long long, void*, int*)+0x4a>
c000b37f:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b386:	85 c0                	test   eax,eax
c000b388:	74 2a                	je     c000b3b4 <File::write(unsigned long long, void*, int*)+0x4a>
c000b38a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b390:	85 c0                	test   eax,eax
c000b392:	74 20                	je     c000b3b4 <File::write(unsigned long long, void*, int*)+0x4a>
c000b394:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b398:	74 21                	je     c000b3bb <File::write(unsigned long long, void*, int*)+0x51>
c000b39a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b39c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3a0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	5b                   	pop    ebx
c000b3af:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3b2:	ff e0                	jmp    eax
c000b3b4:	b8 0b 00 00 00       	mov    eax,0xb
c000b3b9:	eb 05                	jmp    c000b3c0 <File::write(unsigned long long, void*, int*)+0x56>
c000b3bb:	b8 05 00 00 00       	mov    eax,0x5
c000b3c0:	5b                   	pop    ebx
c000b3c1:	c3                   	ret    

c000b3c2 <Directory::read(unsigned long long, void*, int*)>:
c000b3c2:	53                   	push   ebx
c000b3c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3cb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3d2:	83 f8 19             	cmp    eax,0x19
c000b3d5:	77 35                	ja     c000b40c <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3d7:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3de:	85 c0                	test   eax,eax
c000b3e0:	74 2a                	je     c000b40c <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3e2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3e8:	85 c0                	test   eax,eax
c000b3ea:	74 20                	je     c000b40c <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3f0:	74 21                	je     c000b413 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b3f2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3f4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3f8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b402:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b406:	5b                   	pop    ebx
c000b407:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b40a:	ff e0                	jmp    eax
c000b40c:	b8 0b 00 00 00       	mov    eax,0xb
c000b411:	eb 05                	jmp    c000b418 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b413:	b8 05 00 00 00       	mov    eax,0x5
c000b418:	5b                   	pop    ebx
c000b419:	c3                   	ret    

c000b41a <Directory::write(unsigned long long, void*, int*)>:
c000b41a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b41e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b425:	b8 0b 00 00 00       	mov    eax,0xb
c000b42a:	83 fa 19             	cmp    edx,0x19
c000b42d:	77 18                	ja     c000b447 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b42f:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b436:	85 d2                	test   edx,edx
c000b438:	74 0d                	je     c000b447 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b43a:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b441:	19 c0                	sbb    eax,eax
c000b443:	83 e0 0a             	and    eax,0xa
c000b446:	40                   	inc    eax
c000b447:	c3                   	ret    

c000b448 <File::isAtty()>:
c000b448:	31 c0                	xor    eax,eax
c000b44a:	c3                   	ret    
c000b44b:	90                   	nop

c000b44c <Directory::isAtty()>:
c000b44c:	31 c0                	xor    eax,eax
c000b44e:	c3                   	ret    
c000b44f:	90                   	nop

c000b450 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b450:	b8 0a 00 00 00       	mov    eax,0xa
c000b455:	c3                   	ret    

c000b456 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b456:	b8 0a 00 00 00       	mov    eax,0xa
c000b45b:	c3                   	ret    

c000b45c <Filesystem::allocateSwapfile(char const*, int)>:
c000b45c:	31 c0                	xor    eax,eax
c000b45e:	31 d2                	xor    edx,edx
c000b460:	c3                   	ret    
c000b461:	90                   	nop

c000b462 <File::~File()>:
c000b462:	83 ec 0c             	sub    esp,0xc
c000b465:	ba 2c 15 02 c0       	mov    edx,0xc002152c
c000b46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46e:	89 10                	mov    DWORD PTR [eax],edx
c000b470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b474:	83 ec 0c             	sub    esp,0xc
c000b477:	50                   	push   eax
c000b478:	e8 0f df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b47d:	83 c4 10             	add    esp,0x10
c000b480:	90                   	nop
c000b481:	83 c4 0c             	add    esp,0xc
c000b484:	c3                   	ret    
c000b485:	90                   	nop

c000b486 <File::~File()>:
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	83 ec 0c             	sub    esp,0xc
c000b48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b490:	e8 cd ff ff ff       	call   c000b462 <File::~File()>
c000b495:	83 c4 10             	add    esp,0x10
c000b498:	83 ec 08             	sub    esp,0x8
c000b49b:	68 14 01 00 00       	push   0x114
c000b4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a4:	e8 63 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4a9:	83 c4 10             	add    esp,0x10
c000b4ac:	83 c4 0c             	add    esp,0xc
c000b4af:	c3                   	ret    

c000b4b0 <Directory::~Directory()>:
c000b4b0:	83 ec 0c             	sub    esp,0xc
c000b4b3:	ba 48 15 02 c0       	mov    edx,0xc0021548
c000b4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4bc:	89 10                	mov    DWORD PTR [eax],edx
c000b4be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c2:	83 ec 0c             	sub    esp,0xc
c000b4c5:	50                   	push   eax
c000b4c6:	e8 c1 de ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b4cb:	83 c4 10             	add    esp,0x10
c000b4ce:	90                   	nop
c000b4cf:	83 c4 0c             	add    esp,0xc
c000b4d2:	c3                   	ret    
c000b4d3:	90                   	nop

c000b4d4 <Directory::~Directory()>:
c000b4d4:	83 ec 0c             	sub    esp,0xc
c000b4d7:	83 ec 0c             	sub    esp,0xc
c000b4da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4de:	e8 cd ff ff ff       	call   c000b4b0 <Directory::~Directory()>
c000b4e3:	83 c4 10             	add    esp,0x10
c000b4e6:	83 ec 08             	sub    esp,0x8
c000b4e9:	68 14 01 00 00       	push   0x114
c000b4ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f2:	e8 15 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4f7:	83 c4 10             	add    esp,0x10
c000b4fa:	83 c4 0c             	add    esp,0xc
c000b4fd:	c3                   	ret    

c000b4fe <Filesystem::Filesystem()>:
c000b4fe:	ba c0 14 02 c0       	mov    edx,0xc00214c0
c000b503:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b507:	89 10                	mov    DWORD PTR [eax],edx
c000b509:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b50f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b513:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b51a:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b51f:	90                   	nop
c000b520:	c3                   	ret    
c000b521:	90                   	nop

c000b522 <Filesystem::~Filesystem()>:
c000b522:	ba c0 14 02 c0       	mov    edx,0xc00214c0
c000b527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52b:	89 10                	mov    DWORD PTR [eax],edx
c000b52d:	90                   	nop
c000b52e:	c3                   	ret    
c000b52f:	90                   	nop

c000b530 <Filesystem::~Filesystem()>:
c000b530:	83 ec 0c             	sub    esp,0xc
c000b533:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b537:	e8 e6 ff ff ff       	call   c000b522 <Filesystem::~Filesystem()>
c000b53c:	83 c4 04             	add    esp,0x4
c000b53f:	83 ec 08             	sub    esp,0x8
c000b542:	6a 08                	push   0x8
c000b544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b548:	e8 bf f2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b54d:	83 c4 10             	add    esp,0x10
c000b550:	83 c4 0c             	add    esp,0xc
c000b553:	c3                   	ret    

c000b554 <Fs::getcwd(Process*, char*, int)>:
c000b554:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b558:	31 c0                	xor    eax,eax
c000b55a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b55e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b561:	7d 15                	jge    c000b578 <Fs::getcwd(Process*, char*, int)+0x24>
c000b563:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b567:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b56e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b571:	84 c9                	test   cl,cl
c000b573:	74 06                	je     c000b57b <Fs::getcwd(Process*, char*, int)+0x27>
c000b575:	40                   	inc    eax
c000b576:	eb e2                	jmp    c000b55a <Fs::getcwd(Process*, char*, int)+0x6>
c000b578:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b57b:	31 c0                	xor    eax,eax
c000b57d:	c3                   	ret    

c000b57e <Fs::initVFS()>:
c000b57e:	83 ec 18             	sub    esp,0x18
c000b581:	6a 08                	push   0x8
c000b583:	e8 4b c5 ff ff       	call   c0007ad3 <malloc>
c000b588:	89 04 24             	mov    DWORD PTR [esp],eax
c000b58b:	e8 78 e2 00 00       	call   c0019808 <FAT::FAT()>
c000b590:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b597:	e8 37 c5 ff ff       	call   c0007ad3 <malloc>
c000b59c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b59f:	e8 92 f1 00 00       	call   c001a736 <ISO9660::ISO9660()>
c000b5a4:	83 c4 1c             	add    esp,0x1c
c000b5a7:	c3                   	ret    

c000b5a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5a8:	55                   	push   ebp
c000b5a9:	57                   	push   edi
c000b5aa:	56                   	push   esi
c000b5ab:	53                   	push   ebx
c000b5ac:	81 ec 20 04 00 00    	sub    esp,0x420
c000b5b2:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b5b9:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b5c0:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b5c7:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b5ce:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b5d2:	68 00 04 00 00       	push   0x400
c000b5d7:	6a 00                	push   0x0
c000b5d9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b5dd:	57                   	push   edi
c000b5de:	e8 0d 4f ff ff       	call   c00004f0 <memset>
c000b5e3:	83 c4 10             	add    esp,0x10
c000b5e6:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b5ea:	75 0b                	jne    c000b5f7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b5ec:	50                   	push   eax
c000b5ed:	50                   	push   eax
c000b5ee:	56                   	push   esi
c000b5ef:	57                   	push   edi
c000b5f0:	e8 5b 50 ff ff       	call   c0000650 <strcpy>
c000b5f5:	eb 45                	jmp    c000b63c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b5f7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b5fa:	83 f8 2f             	cmp    eax,0x2f
c000b5fd:	74 05                	je     c000b604 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b5ff:	83 f8 5c             	cmp    eax,0x5c
c000b602:	75 19                	jne    c000b61d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b604:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b607:	3c 60                	cmp    al,0x60
c000b609:	7e 03                	jle    c000b60e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b60b:	83 e8 20             	sub    eax,0x20
c000b60e:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b612:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b619:	50                   	push   eax
c000b61a:	50                   	push   eax
c000b61b:	eb 18                	jmp    c000b635 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b61d:	50                   	push   eax
c000b61e:	50                   	push   eax
c000b61f:	55                   	push   ebp
c000b620:	57                   	push   edi
c000b621:	e8 2a 50 ff ff       	call   c0000650 <strcpy>
c000b626:	58                   	pop    eax
c000b627:	5a                   	pop    edx
c000b628:	68 83 24 02 c0       	push   0xc0022483
c000b62d:	57                   	push   edi
c000b62e:	e8 3d 52 ff ff       	call   c0000870 <strcat>
c000b633:	59                   	pop    ecx
c000b634:	5d                   	pop    ebp
c000b635:	56                   	push   esi
c000b636:	57                   	push   edi
c000b637:	e8 34 52 ff ff       	call   c0000870 <strcat>
c000b63c:	83 c4 10             	add    esp,0x10
c000b63f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b643:	3c 60                	cmp    al,0x60
c000b645:	7e 03                	jle    c000b64a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b647:	83 e8 20             	sub    eax,0x20
c000b64a:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b64e:	be 03 00 00 00       	mov    esi,0x3
c000b653:	88 03                	mov    BYTE PTR [ebx],al
c000b655:	b8 03 00 00 00       	mov    eax,0x3
c000b65a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b661:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b667:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b66b:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b670:	89 fa                	mov    edx,edi
c000b672:	0f be ea             	movsx  ebp,dl
c000b675:	85 ed                	test   ebp,ebp
c000b677:	0f 84 a1 00 00 00    	je     c000b71e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b67d:	8d 56 01             	lea    edx,[esi+0x1]
c000b680:	83 fd 2f             	cmp    ebp,0x2f
c000b683:	74 05                	je     c000b68a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b685:	83 fd 5c             	cmp    ebp,0x5c
c000b688:	75 12                	jne    c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b68a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b68f:	89 c5                	mov    ebp,eax
c000b691:	74 09                	je     c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b693:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b697:	40                   	inc    eax
c000b698:	89 d6                	mov    esi,edx
c000b69a:	eb cf                	jmp    c000b66b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b69c:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b6a1:	89 f9                	mov    ecx,edi
c000b6a3:	0f be e9             	movsx  ebp,cl
c000b6a6:	75 61                	jne    c000b709 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6a8:	83 fd 2e             	cmp    ebp,0x2e
c000b6ab:	75 5c                	jne    c000b709 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6ad:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b6b2:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b6b7:	74 19                	je     c000b6d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b6b9:	83 fd 2e             	cmp    ebp,0x2e
c000b6bc:	74 55                	je     c000b713 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6be:	89 f2                	mov    edx,esi
c000b6c0:	42                   	inc    edx
c000b6c1:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6c6:	83 f9 2f             	cmp    ecx,0x2f
c000b6c9:	74 f5                	je     c000b6c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6cb:	83 f9 5c             	cmp    ecx,0x5c
c000b6ce:	74 f0                	je     c000b6c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6d0:	eb c6                	jmp    c000b698 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6d2:	83 fd 2e             	cmp    ebp,0x2e
c000b6d5:	74 3c                	je     c000b713 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6d7:	83 f8 03             	cmp    eax,0x3
c000b6da:	74 bc                	je     c000b698 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6dc:	42                   	inc    edx
c000b6dd:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6e2:	83 f9 2f             	cmp    ecx,0x2f
c000b6e5:	74 f5                	je     c000b6dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6e7:	83 f9 5c             	cmp    ecx,0x5c
c000b6ea:	74 f0                	je     c000b6dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6ec:	48                   	dec    eax
c000b6ed:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6f1:	75 06                	jne    c000b6f9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b6f3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6f7:	eb f3                	jmp    c000b6ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b6f9:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6fd:	74 07                	je     c000b706 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b6ff:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b703:	48                   	dec    eax
c000b704:	eb f3                	jmp    c000b6f9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b706:	40                   	inc    eax
c000b707:	eb 8f                	jmp    c000b698 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b709:	83 fd 2f             	cmp    ebp,0x2f
c000b70c:	74 8a                	je     c000b698 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b70e:	83 fd 5c             	cmp    ebp,0x5c
c000b711:	74 85                	je     c000b698 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b713:	89 f9                	mov    ecx,edi
c000b715:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b718:	40                   	inc    eax
c000b719:	e9 7a ff ff ff       	jmp    c000b698 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b71e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b722:	83 ec 0c             	sub    esp,0xc
c000b725:	53                   	push   ebx
c000b726:	e8 55 4e ff ff       	call   c0000580 <strlen>
c000b72b:	83 c4 10             	add    esp,0x10
c000b72e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b733:	74 1c                	je     c000b751 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b735:	83 ec 0c             	sub    esp,0xc
c000b738:	53                   	push   ebx
c000b739:	e8 42 4e ff ff       	call   c0000580 <strlen>
c000b73e:	83 c4 10             	add    esp,0x10
c000b741:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b746:	74 09                	je     c000b751 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b748:	31 ff                	xor    edi,edi
c000b74a:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b74f:	eb 4c                	jmp    c000b79d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000b751:	83 ec 0c             	sub    esp,0xc
c000b754:	53                   	push   ebx
c000b755:	e8 26 4e ff ff       	call   c0000580 <strlen>
c000b75a:	83 c4 10             	add    esp,0x10
c000b75d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b762:	74 e4                	je     c000b748 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000b764:	83 ec 0c             	sub    esp,0xc
c000b767:	53                   	push   ebx
c000b768:	e8 13 4e ff ff       	call   c0000580 <strlen>
c000b76d:	83 c4 10             	add    esp,0x10
c000b770:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b775:	eb ab                	jmp    c000b722 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000b777:	50                   	push   eax
c000b778:	50                   	push   eax
c000b779:	53                   	push   ebx
c000b77a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b77e:	55                   	push   ebp
c000b77f:	e8 cc 4e ff ff       	call   c0000650 <strcpy>
c000b784:	5a                   	pop    edx
c000b785:	59                   	pop    ecx
c000b786:	53                   	push   ebx
c000b787:	55                   	push   ebp
c000b788:	e8 7f f7 ff ff       	call   c000af0c <KeDereferenceSymlink(char const*, char*)>
c000b78d:	83 c4 10             	add    esp,0x10
c000b790:	48                   	dec    eax
c000b791:	75 27                	jne    c000b7ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000b793:	8d 47 01             	lea    eax,[edi+0x1]
c000b796:	83 ff 14             	cmp    edi,0x14
c000b799:	74 08                	je     c000b7a3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1fb>
c000b79b:	89 c7                	mov    edi,eax
c000b79d:	85 f6                	test   esi,esi
c000b79f:	75 d6                	jne    c000b777 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000b7a1:	eb 17                	jmp    c000b7ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000b7a3:	83 ec 0c             	sub    esp,0xc
c000b7a6:	bf 15 00 00 00       	mov    edi,0x15
c000b7ab:	68 8f 14 02 c0       	push   0xc002148f
c000b7b0:	e8 e4 5a 00 00       	call   c0011299 <KePanic(char const*)>
c000b7b5:	83 c4 10             	add    esp,0x10
c000b7b8:	eb e3                	jmp    c000b79d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000b7ba:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b7c0:	5b                   	pop    ebx
c000b7c1:	5e                   	pop    esi
c000b7c2:	5f                   	pop    edi
c000b7c3:	5d                   	pop    ebp
c000b7c4:	c3                   	ret    
c000b7c5:	90                   	nop

c000b7c6 <File::File(char const*, Process*, bool)>:
c000b7c6:	83 ec 1c             	sub    esp,0x1c
c000b7c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b7cd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7d5:	83 ec 08             	sub    esp,0x8
c000b7d8:	6a 00                	push   0x0
c000b7da:	50                   	push   eax
c000b7db:	e8 c6 d9 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b7e0:	83 c4 10             	add    esp,0x10
c000b7e3:	ba 2c 15 02 c0       	mov    edx,0xc002152c
c000b7e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7ec:	89 10                	mov    DWORD PTR [eax],edx
c000b7ee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b7f3:	85 c0                	test   eax,eax
c000b7f5:	74 0f                	je     c000b806 <File::File(char const*, Process*, bool)+0x40>
c000b7f7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b7fc:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000b800:	74 04                	je     c000b806 <File::File(char const*, Process*, bool)+0x40>
c000b802:	b0 01                	mov    al,0x1
c000b804:	eb 02                	jmp    c000b808 <File::File(char const*, Process*, bool)+0x42>
c000b806:	b0 00                	mov    al,0x0
c000b808:	0f b6 c0             	movzx  eax,al
c000b80b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b80f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b815:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b819:	83 c2 0d             	add    edx,0xd
c000b81c:	50                   	push   eax
c000b81d:	51                   	push   ecx
c000b81e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b822:	52                   	push   edx
c000b823:	e8 80 fd ff ff       	call   c000b5a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b828:	83 c4 10             	add    esp,0x10
c000b82b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b82f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b832:	83 e8 41             	sub    eax,0x41
c000b835:	88 c2                	mov    dl,al
c000b837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b83b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b841:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b845:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b849:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b84d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b853:	0f b6 c0             	movzx  eax,al
c000b856:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b85d:	85 c0                	test   eax,eax
c000b85f:	74 3e                	je     c000b89f <File::File(char const*, Process*, bool)+0xd9>
c000b861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b865:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b86b:	0f b6 c0             	movzx  eax,al
c000b86e:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b875:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b87b:	85 c0                	test   eax,eax
c000b87d:	75 20                	jne    c000b89f <File::File(char const*, Process*, bool)+0xd9>
c000b87f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b883:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b889:	0f b6 c0             	movzx  eax,al
c000b88c:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b893:	83 ec 0c             	sub    esp,0xc
c000b896:	50                   	push   eax
c000b897:	e8 90 21 00 00       	call   c000da2c <LogicalDisk::mount()>
c000b89c:	83 c4 10             	add    esp,0x10
c000b89f:	90                   	nop
c000b8a0:	83 c4 1c             	add    esp,0x1c
c000b8a3:	c3                   	ret    

c000b8a4 <File::open(FileOpenMode)>:
c000b8a4:	53                   	push   ebx
c000b8a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b8aa:	83 ec 08             	sub    esp,0x8
c000b8ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b8b1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b8b8:	83 fa 19             	cmp    edx,0x19
c000b8bb:	77 40                	ja     c000b8fd <File::open(FileOpenMode)+0x59>
c000b8bd:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b8c4:	85 d2                	test   edx,edx
c000b8c6:	74 35                	je     c000b8fd <File::open(FileOpenMode)+0x59>
c000b8c8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8ce:	85 d2                	test   edx,edx
c000b8d0:	74 2b                	je     c000b8fd <File::open(FileOpenMode)+0x59>
c000b8d2:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b8d6:	b8 06 00 00 00       	mov    eax,0x6
c000b8db:	75 20                	jne    c000b8fd <File::open(FileOpenMode)+0x59>
c000b8dd:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8df:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8e9:	51                   	push   ecx
c000b8ea:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b8ed:	51                   	push   ecx
c000b8ee:	52                   	push   edx
c000b8ef:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	85 c0                	test   eax,eax
c000b8f7:	75 04                	jne    c000b8fd <File::open(FileOpenMode)+0x59>
c000b8f9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b8fd:	83 c4 08             	add    esp,0x8
c000b900:	5b                   	pop    ebx
c000b901:	c3                   	ret    

c000b902 <File::close()>:
c000b902:	53                   	push   ebx
c000b903:	b8 0b 00 00 00       	mov    eax,0xb
c000b908:	83 ec 08             	sub    esp,0x8
c000b90b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b90f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b916:	83 f9 19             	cmp    ecx,0x19
c000b919:	77 41                	ja     c000b95c <File::close()+0x5a>
c000b91b:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b922:	85 db                	test   ebx,ebx
c000b924:	74 36                	je     c000b95c <File::close()+0x5a>
c000b926:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b92d:	74 2d                	je     c000b95c <File::close()+0x5a>
c000b92f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b933:	b8 05 00 00 00       	mov    eax,0x5
c000b938:	74 22                	je     c000b95c <File::close()+0x5a>
c000b93a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b93e:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b945:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b94b:	53                   	push   ebx
c000b94c:	53                   	push   ebx
c000b94d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b94f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b955:	50                   	push   eax
c000b956:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b959:	83 c4 10             	add    esp,0x10
c000b95c:	83 c4 08             	add    esp,0x8
c000b95f:	5b                   	pop    ebx
c000b960:	c3                   	ret    
c000b961:	90                   	nop

c000b962 <File::seek(unsigned long long)>:
c000b962:	56                   	push   esi
c000b963:	b8 0b 00 00 00       	mov    eax,0xb
c000b968:	53                   	push   ebx
c000b969:	51                   	push   ecx
c000b96a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b96e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b972:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b976:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b97d:	83 fa 19             	cmp    edx,0x19
c000b980:	77 31                	ja     c000b9b3 <File::seek(unsigned long long)+0x51>
c000b982:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b989:	85 d2                	test   edx,edx
c000b98b:	74 26                	je     c000b9b3 <File::seek(unsigned long long)+0x51>
c000b98d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b993:	85 d2                	test   edx,edx
c000b995:	74 1c                	je     c000b9b3 <File::seek(unsigned long long)+0x51>
c000b997:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b99b:	b8 05 00 00 00       	mov    eax,0x5
c000b9a0:	74 11                	je     c000b9b3 <File::seek(unsigned long long)+0x51>
c000b9a2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9a4:	53                   	push   ebx
c000b9a5:	51                   	push   ecx
c000b9a6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b9ac:	52                   	push   edx
c000b9ad:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9b0:	83 c4 10             	add    esp,0x10
c000b9b3:	5a                   	pop    edx
c000b9b4:	5b                   	pop    ebx
c000b9b5:	5e                   	pop    esi
c000b9b6:	c3                   	ret    
c000b9b7:	90                   	nop

c000b9b8 <File::truncate(unsigned long long)>:
c000b9b8:	56                   	push   esi
c000b9b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b9be:	53                   	push   ebx
c000b9bf:	51                   	push   ecx
c000b9c0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9c8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9cc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9d3:	83 fa 19             	cmp    edx,0x19
c000b9d6:	77 31                	ja     c000ba09 <File::truncate(unsigned long long)+0x51>
c000b9d8:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9df:	85 d2                	test   edx,edx
c000b9e1:	74 26                	je     c000ba09 <File::truncate(unsigned long long)+0x51>
c000b9e3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9e9:	85 d2                	test   edx,edx
c000b9eb:	74 1c                	je     c000ba09 <File::truncate(unsigned long long)+0x51>
c000b9ed:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b9f1:	b8 05 00 00 00       	mov    eax,0x5
c000b9f6:	74 11                	je     c000ba09 <File::truncate(unsigned long long)+0x51>
c000b9f8:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9fa:	53                   	push   ebx
c000b9fb:	51                   	push   ecx
c000b9fc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba02:	52                   	push   edx
c000ba03:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ba06:	83 c4 10             	add    esp,0x10
c000ba09:	5a                   	pop    edx
c000ba0a:	5b                   	pop    ebx
c000ba0b:	5e                   	pop    esi
c000ba0c:	c3                   	ret    
c000ba0d:	90                   	nop

c000ba0e <File::tell(unsigned long long*)>:
c000ba0e:	83 ec 0c             	sub    esp,0xc
c000ba11:	b8 0b 00 00 00       	mov    eax,0xb
c000ba16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba1a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ba21:	83 fa 19             	cmp    edx,0x19
c000ba24:	77 34                	ja     c000ba5a <File::tell(unsigned long long*)+0x4c>
c000ba26:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba2d:	85 d2                	test   edx,edx
c000ba2f:	74 29                	je     c000ba5a <File::tell(unsigned long long*)+0x4c>
c000ba31:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba37:	85 d2                	test   edx,edx
c000ba39:	74 1f                	je     c000ba5a <File::tell(unsigned long long*)+0x4c>
c000ba3b:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ba3f:	b8 05 00 00 00       	mov    eax,0x5
c000ba44:	74 14                	je     c000ba5a <File::tell(unsigned long long*)+0x4c>
c000ba46:	50                   	push   eax
c000ba47:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba4d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ba53:	52                   	push   edx
c000ba54:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ba57:	83 c4 10             	add    esp,0x10
c000ba5a:	83 c4 0c             	add    esp,0xc
c000ba5d:	c3                   	ret    

c000ba5e <File::rewind()>:
c000ba5e:	83 ec 10             	sub    esp,0x10
c000ba61:	6a 00                	push   0x0
c000ba63:	6a 00                	push   0x0
c000ba65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba69:	e8 f4 fe ff ff       	call   c000b962 <File::seek(unsigned long long)>
c000ba6e:	83 c4 1c             	add    esp,0x1c
c000ba71:	c3                   	ret    

c000ba72 <File::unlink()>:
c000ba72:	83 ec 0c             	sub    esp,0xc
c000ba75:	b8 0b 00 00 00       	mov    eax,0xb
c000ba7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba7e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba85:	83 f9 19             	cmp    ecx,0x19
c000ba88:	77 2f                	ja     c000bab9 <File::unlink()+0x47>
c000ba8a:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba91:	85 c9                	test   ecx,ecx
c000ba93:	74 24                	je     c000bab9 <File::unlink()+0x47>
c000ba95:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba9b:	85 c9                	test   ecx,ecx
c000ba9d:	74 1a                	je     c000bab9 <File::unlink()+0x47>
c000ba9f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000baa3:	b8 06 00 00 00       	mov    eax,0x6
c000baa8:	75 0f                	jne    c000bab9 <File::unlink()+0x47>
c000baaa:	50                   	push   eax
c000baab:	83 c2 0d             	add    edx,0xd
c000baae:	50                   	push   eax
c000baaf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bab1:	52                   	push   edx
c000bab2:	51                   	push   ecx
c000bab3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bab6:	83 c4 10             	add    esp,0x10
c000bab9:	83 c4 0c             	add    esp,0xc
c000babc:	c3                   	ret    
c000babd:	90                   	nop

c000babe <File::rename(char const*)>:
c000babe:	83 ec 0c             	sub    esp,0xc
c000bac1:	b8 0b 00 00 00       	mov    eax,0xb
c000bac6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bad1:	83 f9 19             	cmp    ecx,0x19
c000bad4:	77 32                	ja     c000bb08 <File::rename(char const*)+0x4a>
c000bad6:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000badd:	85 c9                	test   ecx,ecx
c000badf:	74 27                	je     c000bb08 <File::rename(char const*)+0x4a>
c000bae1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bae7:	85 c9                	test   ecx,ecx
c000bae9:	74 1d                	je     c000bb08 <File::rename(char const*)+0x4a>
c000baeb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000baef:	b8 06 00 00 00       	mov    eax,0x6
c000baf4:	75 12                	jne    c000bb08 <File::rename(char const*)+0x4a>
c000baf6:	50                   	push   eax
c000baf7:	83 c2 0d             	add    edx,0xd
c000bafa:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bafc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb00:	52                   	push   edx
c000bb01:	51                   	push   ecx
c000bb02:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bb05:	83 c4 10             	add    esp,0x10
c000bb08:	83 c4 0c             	add    esp,0xc
c000bb0b:	c3                   	ret    

c000bb0c <File::chfatattr(unsigned char, unsigned char)>:
c000bb0c:	57                   	push   edi
c000bb0d:	b8 0b 00 00 00       	mov    eax,0xb
c000bb12:	56                   	push   esi
c000bb13:	53                   	push   ebx
c000bb14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb18:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb1c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb20:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb27:	83 f9 19             	cmp    ecx,0x19
c000bb2a:	77 37                	ja     c000bb63 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb2c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb33:	85 c9                	test   ecx,ecx
c000bb35:	74 2c                	je     c000bb63 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb37:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb3d:	85 c9                	test   ecx,ecx
c000bb3f:	74 22                	je     c000bb63 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb41:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb45:	b8 06 00 00 00       	mov    eax,0x6
c000bb4a:	75 17                	jne    c000bb63 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb4c:	89 f0                	mov    eax,esi
c000bb4e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bb50:	0f b6 db             	movzx  ebx,bl
c000bb53:	0f b6 f0             	movzx  esi,al
c000bb56:	83 c2 0d             	add    edx,0xd
c000bb59:	56                   	push   esi
c000bb5a:	53                   	push   ebx
c000bb5b:	52                   	push   edx
c000bb5c:	51                   	push   ecx
c000bb5d:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bb60:	83 c4 10             	add    esp,0x10
c000bb63:	5b                   	pop    ebx
c000bb64:	5e                   	pop    esi
c000bb65:	5f                   	pop    edi
c000bb66:	c3                   	ret    
c000bb67:	90                   	nop

c000bb68 <File::exists()>:
c000bb68:	83 ec 0c             	sub    esp,0xc
c000bb6b:	31 c0                	xor    eax,eax
c000bb6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb71:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb78:	83 f9 19             	cmp    ecx,0x19
c000bb7b:	77 24                	ja     c000bba1 <File::exists()+0x39>
c000bb7d:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb84:	85 c9                	test   ecx,ecx
c000bb86:	74 19                	je     c000bba1 <File::exists()+0x39>
c000bb88:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb8e:	85 c9                	test   ecx,ecx
c000bb90:	74 0f                	je     c000bba1 <File::exists()+0x39>
c000bb92:	50                   	push   eax
c000bb93:	83 c2 0d             	add    edx,0xd
c000bb96:	50                   	push   eax
c000bb97:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb99:	52                   	push   edx
c000bb9a:	51                   	push   ecx
c000bb9b:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bb9e:	83 c4 10             	add    esp,0x10
c000bba1:	83 c4 0c             	add    esp,0xc
c000bba4:	c3                   	ret    
c000bba5:	90                   	nop

c000bba6 <File::stat(unsigned long long*, bool*)>:
c000bba6:	56                   	push   esi
c000bba7:	53                   	push   ebx
c000bba8:	50                   	push   eax
c000bba9:	b8 0b 00 00 00       	mov    eax,0xb
c000bbae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbb2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbb6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bbba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbc1:	83 f9 19             	cmp    ecx,0x19
c000bbc4:	77 3d                	ja     c000bc03 <File::stat(unsigned long long*, bool*)+0x5d>
c000bbc6:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbcd:	85 c9                	test   ecx,ecx
c000bbcf:	74 32                	je     c000bc03 <File::stat(unsigned long long*, bool*)+0x5d>
c000bbd1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbd7:	85 c9                	test   ecx,ecx
c000bbd9:	74 28                	je     c000bc03 <File::stat(unsigned long long*, bool*)+0x5d>
c000bbdb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbdf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbe1:	74 13                	je     c000bbf6 <File::stat(unsigned long long*, bool*)+0x50>
c000bbe3:	83 ec 04             	sub    esp,0x4
c000bbe6:	56                   	push   esi
c000bbe7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bbed:	51                   	push   ecx
c000bbee:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bbf1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bbf4:	eb 0a                	jmp    c000bc00 <File::stat(unsigned long long*, bool*)+0x5a>
c000bbf6:	53                   	push   ebx
c000bbf7:	83 c2 0d             	add    edx,0xd
c000bbfa:	56                   	push   esi
c000bbfb:	52                   	push   edx
c000bbfc:	51                   	push   ecx
c000bbfd:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bc00:	83 c4 10             	add    esp,0x10
c000bc03:	5a                   	pop    edx
c000bc04:	5b                   	pop    ebx
c000bc05:	5e                   	pop    esi
c000bc06:	c3                   	ret    

c000bc07 <Fs::setcwd(Process*, char*)>:
c000bc07:	55                   	push   ebp
c000bc08:	57                   	push   edi
c000bc09:	56                   	push   esi
c000bc0a:	53                   	push   ebx
c000bc0b:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bc11:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bc18:	6a 00                	push   0x0
c000bc1a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bc20:	57                   	push   edi
c000bc21:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bc28:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bc2c:	56                   	push   esi
c000bc2d:	e8 76 f9 ff ff       	call   c000b5a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bc32:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc35:	e8 46 49 ff ff       	call   c0000580 <strlen>
c000bc3a:	83 c4 10             	add    esp,0x10
c000bc3d:	83 f8 02             	cmp    eax,0x2
c000bc40:	77 15                	ja     c000bc57 <Fs::setcwd(Process*, char*)+0x50>
c000bc42:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bc47:	83 eb 41             	sub    ebx,0x41
c000bc4a:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bc51:	85 c0                	test   eax,eax
c000bc53:	75 1c                	jne    c000bc71 <Fs::setcwd(Process*, char*)+0x6a>
c000bc55:	eb 2f                	jmp    c000bc86 <Fs::setcwd(Process*, char*)+0x7f>
c000bc57:	83 ec 0c             	sub    esp,0xc
c000bc5a:	56                   	push   esi
c000bc5b:	e8 20 49 ff ff       	call   c0000580 <strlen>
c000bc60:	83 c4 10             	add    esp,0x10
c000bc63:	83 f8 03             	cmp    eax,0x3
c000bc66:	75 57                	jne    c000bcbf <Fs::setcwd(Process*, char*)+0xb8>
c000bc68:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bc6d:	75 50                	jne    c000bcbf <Fs::setcwd(Process*, char*)+0xb8>
c000bc6f:	eb d1                	jmp    c000bc42 <Fs::setcwd(Process*, char*)+0x3b>
c000bc71:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bc78:	75 0c                	jne    c000bc86 <Fs::setcwd(Process*, char*)+0x7f>
c000bc7a:	83 ec 0c             	sub    esp,0xc
c000bc7d:	50                   	push   eax
c000bc7e:	e8 a9 1d 00 00       	call   c000da2c <LogicalDisk::mount()>
c000bc83:	83 c4 10             	add    esp,0x10
c000bc86:	83 fb 19             	cmp    ebx,0x19
c000bc89:	b8 03 00 00 00       	mov    eax,0x3
c000bc8e:	0f 87 c5 00 00 00    	ja     c000bd59 <Fs::setcwd(Process*, char*)+0x152>
c000bc94:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bc9b:	b8 05 00 00 00       	mov    eax,0x5
c000bca0:	85 d2                	test   edx,edx
c000bca2:	0f 84 b1 00 00 00    	je     c000bd59 <Fs::setcwd(Process*, char*)+0x152>
c000bca8:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bcaf:	b8 06 00 00 00       	mov    eax,0x6
c000bcb4:	0f 85 91 00 00 00    	jne    c000bd4b <Fs::setcwd(Process*, char*)+0x144>
c000bcba:	e9 9a 00 00 00       	jmp    c000bd59 <Fs::setcwd(Process*, char*)+0x152>
c000bcbf:	83 ec 0c             	sub    esp,0xc
c000bcc2:	68 14 01 00 00       	push   0x114
c000bcc7:	e8 07 be ff ff       	call   c0007ad3 <malloc>
c000bccc:	6a 01                	push   0x1
c000bcce:	55                   	push   ebp
c000bccf:	56                   	push   esi
c000bcd0:	50                   	push   eax
c000bcd1:	89 c3                	mov    ebx,eax
c000bcd3:	e8 ee fa ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c000bcd8:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000bcdd:	83 c4 1c             	add    esp,0x1c
c000bce0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bce4:	50                   	push   eax
c000bce5:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bce9:	50                   	push   eax
c000bcea:	53                   	push   ebx
c000bceb:	e8 b6 fe ff ff       	call   c000bba6 <File::stat(unsigned long long*, bool*)>
c000bcf0:	83 c4 10             	add    esp,0x10
c000bcf3:	83 f8 02             	cmp    eax,0x2
c000bcf6:	74 27                	je     c000bd1f <Fs::setcwd(Process*, char*)+0x118>
c000bcf8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bcfd:	75 1c                	jne    c000bd1b <Fs::setcwd(Process*, char*)+0x114>
c000bcff:	85 db                	test   ebx,ebx
c000bd01:	b8 02 00 00 00       	mov    eax,0x2
c000bd06:	74 51                	je     c000bd59 <Fs::setcwd(Process*, char*)+0x152>
c000bd08:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd0a:	83 ec 0c             	sub    esp,0xc
c000bd0d:	53                   	push   ebx
c000bd0e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd11:	83 c4 10             	add    esp,0x10
c000bd14:	b8 02 00 00 00       	mov    eax,0x2
c000bd19:	eb 3e                	jmp    c000bd59 <Fs::setcwd(Process*, char*)+0x152>
c000bd1b:	85 c0                	test   eax,eax
c000bd1d:	74 1c                	je     c000bd3b <Fs::setcwd(Process*, char*)+0x134>
c000bd1f:	85 db                	test   ebx,ebx
c000bd21:	b8 01 00 00 00       	mov    eax,0x1
c000bd26:	74 31                	je     c000bd59 <Fs::setcwd(Process*, char*)+0x152>
c000bd28:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd2a:	83 ec 0c             	sub    esp,0xc
c000bd2d:	53                   	push   ebx
c000bd2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd31:	83 c4 10             	add    esp,0x10
c000bd34:	b8 01 00 00 00       	mov    eax,0x1
c000bd39:	eb 1e                	jmp    c000bd59 <Fs::setcwd(Process*, char*)+0x152>
c000bd3b:	85 db                	test   ebx,ebx
c000bd3d:	74 0c                	je     c000bd4b <Fs::setcwd(Process*, char*)+0x144>
c000bd3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd41:	83 ec 0c             	sub    esp,0xc
c000bd44:	53                   	push   ebx
c000bd45:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd48:	83 c4 10             	add    esp,0x10
c000bd4b:	50                   	push   eax
c000bd4c:	50                   	push   eax
c000bd4d:	56                   	push   esi
c000bd4e:	57                   	push   edi
c000bd4f:	e8 fc 48 ff ff       	call   c0000650 <strcpy>
c000bd54:	83 c4 10             	add    esp,0x10
c000bd57:	31 c0                	xor    eax,eax
c000bd59:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bd5f:	5b                   	pop    ebx
c000bd60:	5e                   	pop    esi
c000bd61:	5f                   	pop    edi
c000bd62:	5d                   	pop    ebp
c000bd63:	c3                   	ret    

c000bd64 <Directory::Directory(char const*, Process*)>:
c000bd64:	83 ec 0c             	sub    esp,0xc
c000bd67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd6b:	83 ec 08             	sub    esp,0x8
c000bd6e:	6a 00                	push   0x0
c000bd70:	50                   	push   eax
c000bd71:	e8 30 d4 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bd76:	83 c4 10             	add    esp,0x10
c000bd79:	ba 48 15 02 c0       	mov    edx,0xc0021548
c000bd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd82:	89 10                	mov    DWORD PTR [eax],edx
c000bd84:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000bd89:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bd8d:	0f 95 c0             	setne  al
c000bd90:	0f b6 c0             	movzx  eax,al
c000bd93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd97:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bd9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bda1:	83 c2 0d             	add    edx,0xd
c000bda4:	50                   	push   eax
c000bda5:	51                   	push   ecx
c000bda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdaa:	52                   	push   edx
c000bdab:	e8 f8 f7 ff ff       	call   c000b5a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bdb0:	83 c4 10             	add    esp,0x10
c000bdb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bdba:	83 e8 41             	sub    eax,0x41
c000bdbd:	88 c2                	mov    dl,al
c000bdbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bdc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdcd:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bdd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bddb:	0f b6 c0             	movzx  eax,al
c000bdde:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bde5:	85 c0                	test   eax,eax
c000bde7:	74 3e                	je     c000be27 <Directory::Directory(char const*, Process*)+0xc3>
c000bde9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bded:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bdf3:	0f b6 c0             	movzx  eax,al
c000bdf6:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bdfd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be03:	85 c0                	test   eax,eax
c000be05:	75 20                	jne    c000be27 <Directory::Directory(char const*, Process*)+0xc3>
c000be07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be0b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be11:	0f b6 c0             	movzx  eax,al
c000be14:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be1b:	83 ec 0c             	sub    esp,0xc
c000be1e:	50                   	push   eax
c000be1f:	e8 08 1c 00 00       	call   c000da2c <LogicalDisk::mount()>
c000be24:	83 c4 10             	add    esp,0x10
c000be27:	90                   	nop
c000be28:	83 c4 0c             	add    esp,0xc
c000be2b:	c3                   	ret    

c000be2c <Directory::open()>:
c000be2c:	53                   	push   ebx
c000be2d:	b8 0b 00 00 00       	mov    eax,0xb
c000be32:	83 ec 08             	sub    esp,0x8
c000be35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be39:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000be40:	83 fa 19             	cmp    edx,0x19
c000be43:	77 3d                	ja     c000be82 <Directory::open()+0x56>
c000be45:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000be4c:	85 d2                	test   edx,edx
c000be4e:	74 32                	je     c000be82 <Directory::open()+0x56>
c000be50:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000be56:	85 d2                	test   edx,edx
c000be58:	74 28                	je     c000be82 <Directory::open()+0x56>
c000be5a:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000be5e:	b8 06 00 00 00       	mov    eax,0x6
c000be63:	75 1d                	jne    c000be82 <Directory::open()+0x56>
c000be65:	50                   	push   eax
c000be66:	8b 02                	mov    eax,DWORD PTR [edx]
c000be68:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000be6e:	51                   	push   ecx
c000be6f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000be72:	51                   	push   ecx
c000be73:	52                   	push   edx
c000be74:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000be77:	83 c4 10             	add    esp,0x10
c000be7a:	85 c0                	test   eax,eax
c000be7c:	75 04                	jne    c000be82 <Directory::open()+0x56>
c000be7e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000be82:	83 c4 08             	add    esp,0x8
c000be85:	5b                   	pop    ebx
c000be86:	c3                   	ret    
c000be87:	90                   	nop

c000be88 <Directory::close()>:
c000be88:	53                   	push   ebx
c000be89:	b8 0b 00 00 00       	mov    eax,0xb
c000be8e:	83 ec 08             	sub    esp,0x8
c000be91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be95:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be9c:	83 f9 19             	cmp    ecx,0x19
c000be9f:	77 41                	ja     c000bee2 <Directory::close()+0x5a>
c000bea1:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bea8:	85 db                	test   ebx,ebx
c000beaa:	74 36                	je     c000bee2 <Directory::close()+0x5a>
c000beac:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000beb3:	74 2d                	je     c000bee2 <Directory::close()+0x5a>
c000beb5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000beb9:	b8 05 00 00 00       	mov    eax,0x5
c000bebe:	74 22                	je     c000bee2 <Directory::close()+0x5a>
c000bec0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bec4:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000becb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bed1:	53                   	push   ebx
c000bed2:	53                   	push   ebx
c000bed3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bed5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bedb:	50                   	push   eax
c000bedc:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bedf:	83 c4 10             	add    esp,0x10
c000bee2:	83 c4 08             	add    esp,0x8
c000bee5:	5b                   	pop    ebx
c000bee6:	c3                   	ret    
c000bee7:	90                   	nop

c000bee8 <Directory::unlink()>:
c000bee8:	83 ec 0c             	sub    esp,0xc
c000beeb:	b8 0b 00 00 00       	mov    eax,0xb
c000bef0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bef4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000befb:	83 f9 19             	cmp    ecx,0x19
c000befe:	77 2f                	ja     c000bf2f <Directory::unlink()+0x47>
c000bf00:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf07:	85 c9                	test   ecx,ecx
c000bf09:	74 24                	je     c000bf2f <Directory::unlink()+0x47>
c000bf0b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf11:	85 c9                	test   ecx,ecx
c000bf13:	74 1a                	je     c000bf2f <Directory::unlink()+0x47>
c000bf15:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf19:	b8 06 00 00 00       	mov    eax,0x6
c000bf1e:	75 0f                	jne    c000bf2f <Directory::unlink()+0x47>
c000bf20:	50                   	push   eax
c000bf21:	83 c2 0d             	add    edx,0xd
c000bf24:	50                   	push   eax
c000bf25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf27:	52                   	push   edx
c000bf28:	51                   	push   ecx
c000bf29:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bf2c:	83 c4 10             	add    esp,0x10
c000bf2f:	83 c4 0c             	add    esp,0xc
c000bf32:	c3                   	ret    
c000bf33:	90                   	nop

c000bf34 <Directory::rename(char const*)>:
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	b8 0b 00 00 00       	mov    eax,0xb
c000bf3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf40:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf47:	83 f9 19             	cmp    ecx,0x19
c000bf4a:	77 32                	ja     c000bf7e <Directory::rename(char const*)+0x4a>
c000bf4c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf53:	85 c9                	test   ecx,ecx
c000bf55:	74 27                	je     c000bf7e <Directory::rename(char const*)+0x4a>
c000bf57:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf5d:	85 c9                	test   ecx,ecx
c000bf5f:	74 1d                	je     c000bf7e <Directory::rename(char const*)+0x4a>
c000bf61:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf65:	b8 06 00 00 00       	mov    eax,0x6
c000bf6a:	75 12                	jne    c000bf7e <Directory::rename(char const*)+0x4a>
c000bf6c:	50                   	push   eax
c000bf6d:	83 c2 0d             	add    edx,0xd
c000bf70:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf76:	52                   	push   edx
c000bf77:	51                   	push   ecx
c000bf78:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bf7b:	83 c4 10             	add    esp,0x10
c000bf7e:	83 c4 0c             	add    esp,0xc
c000bf81:	c3                   	ret    

c000bf82 <Directory::exists()>:
c000bf82:	83 ec 0c             	sub    esp,0xc
c000bf85:	31 c0                	xor    eax,eax
c000bf87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf8b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf92:	83 f9 19             	cmp    ecx,0x19
c000bf95:	77 24                	ja     c000bfbb <Directory::exists()+0x39>
c000bf97:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf9e:	85 c9                	test   ecx,ecx
c000bfa0:	74 19                	je     c000bfbb <Directory::exists()+0x39>
c000bfa2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfa8:	85 c9                	test   ecx,ecx
c000bfaa:	74 0f                	je     c000bfbb <Directory::exists()+0x39>
c000bfac:	50                   	push   eax
c000bfad:	83 c2 0d             	add    edx,0xd
c000bfb0:	50                   	push   eax
c000bfb1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfb3:	52                   	push   edx
c000bfb4:	51                   	push   ecx
c000bfb5:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bfb8:	83 c4 10             	add    esp,0x10
c000bfbb:	83 c4 0c             	add    esp,0xc
c000bfbe:	c3                   	ret    
c000bfbf:	90                   	nop

c000bfc0 <Directory::read(dirent*)>:
c000bfc0:	83 ec 1c             	sub    esp,0x1c
c000bfc3:	b8 0b 00 00 00       	mov    eax,0xb
c000bfc8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bfcc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfd3:	83 f9 19             	cmp    ecx,0x19
c000bfd6:	77 30                	ja     c000c008 <Directory::read(dirent*)+0x48>
c000bfd8:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfdf:	85 c9                	test   ecx,ecx
c000bfe1:	74 25                	je     c000c008 <Directory::read(dirent*)+0x48>
c000bfe3:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bfea:	74 1c                	je     c000c008 <Directory::read(dirent*)+0x48>
c000bfec:	83 ec 0c             	sub    esp,0xc
c000bfef:	8b 02                	mov    eax,DWORD PTR [edx]
c000bff1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bff5:	51                   	push   ecx
c000bff6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bffa:	6a 00                	push   0x0
c000bffc:	68 10 01 00 00       	push   0x110
c000c001:	52                   	push   edx
c000c002:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c005:	83 c4 20             	add    esp,0x20
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	c3                   	ret    

c000c00c <Directory::create()>:
c000c00c:	83 ec 0c             	sub    esp,0xc
c000c00f:	b8 0b 00 00 00       	mov    eax,0xb
c000c014:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c018:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c01f:	83 f9 19             	cmp    ecx,0x19
c000c022:	77 2f                	ja     c000c053 <Directory::create()+0x47>
c000c024:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c02b:	85 c9                	test   ecx,ecx
c000c02d:	74 24                	je     c000c053 <Directory::create()+0x47>
c000c02f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c035:	85 c9                	test   ecx,ecx
c000c037:	74 1a                	je     c000c053 <Directory::create()+0x47>
c000c039:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c03d:	b8 06 00 00 00       	mov    eax,0x6
c000c042:	75 0f                	jne    c000c053 <Directory::create()+0x47>
c000c044:	50                   	push   eax
c000c045:	83 c2 0d             	add    edx,0xd
c000c048:	50                   	push   eax
c000c049:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c04b:	52                   	push   edx
c000c04c:	51                   	push   ecx
c000c04d:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c050:	83 c4 10             	add    esp,0x10
c000c053:	83 c4 0c             	add    esp,0xc
c000c056:	c3                   	ret    
c000c057:	90                   	nop

c000c058 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c058:	b8 0a 00 00 00       	mov    eax,0xa
c000c05d:	c3                   	ret    
c000c05e:	66 90                	xchg   ax,ax

c000c060 <Bus::Bus(char const*)>:
c000c060:	83 ec 0c             	sub    esp,0xc
c000c063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c067:	83 ec 08             	sub    esp,0x8
c000c06a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c06e:	50                   	push   eax
c000c06f:	e8 28 08 00 00       	call   c000c89c <Device::Device(char const*)>
c000c074:	83 c4 10             	add    esp,0x10
c000c077:	ba 64 15 02 c0       	mov    edx,0xc0021564
c000c07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c080:	89 10                	mov    DWORD PTR [eax],edx
c000c082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c086:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c090:	90                   	nop
c000c091:	83 c4 0c             	add    esp,0xc
c000c094:	c3                   	ret    
c000c095:	90                   	nop
c000c096:	66 90                	xchg   ax,ax

c000c098 <Bus::~Bus()>:
c000c098:	83 ec 0c             	sub    esp,0xc
c000c09b:	ba 64 15 02 c0       	mov    edx,0xc0021564
c000c0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a4:	89 10                	mov    DWORD PTR [eax],edx
c000c0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0aa:	83 ec 0c             	sub    esp,0xc
c000c0ad:	50                   	push   eax
c000c0ae:	e8 53 05 00 00       	call   c000c606 <Device::~Device()>
c000c0b3:	83 c4 10             	add    esp,0x10
c000c0b6:	90                   	nop
c000c0b7:	83 c4 0c             	add    esp,0xc
c000c0ba:	c3                   	ret    
c000c0bb:	90                   	nop

c000c0bc <Bus::~Bus()>:
c000c0bc:	83 ec 0c             	sub    esp,0xc
c000c0bf:	83 ec 0c             	sub    esp,0xc
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	e8 cd ff ff ff       	call   c000c098 <Bus::~Bus()>
c000c0cb:	83 c4 10             	add    esp,0x10
c000c0ce:	83 ec 08             	sub    esp,0x8
c000c0d1:	68 58 01 00 00       	push   0x158
c000c0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0da:	e8 2d e7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	83 c4 0c             	add    esp,0xc
c000c0e5:	c3                   	ret    

c000c0e6 <beepThread(void*)>:
c000c0e6:	83 ec 0c             	sub    esp,0xc
c000c0e9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c0ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0f2:	48                   	dec    eax
c000c0f3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c0f8:	75 01                	jne    c000c0fb <beepThread(void*)+0x15>
c000c0fa:	fb                   	sti    
c000c0fb:	6b c2 0a             	imul   eax,edx,0xa
c000c0fe:	83 ec 0c             	sub    esp,0xc
c000c101:	50                   	push   eax
c000c102:	e8 ad 9e 00 00       	call   c0015fb4 <milliTenthSleep(unsigned int)>
c000c107:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c10e:	e8 f9 bd 00 00       	call   c0017f0c <HalMakeBeep(int)>
c000c113:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c11b:	83 c4 1c             	add    esp,0x1c
c000c11e:	e9 75 9d 00 00       	jmp    c0015e98 <blockTask(TaskState)>

c000c123 <Krnl::beep(int, int, bool)>:
c000c123:	56                   	push   esi
c000c124:	53                   	push   ebx
c000c125:	83 ec 10             	sub    esp,0x10
c000c128:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c12c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c134:	e8 d3 bd 00 00       	call   c0017f0c <HalMakeBeep(int)>
c000c139:	89 f0                	mov    eax,esi
c000c13b:	83 c4 10             	add    esp,0x10
c000c13e:	84 c0                	test   al,al
c000c140:	74 1e                	je     c000c160 <Krnl::beep(int, int, bool)+0x3d>
c000c142:	6b db 0a             	imul   ebx,ebx,0xa
c000c145:	83 ec 0c             	sub    esp,0xc
c000c148:	53                   	push   ebx
c000c149:	e8 66 9e 00 00       	call   c0015fb4 <milliTenthSleep(unsigned int)>
c000c14e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c156:	83 c4 14             	add    esp,0x14
c000c159:	5b                   	pop    ebx
c000c15a:	5e                   	pop    esi
c000c15b:	e9 ac bd 00 00       	jmp    c0017f0c <HalMakeBeep(int)>
c000c160:	68 e6 00 00 00       	push   0xe6
c000c165:	53                   	push   ebx
c000c166:	68 e6 c0 00 c0       	push   0xc000c0e6
c000c16b:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c171:	e8 d6 98 00 00       	call   c0015a4c <Process::createThread(void (*)(void*), void*, int)>
c000c176:	83 c4 14             	add    esp,0x14
c000c179:	5b                   	pop    ebx
c000c17a:	5e                   	pop    esi
c000c17b:	c3                   	ret    

c000c17c <User::loadClockSettings(int)>:
c000c17c:	53                   	push   ebx
c000c17d:	83 ec 14             	sub    esp,0x14
c000c180:	68 14 01 00 00       	push   0x114
c000c185:	e8 49 b9 ff ff       	call   c0007ad3 <malloc>
c000c18a:	6a 01                	push   0x1
c000c18c:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c192:	68 88 15 02 c0       	push   0xc0021588
c000c197:	89 c3                	mov    ebx,eax
c000c199:	50                   	push   eax
c000c19a:	e8 27 f6 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c000c19f:	83 c4 18             	add    esp,0x18
c000c1a2:	6a 01                	push   0x1
c000c1a4:	53                   	push   ebx
c000c1a5:	e8 fa f6 ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c000c1aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c1ad:	e8 50 f7 ff ff       	call   c000b902 <File::close()>
c000c1b2:	83 c4 10             	add    esp,0x10
c000c1b5:	85 db                	test   ebx,ebx
c000c1b7:	74 0f                	je     c000c1c8 <User::loadClockSettings(int)+0x4c>
c000c1b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c1bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1c2:	83 c4 08             	add    esp,0x8
c000c1c5:	5b                   	pop    ebx
c000c1c6:	ff e0                	jmp    eax
c000c1c8:	83 c4 08             	add    esp,0x8
c000c1cb:	5b                   	pop    ebx
c000c1cc:	c3                   	ret    
c000c1cd:	90                   	nop

c000c1ce <Clock::Clock(char const*)>:
c000c1ce:	83 ec 0c             	sub    esp,0xc
c000c1d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1d5:	83 ec 08             	sub    esp,0x8
c000c1d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1dc:	50                   	push   eax
c000c1dd:	e8 ba 06 00 00       	call   c000c89c <Device::Device(char const*)>
c000c1e2:	83 c4 10             	add    esp,0x10
c000c1e5:	ba b0 15 02 c0       	mov    edx,0xc00215b0
c000c1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1ee:	89 10                	mov    DWORD PTR [eax],edx
c000c1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c1fe:	90                   	nop
c000c1ff:	83 c4 0c             	add    esp,0xc
c000c202:	c3                   	ret    
c000c203:	90                   	nop

c000c204 <Clock::~Clock()>:
c000c204:	83 ec 0c             	sub    esp,0xc
c000c207:	ba b0 15 02 c0       	mov    edx,0xc00215b0
c000c20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c210:	89 10                	mov    DWORD PTR [eax],edx
c000c212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c216:	83 ec 0c             	sub    esp,0xc
c000c219:	50                   	push   eax
c000c21a:	e8 e7 03 00 00       	call   c000c606 <Device::~Device()>
c000c21f:	83 c4 10             	add    esp,0x10
c000c222:	90                   	nop
c000c223:	83 c4 0c             	add    esp,0xc
c000c226:	c3                   	ret    
c000c227:	90                   	nop

c000c228 <Clock::~Clock()>:
c000c228:	83 ec 0c             	sub    esp,0xc
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c232:	e8 cd ff ff ff       	call   c000c204 <Clock::~Clock()>
c000c237:	83 c4 10             	add    esp,0x10
c000c23a:	83 ec 08             	sub    esp,0x8
c000c23d:	68 58 01 00 00       	push   0x158
c000c242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c246:	e8 c1 e5 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c24b:	83 c4 10             	add    esp,0x10
c000c24e:	83 c4 0c             	add    esp,0xc
c000c251:	c3                   	ret    

c000c252 <Clock::timeInSecondsLocal()>:
c000c252:	53                   	push   ebx
c000c253:	83 ec 14             	sub    esp,0x14
c000c256:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c25a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c25c:	50                   	push   eax
c000c25d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c260:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c267:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c26d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c273:	89 cb                	mov    ebx,ecx
c000c275:	c1 fb 1f             	sar    ebx,0x1f
c000c278:	01 c8                	add    eax,ecx
c000c27a:	11 da                	adc    edx,ebx
c000c27c:	83 c4 10             	add    esp,0x10
c000c27f:	31 c9                	xor    ecx,ecx
c000c281:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c288:	74 05                	je     c000c28f <Clock::timeInSecondsLocal()+0x3d>
c000c28a:	b9 08 07 00 00       	mov    ecx,0x708
c000c28f:	31 db                	xor    ebx,ebx
c000c291:	01 c8                	add    eax,ecx
c000c293:	11 da                	adc    edx,ebx
c000c295:	83 c4 08             	add    esp,0x8
c000c298:	5b                   	pop    ebx
c000c299:	c3                   	ret    

c000c29a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c29a:	57                   	push   edi
c000c29b:	56                   	push   esi
c000c29c:	53                   	push   ebx
c000c29d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c2a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c2a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2ab:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c2ae:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c2b5:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c2bb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c2c1:	99                   	cdq    
c000c2c2:	29 c6                	sub    esi,eax
c000c2c4:	19 d7                	sbb    edi,edx
c000c2c6:	89 f0                	mov    eax,esi
c000c2c8:	31 f6                	xor    esi,esi
c000c2ca:	89 fa                	mov    edx,edi
c000c2cc:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2d3:	74 05                	je     c000c2da <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c2d5:	be 08 07 00 00       	mov    esi,0x708
c000c2da:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c2de:	31 ff                	xor    edi,edi
c000c2e0:	29 f0                	sub    eax,esi
c000c2e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c2e6:	19 fa                	sbb    edx,edi
c000c2e8:	89 d8                	mov    eax,ebx
c000c2ea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c2ee:	5b                   	pop    ebx
c000c2ef:	5e                   	pop    esi
c000c2f0:	5f                   	pop    edi
c000c2f1:	ff e0                	jmp    eax

c000c2f3 <datetimeToSeconds(datetime_t)>:
c000c2f3:	55                   	push   ebp
c000c2f4:	57                   	push   edi
c000c2f5:	56                   	push   esi
c000c2f6:	53                   	push   ebx
c000c2f7:	83 ec 0c             	sub    esp,0xc
c000c2fa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c2fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c302:	89 f7                	mov    edi,esi
c000c304:	89 f0                	mov    eax,esi
c000c306:	0f b6 cf             	movzx  ecx,bh
c000c309:	0f b6 c4             	movzx  eax,ah
c000c30c:	c1 ef 10             	shr    edi,0x10
c000c30f:	89 da                	mov    edx,ebx
c000c311:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c314:	89 f9                	mov    ecx,edi
c000c316:	0f b6 f9             	movzx  edi,cl
c000c319:	89 f1                	mov    ecx,esi
c000c31b:	6b c0 3c             	imul   eax,eax,0x3c
c000c31e:	0f b6 f1             	movzx  esi,cl
c000c321:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c327:	0f b6 db             	movzx  ebx,bl
c000c32a:	c1 ea 10             	shr    edx,0x10
c000c32d:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c333:	01 f8                	add    eax,edi
c000c335:	01 f0                	add    eax,esi
c000c337:	89 04 24             	mov    DWORD PTR [esp],eax
c000c33a:	c1 f8 1f             	sar    eax,0x1f
c000c33d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c341:	89 e8                	mov    eax,ebp
c000c343:	0f b6 c0             	movzx  eax,al
c000c346:	8b 0c 85 00 16 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdea00]
c000c34d:	83 f8 01             	cmp    eax,0x1
c000c350:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c354:	0f b7 da             	movzx  ebx,dx
c000c357:	76 27                	jbe    c000c380 <datetimeToSeconds(datetime_t)+0x8d>
c000c359:	80 e2 03             	and    dl,0x3
c000c35c:	75 22                	jne    c000c380 <datetimeToSeconds(datetime_t)+0x8d>
c000c35e:	31 d2                	xor    edx,edx
c000c360:	be 64 00 00 00       	mov    esi,0x64
c000c365:	89 d8                	mov    eax,ebx
c000c367:	f7 f6                	div    esi
c000c369:	85 d2                	test   edx,edx
c000c36b:	75 12                	jne    c000c37f <datetimeToSeconds(datetime_t)+0x8c>
c000c36d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c373:	be 90 01 00 00       	mov    esi,0x190
c000c378:	99                   	cdq    
c000c379:	f7 fe                	idiv   esi
c000c37b:	85 d2                	test   edx,edx
c000c37d:	75 01                	jne    c000c380 <datetimeToSeconds(datetime_t)+0x8d>
c000c37f:	41                   	inc    ecx
c000c380:	83 fb 46             	cmp    ebx,0x46
c000c383:	76 48                	jbe    c000c3cd <datetimeToSeconds(datetime_t)+0xda>
c000c385:	be 46 00 00 00       	mov    esi,0x46
c000c38a:	bf 64 00 00 00       	mov    edi,0x64
c000c38f:	bd 90 01 00 00       	mov    ebp,0x190
c000c394:	f7 c6 03 00 00 00    	test   esi,0x3
c000c39a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c39f:	75 23                	jne    c000c3c4 <datetimeToSeconds(datetime_t)+0xd1>
c000c3a1:	89 f0                	mov    eax,esi
c000c3a3:	99                   	cdq    
c000c3a4:	f7 ff                	idiv   edi
c000c3a6:	b8 6e 01 00 00       	mov    eax,0x16e
c000c3ab:	85 d2                	test   edx,edx
c000c3ad:	75 15                	jne    c000c3c4 <datetimeToSeconds(datetime_t)+0xd1>
c000c3af:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c3b5:	99                   	cdq    
c000c3b6:	f7 fd                	idiv   ebp
c000c3b8:	83 fa 01             	cmp    edx,0x1
c000c3bb:	19 c0                	sbb    eax,eax
c000c3bd:	f7 d0                	not    eax
c000c3bf:	05 6e 01 00 00       	add    eax,0x16e
c000c3c4:	46                   	inc    esi
c000c3c5:	01 c1                	add    ecx,eax
c000c3c7:	39 de                	cmp    esi,ebx
c000c3c9:	7c c9                	jl     c000c394 <datetimeToSeconds(datetime_t)+0xa1>
c000c3cb:	eb 34                	jmp    c000c401 <datetimeToSeconds(datetime_t)+0x10e>
c000c3cd:	74 32                	je     c000c401 <datetimeToSeconds(datetime_t)+0x10e>
c000c3cf:	b8 45 00 00 00       	mov    eax,0x45
c000c3d4:	89 c2                	mov    edx,eax
c000c3d6:	83 e2 03             	and    edx,0x3
c000c3d9:	39 d8                	cmp    eax,ebx
c000c3db:	7e 0f                	jle    c000c3ec <datetimeToSeconds(datetime_t)+0xf9>
c000c3dd:	83 fa 01             	cmp    edx,0x1
c000c3e0:	19 d2                	sbb    edx,edx
c000c3e2:	48                   	dec    eax
c000c3e3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c3ea:	eb e8                	jmp    c000c3d4 <datetimeToSeconds(datetime_t)+0xe1>
c000c3ec:	85 d2                	test   edx,edx
c000c3ee:	b8 6d 01 00 00       	mov    eax,0x16d
c000c3f3:	75 0a                	jne    c000c3ff <datetimeToSeconds(datetime_t)+0x10c>
c000c3f5:	83 fb 01             	cmp    ebx,0x1
c000c3f8:	19 c0                	sbb    eax,eax
c000c3fa:	05 6e 01 00 00       	add    eax,0x16e
c000c3ff:	29 c1                	sub    ecx,eax
c000c401:	b8 80 51 01 00       	mov    eax,0x15180
c000c406:	f7 e9                	imul   ecx
c000c408:	03 04 24             	add    eax,DWORD PTR [esp]
c000c40b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c40f:	83 c4 0c             	add    esp,0xc
c000c412:	5b                   	pop    ebx
c000c413:	5e                   	pop    esi
c000c414:	5f                   	pop    edi
c000c415:	5d                   	pop    ebp
c000c416:	c3                   	ret    
c000c417:	90                   	nop

c000c418 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c418:	57                   	push   edi
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c41f:	8b 06                	mov    eax,DWORD PTR [esi]
c000c421:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c424:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c428:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c42c:	e8 c2 fe ff ff       	call   c000c2f3 <datetimeToSeconds(datetime_t)>
c000c431:	59                   	pop    ecx
c000c432:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c439:	5b                   	pop    ebx
c000c43a:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c440:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c446:	89 cb                	mov    ebx,ecx
c000c448:	c1 fb 1f             	sar    ebx,0x1f
c000c44b:	29 c8                	sub    eax,ecx
c000c44d:	19 da                	sbb    edx,ebx
c000c44f:	31 c9                	xor    ecx,ecx
c000c451:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c458:	74 05                	je     c000c45f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c45a:	b9 08 07 00 00       	mov    ecx,0x708
c000c45f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c463:	31 db                	xor    ebx,ebx
c000c465:	29 c8                	sub    eax,ecx
c000c467:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c46b:	19 da                	sbb    edx,ebx
c000c46d:	89 f8                	mov    eax,edi
c000c46f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c473:	5b                   	pop    ebx
c000c474:	5e                   	pop    esi
c000c475:	5f                   	pop    edi
c000c476:	ff e0                	jmp    eax

c000c478 <secondsToDatetime(unsigned long long)>:
c000c478:	55                   	push   ebp
c000c479:	57                   	push   edi
c000c47a:	56                   	push   esi
c000c47b:	53                   	push   ebx
c000c47c:	83 ec 1c             	sub    esp,0x1c
c000c47f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c483:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c487:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c48b:	6a 00                	push   0x0
c000c48d:	68 80 51 01 00       	push   0x15180
c000c492:	55                   	push   ebp
c000c493:	57                   	push   edi
c000c494:	e8 b7 2e 01 00       	call   c001f350 <__udivdi3>
c000c499:	83 c4 10             	add    esp,0x10
c000c49c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4a0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c4a6:	6a 00                	push   0x0
c000c4a8:	68 80 51 01 00       	push   0x15180
c000c4ad:	55                   	push   ebp
c000c4ae:	57                   	push   edi
c000c4af:	bf 10 0e 00 00       	mov    edi,0xe10
c000c4b4:	e8 97 2f 01 00       	call   c001f450 <__umoddi3>
c000c4b9:	83 c4 10             	add    esp,0x10
c000c4bc:	99                   	cdq    
c000c4bd:	f7 ff                	idiv   edi
c000c4bf:	bf 3c 00 00 00       	mov    edi,0x3c
c000c4c4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c4c7:	89 d0                	mov    eax,edx
c000c4c9:	99                   	cdq    
c000c4ca:	f7 ff                	idiv   edi
c000c4cc:	85 db                	test   ebx,ebx
c000c4ce:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c4d1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c4d4:	79 11                	jns    c000c4e7 <secondsToDatetime(unsigned long long)+0x6f>
c000c4d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4da:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c4e0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c4e5:	eb 07                	jmp    c000c4ee <secondsToDatetime(unsigned long long)+0x76>
c000c4e7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c4ec:	89 d8                	mov    eax,ebx
c000c4ee:	99                   	cdq    
c000c4ef:	bf b4 05 00 00       	mov    edi,0x5b4
c000c4f4:	f7 f9                	idiv   ecx
c000c4f6:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c4fb:	31 d2                	xor    edx,edx
c000c4fd:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c506:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c50e:	01 c3                	add    ebx,eax
c000c510:	89 d8                	mov    eax,ebx
c000c512:	f7 f1                	div    ecx
c000c514:	31 d2                	xor    edx,edx
c000c516:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c519:	89 d8                	mov    eax,ebx
c000c51b:	f7 f7                	div    edi
c000c51d:	31 d2                	xor    edx,edx
c000c51f:	29 c1                	sub    ecx,eax
c000c521:	89 d8                	mov    eax,ebx
c000c523:	f7 f5                	div    ebp
c000c525:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c52a:	31 d2                	xor    edx,edx
c000c52c:	29 c1                	sub    ecx,eax
c000c52e:	89 c8                	mov    eax,ecx
c000c530:	f7 f5                	div    ebp
c000c532:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c537:	31 d2                	xor    edx,edx
c000c539:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c53d:	89 c8                	mov    eax,ecx
c000c53f:	f7 f5                	div    ebp
c000c541:	31 d2                	xor    edx,edx
c000c543:	01 c3                	add    ebx,eax
c000c545:	89 c8                	mov    eax,ecx
c000c547:	f7 f7                	div    edi
c000c549:	bf 99 00 00 00       	mov    edi,0x99
c000c54e:	31 d2                	xor    edx,edx
c000c550:	29 c3                	sub    ebx,eax
c000c552:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c55a:	29 c3                	sub    ebx,eax
c000c55c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c55f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c562:	83 c1 02             	add    ecx,0x2
c000c565:	89 c8                	mov    eax,ecx
c000c567:	bb 05 00 00 00       	mov    ebx,0x5
c000c56c:	f7 f7                	div    edi
c000c56e:	31 d2                	xor    edx,edx
c000c570:	89 c7                	mov    edi,eax
c000c572:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c578:	83 c0 02             	add    eax,0x2
c000c57b:	f7 f3                	div    ebx
c000c57d:	89 eb                	mov    ebx,ebp
c000c57f:	29 c3                	sub    ebx,eax
c000c581:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c587:	88 1e                	mov    BYTE PTR [esi],bl
c000c589:	19 c0                	sbb    eax,eax
c000c58b:	31 d2                	xor    edx,edx
c000c58d:	83 e0 0c             	and    eax,0xc
c000c590:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c594:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c59c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c5a0:	83 f9 01             	cmp    ecx,0x1
c000c5a3:	0f 96 c2             	setbe  dl
c000c5a6:	41                   	inc    ecx
c000c5a7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c5aa:	01 d0                	add    eax,edx
c000c5ac:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c5b0:	83 c4 1c             	add    esp,0x1c
c000c5b3:	89 f0                	mov    eax,esi
c000c5b5:	5b                   	pop    ebx
c000c5b6:	5e                   	pop    esi
c000c5b7:	5f                   	pop    edi
c000c5b8:	5d                   	pop    ebp
c000c5b9:	c2 04 00             	ret    0x4

c000c5bc <Clock::timeInDatetimeLocal()>:
c000c5bc:	53                   	push   ebx
c000c5bd:	83 ec 14             	sub    esp,0x14
c000c5c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c5c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c5c8:	e8 85 fc ff ff       	call   c000c252 <Clock::timeInSecondsLocal()>
c000c5cd:	83 c4 0c             	add    esp,0xc
c000c5d0:	52                   	push   edx
c000c5d1:	50                   	push   eax
c000c5d2:	53                   	push   ebx
c000c5d3:	e8 a0 fe ff ff       	call   c000c478 <secondsToDatetime(unsigned long long)>
c000c5d8:	89 d8                	mov    eax,ebx
c000c5da:	83 c4 14             	add    esp,0x14
c000c5dd:	5b                   	pop    ebx
c000c5de:	c2 04 00             	ret    0x4
c000c5e1:	90                   	nop

c000c5e2 <Device::hibernate()>:
c000c5e2:	c3                   	ret    
c000c5e3:	90                   	nop

c000c5e4 <Device::wake()>:
c000c5e4:	c3                   	ret    
c000c5e5:	90                   	nop

c000c5e6 <Device::detect()>:
c000c5e6:	c3                   	ret    
c000c5e7:	90                   	nop

c000c5e8 <Device::disableLegacy()>:
c000c5e8:	c3                   	ret    
c000c5e9:	90                   	nop

c000c5ea <Device::powerSaving(PowerSavingLevel)>:
c000c5ea:	c3                   	ret    
c000c5eb:	90                   	nop

c000c5ec <DriverlessDevice::close(int, int, void*)>:
c000c5ec:	31 c0                	xor    eax,eax
c000c5ee:	c3                   	ret    
c000c5ef:	90                   	nop

c000c5f0 <DriverlessDevice::detect()>:
c000c5f0:	c3                   	ret    
c000c5f1:	90                   	nop

c000c5f2 <DriverlessDevice::open(int, int, void*)>:
c000c5f2:	83 ec 18             	sub    esp,0x18
c000c5f5:	68 30 16 02 c0       	push   0xc0021630
c000c5fa:	e8 9a 4c 00 00       	call   c0011299 <KePanic(char const*)>
c000c5ff:	83 c8 ff             	or     eax,0xffffffff
c000c602:	83 c4 1c             	add    esp,0x1c
c000c605:	c3                   	ret    

c000c606 <Device::~Device()>:
c000c606:	ba 90 16 02 c0       	mov    edx,0xc0021690
c000c60b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c60f:	89 10                	mov    DWORD PTR [eax],edx
c000c611:	90                   	nop
c000c612:	c3                   	ret    
c000c613:	90                   	nop

c000c614 <Device::~Device()>:
c000c614:	83 ec 0c             	sub    esp,0xc
c000c617:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c61b:	e8 e6 ff ff ff       	call   c000c606 <Device::~Device()>
c000c620:	83 c4 04             	add    esp,0x4
c000c623:	83 ec 08             	sub    esp,0x8
c000c626:	68 58 01 00 00       	push   0x158
c000c62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62f:	e8 d8 e1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c634:	83 c4 10             	add    esp,0x10
c000c637:	83 c4 0c             	add    esp,0xc
c000c63a:	c3                   	ret    
c000c63b:	90                   	nop

c000c63c <Device::findAndLoadDriver()>:
c000c63c:	c7 44 24 04 4e 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc002164e
c000c644:	e9 c1 e2 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c649:	90                   	nop

c000c64a <Device::preOpenPCI(PCIDeviceInfo)>:
c000c64a:	57                   	push   edi
c000c64b:	b9 09 00 00 00       	mov    ecx,0x9
c000c650:	56                   	push   esi
c000c651:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c655:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c659:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c663:	81 c7 18 01 00 00    	add    edi,0x118
c000c669:	fc                   	cld    
c000c66a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c66c:	5e                   	pop    esi
c000c66d:	5f                   	pop    edi
c000c66e:	c3                   	ret    
c000c66f:	90                   	nop

c000c670 <Device::preOpenACPI(void*, char*, char*)>:
c000c670:	57                   	push   edi
c000c671:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c676:	56                   	push   esi
c000c677:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c67b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c67f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c683:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c68d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c693:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c699:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c69b:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c6a1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c6a5:	b9 0e 00 00 00       	mov    ecx,0xe
c000c6aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6ac:	5e                   	pop    esi
c000c6ad:	5f                   	pop    edi
c000c6ae:	c3                   	ret    
c000c6af:	90                   	nop

c000c6b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c6b0:	53                   	push   ebx
c000c6b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c6bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c6c1:	0f b6 c0             	movzx  eax,al
c000c6c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c6c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c6cc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c6d0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6d4:	5b                   	pop    ebx
c000c6d5:	e9 aa 05 00 00       	jmp    c000cc84 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c6da <Device::getParent()>:
c000c6da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6de:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c6e4:	c3                   	ret    
c000c6e5:	90                   	nop

c000c6e6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c6e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6ee:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c6f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c6f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6fb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c6ff:	e9 f7 06 00 00       	jmp    c000cdfb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c704 <Device::addChild(Device*)>:
c000c704:	53                   	push   ebx
c000c705:	83 ec 08             	sub    esp,0x8
c000c708:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c70c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c710:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c716:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c71c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c71e:	85 d2                	test   edx,edx
c000c720:	74 04                	je     c000c726 <Device::addChild(Device*)+0x22>
c000c722:	89 d3                	mov    ebx,edx
c000c724:	eb f6                	jmp    c000c71c <Device::addChild(Device*)+0x18>
c000c726:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c729:	83 ec 0c             	sub    esp,0xc
c000c72c:	6a 08                	push   0x8
c000c72e:	e8 a0 b3 ff ff       	call   c0007ad3 <malloc>
c000c733:	89 03                	mov    DWORD PTR [ebx],eax
c000c735:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c73b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c742:	83 c4 18             	add    esp,0x18
c000c745:	5b                   	pop    ebx
c000c746:	c3                   	ret    
c000c747:	90                   	nop

c000c748 <Device::removeAllChildren()>:
c000c748:	56                   	push   esi
c000c749:	53                   	push   ebx
c000c74a:	52                   	push   edx
c000c74b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c74f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c755:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c758:	74 17                	je     c000c771 <Device::removeAllChildren()+0x29>
c000c75a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c75d:	85 c0                	test   eax,eax
c000c75f:	74 0c                	je     c000c76d <Device::removeAllChildren()+0x25>
c000c761:	8b 10                	mov    edx,DWORD PTR [eax]
c000c763:	83 ec 0c             	sub    esp,0xc
c000c766:	50                   	push   eax
c000c767:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c76a:	83 c4 10             	add    esp,0x10
c000c76d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c76f:	eb e4                	jmp    c000c755 <Device::removeAllChildren()+0xd>
c000c771:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c777:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c77d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c783:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c78a:	58                   	pop    eax
c000c78b:	5b                   	pop    ebx
c000c78c:	5e                   	pop    esi
c000c78d:	c3                   	ret    

c000c78e <Device::hibernateAll()>:
c000c78e:	53                   	push   ebx
c000c78f:	83 ec 14             	sub    esp,0x14
c000c792:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c796:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c798:	53                   	push   ebx
c000c799:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c79c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7a2:	83 c4 10             	add    esp,0x10
c000c7a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7a8:	74 0f                	je     c000c7b9 <Device::hibernateAll()+0x2b>
c000c7aa:	83 ec 0c             	sub    esp,0xc
c000c7ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7b0:	e8 d9 ff ff ff       	call   c000c78e <Device::hibernateAll()>
c000c7b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7b7:	eb e9                	jmp    c000c7a2 <Device::hibernateAll()+0x14>
c000c7b9:	83 c4 08             	add    esp,0x8
c000c7bc:	5b                   	pop    ebx
c000c7bd:	c3                   	ret    

c000c7be <Device::wakeAll()>:
c000c7be:	53                   	push   ebx
c000c7bf:	83 ec 14             	sub    esp,0x14
c000c7c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7c8:	53                   	push   ebx
c000c7c9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c7cc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7d2:	83 c4 10             	add    esp,0x10
c000c7d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7d8:	74 0f                	je     c000c7e9 <Device::wakeAll()+0x2b>
c000c7da:	83 ec 0c             	sub    esp,0xc
c000c7dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7e0:	e8 d9 ff ff ff       	call   c000c7be <Device::wakeAll()>
c000c7e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7e7:	eb e9                	jmp    c000c7d2 <Device::wakeAll()+0x14>
c000c7e9:	83 c4 08             	add    esp,0x8
c000c7ec:	5b                   	pop    ebx
c000c7ed:	c3                   	ret    

c000c7ee <Device::detectAll()>:
c000c7ee:	53                   	push   ebx
c000c7ef:	83 ec 14             	sub    esp,0x14
c000c7f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7f8:	53                   	push   ebx
c000c7f9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c7fc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c802:	83 c4 10             	add    esp,0x10
c000c805:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c808:	74 0f                	je     c000c819 <Device::detectAll()+0x2b>
c000c80a:	83 ec 0c             	sub    esp,0xc
c000c80d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c810:	e8 d9 ff ff ff       	call   c000c7ee <Device::detectAll()>
c000c815:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c817:	eb e9                	jmp    c000c802 <Device::detectAll()+0x14>
c000c819:	83 c4 08             	add    esp,0x8
c000c81c:	5b                   	pop    ebx
c000c81d:	c3                   	ret    

c000c81e <Device::disableLegacyAll()>:
c000c81e:	c3                   	ret    
c000c81f:	90                   	nop

c000c820 <Device::loadDriversForAll()>:
c000c820:	c3                   	ret    
c000c821:	90                   	nop

c000c822 <Device::closeAll()>:
c000c822:	53                   	push   ebx
c000c823:	83 ec 08             	sub    esp,0x8
c000c826:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c82a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c82c:	6a 00                	push   0x0
c000c82e:	6a 00                	push   0x0
c000c830:	6a 00                	push   0x0
c000c832:	53                   	push   ebx
c000c833:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c836:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c83c:	83 c4 10             	add    esp,0x10
c000c83f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c842:	74 0f                	je     c000c853 <Device::closeAll()+0x31>
c000c844:	83 ec 0c             	sub    esp,0xc
c000c847:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c84a:	e8 d3 ff ff ff       	call   c000c822 <Device::closeAll()>
c000c84f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c851:	eb e9                	jmp    c000c83c <Device::closeAll()+0x1a>
c000c853:	83 c4 08             	add    esp,0x8
c000c856:	5b                   	pop    ebx
c000c857:	c3                   	ret    

c000c858 <Device::powerSavingAll(PowerSavingLevel)>:
c000c858:	56                   	push   esi
c000c859:	53                   	push   ebx
c000c85a:	83 ec 0c             	sub    esp,0xc
c000c85d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c861:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c865:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c867:	56                   	push   esi
c000c868:	53                   	push   ebx
c000c869:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c86c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c872:	83 c4 10             	add    esp,0x10
c000c875:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c878:	74 0f                	je     c000c889 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c87a:	52                   	push   edx
c000c87b:	52                   	push   edx
c000c87c:	56                   	push   esi
c000c87d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c880:	e8 d3 ff ff ff       	call   c000c858 <Device::powerSavingAll(PowerSavingLevel)>
c000c885:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c887:	eb e9                	jmp    c000c872 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c889:	58                   	pop    eax
c000c88a:	5b                   	pop    ebx
c000c88b:	5e                   	pop    esi
c000c88c:	c3                   	ret    
c000c88d:	90                   	nop

c000c88e <Device::setName(char const*)>:
c000c88e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c896:	e9 b5 3d ff ff       	jmp    c0000650 <strcpy>
c000c89b:	90                   	nop

c000c89c <Device::Device(char const*)>:
c000c89c:	83 ec 1c             	sub    esp,0x1c
c000c89f:	ba 90 16 02 c0       	mov    edx,0xc0021690
c000c8a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8a8:	89 10                	mov    DWORD PTR [eax],edx
c000c8aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ae:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8bc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c8c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ca:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c8d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8d8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c8e2:	83 ec 08             	sub    esp,0x8
c000c8e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8ed:	e8 9c ff ff ff       	call   c000c88e <Device::setName(char const*)>
c000c8f2:	83 c4 10             	add    esp,0x10
c000c8f5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c8fd:	83 ec 0c             	sub    esp,0xc
c000c900:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c904:	e8 ca b1 ff ff       	call   c0007ad3 <malloc>
c000c909:	83 c4 10             	add    esp,0x10
c000c90c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c912:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c919:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c91d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c927:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c92d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c937:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c93d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c948:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c94f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c953:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c95a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c95e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c96c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c988:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c992:	90                   	nop
c000c993:	83 c4 1c             	add    esp,0x1c
c000c996:	c3                   	ret    
c000c997:	90                   	nop

c000c998 <Device::getName()>:
c000c998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c99c:	05 d0 00 00 00       	add    eax,0xd0
c000c9a1:	c3                   	ret    

c000c9a2 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c9a2:	83 ec 0c             	sub    esp,0xc
c000c9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a9:	83 ec 08             	sub    esp,0x8
c000c9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b0:	50                   	push   eax
c000c9b1:	e8 e6 fe ff ff       	call   c000c89c <Device::Device(char const*)>
c000c9b6:	83 c4 10             	add    esp,0x10
c000c9b9:	ba bc 16 02 c0       	mov    edx,0xc00216bc
c000c9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c2:	89 10                	mov    DWORD PTR [eax],edx
c000c9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c9d2:	90                   	nop
c000c9d3:	83 c4 0c             	add    esp,0xc
c000c9d6:	c3                   	ret    
c000c9d7:	90                   	nop

c000c9d8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c9d8:	57                   	push   edi
c000c9d9:	56                   	push   esi
c000c9da:	53                   	push   ebx
c000c9db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c9df:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c9e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c9e7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c9ed:	75 0c                	jne    c000c9fb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c9ef:	52                   	push   edx
c000c9f0:	52                   	push   edx
c000c9f1:	53                   	push   ebx
c000c9f2:	56                   	push   esi
c000c9f3:	e8 0a 2e 01 00       	call   c001f802 <LinkedList<Device>::addElement(Device*)>
c000c9f8:	83 c4 10             	add    esp,0x10
c000c9fb:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca04:	74 12                	je     c000ca18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ca06:	50                   	push   eax
c000ca07:	57                   	push   edi
c000ca08:	56                   	push   esi
c000ca09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca0c:	e8 c7 ff ff ff       	call   c000c9d8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca13:	83 c4 10             	add    esp,0x10
c000ca16:	eb e9                	jmp    c000ca01 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ca18:	5b                   	pop    ebx
c000ca19:	5e                   	pop    esi
c000ca1a:	5f                   	pop    edi
c000ca1b:	c3                   	ret    

c000ca1c <getDevicesOfType(DeviceType)>:
c000ca1c:	53                   	push   ebx
c000ca1d:	83 ec 14             	sub    esp,0x14
c000ca20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca24:	53                   	push   ebx
c000ca25:	e8 b4 2e 01 00       	call   c001f8de <LinkedList<Device>::LinkedList()>
c000ca2a:	83 c4 0c             	add    esp,0xc
c000ca2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca31:	53                   	push   ebx
c000ca32:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000ca38:	e8 9b ff ff ff       	call   c000c9d8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca3d:	83 c4 18             	add    esp,0x18
c000ca40:	89 d8                	mov    eax,ebx
c000ca42:	5b                   	pop    ebx
c000ca43:	c2 04 00             	ret    0x4
c000ca46:	66 90                	xchg   ax,ax

c000ca48 <HardDiskController::HardDiskController(char const*)>:
c000ca48:	83 ec 0c             	sub    esp,0xc
c000ca4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca4f:	83 ec 08             	sub    esp,0x8
c000ca52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca56:	50                   	push   eax
c000ca57:	e8 40 fe ff ff       	call   c000c89c <Device::Device(char const*)>
c000ca5c:	83 c4 10             	add    esp,0x10
c000ca5f:	ba e8 16 02 c0       	mov    edx,0xc00216e8
c000ca64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca68:	89 10                	mov    DWORD PTR [eax],edx
c000ca6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca6e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ca78:	90                   	nop
c000ca79:	83 c4 0c             	add    esp,0xc
c000ca7c:	c3                   	ret    
c000ca7d:	90                   	nop
c000ca7e:	66 90                	xchg   ax,ax

c000ca80 <HardDiskController::~HardDiskController()>:
c000ca80:	83 ec 0c             	sub    esp,0xc
c000ca83:	ba e8 16 02 c0       	mov    edx,0xc00216e8
c000ca88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca8c:	89 10                	mov    DWORD PTR [eax],edx
c000ca8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca92:	83 ec 0c             	sub    esp,0xc
c000ca95:	50                   	push   eax
c000ca96:	e8 6b fb ff ff       	call   c000c606 <Device::~Device()>
c000ca9b:	83 c4 10             	add    esp,0x10
c000ca9e:	90                   	nop
c000ca9f:	83 c4 0c             	add    esp,0xc
c000caa2:	c3                   	ret    
c000caa3:	90                   	nop

c000caa4 <HardDiskController::~HardDiskController()>:
c000caa4:	83 ec 0c             	sub    esp,0xc
c000caa7:	83 ec 0c             	sub    esp,0xc
c000caaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caae:	e8 cd ff ff ff       	call   c000ca80 <HardDiskController::~HardDiskController()>
c000cab3:	83 c4 10             	add    esp,0x10
c000cab6:	83 ec 08             	sub    esp,0x8
c000cab9:	68 58 01 00 00       	push   0x158
c000cabe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac2:	e8 45 dd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cac7:	83 c4 10             	add    esp,0x10
c000caca:	83 c4 0c             	add    esp,0xc
c000cacd:	c3                   	ret    

c000cace <PhysicalDisk::eject()>:
c000cace:	83 c8 ff             	or     eax,0xffffffff
c000cad1:	c3                   	ret    

c000cad2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cad2:	83 ec 0c             	sub    esp,0xc
c000cad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad9:	83 ec 08             	sub    esp,0x8
c000cadc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cae0:	50                   	push   eax
c000cae1:	e8 b6 fd ff ff       	call   c000c89c <Device::Device(char const*)>
c000cae6:	83 c4 10             	add    esp,0x10
c000cae9:	ba 14 17 02 c0       	mov    edx,0xc0021714
c000caee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf2:	89 10                	mov    DWORD PTR [eax],edx
c000caf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000caff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb03:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb0e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cb20:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cb34:	90                   	nop
c000cb35:	83 c4 0c             	add    esp,0xc
c000cb38:	c3                   	ret    
c000cb39:	90                   	nop

c000cb3a <PhysicalDisk::startCache()>:
c000cb3a:	56                   	push   esi
c000cb3b:	53                   	push   ebx
c000cb3c:	83 ec 10             	sub    esp,0x10
c000cb3f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb43:	6a 44                	push   0x44
c000cb45:	e8 89 af ff ff       	call   c0007ad3 <malloc>
c000cb4a:	89 c6                	mov    esi,eax
c000cb4c:	58                   	pop    eax
c000cb4d:	5a                   	pop    edx
c000cb4e:	53                   	push   ebx
c000cb4f:	56                   	push   esi
c000cb50:	e8 83 17 00 00       	call   c000e2d8 <VCache::VCache(PhysicalDisk*)>
c000cb55:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cb5b:	83 c4 14             	add    esp,0x14
c000cb5e:	5b                   	pop    ebx
c000cb5f:	5e                   	pop    esi
c000cb60:	c3                   	ret    
c000cb61:	90                   	nop

c000cb62 <PhysicalDisk::~PhysicalDisk()>:
c000cb62:	83 ec 0c             	sub    esp,0xc
c000cb65:	ba 14 17 02 c0       	mov    edx,0xc0021714
c000cb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb6e:	89 10                	mov    DWORD PTR [eax],edx
c000cb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb74:	83 ec 0c             	sub    esp,0xc
c000cb77:	50                   	push   eax
c000cb78:	e8 89 fa ff ff       	call   c000c606 <Device::~Device()>
c000cb7d:	83 c4 10             	add    esp,0x10
c000cb80:	90                   	nop
c000cb81:	83 c4 0c             	add    esp,0xc
c000cb84:	c3                   	ret    
c000cb85:	90                   	nop

c000cb86 <PhysicalDisk::~PhysicalDisk()>:
c000cb86:	83 ec 0c             	sub    esp,0xc
c000cb89:	83 ec 0c             	sub    esp,0xc
c000cb8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb90:	e8 cd ff ff ff       	call   c000cb62 <PhysicalDisk::~PhysicalDisk()>
c000cb95:	83 c4 10             	add    esp,0x10
c000cb98:	83 ec 08             	sub    esp,0x8
c000cb9b:	68 6c 01 00 00       	push   0x16c
c000cba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cba4:	e8 63 dc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cba9:	83 c4 10             	add    esp,0x10
c000cbac:	83 c4 0c             	add    esp,0xc
c000cbaf:	c3                   	ret    

c000cbb0 <int_handler>:
c000cbb0:	55                   	push   ebp
c000cbb1:	57                   	push   edi
c000cbb2:	56                   	push   esi
c000cbb3:	53                   	push   ebx
c000cbb4:	83 ec 0c             	sub    esp,0xc
c000cbb7:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cbbe:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cbc2:	74 0b                	je     c000cbcf <int_handler+0x1f>
c000cbc4:	fa                   	cli    
c000cbc5:	f4                   	hlt    
c000cbc6:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cbcd:	75 f5                	jne    c000cbc4 <int_handler+0x14>
c000cbcf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cbd2:	8d 46 e0             	lea    eax,[esi-0x20]
c000cbd5:	83 f8 17             	cmp    eax,0x17
c000cbd8:	76 40                	jbe    c000cc1a <int_handler+0x6a>
c000cbda:	c1 e6 04             	shl    esi,0x4
c000cbdd:	31 db                	xor    ebx,ebx
c000cbdf:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cbe5:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cbeb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cbef:	85 c0                	test   eax,eax
c000cbf1:	74 13                	je     c000cc06 <int_handler+0x56>
c000cbf3:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cbf7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cbfa:	74 2c                	je     c000cc28 <int_handler+0x78>
c000cbfc:	83 ec 08             	sub    esp,0x8
c000cbff:	52                   	push   edx
c000cc00:	57                   	push   edi
c000cc01:	ff d0                	call   eax
c000cc03:	83 c4 10             	add    esp,0x10
c000cc06:	83 c3 01             	add    ebx,0x1
c000cc09:	83 fb 04             	cmp    ebx,0x4
c000cc0c:	75 dd                	jne    c000cbeb <int_handler+0x3b>
c000cc0e:	83 c4 0c             	add    esp,0xc
c000cc11:	31 c0                	xor    eax,eax
c000cc13:	5b                   	pop    ebx
c000cc14:	31 d2                	xor    edx,edx
c000cc16:	5e                   	pop    esi
c000cc17:	5f                   	pop    edi
c000cc18:	5d                   	pop    ebp
c000cc19:	c3                   	ret    
c000cc1a:	83 ec 0c             	sub    esp,0xc
c000cc1d:	50                   	push   eax
c000cc1e:	e8 26 b3 00 00       	call   c0017f49 <HalEndOfInterrupt(int)>
c000cc23:	83 c4 10             	add    esp,0x10
c000cc26:	eb b2                	jmp    c000cbda <int_handler+0x2a>
c000cc28:	83 ec 08             	sub    esp,0x8
c000cc2b:	52                   	push   edx
c000cc2c:	57                   	push   edi
c000cc2d:	ff d0                	call   eax
c000cc2f:	83 c4 10             	add    esp,0x10
c000cc32:	83 c4 0c             	add    esp,0xc
c000cc35:	5b                   	pop    ebx
c000cc36:	5e                   	pop    esi
c000cc37:	5f                   	pop    edi
c000cc38:	5d                   	pop    ebp
c000cc39:	c3                   	ret    

c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cc3a:	56                   	push   esi
c000cc3b:	31 c0                	xor    eax,eax
c000cc3d:	53                   	push   ebx
c000cc3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc46:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc4a:	89 ca                	mov    edx,ecx
c000cc4c:	c1 e2 04             	shl    edx,0x4
c000cc4f:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cc57:	74 17                	je     c000cc70 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cc59:	83 c0 01             	add    eax,0x1
c000cc5c:	83 f8 04             	cmp    eax,0x4
c000cc5f:	75 ee                	jne    c000cc4f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cc61:	c7 44 24 0c 44 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021744
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	e9 29 46 00 00       	jmp    c0011299 <KePanic(char const*)>
c000cc70:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cc73:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cc7a:	5b                   	pop    ebx
c000cc7b:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cc82:	5e                   	pop    esi
c000cc83:	c3                   	ret    

c000cc84 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cc84:	55                   	push   ebp
c000cc85:	57                   	push   edi
c000cc86:	56                   	push   esi
c000cc87:	53                   	push   ebx
c000cc88:	83 ec 0c             	sub    esp,0xc
c000cc8b:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cc91:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cc95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cc99:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cca0:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cca3:	74 57                	je     c000ccfc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cca5:	84 c0                	test   al,al
c000cca7:	89 c7                	mov    edi,eax
c000cca9:	74 1d                	je     c000ccc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000ccab:	83 fe 0f             	cmp    esi,0xf
c000ccae:	0f 8f d9 00 00 00    	jg     c000cd8d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000ccb4:	0f b6 b6 48 32 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcdb8]
c000ccbb:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000ccc3:	d1 ef                	shr    edi,1
c000ccc5:	83 e7 01             	and    edi,0x1
c000ccc8:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cccd:	83 ec 08             	sub    esp,0x8
c000ccd0:	31 db                	xor    ebx,ebx
c000ccd2:	50                   	push   eax
c000ccd3:	68 51 17 02 c0       	push   0xc0021751
c000ccd8:	e8 2d dc ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ccdd:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cce2:	83 c4 10             	add    esp,0x10
c000cce5:	85 c0                	test   eax,eax
c000cce7:	7f 59                	jg     c000cd42 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cce9:	8d 6e 20             	lea    ebp,[esi+0x20]
c000ccec:	83 ec 0c             	sub    esp,0xc
c000ccef:	68 68 17 02 c0       	push   0xc0021768
c000ccf4:	e8 a0 45 00 00       	call   c0011299 <KePanic(char const*)>
c000ccf9:	83 c4 10             	add    esp,0x10
c000ccfc:	89 e8                	mov    eax,ebp
c000ccfe:	31 d2                	xor    edx,edx
c000cd00:	c1 e0 04             	shl    eax,0x4
c000cd03:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cd0a:	85 c9                	test   ecx,ecx
c000cd0c:	0f 84 92 00 00 00    	je     c000cda4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cd12:	83 c2 01             	add    edx,0x1
c000cd15:	83 fa 04             	cmp    edx,0x4
c000cd18:	75 e9                	jne    c000cd03 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cd1a:	83 ec 0c             	sub    esp,0xc
c000cd1d:	68 bc 17 02 c0       	push   0xc00217bc
c000cd22:	e8 72 45 00 00       	call   c0011299 <KePanic(char const*)>
c000cd27:	83 c4 10             	add    esp,0x10
c000cd2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd2f:	83 c4 0c             	add    esp,0xc
c000cd32:	5b                   	pop    ebx
c000cd33:	5e                   	pop    esi
c000cd34:	5f                   	pop    edi
c000cd35:	5d                   	pop    ebp
c000cd36:	c3                   	ret    
c000cd37:	83 c3 01             	add    ebx,0x1
c000cd3a:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cd40:	7e a7                	jle    c000cce9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cd42:	8b 2c 9d e0 a0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd49:	83 ec 08             	sub    esp,0x8
c000cd4c:	56                   	push   esi
c000cd4d:	55                   	push   ebp
c000cd4e:	e8 db 19 01 00       	call   c001e72e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cd53:	83 c4 10             	add    esp,0x10
c000cd56:	84 c0                	test   al,al
c000cd58:	74 dd                	je     c000cd37 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cd5a:	89 f8                	mov    eax,edi
c000cd5c:	83 ec 04             	sub    esp,0x4
c000cd5f:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd66:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cd69:	0f b6 f8             	movzx  edi,al
c000cd6c:	57                   	push   edi
c000cd6d:	89 e8                	mov    eax,ebp
c000cd6f:	6a 00                	push   0x0
c000cd71:	0f b6 c0             	movzx  eax,al
c000cd74:	50                   	push   eax
c000cd75:	89 f0                	mov    eax,esi
c000cd77:	6a 00                	push   0x0
c000cd79:	0f b6 c0             	movzx  eax,al
c000cd7c:	6a 00                	push   0x0
c000cd7e:	50                   	push   eax
c000cd7f:	53                   	push   ebx
c000cd80:	e8 15 1b 01 00       	call   c001e89a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cd85:	83 c4 20             	add    esp,0x20
c000cd88:	e9 6f ff ff ff       	jmp    c000ccfc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cd8d:	83 ec 0c             	sub    esp,0xc
c000cd90:	31 ff                	xor    edi,edi
c000cd92:	68 84 17 02 c0       	push   0xc0021784
c000cd97:	e8 fd 44 00 00       	call   c0011299 <KePanic(char const*)>
c000cd9c:	83 c4 10             	add    esp,0x10
c000cd9f:	e9 24 ff ff ff       	jmp    c000ccc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cda4:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000cda7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cdab:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000cdb2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cdb6:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cdbd:	83 c4 0c             	add    esp,0xc
c000cdc0:	89 f0                	mov    eax,esi
c000cdc2:	5b                   	pop    ebx
c000cdc3:	5e                   	pop    esi
c000cdc4:	5f                   	pop    edi
c000cdc5:	5d                   	pop    ebp
c000cdc6:	c3                   	ret    

c000cdc7 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cdc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdcb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cdcf:	c1 e0 04             	shl    eax,0x4
c000cdd2:	8d 50 10             	lea    edx,[eax+0x10]
c000cdd5:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000cddb:	74 08                	je     c000cde5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000cddd:	83 c0 04             	add    eax,0x4
c000cde0:	39 d0                	cmp    eax,edx
c000cde2:	75 f1                	jne    c000cdd5 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000cde4:	c3                   	ret    
c000cde5:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cdef:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cdf9:	eb e2                	jmp    c000cddd <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cdfb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cdfb:	56                   	push   esi
c000cdfc:	53                   	push   ebx
c000cdfd:	83 ec 04             	sub    esp,0x4
c000ce00:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce09:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ce0d:	74 0e                	je     c000ce1d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ce0f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce14:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce1b:	75 34                	jne    c000ce51 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000ce1d:	8d 43 20             	lea    eax,[ebx+0x20]
c000ce20:	c1 e0 04             	shl    eax,0x4
c000ce23:	8d 50 10             	lea    edx,[eax+0x10]
c000ce26:	39 b0 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],esi
c000ce2c:	74 0d                	je     c000ce3b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000ce2e:	83 c0 04             	add    eax,0x4
c000ce31:	39 d0                	cmp    eax,edx
c000ce33:	75 f1                	jne    c000ce26 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ce35:	83 c4 04             	add    esp,0x4
c000ce38:	5b                   	pop    ebx
c000ce39:	5e                   	pop    esi
c000ce3a:	c3                   	ret    
c000ce3b:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce45:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce4f:	eb dd                	jmp    c000ce2e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000ce51:	83 fb 0f             	cmp    ebx,0xf
c000ce54:	7f 09                	jg     c000ce5f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000ce56:	0f b6 9b 48 32 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdcdb8]
c000ce5d:	eb be                	jmp    c000ce1d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ce5f:	83 ec 0c             	sub    esp,0xc
c000ce62:	68 75 17 02 c0       	push   0xc0021775
c000ce67:	e8 2d 44 00 00       	call   c0011299 <KePanic(char const*)>
c000ce6c:	83 c4 10             	add    esp,0x10
c000ce6f:	eb ac                	jmp    c000ce1d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000ce71 <setupINTS()>:
c000ce71:	31 c0                	xor    eax,eax
c000ce73:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce7d:	83 c0 10             	add    eax,0x10
c000ce80:	c7 80 10 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bf0],0x0
c000ce8a:	c7 80 14 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bec],0x0
c000ce94:	c7 80 14 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bec],0x0
c000ce9e:	c7 80 18 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be8],0x0
c000cea8:	c7 80 18 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be8],0x0
c000ceb2:	c7 80 1c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be4],0x0
c000cebc:	c7 80 1c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be4],0x0
c000cec6:	3d 00 10 00 00       	cmp    eax,0x1000
c000cecb:	75 a6                	jne    c000ce73 <setupINTS()+0x2>
c000cecd:	c3                   	ret    

c000cece <convertLegacyIRQNumber(int)>:
c000cece:	83 ec 0c             	sub    esp,0xc
c000ced1:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ced7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cedb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cee2:	74 0c                	je     c000cef0 <convertLegacyIRQNumber(int)+0x22>
c000cee4:	83 f8 0f             	cmp    eax,0xf
c000cee7:	7f 0b                	jg     c000cef4 <convertLegacyIRQNumber(int)+0x26>
c000cee9:	0f b6 80 48 32 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcdb8]
c000cef0:	83 c4 0c             	add    esp,0xc
c000cef3:	c3                   	ret    
c000cef4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cef8:	83 ec 0c             	sub    esp,0xc
c000cefb:	68 84 17 02 c0       	push   0xc0021784
c000cf00:	e8 94 43 00 00       	call   c0011299 <KePanic(char const*)>
c000cf05:	83 c4 10             	add    esp,0x10
c000cf08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf0c:	83 c4 0c             	add    esp,0xc
c000cf0f:	c3                   	ret    

c000cf10 <startGUI(void*)>:
c000cf10:	55                   	push   ebp
c000cf11:	89 e5                	mov    ebp,esp
c000cf13:	53                   	push   ebx
c000cf14:	83 ec 04             	sub    esp,0x4
c000cf17:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf1c:	83 e8 01             	sub    eax,0x1
c000cf1f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf24:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf29:	85 c0                	test   eax,eax
c000cf2b:	75 01                	jne    c000cf2e <startGUI(void*)+0x1e>
c000cf2d:	fb                   	sti    
c000cf2e:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf34:	83 ec 08             	sub    esp,0x8
c000cf37:	6a 01                	push   0x1
c000cf39:	68 e1 17 02 c0       	push   0xc00217e1
c000cf3e:	e8 eb 82 00 00       	call   c001522e <Thr::loadDLL(char const*, bool)>
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	83 ec 08             	sub    esp,0x8
c000cf49:	53                   	push   ebx
c000cf4a:	50                   	push   eax
c000cf4b:	e8 1d 85 00 00       	call   c001546d <Thr::executeDLL(unsigned long, void*)>
c000cf50:	83 c4 10             	add    esp,0x10
c000cf53:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf59:	83 ec 08             	sub    esp,0x8
c000cf5c:	6a 01                	push   0x1
c000cf5e:	68 fb 17 02 c0       	push   0xc00217fb
c000cf63:	e8 c6 82 00 00       	call   c001522e <Thr::loadDLL(char const*, bool)>
c000cf68:	83 c4 10             	add    esp,0x10
c000cf6b:	83 ec 08             	sub    esp,0x8
c000cf6e:	53                   	push   ebx
c000cf6f:	50                   	push   eax
c000cf70:	e8 f8 84 00 00       	call   c001546d <Thr::executeDLL(unsigned long, void*)>
c000cf75:	83 c4 10             	add    esp,0x10
c000cf78:	90                   	nop
c000cf79:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf7c:	c9                   	leave  
c000cf7d:	c3                   	ret    

c000cf7e <startGUIVESA(void*)>:
c000cf7e:	55                   	push   ebp
c000cf7f:	89 e5                	mov    ebp,esp
c000cf81:	53                   	push   ebx
c000cf82:	83 ec 04             	sub    esp,0x4
c000cf85:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf8a:	83 e8 01             	sub    eax,0x1
c000cf8d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf92:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf97:	85 c0                	test   eax,eax
c000cf99:	75 01                	jne    c000cf9c <startGUIVESA(void*)+0x1e>
c000cf9b:	fb                   	sti    
c000cf9c:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfa2:	83 ec 08             	sub    esp,0x8
c000cfa5:	6a 01                	push   0x1
c000cfa7:	68 19 18 02 c0       	push   0xc0021819
c000cfac:	e8 7d 82 00 00       	call   c001522e <Thr::loadDLL(char const*, bool)>
c000cfb1:	83 c4 10             	add    esp,0x10
c000cfb4:	83 ec 08             	sub    esp,0x8
c000cfb7:	53                   	push   ebx
c000cfb8:	50                   	push   eax
c000cfb9:	e8 af 84 00 00       	call   c001546d <Thr::executeDLL(unsigned long, void*)>
c000cfbe:	83 c4 10             	add    esp,0x10
c000cfc1:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfc7:	83 ec 08             	sub    esp,0x8
c000cfca:	6a 01                	push   0x1
c000cfcc:	68 fb 17 02 c0       	push   0xc00217fb
c000cfd1:	e8 58 82 00 00       	call   c001522e <Thr::loadDLL(char const*, bool)>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	83 ec 08             	sub    esp,0x8
c000cfdc:	53                   	push   ebx
c000cfdd:	50                   	push   eax
c000cfde:	e8 8a 84 00 00       	call   c001546d <Thr::executeDLL(unsigned long, void*)>
c000cfe3:	83 c4 10             	add    esp,0x10
c000cfe6:	90                   	nop
c000cfe7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cfea:	c9                   	leave  
c000cfeb:	c3                   	ret    

c000cfec <sendKeyToTerminal(unsigned char)>:
c000cfec:	55                   	push   ebp
c000cfed:	89 e5                	mov    ebp,esp
c000cfef:	83 ec 28             	sub    esp,0x28
c000cff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cff5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cff8:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cffd:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d001:	83 ec 08             	sub    esp,0x8
c000d004:	52                   	push   edx
c000d005:	50                   	push   eax
c000d006:	e8 b1 bd ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d00b:	83 c4 10             	add    esp,0x10
c000d00e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d012:	83 f8 0a             	cmp    eax,0xa
c000d015:	74 16                	je     c000d02d <sendKeyToTerminal(unsigned char)+0x41>
c000d017:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d01b:	83 f8 03             	cmp    eax,0x3
c000d01e:	74 0d                	je     c000d02d <sendKeyToTerminal(unsigned char)+0x41>
c000d020:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d024:	83 f8 1c             	cmp    eax,0x1c
c000d027:	0f 85 97 00 00 00    	jne    c000d0c4 <sendKeyToTerminal(unsigned char)+0xd8>
c000d02d:	fa                   	cli    
c000d02e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d033:	83 c0 01             	add    eax,0x1
c000d036:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d03b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d040:	83 c0 01             	add    eax,0x1
c000d043:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d048:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d04d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d050:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d05a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d05e:	74 1f                	je     c000d07f <sendKeyToTerminal(unsigned char)+0x93>
c000d060:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d063:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d066:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d069:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d06c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d06f:	83 ec 0c             	sub    esp,0xc
c000d072:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d075:	e8 16 91 00 00       	call   c0016190 <unblockTask(ThreadControlBlock*)>
c000d07a:	83 c4 10             	add    esp,0x10
c000d07d:	eb db                	jmp    c000d05a <sendKeyToTerminal(unsigned char)+0x6e>
c000d07f:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d084:	83 e8 01             	sub    eax,0x1
c000d087:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d08c:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d091:	85 c0                	test   eax,eax
c000d093:	75 18                	jne    c000d0ad <sendKeyToTerminal(unsigned char)+0xc1>
c000d095:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d09a:	85 c0                	test   eax,eax
c000d09c:	74 0f                	je     c000d0ad <sendKeyToTerminal(unsigned char)+0xc1>
c000d09e:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d0a8:	e8 eb 8b 00 00       	call   c0015c98 <schedule()>
c000d0ad:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0b2:	83 e8 01             	sub    eax,0x1
c000d0b5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d0ba:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0bf:	85 c0                	test   eax,eax
c000d0c1:	75 01                	jne    c000d0c4 <sendKeyToTerminal(unsigned char)+0xd8>
c000d0c3:	fb                   	sti    
c000d0c4:	90                   	nop
c000d0c5:	c9                   	leave  
c000d0c6:	c3                   	ret    

c000d0c7 <sendKeyboardToken(KeyboardToken)>:
c000d0c7:	55                   	push   ebp
c000d0c8:	89 e5                	mov    ebp,esp
c000d0ca:	83 ec 18             	sub    esp,0x18
c000d0cd:	e8 17 42 00 00       	call   c00112e9 <KeUserIOReceived()>
c000d0d2:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d0d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0d8:	0f b7 c0             	movzx  eax,ax
c000d0db:	83 f2 01             	xor    edx,0x1
c000d0de:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d0e4:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d0e9:	85 c0                	test   eax,eax
c000d0eb:	74 24                	je     c000d111 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d0ed:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d0f3:	83 ec 04             	sub    esp,0x4
c000d0f6:	68 40 84 02 c0       	push   0xc0028440
c000d0fb:	83 ec 08             	sub    esp,0x8
c000d0fe:	89 e0                	mov    eax,esp
c000d100:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d103:	89 08                	mov    DWORD PTR [eax],ecx
c000d105:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d108:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d10c:	ff d2                	call   edx
c000d10e:	83 c4 10             	add    esp,0x10
c000d111:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d115:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d118:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d11d:	0f b6 d2             	movzx  edx,dl
c000d120:	0f b6 c0             	movzx  eax,al
c000d123:	39 c2                	cmp    edx,eax
c000d125:	74 1c                	je     c000d143 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d127:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d12a:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d12f:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d134:	0f b6 c0             	movzx  eax,al
c000d137:	83 ec 0c             	sub    esp,0xc
c000d13a:	50                   	push   eax
c000d13b:	e8 d8 b3 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d140:	83 c4 10             	add    esp,0x10
c000d143:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d146:	0f b6 c0             	movzx  eax,al
c000d149:	85 c0                	test   eax,eax
c000d14b:	0f 84 da 00 00 00    	je     c000d22b <sendKeyboardToken(KeyboardToken)+0x164>
c000d151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d154:	0f b7 c0             	movzx  eax,ax
c000d157:	3d 18 03 00 00       	cmp    eax,0x318
c000d15c:	75 06                	jne    c000d164 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d15e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d167:	0f b7 c0             	movzx  eax,ax
c000d16a:	3d 19 03 00 00       	cmp    eax,0x319
c000d16f:	75 06                	jne    c000d177 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d171:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d177:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d17a:	0f b7 c0             	movzx  eax,ax
c000d17d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d182:	75 06                	jne    c000d18a <sendKeyboardToken(KeyboardToken)+0xc3>
c000d184:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d18a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d18d:	0f b7 c0             	movzx  eax,ax
c000d190:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d195:	75 06                	jne    c000d19d <sendKeyboardToken(KeyboardToken)+0xd6>
c000d197:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d19d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1a0:	0f b7 c0             	movzx  eax,ax
c000d1a3:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1a8:	75 06                	jne    c000d1b0 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d1aa:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d1b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1b3:	0f b7 c0             	movzx  eax,ax
c000d1b6:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1bb:	75 06                	jne    c000d1c3 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d1bd:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c6:	0f b7 c0             	movzx  eax,ax
c000d1c9:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1ce:	75 06                	jne    c000d1d6 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d1d0:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d1d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1d9:	0f b7 c0             	movzx  eax,ax
c000d1dc:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d1e1:	75 06                	jne    c000d1e9 <sendKeyboardToken(KeyboardToken)+0x122>
c000d1e3:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d1e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ec:	0f b7 c0             	movzx  eax,ax
c000d1ef:	3d 20 03 00 00       	cmp    eax,0x320
c000d1f4:	75 06                	jne    c000d1fc <sendKeyboardToken(KeyboardToken)+0x135>
c000d1f6:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d1fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ff:	0f b7 c0             	movzx  eax,ax
c000d202:	3d 21 03 00 00       	cmp    eax,0x321
c000d207:	75 06                	jne    c000d20f <sendKeyboardToken(KeyboardToken)+0x148>
c000d209:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d20f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d212:	0f b7 c0             	movzx  eax,ax
c000d215:	3d 22 03 00 00       	cmp    eax,0x322
c000d21a:	0f 85 f1 00 00 00    	jne    c000d311 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d220:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d226:	e9 e6 00 00 00       	jmp    c000d311 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d22b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d22e:	0f b7 c0             	movzx  eax,ax
c000d231:	3d 18 03 00 00       	cmp    eax,0x318
c000d236:	75 0a                	jne    c000d242 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d238:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d23e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d245:	0f b7 c0             	movzx  eax,ax
c000d248:	3d 19 03 00 00       	cmp    eax,0x319
c000d24d:	75 0a                	jne    c000d259 <sendKeyboardToken(KeyboardToken)+0x192>
c000d24f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d255:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d25c:	0f b7 c0             	movzx  eax,ax
c000d25f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d264:	75 0a                	jne    c000d270 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d266:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d26c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d273:	0f b7 c0             	movzx  eax,ax
c000d276:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d27b:	75 0a                	jne    c000d287 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d27d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d283:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d28a:	0f b7 c0             	movzx  eax,ax
c000d28d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d292:	75 0a                	jne    c000d29e <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d294:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d29a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d29e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a1:	0f b7 c0             	movzx  eax,ax
c000d2a4:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d2a9:	75 0a                	jne    c000d2b5 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d2ab:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d2b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b8:	0f b7 c0             	movzx  eax,ax
c000d2bb:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d2c0:	75 0a                	jne    c000d2cc <sendKeyboardToken(KeyboardToken)+0x205>
c000d2c2:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d2c8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2cf:	0f b7 c0             	movzx  eax,ax
c000d2d2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d2d7:	75 0a                	jne    c000d2e3 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d2d9:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d2df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2e6:	0f b7 c0             	movzx  eax,ax
c000d2e9:	3d 20 03 00 00       	cmp    eax,0x320
c000d2ee:	75 0a                	jne    c000d2fa <sendKeyboardToken(KeyboardToken)+0x233>
c000d2f0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d2f6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2fd:	0f b7 c0             	movzx  eax,ax
c000d300:	3d 21 03 00 00       	cmp    eax,0x321
c000d305:	75 0a                	jne    c000d311 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d307:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d30d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d314:	0f b7 c0             	movzx  eax,ax
c000d317:	3d 00 02 00 00       	cmp    eax,0x200
c000d31c:	75 2f                	jne    c000d34d <sendKeyboardToken(KeyboardToken)+0x286>
c000d31e:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d323:	83 f0 01             	xor    eax,0x1
c000d326:	0f b6 c0             	movzx  eax,al
c000d329:	85 c0                	test   eax,eax
c000d32b:	74 20                	je     c000d34d <sendKeyboardToken(KeyboardToken)+0x286>
c000d32d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d332:	6a 01                	push   0x1
c000d334:	6a 00                	push   0x0
c000d336:	68 10 cf 00 c0       	push   0xc000cf10
c000d33b:	50                   	push   eax
c000d33c:	e8 0b 87 00 00       	call   c0015a4c <Process::createThread(void (*)(void*), void*, int)>
c000d341:	83 c4 10             	add    esp,0x10
c000d344:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d34b:	eb 3a                	jmp    c000d387 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d34d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d350:	0f b7 c0             	movzx  eax,ax
c000d353:	3d 01 02 00 00       	cmp    eax,0x201
c000d358:	75 2d                	jne    c000d387 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d35a:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d35f:	83 f0 01             	xor    eax,0x1
c000d362:	0f b6 c0             	movzx  eax,al
c000d365:	85 c0                	test   eax,eax
c000d367:	74 1e                	je     c000d387 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d369:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d36e:	6a 01                	push   0x1
c000d370:	6a 00                	push   0x0
c000d372:	68 7e cf 00 c0       	push   0xc000cf7e
c000d377:	50                   	push   eax
c000d378:	e8 cf 86 00 00       	call   c0015a4c <Process::createThread(void (*)(void*), void*, int)>
c000d37d:	83 c4 10             	add    esp,0x10
c000d380:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d387:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d38a:	0f b7 c0             	movzx  eax,ax
c000d38d:	3d 25 03 00 00       	cmp    eax,0x325
c000d392:	75 06                	jne    c000d39a <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d394:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d39a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d39d:	0f b7 c0             	movzx  eax,ax
c000d3a0:	3d 24 03 00 00       	cmp    eax,0x324
c000d3a5:	75 06                	jne    c000d3ad <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d3a7:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d3ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3b0:	0f b7 c0             	movzx  eax,ax
c000d3b3:	3d 23 03 00 00       	cmp    eax,0x323
c000d3b8:	75 06                	jne    c000d3c0 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d3ba:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d3c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c3:	0f b7 c0             	movzx  eax,ax
c000d3c6:	3d 26 03 00 00       	cmp    eax,0x326
c000d3cb:	75 06                	jne    c000d3d3 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d3cd:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d3d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d6:	0f b7 c0             	movzx  eax,ax
c000d3d9:	3d 27 03 00 00       	cmp    eax,0x327
c000d3de:	75 06                	jne    c000d3e6 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d3e0:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d3e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e9:	0f b7 c0             	movzx  eax,ax
c000d3ec:	3d 22 03 00 00       	cmp    eax,0x322
c000d3f1:	75 06                	jne    c000d3f9 <sendKeyboardToken(KeyboardToken)+0x332>
c000d3f3:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d3f9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d3fd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d400:	83 f0 01             	xor    eax,0x1
c000d403:	0f b6 c0             	movzx  eax,al
c000d406:	85 c0                	test   eax,eax
c000d408:	74 7c                	je     c000d486 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d40a:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d40f:	0f b6 c0             	movzx  eax,al
c000d412:	85 c0                	test   eax,eax
c000d414:	74 43                	je     c000d459 <sendKeyboardToken(KeyboardToken)+0x392>
c000d416:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d41a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d41e:	85 c0                	test   eax,eax
c000d420:	74 2b                	je     c000d44d <sendKeyboardToken(KeyboardToken)+0x386>
c000d422:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d428:	89 d0                	mov    eax,edx
c000d42a:	c1 e0 02             	shl    eax,0x2
c000d42d:	01 d0                	add    eax,edx
c000d42f:	d1 e0                	shl    eax,1
c000d431:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d439:	0f b7 c0             	movzx  eax,ax
c000d43c:	8d 50 d0             	lea    edx,[eax-0x30]
c000d43f:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d444:	01 d0                	add    eax,edx
c000d446:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d44b:	eb 71                	jmp    c000d4be <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d44d:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d457:	eb 65                	jmp    c000d4be <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d459:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d45e:	85 c0                	test   eax,eax
c000d460:	74 18                	je     c000d47a <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d462:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d467:	0f b6 c0             	movzx  eax,al
c000d46a:	83 ec 0c             	sub    esp,0xc
c000d46d:	50                   	push   eax
c000d46e:	e8 79 fb ff ff       	call   c000cfec <sendKeyToTerminal(unsigned char)>
c000d473:	83 c4 10             	add    esp,0x10
c000d476:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d47a:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d484:	eb 38                	jmp    c000d4be <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d489:	0f b7 c0             	movzx  eax,ax
c000d48c:	3d 01 01 00 00       	cmp    eax,0x101
c000d491:	75 2b                	jne    c000d4be <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d493:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d498:	85 c0                	test   eax,eax
c000d49a:	74 18                	je     c000d4b4 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d49c:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4a1:	0f b6 c0             	movzx  eax,al
c000d4a4:	83 ec 0c             	sub    esp,0xc
c000d4a7:	50                   	push   eax
c000d4a8:	e8 3f fb ff ff       	call   c000cfec <sendKeyToTerminal(unsigned char)>
c000d4ad:	83 c4 10             	add    esp,0x10
c000d4b0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4b4:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4be:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d4c1:	83 f0 01             	xor    eax,0x1
c000d4c4:	0f b6 c0             	movzx  eax,al
c000d4c7:	85 c0                	test   eax,eax
c000d4c9:	74 5a                	je     c000d525 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4cb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4ce:	83 f0 01             	xor    eax,0x1
c000d4d1:	0f b6 c0             	movzx  eax,al
c000d4d4:	85 c0                	test   eax,eax
c000d4d6:	74 4d                	je     c000d525 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4d8:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d4dd:	83 f0 01             	xor    eax,0x1
c000d4e0:	0f b6 c0             	movzx  eax,al
c000d4e3:	85 c0                	test   eax,eax
c000d4e5:	74 3e                	je     c000d525 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ea:	0f b7 c0             	movzx  eax,ax
c000d4ed:	83 f8 1f             	cmp    eax,0x1f
c000d4f0:	76 0b                	jbe    c000d4fd <sendKeyboardToken(KeyboardToken)+0x436>
c000d4f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f5:	0f b7 c0             	movzx  eax,ax
c000d4f8:	83 f8 7e             	cmp    eax,0x7e
c000d4fb:	76 16                	jbe    c000d513 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d4fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d500:	0f b7 c0             	movzx  eax,ax
c000d503:	83 f8 0a             	cmp    eax,0xa
c000d506:	74 0b                	je     c000d513 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50b:	0f b7 c0             	movzx  eax,ax
c000d50e:	83 f8 08             	cmp    eax,0x8
c000d511:	75 12                	jne    c000d525 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d516:	0f b6 c0             	movzx  eax,al
c000d519:	83 ec 0c             	sub    esp,0xc
c000d51c:	50                   	push   eax
c000d51d:	e8 ca fa ff ff       	call   c000cfec <sendKeyToTerminal(unsigned char)>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d528:	83 f0 01             	xor    eax,0x1
c000d52b:	0f b6 c0             	movzx  eax,al
c000d52e:	85 c0                	test   eax,eax
c000d530:	74 5d                	je     c000d58f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d532:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d535:	83 f0 01             	xor    eax,0x1
c000d538:	0f b6 c0             	movzx  eax,al
c000d53b:	85 c0                	test   eax,eax
c000d53d:	74 50                	je     c000d58f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d53f:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d544:	0f b6 c0             	movzx  eax,al
c000d547:	85 c0                	test   eax,eax
c000d549:	74 44                	je     c000d58f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d54b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d54e:	0f b7 c0             	movzx  eax,ax
c000d551:	83 f8 3f             	cmp    eax,0x3f
c000d554:	76 39                	jbe    c000d58f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d559:	0f b7 c0             	movzx  eax,ax
c000d55c:	83 f8 7f             	cmp    eax,0x7f
c000d55f:	77 2e                	ja     c000d58f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d564:	88 c2                	mov    dl,al
c000d566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d569:	0f b7 c0             	movzx  eax,ax
c000d56c:	83 f8 5f             	cmp    eax,0x5f
c000d56f:	76 04                	jbe    c000d575 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d571:	b0 20                	mov    al,0x20
c000d573:	eb 02                	jmp    c000d577 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d575:	b0 00                	mov    al,0x0
c000d577:	89 d1                	mov    ecx,edx
c000d579:	29 c1                	sub    ecx,eax
c000d57b:	89 c8                	mov    eax,ecx
c000d57d:	83 e8 40             	sub    eax,0x40
c000d580:	0f b6 c0             	movzx  eax,al
c000d583:	83 ec 0c             	sub    esp,0xc
c000d586:	50                   	push   eax
c000d587:	e8 60 fa ff ff       	call   c000cfec <sendKeyToTerminal(unsigned char)>
c000d58c:	83 c4 10             	add    esp,0x10
c000d58f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d592:	0f b7 c0             	movzx  eax,ax
c000d595:	3d 00 03 00 00       	cmp    eax,0x300
c000d59a:	75 12                	jne    c000d5ae <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d59c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d59f:	83 f0 01             	xor    eax,0x1
c000d5a2:	0f b6 c0             	movzx  eax,al
c000d5a5:	85 c0                	test   eax,eax
c000d5a7:	74 05                	je     c000d5ae <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5a9:	e8 6b af ff ff       	call   c0008519 <doTerminalCycle()>
c000d5ae:	90                   	nop
c000d5af:	c9                   	leave  
c000d5b0:	c3                   	ret    

c000d5b1 <clearInternalKeybuffer(VgaText*)>:
c000d5b1:	55                   	push   ebp
c000d5b2:	89 e5                	mov    ebp,esp
c000d5b4:	83 ec 08             	sub    esp,0x8
c000d5b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ba:	05 02 01 00 00       	add    eax,0x102
c000d5bf:	83 ec 0c             	sub    esp,0xc
c000d5c2:	50                   	push   eax
c000d5c3:	e8 b8 2f ff ff       	call   c0000580 <strlen>
c000d5c8:	83 c4 10             	add    esp,0x10
c000d5cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5ce:	81 c2 02 01 00 00    	add    edx,0x102
c000d5d4:	83 ec 04             	sub    esp,0x4
c000d5d7:	50                   	push   eax
c000d5d8:	6a 00                	push   0x0
c000d5da:	52                   	push   edx
c000d5db:	e8 10 2f ff ff       	call   c00004f0 <memset>
c000d5e0:	83 c4 10             	add    esp,0x10
c000d5e3:	90                   	nop
c000d5e4:	c9                   	leave  
c000d5e5:	c3                   	ret    

c000d5e6 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d5e6:	55                   	push   ebp
c000d5e7:	89 e5                	mov    ebp,esp
c000d5e9:	83 ec 18             	sub    esp,0x18
c000d5ec:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d5f1:	85 c0                	test   eax,eax
c000d5f3:	74 2a                	je     c000d61f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d5f5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d5fb:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d601:	83 ec 04             	sub    esp,0x4
c000d604:	68 40 84 02 c0       	push   0xc0028440
c000d609:	83 ec 08             	sub    esp,0x8
c000d60c:	89 e0                	mov    eax,esp
c000d60e:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d611:	89 08                	mov    DWORD PTR [eax],ecx
c000d613:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d616:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d61a:	ff d2                	call   edx
c000d61c:	83 c4 10             	add    esp,0x10
c000d61f:	fb                   	sti    
c000d620:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d627:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d62b:	0f 84 0d 01 00 00    	je     c000d73e <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d634:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d63a:	0f be c0             	movsx  eax,al
c000d63d:	85 c0                	test   eax,eax
c000d63f:	75 2c                	jne    c000d66d <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d641:	fa                   	cli    
c000d642:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d647:	83 c0 01             	add    eax,0x1
c000d64a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d64f:	e8 44 86 00 00       	call   c0015c98 <schedule()>
c000d654:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d659:	83 e8 01             	sub    eax,0x1
c000d65c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d661:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d666:	85 c0                	test   eax,eax
c000d668:	75 c7                	jne    c000d631 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d66a:	fb                   	sti    
c000d66b:	eb c4                	jmp    c000d631 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d66d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d670:	8d 50 01             	lea    edx,[eax+0x1]
c000d673:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d676:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d679:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d67f:	88 10                	mov    BYTE PTR [eax],dl
c000d681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d684:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d68a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d68d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d691:	83 f8 03             	cmp    eax,0x3
c000d694:	75 1e                	jne    c000d6b4 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d696:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d69b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d69d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6a0:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6a6:	83 ec 08             	sub    esp,0x8
c000d6a9:	6a 02                	push   0x2
c000d6ab:	50                   	push   eax
c000d6ac:	e8 86 40 00 00       	call   c0011737 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6b1:	83 c4 10             	add    esp,0x10
c000d6b4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6b8:	83 f8 1c             	cmp    eax,0x1c
c000d6bb:	75 1e                	jne    c000d6db <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d6bd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6c7:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6cd:	83 ec 08             	sub    esp,0x8
c000d6d0:	6a 09                	push   0x9
c000d6d2:	50                   	push   eax
c000d6d3:	e8 5f 40 00 00       	call   c0011737 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6d8:	83 c4 10             	add    esp,0x10
c000d6db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6de:	05 02 01 00 00       	add    eax,0x102
c000d6e3:	83 ec 0c             	sub    esp,0xc
c000d6e6:	50                   	push   eax
c000d6e7:	e8 94 2e ff ff       	call   c0000580 <strlen>
c000d6ec:	83 c4 10             	add    esp,0x10
c000d6ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6f2:	81 c2 02 01 00 00    	add    edx,0x102
c000d6f8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d6fb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6fe:	81 c2 02 01 00 00    	add    edx,0x102
c000d704:	83 ec 04             	sub    esp,0x4
c000d707:	50                   	push   eax
c000d708:	51                   	push   ecx
c000d709:	52                   	push   edx
c000d70a:	e8 c1 2c ff ff       	call   c00003d0 <memmove>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d716:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d71a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d71e:	83 f8 0a             	cmp    eax,0xa
c000d721:	74 16                	je     c000d739 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d723:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d727:	83 f8 03             	cmp    eax,0x3
c000d72a:	74 0d                	je     c000d739 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d72c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d730:	83 f8 1c             	cmp    eax,0x1c
c000d733:	0f 85 ee fe ff ff    	jne    c000d627 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d739:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d73c:	eb 03                	jmp    c000d741 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d73e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d741:	c9                   	leave  
c000d742:	c3                   	ret    
c000d743:	90                   	nop

c000d744 <Keyboard::Keyboard(char const*)>:
c000d744:	83 ec 0c             	sub    esp,0xc
c000d747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d74b:	83 ec 08             	sub    esp,0x8
c000d74e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d752:	50                   	push   eax
c000d753:	e8 44 f1 ff ff       	call   c000c89c <Device::Device(char const*)>
c000d758:	83 c4 10             	add    esp,0x10
c000d75b:	ba 3c 18 02 c0       	mov    edx,0xc002183c
c000d760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d764:	89 10                	mov    DWORD PTR [eax],edx
c000d766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d774:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d77b:	90                   	nop
c000d77c:	83 c4 0c             	add    esp,0xc
c000d77f:	c3                   	ret    

c000d780 <Keyboard::~Keyboard()>:
c000d780:	83 ec 0c             	sub    esp,0xc
c000d783:	ba 3c 18 02 c0       	mov    edx,0xc002183c
c000d788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78c:	89 10                	mov    DWORD PTR [eax],edx
c000d78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d792:	83 ec 0c             	sub    esp,0xc
c000d795:	50                   	push   eax
c000d796:	e8 6b ee ff ff       	call   c000c606 <Device::~Device()>
c000d79b:	83 c4 10             	add    esp,0x10
c000d79e:	90                   	nop
c000d79f:	83 c4 0c             	add    esp,0xc
c000d7a2:	c3                   	ret    
c000d7a3:	90                   	nop

c000d7a4 <Keyboard::~Keyboard()>:
c000d7a4:	83 ec 0c             	sub    esp,0xc
c000d7a7:	83 ec 0c             	sub    esp,0xc
c000d7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ae:	e8 cd ff ff ff       	call   c000d780 <Keyboard::~Keyboard()>
c000d7b3:	83 c4 10             	add    esp,0x10
c000d7b6:	83 ec 08             	sub    esp,0x8
c000d7b9:	68 5c 01 00 00       	push   0x15c
c000d7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c2:	e8 45 d0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d7c7:	83 c4 10             	add    esp,0x10
c000d7ca:	83 c4 0c             	add    esp,0xc
c000d7cd:	c3                   	ret    

c000d7ce <LogicalDisk::close(int, int, void*)>:
c000d7ce:	83 c8 ff             	or     eax,0xffffffff
c000d7d1:	c3                   	ret    

c000d7d2 <LogicalDisk::~LogicalDisk()>:
c000d7d2:	83 ec 0c             	sub    esp,0xc
c000d7d5:	ba b4 18 02 c0       	mov    edx,0xc00218b4
c000d7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7de:	89 10                	mov    DWORD PTR [eax],edx
c000d7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e4:	83 ec 0c             	sub    esp,0xc
c000d7e7:	50                   	push   eax
c000d7e8:	e8 19 ee ff ff       	call   c000c606 <Device::~Device()>
c000d7ed:	83 c4 10             	add    esp,0x10
c000d7f0:	90                   	nop
c000d7f1:	83 c4 0c             	add    esp,0xc
c000d7f4:	c3                   	ret    
c000d7f5:	90                   	nop

c000d7f6 <LogicalDisk::~LogicalDisk()>:
c000d7f6:	83 ec 0c             	sub    esp,0xc
c000d7f9:	83 ec 0c             	sub    esp,0xc
c000d7fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d800:	e8 cd ff ff ff       	call   c000d7d2 <LogicalDisk::~LogicalDisk()>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	83 ec 08             	sub    esp,0x8
c000d80b:	68 78 01 00 00       	push   0x178
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	e8 f3 cf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d819:	83 c4 10             	add    esp,0x10
c000d81c:	83 c4 0c             	add    esp,0xc
c000d81f:	c3                   	ret    

c000d820 <LogicalDisk::open(int, int, void*)>:
c000d820:	83 ec 18             	sub    esp,0x18
c000d823:	68 68 18 02 c0       	push   0xc0021868
c000d828:	e8 6c 3a 00 00       	call   c0011299 <KePanic(char const*)>
c000d82d:	83 c8 ff             	or     eax,0xffffffff
c000d830:	83 c4 1c             	add    esp,0x1c
c000d833:	c3                   	ret    

c000d834 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d834:	53                   	push   ebx
c000d835:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d83d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d841:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d847:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d84d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d853:	77 10                	ja     c000d865 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d855:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d85b:	89 d3                	mov    ebx,edx
c000d85d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d863:	72 05                	jb     c000d86a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d865:	83 c8 ff             	or     eax,0xffffffff
c000d868:	89 c2                	mov    edx,eax
c000d86a:	5b                   	pop    ebx
c000d86b:	c3                   	ret    

c000d86c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d86c:	56                   	push   esi
c000d86d:	83 c8 ff             	or     eax,0xffffffff
c000d870:	53                   	push   ebx
c000d871:	89 c2                	mov    edx,eax
c000d873:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d877:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d87b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d87f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d885:	77 27                	ja     c000d8ae <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d887:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d88d:	89 d8                	mov    eax,ebx
c000d88f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d895:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d89a:	89 c2                	mov    edx,eax
c000d89c:	73 10                	jae    c000d8ae <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d89e:	89 c8                	mov    eax,ecx
c000d8a0:	89 da                	mov    edx,ebx
c000d8a2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d8a8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d8ae:	5b                   	pop    ebx
c000d8af:	5e                   	pop    esi
c000d8b0:	c3                   	ret    
c000d8b1:	90                   	nop

c000d8b2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d8b2:	83 ec 1c             	sub    esp,0x1c
c000d8b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d8c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d8cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d8d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d8d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8d8:	83 ec 08             	sub    esp,0x8
c000d8db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d8df:	50                   	push   eax
c000d8e0:	e8 b7 ef ff ff       	call   c000c89c <Device::Device(char const*)>
c000d8e5:	83 c4 10             	add    esp,0x10
c000d8e8:	ba b4 18 02 c0       	mov    edx,0xc00218b4
c000d8ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8f1:	89 10                	mov    DWORD PTR [eax],edx
c000d8f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8f7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d8fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d902:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d909:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d90d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d918:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d922:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d92a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d92e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d934:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d93a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d93e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d941:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d945:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d94b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d951:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d955:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d959:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d95f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d963:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d96d:	90                   	nop
c000d96e:	83 c4 1c             	add    esp,0x1c
c000d971:	c3                   	ret    

c000d972 <LogicalDisk::assignDriveLetter()>:
c000d972:	55                   	push   ebp
c000d973:	57                   	push   edi
c000d974:	56                   	push   esi
c000d975:	53                   	push   ebx
c000d976:	83 ec 14             	sub    esp,0x14
c000d979:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d97d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d983:	b0 41                	mov    al,0x41
c000d985:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d98b:	84 d2                	test   dl,dl
c000d98d:	75 02                	jne    c000d991 <LogicalDisk::assignDriveLetter()+0x1f>
c000d98f:	b0 43                	mov    al,0x43
c000d991:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d997:	0f b6 ca             	movzx  ecx,dl
c000d99a:	0f be e8             	movsx  ebp,al
c000d99d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d9a1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d9a5:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d9ab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d9af:	3c 43                	cmp    al,0x43
c000d9b1:	75 10                	jne    c000d9c3 <LogicalDisk::assignDriveLetter()+0x51>
c000d9b3:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d9ba:	75 5a                	jne    c000da16 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d9c1:	75 53                	jne    c000da16 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9c3:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d9c6:	ba 01 00 00 00       	mov    edx,0x1
c000d9cb:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9ce:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d9d1:	d3 e2                	shl    edx,cl
c000d9d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d9d7:	89 d7                	mov    edi,edx
c000d9d9:	89 d6                	mov    esi,edx
c000d9db:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d9df:	c1 ff 1f             	sar    edi,0x1f
c000d9e2:	21 f9                	and    ecx,edi
c000d9e4:	09 d1                	or     ecx,edx
c000d9e6:	75 2e                	jne    c000da16 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d9ec:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d9f0:	09 f2                	or     edx,esi
c000d9f2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d9f5:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000d9fb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d9ff:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000da05:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000da0c:	09 fa                	or     edx,edi
c000da0e:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da14:	eb 0d                	jmp    c000da23 <LogicalDisk::assignDriveLetter()+0xb1>
c000da16:	8d 50 01             	lea    edx,[eax+0x1]
c000da19:	45                   	inc    ebp
c000da1a:	80 fa 5b             	cmp    dl,0x5b
c000da1d:	88 d0                	mov    al,dl
c000da1f:	75 8e                	jne    c000d9af <LogicalDisk::assignDriveLetter()+0x3d>
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 c4 14             	add    esp,0x14
c000da26:	5b                   	pop    ebx
c000da27:	5e                   	pop    esi
c000da28:	5f                   	pop    edi
c000da29:	5d                   	pop    ebp
c000da2a:	c3                   	ret    
c000da2b:	90                   	nop

c000da2c <LogicalDisk::mount()>:
c000da2c:	56                   	push   esi
c000da2d:	53                   	push   ebx
c000da2e:	53                   	push   ebx
c000da2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da33:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000da39:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000da43:	85 db                	test   ebx,ebx
c000da45:	74 27                	je     c000da6e <LogicalDisk::mount()+0x42>
c000da47:	51                   	push   ecx
c000da48:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000da4f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000da51:	83 e8 41             	sub    eax,0x41
c000da54:	50                   	push   eax
c000da55:	56                   	push   esi
c000da56:	53                   	push   ebx
c000da57:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000da5a:	83 c4 10             	add    esp,0x10
c000da5d:	84 c0                	test   al,al
c000da5f:	74 08                	je     c000da69 <LogicalDisk::mount()+0x3d>
c000da61:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000da67:	eb 07                	jmp    c000da70 <LogicalDisk::mount()+0x44>
c000da69:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000da6c:	eb d5                	jmp    c000da43 <LogicalDisk::mount()+0x17>
c000da6e:	31 c0                	xor    eax,eax
c000da70:	5a                   	pop    edx
c000da71:	5b                   	pop    ebx
c000da72:	5e                   	pop    esi
c000da73:	c3                   	ret    

c000da74 <LogicalDisk::unmount()>:
c000da74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da78:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000da82:	c3                   	ret    
c000da83:	90                   	nop

c000da84 <LogicalDisk::eject()>:
c000da84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da88:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000da8e:	8b 10                	mov    edx,DWORD PTR [eax]
c000da90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000da94:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000da97:	90                   	nop

c000da98 <LogicalDisk::unassignDriveLetter()>:
c000da98:	57                   	push   edi
c000da99:	56                   	push   esi
c000da9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da9e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000daa5:	85 c9                	test   ecx,ecx
c000daa7:	75 0f                	jne    c000dab8 <LogicalDisk::unassignDriveLetter()+0x20>
c000daa9:	c7 44 24 0c 8c 18 02 c0 	mov    DWORD PTR [esp+0xc],0xc002188c
c000dab1:	5e                   	pop    esi
c000dab2:	5f                   	pop    edi
c000dab3:	e9 e1 37 00 00       	jmp    c0011299 <KePanic(char const*)>
c000dab8:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dabf:	83 e9 41             	sub    ecx,0x41
c000dac2:	b8 01 00 00 00       	mov    eax,0x1
c000dac7:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000dad2:	d3 e0                	shl    eax,cl
c000dad4:	89 c7                	mov    edi,eax
c000dad6:	f7 d0                	not    eax
c000dad8:	c1 ff 1f             	sar    edi,0x1f
c000dadb:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000dae1:	89 fe                	mov    esi,edi
c000dae3:	f7 d6                	not    esi
c000dae5:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000daeb:	5e                   	pop    esi
c000daec:	5f                   	pop    edi
c000daed:	c3                   	ret    

c000daee <LogicalDisk::read(unsigned long long, int, void*)>:
c000daee:	57                   	push   edi
c000daef:	56                   	push   esi
c000daf0:	53                   	push   ebx
c000daf1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000daf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000daf9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dafd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db01:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db07:	77 41                	ja     c000db4a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000db09:	99                   	cdq    
c000db0a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db10:	01 c8                	add    eax,ecx
c000db12:	11 da                	adc    edx,ebx
c000db14:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db1a:	19 d7                	sbb    edi,edx
c000db1c:	72 33                	jb     c000db51 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000db1e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db24:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db2a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db2e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db32:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db38:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db42:	5b                   	pop    ebx
c000db43:	5e                   	pop    esi
c000db44:	5f                   	pop    edi
c000db45:	e9 d4 0a 00 00       	jmp    c000e61e <VCache::read(unsigned long long, int, void*)>
c000db4a:	b8 05 00 00 00       	mov    eax,0x5
c000db4f:	eb 05                	jmp    c000db56 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000db51:	b8 07 00 00 00       	mov    eax,0x7
c000db56:	5b                   	pop    ebx
c000db57:	5e                   	pop    esi
c000db58:	5f                   	pop    edi
c000db59:	c3                   	ret    

c000db5a <LogicalDisk::write(unsigned long long, int, void*)>:
c000db5a:	57                   	push   edi
c000db5b:	56                   	push   esi
c000db5c:	53                   	push   ebx
c000db5d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db65:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db6d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db73:	77 41                	ja     c000dbb6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000db75:	99                   	cdq    
c000db76:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db7c:	01 c8                	add    eax,ecx
c000db7e:	11 da                	adc    edx,ebx
c000db80:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db86:	19 d7                	sbb    edi,edx
c000db88:	72 33                	jb     c000dbbd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000db8a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db90:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db96:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db9a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db9e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dba4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbae:	5b                   	pop    ebx
c000dbaf:	5e                   	pop    esi
c000dbb0:	5f                   	pop    edi
c000dbb1:	e9 6e 09 00 00       	jmp    c000e524 <VCache::write(unsigned long long, int, void*)>
c000dbb6:	b8 05 00 00 00       	mov    eax,0x5
c000dbbb:	eb 05                	jmp    c000dbc2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dbbd:	b8 07 00 00 00       	mov    eax,0x7
c000dbc2:	5b                   	pop    ebx
c000dbc3:	5e                   	pop    esi
c000dbc4:	5f                   	pop    edi
c000dbc5:	c3                   	ret    
c000dbc6:	66 90                	xchg   ax,ax

c000dbc8 <Mouse::Mouse(char const*)>:
c000dbc8:	83 ec 0c             	sub    esp,0xc
c000dbcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbcf:	83 ec 08             	sub    esp,0x8
c000dbd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd6:	50                   	push   eax
c000dbd7:	e8 c0 ec ff ff       	call   c000c89c <Device::Device(char const*)>
c000dbdc:	83 c4 10             	add    esp,0x10
c000dbdf:	ba e0 18 02 c0       	mov    edx,0xc00218e0
c000dbe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbe8:	89 10                	mov    DWORD PTR [eax],edx
c000dbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbee:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dbf8:	90                   	nop
c000dbf9:	83 c4 0c             	add    esp,0xc
c000dbfc:	c3                   	ret    
c000dbfd:	90                   	nop
c000dbfe:	66 90                	xchg   ax,ax

c000dc00 <Mouse::~Mouse()>:
c000dc00:	83 ec 0c             	sub    esp,0xc
c000dc03:	ba e0 18 02 c0       	mov    edx,0xc00218e0
c000dc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc0c:	89 10                	mov    DWORD PTR [eax],edx
c000dc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc12:	83 ec 0c             	sub    esp,0xc
c000dc15:	50                   	push   eax
c000dc16:	e8 eb e9 ff ff       	call   c000c606 <Device::~Device()>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	90                   	nop
c000dc1f:	83 c4 0c             	add    esp,0xc
c000dc22:	c3                   	ret    
c000dc23:	90                   	nop

c000dc24 <Mouse::~Mouse()>:
c000dc24:	83 ec 0c             	sub    esp,0xc
c000dc27:	83 ec 0c             	sub    esp,0xc
c000dc2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2e:	e8 cd ff ff ff       	call   c000dc00 <Mouse::~Mouse()>
c000dc33:	83 c4 10             	add    esp,0x10
c000dc36:	83 ec 08             	sub    esp,0x8
c000dc39:	68 58 01 00 00       	push   0x158
c000dc3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc42:	e8 c5 cb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dc47:	83 c4 10             	add    esp,0x10
c000dc4a:	83 c4 0c             	add    esp,0xc
c000dc4d:	c3                   	ret    

c000dc4e <NIC::getMAC()>:
c000dc4e:	31 c0                	xor    eax,eax
c000dc50:	31 d2                	xor    edx,edx
c000dc52:	c3                   	ret    
c000dc53:	90                   	nop

c000dc54 <NIC::write(int, unsigned char*, int*)>:
c000dc54:	b8 01 00 00 00       	mov    eax,0x1
c000dc59:	c3                   	ret    

c000dc5a <NIC::NIC(char const*)>:
c000dc5a:	83 ec 0c             	sub    esp,0xc
c000dc5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc61:	83 ec 08             	sub    esp,0x8
c000dc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc68:	50                   	push   eax
c000dc69:	e8 2e ec ff ff       	call   c000c89c <Device::Device(char const*)>
c000dc6e:	83 c4 10             	add    esp,0x10
c000dc71:	ba 0c 19 02 c0       	mov    edx,0xc002190c
c000dc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc7a:	89 10                	mov    DWORD PTR [eax],edx
c000dc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc80:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dc8a:	90                   	nop
c000dc8b:	83 c4 0c             	add    esp,0xc
c000dc8e:	c3                   	ret    
c000dc8f:	90                   	nop

c000dc90 <NIC::~NIC()>:
c000dc90:	83 ec 0c             	sub    esp,0xc
c000dc93:	ba 0c 19 02 c0       	mov    edx,0xc002190c
c000dc98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc9c:	89 10                	mov    DWORD PTR [eax],edx
c000dc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dca2:	83 ec 0c             	sub    esp,0xc
c000dca5:	50                   	push   eax
c000dca6:	e8 5b e9 ff ff       	call   c000c606 <Device::~Device()>
c000dcab:	83 c4 10             	add    esp,0x10
c000dcae:	90                   	nop
c000dcaf:	83 c4 0c             	add    esp,0xc
c000dcb2:	c3                   	ret    
c000dcb3:	90                   	nop

c000dcb4 <NIC::~NIC()>:
c000dcb4:	83 ec 0c             	sub    esp,0xc
c000dcb7:	83 ec 0c             	sub    esp,0xc
c000dcba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcbe:	e8 cd ff ff ff       	call   c000dc90 <NIC::~NIC()>
c000dcc3:	83 c4 10             	add    esp,0x10
c000dcc6:	83 ec 08             	sub    esp,0x8
c000dcc9:	68 58 01 00 00       	push   0x158
c000dcce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcd2:	e8 35 cb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dcd7:	83 c4 10             	add    esp,0x10
c000dcda:	83 c4 0c             	add    esp,0xc
c000dcdd:	c3                   	ret    

c000dcde <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dcde:	55                   	push   ebp
c000dcdf:	57                   	push   edi
c000dce0:	56                   	push   esi
c000dce1:	53                   	push   ebx
c000dce2:	81 ec 28 01 00 00    	sub    esp,0x128
c000dce8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dcef:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dcf6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dcfd:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dd04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd08:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd0c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd13:	e8 80 ec ff ff       	call   c000c998 <Device::getName()>
c000dd18:	5a                   	pop    edx
c000dd19:	59                   	pop    ecx
c000dd1a:	50                   	push   eax
c000dd1b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dd1f:	55                   	push   ebp
c000dd20:	e8 2b 29 ff ff       	call   c0000650 <strcpy>
c000dd25:	5b                   	pop    ebx
c000dd26:	58                   	pop    eax
c000dd27:	68 38 19 02 c0       	push   0xc0021938
c000dd2c:	55                   	push   ebp
c000dd2d:	e8 3e 2b ff ff       	call   c0000870 <strcat>
c000dd32:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dd39:	e8 95 9d ff ff       	call   c0007ad3 <malloc>
c000dd3e:	83 c4 0c             	add    esp,0xc
c000dd41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd45:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd49:	89 c3                	mov    ebx,eax
c000dd4b:	57                   	push   edi
c000dd4c:	56                   	push   esi
c000dd4d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dd54:	55                   	push   ebp
c000dd55:	50                   	push   eax
c000dd56:	e8 57 fb ff ff       	call   c000d8b2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd5b:	83 c4 14             	add    esp,0x14
c000dd5e:	53                   	push   ebx
c000dd5f:	e8 0e fc ff ff       	call   c000d972 <LogicalDisk::assignDriveLetter()>
c000dd64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd67:	e8 c0 fc ff ff       	call   c000da2c <LogicalDisk::mount()>
c000dd6c:	58                   	pop    eax
c000dd6d:	5a                   	pop    edx
c000dd6e:	53                   	push   ebx
c000dd6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd76:	e8 89 e9 ff ff       	call   c000c704 <Device::addChild(Device*)>
c000dd7b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dd81:	5b                   	pop    ebx
c000dd82:	5e                   	pop    esi
c000dd83:	5f                   	pop    edi
c000dd84:	5d                   	pop    ebp
c000dd85:	c3                   	ret    

c000dd86 <createPartitionsForDisk(PhysicalDisk*)>:
c000dd86:	55                   	push   ebp
c000dd87:	57                   	push   edi
c000dd88:	56                   	push   esi
c000dd89:	53                   	push   ebx
c000dd8a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dd90:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dd97:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dd9d:	3d 00 02 00 00       	cmp    eax,0x200
c000dda2:	74 27                	je     c000ddcb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dda4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ddaa:	83 ec 10             	sub    esp,0x10
c000ddad:	99                   	cdq    
c000ddae:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ddb4:	52                   	push   edx
c000ddb5:	50                   	push   eax
c000ddb6:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ddba:	c1 e6 0a             	shl    esi,0xa
c000ddbd:	89 fd                	mov    ebp,edi
c000ddbf:	55                   	push   ebp
c000ddc0:	56                   	push   esi
c000ddc1:	e8 8a 15 01 00       	call   c001f350 <__udivdi3>
c000ddc6:	e9 b9 00 00 00       	jmp    c000de84 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ddcb:	83 ec 0c             	sub    esp,0xc
c000ddce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ddd0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ddd4:	56                   	push   esi
c000ddd5:	6a 01                	push   0x1
c000ddd7:	6a 00                	push   0x0
c000ddd9:	6a 00                	push   0x0
c000dddb:	53                   	push   ebx
c000dddc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dddf:	83 c4 20             	add    esp,0x20
c000dde2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ddea:	75 0a                	jne    c000ddf6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ddec:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ddf4:	74 2c                	je     c000de22 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ddf6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ddfc:	83 ec 10             	sub    esp,0x10
c000ddff:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de05:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de0b:	89 f7                	mov    edi,esi
c000de0d:	c1 ff 1f             	sar    edi,0x1f
c000de10:	57                   	push   edi
c000de11:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de15:	56                   	push   esi
c000de16:	c1 e0 0a             	shl    eax,0xa
c000de19:	52                   	push   edx
c000de1a:	50                   	push   eax
c000de1b:	e8 30 15 01 00       	call   c001f350 <__udivdi3>
c000de20:	eb 62                	jmp    c000de84 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de22:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000de29:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000de30:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000de37:	89 cf                	mov    edi,ecx
c000de39:	83 e2 7f             	and    edx,0x7f
c000de3c:	83 e7 7f             	and    edi,0x7f
c000de3f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000de42:	83 e0 7f             	and    eax,0x7f
c000de45:	8d 14 01             	lea    edx,[ecx+eax*1]
c000de48:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000de4f:	83 e0 7f             	and    eax,0x7f
c000de52:	01 d0                	add    eax,edx
c000de54:	84 c0                	test   al,al
c000de56:	89 c5                	mov    ebp,eax
c000de58:	74 41                	je     c000de9b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000de5a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de60:	83 ec 10             	sub    esp,0x10
c000de63:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de69:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de6f:	89 f7                	mov    edi,esi
c000de71:	c1 ff 1f             	sar    edi,0x1f
c000de74:	57                   	push   edi
c000de75:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de79:	56                   	push   esi
c000de7a:	c1 e0 0a             	shl    eax,0xa
c000de7d:	52                   	push   edx
c000de7e:	50                   	push   eax
c000de7f:	e8 cc 14 01 00       	call   c001f350 <__udivdi3>
c000de84:	83 c4 14             	add    esp,0x14
c000de87:	52                   	push   edx
c000de88:	50                   	push   eax
c000de89:	6a 00                	push   0x0
c000de8b:	6a 00                	push   0x0
c000de8d:	53                   	push   ebx
c000de8e:	e8 4b fe ff ff       	call   c000dcde <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000de93:	83 c4 20             	add    esp,0x20
c000de96:	e9 73 01 00 00       	jmp    c000e00e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000de9b:	89 f0                	mov    eax,esi
c000de9d:	31 c9                	xor    ecx,ecx
c000de9f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dea6:	75 02                	jne    c000deaa <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dea8:	89 cd                	mov    ebp,ecx
c000deaa:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000deb2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000deb9:	83 c0 10             	add    eax,0x10
c000debc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000dec4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000decb:	c1 e2 08             	shl    edx,0x8
c000dece:	c1 e6 10             	shl    esi,0x10
c000ded1:	09 f2                	or     edx,esi
c000ded3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000deda:	09 f2                	or     edx,esi
c000dedc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000dee3:	c1 e6 18             	shl    esi,0x18
c000dee6:	09 f2                	or     edx,esi
c000dee8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000deef:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000def3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000defa:	c1 e6 10             	shl    esi,0x10
c000defd:	c1 e2 08             	shl    edx,0x8
c000df00:	09 f2                	or     edx,esi
c000df02:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000df09:	09 f2                	or     edx,esi
c000df0b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df12:	c1 e6 18             	shl    esi,0x18
c000df15:	09 f2                	or     edx,esi
c000df17:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df1b:	41                   	inc    ecx
c000df1c:	83 f9 04             	cmp    ecx,0x4
c000df1f:	0f 85 7a ff ff ff    	jne    c000de9f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000df25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df29:	83 f0 01             	xor    eax,0x1
c000df2c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000df30:	75 4f                	jne    c000df81 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df36:	83 f0 01             	xor    eax,0x1
c000df39:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000df3d:	75 42                	jne    c000df81 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df3f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000df45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000df4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000df53:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000df5b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000df61:	89 f7                	mov    edi,esi
c000df63:	c1 ff 1f             	sar    edi,0x1f
c000df66:	57                   	push   edi
c000df67:	56                   	push   esi
c000df68:	0f a4 c2 0a          	shld   edx,eax,0xa
c000df6c:	52                   	push   edx
c000df6d:	c1 e0 0a             	shl    eax,0xa
c000df70:	50                   	push   eax
c000df71:	e8 da 13 01 00       	call   c001f350 <__udivdi3>
c000df76:	83 c4 10             	add    esp,0x10
c000df79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000df81:	89 e8                	mov    eax,ebp
c000df83:	0f b6 e8             	movzx  ebp,al
c000df86:	85 ed                	test   ebp,ebp
c000df88:	74 50                	je     c000dfda <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000df8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000df92:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df96:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000df9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df9e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dfa2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfa6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dfaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfb2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dfb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dfba:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000dfbe:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dfc2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000dfc6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000dfca:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000dfce:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000dfd2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000dfd6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000dfda:	31 ed                	xor    ebp,ebp
c000dfdc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000dfe0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dfe4:	89 f8                	mov    eax,edi
c000dfe6:	09 f0                	or     eax,esi
c000dfe8:	74 1e                	je     c000e008 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000dfea:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dfee:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dff2:	89 d1                	mov    ecx,edx
c000dff4:	09 c1                	or     ecx,eax
c000dff6:	74 10                	je     c000e008 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000dff8:	83 ec 0c             	sub    esp,0xc
c000dffb:	57                   	push   edi
c000dffc:	56                   	push   esi
c000dffd:	52                   	push   edx
c000dffe:	50                   	push   eax
c000dfff:	53                   	push   ebx
c000e000:	e8 d9 fc ff ff       	call   c000dcde <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e005:	83 c4 20             	add    esp,0x20
c000e008:	45                   	inc    ebp
c000e009:	83 fd 04             	cmp    ebp,0x4
c000e00c:	75 ce                	jne    c000dfdc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e00e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e014:	5b                   	pop    ebx
c000e015:	5e                   	pop    esi
c000e016:	5f                   	pop    edi
c000e017:	5d                   	pop    ebp
c000e018:	c3                   	ret    
c000e019:	66 90                	xchg   ax,ax
c000e01b:	90                   	nop

c000e01c <Serial::Serial(char const*)>:
c000e01c:	83 ec 0c             	sub    esp,0xc
c000e01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e023:	83 ec 08             	sub    esp,0x8
c000e026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02a:	50                   	push   eax
c000e02b:	e8 6c e8 ff ff       	call   c000c89c <Device::Device(char const*)>
c000e030:	83 c4 10             	add    esp,0x10
c000e033:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c000e038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03c:	89 10                	mov    DWORD PTR [eax],edx
c000e03e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e042:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e04c:	90                   	nop
c000e04d:	83 c4 0c             	add    esp,0xc
c000e050:	c3                   	ret    
c000e051:	90                   	nop
c000e052:	66 90                	xchg   ax,ax

c000e054 <Serial::~Serial()>:
c000e054:	83 ec 0c             	sub    esp,0xc
c000e057:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c000e05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e060:	89 10                	mov    DWORD PTR [eax],edx
c000e062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e066:	83 ec 0c             	sub    esp,0xc
c000e069:	50                   	push   eax
c000e06a:	e8 97 e5 ff ff       	call   c000c606 <Device::~Device()>
c000e06f:	83 c4 10             	add    esp,0x10
c000e072:	90                   	nop
c000e073:	83 c4 0c             	add    esp,0xc
c000e076:	c3                   	ret    
c000e077:	90                   	nop

c000e078 <Serial::~Serial()>:
c000e078:	83 ec 0c             	sub    esp,0xc
c000e07b:	83 ec 0c             	sub    esp,0xc
c000e07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e082:	e8 cd ff ff ff       	call   c000e054 <Serial::~Serial()>
c000e087:	83 c4 10             	add    esp,0x10
c000e08a:	83 ec 08             	sub    esp,0x8
c000e08d:	68 58 01 00 00       	push   0x158
c000e092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e096:	e8 71 c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e09b:	83 c4 10             	add    esp,0x10
c000e09e:	83 c4 0c             	add    esp,0xc
c000e0a1:	c3                   	ret    
c000e0a2:	66 90                	xchg   ax,ax

c000e0a4 <Timer::Timer(char const*)>:
c000e0a4:	83 ec 0c             	sub    esp,0xc
c000e0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ab:	83 ec 08             	sub    esp,0x8
c000e0ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b2:	50                   	push   eax
c000e0b3:	e8 e4 e7 ff ff       	call   c000c89c <Device::Device(char const*)>
c000e0b8:	83 c4 10             	add    esp,0x10
c000e0bb:	ba 90 19 02 c0       	mov    edx,0xc0021990
c000e0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c4:	89 10                	mov    DWORD PTR [eax],edx
c000e0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ca:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e0d4:	90                   	nop
c000e0d5:	83 c4 0c             	add    esp,0xc
c000e0d8:	c3                   	ret    
c000e0d9:	90                   	nop
c000e0da:	66 90                	xchg   ax,ax

c000e0dc <Timer::~Timer()>:
c000e0dc:	83 ec 0c             	sub    esp,0xc
c000e0df:	ba 90 19 02 c0       	mov    edx,0xc0021990
c000e0e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0e8:	89 10                	mov    DWORD PTR [eax],edx
c000e0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ee:	83 ec 0c             	sub    esp,0xc
c000e0f1:	50                   	push   eax
c000e0f2:	e8 0f e5 ff ff       	call   c000c606 <Device::~Device()>
c000e0f7:	83 c4 10             	add    esp,0x10
c000e0fa:	90                   	nop
c000e0fb:	83 c4 0c             	add    esp,0xc
c000e0fe:	c3                   	ret    
c000e0ff:	90                   	nop

c000e100 <Timer::~Timer()>:
c000e100:	83 ec 0c             	sub    esp,0xc
c000e103:	83 ec 0c             	sub    esp,0xc
c000e106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e10a:	e8 cd ff ff ff       	call   c000e0dc <Timer::~Timer()>
c000e10f:	83 c4 10             	add    esp,0x10
c000e112:	83 ec 08             	sub    esp,0x8
c000e115:	68 5c 01 00 00       	push   0x15c
c000e11a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e11e:	e8 e9 c6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	83 c4 0c             	add    esp,0xc
c000e129:	c3                   	ret    

c000e12a <Timer::read()>:
c000e12a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e12e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e134:	c3                   	ret    

c000e135 <setupTimer(int)>:
c000e135:	53                   	push   ebx
c000e136:	83 ec 14             	sub    esp,0x14
c000e139:	68 5c 01 00 00       	push   0x15c
c000e13e:	e8 90 99 ff ff       	call   c0007ad3 <malloc>
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 c3                	mov    ebx,eax
c000e148:	e8 6b 0a 01 00       	call   c001ebb8 <PIT::PIT()>
c000e14d:	58                   	pop    eax
c000e14e:	5a                   	pop    edx
c000e14f:	53                   	push   ebx
c000e150:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e156:	e8 a9 e5 ff ff       	call   c000c704 <Device::addChild(Device*)>
c000e15b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e15d:	6a 00                	push   0x0
c000e15f:	6a 00                	push   0x0
c000e161:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e165:	53                   	push   ebx
c000e166:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e169:	83 c4 28             	add    esp,0x28
c000e16c:	89 d8                	mov    eax,ebx
c000e16e:	5b                   	pop    ebx
c000e16f:	c3                   	ret    

c000e170 <timerHandler(unsigned int)>:
c000e170:	56                   	push   esi
c000e171:	53                   	push   ebx
c000e172:	51                   	push   ecx
c000e173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e177:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e17d:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e184:	0f 84 4a 01 00 00    	je     c000e2d4 <timerHandler(unsigned int)+0x164>
c000e18a:	fa                   	cli    
c000e18b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e191:	83 ec 0c             	sub    esp,0xc
c000e194:	68 d8 96 02 c0       	push   0xc00296d8
c000e199:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e19f:	e8 7c 17 01 00       	call   c001f920 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e1a4:	83 c4 10             	add    esp,0x10
c000e1a7:	84 c0                	test   al,al
c000e1a9:	0f 85 a1 00 00 00    	jne    c000e250 <timerHandler(unsigned int)+0xe0>
c000e1af:	83 ec 0c             	sub    esp,0xc
c000e1b2:	68 d8 96 02 c0       	push   0xc00296d8
c000e1b7:	e8 80 17 01 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1bc:	83 c4 10             	add    esp,0x10
c000e1bf:	89 c6                	mov    esi,eax
c000e1c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e1c4:	83 ec 0c             	sub    esp,0xc
c000e1c7:	68 d8 96 02 c0       	push   0xc00296d8
c000e1cc:	e8 6b 17 01 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1d1:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e1d8:	89 c3                	mov    ebx,eax
c000e1da:	e8 65 17 01 00       	call   c001f944 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e1df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e1e2:	83 c4 10             	add    esp,0x10
c000e1e5:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e1eb:	77 23                	ja     c000e210 <timerHandler(unsigned int)+0xa0>
c000e1ed:	83 ec 0c             	sub    esp,0xc
c000e1f0:	53                   	push   ebx
c000e1f1:	e8 9a 7f 00 00       	call   c0016190 <unblockTask(ThreadControlBlock*)>
c000e1f6:	83 c4 10             	add    esp,0x10
c000e1f9:	39 de                	cmp    esi,ebx
c000e1fb:	75 27                	jne    c000e224 <timerHandler(unsigned int)+0xb4>
c000e1fd:	83 ec 0c             	sub    esp,0xc
c000e200:	68 d8 96 02 c0       	push   0xc00296d8
c000e205:	e8 32 17 01 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e20a:	89 c6                	mov    esi,eax
c000e20c:	eb 12                	jmp    c000e220 <timerHandler(unsigned int)+0xb0>
c000e20e:	66 90                	xchg   ax,ax
c000e210:	52                   	push   edx
c000e211:	52                   	push   edx
c000e212:	53                   	push   ebx
c000e213:	68 d8 96 02 c0       	push   0xc00296d8
c000e218:	e8 e3 17 01 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e21d:	8d 76 00             	lea    esi,[esi+0x0]
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	90                   	nop
c000e224:	83 ec 0c             	sub    esp,0xc
c000e227:	68 d8 96 02 c0       	push   0xc00296d8
c000e22c:	e8 ef 16 01 00       	call   c001f920 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	84 c0                	test   al,al
c000e236:	75 18                	jne    c000e250 <timerHandler(unsigned int)+0xe0>
c000e238:	83 ec 0c             	sub    esp,0xc
c000e23b:	68 d8 96 02 c0       	push   0xc00296d8
c000e240:	e8 f7 16 01 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e245:	83 c4 10             	add    esp,0x10
c000e248:	39 f0                	cmp    eax,esi
c000e24a:	0f 85 74 ff ff ff    	jne    c000e1c4 <timerHandler(unsigned int)+0x54>
c000e250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e255:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e259:	74 41                	je     c000e29c <timerHandler(unsigned int)+0x12c>
c000e25b:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e262:	74 38                	je     c000e29c <timerHandler(unsigned int)+0x12c>
c000e264:	fa                   	cli    
c000e265:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e26b:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e270:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e276:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e279:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e27f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e282:	72 08                	jb     c000e28c <timerHandler(unsigned int)+0x11c>
c000e284:	e8 0f 7a 00 00       	call   c0015c98 <schedule()>
c000e289:	8d 76 00             	lea    esi,[esi+0x0]
c000e28c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e291:	48                   	dec    eax
c000e292:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e297:	75 03                	jne    c000e29c <timerHandler(unsigned int)+0x12c>
c000e299:	fb                   	sti    
c000e29a:	66 90                	xchg   ax,ax
c000e29c:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e2a1:	48                   	dec    eax
c000e2a2:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e2a7:	75 1b                	jne    c000e2c4 <timerHandler(unsigned int)+0x154>
c000e2a9:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e2b0:	74 12                	je     c000e2c4 <timerHandler(unsigned int)+0x154>
c000e2b2:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e2bc:	e8 d7 79 00 00       	call   c0015c98 <schedule()>
c000e2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2c4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2c9:	48                   	dec    eax
c000e2ca:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2cf:	75 03                	jne    c000e2d4 <timerHandler(unsigned int)+0x164>
c000e2d1:	fb                   	sti    
c000e2d2:	66 90                	xchg   ax,ax
c000e2d4:	58                   	pop    eax
c000e2d5:	5b                   	pop    ebx
c000e2d6:	5e                   	pop    esi
c000e2d7:	c3                   	ret    

c000e2d8 <VCache::VCache(PhysicalDisk*)>:
c000e2d8:	53                   	push   ebx
c000e2d9:	83 ec 18             	sub    esp,0x18
c000e2dc:	ba c0 19 02 c0       	mov    edx,0xc00219c0
c000e2e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e5:	89 10                	mov    DWORD PTR [eax],edx
c000e2e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2eb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e2f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2f6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e2fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e301:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e308:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e30f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e313:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e31a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e325:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e32c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e330:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e334:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e338:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e33f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e346:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e34a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e34e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e352:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e35a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e35e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e362:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e369:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e371:	83 ec 0c             	sub    esp,0xc
c000e374:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e378:	e8 56 97 ff ff       	call   c0007ad3 <malloc>
c000e37d:	83 c4 10             	add    esp,0x10
c000e380:	89 c3                	mov    ebx,eax
c000e382:	83 ec 0c             	sub    esp,0xc
c000e385:	53                   	push   ebx
c000e386:	e8 ad 76 00 00       	call   c0015a38 <Mutex::Mutex()>
c000e38b:	83 c4 10             	add    esp,0x10
c000e38e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e392:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e399:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e39d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3a4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e3ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3af:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e3b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3c0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e3c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e3cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e3d0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e3d3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e3d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3da:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e3de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e3e8:	05 00 02 00 00       	add    eax,0x200
c000e3ed:	c1 e0 03             	shl    eax,0x3
c000e3f0:	83 ec 0c             	sub    esp,0xc
c000e3f3:	50                   	push   eax
c000e3f4:	e8 da 96 ff ff       	call   c0007ad3 <malloc>
c000e3f9:	83 c4 10             	add    esp,0x10
c000e3fc:	89 c2                	mov    edx,eax
c000e3fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e402:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e405:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e409:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e410:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e414:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e418:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e41c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e422:	89 d0                	mov    eax,edx
c000e424:	c1 e0 02             	shl    eax,0x2
c000e427:	01 d0                	add    eax,edx
c000e429:	c1 e0 04             	shl    eax,0x4
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 9e 96 ff ff       	call   c0007ad3 <malloc>
c000e435:	83 c4 10             	add    esp,0x10
c000e438:	89 c2                	mov    edx,eax
c000e43a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e43e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e441:	90                   	nop
c000e442:	83 c4 18             	add    esp,0x18
c000e445:	5b                   	pop    ebx
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <VCache::invalidateReadBuffer()>:
c000e448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e44c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e452:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e456:	c3                   	ret    
c000e457:	90                   	nop

c000e458 <VCache::writeWriteBuffer()>:
c000e458:	53                   	push   ebx
c000e459:	83 ec 08             	sub    esp,0x8
c000e45c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e460:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e464:	74 1e                	je     c000e484 <VCache::writeWriteBuffer()+0x2c>
c000e466:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e469:	83 ec 0c             	sub    esp,0xc
c000e46c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e46e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e471:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e474:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e477:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e47a:	50                   	push   eax
c000e47b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e47e:	83 c4 20             	add    esp,0x20
c000e481:	8d 76 00             	lea    esi,[esi+0x0]
c000e484:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e48b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e492:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e496:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e49d:	83 c4 08             	add    esp,0x8
c000e4a0:	5b                   	pop    ebx
c000e4a1:	c3                   	ret    
c000e4a2:	66 90                	xchg   ax,ax

c000e4a4 <VCache::~VCache()>:
c000e4a4:	83 ec 0c             	sub    esp,0xc
c000e4a7:	ba c0 19 02 c0       	mov    edx,0xc00219c0
c000e4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4b0:	89 10                	mov    DWORD PTR [eax],edx
c000e4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4b6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e4b9:	0f b6 c0             	movzx  eax,al
c000e4bc:	85 c0                	test   eax,eax
c000e4be:	74 10                	je     c000e4d0 <VCache::~VCache()+0x2c>
c000e4c0:	83 ec 0c             	sub    esp,0xc
c000e4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4c7:	e8 8c ff ff ff       	call   c000e458 <VCache::writeWriteBuffer()>
c000e4cc:	83 c4 10             	add    esp,0x10
c000e4cf:	90                   	nop
c000e4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e4d7:	83 ec 0c             	sub    esp,0xc
c000e4da:	50                   	push   eax
c000e4db:	e8 03 96 ff ff       	call   c0007ae3 <free>
c000e4e0:	83 c4 10             	add    esp,0x10
c000e4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	50                   	push   eax
c000e4ee:	e8 f0 95 ff ff       	call   c0007ae3 <free>
c000e4f3:	83 c4 10             	add    esp,0x10
c000e4f6:	90                   	nop
c000e4f7:	83 c4 0c             	add    esp,0xc
c000e4fa:	c3                   	ret    
c000e4fb:	90                   	nop

c000e4fc <VCache::~VCache()>:
c000e4fc:	83 ec 0c             	sub    esp,0xc
c000e4ff:	83 ec 0c             	sub    esp,0xc
c000e502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e506:	e8 99 ff ff ff       	call   c000e4a4 <VCache::~VCache()>
c000e50b:	83 c4 10             	add    esp,0x10
c000e50e:	83 ec 08             	sub    esp,0x8
c000e511:	6a 44                	push   0x44
c000e513:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e517:	e8 f0 c2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e51c:	83 c4 10             	add    esp,0x10
c000e51f:	83 c4 0c             	add    esp,0xc
c000e522:	c3                   	ret    
c000e523:	90                   	nop

c000e524 <VCache::write(unsigned long long, int, void*)>:
c000e524:	55                   	push   ebp
c000e525:	57                   	push   edi
c000e526:	56                   	push   esi
c000e527:	53                   	push   ebx
c000e528:	83 ec 1c             	sub    esp,0x1c
c000e52b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e52f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e533:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e537:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e53b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e53f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e543:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e547:	74 0f                	je     c000e558 <VCache::write(unsigned long long, int, void*)+0x34>
c000e549:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e54d:	53                   	push   ebx
c000e54e:	e8 f5 fe ff ff       	call   c000e448 <VCache::invalidateReadBuffer()>
c000e553:	58                   	pop    eax
c000e554:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e558:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e55c:	74 66                	je     c000e5c4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e55e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e565:	99                   	cdq    
c000e566:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e569:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e56c:	89 c6                	mov    esi,eax
c000e56e:	31 ce                	xor    esi,ecx
c000e570:	89 d0                	mov    eax,edx
c000e572:	31 e8                	xor    eax,ebp
c000e574:	09 c6                	or     esi,eax
c000e576:	75 38                	jne    c000e5b0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e578:	83 ff 01             	cmp    edi,0x1
c000e57b:	75 33                	jne    c000e5b0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e57d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e580:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e584:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e588:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e58e:	0f af f9             	imul   edi,ecx
c000e591:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e594:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e596:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e599:	40                   	inc    eax
c000e59a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e59d:	83 f8 50             	cmp    eax,0x50
c000e5a0:	75 72                	jne    c000e614 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e5a2:	83 ec 0c             	sub    esp,0xc
c000e5a5:	53                   	push   ebx
c000e5a6:	e8 ad fe ff ff       	call   c000e458 <VCache::writeWriteBuffer()>
c000e5ab:	83 c4 10             	add    esp,0x10
c000e5ae:	eb 64                	jmp    c000e614 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e5b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e5b4:	83 ec 0c             	sub    esp,0xc
c000e5b7:	53                   	push   ebx
c000e5b8:	e8 9b fe ff ff       	call   c000e458 <VCache::writeWriteBuffer()>
c000e5bd:	83 c4 10             	add    esp,0x10
c000e5c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5c4:	83 ff 4f             	cmp    edi,0x4f
c000e5c7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5ca:	7f 20                	jg     c000e5ec <VCache::write(unsigned long long, int, void*)+0xc8>
c000e5cc:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e5cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e5d3:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e5d6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e5d9:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e5dc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e5e0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5e8:	eb 2a                	jmp    c000e614 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e5ea:	66 90                	xchg   ax,ax
c000e5ec:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e5f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5f2:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e5f6:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e5fa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e5fe:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e602:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e606:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e609:	83 c4 1c             	add    esp,0x1c
c000e60c:	5b                   	pop    ebx
c000e60d:	5e                   	pop    esi
c000e60e:	5f                   	pop    edi
c000e60f:	5d                   	pop    ebp
c000e610:	ff e0                	jmp    eax
c000e612:	66 90                	xchg   ax,ax
c000e614:	83 c4 1c             	add    esp,0x1c
c000e617:	31 c0                	xor    eax,eax
c000e619:	5b                   	pop    ebx
c000e61a:	5e                   	pop    esi
c000e61b:	5f                   	pop    edi
c000e61c:	5d                   	pop    ebp
c000e61d:	c3                   	ret    

c000e61e <VCache::read(unsigned long long, int, void*)>:
c000e61e:	55                   	push   ebp
c000e61f:	57                   	push   edi
c000e620:	56                   	push   esi
c000e621:	53                   	push   ebx
c000e622:	83 ec 1c             	sub    esp,0x1c
c000e625:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e629:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e62d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e631:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e635:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e639:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e63d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e641:	74 0d                	je     c000e650 <VCache::read(unsigned long long, int, void*)+0x32>
c000e643:	83 ec 0c             	sub    esp,0xc
c000e646:	57                   	push   edi
c000e647:	e8 0c fe ff ff       	call   c000e458 <VCache::writeWriteBuffer()>
c000e64c:	83 c4 10             	add    esp,0x10
c000e64f:	90                   	nop
c000e650:	83 fd 01             	cmp    ebp,0x1
c000e653:	0f 85 93 00 00 00    	jne    c000e6ec <VCache::read(unsigned long long, int, void*)+0xce>
c000e659:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e65c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e663:	89 04 24             	mov    DWORD PTR [esp],eax
c000e666:	0f 85 80 00 00 00    	jne    c000e6ec <VCache::read(unsigned long long, int, void*)+0xce>
c000e66c:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e66f:	89 cd                	mov    ebp,ecx
c000e671:	f7 dd                	neg    ebp
c000e673:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e677:	89 e8                	mov    eax,ebp
c000e679:	21 dd                	and    ebp,ebx
c000e67b:	c1 f8 1f             	sar    eax,0x1f
c000e67e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e682:	89 e8                	mov    eax,ebp
c000e684:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e688:	21 f5                	and    ebp,esi
c000e68a:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e68e:	89 ea                	mov    edx,ebp
c000e690:	74 2e                	je     c000e6c0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e692:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e695:	75 29                	jne    c000e6c0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e697:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e69a:	75 24                	jne    c000e6c0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e69c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e69f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e6a5:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e6a8:	8d 70 ff             	lea    esi,[eax-0x1]
c000e6ab:	21 f3                	and    ebx,esi
c000e6ad:	0f af d9             	imul   ebx,ecx
c000e6b0:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e6b3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e6b7:	89 de                	mov    esi,ebx
c000e6b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6bb:	31 c0                	xor    eax,eax
c000e6bd:	eb 61                	jmp    c000e720 <VCache::read(unsigned long long, int, void*)+0x102>
c000e6bf:	90                   	nop
c000e6c0:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e6c4:	83 ec 0c             	sub    esp,0xc
c000e6c7:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e6ca:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e6ce:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e6d1:	8b 36                	mov    esi,DWORD PTR [esi]
c000e6d3:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e6d6:	51                   	push   ecx
c000e6d7:	52                   	push   edx
c000e6d8:	50                   	push   eax
c000e6d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6dd:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e6e0:	83 c4 20             	add    esp,0x20
c000e6e3:	85 c0                	test   eax,eax
c000e6e5:	75 39                	jne    c000e720 <VCache::read(unsigned long long, int, void*)+0x102>
c000e6e7:	eb b3                	jmp    c000e69c <VCache::read(unsigned long long, int, void*)+0x7e>
c000e6e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6ec:	83 ec 0c             	sub    esp,0xc
c000e6ef:	57                   	push   edi
c000e6f0:	e8 53 fd ff ff       	call   c000e448 <VCache::invalidateReadBuffer()>
c000e6f5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e6fc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6fe:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e702:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e706:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e70a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e70e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e712:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e715:	83 c4 2c             	add    esp,0x2c
c000e718:	5b                   	pop    ebx
c000e719:	5e                   	pop    esi
c000e71a:	5f                   	pop    edi
c000e71b:	5d                   	pop    ebp
c000e71c:	ff e0                	jmp    eax
c000e71e:	66 90                	xchg   ax,ax
c000e720:	83 c4 1c             	add    esp,0x1c
c000e723:	5b                   	pop    ebx
c000e724:	5e                   	pop    esi
c000e725:	5f                   	pop    edi
c000e726:	5d                   	pop    ebp
c000e727:	c3                   	ret    

c000e728 <Video::putrect(int, int, int, int, unsigned int)>:
c000e728:	55                   	push   ebp
c000e729:	57                   	push   edi
c000e72a:	56                   	push   esi
c000e72b:	53                   	push   ebx
c000e72c:	83 ec 1c             	sub    esp,0x1c
c000e72f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e733:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e737:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e73b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e73f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e743:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e747:	01 df                	add    edi,ebx
c000e749:	39 fb                	cmp    ebx,edi
c000e74b:	7d 1f                	jge    c000e76c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e74d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e751:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e755:	7d 12                	jge    c000e769 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e757:	8b 16                	mov    edx,DWORD PTR [esi]
c000e759:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e75d:	53                   	push   ebx
c000e75e:	55                   	push   ebp
c000e75f:	45                   	inc    ebp
c000e760:	56                   	push   esi
c000e761:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e764:	83 c4 10             	add    esp,0x10
c000e767:	eb e8                	jmp    c000e751 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e769:	43                   	inc    ebx
c000e76a:	eb dd                	jmp    c000e749 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e76c:	83 c4 1c             	add    esp,0x1c
c000e76f:	5b                   	pop    ebx
c000e770:	5e                   	pop    esi
c000e771:	5f                   	pop    edi
c000e772:	5d                   	pop    ebp
c000e773:	c3                   	ret    

c000e774 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e774:	55                   	push   ebp
c000e775:	57                   	push   edi
c000e776:	31 ff                	xor    edi,edi
c000e778:	56                   	push   esi
c000e779:	53                   	push   ebx
c000e77a:	83 ec 1c             	sub    esp,0x1c
c000e77d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e781:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e785:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e78c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e791:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e795:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e799:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e79d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e7a0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7a4:	01 f9                	add    ecx,edi
c000e7a6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e7aa:	7d 2f                	jge    c000e7db <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e7ac:	31 f6                	xor    esi,esi
c000e7ae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e7b2:	01 f2                	add    edx,esi
c000e7b4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e7b8:	7d 1a                	jge    c000e7d4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e7ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e7bd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e7c0:	46                   	inc    esi
c000e7c1:	51                   	push   ecx
c000e7c2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e7c6:	52                   	push   edx
c000e7c7:	55                   	push   ebp
c000e7c8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e7cb:	83 c4 10             	add    esp,0x10
c000e7ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7d2:	eb da                	jmp    c000e7ae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e7d4:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e7d8:	47                   	inc    edi
c000e7d9:	eb c5                	jmp    c000e7a0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e7db:	83 c4 1c             	add    esp,0x1c
c000e7de:	5b                   	pop    ebx
c000e7df:	5e                   	pop    esi
c000e7e0:	5f                   	pop    edi
c000e7e1:	5d                   	pop    ebp
c000e7e2:	c3                   	ret    
c000e7e3:	90                   	nop

c000e7e4 <Video::blit(unsigned int*, int, int, int, int)>:
c000e7e4:	55                   	push   ebp
c000e7e5:	ba 00 00 00 00       	mov    edx,0x0
c000e7ea:	57                   	push   edi
c000e7eb:	56                   	push   esi
c000e7ec:	53                   	push   ebx
c000e7ed:	83 ec 1c             	sub    esp,0x1c
c000e7f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7f4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e7f8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e7fc:	85 c0                	test   eax,eax
c000e7fe:	0f 49 d0             	cmovns edx,eax
c000e801:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e808:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e80c:	89 eb                	mov    ebx,ebp
c000e80e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e812:	01 ea                	add    edx,ebp
c000e814:	39 da                	cmp    edx,ebx
c000e816:	7e 54                	jle    c000e86c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e818:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e81e:	7c 4c                	jl     c000e86c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e820:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e824:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e828:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e82c:	01 c1                	add    ecx,eax
c000e82e:	39 f9                	cmp    ecx,edi
c000e830:	7e 2f                	jle    c000e861 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e832:	83 c2 04             	add    edx,0x4
c000e835:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e83b:	7c 21                	jl     c000e85e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e83d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e841:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e843:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e846:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e84a:	55                   	push   ebp
c000e84b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e84f:	56                   	push   esi
c000e850:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e853:	83 c4 10             	add    esp,0x10
c000e856:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e85a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e85e:	47                   	inc    edi
c000e85f:	eb c7                	jmp    c000e828 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e861:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e865:	43                   	inc    ebx
c000e866:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e86a:	eb a2                	jmp    c000e80e <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e86c:	83 c4 1c             	add    esp,0x1c
c000e86f:	5b                   	pop    ebx
c000e870:	5e                   	pop    esi
c000e871:	5f                   	pop    edi
c000e872:	5d                   	pop    ebp
c000e873:	c3                   	ret    

c000e874 <Video::clearScreen(unsigned int)>:
c000e874:	57                   	push   edi
c000e875:	56                   	push   esi
c000e876:	53                   	push   ebx
c000e877:	31 db                	xor    ebx,ebx
c000e879:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e87d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e883:	7e 1f                	jle    c000e8a4 <Video::clearScreen(unsigned int)+0x30>
c000e885:	31 ff                	xor    edi,edi
c000e887:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e88d:	7e 12                	jle    c000e8a1 <Video::clearScreen(unsigned int)+0x2d>
c000e88f:	8b 06                	mov    eax,DWORD PTR [esi]
c000e891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e895:	53                   	push   ebx
c000e896:	57                   	push   edi
c000e897:	47                   	inc    edi
c000e898:	56                   	push   esi
c000e899:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e89c:	83 c4 10             	add    esp,0x10
c000e89f:	eb e6                	jmp    c000e887 <Video::clearScreen(unsigned int)+0x13>
c000e8a1:	43                   	inc    ebx
c000e8a2:	eb d9                	jmp    c000e87d <Video::clearScreen(unsigned int)+0x9>
c000e8a4:	5b                   	pop    ebx
c000e8a5:	5e                   	pop    esi
c000e8a6:	5f                   	pop    edi
c000e8a7:	c3                   	ret    

c000e8a8 <Video::putpixel(int, int, unsigned int)>:
c000e8a8:	c7 44 24 04 c8 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc00219c8
c000e8b0:	e9 e4 29 00 00       	jmp    c0011299 <KePanic(char const*)>
c000e8b5:	90                   	nop

c000e8b6 <Video::readPixelApprox(int, int)>:
c000e8b6:	83 ec 18             	sub    esp,0x18
c000e8b9:	68 e9 19 02 c0       	push   0xc00219e9
c000e8be:	e8 d6 29 00 00       	call   c0011299 <KePanic(char const*)>
c000e8c3:	31 c0                	xor    eax,eax
c000e8c5:	83 c4 1c             	add    esp,0x1c
c000e8c8:	c3                   	ret    
c000e8c9:	90                   	nop

c000e8ca <Video::Video(char const*)>:
c000e8ca:	83 ec 0c             	sub    esp,0xc
c000e8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d1:	83 ec 08             	sub    esp,0x8
c000e8d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d8:	50                   	push   eax
c000e8d9:	e8 be df ff ff       	call   c000c89c <Device::Device(char const*)>
c000e8de:	83 c4 10             	add    esp,0x10
c000e8e1:	ba 64 1a 02 c0       	mov    edx,0xc0021a64
c000e8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ea:	89 10                	mov    DWORD PTR [eax],edx
c000e8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e8fa:	90                   	nop
c000e8fb:	83 c4 0c             	add    esp,0xc
c000e8fe:	c3                   	ret    
c000e8ff:	90                   	nop

c000e900 <Video::~Video()>:
c000e900:	83 ec 0c             	sub    esp,0xc
c000e903:	ba 64 1a 02 c0       	mov    edx,0xc0021a64
c000e908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e90c:	89 10                	mov    DWORD PTR [eax],edx
c000e90e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e912:	83 ec 0c             	sub    esp,0xc
c000e915:	50                   	push   eax
c000e916:	e8 eb dc ff ff       	call   c000c606 <Device::~Device()>
c000e91b:	83 c4 10             	add    esp,0x10
c000e91e:	90                   	nop
c000e91f:	83 c4 0c             	add    esp,0xc
c000e922:	c3                   	ret    
c000e923:	90                   	nop

c000e924 <Video::~Video()>:
c000e924:	83 ec 0c             	sub    esp,0xc
c000e927:	83 ec 0c             	sub    esp,0xc
c000e92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e92e:	e8 cd ff ff ff       	call   c000e900 <Video::~Video()>
c000e933:	83 c4 10             	add    esp,0x10
c000e936:	83 ec 08             	sub    esp,0x8
c000e939:	68 64 01 00 00       	push   0x164
c000e93e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e942:	e8 c5 be ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e947:	83 c4 10             	add    esp,0x10
c000e94a:	83 c4 0c             	add    esp,0xc
c000e94d:	c3                   	ret    

c000e94e <Video::isMonochrome()>:
c000e94e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e952:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e958:	c3                   	ret    
c000e959:	90                   	nop

c000e95a <Video::getWidth()>:
c000e95a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e95e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e964:	c3                   	ret    
c000e965:	90                   	nop

c000e966 <Video::getHeight()>:
c000e966:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e96a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e970:	c3                   	ret    
c000e971:	90                   	nop

c000e972 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e972:	55                   	push   ebp
c000e973:	57                   	push   edi
c000e974:	56                   	push   esi
c000e975:	53                   	push   ebx
c000e976:	83 ec 2c             	sub    esp,0x2c
c000e979:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e97d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e981:	83 f8 01             	cmp    eax,0x1
c000e984:	19 c9                	sbb    ecx,ecx
c000e986:	31 db                	xor    ebx,ebx
c000e988:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e98c:	89 ce                	mov    esi,ecx
c000e98e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e996:	f7 d6                	not    esi
c000e998:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e99e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e9a2:	01 d8                	add    eax,ebx
c000e9a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9a8:	57                   	push   edi
c000e9a9:	e8 b8 ff ff ff       	call   c000e966 <Video::getHeight()>
c000e9ae:	59                   	pop    ecx
c000e9af:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e9b3:	7e 70                	jle    c000ea25 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e9b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9b9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e9bd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e9c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e9c4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9c8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e9cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9d3:	89 e8                	mov    eax,ebp
c000e9d5:	83 c0 20             	add    eax,0x20
c000e9d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9dc:	57                   	push   edi
c000e9dd:	e8 78 ff ff ff       	call   c000e95a <Video::getWidth()>
c000e9e2:	5a                   	pop    edx
c000e9e3:	39 c5                	cmp    ebp,eax
c000e9e5:	7d 34                	jge    c000ea1b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e9e7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e9ec:	74 05                	je     c000e9f3 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e9ee:	8b 07                	mov    eax,DWORD PTR [edi]
c000e9f0:	56                   	push   esi
c000e9f1:	eb 0d                	jmp    c000ea00 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e9f3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e9f8:	74 12                	je     c000ea0c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e9fa:	8b 07                	mov    eax,DWORD PTR [edi]
c000e9fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea00:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea04:	55                   	push   ebp
c000ea05:	57                   	push   edi
c000ea06:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea09:	83 c4 10             	add    esp,0x10
c000ea0c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ea10:	45                   	inc    ebp
c000ea11:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ea15:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ea19:	75 c1                	jne    c000e9dc <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea1b:	43                   	inc    ebx
c000ea1c:	83 fb 20             	cmp    ebx,0x20
c000ea1f:	0f 85 79 ff ff ff    	jne    c000e99e <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea25:	83 c4 2c             	add    esp,0x2c
c000ea28:	5b                   	pop    ebx
c000ea29:	5e                   	pop    esi
c000ea2a:	5f                   	pop    edi
c000ea2b:	5d                   	pop    ebp
c000ea2c:	c3                   	ret    
c000ea2d:	90                   	nop

c000ea2e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea2e:	55                   	push   ebp
c000ea2f:	57                   	push   edi
c000ea30:	56                   	push   esi
c000ea31:	53                   	push   ebx
c000ea32:	83 ec 28             	sub    esp,0x28
c000ea35:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea39:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ea3d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ea41:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ea45:	c1 e7 08             	shl    edi,0x8
c000ea48:	01 c7                	add    edi,eax
c000ea4a:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ea4e:	c1 e6 08             	shl    esi,0x8
c000ea51:	01 f0                	add    eax,esi
c000ea53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea5b:	0f af c7             	imul   eax,edi
c000ea5e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ea65:	50                   	push   eax
c000ea66:	e8 68 90 ff ff       	call   c0007ad3 <malloc>
c000ea6b:	83 c4 10             	add    esp,0x10
c000ea6e:	85 c0                	test   eax,eax
c000ea70:	89 c5                	mov    ebp,eax
c000ea72:	75 10                	jne    c000ea84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ea74:	83 ec 0c             	sub    esp,0xc
c000ea77:	68 14 1a 02 c0       	push   0xc0021a14
c000ea7c:	e8 18 28 00 00       	call   c0011299 <KePanic(char const*)>
c000ea81:	83 c4 10             	add    esp,0x10
c000ea84:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ea88:	ba 12 00 00 00       	mov    edx,0x12
c000ea8d:	85 c0                	test   eax,eax
c000ea8f:	74 11                	je     c000eaa2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ea91:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ea95:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ea99:	c1 fa 03             	sar    edx,0x3
c000ea9c:	0f af d1             	imul   edx,ecx
c000ea9f:	83 c2 12             	add    edx,0x12
c000eaa2:	85 ff                	test   edi,edi
c000eaa4:	74 06                	je     c000eaac <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eaa6:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eaaa:	75 12                	jne    c000eabe <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eaac:	83 ec 0c             	sub    esp,0xc
c000eaaf:	68 24 1a 02 c0       	push   0xc0021a24
c000eab4:	e8 51 be ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000eab9:	e9 b8 00 00 00       	jmp    c000eb76 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eabe:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eac2:	83 f9 02             	cmp    ecx,0x2
c000eac5:	0f 85 96 00 00 00    	jne    c000eb61 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eacb:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ead0:	75 0e                	jne    c000eae0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ead2:	85 c0                	test   eax,eax
c000ead4:	75 0a                	jne    c000eae0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ead6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ead9:	83 e8 18             	sub    eax,0x18
c000eadc:	a8 f7                	test   al,0xf7
c000eade:	74 0a                	je     c000eaea <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eae0:	83 ec 0c             	sub    esp,0xc
c000eae3:	68 39 1a 02 c0       	push   0xc0021a39
c000eae8:	eb 7f                	jmp    c000eb69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eaea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eaf2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eafa:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000eafe:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eb02:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb0a:	75 0c                	jne    c000eb18 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eb0c:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000eb11:	c1 e1 18             	shl    ecx,0x18
c000eb14:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000eb18:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb1d:	46                   	inc    esi
c000eb1e:	89 c8                	mov    eax,ecx
c000eb20:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb25:	c1 e0 10             	shl    eax,0x10
c000eb28:	c1 e1 08             	shl    ecx,0x8
c000eb2b:	09 c1                	or     ecx,eax
c000eb2d:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb31:	09 c1                	or     ecx,eax
c000eb33:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb37:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000eb3b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eb3f:	c1 f8 03             	sar    eax,0x3
c000eb42:	01 c2                	add    edx,eax
c000eb44:	89 f0                	mov    eax,esi
c000eb46:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eb4a:	39 c7                	cmp    edi,eax
c000eb4c:	7f b0                	jg     c000eafe <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eb4e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb56:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eb59:	7e 22                	jle    c000eb7d <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eb5b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000eb5f:	eb 99                	jmp    c000eafa <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eb61:	50                   	push   eax
c000eb62:	50                   	push   eax
c000eb63:	51                   	push   ecx
c000eb64:	68 47 1a 02 c0       	push   0xc0021a47
c000eb69:	e8 9c bd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000eb6e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eb71:	e8 6d 8f ff ff       	call   c0007ae3 <free>
c000eb76:	83 c4 10             	add    esp,0x10
c000eb79:	31 ed                	xor    ebp,ebp
c000eb7b:	eb 0f                	jmp    c000eb8c <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eb7d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb81:	89 38                	mov    DWORD PTR [eax],edi
c000eb83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb87:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000eb8a:	89 38                	mov    DWORD PTR [eax],edi
c000eb8c:	83 c4 1c             	add    esp,0x1c
c000eb8f:	89 e8                	mov    eax,ebp
c000eb91:	5b                   	pop    ebx
c000eb92:	5e                   	pop    esi
c000eb93:	5f                   	pop    edi
c000eb94:	5d                   	pop    ebp
c000eb95:	c3                   	ret    

c000eb96 <Video::putTGA(int, int, unsigned char*, int)>:
c000eb96:	55                   	push   ebp
c000eb97:	57                   	push   edi
c000eb98:	56                   	push   esi
c000eb99:	53                   	push   ebx
c000eb9a:	83 ec 28             	sub    esp,0x28
c000eb9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eba1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eba5:	50                   	push   eax
c000eba6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebaa:	50                   	push   eax
c000ebab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebb3:	57                   	push   edi
c000ebb4:	e8 75 fe ff ff       	call   c000ea2e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ebb9:	83 c4 20             	add    esp,0x20
c000ebbc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ebc0:	85 c0                	test   eax,eax
c000ebc2:	74 35                	je     c000ebf9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebc4:	89 c6                	mov    esi,eax
c000ebc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebca:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ebce:	39 d8                	cmp    eax,ebx
c000ebd0:	7e 27                	jle    c000ebf9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebd2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ebd6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ebda:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ebde:	39 e9                	cmp    ecx,ebp
c000ebe0:	7e 14                	jle    c000ebf6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ebe2:	83 c6 04             	add    esi,0x4
c000ebe5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ebe7:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ebea:	53                   	push   ebx
c000ebeb:	55                   	push   ebp
c000ebec:	45                   	inc    ebp
c000ebed:	57                   	push   edi
c000ebee:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ebf1:	83 c4 10             	add    esp,0x10
c000ebf4:	eb e0                	jmp    c000ebd6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ebf6:	43                   	inc    ebx
c000ebf7:	eb cd                	jmp    c000ebc6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ebf9:	83 c4 1c             	add    esp,0x1c
c000ebfc:	5b                   	pop    ebx
c000ebfd:	5e                   	pop    esi
c000ebfe:	5f                   	pop    edi
c000ebff:	5d                   	pop    ebp
c000ec00:	c3                   	ret    
c000ec01:	66 90                	xchg   ax,ax
c000ec03:	90                   	nop

c000ec04 <ACPI::close(int, int, void*)>:
c000ec04:	83 ec 1c             	sub    esp,0x1c
c000ec07:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ec0f:	74 0b                	je     c000ec1c <ACPI::close(int, int, void*)+0x18>
c000ec11:	b8 00 00 00 00       	mov    eax,0x0
c000ec16:	e9 99 00 00 00       	jmp    c000ecb4 <ACPI::close(int, int, void*)+0xb0>
c000ec1b:	90                   	nop
c000ec1c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec21:	75 29                	jne    c000ec4c <ACPI::close(int, int, void*)+0x48>
c000ec23:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec28:	85 c0                	test   eax,eax
c000ec2a:	74 08                	je     c000ec34 <ACPI::close(int, int, void*)+0x30>
c000ec2c:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec31:	ff d0                	call   eax
c000ec33:	90                   	nop
c000ec34:	83 ec 0c             	sub    esp,0xc
c000ec37:	68 a8 1a 02 c0       	push   0xc0021aa8
c000ec3c:	e8 58 26 00 00       	call   c0011299 <KePanic(char const*)>
c000ec41:	83 c4 10             	add    esp,0x10
c000ec44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec49:	eb 69                	jmp    c000ecb4 <ACPI::close(int, int, void*)+0xb0>
c000ec4b:	90                   	nop
c000ec4c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ec51:	75 59                	jne    c000ecac <ACPI::close(int, int, void*)+0xa8>
c000ec53:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec58:	85 c0                	test   eax,eax
c000ec5a:	74 08                	je     c000ec64 <ACPI::close(int, int, void*)+0x60>
c000ec5c:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec61:	ff d0                	call   eax
c000ec63:	90                   	nop
c000ec64:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ec69:	8d 76 00             	lea    esi,[esi+0x0]
c000ec6c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ec71:	83 e0 02             	and    eax,0x2
c000ec74:	74 1e                	je     c000ec94 <ACPI::close(int, int, void*)+0x90>
c000ec76:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ec7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec81:	89 c2                	mov    edx,eax
c000ec83:	ec                   	in     al,dx
c000ec84:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ec88:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ec8c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ec90:	eb da                	jmp    c000ec6c <ACPI::close(int, int, void*)+0x68>
c000ec92:	66 90                	xchg   ax,ax
c000ec94:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ec9b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000eca0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eca4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eca8:	ee                   	out    dx,al
c000eca9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecb4:	83 c4 1c             	add    esp,0x1c
c000ecb7:	c3                   	ret    

c000ecb8 <findRSDP()>:
c000ecb8:	83 ec 1c             	sub    esp,0x1c
c000ecbb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ecc0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ecc6:	83 e0 04             	and    eax,0x4
c000ecc9:	0f b6 c0             	movzx  eax,al
c000eccc:	85 c0                	test   eax,eax
c000ecce:	75 08                	jne    c000ecd8 <findRSDP()+0x20>
c000ecd0:	b8 00 00 00 00       	mov    eax,0x0
c000ecd5:	eb 75                	jmp    c000ed4c <findRSDP()+0x94>
c000ecd7:	90                   	nop
c000ecd8:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ecdd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ece2:	7f 1c                	jg     c000ed00 <findRSDP()+0x48>
c000ece4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ece9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ecef:	83 e2 fb             	and    edx,0xfffffffb
c000ecf2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ecf8:	b8 00 00 00 00       	mov    eax,0x0
c000ecfd:	eb 4d                	jmp    c000ed4c <findRSDP()+0x94>
c000ecff:	90                   	nop
c000ed00:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ed08:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ed10:	77 32                	ja     c000ed44 <findRSDP()+0x8c>
c000ed12:	83 ec 04             	sub    esp,0x4
c000ed15:	6a 08                	push   0x8
c000ed17:	68 43 1b 02 c0       	push   0xc0021b43
c000ed1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed20:	e8 5b 16 ff ff       	call   c0000380 <memcmp>
c000ed25:	83 c4 10             	add    esp,0x10
c000ed28:	85 c0                	test   eax,eax
c000ed2a:	0f 94 c0             	sete   al
c000ed2d:	0f b6 c0             	movzx  eax,al
c000ed30:	85 c0                	test   eax,eax
c000ed32:	74 08                	je     c000ed3c <findRSDP()+0x84>
c000ed34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed38:	eb 12                	jmp    c000ed4c <findRSDP()+0x94>
c000ed3a:	66 90                	xchg   ax,ax
c000ed3c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ed41:	eb c5                	jmp    c000ed08 <findRSDP()+0x50>
c000ed43:	90                   	nop
c000ed44:	b8 00 00 00 00       	mov    eax,0x0
c000ed49:	8d 76 00             	lea    esi,[esi+0x0]
c000ed4c:	83 c4 1c             	add    esp,0x1c
c000ed4f:	c3                   	ret    

c000ed50 <loadACPITables(unsigned char*)>:
c000ed50:	57                   	push   edi
c000ed51:	56                   	push   esi
c000ed52:	53                   	push   ebx
c000ed53:	83 ec 60             	sub    esp,0x60
c000ed56:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed5b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed61:	83 e0 04             	and    eax,0x4
c000ed64:	0f b6 c0             	movzx  eax,al
c000ed67:	85 c0                	test   eax,eax
c000ed69:	0f 84 41 02 00 00    	je     c000efb0 <loadACPITables(unsigned char*)+0x260>
c000ed6f:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ed74:	0f b6 c0             	movzx  eax,al
c000ed77:	85 c0                	test   eax,eax
c000ed79:	74 79                	je     c000edf4 <loadACPITables(unsigned char*)+0xa4>
c000ed7b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed7f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ed83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ed87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed8a:	83 e8 24             	sub    eax,0x24
c000ed8d:	c1 e8 03             	shr    eax,0x3
c000ed90:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ed94:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ed9c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000eda0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000eda4:	0f 8d ba 00 00 00    	jge    c000ee64 <loadACPITables(unsigned char*)+0x114>
c000edaa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edae:	83 c0 24             	add    eax,0x24
c000edb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000edb5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000edb9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edbd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000edc1:	c1 e0 03             	shl    eax,0x3
c000edc4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000edc8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edcc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000edcf:	8b 00                	mov    eax,DWORD PTR [eax]
c000edd1:	89 c1                	mov    ecx,eax
c000edd3:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000edd8:	8d 50 01             	lea    edx,[eax+0x1]
c000eddb:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ede1:	89 ca                	mov    edx,ecx
c000ede3:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000edea:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000edef:	eb ab                	jmp    c000ed9c <loadACPITables(unsigned char*)+0x4c>
c000edf1:	8d 76 00             	lea    esi,[esi+0x0]
c000edf4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edf8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000edfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee03:	83 e8 24             	sub    eax,0x24
c000ee06:	c1 e8 02             	shr    eax,0x2
c000ee09:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee0d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ee15:	8d 76 00             	lea    esi,[esi+0x0]
c000ee18:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee1c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee20:	7d 42                	jge    c000ee64 <loadACPITables(unsigned char*)+0x114>
c000ee22:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee26:	83 c0 24             	add    eax,0x24
c000ee29:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee2d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee31:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee35:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee39:	c1 e0 02             	shl    eax,0x2
c000ee3c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ee40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee44:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee46:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee4b:	8d 50 01             	lea    edx,[eax+0x1]
c000ee4e:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee54:	89 ca                	mov    edx,ecx
c000ee56:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee5d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ee62:	eb b4                	jmp    c000ee18 <loadACPITables(unsigned char*)+0xc8>
c000ee64:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ee6c:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee71:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ee75:	0f 8d 39 01 00 00    	jge    c000efb4 <loadACPITables(unsigned char*)+0x264>
c000ee7b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee7f:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000ee86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee8e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ee92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee96:	25 ff 0f 00 00       	and    eax,0xfff
c000ee9b:	89 c6                	mov    esi,eax
c000ee9d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000eea3:	83 ec 0c             	sub    esp,0xc
c000eea6:	6a 01                	push   0x1
c000eea8:	e8 48 a7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000eead:	83 c4 10             	add    esp,0x10
c000eeb0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eeb4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eeba:	83 ec 0c             	sub    esp,0xc
c000eebd:	6a 01                	push   0x1
c000eebf:	6a 01                	push   0x1
c000eec1:	50                   	push   eax
c000eec2:	52                   	push   edx
c000eec3:	53                   	push   ebx
c000eec4:	e8 3f b0 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eec9:	83 c4 20             	add    esp,0x20
c000eecc:	09 f0                	or     eax,esi
c000eece:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eed2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eed6:	c1 e0 03             	shl    eax,0x3
c000eed9:	05 20 89 02 c0       	add    eax,0xc0028920
c000eede:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eee2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eee6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eeea:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000eef2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eef6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eefa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eefe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef06:	89 c6                	mov    esi,eax
c000ef08:	89 d7                	mov    edi,edx
c000ef0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef0c:	89 c8                	mov    eax,ecx
c000ef0e:	89 fa                	mov    edx,edi
c000ef10:	89 f3                	mov    ebx,esi
c000ef12:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef16:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef2d:	05 00 10 00 00       	add    eax,0x1000
c000ef32:	c1 e8 0c             	shr    eax,0xc
c000ef35:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef3d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef45:	25 ff 0f 00 00       	and    eax,0xfff
c000ef4a:	89 c6                	mov    esi,eax
c000ef4c:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef52:	83 ec 0c             	sub    esp,0xc
c000ef55:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef59:	e8 97 a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef5e:	83 c4 10             	add    esp,0x10
c000ef61:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ef65:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef6b:	83 ec 0c             	sub    esp,0xc
c000ef6e:	6a 01                	push   0x1
c000ef70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef74:	50                   	push   eax
c000ef75:	52                   	push   edx
c000ef76:	53                   	push   ebx
c000ef77:	e8 8c af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef7c:	83 c4 20             	add    esp,0x20
c000ef7f:	09 f0                	or     eax,esi
c000ef81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef89:	83 ec 0c             	sub    esp,0xc
c000ef8c:	50                   	push   eax
c000ef8d:	e8 77 a9 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000ef92:	83 c4 10             	add    esp,0x10
c000ef95:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef99:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ef9d:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000efa4:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000efa9:	e9 be fe ff ff       	jmp    c000ee6c <loadACPITables(unsigned char*)+0x11c>
c000efae:	66 90                	xchg   ax,ax
c000efb0:	90                   	nop
c000efb1:	8d 76 00             	lea    esi,[esi+0x0]
c000efb4:	83 c4 60             	add    esp,0x60
c000efb7:	5b                   	pop    ebx
c000efb8:	5e                   	pop    esi
c000efb9:	5f                   	pop    edi
c000efba:	c3                   	ret    
c000efbb:	90                   	nop

c000efbc <findRSDT(unsigned char*)>:
c000efbc:	57                   	push   edi
c000efbd:	56                   	push   esi
c000efbe:	53                   	push   ebx
c000efbf:	83 ec 50             	sub    esp,0x50
c000efc2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000efc7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efcd:	83 e0 04             	and    eax,0x4
c000efd0:	0f b6 c0             	movzx  eax,al
c000efd3:	85 c0                	test   eax,eax
c000efd5:	75 0d                	jne    c000efe4 <findRSDT(unsigned char*)+0x28>
c000efd7:	b8 00 00 00 00       	mov    eax,0x0
c000efdc:	e9 2b 01 00 00       	jmp    c000f10c <findRSDT(unsigned char*)+0x150>
c000efe1:	8d 76 00             	lea    esi,[esi+0x0]
c000efe4:	89 e0                	mov    eax,esp
c000efe6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000efea:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000eff2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000effa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000effe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f002:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f006:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f00a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f00e:	89 c6                	mov    esi,eax
c000f010:	89 d7                	mov    edi,edx
c000f012:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f014:	89 c8                	mov    eax,ecx
c000f016:	89 fa                	mov    edx,edi
c000f018:	89 f3                	mov    ebx,esi
c000f01a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f01e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f022:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f026:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f02a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f02e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f036:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f03a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f03e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f046:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f04a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f04e:	25 ff 0f 00 00       	and    eax,0xfff
c000f053:	89 c6                	mov    esi,eax
c000f055:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f05b:	83 ec 0c             	sub    esp,0xc
c000f05e:	6a 02                	push   0x2
c000f060:	e8 90 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f065:	83 c4 10             	add    esp,0x10
c000f068:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f06c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f072:	83 ec 0c             	sub    esp,0xc
c000f075:	6a 01                	push   0x1
c000f077:	6a 02                	push   0x2
c000f079:	50                   	push   eax
c000f07a:	52                   	push   edx
c000f07b:	53                   	push   ebx
c000f07c:	e8 87 ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f081:	83 c4 20             	add    esp,0x20
c000f084:	09 f0                	or     eax,esi
c000f086:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f08a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f08e:	25 ff 0f 00 00       	and    eax,0xfff
c000f093:	89 c6                	mov    esi,eax
c000f095:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f09b:	83 ec 0c             	sub    esp,0xc
c000f09e:	6a 02                	push   0x2
c000f0a0:	e8 50 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f0a5:	83 c4 10             	add    esp,0x10
c000f0a8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f0ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0b2:	83 ec 0c             	sub    esp,0xc
c000f0b5:	6a 01                	push   0x1
c000f0b7:	6a 02                	push   0x2
c000f0b9:	50                   	push   eax
c000f0ba:	52                   	push   edx
c000f0bb:	53                   	push   ebx
c000f0bc:	e8 47 ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0c1:	83 c4 20             	add    esp,0x20
c000f0c4:	09 f0                	or     eax,esi
c000f0c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0ca:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f0cf:	85 c0                	test   eax,eax
c000f0d1:	75 11                	jne    c000f0e4 <findRSDT(unsigned char*)+0x128>
c000f0d3:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f0da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0de:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0e2:	eb 24                	jmp    c000f108 <findRSDT(unsigned char*)+0x14c>
c000f0e4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f0e9:	83 f8 02             	cmp    eax,0x2
c000f0ec:	75 12                	jne    c000f100 <findRSDT(unsigned char*)+0x144>
c000f0ee:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f0f5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0f9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0fd:	eb 09                	jmp    c000f108 <findRSDT(unsigned char*)+0x14c>
c000f0ff:	90                   	nop
c000f100:	b8 00 00 00 00       	mov    eax,0x0
c000f105:	eb 05                	jmp    c000f10c <findRSDT(unsigned char*)+0x150>
c000f107:	90                   	nop
c000f108:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f10c:	83 c4 50             	add    esp,0x50
c000f10f:	5b                   	pop    ebx
c000f110:	5e                   	pop    esi
c000f111:	5f                   	pop    edi
c000f112:	c3                   	ret    
c000f113:	90                   	nop

c000f114 <findDataTable(unsigned char*, char*)>:
c000f114:	83 ec 1c             	sub    esp,0x1c
c000f117:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f11c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f122:	83 e0 04             	and    eax,0x4
c000f125:	0f b6 c0             	movzx  eax,al
c000f128:	85 c0                	test   eax,eax
c000f12a:	75 08                	jne    c000f134 <findDataTable(unsigned char*, char*)+0x20>
c000f12c:	b8 00 00 00 00       	mov    eax,0x0
c000f131:	eb 5d                	jmp    c000f190 <findDataTable(unsigned char*, char*)+0x7c>
c000f133:	90                   	nop
c000f134:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f13c:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f141:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f145:	7d 41                	jge    c000f188 <findDataTable(unsigned char*, char*)+0x74>
c000f147:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f14b:	c1 e0 03             	shl    eax,0x3
c000f14e:	05 20 89 02 c0       	add    eax,0xc0028920
c000f153:	83 ec 04             	sub    esp,0x4
c000f156:	6a 04                	push   0x4
c000f158:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f15c:	50                   	push   eax
c000f15d:	e8 1e 12 ff ff       	call   c0000380 <memcmp>
c000f162:	83 c4 10             	add    esp,0x10
c000f165:	85 c0                	test   eax,eax
c000f167:	0f 94 c0             	sete   al
c000f16a:	0f b6 c0             	movzx  eax,al
c000f16d:	85 c0                	test   eax,eax
c000f16f:	74 0f                	je     c000f180 <findDataTable(unsigned char*, char*)+0x6c>
c000f171:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f175:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f17c:	eb 12                	jmp    c000f190 <findDataTable(unsigned char*, char*)+0x7c>
c000f17e:	66 90                	xchg   ax,ax
c000f180:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f185:	eb b5                	jmp    c000f13c <findDataTable(unsigned char*, char*)+0x28>
c000f187:	90                   	nop
c000f188:	b8 00 00 00 00       	mov    eax,0x0
c000f18d:	8d 76 00             	lea    esi,[esi+0x0]
c000f190:	83 c4 1c             	add    esp,0x1c
c000f193:	c3                   	ret    

c000f194 <scanMADT()>:
c000f194:	53                   	push   ebx
c000f195:	83 ec 38             	sub    esp,0x38
c000f198:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f19d:	25 00 04 00 00       	and    eax,0x400
c000f1a2:	74 14                	je     c000f1b8 <scanMADT()+0x24>
c000f1a4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1a9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1af:	83 e2 fb             	and    edx,0xfffffffb
c000f1b2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1b8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1bd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1c3:	83 e0 04             	and    eax,0x4
c000f1c6:	0f b6 c0             	movzx  eax,al
c000f1c9:	85 c0                	test   eax,eax
c000f1cb:	0f 84 6b 04 00 00    	je     c000f63c <scanMADT()+0x4a8>
c000f1d1:	e8 e2 fa ff ff       	call   c000ecb8 <findRSDP()>
c000f1d6:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f1db:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f1e0:	85 c0                	test   eax,eax
c000f1e2:	75 1c                	jne    c000f200 <scanMADT()+0x6c>
c000f1e4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1e9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1ef:	83 e2 fb             	and    edx,0xfffffffb
c000f1f2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1f8:	e9 47 04 00 00       	jmp    c000f644 <scanMADT()+0x4b0>
c000f1fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f200:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f205:	83 ec 0c             	sub    esp,0xc
c000f208:	50                   	push   eax
c000f209:	e8 ae fd ff ff       	call   c000efbc <findRSDT(unsigned char*)>
c000f20e:	83 c4 10             	add    esp,0x10
c000f211:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f216:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f21b:	85 c0                	test   eax,eax
c000f21d:	75 19                	jne    c000f238 <scanMADT()+0xa4>
c000f21f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f224:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f22a:	83 e2 fb             	and    edx,0xfffffffb
c000f22d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f233:	e9 0c 04 00 00       	jmp    c000f644 <scanMADT()+0x4b0>
c000f238:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f23d:	83 ec 0c             	sub    esp,0xc
c000f240:	50                   	push   eax
c000f241:	e8 0a fb ff ff       	call   c000ed50 <loadACPITables(unsigned char*)>
c000f246:	83 c4 10             	add    esp,0x10
c000f249:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f24e:	83 ec 08             	sub    esp,0x8
c000f251:	68 4c 1b 02 c0       	push   0xc0021b4c
c000f256:	50                   	push   eax
c000f257:	e8 b8 fe ff ff       	call   c000f114 <findDataTable(unsigned char*, char*)>
c000f25c:	83 c4 10             	add    esp,0x10
c000f25f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f263:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f268:	75 1a                	jne    c000f284 <scanMADT()+0xf0>
c000f26a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f26f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f275:	83 e2 fe             	and    edx,0xfffffffe
c000f278:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f27e:	e9 c1 03 00 00       	jmp    c000f644 <scanMADT()+0x4b0>
c000f283:	90                   	nop
c000f284:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f28c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f290:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f293:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f297:	0f 87 a7 03 00 00    	ja     c000f644 <scanMADT()+0x4b0>
c000f29d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f2a5:	0f 87 99 03 00 00    	ja     c000f644 <scanMADT()+0x4b0>
c000f2ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2b7:	8d 50 01             	lea    edx,[eax+0x1]
c000f2ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2c2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2c6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f2ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ce:	8d 50 01             	lea    edx,[eax+0x1]
c000f2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2d9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2dd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f2e1:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f2e6:	83 f8 02             	cmp    eax,0x2
c000f2e9:	0f 86 51 03 00 00    	jbe    c000f640 <scanMADT()+0x4ac>
c000f2ef:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f2f4:	85 c0                	test   eax,eax
c000f2f6:	75 58                	jne    c000f350 <scanMADT()+0x1bc>
c000f2f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2fc:	8d 50 01             	lea    edx,[eax+0x1]
c000f2ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f303:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f309:	0f b6 d2             	movzx  edx,dl
c000f30c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f310:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f314:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f31a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f31e:	8d 50 01             	lea    edx,[eax+0x1]
c000f321:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f325:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f32b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f32e:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f334:	0f b6 d2             	movzx  edx,dl
c000f337:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f33b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f33f:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f345:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f34a:	e9 d9 02 00 00       	jmp    c000f628 <scanMADT()+0x494>
c000f34f:	90                   	nop
c000f350:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f355:	83 f8 01             	cmp    eax,0x1
c000f358:	0f 85 1a 01 00 00    	jne    c000f478 <scanMADT()+0x2e4>
c000f35e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f362:	8d 50 01             	lea    edx,[eax+0x1]
c000f365:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f369:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f36f:	0f b6 d2             	movzx  edx,dl
c000f372:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f376:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f37a:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f380:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f385:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f389:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f38d:	01 d0                	add    eax,edx
c000f38f:	83 c0 2c             	add    eax,0x2c
c000f392:	8a 00                	mov    al,BYTE PTR [eax]
c000f394:	0f b6 d0             	movzx  edx,al
c000f397:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f39b:	8d 48 01             	lea    ecx,[eax+0x1]
c000f39e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3a2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3a6:	0f b6 c0             	movzx  eax,al
c000f3a9:	c1 e0 08             	shl    eax,0x8
c000f3ac:	89 d1                	mov    ecx,edx
c000f3ae:	09 c1                	or     ecx,eax
c000f3b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3b4:	8d 50 02             	lea    edx,[eax+0x2]
c000f3b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3bb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3bf:	0f b6 c0             	movzx  eax,al
c000f3c2:	c1 e0 10             	shl    eax,0x10
c000f3c5:	09 c1                	or     ecx,eax
c000f3c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3cb:	8d 50 03             	lea    edx,[eax+0x3]
c000f3ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3d2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3d6:	0f b6 c0             	movzx  eax,al
c000f3d9:	c1 e0 18             	shl    eax,0x18
c000f3dc:	09 c1                	or     ecx,eax
c000f3de:	89 ca                	mov    edx,ecx
c000f3e0:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f3e5:	0f b6 c0             	movzx  eax,al
c000f3e8:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f3ef:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f3f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3fc:	01 d0                	add    eax,edx
c000f3fe:	83 c0 2c             	add    eax,0x2c
c000f401:	8a 00                	mov    al,BYTE PTR [eax]
c000f403:	0f b6 d0             	movzx  edx,al
c000f406:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f40a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f40d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f411:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f415:	0f b6 c0             	movzx  eax,al
c000f418:	c1 e0 08             	shl    eax,0x8
c000f41b:	89 d1                	mov    ecx,edx
c000f41d:	09 c1                	or     ecx,eax
c000f41f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f423:	8d 50 02             	lea    edx,[eax+0x2]
c000f426:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f42a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f42e:	0f b6 c0             	movzx  eax,al
c000f431:	c1 e0 10             	shl    eax,0x10
c000f434:	09 c1                	or     ecx,eax
c000f436:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f43a:	8d 50 03             	lea    edx,[eax+0x3]
c000f43d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f441:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f445:	0f b6 c0             	movzx  eax,al
c000f448:	c1 e0 18             	shl    eax,0x18
c000f44b:	09 c1                	or     ecx,eax
c000f44d:	89 ca                	mov    edx,ecx
c000f44f:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f454:	0f b6 c0             	movzx  eax,al
c000f457:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f45e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f463:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f468:	83 c0 01             	add    eax,0x1
c000f46b:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f470:	e9 b3 01 00 00       	jmp    c000f628 <scanMADT()+0x494>
c000f475:	8d 76 00             	lea    esi,[esi+0x0]
c000f478:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f47d:	83 f8 02             	cmp    eax,0x2
c000f480:	0f 85 ea 00 00 00    	jne    c000f570 <scanMADT()+0x3dc>
c000f486:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f48a:	8d 50 01             	lea    edx,[eax+0x1]
c000f48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f491:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f495:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f499:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f49d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4a1:	8d 50 01             	lea    edx,[eax+0x1]
c000f4a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4ac:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4b0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f4b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4bc:	01 d0                	add    eax,edx
c000f4be:	83 c0 2c             	add    eax,0x2c
c000f4c1:	8a 00                	mov    al,BYTE PTR [eax]
c000f4c3:	0f b6 d0             	movzx  edx,al
c000f4c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ca:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4d1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4d5:	0f b6 c0             	movzx  eax,al
c000f4d8:	c1 e0 08             	shl    eax,0x8
c000f4db:	89 d1                	mov    ecx,edx
c000f4dd:	09 c1                	or     ecx,eax
c000f4df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4e3:	8d 50 02             	lea    edx,[eax+0x2]
c000f4e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4ea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f4ee:	0f b6 c0             	movzx  eax,al
c000f4f1:	c1 e0 10             	shl    eax,0x10
c000f4f4:	09 c1                	or     ecx,eax
c000f4f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4fa:	8d 50 03             	lea    edx,[eax+0x3]
c000f4fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f501:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f505:	0f b6 c0             	movzx  eax,al
c000f508:	c1 e0 18             	shl    eax,0x18
c000f50b:	09 c8                	or     eax,ecx
c000f50d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f511:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f516:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f51a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f51e:	01 d0                	add    eax,edx
c000f520:	83 c0 2c             	add    eax,0x2c
c000f523:	8a 00                	mov    al,BYTE PTR [eax]
c000f525:	0f b6 d0             	movzx  edx,al
c000f528:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f52c:	8d 48 01             	lea    ecx,[eax+0x1]
c000f52f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f533:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f537:	0f b6 c0             	movzx  eax,al
c000f53a:	c1 e0 08             	shl    eax,0x8
c000f53d:	09 d0                	or     eax,edx
c000f53f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f544:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f549:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f54e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f552:	88 90 48 32 02 c0    	mov    BYTE PTR [eax-0x3ffdcdb8],dl
c000f558:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f55d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f562:	66 89 94 00 c0 8b 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd7440],dx
c000f56a:	e9 b9 00 00 00       	jmp    c000f628 <scanMADT()+0x494>
c000f56f:	90                   	nop
c000f570:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f575:	83 f8 04             	cmp    eax,0x4
c000f578:	0f 85 9a 00 00 00    	jne    c000f618 <scanMADT()+0x484>
c000f57e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f582:	8d 50 01             	lea    edx,[eax+0x1]
c000f585:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f589:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f58d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f591:	0f b6 c0             	movzx  eax,al
c000f594:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f598:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f59c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5a0:	01 d0                	add    eax,edx
c000f5a2:	83 c0 2c             	add    eax,0x2c
c000f5a5:	8a 00                	mov    al,BYTE PTR [eax]
c000f5a7:	0f b6 d0             	movzx  edx,al
c000f5aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ae:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5b5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5b9:	0f b6 c0             	movzx  eax,al
c000f5bc:	c1 e0 08             	shl    eax,0x8
c000f5bf:	09 d0                	or     eax,edx
c000f5c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f5c5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f5ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ce:	8d 50 01             	lea    edx,[eax+0x1]
c000f5d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5d9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5dd:	0f b6 c0             	movzx  eax,al
c000f5e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f5e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5e8:	c1 e0 08             	shl    eax,0x8
c000f5eb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f5ef:	89 c1                	mov    ecx,eax
c000f5f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5f5:	c1 e0 18             	shl    eax,0x18
c000f5f8:	89 c3                	mov    ebx,eax
c000f5fa:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f5ff:	8d 50 01             	lea    edx,[eax+0x1]
c000f602:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f608:	09 d9                	or     ecx,ebx
c000f60a:	89 ca                	mov    edx,ecx
c000f60c:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f613:	eb 13                	jmp    c000f628 <scanMADT()+0x494>
c000f615:	8d 76 00             	lea    esi,[esi+0x0]
c000f618:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f61d:	83 f8 05             	cmp    eax,0x5
c000f620:	75 06                	jne    c000f628 <scanMADT()+0x494>
c000f622:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f627:	90                   	nop
c000f628:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f62d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f631:	01 d0                	add    eax,edx
c000f633:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f637:	e9 50 fc ff ff       	jmp    c000f28c <scanMADT()+0xf8>
c000f63c:	90                   	nop
c000f63d:	eb 05                	jmp    c000f644 <scanMADT()+0x4b0>
c000f63f:	90                   	nop
c000f640:	90                   	nop
c000f641:	8d 76 00             	lea    esi,[esi+0x0]
c000f644:	83 c4 38             	add    esp,0x38
c000f647:	5b                   	pop    ebx
c000f648:	c3                   	ret    
c000f649:	90                   	nop
c000f64a:	66 90                	xchg   ax,ax

c000f64c <ACPI::ACPI()>:
c000f64c:	83 ec 0c             	sub    esp,0xc
c000f64f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f653:	83 ec 08             	sub    esp,0x8
c000f656:	68 51 1b 02 c0       	push   0xc0021b51
c000f65b:	50                   	push   eax
c000f65c:	e8 3b d2 ff ff       	call   c000c89c <Device::Device(char const*)>
c000f661:	83 c4 10             	add    esp,0x10
c000f664:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c000f669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f66d:	89 10                	mov    DWORD PTR [eax],edx
c000f66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f673:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f67e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f68c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f696:	e8 f9 fa ff ff       	call   c000f194 <scanMADT()>
c000f69b:	90                   	nop
c000f69c:	83 c4 0c             	add    esp,0xc
c000f69f:	c3                   	ret    

c000f6a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f6a0:	83 ec 2c             	sub    esp,0x2c
c000f6a3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f6a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6ab:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f6af:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f6b3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f6b8:	88 c8                	mov    al,cl
c000f6ba:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6be:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f6c3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f6cb:	90                   	nop
c000f6cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6d0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6d6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f6da:	0f 8d b0 00 00 00    	jge    c000f790 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f6e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6e8:	83 c2 2a             	add    edx,0x2a
c000f6eb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f6ef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f6f4:	0f b7 c0             	movzx  eax,ax
c000f6f7:	39 c2                	cmp    edx,eax
c000f6f9:	0f 85 85 00 00 00    	jne    c000f784 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f6ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f703:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f707:	83 c2 2a             	add    edx,0x2a
c000f70a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f70e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f713:	0f b6 c0             	movzx  eax,al
c000f716:	39 c2                	cmp    edx,eax
c000f718:	75 6a                	jne    c000f784 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f71a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f71f:	85 c0                	test   eax,eax
c000f721:	74 3d                	je     c000f760 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f723:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f727:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f72b:	83 c2 2a             	add    edx,0x2a
c000f72e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f732:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f736:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f739:	39 c2                	cmp    edx,eax
c000f73b:	74 13                	je     c000f750 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f73d:	83 ec 0c             	sub    esp,0xc
c000f740:	68 cc 1a 02 c0       	push   0xc0021acc
c000f745:	e8 4f 1b 00 00       	call   c0011299 <KePanic(char const*)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	8d 76 00             	lea    esi,[esi+0x0]
c000f750:	83 ec 0c             	sub    esp,0xc
c000f753:	68 56 1b 02 c0       	push   0xc0021b56
c000f758:	e8 3c 1b 00 00       	call   c0011299 <KePanic(char const*)>
c000f75d:	83 c4 10             	add    esp,0x10
c000f760:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f764:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f768:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f76c:	83 c2 2a             	add    edx,0x2a
c000f76f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f773:	8b 02                	mov    eax,DWORD PTR [edx]
c000f775:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f778:	89 01                	mov    DWORD PTR [ecx],eax
c000f77a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f77d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f782:	66 90                	xchg   ax,ax
c000f784:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f789:	e9 3e ff ff ff       	jmp    c000f6cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f78e:	66 90                	xchg   ax,ax
c000f790:	90                   	nop
c000f791:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f795:	83 c4 2c             	add    esp,0x2c
c000f798:	c2 04 00             	ret    0x4
c000f79b:	90                   	nop

c000f79c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f79c:	83 ec 1c             	sub    esp,0x1c
c000f79f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7a3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f7a7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f7ab:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f7b0:	88 c8                	mov    al,cl
c000f7b2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f7b6:	88 d0                	mov    al,dl
c000f7b8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f7bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7c0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7ca:	83 c2 2a             	add    edx,0x2a
c000f7cd:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f7d1:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f7d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7d9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7e3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f7e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f7ea:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f7ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7f3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7f9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f7fd:	83 c0 01             	add    eax,0x1
c000f800:	88 c1                	mov    cl,al
c000f802:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f806:	83 c2 2a             	add    edx,0x2a
c000f809:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f80d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f811:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f81b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f81e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f822:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f826:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f82a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f830:	8d 50 01             	lea    edx,[eax+0x1]
c000f833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f837:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f83d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f841:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f847:	3d 00 02 00 00       	cmp    eax,0x200
c000f84c:	75 12                	jne    c000f860 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f84e:	83 ec 0c             	sub    esp,0xc
c000f851:	68 65 1b 02 c0       	push   0xc0021b65
c000f856:	e8 3e 1a 00 00       	call   c0011299 <KePanic(char const*)>
c000f85b:	83 c4 10             	add    esp,0x10
c000f85e:	66 90                	xchg   ax,ax
c000f860:	90                   	nop
c000f861:	83 c4 1c             	add    esp,0x1c
c000f864:	c3                   	ret    
c000f865:	90                   	nop
c000f866:	66 90                	xchg   ax,ax

c000f868 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f868:	b8 00 00 00 00       	mov    eax,0x0
c000f86d:	c3                   	ret    
c000f86e:	66 90                	xchg   ax,ax

c000f870 <ACPI::detectPCI()>:
c000f870:	53                   	push   ebx
c000f871:	83 ec 28             	sub    esp,0x28
c000f874:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f879:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f87e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f883:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f889:	83 e0 04             	and    eax,0x4
c000f88c:	0f b6 c0             	movzx  eax,al
c000f88f:	85 c0                	test   eax,eax
c000f891:	74 2d                	je     c000f8c0 <ACPI::detectPCI()+0x50>
c000f893:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f898:	83 ec 08             	sub    esp,0x8
c000f89b:	68 82 1b 02 c0       	push   0xc0021b82
c000f8a0:	50                   	push   eax
c000f8a1:	e8 6e f8 ff ff       	call   c000f114 <findDataTable(unsigned char*, char*)>
c000f8a6:	83 c4 10             	add    esp,0x10
c000f8a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8ad:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f8b2:	74 0c                	je     c000f8c0 <ACPI::detectPCI()+0x50>
c000f8b4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8b9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8be:	66 90                	xchg   ax,ax
c000f8c0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f8c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8cc:	8a 00                	mov    al,BYTE PTR [eax]
c000f8ce:	0f b6 c0             	movzx  eax,al
c000f8d1:	83 f8 01             	cmp    eax,0x1
c000f8d4:	75 0e                	jne    c000f8e4 <ACPI::detectPCI()+0x74>
c000f8d6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8db:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8e0:	eb 2e                	jmp    c000f910 <ACPI::detectPCI()+0xa0>
c000f8e2:	66 90                	xchg   ax,ax
c000f8e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8e8:	8a 00                	mov    al,BYTE PTR [eax]
c000f8ea:	0f b6 c0             	movzx  eax,al
c000f8ed:	83 f8 02             	cmp    eax,0x2
c000f8f0:	75 1e                	jne    c000f910 <ACPI::detectPCI()+0xa0>
c000f8f2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8f7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f8fc:	85 c0                	test   eax,eax
c000f8fe:	74 10                	je     c000f910 <ACPI::detectPCI()+0xa0>
c000f900:	83 ec 0c             	sub    esp,0xc
c000f903:	68 fc 1a 02 c0       	push   0xc0021afc
c000f908:	e8 8c 19 00 00       	call   c0011299 <KePanic(char const*)>
c000f90d:	83 c4 10             	add    esp,0x10
c000f910:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f914:	83 f0 01             	xor    eax,0x1
c000f917:	0f b6 c0             	movzx  eax,al
c000f91a:	85 c0                	test   eax,eax
c000f91c:	74 46                	je     c000f964 <ACPI::detectPCI()+0xf4>
c000f91e:	e8 0d 08 ff ff       	call   c0000130 <manualPCIProbe>
c000f923:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f927:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f92c:	75 0e                	jne    c000f93c <ACPI::detectPCI()+0xcc>
c000f92e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f933:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f938:	eb 2a                	jmp    c000f964 <ACPI::detectPCI()+0xf4>
c000f93a:	66 90                	xchg   ax,ax
c000f93c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f941:	75 21                	jne    c000f964 <ACPI::detectPCI()+0xf4>
c000f943:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f948:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f94d:	85 c0                	test   eax,eax
c000f94f:	74 13                	je     c000f964 <ACPI::detectPCI()+0xf4>
c000f951:	83 ec 0c             	sub    esp,0xc
c000f954:	68 fc 1a 02 c0       	push   0xc0021afc
c000f959:	e8 3b 19 00 00       	call   c0011299 <KePanic(char const*)>
c000f95e:	83 c4 10             	add    esp,0x10
c000f961:	8d 76 00             	lea    esi,[esi+0x0]
c000f964:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f969:	85 c0                	test   eax,eax
c000f96b:	0f 84 87 00 00 00    	je     c000f9f8 <ACPI::detectPCI()+0x188>
c000f971:	83 ec 0c             	sub    esp,0xc
c000f974:	68 87 1b 02 c0       	push   0xc0021b87
c000f979:	e8 47 12 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c000f97e:	83 c4 10             	add    esp,0x10
c000f981:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f989:	83 ec 0c             	sub    esp,0xc
c000f98c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f990:	e8 3e 81 ff ff       	call   c0007ad3 <malloc>
c000f995:	83 c4 10             	add    esp,0x10
c000f998:	89 c3                	mov    ebx,eax
c000f99a:	83 ec 0c             	sub    esp,0xc
c000f99d:	53                   	push   ebx
c000f99e:	e8 df b3 00 00       	call   c001ad82 <PCI::PCI()>
c000f9a3:	83 c4 10             	add    esp,0x10
c000f9a6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f9aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9ae:	83 ec 08             	sub    esp,0x8
c000f9b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9b5:	50                   	push   eax
c000f9b6:	e8 49 cd ff ff       	call   c000c704 <Device::addChild(Device*)>
c000f9bb:	83 c4 10             	add    esp,0x10
c000f9be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c4:	83 c0 08             	add    eax,0x8
c000f9c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f9ce:	85 d2                	test   edx,edx
c000f9d0:	74 0a                	je     c000f9dc <ACPI::detectPCI()+0x16c>
c000f9d2:	ba 01 00 00 00       	mov    edx,0x1
c000f9d7:	eb 0b                	jmp    c000f9e4 <ACPI::detectPCI()+0x174>
c000f9d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9dc:	ba 02 00 00 00       	mov    edx,0x2
c000f9e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9e4:	6a 00                	push   0x0
c000f9e6:	6a 00                	push   0x0
c000f9e8:	52                   	push   edx
c000f9e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9ed:	ff d0                	call   eax
c000f9ef:	83 c4 10             	add    esp,0x10
c000f9f2:	e9 91 00 00 00       	jmp    c000fa88 <ACPI::detectPCI()+0x218>
c000f9f7:	90                   	nop
c000f9f8:	83 ec 0c             	sub    esp,0xc
c000f9fb:	68 9f 1b 02 c0       	push   0xc0021b9f
c000fa00:	e8 c0 11 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c000fa05:	83 c4 10             	add    esp,0x10
c000fa08:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fa0f:	83 ec 0c             	sub    esp,0xc
c000fa12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fa16:	e8 b8 80 ff ff       	call   c0007ad3 <malloc>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	89 c3                	mov    ebx,eax
c000fa20:	83 ec 0c             	sub    esp,0xc
c000fa23:	53                   	push   ebx
c000fa24:	e8 ff be 00 00       	call   c001b928 <IDE::IDE()>
c000fa29:	83 c4 10             	add    esp,0x10
c000fa2c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa34:	83 ec 08             	sub    esp,0x8
c000fa37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa3b:	50                   	push   eax
c000fa3c:	e8 c3 cc ff ff       	call   c000c704 <Device::addChild(Device*)>
c000fa41:	83 c4 10             	add    esp,0x10
c000fa44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa48:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fa52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa56:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fa5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa63:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fa6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa70:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa72:	83 c0 08             	add    eax,0x8
c000fa75:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa77:	6a 00                	push   0x0
c000fa79:	6a 00                	push   0x0
c000fa7b:	6a 00                	push   0x0
c000fa7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa81:	ff d0                	call   eax
c000fa83:	83 c4 10             	add    esp,0x10
c000fa86:	66 90                	xchg   ax,ax
c000fa88:	90                   	nop
c000fa89:	83 c4 28             	add    esp,0x28
c000fa8c:	5b                   	pop    ebx
c000fa8d:	c3                   	ret    
c000fa8e:	66 90                	xchg   ax,ax

c000fa90 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fa90:	83 ec 1c             	sub    esp,0x1c
c000fa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa97:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa9a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fa9e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000faa3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000faa8:	83 ec 08             	sub    esp,0x8
c000faab:	52                   	push   edx
c000faac:	50                   	push   eax
c000faad:	e8 e8 76 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fab2:	83 c4 10             	add    esp,0x10
c000fab5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fab9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fabe:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fac3:	83 ec 04             	sub    esp,0x4
c000fac6:	6a 01                	push   0x1
c000fac8:	52                   	push   edx
c000fac9:	50                   	push   eax
c000faca:	e8 e3 77 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000facf:	83 c4 10             	add    esp,0x10
c000fad2:	90                   	nop
c000fad3:	83 c4 1c             	add    esp,0x1c
c000fad6:	c3                   	ret    
c000fad7:	90                   	nop

c000fad8 <ACPI::sleep()>:
c000fad8:	83 ec 0c             	sub    esp,0xc
c000fadb:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fae0:	85 c0                	test   eax,eax
c000fae2:	74 08                	je     c000faec <ACPI::sleep()+0x14>
c000fae4:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fae9:	ff d0                	call   eax
c000faeb:	90                   	nop
c000faec:	90                   	nop
c000faed:	83 c4 0c             	add    esp,0xc
c000faf0:	c3                   	ret    
c000faf1:	90                   	nop
c000faf2:	66 90                	xchg   ax,ax

c000faf4 <ACPI::open(int, int, void*)>:
c000faf4:	55                   	push   ebp
c000faf5:	89 e5                	mov    ebp,esp
c000faf7:	53                   	push   ebx
c000faf8:	81 ec 74 01 00 00    	sub    esp,0x174
c000fafe:	83 ec 0c             	sub    esp,0xc
c000fb01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fb04:	e8 67 fd ff ff       	call   c000f870 <ACPI::detectPCI()>
c000fb09:	83 c4 10             	add    esp,0x10
c000fb0c:	83 ec 0c             	sub    esp,0xc
c000fb0f:	68 24 1b 02 c0       	push   0xc0021b24
c000fb14:	e8 ac 10 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c000fb19:	83 c4 10             	add    esp,0x10
c000fb1c:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb21:	8a 00                	mov    al,BYTE PTR [eax]
c000fb23:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fb26:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fb2a:	83 f8 01             	cmp    eax,0x1
c000fb2d:	75 15                	jne    c000fb44 <ACPI::open(int, int, void*)+0x50>
c000fb2f:	83 ec 0c             	sub    esp,0xc
c000fb32:	68 71 14 02 c0       	push   0xc0021471
c000fb37:	e8 6d 4c 00 00       	call   c00147a9 <Thr::loadKernelSymbolTable(char const*)>
c000fb3c:	83 c4 10             	add    esp,0x10
c000fb3f:	eb 33                	jmp    c000fb74 <ACPI::open(int, int, void*)+0x80>
c000fb41:	8d 76 00             	lea    esi,[esi+0x0]
c000fb44:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fb48:	3d bb 00 00 00       	cmp    eax,0xbb
c000fb4d:	75 15                	jne    c000fb64 <ACPI::open(int, int, void*)+0x70>
c000fb4f:	83 ec 0c             	sub    esp,0xc
c000fb52:	68 b4 1b 02 c0       	push   0xc0021bb4
c000fb57:	e8 4d 4c 00 00       	call   c00147a9 <Thr::loadKernelSymbolTable(char const*)>
c000fb5c:	83 c4 10             	add    esp,0x10
c000fb5f:	eb 13                	jmp    c000fb74 <ACPI::open(int, int, void*)+0x80>
c000fb61:	8d 76 00             	lea    esi,[esi+0x0]
c000fb64:	83 ec 0c             	sub    esp,0xc
c000fb67:	68 d2 1b 02 c0       	push   0xc0021bd2
c000fb6c:	e8 28 17 00 00       	call   c0011299 <KePanic(char const*)>
c000fb71:	83 c4 10             	add    esp,0x10
c000fb74:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fb78:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fb7f:	83 ec 0c             	sub    esp,0xc
c000fb82:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fb85:	e8 49 7f ff ff       	call   c0007ad3 <malloc>
c000fb8a:	83 c4 10             	add    esp,0x10
c000fb8d:	89 c3                	mov    ebx,eax
c000fb8f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fb94:	6a 01                	push   0x1
c000fb96:	50                   	push   eax
c000fb97:	68 ec 1b 02 c0       	push   0xc0021bec
c000fb9c:	53                   	push   ebx
c000fb9d:	e8 24 bc ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c000fba2:	83 c4 10             	add    esp,0x10
c000fba5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fba8:	83 ec 08             	sub    esp,0x8
c000fbab:	6a 01                	push   0x1
c000fbad:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbb0:	e8 ef bc ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c000fbb5:	83 c4 10             	add    esp,0x10
c000fbb8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fbbb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fbbf:	75 13                	jne    c000fbd4 <ACPI::open(int, int, void*)+0xe0>
c000fbc1:	83 ec 0c             	sub    esp,0xc
c000fbc4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbc7:	e8 36 bd ff ff       	call   c000b902 <File::close()>
c000fbcc:	83 c4 10             	add    esp,0x10
c000fbcf:	eb 07                	jmp    c000fbd8 <ACPI::open(int, int, void*)+0xe4>
c000fbd1:	8d 76 00             	lea    esi,[esi+0x0]
c000fbd4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fbd8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fbdc:	74 16                	je     c000fbf4 <ACPI::open(int, int, void*)+0x100>
c000fbde:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fbe1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbe3:	83 c0 08             	add    eax,0x8
c000fbe6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbe8:	83 ec 0c             	sub    esp,0xc
c000fbeb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbee:	ff d0                	call   eax
c000fbf0:	83 c4 10             	add    esp,0x10
c000fbf3:	90                   	nop
c000fbf4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fbf7:	83 f0 01             	xor    eax,0x1
c000fbfa:	0f b6 c0             	movzx  eax,al
c000fbfd:	85 c0                	test   eax,eax
c000fbff:	74 3b                	je     c000fc3c <ACPI::open(int, int, void*)+0x148>
c000fc01:	83 ec 0c             	sub    esp,0xc
c000fc04:	68 0a 1c 02 c0       	push   0xc0021c0a
c000fc09:	e8 b7 0f 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c000fc0e:	83 c4 10             	add    esp,0x10
c000fc11:	83 ec 04             	sub    esp,0x4
c000fc14:	6a 0c                	push   0xc
c000fc16:	68 25 1c 02 c0       	push   0xc0021c25
c000fc1b:	68 36 1c 02 c0       	push   0xc0021c36
c000fc20:	e8 03 3e 00 00       	call   c0013a28 <Reg::readIntWithDefault(char*, char*, int)>
c000fc25:	83 c4 10             	add    esp,0x10
c000fc28:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fc2b:	83 ec 0c             	sub    esp,0xc
c000fc2e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fc31:	e8 e4 9b ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fc36:	83 c4 10             	add    esp,0x10
c000fc39:	8d 76 00             	lea    esi,[esi+0x0]
c000fc3c:	83 ec 0c             	sub    esp,0xc
c000fc3f:	68 35 07 02 c0       	push   0xc0020735
c000fc44:	e8 7c 0f 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c000fc49:	83 c4 10             	add    esp,0x10
c000fc4c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc4f:	83 ec 08             	sub    esp,0x8
c000fc52:	6a 13                	push   0x13
c000fc54:	50                   	push   eax
c000fc55:	e8 c2 cd ff ff       	call   c000ca1c <getDevicesOfType(DeviceType)>
c000fc5a:	83 c4 0c             	add    esp,0xc
c000fc5d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc60:	83 ec 0c             	sub    esp,0xc
c000fc63:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc66:	50                   	push   eax
c000fc67:	e8 c4 fe 00 00       	call   c001fb30 <LinkedList<Device>::isEmpty()>
c000fc6c:	83 c4 10             	add    esp,0x10
c000fc6f:	83 f0 01             	xor    eax,0x1
c000fc72:	0f b6 c0             	movzx  eax,al
c000fc75:	85 c0                	test   eax,eax
c000fc77:	0f 84 1b 01 00 00    	je     c000fd98 <ACPI::open(int, int, void*)+0x2a4>
c000fc7d:	83 ec 0c             	sub    esp,0xc
c000fc80:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc83:	50                   	push   eax
c000fc84:	e8 c3 fe 00 00       	call   c001fb4c <LinkedList<Device>::getFirstElement()>
c000fc89:	83 c4 10             	add    esp,0x10
c000fc8c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fc8f:	83 ec 0c             	sub    esp,0xc
c000fc92:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc95:	50                   	push   eax
c000fc96:	e8 b9 fe 00 00       	call   c001fb54 <LinkedList<Device>::removeFirst()>
c000fc9b:	83 c4 10             	add    esp,0x10
c000fc9e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fca1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fca4:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fca7:	b8 24 00 00 00       	mov    eax,0x24
c000fcac:	83 e0 fc             	and    eax,0xfffffffc
c000fcaf:	89 c3                	mov    ebx,eax
c000fcb1:	b8 00 00 00 00       	mov    eax,0x0
c000fcb6:	66 90                	xchg   ax,ax
c000fcb8:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fcbf:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fcc6:	83 c0 04             	add    eax,0x4
c000fcc9:	39 d8                	cmp    eax,ebx
c000fccb:	72 eb                	jb     c000fcb8 <ACPI::open(int, int, void*)+0x1c4>
c000fccd:	83 ec 08             	sub    esp,0x8
c000fcd0:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fcd6:	50                   	push   eax
c000fcd7:	83 ec 24             	sub    esp,0x24
c000fcda:	89 e1                	mov    ecx,esp
c000fcdc:	b8 24 00 00 00       	mov    eax,0x24
c000fce1:	83 e0 fc             	and    eax,0xfffffffc
c000fce4:	89 c3                	mov    ebx,eax
c000fce6:	b8 00 00 00 00       	mov    eax,0x0
c000fceb:	90                   	nop
c000fcec:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fcf3:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fcf6:	83 c0 04             	add    eax,0x4
c000fcf9:	39 d8                	cmp    eax,ebx
c000fcfb:	72 ef                	jb     c000fcec <ACPI::open(int, int, void*)+0x1f8>
c000fcfd:	e8 68 b5 00 00       	call   c001b26a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fd02:	83 c4 30             	add    esp,0x30
c000fd05:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fd08:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fd0c:	0f 84 4e ff ff ff    	je     c000fc60 <ACPI::open(int, int, void*)+0x16c>
c000fd12:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fd19:	83 ec 0c             	sub    esp,0xc
c000fd1c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fd1f:	e8 af 7d ff ff       	call   c0007ad3 <malloc>
c000fd24:	83 c4 10             	add    esp,0x10
c000fd27:	89 c3                	mov    ebx,eax
c000fd29:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd2e:	6a 01                	push   0x1
c000fd30:	50                   	push   eax
c000fd31:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fd34:	53                   	push   ebx
c000fd35:	e8 8c ba ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c000fd3a:	83 c4 10             	add    esp,0x10
c000fd3d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fd40:	83 ec 0c             	sub    esp,0xc
c000fd43:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fd46:	e8 1d be ff ff       	call   c000bb68 <File::exists()>
c000fd4b:	83 c4 10             	add    esp,0x10
c000fd4e:	0f b6 c0             	movzx  eax,al
c000fd51:	85 c0                	test   eax,eax
c000fd53:	74 1f                	je     c000fd74 <ACPI::open(int, int, void*)+0x280>
c000fd55:	83 ec 08             	sub    esp,0x8
c000fd58:	6a 01                	push   0x1
c000fd5a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fd5d:	e8 cc 54 00 00       	call   c001522e <Thr::loadDLL(char const*, bool)>
c000fd62:	83 c4 10             	add    esp,0x10
c000fd65:	83 ec 08             	sub    esp,0x8
c000fd68:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fd6b:	50                   	push   eax
c000fd6c:	e8 fc 56 00 00       	call   c001546d <Thr::executeDLL(unsigned long, void*)>
c000fd71:	83 c4 10             	add    esp,0x10
c000fd74:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fd78:	0f 84 e2 fe ff ff    	je     c000fc60 <ACPI::open(int, int, void*)+0x16c>
c000fd7e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fd81:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd83:	83 c0 08             	add    eax,0x8
c000fd86:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd88:	83 ec 0c             	sub    esp,0xc
c000fd8b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fd8e:	ff d0                	call   eax
c000fd90:	83 c4 10             	add    esp,0x10
c000fd93:	e9 c8 fe ff ff       	jmp    c000fc60 <ACPI::open(int, int, void*)+0x16c>
c000fd98:	83 ec 0c             	sub    esp,0xc
c000fd9b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fd9e:	50                   	push   eax
c000fd9f:	e8 88 fd 00 00       	call   c001fb2c <LinkedList<Device>::~LinkedList()>
c000fda4:	83 c4 10             	add    esp,0x10
c000fda7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fdad:	83 ec 08             	sub    esp,0x8
c000fdb0:	6a 01                	push   0x1
c000fdb2:	68 3d 1c 02 c0       	push   0xc0021c3d
c000fdb7:	e8 72 54 00 00       	call   c001522e <Thr::loadDLL(char const*, bool)>
c000fdbc:	83 c4 10             	add    esp,0x10
c000fdbf:	83 ec 08             	sub    esp,0x8
c000fdc2:	53                   	push   ebx
c000fdc3:	50                   	push   eax
c000fdc4:	e8 a4 56 00 00       	call   c001546d <Thr::executeDLL(unsigned long, void*)>
c000fdc9:	83 c4 10             	add    esp,0x10
c000fdcc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fdd1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fdd7:	83 e0 04             	and    eax,0x4
c000fdda:	0f b6 c0             	movzx  eax,al
c000fddd:	85 c0                	test   eax,eax
c000fddf:	0f 84 df 00 00 00    	je     c000fec4 <ACPI::open(int, int, void*)+0x3d0>
c000fde5:	83 ec 0c             	sub    esp,0xc
c000fde8:	68 5a 1c 02 c0       	push   0xc0021c5a
c000fded:	e8 d3 0d 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c000fdf2:	83 c4 10             	add    esp,0x10
c000fdf5:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fdfc:	83 ec 0c             	sub    esp,0xc
c000fdff:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fe02:	e8 cc 7c ff ff       	call   c0007ad3 <malloc>
c000fe07:	83 c4 10             	add    esp,0x10
c000fe0a:	89 c3                	mov    ebx,eax
c000fe0c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fe11:	6a 01                	push   0x1
c000fe13:	50                   	push   eax
c000fe14:	68 77 1c 02 c0       	push   0xc0021c77
c000fe19:	53                   	push   ebx
c000fe1a:	e8 a7 b9 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c000fe1f:	83 c4 10             	add    esp,0x10
c000fe22:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fe25:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe29:	74 19                	je     c000fe44 <ACPI::open(int, int, void*)+0x350>
c000fe2b:	83 ec 0c             	sub    esp,0xc
c000fe2e:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fe31:	e8 32 bd ff ff       	call   c000bb68 <File::exists()>
c000fe36:	83 c4 10             	add    esp,0x10
c000fe39:	0f b6 c0             	movzx  eax,al
c000fe3c:	85 c0                	test   eax,eax
c000fe3e:	74 04                	je     c000fe44 <ACPI::open(int, int, void*)+0x350>
c000fe40:	b0 01                	mov    al,0x1
c000fe42:	eb 04                	jmp    c000fe48 <ACPI::open(int, int, void*)+0x354>
c000fe44:	b0 00                	mov    al,0x0
c000fe46:	66 90                	xchg   ax,ax
c000fe48:	0f b6 c0             	movzx  eax,al
c000fe4b:	85 c0                	test   eax,eax
c000fe4d:	74 21                	je     c000fe70 <ACPI::open(int, int, void*)+0x37c>
c000fe4f:	83 ec 08             	sub    esp,0x8
c000fe52:	6a 01                	push   0x1
c000fe54:	68 77 1c 02 c0       	push   0xc0021c77
c000fe59:	e8 d0 53 00 00       	call   c001522e <Thr::loadDLL(char const*, bool)>
c000fe5e:	83 c4 10             	add    esp,0x10
c000fe61:	83 ec 08             	sub    esp,0x8
c000fe64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe67:	50                   	push   eax
c000fe68:	e8 00 56 00 00       	call   c001546d <Thr::executeDLL(unsigned long, void*)>
c000fe6d:	83 c4 10             	add    esp,0x10
c000fe70:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe74:	74 1e                	je     c000fe94 <ACPI::open(int, int, void*)+0x3a0>
c000fe76:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe7a:	74 18                	je     c000fe94 <ACPI::open(int, int, void*)+0x3a0>
c000fe7c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000fe7f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe81:	83 c0 08             	add    eax,0x8
c000fe84:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe86:	83 ec 0c             	sub    esp,0xc
c000fe89:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fe8c:	ff d0                	call   eax
c000fe8e:	83 c4 10             	add    esp,0x10
c000fe91:	8d 76 00             	lea    esi,[esi+0x0]
c000fe94:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	68 94 1c 02 c0       	push   0xc0021c94
c000fea1:	50                   	push   eax
c000fea2:	e8 6d f2 ff ff       	call   c000f114 <findDataTable(unsigned char*, char*)>
c000fea7:	83 c4 10             	add    esp,0x10
c000feaa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000fead:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000feb1:	74 11                	je     c000fec4 <ACPI::open(int, int, void*)+0x3d0>
c000feb3:	83 ec 08             	sub    esp,0x8
c000feb6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000feb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000febc:	e8 cf fb ff ff       	call   c000fa90 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fec1:	83 c4 10             	add    esp,0x10
c000fec4:	b8 00 00 00 00       	mov    eax,0x0
c000fec9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fecc:	c9                   	leave  
c000fecd:	c3                   	ret    

c000fece <CPU::close(int, int, void*)>:
c000fece:	31 c0                	xor    eax,eax
c000fed0:	c3                   	ret    
c000fed1:	90                   	nop

c000fed2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fed2:	60                   	pusha  
c000fed3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fed7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fedb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fedf:	9c                   	pushf  
c000fee0:	fa                   	cli    
c000fee1:	0f 09                	wbinvd 
c000fee3:	0f 30                	wrmsr  
c000fee5:	9d                   	popf   
c000fee6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000feea:	89 02                	mov    DWORD PTR [edx],eax
c000feec:	61                   	popa   
c000feed:	c3                   	ret    

c000feee <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000feee:	60                   	pusha  
c000feef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fef3:	9c                   	pushf  
c000fef4:	fa                   	cli    
c000fef5:	0f 09                	wbinvd 
c000fef7:	31 c0                	xor    eax,eax
c000fef9:	31 d2                	xor    edx,edx
c000fefb:	0f 32                	rdmsr  
c000fefd:	9d                   	popf   
c000fefe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff02:	89 02                	mov    DWORD PTR [edx],eax
c000ff04:	61                   	popa   
c000ff05:	c3                   	ret    

c000ff06 <CPU::AMD_K6_writeback(int, int, int)>:
c000ff06:	56                   	push   esi
c000ff07:	53                   	push   ebx
c000ff08:	83 ec 10             	sub    esp,0x10
c000ff0b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ff10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff14:	75 5d                	jne    c000ff73 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff16:	83 f8 08             	cmp    eax,0x8
c000ff19:	75 09                	jne    c000ff24 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ff1b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ff20:	7e 13                	jle    c000ff35 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff22:	eb 30                	jmp    c000ff54 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff24:	83 f8 06             	cmp    eax,0x6
c000ff27:	7c 4a                	jl     c000ff73 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff29:	83 f8 07             	cmp    eax,0x7
c000ff2c:	7e 07                	jle    c000ff35 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff2e:	83 f8 09             	cmp    eax,0x9
c000ff31:	74 21                	je     c000ff54 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff33:	eb 3e                	jmp    c000ff73 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff35:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000ff3b:	89 e6                	mov    esi,esp
c000ff3d:	56                   	push   esi
c000ff3e:	68 82 00 00 c0       	push   0xc0000082
c000ff43:	e8 a6 ff ff ff       	call   c000feee <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff48:	c1 eb 15             	shr    ebx,0x15
c000ff4b:	56                   	push   esi
c000ff4c:	83 e3 7e             	and    ebx,0x7e
c000ff4f:	6a 00                	push   0x0
c000ff51:	53                   	push   ebx
c000ff52:	eb 12                	jmp    c000ff66 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ff54:	89 e3                	mov    ebx,esp
c000ff56:	53                   	push   ebx
c000ff57:	68 82 00 00 c0       	push   0xc0000082
c000ff5c:	e8 8d ff ff ff       	call   c000feee <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff61:	53                   	push   ebx
c000ff62:	6a 00                	push   0x0
c000ff64:	6a 00                	push   0x0
c000ff66:	68 82 00 00 c0       	push   0xc0000082
c000ff6b:	e8 62 ff ff ff       	call   c000fed2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ff70:	83 c4 18             	add    esp,0x18
c000ff73:	83 c4 10             	add    esp,0x10
c000ff76:	5b                   	pop    ebx
c000ff77:	5e                   	pop    esi
c000ff78:	c3                   	ret    
c000ff79:	90                   	nop

c000ff7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ff7a:	55                   	push   ebp
c000ff7b:	57                   	push   edi
c000ff7c:	56                   	push   esi
c000ff7d:	53                   	push   ebx
c000ff7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff82:	39 05 58 32 02 c0    	cmp    DWORD PTR ds:0xc0023258,eax
c000ff88:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ff8c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff90:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ff94:	75 23                	jne    c000ffb9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ff96:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000ff9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff9f:	89 06                	mov    DWORD PTR [esi],eax
c000ffa1:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000ffa6:	89 07                	mov    DWORD PTR [edi],eax
c000ffa8:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000ffad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ffb0:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c000ffb5:	89 02                	mov    DWORD PTR [edx],eax
c000ffb7:	eb 3f                	jmp    c000fff8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ffb9:	31 c9                	xor    ecx,ecx
c000ffbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffbf:	0f a2                	cpuid  
c000ffc1:	89 06                	mov    DWORD PTR [esi],eax
c000ffc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffc7:	89 1f                	mov    DWORD PTR [edi],ebx
c000ffc9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ffcc:	89 10                	mov    DWORD PTR [eax],edx
c000ffce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffd2:	a3 58 32 02 c0       	mov    ds:0xc0023258,eax
c000ffd7:	8b 06                	mov    eax,DWORD PTR [esi]
c000ffd9:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c000ffde:	8b 07                	mov    eax,DWORD PTR [edi]
c000ffe0:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c000ffe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ffe8:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c000ffed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fff1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fff3:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c000fff8:	5b                   	pop    ebx
c000fff9:	5e                   	pop    esi
c000fffa:	5f                   	pop    edi
c000fffb:	5d                   	pop    ebp
c000fffc:	c3                   	ret    
c000fffd:	90                   	nop

c000fffe <CPU::cpuidCheckEDX(unsigned int)>:
c000fffe:	83 ec 10             	sub    esp,0x10
c0010001:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010005:	50                   	push   eax
c0010006:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001000a:	50                   	push   eax
c001000b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001000f:	50                   	push   eax
c0010010:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010014:	50                   	push   eax
c0010015:	6a 01                	push   0x1
c0010017:	e8 5e ff ff ff       	call   c000ff7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001001c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010020:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010024:	0f 95 c0             	setne  al
c0010027:	83 c4 24             	add    esp,0x24
c001002a:	c3                   	ret    
c001002b:	90                   	nop

c001002c <CPU::cpuidCheckECX(unsigned int)>:
c001002c:	83 ec 10             	sub    esp,0x10
c001002f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010033:	50                   	push   eax
c0010034:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010038:	50                   	push   eax
c0010039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001003d:	50                   	push   eax
c001003e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010042:	50                   	push   eax
c0010043:	6a 01                	push   0x1
c0010045:	e8 30 ff ff ff       	call   c000ff7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001004a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001004e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010052:	0f 95 c0             	setne  al
c0010055:	83 c4 24             	add    esp,0x24
c0010058:	c3                   	ret    
c0010059:	90                   	nop

c001005a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001005a:	83 ec 10             	sub    esp,0x10
c001005d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010061:	50                   	push   eax
c0010062:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010066:	50                   	push   eax
c0010067:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001006b:	50                   	push   eax
c001006c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010070:	50                   	push   eax
c0010071:	6a 07                	push   0x7
c0010073:	e8 02 ff ff ff       	call   c000ff7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010078:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001007c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010080:	0f 95 c0             	setne  al
c0010083:	83 c4 24             	add    esp,0x24
c0010086:	c3                   	ret    
c0010087:	90                   	nop

c0010088 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010088:	83 ec 10             	sub    esp,0x10
c001008b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001008f:	50                   	push   eax
c0010090:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010094:	50                   	push   eax
c0010095:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010099:	50                   	push   eax
c001009a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001009e:	50                   	push   eax
c001009f:	6a 07                	push   0x7
c00100a1:	e8 d4 fe ff ff       	call   c000ff7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100aa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00100ae:	0f 95 c0             	setne  al
c00100b1:	83 c4 24             	add    esp,0x24
c00100b4:	c3                   	ret    
c00100b5:	90                   	nop

c00100b6 <CPU::CPU()>:
c00100b6:	83 ec 0c             	sub    esp,0xc
c00100b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100bd:	83 ec 08             	sub    esp,0x8
c00100c0:	68 b9 1d 02 c0       	push   0xc0021db9
c00100c5:	50                   	push   eax
c00100c6:	e8 d1 c7 ff ff       	call   c000c89c <Device::Device(char const*)>
c00100cb:	83 c4 10             	add    esp,0x10
c00100ce:	ba 4c 1e 02 c0       	mov    edx,0xc0021e4c
c00100d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d7:	89 10                	mov    DWORD PTR [eax],edx
c00100d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100dd:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00100e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100eb:	05 78 01 00 00       	add    eax,0x178
c00100f0:	83 ec 0c             	sub    esp,0xc
c00100f3:	50                   	push   eax
c00100f4:	e8 83 72 ff ff       	call   c000737c <GDT::GDT()>
c00100f9:	83 c4 10             	add    esp,0x10
c00100fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010100:	05 7c 09 00 00       	add    eax,0x97c
c0010105:	83 ec 0c             	sub    esp,0xc
c0010108:	50                   	push   eax
c0010109:	e8 be 74 ff ff       	call   c00075cc <IDT::IDT()>
c001010e:	83 c4 10             	add    esp,0x10
c0010111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010115:	05 7c 11 00 00       	add    eax,0x117c
c001011a:	83 ec 0c             	sub    esp,0xc
c001011d:	50                   	push   eax
c001011e:	e8 09 8e ff ff       	call   c0008f2c <TSS::TSS()>
c0010123:	83 c4 10             	add    esp,0x10
c0010126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001012a:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010135:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001013f:	90                   	nop
c0010140:	83 c4 0c             	add    esp,0xc
c0010143:	c3                   	ret    

c0010144 <CPU::displayFeatures()>:
c0010144:	c3                   	ret    
c0010145:	90                   	nop

c0010146 <CPU::detectFeatures()>:
c0010146:	55                   	push   ebp
c0010147:	57                   	push   edi
c0010148:	56                   	push   esi
c0010149:	53                   	push   ebx
c001014a:	83 ec 30             	sub    esp,0x30
c001014d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010151:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001015b:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010161:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010168:	6a 0d                	push   0xd
c001016a:	6a 00                	push   0x0
c001016c:	55                   	push   ebp
c001016d:	e8 7e 03 ff ff       	call   c00004f0 <memset>
c0010172:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010177:	83 c4 10             	add    esp,0x10
c001017a:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010181:	0f 84 db 05 00 00    	je     c0010762 <CPU::detectFeatures()+0x61c>
c0010187:	83 ec 0c             	sub    esp,0xc
c001018a:	89 ef                	mov    edi,ebp
c001018c:	6a 10                	push   0x10
c001018e:	e8 6b fe ff ff       	call   c000fffe <CPU::cpuidCheckEDX(unsigned int)>
c0010193:	83 e0 01             	and    eax,0x1
c0010196:	8d 14 00             	lea    edx,[eax+eax*1]
c0010199:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001019f:	83 e0 fd             	and    eax,0xfffffffd
c00101a2:	09 d0                	or     eax,edx
c00101a4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101aa:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00101b1:	e8 48 fe ff ff       	call   c000fffe <CPU::cpuidCheckEDX(unsigned int)>
c00101b6:	83 e0 01             	and    eax,0x1
c00101b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101c0:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101c6:	83 e0 fb             	and    eax,0xfffffffb
c00101c9:	09 d0                	or     eax,edx
c00101cb:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101d1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00101d8:	e8 21 fe ff ff       	call   c000fffe <CPU::cpuidCheckEDX(unsigned int)>
c00101dd:	83 e0 01             	and    eax,0x1
c00101e0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00101e7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101ed:	83 e0 f7             	and    eax,0xfffffff7
c00101f0:	09 d0                	or     eax,edx
c00101f2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101f8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00101ff:	e8 fa fd ff ff       	call   c000fffe <CPU::cpuidCheckEDX(unsigned int)>
c0010204:	83 e0 01             	and    eax,0x1
c0010207:	c1 e0 04             	shl    eax,0x4
c001020a:	89 c2                	mov    edx,eax
c001020c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010212:	83 e0 ef             	and    eax,0xffffffef
c0010215:	09 d0                	or     eax,edx
c0010217:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001021d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010224:	e8 d5 fd ff ff       	call   c000fffe <CPU::cpuidCheckEDX(unsigned int)>
c0010229:	83 e0 01             	and    eax,0x1
c001022c:	c1 e0 05             	shl    eax,0x5
c001022f:	89 c2                	mov    edx,eax
c0010231:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010237:	83 e0 df             	and    eax,0xffffffdf
c001023a:	09 d0                	or     eax,edx
c001023c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010242:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010249:	e8 b0 fd ff ff       	call   c000fffe <CPU::cpuidCheckEDX(unsigned int)>
c001024e:	83 e0 01             	and    eax,0x1
c0010251:	8d 14 00             	lea    edx,[eax+eax*1]
c0010254:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001025a:	83 e0 fd             	and    eax,0xfffffffd
c001025d:	09 d0                	or     eax,edx
c001025f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010265:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001026c:	e8 8d fd ff ff       	call   c000fffe <CPU::cpuidCheckEDX(unsigned int)>
c0010271:	83 e0 01             	and    eax,0x1
c0010274:	c1 e0 06             	shl    eax,0x6
c0010277:	89 c2                	mov    edx,eax
c0010279:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001027f:	83 e0 bf             	and    eax,0xffffffbf
c0010282:	09 d0                	or     eax,edx
c0010284:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001028a:	58                   	pop    eax
c001028b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001028f:	50                   	push   eax
c0010290:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010294:	50                   	push   eax
c0010295:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010299:	56                   	push   esi
c001029a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001029e:	50                   	push   eax
c001029f:	6a 00                	push   0x0
c00102a1:	e8 d4 fc ff ff       	call   c000ff7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102a6:	b8 04 00 00 00       	mov    eax,0x4
c00102ab:	89 c1                	mov    ecx,eax
c00102ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102af:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00102b5:	89 c1                	mov    ecx,eax
c00102b7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00102bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102bd:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00102c3:	89 c1                	mov    ecx,eax
c00102c5:	8d 74 24 38          	lea    esi,[esp+0x38]
c00102c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102cb:	83 c4 18             	add    esp,0x18
c00102ce:	68 c8 1c 02 c0       	push   0xc0021cc8
c00102d3:	55                   	push   ebp
c00102d4:	e8 a7 04 ff ff       	call   c0000780 <strcmp>
c00102d9:	83 c4 10             	add    esp,0x10
c00102dc:	85 c0                	test   eax,eax
c00102de:	75 0f                	jne    c00102ef <CPU::detectFeatures()+0x1a9>
c00102e0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00102ea:	e9 22 02 00 00       	jmp    c0010511 <CPU::detectFeatures()+0x3cb>
c00102ef:	50                   	push   eax
c00102f0:	50                   	push   eax
c00102f1:	68 d5 1c 02 c0       	push   0xc0021cd5
c00102f6:	55                   	push   ebp
c00102f7:	e8 84 04 ff ff       	call   c0000780 <strcmp>
c00102fc:	83 c4 10             	add    esp,0x10
c00102ff:	85 c0                	test   eax,eax
c0010301:	74 dd                	je     c00102e0 <CPU::detectFeatures()+0x19a>
c0010303:	50                   	push   eax
c0010304:	50                   	push   eax
c0010305:	68 e2 1c 02 c0       	push   0xc0021ce2
c001030a:	55                   	push   ebp
c001030b:	e8 70 04 ff ff       	call   c0000780 <strcmp>
c0010310:	83 c4 10             	add    esp,0x10
c0010313:	85 c0                	test   eax,eax
c0010315:	74 2a                	je     c0010341 <CPU::detectFeatures()+0x1fb>
c0010317:	50                   	push   eax
c0010318:	50                   	push   eax
c0010319:	68 ef 1c 02 c0       	push   0xc0021cef
c001031e:	55                   	push   ebp
c001031f:	e8 5c 04 ff ff       	call   c0000780 <strcmp>
c0010324:	83 c4 10             	add    esp,0x10
c0010327:	85 c0                	test   eax,eax
c0010329:	74 16                	je     c0010341 <CPU::detectFeatures()+0x1fb>
c001032b:	50                   	push   eax
c001032c:	50                   	push   eax
c001032d:	68 fc 1c 02 c0       	push   0xc0021cfc
c0010332:	55                   	push   ebp
c0010333:	e8 48 04 ff ff       	call   c0000780 <strcmp>
c0010338:	83 c4 10             	add    esp,0x10
c001033b:	85 c0                	test   eax,eax
c001033d:	74 48                	je     c0010387 <CPU::detectFeatures()+0x241>
c001033f:	eb 0f                	jmp    c0010350 <CPU::detectFeatures()+0x20a>
c0010341:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001034b:	e9 c1 01 00 00       	jmp    c0010511 <CPU::detectFeatures()+0x3cb>
c0010350:	50                   	push   eax
c0010351:	50                   	push   eax
c0010352:	68 09 1d 02 c0       	push   0xc0021d09
c0010357:	55                   	push   ebp
c0010358:	e8 23 04 ff ff       	call   c0000780 <strcmp>
c001035d:	83 c4 10             	add    esp,0x10
c0010360:	85 c0                	test   eax,eax
c0010362:	74 23                	je     c0010387 <CPU::detectFeatures()+0x241>
c0010364:	57                   	push   edi
c0010365:	57                   	push   edi
c0010366:	68 16 1d 02 c0       	push   0xc0021d16
c001036b:	55                   	push   ebp
c001036c:	e8 0f 04 ff ff       	call   c0000780 <strcmp>
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	85 c0                	test   eax,eax
c0010376:	75 1e                	jne    c0010396 <CPU::detectFeatures()+0x250>
c0010378:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010382:	e9 8a 01 00 00       	jmp    c0010511 <CPU::detectFeatures()+0x3cb>
c0010387:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010391:	e9 7b 01 00 00       	jmp    c0010511 <CPU::detectFeatures()+0x3cb>
c0010396:	56                   	push   esi
c0010397:	56                   	push   esi
c0010398:	68 23 1d 02 c0       	push   0xc0021d23
c001039d:	55                   	push   ebp
c001039e:	e8 dd 03 ff ff       	call   c0000780 <strcmp>
c00103a3:	83 c4 10             	add    esp,0x10
c00103a6:	85 c0                	test   eax,eax
c00103a8:	75 0f                	jne    c00103b9 <CPU::detectFeatures()+0x273>
c00103aa:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00103b4:	e9 58 01 00 00       	jmp    c0010511 <CPU::detectFeatures()+0x3cb>
c00103b9:	51                   	push   ecx
c00103ba:	51                   	push   ecx
c00103bb:	68 e2 1c 02 c0       	push   0xc0021ce2
c00103c0:	55                   	push   ebp
c00103c1:	e8 ba 03 ff ff       	call   c0000780 <strcmp>
c00103c6:	83 c4 10             	add    esp,0x10
c00103c9:	85 c0                	test   eax,eax
c00103cb:	75 0f                	jne    c00103dc <CPU::detectFeatures()+0x296>
c00103cd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00103d7:	e9 35 01 00 00       	jmp    c0010511 <CPU::detectFeatures()+0x3cb>
c00103dc:	52                   	push   edx
c00103dd:	52                   	push   edx
c00103de:	68 30 1d 02 c0       	push   0xc0021d30
c00103e3:	55                   	push   ebp
c00103e4:	e8 97 03 ff ff       	call   c0000780 <strcmp>
c00103e9:	83 c4 10             	add    esp,0x10
c00103ec:	85 c0                	test   eax,eax
c00103ee:	75 0f                	jne    c00103ff <CPU::detectFeatures()+0x2b9>
c00103f0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00103fa:	e9 12 01 00 00       	jmp    c0010511 <CPU::detectFeatures()+0x3cb>
c00103ff:	50                   	push   eax
c0010400:	50                   	push   eax
c0010401:	68 3d 1d 02 c0       	push   0xc0021d3d
c0010406:	55                   	push   ebp
c0010407:	e8 74 03 ff ff       	call   c0000780 <strcmp>
c001040c:	83 c4 10             	add    esp,0x10
c001040f:	85 c0                	test   eax,eax
c0010411:	75 0f                	jne    c0010422 <CPU::detectFeatures()+0x2dc>
c0010413:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001041d:	e9 ef 00 00 00       	jmp    c0010511 <CPU::detectFeatures()+0x3cb>
c0010422:	50                   	push   eax
c0010423:	50                   	push   eax
c0010424:	68 4a 1d 02 c0       	push   0xc0021d4a
c0010429:	55                   	push   ebp
c001042a:	e8 51 03 ff ff       	call   c0000780 <strcmp>
c001042f:	83 c4 10             	add    esp,0x10
c0010432:	85 c0                	test   eax,eax
c0010434:	75 0f                	jne    c0010445 <CPU::detectFeatures()+0x2ff>
c0010436:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010440:	e9 cc 00 00 00       	jmp    c0010511 <CPU::detectFeatures()+0x3cb>
c0010445:	50                   	push   eax
c0010446:	50                   	push   eax
c0010447:	68 57 1d 02 c0       	push   0xc0021d57
c001044c:	55                   	push   ebp
c001044d:	e8 2e 03 ff ff       	call   c0000780 <strcmp>
c0010452:	83 c4 10             	add    esp,0x10
c0010455:	85 c0                	test   eax,eax
c0010457:	75 0f                	jne    c0010468 <CPU::detectFeatures()+0x322>
c0010459:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010463:	e9 a9 00 00 00       	jmp    c0010511 <CPU::detectFeatures()+0x3cb>
c0010468:	50                   	push   eax
c0010469:	50                   	push   eax
c001046a:	68 64 1d 02 c0       	push   0xc0021d64
c001046f:	55                   	push   ebp
c0010470:	e8 0b 03 ff ff       	call   c0000780 <strcmp>
c0010475:	83 c4 10             	add    esp,0x10
c0010478:	85 c0                	test   eax,eax
c001047a:	75 0f                	jne    c001048b <CPU::detectFeatures()+0x345>
c001047c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010486:	e9 86 00 00 00       	jmp    c0010511 <CPU::detectFeatures()+0x3cb>
c001048b:	50                   	push   eax
c001048c:	50                   	push   eax
c001048d:	68 71 1d 02 c0       	push   0xc0021d71
c0010492:	55                   	push   ebp
c0010493:	e8 e8 02 ff ff       	call   c0000780 <strcmp>
c0010498:	83 c4 10             	add    esp,0x10
c001049b:	85 c0                	test   eax,eax
c001049d:	75 0c                	jne    c00104ab <CPU::detectFeatures()+0x365>
c001049f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00104a9:	eb 66                	jmp    c0010511 <CPU::detectFeatures()+0x3cb>
c00104ab:	50                   	push   eax
c00104ac:	50                   	push   eax
c00104ad:	68 7e 1d 02 c0       	push   0xc0021d7e
c00104b2:	55                   	push   ebp
c00104b3:	e8 c8 02 ff ff       	call   c0000780 <strcmp>
c00104b8:	83 c4 10             	add    esp,0x10
c00104bb:	85 c0                	test   eax,eax
c00104bd:	75 0c                	jne    c00104cb <CPU::detectFeatures()+0x385>
c00104bf:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00104c9:	eb 46                	jmp    c0010511 <CPU::detectFeatures()+0x3cb>
c00104cb:	57                   	push   edi
c00104cc:	57                   	push   edi
c00104cd:	68 8b 1d 02 c0       	push   0xc0021d8b
c00104d2:	55                   	push   ebp
c00104d3:	e8 a8 02 ff ff       	call   c0000780 <strcmp>
c00104d8:	83 c4 10             	add    esp,0x10
c00104db:	85 c0                	test   eax,eax
c00104dd:	74 e0                	je     c00104bf <CPU::detectFeatures()+0x379>
c00104df:	56                   	push   esi
c00104e0:	56                   	push   esi
c00104e1:	68 98 1d 02 c0       	push   0xc0021d98
c00104e6:	55                   	push   ebp
c00104e7:	e8 94 02 ff ff       	call   c0000780 <strcmp>
c00104ec:	83 c4 10             	add    esp,0x10
c00104ef:	85 c0                	test   eax,eax
c00104f1:	74 cc                	je     c00104bf <CPU::detectFeatures()+0x379>
c00104f3:	51                   	push   ecx
c00104f4:	51                   	push   ecx
c00104f5:	68 a5 1d 02 c0       	push   0xc0021da5
c00104fa:	55                   	push   ebp
c00104fb:	e8 80 02 ff ff       	call   c0000780 <strcmp>
c0010500:	83 c4 10             	add    esp,0x10
c0010503:	85 c0                	test   eax,eax
c0010505:	74 b8                	je     c00104bf <CPU::detectFeatures()+0x379>
c0010507:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010511:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010516:	0f 86 be 00 00 00    	jbe    c00105da <CPU::detectFeatures()+0x494>
c001051c:	83 ec 0c             	sub    esp,0xc
c001051f:	68 80 00 00 00       	push   0x80
c0010524:	e8 31 fb ff ff       	call   c001005a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010529:	83 e0 01             	and    eax,0x1
c001052c:	c1 e0 06             	shl    eax,0x6
c001052f:	89 c2                	mov    edx,eax
c0010531:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010537:	83 e0 bf             	and    eax,0xffffffbf
c001053a:	09 d0                	or     eax,edx
c001053c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010542:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010549:	e8 0c fb ff ff       	call   c001005a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001054e:	83 e0 01             	and    eax,0x1
c0010551:	c1 e0 04             	shl    eax,0x4
c0010554:	89 c2                	mov    edx,eax
c0010556:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001055c:	83 e0 ef             	and    eax,0xffffffef
c001055f:	09 d0                	or     eax,edx
c0010561:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010567:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001056e:	e8 e7 fa ff ff       	call   c001005a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010573:	89 c2                	mov    edx,eax
c0010575:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001057b:	c1 e2 07             	shl    edx,0x7
c001057e:	83 e0 7f             	and    eax,0x7f
c0010581:	09 d0                	or     eax,edx
c0010583:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010589:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010590:	e8 f3 fa ff ff       	call   c0010088 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010595:	83 e0 01             	and    eax,0x1
c0010598:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001059f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105a5:	83 e0 f7             	and    eax,0xfffffff7
c00105a8:	09 d0                	or     eax,edx
c00105aa:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105b0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00105b7:	e8 cc fa ff ff       	call   c0010088 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00105bc:	83 c4 10             	add    esp,0x10
c00105bf:	83 e0 01             	and    eax,0x1
c00105c2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00105c9:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00105cf:	83 e0 fb             	and    eax,0xfffffffb
c00105d2:	09 d0                	or     eax,edx
c00105d4:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00105da:	83 ec 0c             	sub    esp,0xc
c00105dd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105e1:	50                   	push   eax
c00105e2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105e6:	50                   	push   eax
c00105e7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00105eb:	57                   	push   edi
c00105ec:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105f0:	56                   	push   esi
c00105f1:	6a 01                	push   0x1
c00105f3:	e8 82 f9 ff ff       	call   c000ff7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00105fc:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010602:	89 c1                	mov    ecx,eax
c0010604:	83 e1 0f             	and    ecx,0xf
c0010607:	83 e2 f0             	and    edx,0xfffffff0
c001060a:	09 ca                	or     edx,ecx
c001060c:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010612:	89 c2                	mov    edx,eax
c0010614:	c1 ea 04             	shr    edx,0x4
c0010617:	83 e2 0f             	and    edx,0xf
c001061a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001061e:	89 d1                	mov    ecx,edx
c0010620:	83 c4 20             	add    esp,0x20
c0010623:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010629:	c1 e1 06             	shl    ecx,0x6
c001062c:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010632:	09 ca                	or     edx,ecx
c0010634:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001063b:	89 c2                	mov    edx,eax
c001063d:	c1 ea 08             	shr    edx,0x8
c0010640:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010646:	83 e2 0f             	and    edx,0xf
c0010649:	89 d5                	mov    ebp,edx
c001064b:	83 e5 03             	and    ebp,0x3
c001064e:	c1 e5 06             	shl    ebp,0x6
c0010651:	83 e1 3f             	and    ecx,0x3f
c0010654:	09 e9                	or     ecx,ebp
c0010656:	89 d5                	mov    ebp,edx
c0010658:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001065e:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010664:	c1 ed 02             	shr    ebp,0x2
c0010667:	83 e1 c0             	and    ecx,0xffffffc0
c001066a:	09 e9                	or     ecx,ebp
c001066c:	89 c5                	mov    ebp,eax
c001066e:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010674:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001067a:	c1 ed 08             	shr    ebp,0x8
c001067d:	83 e5 30             	and    ebp,0x30
c0010680:	83 e1 cf             	and    ecx,0xffffffcf
c0010683:	09 e9                	or     ecx,ebp
c0010685:	83 fa 06             	cmp    edx,0x6
c0010688:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001068e:	74 05                	je     c0010695 <CPU::detectFeatures()+0x54f>
c0010690:	83 fa 0f             	cmp    edx,0xf
c0010693:	75 64                	jne    c00106f9 <CPU::detectFeatures()+0x5b3>
c0010695:	89 c1                	mov    ecx,eax
c0010697:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001069d:	c1 e9 10             	shr    ecx,0x10
c00106a0:	c1 e1 04             	shl    ecx,0x4
c00106a3:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00106a7:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00106ad:	0f b6 c9             	movzx  ecx,cl
c00106b0:	c1 e1 06             	shl    ecx,0x6
c00106b3:	09 e9                	or     ecx,ebp
c00106b5:	83 fa 0f             	cmp    edx,0xf
c00106b8:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00106bf:	75 38                	jne    c00106f9 <CPU::detectFeatures()+0x5b3>
c00106c1:	c1 e8 14             	shr    eax,0x14
c00106c4:	83 c0 0f             	add    eax,0xf
c00106c7:	0f b6 c0             	movzx  eax,al
c00106ca:	89 c2                	mov    edx,eax
c00106cc:	c1 e8 02             	shr    eax,0x2
c00106cf:	83 e2 03             	and    edx,0x3
c00106d2:	89 d1                	mov    ecx,edx
c00106d4:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00106da:	c1 e1 06             	shl    ecx,0x6
c00106dd:	83 e2 3f             	and    edx,0x3f
c00106e0:	09 ca                	or     edx,ecx
c00106e2:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00106e8:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00106ee:	83 e2 c0             	and    edx,0xffffffc0
c00106f1:	09 d0                	or     eax,edx
c00106f3:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00106f9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106ff:	83 ec 0c             	sub    esp,0xc
c0010702:	83 c8 07             	or     eax,0x7
c0010705:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001070b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001070f:	50                   	push   eax
c0010710:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010714:	55                   	push   ebp
c0010715:	57                   	push   edi
c0010716:	56                   	push   esi
c0010717:	68 00 00 00 80       	push   0x80000000
c001071c:	e8 59 f8 ff ff       	call   c000ff7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010721:	83 c4 20             	add    esp,0x20
c0010724:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001072c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010730:	76 1e                	jbe    c0010750 <CPU::detectFeatures()+0x60a>
c0010732:	83 ec 0c             	sub    esp,0xc
c0010735:	50                   	push   eax
c0010736:	55                   	push   ebp
c0010737:	57                   	push   edi
c0010738:	56                   	push   esi
c0010739:	68 01 00 00 80       	push   0x80000001
c001073e:	e8 37 f8 ff ff       	call   c000ff7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010743:	83 c4 20             	add    esp,0x20
c0010746:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010750:	52                   	push   edx
c0010751:	52                   	push   edx
c0010752:	68 b1 1d 02 c0       	push   0xc0021db1
c0010757:	53                   	push   ebx
c0010758:	e8 31 c1 ff ff       	call   c000c88e <Device::setName(char const*)>
c001075d:	83 c4 10             	add    esp,0x10
c0010760:	eb 69                	jmp    c00107cb <CPU::detectFeatures()+0x685>
c0010762:	50                   	push   eax
c0010763:	50                   	push   eax
c0010764:	68 16 1d 02 c0       	push   0xc0021d16
c0010769:	55                   	push   ebp
c001076a:	e8 e1 fe fe ff       	call   c0000650 <strcpy>
c001076f:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010779:	e8 45 fa fe ff       	call   c00001c3 <is486>
c001077e:	83 c4 10             	add    esp,0x10
c0010781:	85 c0                	test   eax,eax
c0010783:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010789:	74 1f                	je     c00107aa <CPU::detectFeatures()+0x664>
c001078b:	83 c8 07             	or     eax,0x7
c001078e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010794:	0f 20 c0             	mov    eax,cr0
c0010797:	83 e0 14             	and    eax,0x14
c001079a:	83 f8 04             	cmp    eax,0x4
c001079d:	75 10                	jne    c00107af <CPU::detectFeatures()+0x669>
c001079f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107a5:	83 e0 fd             	and    eax,0xfffffffd
c00107a8:	eb 1b                	jmp    c00107c5 <CPU::detectFeatures()+0x67f>
c00107aa:	83 e0 f8             	and    eax,0xfffffff8
c00107ad:	eb df                	jmp    c001078e <CPU::detectFeatures()+0x648>
c00107af:	e8 ea f9 fe ff       	call   c000019e <hasLegacyFPU>
c00107b4:	83 e0 01             	and    eax,0x1
c00107b7:	8d 14 00             	lea    edx,[eax+eax*1]
c00107ba:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107c0:	83 e0 fd             	and    eax,0xfffffffd
c00107c3:	09 d0                	or     eax,edx
c00107c5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00107cb:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00107d2:	74 17                	je     c00107eb <CPU::detectFeatures()+0x6a5>
c00107d4:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00107da:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00107e0:	83 c8 10             	or     eax,0x10
c00107e3:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00107e9:	eb 20                	jmp    c001080b <CPU::detectFeatures()+0x6c5>
c00107eb:	e8 ae f9 fe ff       	call   c000019e <hasLegacyFPU>
c00107f0:	83 e0 01             	and    eax,0x1
c00107f3:	8d 14 00             	lea    edx,[eax+eax*1]
c00107f6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107fc:	83 e0 fd             	and    eax,0xfffffffd
c00107ff:	09 d0                	or     eax,edx
c0010801:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010807:	a8 02                	test   al,0x2
c0010809:	75 c9                	jne    c00107d4 <CPU::detectFeatures()+0x68e>
c001080b:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010812:	83 c4 2c             	add    esp,0x2c
c0010815:	5b                   	pop    ebx
c0010816:	5e                   	pop    esi
c0010817:	5f                   	pop    edi
c0010818:	5d                   	pop    ebp
c0010819:	c3                   	ret    

c001081a <CPU::setupSMEP()>:
c001081a:	0f 20 e0             	mov    eax,cr4
c001081d:	0d 00 00 10 00       	or     eax,0x100000
c0010822:	0f 22 e0             	mov    cr4,eax
c0010825:	c3                   	ret    

c0010826 <CPU::setupUMIP()>:
c0010826:	0f 20 e0             	mov    eax,cr4
c0010829:	80 cc 08             	or     ah,0x8
c001082c:	0f 22 e0             	mov    cr4,eax
c001082f:	c3                   	ret    

c0010830 <CPU::setupTSC()>:
c0010830:	0f 20 e0             	mov    eax,cr4
c0010833:	83 c8 04             	or     eax,0x4
c0010836:	0f 22 e0             	mov    cr4,eax
c0010839:	c3                   	ret    

c001083a <CPU::setupLargePages()>:
c001083a:	0f 20 e0             	mov    eax,cr4
c001083d:	83 c8 10             	or     eax,0x10
c0010840:	0f 22 e0             	mov    cr4,eax
c0010843:	c3                   	ret    

c0010844 <CPU::setupPAT()>:
c0010844:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010849:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010850:	74 2c                	je     c001087e <CPU::setupPAT()+0x3a>
c0010852:	53                   	push   ebx
c0010853:	83 ec 10             	sub    esp,0x10
c0010856:	68 77 02 00 00       	push   0x277
c001085b:	50                   	push   eax
c001085c:	e8 81 68 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010861:	83 e2 f8             	and    edx,0xfffffff8
c0010864:	83 ca 01             	or     edx,0x1
c0010867:	52                   	push   edx
c0010868:	50                   	push   eax
c0010869:	68 77 02 00 00       	push   0x277
c001086e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010874:	e8 95 68 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010879:	83 c4 28             	add    esp,0x28
c001087c:	5b                   	pop    ebx
c001087d:	c3                   	ret    
c001087e:	c3                   	ret    
c001087f:	90                   	nop

c0010880 <CPU::setupMTRR()>:
c0010880:	c3                   	ret    
c0010881:	90                   	nop

c0010882 <CPU::setupGlobalPages()>:
c0010882:	0f 20 e0             	mov    eax,cr4
c0010885:	0c 80                	or     al,0x80
c0010887:	0f 22 e0             	mov    cr4,eax
c001088a:	c3                   	ret    
c001088b:	90                   	nop

c001088c <CPU::allowUsermodeDataAccess()>:
c001088c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010890:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010897:	74 03                	je     c001089c <CPU::allowUsermodeDataAccess()+0x10>
c0010899:	0f 01 cb             	stac   
c001089c:	c3                   	ret    
c001089d:	90                   	nop

c001089e <CPU::prohibitUsermodeDataAccess()>:
c001089e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00108a9:	74 03                	je     c00108ae <CPU::prohibitUsermodeDataAccess()+0x10>
c00108ab:	0f 01 ca             	clac   
c00108ae:	c3                   	ret    
c00108af:	90                   	nop

c00108b0 <CPU::setupSMAP()>:
c00108b0:	0f 20 e0             	mov    eax,cr4
c00108b3:	0d 00 00 20 00       	or     eax,0x200000
c00108b8:	0f 22 e0             	mov    cr4,eax
c00108bb:	eb e1                	jmp    c001089e <CPU::prohibitUsermodeDataAccess()>
c00108bd:	90                   	nop

c00108be <CPU::setupFeatures()>:
c00108be:	53                   	push   ebx
c00108bf:	83 ec 08             	sub    esp,0x8
c00108c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108c6:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00108cd:	74 18                	je     c00108e7 <CPU::setupFeatures()+0x29>
c00108cf:	83 ec 0c             	sub    esp,0xc
c00108d2:	68 bd 1d 02 c0       	push   0xc0021dbd
c00108d7:	e8 2e a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00108dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108df:	e8 42 ff ff ff       	call   c0010826 <CPU::setupUMIP()>
c00108e4:	83 c4 10             	add    esp,0x10
c00108e7:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00108ee:	74 18                	je     c0010908 <CPU::setupFeatures()+0x4a>
c00108f0:	83 ec 0c             	sub    esp,0xc
c00108f3:	68 c7 1d 02 c0       	push   0xc0021dc7
c00108f8:	e8 0d a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00108fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010900:	e8 2b ff ff ff       	call   c0010830 <CPU::setupTSC()>
c0010905:	83 c4 10             	add    esp,0x10
c0010908:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001090f:	74 18                	je     c0010929 <CPU::setupFeatures()+0x6b>
c0010911:	83 ec 0c             	sub    esp,0xc
c0010914:	68 d0 1d 02 c0       	push   0xc0021dd0
c0010919:	e8 ec 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001091e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010921:	e8 14 ff ff ff       	call   c001083a <CPU::setupLargePages()>
c0010926:	83 c4 10             	add    esp,0x10
c0010929:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010930:	74 18                	je     c001094a <CPU::setupFeatures()+0x8c>
c0010932:	83 ec 0c             	sub    esp,0xc
c0010935:	68 d9 1d 02 c0       	push   0xc0021dd9
c001093a:	e8 cb 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001093f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010942:	e8 3b ff ff ff       	call   c0010882 <CPU::setupGlobalPages()>
c0010947:	83 c4 10             	add    esp,0x10
c001094a:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010951:	74 18                	je     c001096b <CPU::setupFeatures()+0xad>
c0010953:	83 ec 0c             	sub    esp,0xc
c0010956:	68 eb 1d 02 c0       	push   0xc0021deb
c001095b:	e8 aa 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010960:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010963:	e8 dc fe ff ff       	call   c0010844 <CPU::setupPAT()>
c0010968:	83 c4 10             	add    esp,0x10
c001096b:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010972:	74 11                	je     c0010985 <CPU::setupFeatures()+0xc7>
c0010974:	c7 44 24 10 f4 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021df4
c001097c:	83 c4 08             	add    esp,0x8
c001097f:	5b                   	pop    ebx
c0010980:	e9 85 9f ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c0010985:	83 c4 08             	add    esp,0x8
c0010988:	5b                   	pop    ebx
c0010989:	c3                   	ret    

c001098a <CPU::open(int, int, void*)>:
c001098a:	55                   	push   ebp
c001098b:	57                   	push   edi
c001098c:	56                   	push   esi
c001098d:	53                   	push   ebx
c001098e:	83 ec 18             	sub    esp,0x18
c0010991:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010995:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010999:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001099d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00109a3:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00109a9:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c00109af:	50                   	push   eax
c00109b0:	e8 29 6a ff ff       	call   c00073de <GDT::setup()>
c00109b5:	83 c4 0c             	add    esp,0xc
c00109b8:	6a 00                	push   0x0
c00109ba:	68 ef be ad de       	push   0xdeadbeef
c00109bf:	55                   	push   ebp
c00109c0:	e8 ab 85 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c00109c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00109c8:	e8 83 85 ff ff       	call   c0008f50 <TSS::flush()>
c00109cd:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00109d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00109d6:	e8 67 6c ff ff       	call   c0007642 <IDT::setup()>
c00109db:	b8 00 04 00 00       	mov    eax,0x400
c00109e0:	0f 23 f8             	mov    db7,eax
c00109e3:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00109ed:	e8 f0 73 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00109f2:	83 c4 10             	add    esp,0x10
c00109f5:	85 f6                	test   esi,esi
c00109f7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00109fd:	89 38                	mov    DWORD PTR [eax],edi
c00109ff:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010a05:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a08:	74 10                	je     c0010a1a <CPU::open(int, int, void*)+0x90>
c0010a0a:	50                   	push   eax
c0010a0b:	50                   	push   eax
c0010a0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010a12:	56                   	push   esi
c0010a13:	e8 74 8e ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010a18:	eb 0d                	jmp    c0010a27 <CPU::open(int, int, void*)+0x9d>
c0010a1a:	83 ec 0c             	sub    esp,0xc
c0010a1d:	68 fe 1d 02 c0       	push   0xc0021dfe
c0010a22:	e8 72 08 00 00       	call   c0011299 <KePanic(char const*)>
c0010a27:	83 c4 10             	add    esp,0x10
c0010a2a:	83 ec 0c             	sub    esp,0xc
c0010a2d:	68 0c 1e 02 c0       	push   0xc0021e0c
c0010a32:	e8 8e 01 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c0010a37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a3a:	e8 07 f7 ff ff       	call   c0010146 <CPU::detectFeatures()>
c0010a3f:	c7 04 24 2f 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e2f
c0010a46:	e8 7a 01 00 00       	call   c0010bc5 <KeSetBootMessage(char const*)>
c0010a4b:	e8 06 73 00 00       	call   c0017d56 <HalInitialise()>
c0010a50:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010a55:	83 e0 10             	and    eax,0x10
c0010a58:	83 f8 01             	cmp    eax,0x1
c0010a5b:	19 c0                	sbb    eax,eax
c0010a5d:	83 e0 46             	and    eax,0x46
c0010a60:	83 c0 1e             	add    eax,0x1e
c0010a63:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a66:	e8 ca d6 ff ff       	call   c000e135 <setupTimer(int)>
c0010a6b:	83 c4 10             	add    esp,0x10
c0010a6e:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010a75:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010a7b:	74 0c                	je     c0010a89 <CPU::open(int, int, void*)+0xff>
c0010a7d:	83 ec 0c             	sub    esp,0xc
c0010a80:	53                   	push   ebx
c0010a81:	e8 38 fe ff ff       	call   c00108be <CPU::setupFeatures()>
c0010a86:	83 c4 10             	add    esp,0x10
c0010a89:	83 c4 0c             	add    esp,0xc
c0010a8c:	31 c0                	xor    eax,eax
c0010a8e:	5b                   	pop    ebx
c0010a8f:	5e                   	pop    esi
c0010a90:	5f                   	pop    edi
c0010a91:	5d                   	pop    ebp
c0010a92:	c3                   	ret    

c0010a93 <KeInitialiseAtexit()>:
c0010a93:	83 ec 10             	sub    esp,0x10
c0010a96:	6a 60                	push   0x60
c0010a98:	6a 00                	push   0x0
c0010a9a:	68 20 8e 02 c0       	push   0xc0028e20
c0010a9f:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010aa9:	e8 42 fa fe ff       	call   c00004f0 <memset>
c0010aae:	83 c4 1c             	add    esp,0x1c
c0010ab1:	c3                   	ret    

c0010ab2 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010ab2:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010ab7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010abb:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010ac2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ac6:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010acd:	40                   	inc    eax
c0010ace:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010ad3:	83 f8 17             	cmp    eax,0x17
c0010ad6:	7e 0d                	jle    c0010ae5 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010ad8:	c7 44 24 04 70 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e70
c0010ae0:	e9 b4 07 00 00       	jmp    c0011299 <KePanic(char const*)>
c0010ae5:	c3                   	ret    

c0010ae6 <KeExecuteAtexit()>:
c0010ae6:	53                   	push   ebx
c0010ae7:	31 db                	xor    ebx,ebx
c0010ae9:	83 ec 08             	sub    esp,0x8
c0010aec:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010af2:	7e 50                	jle    c0010b44 <KeExecuteAtexit()+0x5e>
c0010af4:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010afb:	85 c0                	test   eax,eax
c0010afd:	74 42                	je     c0010b41 <KeExecuteAtexit()+0x5b>
c0010aff:	51                   	push   ecx
c0010b00:	50                   	push   eax
c0010b01:	53                   	push   ebx
c0010b02:	68 89 1e 02 c0       	push   0xc0021e89
c0010b07:	e8 fe 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b0c:	58                   	pop    eax
c0010b0d:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010b14:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010b1b:	c7 04 24 ab 1e 02 c0 	mov    DWORD PTR [esp],0xc0021eab
c0010b22:	e8 e3 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b27:	c7 04 24 0b 30 02 c0 	mov    DWORD PTR [esp],0xc002300b
c0010b2e:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010b39:	e8 cc 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b3e:	83 c4 10             	add    esp,0x10
c0010b41:	43                   	inc    ebx
c0010b42:	eb a8                	jmp    c0010aec <KeExecuteAtexit()+0x6>
c0010b44:	83 c4 08             	add    esp,0x8
c0010b47:	5b                   	pop    ebx
c0010b48:	c3                   	ret    

c0010b49 <KeDisplaySplashScreen()>:
c0010b49:	55                   	push   ebp
c0010b4a:	bd 05 00 00 00       	mov    ebp,0x5
c0010b4f:	57                   	push   edi
c0010b50:	bf 0a 00 00 00       	mov    edi,0xa
c0010b55:	56                   	push   esi
c0010b56:	31 f6                	xor    esi,esi
c0010b58:	53                   	push   ebx
c0010b59:	31 db                	xor    ebx,ebx
c0010b5b:	83 ec 0c             	sub    esp,0xc
c0010b5e:	0f b6 96 60 32 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcda0]
c0010b65:	85 d2                	test   edx,edx
c0010b67:	89 d0                	mov    eax,edx
c0010b69:	74 52                	je     c0010bbd <KeDisplaySplashScreen()+0x74>
c0010b6b:	80 bb 96 32 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcd6a],0xdb
c0010b72:	75 13                	jne    c0010b87 <KeDisplaySplashScreen()+0x3e>
c0010b74:	0f b6 8b 95 32 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcd6b]
c0010b7b:	83 e1 fe             	and    ecx,0xfffffffe
c0010b7e:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010b84:	75 01                	jne    c0010b87 <KeDisplaySplashScreen()+0x3e>
c0010b86:	47                   	inc    edi
c0010b87:	83 fa 0d             	cmp    edx,0xd
c0010b8a:	74 28                	je     c0010bb4 <KeDisplaySplashScreen()+0x6b>
c0010b8c:	83 fa 0a             	cmp    edx,0xa
c0010b8f:	75 0a                	jne    c0010b9b <KeDisplaySplashScreen()+0x52>
c0010b91:	45                   	inc    ebp
c0010b92:	bf 0a 00 00 00       	mov    edi,0xa
c0010b97:	31 db                	xor    ebx,ebx
c0010b99:	eb 19                	jmp    c0010bb4 <KeDisplaySplashScreen()+0x6b>
c0010b9b:	83 ec 0c             	sub    esp,0xc
c0010b9e:	0f be c0             	movsx  eax,al
c0010ba1:	55                   	push   ebp
c0010ba2:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010ba5:	43                   	inc    ebx
c0010ba6:	52                   	push   edx
c0010ba7:	6a 00                	push   0x0
c0010ba9:	6a 0e                	push   0xe
c0010bab:	50                   	push   eax
c0010bac:	e8 23 7e 00 00       	call   c00189d4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010bb1:	83 c4 20             	add    esp,0x20
c0010bb4:	46                   	inc    esi
c0010bb5:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010bbb:	75 a1                	jne    c0010b5e <KeDisplaySplashScreen()+0x15>
c0010bbd:	83 c4 0c             	add    esp,0xc
c0010bc0:	5b                   	pop    ebx
c0010bc1:	5e                   	pop    esi
c0010bc2:	5f                   	pop    edi
c0010bc3:	5d                   	pop    ebp
c0010bc4:	c3                   	ret    

c0010bc5 <KeSetBootMessage(char const*)>:
c0010bc5:	57                   	push   edi
c0010bc6:	56                   	push   esi
c0010bc7:	53                   	push   ebx
c0010bc8:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010bce:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010bd5:	68 9e 00 00 00       	push   0x9e
c0010bda:	6a 00                	push   0x0
c0010bdc:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010be0:	56                   	push   esi
c0010be1:	e8 0a f9 fe ff       	call   c00004f0 <memset>
c0010be6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010be9:	e8 92 f9 fe ff       	call   c0000580 <strlen>
c0010bee:	ba 50 00 00 00       	mov    edx,0x50
c0010bf3:	83 c4 10             	add    esp,0x10
c0010bf6:	31 c9                	xor    ecx,ecx
c0010bf8:	29 c2                	sub    edx,eax
c0010bfa:	83 e2 fe             	and    edx,0xfffffffe
c0010bfd:	01 f2                	add    edx,esi
c0010bff:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010c04:	84 c0                	test   al,al
c0010c06:	74 0a                	je     c0010c12 <KeSetBootMessage(char const*)+0x4d>
c0010c08:	80 cc 0f             	or     ah,0xf
c0010c0b:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010c0f:	41                   	inc    ecx
c0010c10:	eb ed                	jmp    c0010bff <KeSetBootMessage(char const*)+0x3a>
c0010c12:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010c17:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010c1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c1e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010c24:	5b                   	pop    ebx
c0010c25:	5e                   	pop    esi
c0010c26:	5f                   	pop    edi
c0010c27:	c3                   	ret    

c0010c28 <Krnl::handlePowerButton()>:
c0010c28:	83 ec 0c             	sub    esp,0xc
c0010c2b:	e8 c4 06 00 00       	call   c00112f4 <KeHandlePowerButton()>
c0010c30:	90                   	nop
c0010c31:	83 c4 0c             	add    esp,0xc
c0010c34:	c3                   	ret    
c0010c35:	8d 76 00             	lea    esi,[esi+0x0]

c0010c38 <Krnl::handleSleepButton()>:
c0010c38:	83 ec 0c             	sub    esp,0xc
c0010c3b:	e8 e9 06 00 00       	call   c0011329 <KeHandleSleepButton()>
c0010c40:	90                   	nop
c0010c41:	83 c4 0c             	add    esp,0xc
c0010c44:	c3                   	ret    
c0010c45:	90                   	nop

c0010c46 <EnvVarContainer::getEnv(char const*)>:
c0010c46:	57                   	push   edi
c0010c47:	56                   	push   esi
c0010c48:	53                   	push   ebx
c0010c49:	31 db                	xor    ebx,ebx
c0010c4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c4f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010c51:	7e 2b                	jle    c0010c7e <EnvVarContainer::getEnv(char const*)+0x38>
c0010c53:	50                   	push   eax
c0010c54:	50                   	push   eax
c0010c55:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c58:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010c5f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010c62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010c66:	e8 15 fb fe ff       	call   c0000780 <strcmp>
c0010c6b:	83 c4 10             	add    esp,0x10
c0010c6e:	85 c0                	test   eax,eax
c0010c70:	75 09                	jne    c0010c7b <EnvVarContainer::getEnv(char const*)+0x35>
c0010c72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c75:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010c79:	eb 05                	jmp    c0010c80 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010c7b:	43                   	inc    ebx
c0010c7c:	eb d1                	jmp    c0010c4f <EnvVarContainer::getEnv(char const*)+0x9>
c0010c7e:	31 c0                	xor    eax,eax
c0010c80:	5b                   	pop    ebx
c0010c81:	5e                   	pop    esi
c0010c82:	5f                   	pop    edi
c0010c83:	c3                   	ret    

c0010c84 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010c84:	55                   	push   ebp
c0010c85:	57                   	push   edi
c0010c86:	56                   	push   esi
c0010c87:	53                   	push   ebx
c0010c88:	83 ec 28             	sub    esp,0x28
c0010c8b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010c8f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010c93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010c97:	56                   	push   esi
c0010c98:	e8 e3 f8 fe ff       	call   c0000580 <strlen>
c0010c9d:	40                   	inc    eax
c0010c9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ca1:	e8 2d 6e ff ff       	call   c0007ad3 <malloc>
c0010ca6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ca9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010cad:	e8 ce f8 fe ff       	call   c0000580 <strlen>
c0010cb2:	40                   	inc    eax
c0010cb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cb6:	e8 18 6e ff ff       	call   c0007ad3 <malloc>
c0010cbb:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cbe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010cc2:	e8 b9 f8 fe ff       	call   c0000580 <strlen>
c0010cc7:	83 c4 0c             	add    esp,0xc
c0010cca:	40                   	inc    eax
c0010ccb:	50                   	push   eax
c0010ccc:	6a 00                	push   0x0
c0010cce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010cd2:	e8 19 f8 fe ff       	call   c00004f0 <memset>
c0010cd7:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cda:	e8 a1 f8 fe ff       	call   c0000580 <strlen>
c0010cdf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010ce3:	8d 48 01             	lea    ecx,[eax+0x1]
c0010ce6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ce8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ceb:	89 de                	mov    esi,ebx
c0010ced:	e8 8e f8 fe ff       	call   c0000580 <strlen>
c0010cf2:	83 c4 0c             	add    esp,0xc
c0010cf5:	40                   	inc    eax
c0010cf6:	50                   	push   eax
c0010cf7:	6a 00                	push   0x0
c0010cf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010cfd:	e8 ee f7 fe ff       	call   c00004f0 <memset>
c0010d02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d05:	e8 76 f8 fe ff       	call   c0000580 <strlen>
c0010d0a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010d0e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010d16:	40                   	inc    eax
c0010d17:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010d1a:	c1 e0 03             	shl    eax,0x3
c0010d1d:	5a                   	pop    edx
c0010d1e:	59                   	pop    ecx
c0010d1f:	50                   	push   eax
c0010d20:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010d23:	e8 97 6d ff ff       	call   c0007abf <realloc>
c0010d28:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010d2b:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010d2f:	b9 08 00 00 00       	mov    ecx,0x8
c0010d34:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010d37:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010d3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d3d:	83 c4 2c             	add    esp,0x2c
c0010d40:	5b                   	pop    ebx
c0010d41:	5e                   	pop    esi
c0010d42:	5f                   	pop    edi
c0010d43:	5d                   	pop    ebp
c0010d44:	c3                   	ret    
c0010d45:	90                   	nop

c0010d46 <EnvVarContainer::deleteEnv(char const*)>:
c0010d46:	c3                   	ret    
c0010d47:	90                   	nop

c0010d48 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010d48:	55                   	push   ebp
c0010d49:	57                   	push   edi
c0010d4a:	56                   	push   esi
c0010d4b:	53                   	push   ebx
c0010d4c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010d52:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010d59:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010d60:	68 14 01 00 00       	push   0x114
c0010d65:	e8 69 6d ff ff       	call   c0007ad3 <malloc>
c0010d6a:	6a 01                	push   0x1
c0010d6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010d6f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010d76:	89 c3                	mov    ebx,eax
c0010d78:	50                   	push   eax
c0010d79:	e8 48 aa ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c0010d7e:	83 c4 14             	add    esp,0x14
c0010d81:	53                   	push   ebx
c0010d82:	e8 e1 ad ff ff       	call   c000bb68 <File::exists()>
c0010d87:	83 c4 10             	add    esp,0x10
c0010d8a:	84 c0                	test   al,al
c0010d8c:	75 31                	jne    c0010dbf <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010d8e:	50                   	push   eax
c0010d8f:	50                   	push   eax
c0010d90:	6a 12                	push   0x12
c0010d92:	53                   	push   ebx
c0010d93:	e8 0c ab ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c0010d98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d9a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010d9d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010da0:	e8 db f7 fe ff       	call   c0000580 <strlen>
c0010da5:	5a                   	pop    edx
c0010da6:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010daa:	52                   	push   edx
c0010dab:	31 d2                	xor    edx,edx
c0010dad:	56                   	push   esi
c0010dae:	52                   	push   edx
c0010daf:	50                   	push   eax
c0010db0:	53                   	push   ebx
c0010db1:	ff d7                	call   edi
c0010db3:	83 c4 14             	add    esp,0x14
c0010db6:	53                   	push   ebx
c0010db7:	e8 46 ab ff ff       	call   c000b902 <File::close()>
c0010dbc:	83 c4 10             	add    esp,0x10
c0010dbf:	56                   	push   esi
c0010dc0:	31 f6                	xor    esi,esi
c0010dc2:	68 00 01 00 00       	push   0x100
c0010dc7:	6a 00                	push   0x0
c0010dc9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010dcd:	50                   	push   eax
c0010dce:	e8 1d f7 fe ff       	call   c00004f0 <memset>
c0010dd3:	5f                   	pop    edi
c0010dd4:	58                   	pop    eax
c0010dd5:	6a 01                	push   0x1
c0010dd7:	53                   	push   ebx
c0010dd8:	e8 c7 aa ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c0010ddd:	83 c4 10             	add    esp,0x10
c0010de0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010de8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010df0:	83 ec 0c             	sub    esp,0xc
c0010df3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010df7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010df9:	52                   	push   edx
c0010dfa:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010dfe:	51                   	push   ecx
c0010dff:	6a 00                	push   0x0
c0010e01:	6a 01                	push   0x1
c0010e03:	53                   	push   ebx
c0010e04:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010e07:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010e0c:	83 c4 20             	add    esp,0x20
c0010e0f:	85 c0                	test   eax,eax
c0010e11:	89 c1                	mov    ecx,eax
c0010e13:	0f 84 36 01 00 00    	je     c0010f4f <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010e19:	83 f8 0d             	cmp    eax,0xd
c0010e1c:	0f 84 22 01 00 00    	je     c0010f44 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e22:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e27:	0f 84 f0 00 00 00    	je     c0010f1d <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010e2d:	83 f8 0a             	cmp    eax,0xa
c0010e30:	74 13                	je     c0010e45 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e32:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e37:	74 0c                	je     c0010e45 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e39:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e3f:	0f 8e f6 00 00 00    	jle    c0010f3b <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010e45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e49:	83 ec 0c             	sub    esp,0xc
c0010e4c:	8d 78 01             	lea    edi,[eax+0x1]
c0010e4f:	57                   	push   edi
c0010e50:	e8 7e 6c ff ff       	call   c0007ad3 <malloc>
c0010e55:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010e59:	8d 56 04             	lea    edx,[esi+0x4]
c0010e5c:	89 14 24             	mov    DWORD PTR [esp],edx
c0010e5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010e63:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010e67:	e8 67 6c ff ff       	call   c0007ad3 <malloc>
c0010e6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010e70:	83 c4 0c             	add    esp,0xc
c0010e73:	57                   	push   edi
c0010e74:	6a 00                	push   0x0
c0010e76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e7a:	e8 71 f6 fe ff       	call   c00004f0 <memset>
c0010e7f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010e83:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010e87:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010e8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e8d:	83 c4 0c             	add    esp,0xc
c0010e90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010e94:	52                   	push   edx
c0010e95:	6a 00                	push   0x0
c0010e97:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e9b:	e8 50 f6 fe ff       	call   c00004f0 <memset>
c0010ea0:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010ea4:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010ea8:	89 34 24             	mov    DWORD PTR [esp],esi
c0010eab:	e8 d0 f6 fe ff       	call   c0000580 <strlen>
c0010eb0:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010eb4:	89 c1                	mov    ecx,eax
c0010eb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010eb8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010ebb:	83 c4 10             	add    esp,0x10
c0010ebe:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010ec1:	40                   	inc    eax
c0010ec2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010ec5:	85 d2                	test   edx,edx
c0010ec7:	75 0c                	jne    c0010ed5 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010ec9:	83 ec 0c             	sub    esp,0xc
c0010ecc:	6a 08                	push   0x8
c0010ece:	e8 00 6c ff ff       	call   c0007ad3 <malloc>
c0010ed3:	eb 0c                	jmp    c0010ee1 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010ed5:	51                   	push   ecx
c0010ed6:	51                   	push   ecx
c0010ed7:	c1 e0 03             	shl    eax,0x3
c0010eda:	50                   	push   eax
c0010edb:	52                   	push   edx
c0010edc:	e8 de 6b ff ff       	call   c0007abf <realloc>
c0010ee1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010ee4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010ee7:	83 c4 10             	add    esp,0x10
c0010eea:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010eed:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010ef1:	b9 08 00 00 00       	mov    ecx,0x8
c0010ef6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010efa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010efc:	50                   	push   eax
c0010efd:	31 f6                	xor    esi,esi
c0010eff:	68 00 01 00 00       	push   0x100
c0010f04:	6a 00                	push   0x0
c0010f06:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010f0a:	50                   	push   eax
c0010f0b:	e8 e0 f5 fe ff       	call   c00004f0 <memset>
c0010f10:	83 c4 10             	add    esp,0x10
c0010f13:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010f1b:	eb 27                	jmp    c0010f44 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f1d:	83 f8 3d             	cmp    eax,0x3d
c0010f20:	74 1e                	je     c0010f40 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010f22:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f28:	7f 07                	jg     c0010f31 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010f2a:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010f2e:	46                   	inc    esi
c0010f2f:	eb 13                	jmp    c0010f44 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f31:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010f39:	eb 09                	jmp    c0010f44 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f3b:	83 f8 3d             	cmp    eax,0x3d
c0010f3e:	75 ea                	jne    c0010f2a <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010f40:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010f44:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f49:	0f 85 99 fe ff ff    	jne    c0010de8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010f4f:	83 ec 0c             	sub    esp,0xc
c0010f52:	53                   	push   ebx
c0010f53:	e8 aa a9 ff ff       	call   c000b902 <File::close()>
c0010f58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f60:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010f66:	5b                   	pop    ebx
c0010f67:	5e                   	pop    esi
c0010f68:	5f                   	pop    edi
c0010f69:	5d                   	pop    ebp
c0010f6a:	c3                   	ret    
c0010f6b:	90                   	nop

c0010f6c <EnvVarContainer::__loadSystem()>:
c0010f6c:	83 ec 10             	sub    esp,0x10
c0010f6f:	68 c0 33 02 c0       	push   0xc00233c0
c0010f74:	68 b0 1e 02 c0       	push   0xc0021eb0
c0010f79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f7d:	e8 c6 fd ff ff       	call   c0010d48 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010f82:	83 c4 1c             	add    esp,0x1c
c0010f85:	c3                   	ret    

c0010f86 <EnvVarContainer::__loadUser()>:
c0010f86:	c3                   	ret    
c0010f87:	90                   	nop

c0010f88 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f9a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fa1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fa8:	90                   	nop
c0010fa9:	c3                   	ret    

c0010faa <EnvVarContainer::~EnvVarContainer()>:
c0010faa:	83 ec 0c             	sub    esp,0xc
c0010fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fb4:	85 c0                	test   eax,eax
c0010fb6:	74 1d                	je     c0010fd5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fbe:	85 c0                	test   eax,eax
c0010fc0:	74 13                	je     c0010fd5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fc9:	83 ec 0c             	sub    esp,0xc
c0010fcc:	50                   	push   eax
c0010fcd:	e8 11 6b ff ff       	call   c0007ae3 <free>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	90                   	nop
c0010fd6:	83 c4 0c             	add    esp,0xc
c0010fd9:	c3                   	ret    

c0010fda <KeGetEnv(Process*, char const*)>:
c0010fda:	53                   	push   ebx
c0010fdb:	83 ec 08             	sub    esp,0x8
c0010fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe2:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0010fe8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010fec:	74 04                	je     c0010ff2 <KeGetEnv(Process*, char const*)+0x18>
c0010fee:	85 c0                	test   eax,eax
c0010ff0:	75 0b                	jne    c0010ffd <KeGetEnv(Process*, char const*)+0x23>
c0010ff2:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0010ff7:	85 c0                	test   eax,eax
c0010ff9:	75 19                	jne    c0011014 <KeGetEnv(Process*, char const*)+0x3a>
c0010ffb:	eb 27                	jmp    c0011024 <KeGetEnv(Process*, char const*)+0x4a>
c0010ffd:	52                   	push   edx
c0010ffe:	52                   	push   edx
c0010fff:	53                   	push   ebx
c0011000:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011006:	e8 3b fc ff ff       	call   c0010c46 <EnvVarContainer::getEnv(char const*)>
c001100b:	83 c4 10             	add    esp,0x10
c001100e:	85 c0                	test   eax,eax
c0011010:	75 28                	jne    c001103a <KeGetEnv(Process*, char const*)+0x60>
c0011012:	eb de                	jmp    c0010ff2 <KeGetEnv(Process*, char const*)+0x18>
c0011014:	52                   	push   edx
c0011015:	52                   	push   edx
c0011016:	53                   	push   ebx
c0011017:	50                   	push   eax
c0011018:	e8 29 fc ff ff       	call   c0010c46 <EnvVarContainer::getEnv(char const*)>
c001101d:	83 c4 10             	add    esp,0x10
c0011020:	85 c0                	test   eax,eax
c0011022:	75 16                	jne    c001103a <KeGetEnv(Process*, char const*)+0x60>
c0011024:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011028:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001102d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011031:	83 c4 08             	add    esp,0x8
c0011034:	5b                   	pop    ebx
c0011035:	e9 0c fc ff ff       	jmp    c0010c46 <EnvVarContainer::getEnv(char const*)>
c001103a:	83 c4 08             	add    esp,0x8
c001103d:	5b                   	pop    ebx
c001103e:	c3                   	ret    

c001103f <KeSetEnvSystem(char const*, char const*)>:
c001103f:	83 ec 10             	sub    esp,0x10
c0011042:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011046:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001104a:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011050:	e8 2f fc ff ff       	call   c0010c84 <EnvVarContainer::setEnv(char const*, char const*)>
c0011055:	83 c4 1c             	add    esp,0x1c
c0011058:	c3                   	ret    

c0011059 <KeSetEnvUser(char const*, char const*)>:
c0011059:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c001105e:	85 c0                	test   eax,eax
c0011060:	74 15                	je     c0011077 <KeSetEnvUser(char const*, char const*)+0x1e>
c0011062:	83 ec 10             	sub    esp,0x10
c0011065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011069:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001106d:	50                   	push   eax
c001106e:	e8 11 fc ff ff       	call   c0010c84 <EnvVarContainer::setEnv(char const*, char const*)>
c0011073:	83 c4 1c             	add    esp,0x1c
c0011076:	c3                   	ret    
c0011077:	c3                   	ret    

c0011078 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001107c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011082:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011086:	e9 f9 fb ff ff       	jmp    c0010c84 <EnvVarContainer::setEnv(char const*, char const*)>

c001108b <KeDeleteEnvSystem(char const*)>:
c001108b:	c3                   	ret    

c001108c <KeDeleteEnvUser(char const*)>:
c001108c:	c3                   	ret    

c001108d <KeDeleteEnvProcess(Process*, char const*)>:
c001108d:	c3                   	ret    

c001108e <KeNewProcessEnv(Process*)>:
c001108e:	83 ec 28             	sub    esp,0x28
c0011091:	6a 0c                	push   0xc
c0011093:	e8 3b 6a ff ff       	call   c0007ad3 <malloc>
c0011098:	5a                   	pop    edx
c0011099:	59                   	pop    ecx
c001109a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001109e:	50                   	push   eax
c001109f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110a3:	e8 e0 fe ff ff       	call   c0010f88 <EnvVarContainer::EnvVarContainer(Process*)>
c00110a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110ac:	83 c4 2c             	add    esp,0x2c
c00110af:	c3                   	ret    

c00110b0 <KeCopyProcessEnv(Process*, Process*)>:
c00110b0:	57                   	push   edi
c00110b1:	56                   	push   esi
c00110b2:	53                   	push   ebx
c00110b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b7:	83 ec 0c             	sub    esp,0xc
c00110ba:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00110c0:	6a 0c                	push   0xc
c00110c2:	e8 0c 6a ff ff       	call   c0007ad3 <malloc>
c00110c7:	89 c3                	mov    ebx,eax
c00110c9:	58                   	pop    eax
c00110ca:	5a                   	pop    edx
c00110cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110cf:	53                   	push   ebx
c00110d0:	e8 b3 fe ff ff       	call   c0010f88 <EnvVarContainer::EnvVarContainer(Process*)>
c00110d5:	8b 07                	mov    eax,DWORD PTR [edi]
c00110d7:	89 03                	mov    DWORD PTR [ebx],eax
c00110d9:	c1 e0 03             	shl    eax,0x3
c00110dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00110df:	e8 ef 69 ff ff       	call   c0007ad3 <malloc>
c00110e4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00110e7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00110e9:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00110ec:	89 c7                	mov    edi,eax
c00110ee:	c1 e1 03             	shl    ecx,0x3
c00110f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110f3:	83 c4 10             	add    esp,0x10
c00110f6:	89 d8                	mov    eax,ebx
c00110f8:	5b                   	pop    ebx
c00110f9:	5e                   	pop    esi
c00110fa:	5f                   	pop    edi
c00110fb:	c3                   	ret    

c00110fc <KeLoadSystemEnv()>:
c00110fc:	53                   	push   ebx
c00110fd:	83 ec 14             	sub    esp,0x14
c0011100:	6a 0c                	push   0xc
c0011102:	e8 cc 69 ff ff       	call   c0007ad3 <malloc>
c0011107:	89 c3                	mov    ebx,eax
c0011109:	58                   	pop    eax
c001110a:	5a                   	pop    edx
c001110b:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011111:	53                   	push   ebx
c0011112:	e8 71 fe ff ff       	call   c0010f88 <EnvVarContainer::EnvVarContainer(Process*)>
c0011117:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001111a:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011120:	e8 47 fe ff ff       	call   c0010f6c <EnvVarContainer::__loadSystem()>
c0011125:	83 c4 18             	add    esp,0x18
c0011128:	5b                   	pop    ebx
c0011129:	c3                   	ret    

c001112a <KeLoadUserEnv()>:
c001112a:	53                   	push   ebx
c001112b:	83 ec 14             	sub    esp,0x14
c001112e:	6a 0c                	push   0xc
c0011130:	e8 9e 69 ff ff       	call   c0007ad3 <malloc>
c0011135:	89 c3                	mov    ebx,eax
c0011137:	58                   	pop    eax
c0011138:	5a                   	pop    edx
c0011139:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001113f:	53                   	push   ebx
c0011140:	e8 43 fe ff ff       	call   c0010f88 <EnvVarContainer::EnvVarContainer(Process*)>
c0011145:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c001114b:	83 c4 18             	add    esp,0x18
c001114e:	5b                   	pop    ebx
c001114f:	c3                   	ret    

c0011150 <KeFlushEnv()>:
c0011150:	c3                   	ret    

c0011151 <KeGetProcessTotalEnvCount(Process*)>:
c0011151:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011155:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c001115b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011161:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011166:	8b 00                	mov    eax,DWORD PTR [eax]
c0011168:	03 01                	add    eax,DWORD PTR [ecx]
c001116a:	85 d2                	test   edx,edx
c001116c:	74 02                	je     c0011170 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001116e:	03 02                	add    eax,DWORD PTR [edx]
c0011170:	c3                   	ret    

c0011171 <KeGetProcessEnvPair(Process*, int)>:
c0011171:	57                   	push   edi
c0011172:	56                   	push   esi
c0011173:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c0011179:	53                   	push   ebx
c001117a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001117e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011182:	85 f6                	test   esi,esi
c0011184:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011188:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001118e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011190:	75 16                	jne    c00111a8 <KeGetProcessEnvPair(Process*, int)+0x37>
c0011192:	39 c2                	cmp    edx,eax
c0011194:	7c 16                	jl     c00111ac <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011196:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c001119c:	8b 31                	mov    esi,DWORD PTR [ecx]
c001119e:	01 c6                	add    esi,eax
c00111a0:	39 d6                	cmp    esi,edx
c00111a2:	7e 3c                	jle    c00111e0 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00111a4:	29 c2                	sub    edx,eax
c00111a6:	eb 04                	jmp    c00111ac <KeGetProcessEnvPair(Process*, int)+0x3b>
c00111a8:	39 c2                	cmp    edx,eax
c00111aa:	7d 05                	jge    c00111b1 <KeGetProcessEnvPair(Process*, int)+0x40>
c00111ac:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00111af:	eb 20                	jmp    c00111d1 <KeGetProcessEnvPair(Process*, int)+0x60>
c00111b1:	8b 3e                	mov    edi,DWORD PTR [esi]
c00111b3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00111b6:	39 d1                	cmp    ecx,edx
c00111b8:	7e 04                	jle    c00111be <KeGetProcessEnvPair(Process*, int)+0x4d>
c00111ba:	29 c2                	sub    edx,eax
c00111bc:	eb 10                	jmp    c00111ce <KeGetProcessEnvPair(Process*, int)+0x5d>
c00111be:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c00111c4:	03 0e                	add    ecx,DWORD PTR [esi]
c00111c6:	39 d1                	cmp    ecx,edx
c00111c8:	7e 16                	jle    c00111e0 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00111ca:	29 c2                	sub    edx,eax
c00111cc:	29 fa                	sub    edx,edi
c00111ce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00111d1:	8d 14 d0             	lea    edx,[eax+edx*8]
c00111d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00111d6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00111d9:	89 03                	mov    DWORD PTR [ebx],eax
c00111db:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00111de:	eb 1d                	jmp    c00111fd <KeGetProcessEnvPair(Process*, int)+0x8c>
c00111e0:	83 ec 0c             	sub    esp,0xc
c00111e3:	68 d2 1e 02 c0       	push   0xc0021ed2
c00111e8:	e8 ac 00 00 00       	call   c0011299 <KePanic(char const*)>
c00111ed:	83 c4 10             	add    esp,0x10
c00111f0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00111f6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00111fd:	89 d8                	mov    eax,ebx
c00111ff:	5b                   	pop    ebx
c0011200:	5e                   	pop    esi
c0011201:	5f                   	pop    edi
c0011202:	c2 04 00             	ret    0x4

c0011205 <CPU::current()>:
c0011205:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001120a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011210:	c3                   	ret    

c0011211 <operator new(unsigned long)>:
c0011211:	e9 bd 68 ff ff       	jmp    c0007ad3 <malloc>

c0011216 <operator delete(void*)>:
c0011216:	e9 d8 68 ff ff       	jmp    c0007af3 <rfree>

c001121b <disableIRQs()>:
c001121b:	fa                   	cli    
c001121c:	c3                   	ret    

c001121d <enableIRQs()>:
c001121d:	fb                   	sti    
c001121e:	c3                   	ret    

c001121f <lockScheduler()>:
c001121f:	fa                   	cli    
c0011220:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011226:	c3                   	ret    

c0011227 <unlockScheduler()>:
c0011227:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001122c:	48                   	dec    eax
c001122d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011232:	75 01                	jne    c0011235 <unlockScheduler()+0xe>
c0011234:	fb                   	sti    
c0011235:	c3                   	ret    

c0011236 <lockStuff()>:
c0011236:	fa                   	cli    
c0011237:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001123d:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c0011243:	c3                   	ret    

c0011244 <unlockStuff()>:
c0011244:	83 ec 0c             	sub    esp,0xc
c0011247:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001124c:	48                   	dec    eax
c001124d:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0011252:	75 18                	jne    c001126c <unlockStuff()+0x28>
c0011254:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001125b:	74 0f                	je     c001126c <unlockStuff()+0x28>
c001125d:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0011267:	e8 2c 4a 00 00       	call   c0015c98 <schedule()>
c001126c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011271:	48                   	dec    eax
c0011272:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011277:	75 01                	jne    c001127a <unlockStuff()+0x36>
c0011279:	fb                   	sti    
c001127a:	83 c4 0c             	add    esp,0xc
c001127d:	c3                   	ret    

c001127e <Virt::getAKernelVAS()>:
c001127e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0011283:	c3                   	ret    

c0011284 <__not_memcpy>:
c0011284:	57                   	push   edi
c0011285:	56                   	push   esi
c0011286:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001128a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001128e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011292:	89 c7                	mov    edi,eax
c0011294:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011296:	5e                   	pop    esi
c0011297:	5f                   	pop    edi
c0011298:	c3                   	ret    

c0011299 <KePanic(char const*)>:
c0011299:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c00112a0:	e9 82 69 00 00       	jmp    c0017c27 <HalPanic(char const*)>

c00112a5 <KePowerThread(void*)>:
c00112a5:	83 ec 0c             	sub    esp,0xc
c00112a8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00112ad:	48                   	dec    eax
c00112ae:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00112b3:	75 01                	jne    c00112b6 <KePowerThread(void*)+0x11>
c00112b5:	fb                   	sti    
c00112b6:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00112bd:	83 ec 0c             	sub    esp,0xc
c00112c0:	6a 0a                	push   0xa
c00112c2:	e8 01 4d 00 00       	call   c0015fc8 <sleep(unsigned int)>
c00112c7:	83 c4 10             	add    esp,0x10
c00112ca:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c00112d1:	eb e3                	jmp    c00112b6 <KePowerThread(void*)+0x11>

c00112d3 <KeChangePowerSettings(PowerSettings)>:
c00112d3:	57                   	push   edi
c00112d4:	b9 09 00 00 00       	mov    ecx,0x9
c00112d9:	56                   	push   esi
c00112da:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c00112df:	fc                   	cld    
c00112e0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00112e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00112e6:	5e                   	pop    esi
c00112e7:	5f                   	pop    edi
c00112e8:	c3                   	ret    

c00112e9 <KeUserIOReceived()>:
c00112e9:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00112f3:	c3                   	ret    

c00112f4 <KeHandlePowerButton()>:
c00112f4:	83 ec 0c             	sub    esp,0xc
c00112f7:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00112fc:	83 f8 02             	cmp    eax,0x2
c00112ff:	75 10                	jne    c0011311 <KeHandlePowerButton()+0x1d>
c0011301:	83 ec 0c             	sub    esp,0xc
c0011304:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001130a:	e8 3b 5e ff ff       	call   c000714a <Computer::shutdown()>
c001130f:	eb 11                	jmp    c0011322 <KeHandlePowerButton()+0x2e>
c0011311:	48                   	dec    eax
c0011312:	75 11                	jne    c0011325 <KeHandlePowerButton()+0x31>
c0011314:	83 ec 0c             	sub    esp,0xc
c0011317:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001131d:	e8 58 5e ff ff       	call   c000717a <Computer::sleep()>
c0011322:	83 c4 10             	add    esp,0x10
c0011325:	83 c4 0c             	add    esp,0xc
c0011328:	c3                   	ret    

c0011329 <KeHandleSleepButton()>:
c0011329:	83 ec 0c             	sub    esp,0xc
c001132c:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011331:	83 f8 02             	cmp    eax,0x2
c0011334:	75 10                	jne    c0011346 <KeHandleSleepButton()+0x1d>
c0011336:	83 ec 0c             	sub    esp,0xc
c0011339:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001133f:	e8 06 5e ff ff       	call   c000714a <Computer::shutdown()>
c0011344:	eb 11                	jmp    c0011357 <KeHandleSleepButton()+0x2e>
c0011346:	48                   	dec    eax
c0011347:	75 11                	jne    c001135a <KeHandleSleepButton()+0x31>
c0011349:	83 ec 0c             	sub    esp,0xc
c001134c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011352:	e8 23 5e ff ff       	call   c000717a <Computer::sleep()>
c0011357:	83 c4 10             	add    esp,0x10
c001135a:	83 c4 0c             	add    esp,0xc
c001135d:	c3                   	ret    

c001135e <KeSetupPowerManager()>:
c001135e:	83 ec 0c             	sub    esp,0xc
c0011361:	68 f0 00 00 00       	push   0xf0
c0011366:	6a 00                	push   0x0
c0011368:	68 a5 12 01 c0       	push   0xc00112a5
c001136d:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011373:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c001137d:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011384:	e8 c3 46 00 00       	call   c0015a4c <Process::createThread(void (*)(void*), void*, int)>
c0011389:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c0011393:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c001139d:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c00113a7:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c00113b1:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c00113bb:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c00113c5:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c00113cf:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c00113d9:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c00113e3:	83 c4 1c             	add    esp,0x1c
c00113e6:	c3                   	ret    

c00113e7 <KeRand()>:
c00113e7:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c00113f1:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c00113fb:	53                   	push   ebx
c00113fc:	01 c1                	add    ecx,eax
c00113fe:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011403:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c0011409:	01 ca                	add    edx,ecx
c001140b:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011410:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011415:	83 d2 00             	adc    edx,0x0
c0011418:	0f b7 da             	movzx  ebx,dx
c001141b:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c0011421:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0011425:	5b                   	pop    ebx
c0011426:	c3                   	ret    

c0011427 <KeSeedRand(unsigned int)>:
c0011427:	53                   	push   ebx
c0011428:	83 ec 08             	sub    esp,0x8
c001142b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001142f:	e8 12 6b 00 00       	call   c0017f46 <HalGetRand()>
c0011434:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c001143e:	31 d8                	xor    eax,ebx
c0011440:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011445:	e8 9d ff ff ff       	call   c00113e7 <KeRand()>
c001144a:	83 c4 08             	add    esp,0x8
c001144d:	5b                   	pop    ebx
c001144e:	eb 97                	jmp    c00113e7 <KeRand()>

c0011450 <KeInitRand()>:
c0011450:	83 ec 0c             	sub    esp,0xc
c0011453:	e8 e3 68 00 00       	call   c0017d3b <HalQueryPerformanceCounter()>
c0011458:	0f 20 da             	mov    edx,cr3
c001145b:	0f 22 da             	mov    cr3,edx
c001145e:	0f 20 da             	mov    edx,cr3
c0011461:	0f 22 da             	mov    cr3,edx
c0011464:	0f 20 da             	mov    edx,cr3
c0011467:	0f 22 da             	mov    cr3,edx
c001146a:	0f 20 da             	mov    edx,cr3
c001146d:	0f 22 da             	mov    cr3,edx
c0011470:	83 ec 0c             	sub    esp,0xc
c0011473:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011478:	50                   	push   eax
c0011479:	e8 a9 ff ff ff       	call   c0011427 <KeSeedRand(unsigned int)>
c001147e:	83 c4 1c             	add    esp,0x1c
c0011481:	c3                   	ret    
c0011482:	66 90                	xchg   ax,ax

c0011484 <KeResolveCompatibilitySymbol(char*)>:
c0011484:	83 ec 0c             	sub    esp,0xc
c0011487:	83 ec 08             	sub    esp,0x8
c001148a:	68 ec 1e 02 c0       	push   0xc0021eec
c001148f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011493:	e8 e8 f2 fe ff       	call   c0000780 <strcmp>
c0011498:	83 c4 10             	add    esp,0x10
c001149b:	85 c0                	test   eax,eax
c001149d:	0f 94 c0             	sete   al
c00114a0:	0f b6 c0             	movzx  eax,al
c00114a3:	85 c0                	test   eax,eax
c00114a5:	74 0d                	je     c00114b4 <KeResolveCompatibilitySymbol(char*)+0x30>
c00114a7:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c00114ac:	e9 8b 01 00 00       	jmp    c001163c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114b1:	8d 76 00             	lea    esi,[esi+0x0]
c00114b4:	83 ec 08             	sub    esp,0x8
c00114b7:	68 f5 1e 02 c0       	push   0xc0021ef5
c00114bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114c0:	e8 bb f2 fe ff       	call   c0000780 <strcmp>
c00114c5:	83 c4 10             	add    esp,0x10
c00114c8:	85 c0                	test   eax,eax
c00114ca:	0f 94 c0             	sete   al
c00114cd:	0f b6 c0             	movzx  eax,al
c00114d0:	85 c0                	test   eax,eax
c00114d2:	74 0c                	je     c00114e0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00114d4:	b8 50 f3 01 c0       	mov    eax,0xc001f350
c00114d9:	e9 5e 01 00 00       	jmp    c001163c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114de:	66 90                	xchg   ax,ax
c00114e0:	83 ec 08             	sub    esp,0x8
c00114e3:	68 ff 1e 02 c0       	push   0xc0021eff
c00114e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114ec:	e8 8f f2 fe ff       	call   c0000780 <strcmp>
c00114f1:	83 c4 10             	add    esp,0x10
c00114f4:	85 c0                	test   eax,eax
c00114f6:	0f 94 c0             	sete   al
c00114f9:	0f b6 c0             	movzx  eax,al
c00114fc:	85 c0                	test   eax,eax
c00114fe:	74 0c                	je     c001150c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011500:	b8 84 f0 01 c0       	mov    eax,0xc001f084
c0011505:	e9 32 01 00 00       	jmp    c001163c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001150a:	66 90                	xchg   ax,ax
c001150c:	83 ec 08             	sub    esp,0x8
c001150f:	68 08 1f 02 c0       	push   0xc0021f08
c0011514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011518:	e8 63 f2 fe ff       	call   c0000780 <strcmp>
c001151d:	83 c4 10             	add    esp,0x10
c0011520:	85 c0                	test   eax,eax
c0011522:	0f 94 c0             	sete   al
c0011525:	0f b6 c0             	movzx  eax,al
c0011528:	85 c0                	test   eax,eax
c001152a:	74 0c                	je     c0011538 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001152c:	b8 99 12 01 c0       	mov    eax,0xc0011299
c0011531:	e9 06 01 00 00       	jmp    c001163c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011536:	66 90                	xchg   ax,ax
c0011538:	83 ec 08             	sub    esp,0x8
c001153b:	68 1b 1f 02 c0       	push   0xc0021f1b
c0011540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011544:	e8 37 f2 fe ff       	call   c0000780 <strcmp>
c0011549:	83 c4 10             	add    esp,0x10
c001154c:	85 c0                	test   eax,eax
c001154e:	0f 94 c0             	sete   al
c0011551:	0f b6 c0             	movzx  eax,al
c0011554:	85 c0                	test   eax,eax
c0011556:	74 0c                	je     c0011564 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011558:	b8 c5 0b 01 c0       	mov    eax,0xc0010bc5
c001155d:	e9 da 00 00 00       	jmp    c001163c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011562:	66 90                	xchg   ax,ax
c0011564:	83 ec 08             	sub    esp,0x8
c0011567:	68 38 1f 02 c0       	push   0xc0021f38
c001156c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011570:	e8 0b f2 fe ff       	call   c0000780 <strcmp>
c0011575:	83 c4 10             	add    esp,0x10
c0011578:	85 c0                	test   eax,eax
c001157a:	0f 94 c0             	sete   al
c001157d:	0f b6 c0             	movzx  eax,al
c0011580:	85 c0                	test   eax,eax
c0011582:	74 0c                	je     c0011590 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011584:	b8 50 f4 01 c0       	mov    eax,0xc001f450
c0011589:	e9 ae 00 00 00       	jmp    c001163c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001158e:	66 90                	xchg   ax,ax
c0011590:	83 ec 08             	sub    esp,0x8
c0011593:	68 42 1f 02 c0       	push   0xc0021f42
c0011598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001159c:	e8 df f1 fe ff       	call   c0000780 <strcmp>
c00115a1:	83 c4 10             	add    esp,0x10
c00115a4:	85 c0                	test   eax,eax
c00115a6:	0f 94 c0             	sete   al
c00115a9:	0f b6 c0             	movzx  eax,al
c00115ac:	85 c0                	test   eax,eax
c00115ae:	74 0c                	je     c00115bc <KeResolveCompatibilitySymbol(char*)+0x138>
c00115b0:	b8 d0 f1 01 c0       	mov    eax,0xc001f1d0
c00115b5:	e9 82 00 00 00       	jmp    c001163c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115ba:	66 90                	xchg   ax,ax
c00115bc:	83 ec 08             	sub    esp,0x8
c00115bf:	68 4b 1f 02 c0       	push   0xc0021f4b
c00115c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115c8:	e8 b3 f1 fe ff       	call   c0000780 <strcmp>
c00115cd:	83 c4 10             	add    esp,0x10
c00115d0:	85 c0                	test   eax,eax
c00115d2:	0f 94 c0             	sete   al
c00115d5:	0f b6 c0             	movzx  eax,al
c00115d8:	85 c0                	test   eax,eax
c00115da:	74 08                	je     c00115e4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00115dc:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00115e1:	eb 59                	jmp    c001163c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115e3:	90                   	nop
c00115e4:	83 ec 08             	sub    esp,0x8
c00115e7:	68 63 1f 02 c0       	push   0xc0021f63
c00115ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115f0:	e8 8b f1 fe ff       	call   c0000780 <strcmp>
c00115f5:	83 c4 10             	add    esp,0x10
c00115f8:	85 c0                	test   eax,eax
c00115fa:	0f 94 c0             	sete   al
c00115fd:	0f b6 c0             	movzx  eax,al
c0011600:	85 c0                	test   eax,eax
c0011602:	74 08                	je     c001160c <KeResolveCompatibilitySymbol(char*)+0x188>
c0011604:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011609:	eb 31                	jmp    c001163c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001160b:	90                   	nop
c001160c:	83 ec 08             	sub    esp,0x8
c001160f:	68 70 1f 02 c0       	push   0xc0021f70
c0011614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011618:	e8 63 f1 fe ff       	call   c0000780 <strcmp>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	85 c0                	test   eax,eax
c0011622:	0f 94 c0             	sete   al
c0011625:	0f b6 c0             	movzx  eax,al
c0011628:	85 c0                	test   eax,eax
c001162a:	74 08                	je     c0011634 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c001162c:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011631:	eb 09                	jmp    c001163c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011633:	90                   	nop
c0011634:	b8 00 00 00 00       	mov    eax,0x0
c0011639:	8d 76 00             	lea    esi,[esi+0x0]
c001163c:	83 c4 0c             	add    esp,0xc
c001163f:	c3                   	ret    

c0011640 <KiSigKill(int)>:
c0011640:	83 ec 0c             	sub    esp,0xc
c0011643:	6a 00                	push   0x0
c0011645:	6a 00                	push   0x0
c0011647:	6a ff                	push   0xffffffff
c0011649:	6a 01                	push   0x1
c001164b:	e8 02 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011650:	83 c4 1c             	add    esp,0x1c
c0011653:	c3                   	ret    

c0011654 <KiDefaultSignalHandlerIgnore(int)>:
c0011654:	c3                   	ret    

c0011655 <KiDefaultSignalHandlerPause(int)>:
c0011655:	57                   	push   edi
c0011656:	b9 07 00 00 00       	mov    ecx,0x7
c001165b:	56                   	push   esi
c001165c:	be b9 1f 02 c0       	mov    esi,0xc0021fb9
c0011661:	83 ec 24             	sub    esp,0x24
c0011664:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011668:	fc                   	cld    
c0011669:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001166b:	8d 44 24 04          	lea    eax,[esp+0x4]
c001166f:	50                   	push   eax
c0011670:	6a 00                	push   0x0
c0011672:	6a 00                	push   0x0
c0011674:	6a 27                	push   0x27
c0011676:	e8 d7 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001167b:	83 c4 34             	add    esp,0x34
c001167e:	5e                   	pop    esi
c001167f:	5f                   	pop    edi
c0011680:	c3                   	ret    

c0011681 <KiDefaultSignalHandlerResume(int)>:
c0011681:	57                   	push   edi
c0011682:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011687:	56                   	push   esi
c0011688:	be d5 1f 02 c0       	mov    esi,0xc0021fd5
c001168d:	83 ec 24             	sub    esp,0x24
c0011690:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011694:	fc                   	cld    
c0011695:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011697:	8d 44 24 03          	lea    eax,[esp+0x3]
c001169b:	50                   	push   eax
c001169c:	6a 00                	push   0x0
c001169e:	6a 00                	push   0x0
c00116a0:	6a 27                	push   0x27
c00116a2:	e8 ab 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116a7:	83 c4 34             	add    esp,0x34
c00116aa:	5e                   	pop    esi
c00116ab:	5f                   	pop    edi
c00116ac:	c3                   	ret    

c00116ad <KeDeinitSignals(SigHandlerBlock*)>:
c00116ad:	e9 31 64 ff ff       	jmp    c0007ae3 <free>

c00116b2 <KeInitSignals()>:
c00116b2:	53                   	push   ebx
c00116b3:	83 ec 14             	sub    esp,0x14
c00116b6:	68 c8 00 00 00       	push   0xc8
c00116bb:	e8 13 64 ff ff       	call   c0007ad3 <malloc>
c00116c0:	83 c4 0c             	add    esp,0xc
c00116c3:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00116cd:	89 c3                	mov    ebx,eax
c00116cf:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00116d9:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00116df:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c00116e3:	6a 20                	push   0x20
c00116e5:	6a 00                	push   0x0
c00116e7:	50                   	push   eax
c00116e8:	e8 03 ee fe ff       	call   c00004f0 <memset>
c00116ed:	83 c4 0c             	add    esp,0xc
c00116f0:	6a 44                	push   0x44
c00116f2:	6a 00                	push   0x0
c00116f4:	53                   	push   ebx
c00116f5:	e8 f6 ed fe ff       	call   c00004f0 <memset>
c00116fa:	83 c4 18             	add    esp,0x18
c00116fd:	89 d8                	mov    eax,ebx
c00116ff:	5b                   	pop    ebx
c0011700:	c3                   	ret    

c0011701 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011701:	53                   	push   ebx
c0011702:	b8 01 00 00 00       	mov    eax,0x1
c0011707:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001170b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001170f:	83 f9 10             	cmp    ecx,0x10
c0011712:	7f 21                	jg     c0011735 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011718:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001171b:	89 03                	mov    DWORD PTR [ebx],eax
c001171d:	b8 01 00 00 00       	mov    eax,0x1
c0011722:	d3 e0                	shl    eax,cl
c0011724:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011728:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001172b:	31 c0                	xor    eax,eax
c001172d:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011735:	5b                   	pop    ebx
c0011736:	c3                   	ret    

c0011737 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011737:	55                   	push   ebp
c0011738:	57                   	push   edi
c0011739:	bf 08 00 00 00       	mov    edi,0x8
c001173e:	56                   	push   esi
c001173f:	53                   	push   ebx
c0011740:	83 ec 18             	sub    esp,0x18
c0011743:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011747:	68 f2 1f 02 c0       	push   0xc0021ff2
c001174c:	e8 b9 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011751:	83 c4 10             	add    esp,0x10
c0011754:	31 c9                	xor    ecx,ecx
c0011756:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001175d:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011763:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011767:	99                   	cdq    
c0011768:	f7 ff                	idiv   edi
c001176a:	8d 42 24             	lea    eax,[edx+0x24]
c001176d:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011771:	85 f6                	test   esi,esi
c0011773:	75 1a                	jne    c001178f <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011775:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011779:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c001177d:	50                   	push   eax
c001177e:	50                   	push   eax
c001177f:	52                   	push   edx
c0011780:	68 03 20 02 c0       	push   0xc0022003
c0011785:	e8 80 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001178a:	83 c4 10             	add    esp,0x10
c001178d:	eb 1b                	jmp    c00117aa <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c001178f:	41                   	inc    ecx
c0011790:	83 f9 08             	cmp    ecx,0x8
c0011793:	75 ce                	jne    c0011763 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011795:	83 ec 0c             	sub    esp,0xc
c0011798:	be 01 00 00 00       	mov    esi,0x1
c001179d:	68 24 20 02 c0       	push   0xc0022024
c00117a2:	e8 63 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00117a7:	83 c4 10             	add    esp,0x10
c00117aa:	83 c4 0c             	add    esp,0xc
c00117ad:	89 f0                	mov    eax,esi
c00117af:	5b                   	pop    ebx
c00117b0:	5e                   	pop    esi
c00117b1:	5f                   	pop    edi
c00117b2:	5d                   	pop    ebp
c00117b3:	c3                   	ret    

c00117b4 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00117b4:	55                   	push   ebp
c00117b5:	57                   	push   edi
c00117b6:	56                   	push   esi
c00117b7:	53                   	push   ebx
c00117b8:	51                   	push   ecx
c00117b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00117bd:	85 db                	test   ebx,ebx
c00117bf:	0f 84 bc 00 00 00    	je     c0011881 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117c5:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00117cc:	0f 84 af 00 00 00    	je     c0011881 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117d2:	31 c9                	xor    ecx,ecx
c00117d4:	bf 08 00 00 00       	mov    edi,0x8
c00117d9:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00117df:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00117e2:	99                   	cdq    
c00117e3:	f7 ff                	idiv   edi
c00117e5:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00117ec:	85 ed                	test   ebp,ebp
c00117ee:	0f 84 9e 00 00 00    	je     c0011892 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00117f4:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00117fa:	89 e9                	mov    ecx,ebp
c00117fc:	bf 01 00 00 00       	mov    edi,0x1
c0011801:	d3 e7                	shl    edi,cl
c0011803:	31 c9                	xor    ecx,ecx
c0011805:	89 04 24             	mov    DWORD PTR [esp],eax
c0011808:	b8 01 00 00 00       	mov    eax,0x1
c001180d:	d3 e0                	shl    eax,cl
c001180f:	85 04 24             	test   DWORD PTR [esp],eax
c0011812:	74 06                	je     c001181a <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011814:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011818:	75 67                	jne    c0011881 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001181a:	41                   	inc    ecx
c001181b:	83 f9 11             	cmp    ecx,0x11
c001181e:	75 e8                	jne    c0011808 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011820:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011823:	46                   	inc    esi
c0011824:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001182a:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011835:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001183c:	09 f8                	or     eax,edi
c001183e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011844:	31 c0                	xor    eax,eax
c0011846:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001184e:	74 09                	je     c0011859 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011850:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011857:	eb 06                	jmp    c001185f <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011859:	40                   	inc    eax
c001185a:	83 f8 08             	cmp    eax,0x8
c001185d:	75 e7                	jne    c0011846 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c001185f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011863:	83 fd 09             	cmp    ebp,0x9
c0011866:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011869:	89 2a                	mov    DWORD PTR [edx],ebp
c001186b:	75 07                	jne    c0011874 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c001186d:	b8 40 16 01 c0       	mov    eax,0xc0011640
c0011872:	eb 31                	jmp    c00118a5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011874:	83 f8 01             	cmp    eax,0x1
c0011877:	75 0c                	jne    c0011885 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011879:	f7 d7                	not    edi
c001187b:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011881:	31 c0                	xor    eax,eax
c0011883:	eb 20                	jmp    c00118a5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011885:	85 c0                	test   eax,eax
c0011887:	75 1c                	jne    c00118a5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011889:	8b 04 ad 20 34 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcbe0]
c0011890:	eb 13                	jmp    c00118a5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011892:	41                   	inc    ecx
c0011893:	46                   	inc    esi
c0011894:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001189a:	83 f9 08             	cmp    ecx,0x8
c001189d:	0f 85 36 ff ff ff    	jne    c00117d9 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00118a3:	eb dc                	jmp    c0011881 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118a5:	5a                   	pop    edx
c00118a6:	5b                   	pop    ebx
c00118a7:	5e                   	pop    esi
c00118a8:	5f                   	pop    edi
c00118a9:	5d                   	pop    ebp
c00118aa:	c3                   	ret    

c00118ab <KiCheckSignalZ>:
c00118ab:	83 ec 10             	sub    esp,0x10
c00118ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00118b2:	50                   	push   eax
c00118b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118bb:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00118c1:	e8 ee fe ff ff       	call   c00117b4 <KeCheckSignal(SigHandlerBlock*, int*)>
c00118c6:	5a                   	pop    edx
c00118c7:	31 d2                	xor    edx,edx
c00118c9:	59                   	pop    ecx
c00118ca:	85 c0                	test   eax,eax
c00118cc:	74 19                	je     c00118e7 <KiCheckSignalZ+0x3c>
c00118ce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00118d4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00118d7:	89 02                	mov    DWORD PTR [edx],eax
c00118d9:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00118e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118e4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00118e7:	89 d0                	mov    eax,edx
c00118e9:	83 c4 10             	add    esp,0x10
c00118ec:	c3                   	ret    

c00118ed <KeCompleteSignal(SigHandlerBlock*, int)>:
c00118ed:	56                   	push   esi
c00118ee:	53                   	push   ebx
c00118ef:	bb 01 00 00 00       	mov    ebx,0x1
c00118f4:	52                   	push   edx
c00118f5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00118f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00118fd:	d3 e3                	shl    ebx,cl
c00118ff:	83 f9 10             	cmp    ecx,0x10
c0011902:	7f 08                	jg     c001190c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011904:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001190a:	75 10                	jne    c001191c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001190c:	83 ec 0c             	sub    esp,0xc
c001190f:	68 35 20 02 c0       	push   0xc0022035
c0011914:	e8 80 f9 ff ff       	call   c0011299 <KePanic(char const*)>
c0011919:	83 c4 10             	add    esp,0x10
c001191c:	f7 d3                	not    ebx
c001191e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011924:	58                   	pop    eax
c0011925:	5b                   	pop    ebx
c0011926:	5e                   	pop    esi
c0011927:	c3                   	ret    

c0011928 <KiFinishSignalZ>:
c0011928:	53                   	push   ebx
c0011929:	83 ec 10             	sub    esp,0x10
c001192c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011930:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011933:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011938:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001193b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011941:	e8 a7 ff ff ff       	call   c00118ed <KeCompleteSignal(SigHandlerBlock*, int)>
c0011946:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001194c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011953:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001195a:	83 c4 18             	add    esp,0x18
c001195d:	5b                   	pop    ebx
c001195e:	c3                   	ret    

c001195f <SysSeekDir(regs*)>:
c001195f:	31 c0                	xor    eax,eax
c0011961:	31 d2                	xor    edx,edx
c0011963:	c3                   	ret    

c0011964 <SysTellDir(regs*)>:
c0011964:	31 c0                	xor    eax,eax
c0011966:	31 d2                	xor    edx,edx
c0011968:	c3                   	ret    

c0011969 <SysVerify(regs*)>:
c0011969:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001196d:	31 d2                	xor    edx,edx
c001196f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011972:	c3                   	ret    

c0011973 <SysGetArgc(regs*)>:
c0011973:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011978:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001197b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011981:	89 c2                	mov    edx,eax
c0011983:	c1 fa 1f             	sar    edx,0x1f
c0011986:	c3                   	ret    

c0011987 <SysTTYName(regs*)>:
c0011987:	b8 01 00 00 00       	mov    eax,0x1
c001198c:	31 d2                	xor    edx,edx
c001198e:	c3                   	ret    

c001198f <SysFormatDisk(regs*)>:
c001198f:	56                   	push   esi
c0011990:	53                   	push   ebx
c0011991:	83 ec 04             	sub    esp,0x4
c0011994:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011998:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c001199e:	eb 2a                	jmp    c00119ca <SysFormatDisk(regs*)+0x3b>
c00119a0:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00119a3:	83 ec 0c             	sub    esp,0xc
c00119a6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00119a9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119ab:	51                   	push   ecx
c00119ac:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00119af:	51                   	push   ecx
c00119b0:	50                   	push   eax
c00119b1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00119b8:	50                   	push   eax
c00119b9:	53                   	push   ebx
c00119ba:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00119bd:	83 c4 20             	add    esp,0x20
c00119c0:	83 f8 08             	cmp    eax,0x8
c00119c3:	89 c1                	mov    ecx,eax
c00119c5:	75 14                	jne    c00119db <SysFormatDisk(regs*)+0x4c>
c00119c7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00119ca:	85 db                	test   ebx,ebx
c00119cc:	75 d2                	jne    c00119a0 <SysFormatDisk(regs*)+0x11>
c00119ce:	b8 03 00 00 00       	mov    eax,0x3
c00119d3:	31 d2                	xor    edx,edx
c00119d5:	83 c4 04             	add    esp,0x4
c00119d8:	5b                   	pop    ebx
c00119d9:	5e                   	pop    esi
c00119da:	c3                   	ret    
c00119db:	85 c0                	test   eax,eax
c00119dd:	74 13                	je     c00119f2 <SysFormatDisk(regs*)+0x63>
c00119df:	31 d2                	xor    edx,edx
c00119e1:	83 f9 09             	cmp    ecx,0x9
c00119e4:	b8 01 00 00 00       	mov    eax,0x1
c00119e9:	74 ea                	je     c00119d5 <SysFormatDisk(regs*)+0x46>
c00119eb:	b8 02 00 00 00       	mov    eax,0x2
c00119f0:	eb e1                	jmp    c00119d3 <SysFormatDisk(regs*)+0x44>
c00119f2:	31 c0                	xor    eax,eax
c00119f4:	eb dd                	jmp    c00119d3 <SysFormatDisk(regs*)+0x44>

c00119f6 <SysSetDiskVolumeLabel(regs*)>:
c00119f6:	56                   	push   esi
c00119f7:	53                   	push   ebx
c00119f8:	83 ec 04             	sub    esp,0x4
c00119fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00119ff:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a02:	83 f8 19             	cmp    eax,0x19
c0011a05:	77 33                	ja     c0011a3a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a07:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011a0e:	85 c9                	test   ecx,ecx
c0011a10:	74 28                	je     c0011a3a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a12:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011a15:	85 db                	test   ebx,ebx
c0011a17:	74 21                	je     c0011a3a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a19:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011a1f:	85 d2                	test   edx,edx
c0011a21:	74 17                	je     c0011a3a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a23:	8b 32                	mov    esi,DWORD PTR [edx]
c0011a25:	53                   	push   ebx
c0011a26:	50                   	push   eax
c0011a27:	51                   	push   ecx
c0011a28:	52                   	push   edx
c0011a29:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011a2c:	83 c4 10             	add    esp,0x10
c0011a2f:	83 c4 04             	add    esp,0x4
c0011a32:	5b                   	pop    ebx
c0011a33:	5e                   	pop    esi
c0011a34:	89 c2                	mov    edx,eax
c0011a36:	c1 fa 1f             	sar    edx,0x1f
c0011a39:	c3                   	ret    
c0011a3a:	83 c4 04             	add    esp,0x4
c0011a3d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a42:	5b                   	pop    ebx
c0011a43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a48:	5e                   	pop    esi
c0011a49:	c3                   	ret    

c0011a4a <SysGetDiskVolumeLabel(regs*)>:
c0011a4a:	57                   	push   edi
c0011a4b:	56                   	push   esi
c0011a4c:	53                   	push   ebx
c0011a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a51:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011a54:	83 fa 19             	cmp    edx,0x19
c0011a57:	77 3c                	ja     c0011a95 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a59:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011a60:	85 c9                	test   ecx,ecx
c0011a62:	74 31                	je     c0011a95 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a64:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011a67:	85 db                	test   ebx,ebx
c0011a69:	74 2a                	je     c0011a95 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a6b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011a6e:	85 f6                	test   esi,esi
c0011a70:	74 23                	je     c0011a95 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a72:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011a78:	85 c0                	test   eax,eax
c0011a7a:	74 19                	je     c0011a95 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a7c:	83 ec 0c             	sub    esp,0xc
c0011a7f:	8b 38                	mov    edi,DWORD PTR [eax]
c0011a81:	56                   	push   esi
c0011a82:	53                   	push   ebx
c0011a83:	52                   	push   edx
c0011a84:	51                   	push   ecx
c0011a85:	50                   	push   eax
c0011a86:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011a89:	83 c4 20             	add    esp,0x20
c0011a8c:	5b                   	pop    ebx
c0011a8d:	5e                   	pop    esi
c0011a8e:	89 c2                	mov    edx,eax
c0011a90:	c1 fa 1f             	sar    edx,0x1f
c0011a93:	5f                   	pop    edi
c0011a94:	c3                   	ret    
c0011a95:	5b                   	pop    ebx
c0011a96:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a9b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011aa0:	5e                   	pop    esi
c0011aa1:	5f                   	pop    edi
c0011aa2:	c3                   	ret    

c0011aa3 <SysShutdown(regs*)>:
c0011aa3:	57                   	push   edi
c0011aa4:	56                   	push   esi
c0011aa5:	83 ec 04             	sub    esp,0x4
c0011aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011aac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011aaf:	85 c0                	test   eax,eax
c0011ab1:	74 1e                	je     c0011ad1 <SysShutdown(regs*)+0x2e>
c0011ab3:	83 f8 01             	cmp    eax,0x1
c0011ab6:	74 5f                	je     c0011b17 <SysShutdown(regs*)+0x74>
c0011ab8:	83 f8 02             	cmp    eax,0x2
c0011abb:	be ff ff ff ff       	mov    esi,0xffffffff
c0011ac0:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011ac5:	74 32                	je     c0011af9 <SysShutdown(regs*)+0x56>
c0011ac7:	83 c4 04             	add    esp,0x4
c0011aca:	89 f0                	mov    eax,esi
c0011acc:	5e                   	pop    esi
c0011acd:	89 fa                	mov    edx,edi
c0011acf:	5f                   	pop    edi
c0011ad0:	c3                   	ret    
c0011ad1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011ad6:	be ff ff ff ff       	mov    esi,0xffffffff
c0011adb:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011ae0:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ae2:	6a 00                	push   0x0
c0011ae4:	6a 00                	push   0x0
c0011ae6:	6a 00                	push   0x0
c0011ae8:	50                   	push   eax
c0011ae9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011aec:	83 c4 10             	add    esp,0x10
c0011aef:	89 f0                	mov    eax,esi
c0011af1:	83 c4 04             	add    esp,0x4
c0011af4:	89 fa                	mov    edx,edi
c0011af6:	5e                   	pop    esi
c0011af7:	5f                   	pop    edi
c0011af8:	c3                   	ret    
c0011af9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011afe:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b00:	6a 00                	push   0x0
c0011b02:	6a 00                	push   0x0
c0011b04:	6a 01                	push   0x1
c0011b06:	50                   	push   eax
c0011b07:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	89 f0                	mov    eax,esi
c0011b0f:	83 c4 04             	add    esp,0x4
c0011b12:	89 fa                	mov    edx,edi
c0011b14:	5e                   	pop    esi
c0011b15:	5f                   	pop    edi
c0011b16:	c3                   	ret    
c0011b17:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011b1c:	85 c0                	test   eax,eax
c0011b1e:	74 02                	je     c0011b22 <SysShutdown(regs*)+0x7f>
c0011b20:	ff d0                	call   eax
c0011b22:	31 f6                	xor    esi,esi
c0011b24:	83 c4 04             	add    esp,0x4
c0011b27:	89 f0                	mov    eax,esi
c0011b29:	31 ff                	xor    edi,edi
c0011b2b:	5e                   	pop    esi
c0011b2c:	89 fa                	mov    edx,edi
c0011b2e:	5f                   	pop    edi
c0011b2f:	c3                   	ret    

c0011b30 <SysRealpath(regs*)>:
c0011b30:	53                   	push   ebx
c0011b31:	83 ec 08             	sub    esp,0x8
c0011b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b38:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011b3b:	85 c9                	test   ecx,ecx
c0011b3d:	74 36                	je     c0011b75 <SysRealpath(regs*)+0x45>
c0011b3f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b42:	31 d2                	xor    edx,edx
c0011b44:	b8 01 00 00 00       	mov    eax,0x1
c0011b49:	85 db                	test   ebx,ebx
c0011b4b:	75 05                	jne    c0011b52 <SysRealpath(regs*)+0x22>
c0011b4d:	83 c4 08             	add    esp,0x8
c0011b50:	5b                   	pop    ebx
c0011b51:	c3                   	ret    
c0011b52:	6a 00                	push   0x0
c0011b54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b59:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b5c:	05 0c 01 00 00       	add    eax,0x10c
c0011b61:	50                   	push   eax
c0011b62:	51                   	push   ecx
c0011b63:	53                   	push   ebx
c0011b64:	e8 3f 9a ff ff       	call   c000b5a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011b69:	83 c4 10             	add    esp,0x10
c0011b6c:	31 c0                	xor    eax,eax
c0011b6e:	31 d2                	xor    edx,edx
c0011b70:	83 c4 08             	add    esp,0x8
c0011b73:	5b                   	pop    ebx
c0011b74:	c3                   	ret    
c0011b75:	b8 01 00 00 00       	mov    eax,0x1
c0011b7a:	31 d2                	xor    edx,edx
c0011b7c:	eb f2                	jmp    c0011b70 <SysRealpath(regs*)+0x40>

c0011b7e <SysReadDir(regs*)>:
c0011b7e:	53                   	push   ebx
c0011b7f:	83 ec 18             	sub    esp,0x18
c0011b82:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b86:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011b89:	83 f8 02             	cmp    eax,0x2
c0011b8c:	76 4f                	jbe    c0011bdd <SysReadDir(regs*)+0x5f>
c0011b8e:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011b95:	77 52                	ja     c0011be9 <SysReadDir(regs*)+0x6b>
c0011b97:	83 ec 0c             	sub    esp,0xc
c0011b9a:	50                   	push   eax
c0011b9b:	e8 fb 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ba0:	83 c4 10             	add    esp,0x10
c0011ba3:	85 c0                	test   eax,eax
c0011ba5:	74 42                	je     c0011be9 <SysReadDir(regs*)+0x6b>
c0011ba7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011baf:	83 ec 0c             	sub    esp,0xc
c0011bb2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011bb6:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bb8:	51                   	push   ecx
c0011bb9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011bbc:	51                   	push   ecx
c0011bbd:	6a 00                	push   0x0
c0011bbf:	68 10 01 00 00       	push   0x110
c0011bc4:	50                   	push   eax
c0011bc5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011bc8:	83 c4 20             	add    esp,0x20
c0011bcb:	85 c0                	test   eax,eax
c0011bcd:	89 c1                	mov    ecx,eax
c0011bcf:	74 27                	je     c0011bf8 <SysReadDir(regs*)+0x7a>
c0011bd1:	31 d2                	xor    edx,edx
c0011bd3:	83 f9 07             	cmp    ecx,0x7
c0011bd6:	b8 02 00 00 00       	mov    eax,0x2
c0011bdb:	75 16                	jne    c0011bf3 <SysReadDir(regs*)+0x75>
c0011bdd:	b8 01 00 00 00       	mov    eax,0x1
c0011be2:	31 d2                	xor    edx,edx
c0011be4:	83 c4 18             	add    esp,0x18
c0011be7:	5b                   	pop    ebx
c0011be8:	c3                   	ret    
c0011be9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bee:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bf3:	83 c4 18             	add    esp,0x18
c0011bf6:	5b                   	pop    ebx
c0011bf7:	c3                   	ret    
c0011bf8:	31 c0                	xor    eax,eax
c0011bfa:	31 d2                	xor    edx,edx
c0011bfc:	eb e6                	jmp    c0011be4 <SysReadDir(regs*)+0x66>

c0011bfe <SysIsATTY(regs*)>:
c0011bfe:	83 ec 0c             	sub    esp,0xc
c0011c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c05:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c08:	83 f8 02             	cmp    eax,0x2
c0011c0b:	76 07                	jbe    c0011c14 <SysIsATTY(regs*)+0x16>
c0011c0d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c12:	75 26                	jne    c0011c3a <SysIsATTY(regs*)+0x3c>
c0011c14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c19:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011c22:	85 c0                	test   eax,eax
c0011c24:	74 24                	je     c0011c4a <SysIsATTY(regs*)+0x4c>
c0011c26:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c28:	83 ec 0c             	sub    esp,0xc
c0011c2b:	50                   	push   eax
c0011c2c:	ff 12                	call   DWORD PTR [edx]
c0011c2e:	83 c4 10             	add    esp,0x10
c0011c31:	31 d2                	xor    edx,edx
c0011c33:	83 c4 0c             	add    esp,0xc
c0011c36:	0f b6 c0             	movzx  eax,al
c0011c39:	c3                   	ret    
c0011c3a:	83 ec 0c             	sub    esp,0xc
c0011c3d:	50                   	push   eax
c0011c3e:	e8 58 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c43:	83 c4 10             	add    esp,0x10
c0011c46:	85 c0                	test   eax,eax
c0011c48:	75 dc                	jne    c0011c26 <SysIsATTY(regs*)+0x28>
c0011c4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c54:	83 c4 0c             	add    esp,0xc
c0011c57:	c3                   	ret    

c0011c58 <SysSeek(regs*)>:
c0011c58:	56                   	push   esi
c0011c59:	53                   	push   ebx
c0011c5a:	83 ec 04             	sub    esp,0x4
c0011c5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c61:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011c64:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011c67:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011c6d:	77 33                	ja     c0011ca2 <SysSeek(regs*)+0x4a>
c0011c6f:	83 ec 0c             	sub    esp,0xc
c0011c72:	51                   	push   ecx
c0011c73:	e8 23 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c78:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011c7b:	83 c4 0c             	add    esp,0xc
c0011c7e:	31 db                	xor    ebx,ebx
c0011c80:	53                   	push   ebx
c0011c81:	51                   	push   ecx
c0011c82:	50                   	push   eax
c0011c83:	e8 da 9c ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0011c88:	83 c4 10             	add    esp,0x10
c0011c8b:	85 c0                	test   eax,eax
c0011c8d:	0f 95 c0             	setne  al
c0011c90:	31 d2                	xor    edx,edx
c0011c92:	0f b6 c0             	movzx  eax,al
c0011c95:	f7 d8                	neg    eax
c0011c97:	83 d2 00             	adc    edx,0x0
c0011c9a:	83 c4 04             	add    esp,0x4
c0011c9d:	5b                   	pop    ebx
c0011c9e:	f7 da                	neg    edx
c0011ca0:	5e                   	pop    esi
c0011ca1:	c3                   	ret    
c0011ca2:	83 c4 04             	add    esp,0x4
c0011ca5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011caa:	5b                   	pop    ebx
c0011cab:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cb0:	5e                   	pop    esi
c0011cb1:	c3                   	ret    

c0011cb2 <SysTell(regs*)>:
c0011cb2:	53                   	push   ebx
c0011cb3:	83 ec 08             	sub    esp,0x8
c0011cb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cbd:	83 f8 02             	cmp    eax,0x2
c0011cc0:	76 4e                	jbe    c0011d10 <SysTell(regs*)+0x5e>
c0011cc2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011cc7:	76 19                	jbe    c0011ce2 <SysTell(regs*)+0x30>
c0011cc9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ccc:	31 d2                	xor    edx,edx
c0011cce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011cd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cdb:	83 c4 08             	add    esp,0x8
c0011cde:	31 c0                	xor    eax,eax
c0011ce0:	5b                   	pop    ebx
c0011ce1:	c3                   	ret    
c0011ce2:	83 ec 0c             	sub    esp,0xc
c0011ce5:	50                   	push   eax
c0011ce6:	e8 b0 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ceb:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011cee:	5a                   	pop    edx
c0011cef:	59                   	pop    ecx
c0011cf0:	53                   	push   ebx
c0011cf1:	50                   	push   eax
c0011cf2:	e8 17 9d ff ff       	call   c000ba0e <File::tell(unsigned long long*)>
c0011cf7:	83 c4 10             	add    esp,0x10
c0011cfa:	85 c0                	test   eax,eax
c0011cfc:	0f 95 c0             	setne  al
c0011cff:	31 d2                	xor    edx,edx
c0011d01:	0f b6 c0             	movzx  eax,al
c0011d04:	f7 d8                	neg    eax
c0011d06:	83 d2 00             	adc    edx,0x0
c0011d09:	83 c4 08             	add    esp,0x8
c0011d0c:	5b                   	pop    ebx
c0011d0d:	f7 da                	neg    edx
c0011d0f:	c3                   	ret    
c0011d10:	83 c4 08             	add    esp,0x8
c0011d13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d18:	5b                   	pop    ebx
c0011d19:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d1e:	c3                   	ret    

c0011d1f <SysSize(regs*)>:
c0011d1f:	53                   	push   ebx
c0011d20:	83 ec 18             	sub    esp,0x18
c0011d23:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d27:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d2a:	83 f8 02             	cmp    eax,0x2
c0011d2d:	76 54                	jbe    c0011d83 <SysSize(regs*)+0x64>
c0011d2f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d34:	76 19                	jbe    c0011d4f <SysSize(regs*)+0x30>
c0011d36:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d39:	31 d2                	xor    edx,edx
c0011d3b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d48:	83 c4 18             	add    esp,0x18
c0011d4b:	31 c0                	xor    eax,eax
c0011d4d:	5b                   	pop    ebx
c0011d4e:	c3                   	ret    
c0011d4f:	83 ec 0c             	sub    esp,0xc
c0011d52:	50                   	push   eax
c0011d53:	e8 43 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d58:	83 c4 0c             	add    esp,0xc
c0011d5b:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011d5f:	52                   	push   edx
c0011d60:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d63:	52                   	push   edx
c0011d64:	50                   	push   eax
c0011d65:	e8 3c 9e ff ff       	call   c000bba6 <File::stat(unsigned long long*, bool*)>
c0011d6a:	83 c4 10             	add    esp,0x10
c0011d6d:	85 c0                	test   eax,eax
c0011d6f:	0f 95 c0             	setne  al
c0011d72:	31 d2                	xor    edx,edx
c0011d74:	0f b6 c0             	movzx  eax,al
c0011d77:	f7 d8                	neg    eax
c0011d79:	83 d2 00             	adc    edx,0x0
c0011d7c:	83 c4 18             	add    esp,0x18
c0011d7f:	5b                   	pop    ebx
c0011d80:	f7 da                	neg    edx
c0011d82:	c3                   	ret    
c0011d83:	83 c4 18             	add    esp,0x18
c0011d86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d8b:	5b                   	pop    ebx
c0011d8c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d91:	c3                   	ret    

c0011d92 <SysSizeFromFilename(regs*)>:
c0011d92:	57                   	push   edi
c0011d93:	56                   	push   esi
c0011d94:	53                   	push   ebx
c0011d95:	83 ec 10             	sub    esp,0x10
c0011d98:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011d9c:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011d9f:	83 fb 02             	cmp    ebx,0x2
c0011da2:	0f 86 82 00 00 00    	jbe    c0011e2a <SysSizeFromFilename(regs*)+0x98>
c0011da8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011dae:	76 1b                	jbe    c0011dcb <SysSizeFromFilename(regs*)+0x39>
c0011db0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011db3:	31 d2                	xor    edx,edx
c0011db5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011dbb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011dc2:	83 c4 10             	add    esp,0x10
c0011dc5:	31 c0                	xor    eax,eax
c0011dc7:	5b                   	pop    ebx
c0011dc8:	5e                   	pop    esi
c0011dc9:	5f                   	pop    edi
c0011dca:	c3                   	ret    
c0011dcb:	83 ec 0c             	sub    esp,0xc
c0011dce:	68 14 01 00 00       	push   0x114
c0011dd3:	e8 fb 5c ff ff       	call   c0007ad3 <malloc>
c0011dd8:	6a 01                	push   0x1
c0011dda:	89 c7                	mov    edi,eax
c0011ddc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011de1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011de4:	50                   	push   eax
c0011de5:	53                   	push   ebx
c0011de6:	57                   	push   edi
c0011de7:	e8 da 99 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c0011dec:	83 c4 1c             	add    esp,0x1c
c0011def:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011df3:	50                   	push   eax
c0011df4:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011df7:	52                   	push   edx
c0011df8:	57                   	push   edi
c0011df9:	e8 a8 9d ff ff       	call   c000bba6 <File::stat(unsigned long long*, bool*)>
c0011dfe:	83 c4 10             	add    esp,0x10
c0011e01:	85 ff                	test   edi,edi
c0011e03:	89 c3                	mov    ebx,eax
c0011e05:	74 0c                	je     c0011e13 <SysSizeFromFilename(regs*)+0x81>
c0011e07:	8b 07                	mov    eax,DWORD PTR [edi]
c0011e09:	83 ec 0c             	sub    esp,0xc
c0011e0c:	57                   	push   edi
c0011e0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e10:	83 c4 10             	add    esp,0x10
c0011e13:	31 c0                	xor    eax,eax
c0011e15:	85 db                	test   ebx,ebx
c0011e17:	0f 95 c0             	setne  al
c0011e1a:	31 d2                	xor    edx,edx
c0011e1c:	f7 d8                	neg    eax
c0011e1e:	83 d2 00             	adc    edx,0x0
c0011e21:	83 c4 10             	add    esp,0x10
c0011e24:	5b                   	pop    ebx
c0011e25:	f7 da                	neg    edx
c0011e27:	5e                   	pop    esi
c0011e28:	5f                   	pop    edi
c0011e29:	c3                   	ret    
c0011e2a:	83 c4 10             	add    esp,0x10
c0011e2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e32:	5b                   	pop    ebx
c0011e33:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e38:	5e                   	pop    esi
c0011e39:	5f                   	pop    edi
c0011e3a:	c3                   	ret    

c0011e3b <SysSizeFromFilenameNoSymlink(regs*)>:
c0011e3b:	55                   	push   ebp
c0011e3c:	57                   	push   edi
c0011e3d:	56                   	push   esi
c0011e3e:	53                   	push   ebx
c0011e3f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011e45:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011e4c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011e4f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011e52:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011e58:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e5b:	83 f8 02             	cmp    eax,0x2
c0011e5e:	0f 86 97 00 00 00    	jbe    c0011efb <SysSizeFromFilenameNoSymlink(regs*)+0xc0>
c0011e64:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011e69:	76 1f                	jbe    c0011e8a <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0011e6b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011e6e:	31 d2                	xor    edx,edx
c0011e70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e7d:	31 c0                	xor    eax,eax
c0011e7f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011e85:	5b                   	pop    ebx
c0011e86:	5e                   	pop    esi
c0011e87:	5f                   	pop    edi
c0011e88:	5d                   	pop    ebp
c0011e89:	c3                   	ret    
c0011e8a:	83 ec 0c             	sub    esp,0xc
c0011e8d:	68 14 01 00 00       	push   0x114
c0011e92:	e8 3c 5c ff ff       	call   c0007ad3 <malloc>
c0011e97:	6a 00                	push   0x0
c0011e99:	89 c5                	mov    ebp,eax
c0011e9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ea0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ea3:	50                   	push   eax
c0011ea4:	57                   	push   edi
c0011ea5:	55                   	push   ebp
c0011ea6:	e8 1b 99 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c0011eab:	83 c4 1c             	add    esp,0x1c
c0011eae:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0011eb2:	50                   	push   eax
c0011eb3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011eb6:	52                   	push   edx
c0011eb7:	55                   	push   ebp
c0011eb8:	e8 e9 9c ff ff       	call   c000bba6 <File::stat(unsigned long long*, bool*)>
c0011ebd:	83 c4 10             	add    esp,0x10
c0011ec0:	85 ed                	test   ebp,ebp
c0011ec2:	89 c3                	mov    ebx,eax
c0011ec4:	74 0d                	je     c0011ed3 <SysSizeFromFilenameNoSymlink(regs*)+0x98>
c0011ec6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011ec9:	83 ec 0c             	sub    esp,0xc
c0011ecc:	55                   	push   ebp
c0011ecd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ed0:	83 c4 10             	add    esp,0x10
c0011ed3:	85 db                	test   ebx,ebx
c0011ed5:	75 24                	jne    c0011efb <SysSizeFromFilenameNoSymlink(regs*)+0xc0>
c0011ed7:	83 ec 08             	sub    esp,0x8
c0011eda:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011ede:	50                   	push   eax
c0011edf:	57                   	push   edi
c0011ee0:	e8 27 90 ff ff       	call   c000af0c <KeDereferenceSymlink(char const*, char*)>
c0011ee5:	83 c4 10             	add    esp,0x10
c0011ee8:	31 d2                	xor    edx,edx
c0011eea:	89 c1                	mov    ecx,eax
c0011eec:	31 c0                	xor    eax,eax
c0011eee:	83 f9 01             	cmp    ecx,0x1
c0011ef1:	75 8c                	jne    c0011e7f <SysSizeFromFilenameNoSymlink(regs*)+0x44>
c0011ef3:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011ef9:	eb 84                	jmp    c0011e7f <SysSizeFromFilenameNoSymlink(regs*)+0x44>
c0011efb:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011f01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f06:	5b                   	pop    ebx
c0011f07:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f0c:	5e                   	pop    esi
c0011f0d:	5f                   	pop    edi
c0011f0e:	5d                   	pop    ebp
c0011f0f:	c3                   	ret    

c0011f10 <SysClose(regs*)>:
c0011f10:	53                   	push   ebx
c0011f11:	83 ec 08             	sub    esp,0x8
c0011f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f18:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f1b:	83 f8 02             	cmp    eax,0x2
c0011f1e:	76 41                	jbe    c0011f61 <SysClose(regs*)+0x51>
c0011f20:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011f26:	83 fa 01             	cmp    edx,0x1
c0011f29:	76 2d                	jbe    c0011f58 <SysClose(regs*)+0x48>
c0011f2b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f30:	77 2f                	ja     c0011f61 <SysClose(regs*)+0x51>
c0011f32:	83 ec 0c             	sub    esp,0xc
c0011f35:	50                   	push   eax
c0011f36:	e8 60 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0011f3e:	89 c3                	mov    ebx,eax
c0011f40:	e8 bd 99 ff ff       	call   c000b902 <File::close()>
c0011f45:	83 c4 10             	add    esp,0x10
c0011f48:	85 db                	test   ebx,ebx
c0011f4a:	74 0c                	je     c0011f58 <SysClose(regs*)+0x48>
c0011f4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f4e:	83 ec 0c             	sub    esp,0xc
c0011f51:	53                   	push   ebx
c0011f52:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f55:	83 c4 10             	add    esp,0x10
c0011f58:	83 c4 08             	add    esp,0x8
c0011f5b:	31 c0                	xor    eax,eax
c0011f5d:	5b                   	pop    ebx
c0011f5e:	31 d2                	xor    edx,edx
c0011f60:	c3                   	ret    
c0011f61:	83 c4 08             	add    esp,0x8
c0011f64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f69:	5b                   	pop    ebx
c0011f6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f6f:	c3                   	ret    

c0011f70 <SysOpenDir(regs*)>:
c0011f70:	56                   	push   esi
c0011f71:	53                   	push   ebx
c0011f72:	83 ec 04             	sub    esp,0x4
c0011f75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f79:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011f7c:	85 c9                	test   ecx,ecx
c0011f7e:	74 5d                	je     c0011fdd <SysOpenDir(regs*)+0x6d>
c0011f80:	83 ec 0c             	sub    esp,0xc
c0011f83:	68 14 01 00 00       	push   0x114
c0011f88:	e8 46 5b ff ff       	call   c0007ad3 <malloc>
c0011f8d:	83 c4 0c             	add    esp,0xc
c0011f90:	89 c6                	mov    esi,eax
c0011f92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f9a:	50                   	push   eax
c0011f9b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011f9e:	52                   	push   edx
c0011f9f:	56                   	push   esi
c0011fa0:	e8 bf 9d ff ff       	call   c000bd64 <Directory::Directory(char const*, Process*)>
c0011fa5:	83 c4 10             	add    esp,0x10
c0011fa8:	85 f6                	test   esi,esi
c0011faa:	74 31                	je     c0011fdd <SysOpenDir(regs*)+0x6d>
c0011fac:	83 ec 0c             	sub    esp,0xc
c0011faf:	56                   	push   esi
c0011fb0:	e8 77 9e ff ff       	call   c000be2c <Directory::open()>
c0011fb5:	83 c4 10             	add    esp,0x10
c0011fb8:	85 c0                	test   eax,eax
c0011fba:	75 21                	jne    c0011fdd <SysOpenDir(regs*)+0x6d>
c0011fbc:	83 ec 0c             	sub    esp,0xc
c0011fbf:	56                   	push   esi
c0011fc0:	e8 d9 71 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0011fc5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011fc8:	83 c4 10             	add    esp,0x10
c0011fcb:	89 02                	mov    DWORD PTR [edx],eax
c0011fcd:	c1 f8 1f             	sar    eax,0x1f
c0011fd0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011fd3:	83 c4 04             	add    esp,0x4
c0011fd6:	31 c0                	xor    eax,eax
c0011fd8:	5b                   	pop    ebx
c0011fd9:	31 d2                	xor    edx,edx
c0011fdb:	5e                   	pop    esi
c0011fdc:	c3                   	ret    
c0011fdd:	83 c4 04             	add    esp,0x4
c0011fe0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fe5:	5b                   	pop    ebx
c0011fe6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011feb:	5e                   	pop    esi
c0011fec:	c3                   	ret    

c0011fed <SysMakeDir(regs*)>:
c0011fed:	56                   	push   esi
c0011fee:	53                   	push   ebx
c0011fef:	83 ec 10             	sub    esp,0x10
c0011ff2:	68 14 01 00 00       	push   0x114
c0011ff7:	e8 d7 5a ff ff       	call   c0007ad3 <malloc>
c0011ffc:	83 c4 0c             	add    esp,0xc
c0011fff:	89 c3                	mov    ebx,eax
c0012001:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012006:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012009:	50                   	push   eax
c001200a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001200e:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012011:	52                   	push   edx
c0012012:	53                   	push   ebx
c0012013:	e8 4c 9d ff ff       	call   c000bd64 <Directory::Directory(char const*, Process*)>
c0012018:	83 c4 10             	add    esp,0x10
c001201b:	85 db                	test   ebx,ebx
c001201d:	74 2c                	je     c001204b <SysMakeDir(regs*)+0x5e>
c001201f:	83 ec 0c             	sub    esp,0xc
c0012022:	53                   	push   ebx
c0012023:	e8 e4 9f ff ff       	call   c000c00c <Directory::create()>
c0012028:	89 c6                	mov    esi,eax
c001202a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001202c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001202f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012032:	83 c4 10             	add    esp,0x10
c0012035:	31 c0                	xor    eax,eax
c0012037:	85 f6                	test   esi,esi
c0012039:	0f 95 c0             	setne  al
c001203c:	31 d2                	xor    edx,edx
c001203e:	f7 d8                	neg    eax
c0012040:	83 d2 00             	adc    edx,0x0
c0012043:	83 c4 04             	add    esp,0x4
c0012046:	5b                   	pop    ebx
c0012047:	f7 da                	neg    edx
c0012049:	5e                   	pop    esi
c001204a:	c3                   	ret    
c001204b:	83 c4 04             	add    esp,0x4
c001204e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012053:	5b                   	pop    ebx
c0012054:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012059:	5e                   	pop    esi
c001205a:	c3                   	ret    

c001205b <SysCloseDir(regs*)>:
c001205b:	53                   	push   ebx
c001205c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012061:	83 ec 08             	sub    esp,0x8
c0012064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012068:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001206b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012070:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0012073:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0012079:	77 2a                	ja     c00120a5 <SysCloseDir(regs*)+0x4a>
c001207b:	83 ec 0c             	sub    esp,0xc
c001207e:	51                   	push   ecx
c001207f:	e8 17 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012084:	89 04 24             	mov    DWORD PTR [esp],eax
c0012087:	89 c3                	mov    ebx,eax
c0012089:	e8 fa 9d ff ff       	call   c000be88 <Directory::close()>
c001208e:	83 c4 10             	add    esp,0x10
c0012091:	85 db                	test   ebx,ebx
c0012093:	74 0c                	je     c00120a1 <SysCloseDir(regs*)+0x46>
c0012095:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012097:	83 ec 0c             	sub    esp,0xc
c001209a:	53                   	push   ebx
c001209b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001209e:	83 c4 10             	add    esp,0x10
c00120a1:	31 c0                	xor    eax,eax
c00120a3:	31 d2                	xor    edx,edx
c00120a5:	83 c4 08             	add    esp,0x8
c00120a8:	5b                   	pop    ebx
c00120a9:	c3                   	ret    

c00120aa <SysWait(regs*)>:
c00120aa:	83 ec 10             	sub    esp,0x10
c00120ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120b1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00120b4:	52                   	push   edx
c00120b5:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00120b8:	51                   	push   ecx
c00120b9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00120bc:	50                   	push   eax
c00120bd:	e8 0e 3e 00 00       	call   c0015ed0 <waitTask(int, int*, int)>
c00120c2:	83 c4 1c             	add    esp,0x1c
c00120c5:	89 c2                	mov    edx,eax
c00120c7:	c1 fa 1f             	sar    edx,0x1f
c00120ca:	c3                   	ret    

c00120cb <SysNotImpl(regs*)>:
c00120cb:	83 ec 18             	sub    esp,0x18
c00120ce:	68 46 20 02 c0       	push   0xc0022046
c00120d3:	e8 c1 f1 ff ff       	call   c0011299 <KePanic(char const*)>
c00120d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120e2:	83 c4 1c             	add    esp,0x1c
c00120e5:	c3                   	ret    

c00120e6 <SysPanic(regs*)>:
c00120e6:	83 ec 18             	sub    esp,0x18
c00120e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00120ed:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00120f0:	50                   	push   eax
c00120f1:	e8 a3 f1 ff ff       	call   c0011299 <KePanic(char const*)>
c00120f6:	b8 01 00 00 00       	mov    eax,0x1
c00120fb:	31 d2                	xor    edx,edx
c00120fd:	83 c4 1c             	add    esp,0x1c
c0012100:	c3                   	ret    

c0012101 <SysRmdir(regs*)>:
c0012101:	56                   	push   esi
c0012102:	53                   	push   ebx
c0012103:	83 ec 10             	sub    esp,0x10
c0012106:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001210a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001210d:	68 14 01 00 00       	push   0x114
c0012112:	e8 bc 59 ff ff       	call   c0007ad3 <malloc>
c0012117:	6a 00                	push   0x0
c0012119:	89 c3                	mov    ebx,eax
c001211b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012120:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012123:	50                   	push   eax
c0012124:	56                   	push   esi
c0012125:	53                   	push   ebx
c0012126:	e8 9b 96 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c001212b:	83 c4 14             	add    esp,0x14
c001212e:	53                   	push   ebx
c001212f:	e8 3e 99 ff ff       	call   c000ba72 <File::unlink()>
c0012134:	83 c4 10             	add    esp,0x10
c0012137:	85 db                	test   ebx,ebx
c0012139:	89 c6                	mov    esi,eax
c001213b:	74 0c                	je     c0012149 <SysRmdir(regs*)+0x48>
c001213d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001213f:	83 ec 0c             	sub    esp,0xc
c0012142:	53                   	push   ebx
c0012143:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012146:	83 c4 10             	add    esp,0x10
c0012149:	31 c0                	xor    eax,eax
c001214b:	85 f6                	test   esi,esi
c001214d:	0f 95 c0             	setne  al
c0012150:	31 d2                	xor    edx,edx
c0012152:	f7 d8                	neg    eax
c0012154:	83 d2 00             	adc    edx,0x0
c0012157:	83 c4 04             	add    esp,0x4
c001215a:	5b                   	pop    ebx
c001215b:	f7 da                	neg    edx
c001215d:	5e                   	pop    esi
c001215e:	c3                   	ret    

c001215f <SysUnlink(regs*)>:
c001215f:	56                   	push   esi
c0012160:	53                   	push   ebx
c0012161:	83 ec 10             	sub    esp,0x10
c0012164:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012168:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001216b:	68 14 01 00 00       	push   0x114
c0012170:	e8 5e 59 ff ff       	call   c0007ad3 <malloc>
c0012175:	6a 00                	push   0x0
c0012177:	89 c3                	mov    ebx,eax
c0012179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001217e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012181:	50                   	push   eax
c0012182:	56                   	push   esi
c0012183:	53                   	push   ebx
c0012184:	e8 3d 96 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c0012189:	83 c4 14             	add    esp,0x14
c001218c:	53                   	push   ebx
c001218d:	e8 e0 98 ff ff       	call   c000ba72 <File::unlink()>
c0012192:	83 c4 10             	add    esp,0x10
c0012195:	85 db                	test   ebx,ebx
c0012197:	89 c6                	mov    esi,eax
c0012199:	74 0c                	je     c00121a7 <SysUnlink(regs*)+0x48>
c001219b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001219d:	83 ec 0c             	sub    esp,0xc
c00121a0:	53                   	push   ebx
c00121a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121a4:	83 c4 10             	add    esp,0x10
c00121a7:	31 c0                	xor    eax,eax
c00121a9:	85 f6                	test   esi,esi
c00121ab:	0f 95 c0             	setne  al
c00121ae:	31 d2                	xor    edx,edx
c00121b0:	f7 d8                	neg    eax
c00121b2:	83 d2 00             	adc    edx,0x0
c00121b5:	83 c4 04             	add    esp,0x4
c00121b8:	5b                   	pop    ebx
c00121b9:	f7 da                	neg    edx
c00121bb:	5e                   	pop    esi
c00121bc:	c3                   	ret    

c00121bd <SysGetArgv(regs*)>:
c00121bd:	83 ec 0c             	sub    esp,0xc
c00121c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00121c4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00121c7:	85 c0                	test   eax,eax
c00121c9:	78 2c                	js     c00121f7 <SysGetArgv(regs*)+0x3a>
c00121cb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00121d1:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00121d4:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00121da:	7d 1b                	jge    c00121f7 <SysGetArgv(regs*)+0x3a>
c00121dc:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00121e3:	85 c0                	test   eax,eax
c00121e5:	74 18                	je     c00121ff <SysGetArgv(regs*)+0x42>
c00121e7:	83 ec 08             	sub    esp,0x8
c00121ea:	50                   	push   eax
c00121eb:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00121ee:	50                   	push   eax
c00121ef:	e8 5c e4 fe ff       	call   c0000650 <strcpy>
c00121f4:	83 c4 10             	add    esp,0x10
c00121f7:	31 c0                	xor    eax,eax
c00121f9:	31 d2                	xor    edx,edx
c00121fb:	83 c4 0c             	add    esp,0xc
c00121fe:	c3                   	ret    
c00121ff:	b8 01 00 00 00       	mov    eax,0x1
c0012204:	31 d2                	xor    edx,edx
c0012206:	83 c4 0c             	add    esp,0xc
c0012209:	c3                   	ret    

c001220a <SysUSleep(regs*)>:
c001220a:	83 ec 1c             	sub    esp,0x1c
c001220d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012211:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012214:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012217:	6a 00                	push   0x0
c0012219:	6a 64                	push   0x64
c001221b:	52                   	push   edx
c001221c:	50                   	push   eax
c001221d:	e8 2e d1 00 00       	call   c001f350 <__udivdi3>
c0012222:	83 c4 14             	add    esp,0x14
c0012225:	50                   	push   eax
c0012226:	e8 89 3d 00 00       	call   c0015fb4 <milliTenthSleep(unsigned int)>
c001222b:	31 c0                	xor    eax,eax
c001222d:	31 d2                	xor    edx,edx
c001222f:	83 c4 1c             	add    esp,0x1c
c0012232:	c3                   	ret    

c0012233 <SysSpawn(regs*)>:
c0012233:	56                   	push   esi
c0012234:	53                   	push   ebx
c0012235:	83 ec 04             	sub    esp,0x4
c0012238:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001223c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001223f:	85 f6                	test   esi,esi
c0012241:	75 0a                	jne    c001224d <SysSpawn(regs*)+0x1a>
c0012243:	83 c4 04             	add    esp,0x4
c0012246:	31 c0                	xor    eax,eax
c0012248:	5b                   	pop    ebx
c0012249:	31 d2                	xor    edx,edx
c001224b:	5e                   	pop    esi
c001224c:	c3                   	ret    
c001224d:	83 ec 0c             	sub    esp,0xc
c0012250:	68 24 07 00 00       	push   0x724
c0012255:	e8 79 58 ff ff       	call   c0007ad3 <malloc>
c001225a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001225d:	83 c4 10             	add    esp,0x10
c0012260:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012263:	89 c6                	mov    esi,eax
c0012265:	31 c0                	xor    eax,eax
c0012267:	85 c9                	test   ecx,ecx
c0012269:	75 08                	jne    c0012273 <SysSpawn(regs*)+0x40>
c001226b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012270:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012273:	52                   	push   edx
c0012274:	50                   	push   eax
c0012275:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012278:	50                   	push   eax
c0012279:	56                   	push   esi
c001227a:	e8 9d 33 00 00       	call   c001561c <Process::Process(char const*, Process*, char**)>
c001227f:	83 c4 10             	add    esp,0x10
c0012282:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012289:	75 b8                	jne    c0012243 <SysSpawn(regs*)+0x10>
c001228b:	83 ec 0c             	sub    esp,0xc
c001228e:	56                   	push   esi
c001228f:	e8 c0 38 00 00       	call   c0015b54 <Process::createUserThread()>
c0012294:	8b 06                	mov    eax,DWORD PTR [esi]
c0012296:	83 c4 10             	add    esp,0x10
c0012299:	83 c4 04             	add    esp,0x4
c001229c:	5b                   	pop    ebx
c001229d:	89 c2                	mov    edx,eax
c001229f:	c1 fa 1f             	sar    edx,0x1f
c00122a2:	5e                   	pop    esi
c00122a3:	c3                   	ret    

c00122a4 <SysGetEnv(regs*)>:
c00122a4:	57                   	push   edi
c00122a5:	56                   	push   esi
c00122a6:	53                   	push   ebx
c00122a7:	83 ec 1c             	sub    esp,0x1c
c00122aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122af:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00122b3:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00122b6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00122b9:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00122bc:	51                   	push   ecx
c00122bd:	e8 8f ee ff ff       	call   c0011151 <KeGetProcessTotalEnvCount(Process*)>
c00122c2:	83 c4 10             	add    esp,0x10
c00122c5:	39 c7                	cmp    edi,eax
c00122c7:	7c 12                	jl     c00122db <SysGetEnv(regs*)+0x37>
c00122c9:	31 c0                	xor    eax,eax
c00122cb:	31 d2                	xor    edx,edx
c00122cd:	85 f6                	test   esi,esi
c00122cf:	74 03                	je     c00122d4 <SysGetEnv(regs*)+0x30>
c00122d1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00122d4:	83 c4 10             	add    esp,0x10
c00122d7:	5b                   	pop    ebx
c00122d8:	5e                   	pop    esi
c00122d9:	5f                   	pop    edi
c00122da:	c3                   	ret    
c00122db:	8d 44 24 08          	lea    eax,[esp+0x8]
c00122df:	83 ec 04             	sub    esp,0x4
c00122e2:	57                   	push   edi
c00122e3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00122e9:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00122ec:	57                   	push   edi
c00122ed:	50                   	push   eax
c00122ee:	e8 7e ee ff ff       	call   c0011171 <KeGetProcessEnvPair(Process*, int)>
c00122f3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00122f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122fa:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00122fe:	83 c4 0c             	add    esp,0xc
c0012301:	85 d2                	test   edx,edx
c0012303:	75 23                	jne    c0012328 <SysGetEnv(regs*)+0x84>
c0012305:	83 ec 0c             	sub    esp,0xc
c0012308:	50                   	push   eax
c0012309:	e8 72 e2 fe ff       	call   c0000580 <strlen>
c001230e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012311:	89 c3                	mov    ebx,eax
c0012313:	e8 68 e2 fe ff       	call   c0000580 <strlen>
c0012318:	83 c4 10             	add    esp,0x10
c001231b:	31 d2                	xor    edx,edx
c001231d:	83 c4 10             	add    esp,0x10
c0012320:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012324:	5b                   	pop    ebx
c0012325:	5e                   	pop    esi
c0012326:	5f                   	pop    edi
c0012327:	c3                   	ret    
c0012328:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001232b:	83 ec 08             	sub    esp,0x8
c001232e:	50                   	push   eax
c001232f:	56                   	push   esi
c0012330:	e8 1b e3 fe ff       	call   c0000650 <strcpy>
c0012335:	58                   	pop    eax
c0012336:	5a                   	pop    edx
c0012337:	68 60 20 02 c0       	push   0xc0022060
c001233c:	56                   	push   esi
c001233d:	e8 2e e5 fe ff       	call   c0000870 <strcat>
c0012342:	59                   	pop    ecx
c0012343:	5b                   	pop    ebx
c0012344:	57                   	push   edi
c0012345:	56                   	push   esi
c0012346:	e8 25 e5 fe ff       	call   c0000870 <strcat>
c001234b:	83 c4 10             	add    esp,0x10
c001234e:	31 c0                	xor    eax,eax
c0012350:	83 c4 10             	add    esp,0x10
c0012353:	31 d2                	xor    edx,edx
c0012355:	5b                   	pop    ebx
c0012356:	5e                   	pop    esi
c0012357:	5f                   	pop    edi
c0012358:	c3                   	ret    

c0012359 <SysSetFatAttrib(regs*)>:
c0012359:	57                   	push   edi
c001235a:	56                   	push   esi
c001235b:	53                   	push   ebx
c001235c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012360:	83 ec 0c             	sub    esp,0xc
c0012363:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012366:	68 14 01 00 00       	push   0x114
c001236b:	e8 63 57 ff ff       	call   c0007ad3 <malloc>
c0012370:	6a 01                	push   0x1
c0012372:	89 c3                	mov    ebx,eax
c0012374:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012379:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001237c:	50                   	push   eax
c001237d:	57                   	push   edi
c001237e:	53                   	push   ebx
c001237f:	e8 42 94 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c0012384:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012387:	83 c4 1c             	add    esp,0x1c
c001238a:	0f b6 d4             	movzx  edx,ah
c001238d:	0f b6 c0             	movzx  eax,al
c0012390:	52                   	push   edx
c0012391:	50                   	push   eax
c0012392:	53                   	push   ebx
c0012393:	e8 74 97 ff ff       	call   c000bb0c <File::chfatattr(unsigned char, unsigned char)>
c0012398:	83 c4 10             	add    esp,0x10
c001239b:	85 db                	test   ebx,ebx
c001239d:	89 c6                	mov    esi,eax
c001239f:	74 0c                	je     c00123ad <SysSetFatAttrib(regs*)+0x54>
c00123a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123a3:	83 ec 0c             	sub    esp,0xc
c00123a6:	53                   	push   ebx
c00123a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123aa:	83 c4 10             	add    esp,0x10
c00123ad:	5b                   	pop    ebx
c00123ae:	31 c0                	xor    eax,eax
c00123b0:	85 f6                	test   esi,esi
c00123b2:	0f 95 c0             	setne  al
c00123b5:	31 d2                	xor    edx,edx
c00123b7:	5e                   	pop    esi
c00123b8:	f7 d8                	neg    eax
c00123ba:	83 d2 00             	adc    edx,0x0
c00123bd:	f7 da                	neg    edx
c00123bf:	5f                   	pop    edi
c00123c0:	c3                   	ret    

c00123c1 <SysPipe(regs*)>:
c00123c1:	57                   	push   edi
c00123c2:	56                   	push   esi
c00123c3:	53                   	push   ebx
c00123c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123c8:	83 ec 0c             	sub    esp,0xc
c00123cb:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00123ce:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00123d1:	6a 20                	push   0x20
c00123d3:	e8 fb 56 ff ff       	call   c0007ad3 <malloc>
c00123d8:	89 c3                	mov    ebx,eax
c00123da:	58                   	pop    eax
c00123db:	5a                   	pop    edx
c00123dc:	68 00 50 00 00       	push   0x5000
c00123e1:	53                   	push   ebx
c00123e2:	e8 57 60 ff ff       	call   c000843e <Pipe::Pipe(int)>
c00123e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00123ea:	e8 af 6d ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00123ef:	89 07                	mov    DWORD PTR [edi],eax
c00123f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00123f4:	e8 a5 6d ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00123f9:	83 c4 10             	add    esp,0x10
c00123fc:	31 d2                	xor    edx,edx
c00123fe:	89 06                	mov    DWORD PTR [esi],eax
c0012400:	31 c0                	xor    eax,eax
c0012402:	5b                   	pop    ebx
c0012403:	5e                   	pop    esi
c0012404:	5f                   	pop    edi
c0012405:	c3                   	ret    

c0012406 <SysGetUnixTime(regs*)>:
c0012406:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001240b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012411:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012415:	e9 38 9e ff ff       	jmp    c000c252 <Clock::timeInSecondsLocal()>

c001241a <string_ends_with(char const*, char const*)>:
c001241a:	57                   	push   edi
c001241b:	56                   	push   esi
c001241c:	53                   	push   ebx
c001241d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012421:	83 ec 0c             	sub    esp,0xc
c0012424:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012428:	53                   	push   ebx
c0012429:	e8 52 e1 fe ff       	call   c0000580 <strlen>
c001242e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012431:	89 c6                	mov    esi,eax
c0012433:	e8 48 e1 fe ff       	call   c0000580 <strlen>
c0012438:	83 c4 10             	add    esp,0x10
c001243b:	31 d2                	xor    edx,edx
c001243d:	39 c6                	cmp    esi,eax
c001243f:	7d 06                	jge    c0012447 <string_ends_with(char const*, char const*)+0x2d>
c0012441:	5b                   	pop    ebx
c0012442:	89 d0                	mov    eax,edx
c0012444:	5e                   	pop    esi
c0012445:	5f                   	pop    edi
c0012446:	c3                   	ret    
c0012447:	83 ec 08             	sub    esp,0x8
c001244a:	29 c6                	sub    esi,eax
c001244c:	57                   	push   edi
c001244d:	01 f3                	add    ebx,esi
c001244f:	53                   	push   ebx
c0012450:	e8 2b e3 fe ff       	call   c0000780 <strcmp>
c0012455:	83 c4 10             	add    esp,0x10
c0012458:	31 d2                	xor    edx,edx
c001245a:	5b                   	pop    ebx
c001245b:	5e                   	pop    esi
c001245c:	85 c0                	test   eax,eax
c001245e:	5f                   	pop    edi
c001245f:	0f 94 c2             	sete   dl
c0012462:	89 d0                	mov    eax,edx
c0012464:	c3                   	ret    

c0012465 <SysOpen(regs*)>:
c0012465:	56                   	push   esi
c0012466:	53                   	push   ebx
c0012467:	81 ec 04 01 00 00    	sub    esp,0x104
c001246d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012474:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012477:	85 c0                	test   eax,eax
c0012479:	0f 84 c3 01 00 00    	je     c0012642 <SysOpen(regs*)+0x1dd>
c001247f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012482:	85 c0                	test   eax,eax
c0012484:	0f 84 b8 01 00 00    	je     c0012642 <SysOpen(regs*)+0x1dd>
c001248a:	6a 00                	push   0x0
c001248c:	68 62 20 02 c0       	push   0xc0022062
c0012491:	50                   	push   eax
c0012492:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012496:	56                   	push   esi
c0012497:	e8 0c 91 ff ff       	call   c000b5a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001249c:	89 34 24             	mov    DWORD PTR [esp],esi
c001249f:	e8 dc e0 fe ff       	call   c0000580 <strlen>
c00124a4:	83 c4 10             	add    esp,0x10
c00124a7:	83 e8 01             	sub    eax,0x1
c00124aa:	74 29                	je     c00124d5 <SysOpen(regs*)+0x70>
c00124ac:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00124b0:	83 fa 2e             	cmp    edx,0x2e
c00124b3:	74 1c                	je     c00124d1 <SysOpen(regs*)+0x6c>
c00124b5:	83 fa 3a             	cmp    edx,0x3a
c00124b8:	74 17                	je     c00124d1 <SysOpen(regs*)+0x6c>
c00124ba:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00124be:	83 e8 01             	sub    eax,0x1
c00124c1:	74 12                	je     c00124d5 <SysOpen(regs*)+0x70>
c00124c3:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00124c7:	83 fa 3a             	cmp    edx,0x3a
c00124ca:	74 05                	je     c00124d1 <SysOpen(regs*)+0x6c>
c00124cc:	83 fa 2e             	cmp    edx,0x2e
c00124cf:	75 e9                	jne    c00124ba <SysOpen(regs*)+0x55>
c00124d1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00124d5:	83 ec 08             	sub    esp,0x8
c00124d8:	68 66 20 02 c0       	push   0xc0022066
c00124dd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124e0:	50                   	push   eax
c00124e1:	e8 34 ff ff ff       	call   c001241a <string_ends_with(char const*, char const*)>
c00124e6:	83 c4 10             	add    esp,0x10
c00124e9:	85 c0                	test   eax,eax
c00124eb:	74 1d                	je     c001250a <SysOpen(regs*)+0xa5>
c00124ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00124f0:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00124f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00124fd:	81 c4 04 01 00 00    	add    esp,0x104
c0012503:	31 c0                	xor    eax,eax
c0012505:	5b                   	pop    ebx
c0012506:	31 d2                	xor    edx,edx
c0012508:	5e                   	pop    esi
c0012509:	c3                   	ret    
c001250a:	83 ec 08             	sub    esp,0x8
c001250d:	68 6b 20 02 c0       	push   0xc002206b
c0012512:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012515:	50                   	push   eax
c0012516:	e8 ff fe ff ff       	call   c001241a <string_ends_with(char const*, char const*)>
c001251b:	83 c4 10             	add    esp,0x10
c001251e:	85 c0                	test   eax,eax
c0012520:	75 cb                	jne    c00124ed <SysOpen(regs*)+0x88>
c0012522:	83 ec 08             	sub    esp,0x8
c0012525:	68 67 20 02 c0       	push   0xc0022067
c001252a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001252d:	50                   	push   eax
c001252e:	e8 4d e2 fe ff       	call   c0000780 <strcmp>
c0012533:	83 c4 10             	add    esp,0x10
c0012536:	85 c0                	test   eax,eax
c0012538:	74 b3                	je     c00124ed <SysOpen(regs*)+0x88>
c001253a:	83 ec 08             	sub    esp,0x8
c001253d:	68 66 20 02 c0       	push   0xc0022066
c0012542:	56                   	push   esi
c0012543:	e8 d2 fe ff ff       	call   c001241a <string_ends_with(char const*, char const*)>
c0012548:	83 c4 10             	add    esp,0x10
c001254b:	85 c0                	test   eax,eax
c001254d:	75 9e                	jne    c00124ed <SysOpen(regs*)+0x88>
c001254f:	83 ec 08             	sub    esp,0x8
c0012552:	68 70 20 02 c0       	push   0xc0022070
c0012557:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001255a:	50                   	push   eax
c001255b:	e8 ba fe ff ff       	call   c001241a <string_ends_with(char const*, char const*)>
c0012560:	83 c4 10             	add    esp,0x10
c0012563:	85 c0                	test   eax,eax
c0012565:	0f 85 ea 00 00 00    	jne    c0012655 <SysOpen(regs*)+0x1f0>
c001256b:	83 ec 08             	sub    esp,0x8
c001256e:	68 75 20 02 c0       	push   0xc0022075
c0012573:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012576:	50                   	push   eax
c0012577:	e8 9e fe ff ff       	call   c001241a <string_ends_with(char const*, char const*)>
c001257c:	83 c4 10             	add    esp,0x10
c001257f:	85 c0                	test   eax,eax
c0012581:	0f 85 ce 00 00 00    	jne    c0012655 <SysOpen(regs*)+0x1f0>
c0012587:	83 ec 08             	sub    esp,0x8
c001258a:	68 71 20 02 c0       	push   0xc0022071
c001258f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012592:	51                   	push   ecx
c0012593:	e8 e8 e1 fe ff       	call   c0000780 <strcmp>
c0012598:	83 c4 10             	add    esp,0x10
c001259b:	85 c0                	test   eax,eax
c001259d:	0f 84 b2 00 00 00    	je     c0012655 <SysOpen(regs*)+0x1f0>
c00125a3:	83 ec 08             	sub    esp,0x8
c00125a6:	68 70 20 02 c0       	push   0xc0022070
c00125ab:	56                   	push   esi
c00125ac:	e8 69 fe ff ff       	call   c001241a <string_ends_with(char const*, char const*)>
c00125b1:	83 c4 10             	add    esp,0x10
c00125b4:	85 c0                	test   eax,eax
c00125b6:	0f 85 99 00 00 00    	jne    c0012655 <SysOpen(regs*)+0x1f0>
c00125bc:	83 ec 0c             	sub    esp,0xc
c00125bf:	68 14 01 00 00       	push   0x114
c00125c4:	e8 0a 55 ff ff       	call   c0007ad3 <malloc>
c00125c9:	6a 01                	push   0x1
c00125cb:	89 c6                	mov    esi,eax
c00125cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125d5:	50                   	push   eax
c00125d6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00125d9:	52                   	push   edx
c00125da:	56                   	push   esi
c00125db:	e8 e6 91 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c00125e0:	83 c4 20             	add    esp,0x20
c00125e3:	85 f6                	test   esi,esi
c00125e5:	74 5b                	je     c0012642 <SysOpen(regs*)+0x1dd>
c00125e7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00125ea:	0f b6 c2             	movzx  eax,dl
c00125ed:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00125f0:	89 d0                	mov    eax,edx
c00125f2:	83 e0 01             	and    eax,0x1
c00125f5:	f6 c2 02             	test   dl,0x2
c00125f8:	74 03                	je     c00125fd <SysOpen(regs*)+0x198>
c00125fa:	83 c8 02             	or     eax,0x2
c00125fd:	f6 c2 04             	test   dl,0x4
c0012600:	74 03                	je     c0012605 <SysOpen(regs*)+0x1a0>
c0012602:	83 c8 04             	or     eax,0x4
c0012605:	f6 c2 08             	test   dl,0x8
c0012608:	74 03                	je     c001260d <SysOpen(regs*)+0x1a8>
c001260a:	83 c8 0a             	or     eax,0xa
c001260d:	80 e2 10             	and    dl,0x10
c0012610:	74 03                	je     c0012615 <SysOpen(regs*)+0x1b0>
c0012612:	83 c8 12             	or     eax,0x12
c0012615:	83 ec 08             	sub    esp,0x8
c0012618:	50                   	push   eax
c0012619:	56                   	push   esi
c001261a:	e8 85 92 ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c001261f:	83 c4 10             	add    esp,0x10
c0012622:	85 c0                	test   eax,eax
c0012624:	75 1c                	jne    c0012642 <SysOpen(regs*)+0x1dd>
c0012626:	83 ec 0c             	sub    esp,0xc
c0012629:	56                   	push   esi
c001262a:	e8 6f 6b ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001262f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012632:	83 c4 10             	add    esp,0x10
c0012635:	89 02                	mov    DWORD PTR [edx],eax
c0012637:	c1 f8 1f             	sar    eax,0x1f
c001263a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001263d:	e9 bb fe ff ff       	jmp    c00124fd <SysOpen(regs*)+0x98>
c0012642:	81 c4 04 01 00 00    	add    esp,0x104
c0012648:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001264d:	5b                   	pop    ebx
c001264e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012653:	5e                   	pop    esi
c0012654:	c3                   	ret    
c0012655:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012658:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001265e:	e9 93 fe ff ff       	jmp    c00124f6 <SysOpen(regs*)+0x91>

c0012663 <KeSystemCall(regs*, void*)>:
c0012663:	53                   	push   ebx
c0012664:	83 ec 08             	sub    esp,0x8
c0012667:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001266b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001266e:	83 f8 3e             	cmp    eax,0x3e
c0012671:	77 16                	ja     c0012689 <KeSystemCall(regs*, void*)+0x26>
c0012673:	8b 14 85 80 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb80]
c001267a:	85 d2                	test   edx,edx
c001267c:	74 0b                	je     c0012689 <KeSystemCall(regs*, void*)+0x26>
c001267e:	83 ec 0c             	sub    esp,0xc
c0012681:	53                   	push   ebx
c0012682:	ff d2                	call   edx
c0012684:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012687:	eb 0d                	jmp    c0012696 <KeSystemCall(regs*, void*)+0x33>
c0012689:	52                   	push   edx
c001268a:	52                   	push   edx
c001268b:	50                   	push   eax
c001268c:	68 7a 20 02 c0       	push   0xc002207a
c0012691:	e8 74 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012696:	83 c4 10             	add    esp,0x10
c0012699:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001269e:	83 c4 08             	add    esp,0x8
c00126a1:	31 d2                	xor    edx,edx
c00126a3:	5b                   	pop    ebx
c00126a4:	c3                   	ret    
c00126a5:	66 90                	xchg   ax,ax
c00126a7:	90                   	nop

c00126a8 <KeSwitchEndian16(unsigned short)>:
c00126a8:	83 ec 04             	sub    esp,0x4
c00126ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126af:	66 89 04 24          	mov    WORD PTR [esp],ax
c00126b3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00126b7:	c1 f8 08             	sar    eax,0x8
c00126ba:	89 c2                	mov    edx,eax
c00126bc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00126c0:	c1 e0 08             	shl    eax,0x8
c00126c3:	09 d0                	or     eax,edx
c00126c5:	83 c4 04             	add    esp,0x4
c00126c8:	c3                   	ret    
c00126c9:	8d 76 00             	lea    esi,[esi+0x0]

c00126cc <KeSwitchEndian32(unsigned int)>:
c00126cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126d0:	c1 e8 18             	shr    eax,0x18
c00126d3:	89 c2                	mov    edx,eax
c00126d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126d9:	c1 e0 08             	shl    eax,0x8
c00126dc:	25 00 00 ff 00       	and    eax,0xff0000
c00126e1:	09 c2                	or     edx,eax
c00126e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126e7:	c1 e8 08             	shr    eax,0x8
c00126ea:	25 00 ff 00 00       	and    eax,0xff00
c00126ef:	09 c2                	or     edx,eax
c00126f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126f5:	c1 e0 18             	shl    eax,0x18
c00126f8:	09 d0                	or     eax,edx
c00126fa:	c3                   	ret    
c00126fb:	90                   	nop

c00126fc <EthernetCRC32(unsigned char*, int)>:
c00126fc:	83 ec 10             	sub    esp,0x10
c00126ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012704:	75 0a                	jne    c0012710 <EthernetCRC32(unsigned char*, int)+0x14>
c0012706:	b8 00 00 00 00       	mov    eax,0x0
c001270b:	e9 8c 00 00 00       	jmp    c001279c <EthernetCRC32(unsigned char*, int)+0xa0>
c0012710:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012715:	7f 09                	jg     c0012720 <EthernetCRC32(unsigned char*, int)+0x24>
c0012717:	b8 00 00 00 00       	mov    eax,0x0
c001271c:	eb 7e                	jmp    c001279c <EthernetCRC32(unsigned char*, int)+0xa0>
c001271e:	66 90                	xchg   ax,ax
c0012720:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012728:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012734:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012738:	7d 5a                	jge    c0012794 <EthernetCRC32(unsigned char*, int)+0x98>
c001273a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001273e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012742:	01 d0                	add    eax,edx
c0012744:	8a 00                	mov    al,BYTE PTR [eax]
c0012746:	0f b6 c0             	movzx  eax,al
c0012749:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001274d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012755:	8d 76 00             	lea    esi,[esi+0x0]
c0012758:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001275d:	7f 2d                	jg     c001278c <EthernetCRC32(unsigned char*, int)+0x90>
c001275f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012763:	83 e0 01             	and    eax,0x1
c0012766:	74 10                	je     c0012778 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001276c:	d1 e8                	shr    eax,1
c001276e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012773:	eb 0b                	jmp    c0012780 <EthernetCRC32(unsigned char*, int)+0x84>
c0012775:	8d 76 00             	lea    esi,[esi+0x0]
c0012778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001277c:	d1 e8                	shr    eax,1
c001277e:	66 90                	xchg   ax,ax
c0012780:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012784:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012789:	eb cd                	jmp    c0012758 <EthernetCRC32(unsigned char*, int)+0x5c>
c001278b:	90                   	nop
c001278c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012791:	eb 9d                	jmp    c0012730 <EthernetCRC32(unsigned char*, int)+0x34>
c0012793:	90                   	nop
c0012794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012798:	f7 d0                	not    eax
c001279a:	66 90                	xchg   ax,ax
c001279c:	83 c4 10             	add    esp,0x10
c001279f:	c3                   	ret    

c00127a0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c00127a0:	83 ec 2c             	sub    esp,0x2c
c00127a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00127ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127bb:	0f b7 c0             	movzx  eax,ax
c00127be:	3d 06 08 00 00       	cmp    eax,0x806
c00127c3:	75 13                	jne    c00127d8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c00127c5:	83 ec 0c             	sub    esp,0xc
c00127c8:	68 8e 20 02 c0       	push   0xc002208e
c00127cd:	e8 38 81 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00127d2:	83 c4 10             	add    esp,0x10
c00127d5:	eb 25                	jmp    c00127fc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00127d7:	90                   	nop
c00127d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127df:	0f b7 c0             	movzx  eax,ax
c00127e2:	3d 00 08 00 00       	cmp    eax,0x800
c00127e7:	75 13                	jne    c00127fc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00127e9:	83 ec 0c             	sub    esp,0xc
c00127ec:	68 a4 20 02 c0       	push   0xc00220a4
c00127f1:	e8 14 81 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00127f6:	83 c4 10             	add    esp,0x10
c00127f9:	8d 76 00             	lea    esi,[esi+0x0]
c00127fc:	90                   	nop
c00127fd:	83 c4 2c             	add    esp,0x2c
c0012800:	c3                   	ret    

c0012801 <CmOpen(char const*)>:
c0012801:	57                   	push   edi
c0012802:	56                   	push   esi
c0012803:	53                   	push   ebx
c0012804:	83 ec 1c             	sub    esp,0x1c
c0012807:	6a 30                	push   0x30
c0012809:	e8 c5 52 ff ff       	call   c0007ad3 <malloc>
c001280e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012815:	89 c3                	mov    ebx,eax
c0012817:	e8 b7 52 ff ff       	call   c0007ad3 <malloc>
c001281c:	6a 01                	push   0x1
c001281e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0012824:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012828:	89 c6                	mov    esi,eax
c001282a:	50                   	push   eax
c001282b:	e8 96 8f ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c0012830:	83 c4 1c             	add    esp,0x1c
c0012833:	89 33                	mov    DWORD PTR [ebx],esi
c0012835:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012839:	50                   	push   eax
c001283a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001283e:	50                   	push   eax
c001283f:	56                   	push   esi
c0012840:	e8 61 93 ff ff       	call   c000bba6 <File::stat(unsigned long long*, bool*)>
c0012845:	5a                   	pop    edx
c0012846:	59                   	pop    ecx
c0012847:	6a 01                	push   0x1
c0012849:	ff 33                	push   DWORD PTR [ebx]
c001284b:	e8 54 90 ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c0012850:	5e                   	pop    esi
c0012851:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012855:	e8 79 52 ff ff       	call   c0007ad3 <malloc>
c001285a:	5a                   	pop    edx
c001285b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001285f:	89 c7                	mov    edi,eax
c0012861:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012863:	8b 10                	mov    edx,DWORD PTR [eax]
c0012865:	56                   	push   esi
c0012866:	57                   	push   edi
c0012867:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001286b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001286f:	50                   	push   eax
c0012870:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012873:	83 c4 14             	add    esp,0x14
c0012876:	ff 33                	push   DWORD PTR [ebx]
c0012878:	e8 85 90 ff ff       	call   c000b902 <File::close()>
c001287d:	59                   	pop    ecx
c001287e:	58                   	pop    eax
c001287f:	6a 13                	push   0x13
c0012881:	ff 33                	push   DWORD PTR [ebx]
c0012883:	e8 1c 90 ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c0012888:	8b 03                	mov    eax,DWORD PTR [ebx]
c001288a:	8b 10                	mov    edx,DWORD PTR [eax]
c001288c:	89 34 24             	mov    DWORD PTR [esp],esi
c001288f:	57                   	push   edi
c0012890:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012894:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012898:	50                   	push   eax
c0012899:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001289c:	83 c4 14             	add    esp,0x14
c001289f:	57                   	push   edi
c00128a0:	e8 3e 52 ff ff       	call   c0007ae3 <free>
c00128a5:	83 c4 10             	add    esp,0x10
c00128a8:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00128ab:	75 10                	jne    c00128bd <CmOpen(char const*)+0xbc>
c00128ad:	83 ec 0c             	sub    esp,0xc
c00128b0:	68 b9 20 02 c0       	push   0xc00220b9
c00128b5:	e8 df e9 ff ff       	call   c0011299 <KePanic(char const*)>
c00128ba:	83 c4 10             	add    esp,0x10
c00128bd:	50                   	push   eax
c00128be:	6a 00                	push   0x0
c00128c0:	6a 00                	push   0x0
c00128c2:	ff 33                	push   DWORD PTR [ebx]
c00128c4:	8d 7b 05             	lea    edi,[ebx+0x5]
c00128c7:	e8 96 90 ff ff       	call   c000b962 <File::seek(unsigned long long)>
c00128cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00128d0:	89 34 24             	mov    DWORD PTR [esp],esi
c00128d3:	57                   	push   edi
c00128d4:	6a 00                	push   0x0
c00128d6:	6a 2b                	push   0x2b
c00128d8:	50                   	push   eax
c00128d9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00128dc:	83 c4 1c             	add    esp,0x1c
c00128df:	6a 00                	push   0x0
c00128e1:	6a 00                	push   0x0
c00128e3:	ff 33                	push   DWORD PTR [ebx]
c00128e5:	e8 78 90 ff ff       	call   c000b962 <File::seek(unsigned long long)>
c00128ea:	83 c4 0c             	add    esp,0xc
c00128ed:	6a 08                	push   0x8
c00128ef:	68 ca 20 02 c0       	push   0xc00220ca
c00128f4:	57                   	push   edi
c00128f5:	e8 86 da fe ff       	call   c0000380 <memcmp>
c00128fa:	83 c4 10             	add    esp,0x10
c00128fd:	85 c0                	test   eax,eax
c00128ff:	74 10                	je     c0012911 <CmOpen(char const*)+0x110>
c0012901:	83 ec 0c             	sub    esp,0xc
c0012904:	68 d3 20 02 c0       	push   0xc00220d3
c0012909:	e8 8b e9 ff ff       	call   c0011299 <KePanic(char const*)>
c001290e:	83 c4 10             	add    esp,0x10
c0012911:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012915:	83 c4 10             	add    esp,0x10
c0012918:	89 d8                	mov    eax,ebx
c001291a:	5b                   	pop    ebx
c001291b:	5e                   	pop    esi
c001291c:	5f                   	pop    edi
c001291d:	c3                   	ret    

c001291e <CmClose(Reghive_Tag*)>:
c001291e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012922:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012926:	74 0b                	je     c0012933 <CmClose(Reghive_Tag*)+0x15>
c0012928:	8b 00                	mov    eax,DWORD PTR [eax]
c001292a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001292e:	e9 cf 8f ff ff       	jmp    c000b902 <File::close()>
c0012933:	c3                   	ret    

c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012934:	53                   	push   ebx
c0012935:	83 ec 18             	sub    esp,0x18
c0012938:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001293c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012940:	74 29                	je     c001296b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012942:	50                   	push   eax
c0012943:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012948:	99                   	cdq    
c0012949:	52                   	push   edx
c001294a:	50                   	push   eax
c001294b:	ff 33                	push   DWORD PTR [ebx]
c001294d:	e8 10 90 ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0012952:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012954:	5a                   	pop    edx
c0012955:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012959:	8b 10                	mov    edx,DWORD PTR [eax]
c001295b:	51                   	push   ecx
c001295c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012960:	6a 00                	push   0x0
c0012962:	6a 2b                	push   0x2b
c0012964:	50                   	push   eax
c0012965:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012968:	83 c4 20             	add    esp,0x20
c001296b:	83 c4 18             	add    esp,0x18
c001296e:	5b                   	pop    ebx
c001296f:	c3                   	ret    

c0012970 <CmGetString(Reghive_Tag*, int, char*)>:
c0012970:	55                   	push   ebp
c0012971:	57                   	push   edi
c0012972:	56                   	push   esi
c0012973:	53                   	push   ebx
c0012974:	31 db                	xor    ebx,ebx
c0012976:	83 ec 70             	sub    esp,0x70
c0012979:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001297d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012984:	50                   	push   eax
c0012985:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001298c:	55                   	push   ebp
c001298d:	e8 a2 ff ff ff       	call   c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012992:	83 c4 10             	add    esp,0x10
c0012995:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001299a:	c1 e0 08             	shl    eax,0x8
c001299d:	89 c2                	mov    edx,eax
c001299f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00129a4:	09 d0                	or     eax,edx
c00129a6:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00129ab:	c1 e0 08             	shl    eax,0x8
c00129ae:	09 d0                	or     eax,edx
c00129b0:	74 25                	je     c00129d7 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00129b2:	52                   	push   edx
c00129b3:	8d 54 24 39          	lea    edx,[esp+0x39]
c00129b7:	52                   	push   edx
c00129b8:	6b fb 0d             	imul   edi,ebx,0xd
c00129bb:	50                   	push   eax
c00129bc:	55                   	push   ebp
c00129bd:	e8 72 ff ff ff       	call   c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129c2:	8d 74 24 49          	lea    esi,[esp+0x49]
c00129c6:	b9 27 00 00 00       	mov    ecx,0x27
c00129cb:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00129d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00129d4:	83 c4 10             	add    esp,0x10
c00129d7:	83 c3 03             	add    ebx,0x3
c00129da:	83 fb 15             	cmp    ebx,0x15
c00129dd:	75 b6                	jne    c0012995 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00129df:	83 c4 6c             	add    esp,0x6c
c00129e2:	5b                   	pop    ebx
c00129e3:	5e                   	pop    esi
c00129e4:	5f                   	pop    edi
c00129e5:	5d                   	pop    ebp
c00129e6:	c3                   	ret    

c00129e7 <CmEnterDirectory(Reghive_Tag*, int)>:
c00129e7:	83 ec 40             	sub    esp,0x40
c00129ea:	8d 44 24 09          	lea    eax,[esp+0x9]
c00129ee:	50                   	push   eax
c00129ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129f7:	e8 38 ff ff ff       	call   c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129fc:	83 c4 10             	add    esp,0x10
c00129ff:	83 c8 ff             	or     eax,0xffffffff
c0012a02:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012a07:	75 19                	jne    c0012a22 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012a09:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012a0e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012a13:	c1 e0 08             	shl    eax,0x8
c0012a16:	09 c2                	or     edx,eax
c0012a18:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012a1d:	c1 e0 10             	shl    eax,0x10
c0012a20:	09 d0                	or     eax,edx
c0012a22:	83 c4 3c             	add    esp,0x3c
c0012a25:	c3                   	ret    

c0012a26 <CmGetNext(Reghive_Tag*, int)>:
c0012a26:	83 ec 40             	sub    esp,0x40
c0012a29:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012a2d:	50                   	push   eax
c0012a2e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a36:	e8 f9 fe ff ff       	call   c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a3b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012a40:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012a45:	c1 e0 08             	shl    eax,0x8
c0012a48:	09 c2                	or     edx,eax
c0012a4a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012a4f:	83 c4 4c             	add    esp,0x4c
c0012a52:	c1 e0 10             	shl    eax,0x10
c0012a55:	09 d0                	or     eax,edx
c0012a57:	c3                   	ret    

c0012a58 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012a58:	53                   	push   ebx
c0012a59:	83 ec 18             	sub    esp,0x18
c0012a5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a60:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012a64:	74 29                	je     c0012a8f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012a66:	50                   	push   eax
c0012a67:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012a6c:	99                   	cdq    
c0012a6d:	52                   	push   edx
c0012a6e:	50                   	push   eax
c0012a6f:	ff 33                	push   DWORD PTR [ebx]
c0012a71:	e8 ec 8e ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0012a76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a78:	5a                   	pop    edx
c0012a79:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a7d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a7f:	51                   	push   ecx
c0012a80:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012a84:	6a 00                	push   0x0
c0012a86:	6a 2b                	push   0x2b
c0012a88:	50                   	push   eax
c0012a89:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012a8c:	83 c4 20             	add    esp,0x20
c0012a8f:	83 c4 18             	add    esp,0x18
c0012a92:	5b                   	pop    ebx
c0012a93:	c3                   	ret    

c0012a94 <CmFreeExtent(Reghive_Tag*, int)>:
c0012a94:	53                   	push   ebx
c0012a95:	83 ec 3c             	sub    esp,0x3c
c0012a98:	6a 2b                	push   0x2b
c0012a9a:	6a 00                	push   0x0
c0012a9c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012aa0:	53                   	push   ebx
c0012aa1:	e8 4a da fe ff       	call   c00004f0 <memset>
c0012aa6:	83 c4 0c             	add    esp,0xc
c0012aa9:	53                   	push   ebx
c0012aaa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012aae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ab2:	e8 a1 ff ff ff       	call   c0012a58 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ab7:	83 c4 48             	add    esp,0x48
c0012aba:	5b                   	pop    ebx
c0012abb:	c3                   	ret    

c0012abc <CmUpdateHeader(Reghive_Tag*)>:
c0012abc:	83 ec 0c             	sub    esp,0xc
c0012abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ac3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012ac7:	74 10                	je     c0012ad9 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012ac9:	52                   	push   edx
c0012aca:	8d 50 05             	lea    edx,[eax+0x5]
c0012acd:	52                   	push   edx
c0012ace:	6a 00                	push   0x0
c0012ad0:	50                   	push   eax
c0012ad1:	e8 82 ff ff ff       	call   c0012a58 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ad6:	83 c4 10             	add    esp,0x10
c0012ad9:	83 c4 0c             	add    esp,0xc
c0012adc:	c3                   	ret    

c0012add <CmExpand(Reghive_Tag*, int)>:
c0012add:	55                   	push   ebp
c0012ade:	57                   	push   edi
c0012adf:	83 cf ff             	or     edi,0xffffffff
c0012ae2:	56                   	push   esi
c0012ae3:	53                   	push   ebx
c0012ae4:	83 ec 3c             	sub    esp,0x3c
c0012ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012aeb:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012aef:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012af3:	74 59                	je     c0012b4e <CmExpand(Reghive_Tag*, int)+0x71>
c0012af5:	50                   	push   eax
c0012af6:	31 d2                	xor    edx,edx
c0012af8:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012afc:	31 ff                	xor    edi,edi
c0012afe:	52                   	push   edx
c0012aff:	50                   	push   eax
c0012b00:	ff 33                	push   DWORD PTR [ebx]
c0012b02:	e8 5b 8e ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0012b07:	83 c4 0c             	add    esp,0xc
c0012b0a:	6a 2b                	push   0x2b
c0012b0c:	6a 00                	push   0x0
c0012b0e:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012b12:	55                   	push   ebp
c0012b13:	e8 d8 d9 fe ff       	call   c00004f0 <memset>
c0012b18:	83 c4 10             	add    esp,0x10
c0012b1b:	39 f7                	cmp    edi,esi
c0012b1d:	7d 1b                	jge    c0012b3a <CmExpand(Reghive_Tag*, int)+0x5d>
c0012b1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b21:	83 ec 0c             	sub    esp,0xc
c0012b24:	47                   	inc    edi
c0012b25:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012b29:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b2b:	51                   	push   ecx
c0012b2c:	55                   	push   ebp
c0012b2d:	6a 00                	push   0x0
c0012b2f:	6a 2b                	push   0x2b
c0012b31:	50                   	push   eax
c0012b32:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012b35:	83 c4 20             	add    esp,0x20
c0012b38:	eb e1                	jmp    c0012b1b <CmExpand(Reghive_Tag*, int)+0x3e>
c0012b3a:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012b3d:	83 ec 0c             	sub    esp,0xc
c0012b40:	01 fe                	add    esi,edi
c0012b42:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012b45:	53                   	push   ebx
c0012b46:	e8 71 ff ff ff       	call   c0012abc <CmUpdateHeader(Reghive_Tag*)>
c0012b4b:	83 c4 10             	add    esp,0x10
c0012b4e:	83 c4 3c             	add    esp,0x3c
c0012b51:	89 f8                	mov    eax,edi
c0012b53:	5b                   	pop    ebx
c0012b54:	5e                   	pop    esi
c0012b55:	5f                   	pop    edi
c0012b56:	5d                   	pop    ebp
c0012b57:	c3                   	ret    

c0012b58 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012b58:	55                   	push   ebp
c0012b59:	57                   	push   edi
c0012b5a:	56                   	push   esi
c0012b5b:	53                   	push   ebx
c0012b5c:	83 cb ff             	or     ebx,0xffffffff
c0012b5f:	83 ec 1c             	sub    esp,0x1c
c0012b62:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012b66:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012b6a:	74 68                	je     c0012bd4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012b6c:	51                   	push   ecx
c0012b6d:	be 2b 00 00 00       	mov    esi,0x2b
c0012b72:	6a 00                	push   0x0
c0012b74:	31 ff                	xor    edi,edi
c0012b76:	6a 00                	push   0x0
c0012b78:	31 db                	xor    ebx,ebx
c0012b7a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012b7d:	e8 e0 8d ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0012b82:	83 c4 10             	add    esp,0x10
c0012b85:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012b88:	76 3b                	jbe    c0012bc5 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012b8a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b8d:	83 ec 0c             	sub    esp,0xc
c0012b90:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012b94:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b96:	51                   	push   ecx
c0012b97:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012b9b:	51                   	push   ecx
c0012b9c:	6a 00                	push   0x0
c0012b9e:	6a 01                	push   0x1
c0012ba0:	50                   	push   eax
c0012ba1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012ba4:	83 c4 20             	add    esp,0x20
c0012ba7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012bac:	74 26                	je     c0012bd4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012bae:	52                   	push   edx
c0012baf:	43                   	inc    ebx
c0012bb0:	57                   	push   edi
c0012bb1:	56                   	push   esi
c0012bb2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012bb5:	e8 a8 8d ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0012bba:	83 c6 2b             	add    esi,0x2b
c0012bbd:	83 d7 00             	adc    edi,0x0
c0012bc0:	83 c4 10             	add    esp,0x10
c0012bc3:	eb c0                	jmp    c0012b85 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012bc5:	50                   	push   eax
c0012bc6:	50                   	push   eax
c0012bc7:	6a 40                	push   0x40
c0012bc9:	55                   	push   ebp
c0012bca:	e8 0e ff ff ff       	call   c0012add <CmExpand(Reghive_Tag*, int)>
c0012bcf:	83 c4 10             	add    esp,0x10
c0012bd2:	89 c3                	mov    ebx,eax
c0012bd4:	83 c4 1c             	add    esp,0x1c
c0012bd7:	89 d8                	mov    eax,ebx
c0012bd9:	5b                   	pop    ebx
c0012bda:	5e                   	pop    esi
c0012bdb:	5f                   	pop    edi
c0012bdc:	5d                   	pop    ebp
c0012bdd:	c3                   	ret    

c0012bde <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012bde:	55                   	push   ebp
c0012bdf:	57                   	push   edi
c0012be0:	56                   	push   esi
c0012be1:	53                   	push   ebx
c0012be2:	81 ec 88 00 00 00    	sub    esp,0x88
c0012be8:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012bef:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012bf6:	e8 5d ff ff ff       	call   c0012b58 <CmFindUnusedExtent(Reghive_Tag*)>
c0012bfb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012bff:	83 c4 0c             	add    esp,0xc
c0012c02:	6a 2b                	push   0x2b
c0012c04:	6a 00                	push   0x0
c0012c06:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012c0a:	55                   	push   ebp
c0012c0b:	e8 e0 d8 fe ff       	call   c00004f0 <memset>
c0012c10:	83 c4 10             	add    esp,0x10
c0012c13:	85 db                	test   ebx,ebx
c0012c15:	74 12                	je     c0012c29 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012c17:	51                   	push   ecx
c0012c18:	55                   	push   ebp
c0012c19:	53                   	push   ebx
c0012c1a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c21:	e8 0e fd ff ff       	call   c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c26:	83 c4 10             	add    esp,0x10
c0012c29:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012c2d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012c34:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012c39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012c3b:	85 db                	test   ebx,ebx
c0012c3d:	74 49                	je     c0012c88 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012c3f:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012c44:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012c49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c4d:	c1 e0 08             	shl    eax,0x8
c0012c50:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012c56:	09 c8                	or     eax,ecx
c0012c58:	74 11                	je     c0012c6b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012c5a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012c5e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012c62:	c1 e8 10             	shr    eax,0x10
c0012c65:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012c69:	eb 0f                	jmp    c0012c7a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012c6b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012c70:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012c75:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012c7a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012c7e:	c1 ea 08             	shr    edx,0x8
c0012c81:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012c86:	eb 0f                	jmp    c0012c97 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012c88:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012c8d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012c92:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012c97:	52                   	push   edx
c0012c98:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012c9c:	50                   	push   eax
c0012c9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ca1:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ca8:	e8 ab fd ff ff       	call   c0012a58 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012cad:	83 c4 10             	add    esp,0x10
c0012cb0:	85 db                	test   ebx,ebx
c0012cb2:	74 12                	je     c0012cc6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012cb4:	50                   	push   eax
c0012cb5:	55                   	push   ebp
c0012cb6:	53                   	push   ebx
c0012cb7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cbe:	e8 95 fd ff ff       	call   c0012a58 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012cc3:	83 c4 10             	add    esp,0x10
c0012cc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cca:	83 c4 7c             	add    esp,0x7c
c0012ccd:	5b                   	pop    ebx
c0012cce:	5e                   	pop    esi
c0012ccf:	5f                   	pop    edi
c0012cd0:	5d                   	pop    ebp
c0012cd1:	c3                   	ret    

c0012cd2 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012cd2:	55                   	push   ebp
c0012cd3:	57                   	push   edi
c0012cd4:	56                   	push   esi
c0012cd5:	53                   	push   ebx
c0012cd6:	bb 27 00 00 00       	mov    ebx,0x27
c0012cdb:	81 ec 88 00 00 00    	sub    esp,0x88
c0012ce1:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012ce8:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012cef:	e8 8c d8 fe ff       	call   c0000580 <strlen>
c0012cf4:	8d 48 26             	lea    ecx,[eax+0x26]
c0012cf7:	89 c8                	mov    eax,ecx
c0012cf9:	99                   	cdq    
c0012cfa:	f7 fb                	idiv   ebx
c0012cfc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d00:	83 c4 10             	add    esp,0x10
c0012d03:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012d09:	7e 10                	jle    c0012d1b <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012d0b:	83 ec 0c             	sub    esp,0xc
c0012d0e:	68 e4 20 02 c0       	push   0xc00220e4
c0012d13:	e8 81 e5 ff ff       	call   c0011299 <KePanic(char const*)>
c0012d18:	83 c4 10             	add    esp,0x10
c0012d1b:	53                   	push   ebx
c0012d1c:	31 ed                	xor    ebp,ebp
c0012d1e:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012d22:	53                   	push   ebx
c0012d23:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d2a:	57                   	push   edi
c0012d2b:	e8 04 fc ff ff       	call   c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d30:	83 c4 10             	add    esp,0x10
c0012d33:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012d37:	89 f0                	mov    eax,esi
c0012d39:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012d3d:	c1 e0 08             	shl    eax,0x8
c0012d40:	09 c6                	or     esi,eax
c0012d42:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012d46:	c1 e6 08             	shl    esi,0x8
c0012d49:	09 c6                	or     esi,eax
c0012d4b:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012d4f:	7e 72                	jle    c0012dc3 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012d51:	85 f6                	test   esi,esi
c0012d53:	75 25                	jne    c0012d7a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012d55:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012d5a:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012d5e:	50                   	push   eax
c0012d5f:	6a 00                	push   0x0
c0012d61:	6a 00                	push   0x0
c0012d63:	57                   	push   edi
c0012d64:	e8 75 fe ff ff       	call   c0012bde <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012d69:	83 c4 10             	add    esp,0x10
c0012d6c:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012d6f:	89 c6                	mov    esi,eax
c0012d71:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012d74:	c1 f8 10             	sar    eax,0x10
c0012d77:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012d7a:	51                   	push   ecx
c0012d7b:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012d7f:	52                   	push   edx
c0012d80:	56                   	push   esi
c0012d81:	57                   	push   edi
c0012d82:	e8 ad fb ff ff       	call   c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d87:	83 c4 0c             	add    esp,0xc
c0012d8a:	6a 27                	push   0x27
c0012d8c:	6a 00                	push   0x0
c0012d8e:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012d92:	51                   	push   ecx
c0012d93:	e8 58 d7 fe ff       	call   c00004f0 <memset>
c0012d98:	6b c5 27             	imul   eax,ebp,0x27
c0012d9b:	83 c4 0c             	add    esp,0xc
c0012d9e:	6a 27                	push   0x27
c0012da0:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012da7:	50                   	push   eax
c0012da8:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012dac:	51                   	push   ecx
c0012dad:	e8 de d8 fe ff       	call   c0000690 <strncpy>
c0012db2:	83 c4 0c             	add    esp,0xc
c0012db5:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012db9:	52                   	push   edx
c0012dba:	56                   	push   esi
c0012dbb:	57                   	push   edi
c0012dbc:	e8 97 fc ff ff       	call   c0012a58 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012dc1:	eb 19                	jmp    c0012ddc <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012dc3:	85 f6                	test   esi,esi
c0012dc5:	74 18                	je     c0012ddf <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012dc7:	52                   	push   edx
c0012dc8:	52                   	push   edx
c0012dc9:	56                   	push   esi
c0012dca:	57                   	push   edi
c0012dcb:	e8 c4 fc ff ff       	call   c0012a94 <CmFreeExtent(Reghive_Tag*, int)>
c0012dd0:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012dd4:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012dd8:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012ddc:	83 c4 10             	add    esp,0x10
c0012ddf:	45                   	inc    ebp
c0012de0:	83 c3 03             	add    ebx,0x3
c0012de3:	83 fd 07             	cmp    ebp,0x7
c0012de6:	0f 85 47 ff ff ff    	jne    c0012d33 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012dec:	50                   	push   eax
c0012ded:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012df1:	50                   	push   eax
c0012df2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012df9:	57                   	push   edi
c0012dfa:	e8 59 fc ff ff       	call   c0012a58 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012dff:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012e05:	5b                   	pop    ebx
c0012e06:	5e                   	pop    esi
c0012e07:	5f                   	pop    edi
c0012e08:	5d                   	pop    ebp
c0012e09:	c3                   	ret    

c0012e0a <CmGetMatch(char*, char*, bool, bool*)>:
c0012e0a:	56                   	push   esi
c0012e0b:	53                   	push   ebx
c0012e0c:	50                   	push   eax
c0012e0d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012e12:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012e16:	74 25                	je     c0012e3d <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012e18:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012e1b:	31 db                	xor    ebx,ebx
c0012e1d:	50                   	push   eax
c0012e1e:	50                   	push   eax
c0012e1f:	8d 04 9d 80 35 02 c0 	lea    eax,[ebx*4-0x3ffdca80]
c0012e26:	50                   	push   eax
c0012e27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e2b:	e8 50 d9 fe ff       	call   c0000780 <strcmp>
c0012e30:	83 c4 10             	add    esp,0x10
c0012e33:	85 c0                	test   eax,eax
c0012e35:	74 2e                	je     c0012e65 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012e37:	43                   	inc    ebx
c0012e38:	83 fb 3f             	cmp    ebx,0x3f
c0012e3b:	75 e0                	jne    c0012e1d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012e3d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e40:	31 db                	xor    ebx,ebx
c0012e42:	51                   	push   ecx
c0012e43:	51                   	push   ecx
c0012e44:	8d 04 9d 80 35 02 c0 	lea    eax,[ebx*4-0x3ffdca80]
c0012e4b:	50                   	push   eax
c0012e4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012e50:	e8 2b d9 fe ff       	call   c0000780 <strcmp>
c0012e55:	83 c4 10             	add    esp,0x10
c0012e58:	85 c0                	test   eax,eax
c0012e5a:	74 09                	je     c0012e65 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012e5c:	43                   	inc    ebx
c0012e5d:	83 fb 3f             	cmp    ebx,0x3f
c0012e60:	75 e0                	jne    c0012e42 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012e62:	83 cb ff             	or     ebx,0xffffffff
c0012e65:	5a                   	pop    edx
c0012e66:	89 d8                	mov    eax,ebx
c0012e68:	5b                   	pop    ebx
c0012e69:	5e                   	pop    esi
c0012e6a:	c3                   	ret    

c0012e6b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012e6b:	55                   	push   ebp
c0012e6c:	31 c0                	xor    eax,eax
c0012e6e:	57                   	push   edi
c0012e6f:	56                   	push   esi
c0012e70:	53                   	push   ebx
c0012e71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e79:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012e7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e81:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012e83:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012e86:	83 fd 1f             	cmp    ebp,0x1f
c0012e89:	7f 0b                	jg     c0012e96 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012e8b:	0f b6 c2             	movzx  eax,dl
c0012e8e:	d3 e0                	shl    eax,cl
c0012e90:	09 07                	or     DWORD PTR [edi],eax
c0012e92:	b0 01                	mov    al,0x1
c0012e94:	01 33                	add    DWORD PTR [ebx],esi
c0012e96:	5b                   	pop    ebx
c0012e97:	5e                   	pop    esi
c0012e98:	5f                   	pop    edi
c0012e99:	5d                   	pop    ebp
c0012e9a:	c3                   	ret    

c0012e9b <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012e9b:	57                   	push   edi
c0012e9c:	56                   	push   esi
c0012e9d:	53                   	push   ebx
c0012e9e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012ea2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012ea6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012eaa:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012eae:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012eb0:	7c 17                	jl     c0012ec9 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012eb2:	8b 17                	mov    edx,DWORD PTR [edi]
c0012eb4:	b8 01 00 00 00       	mov    eax,0x1
c0012eb9:	d3 e0                	shl    eax,cl
c0012ebb:	48                   	dec    eax
c0012ebc:	21 d0                	and    eax,edx
c0012ebe:	d3 ea                	shr    edx,cl
c0012ec0:	89 17                	mov    DWORD PTR [edi],edx
c0012ec2:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012ec4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012ec7:	eb 05                	jmp    c0012ece <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012ec9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ecc:	31 c0                	xor    eax,eax
c0012ece:	5b                   	pop    ebx
c0012ecf:	5e                   	pop    esi
c0012ed0:	5f                   	pop    edi
c0012ed1:	c3                   	ret    

c0012ed2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012ed2:	83 ec 40             	sub    esp,0x40
c0012ed5:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ed9:	50                   	push   eax
c0012eda:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ede:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ee2:	e8 4d fa ff ff       	call   c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ee7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012eeb:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012eef:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012ef3:	89 10                	mov    DWORD PTR [eax],edx
c0012ef5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012ef8:	83 c4 4c             	add    esp,0x4c
c0012efb:	c3                   	ret    

c0012efc <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012efc:	55                   	push   ebp
c0012efd:	57                   	push   edi
c0012efe:	56                   	push   esi
c0012eff:	53                   	push   ebx
c0012f00:	83 ec 40             	sub    esp,0x40
c0012f03:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012f07:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012f0b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012f0f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012f13:	53                   	push   ebx
c0012f14:	56                   	push   esi
c0012f15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012f19:	e8 16 fa ff ff       	call   c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f1e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012f22:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012f26:	83 c4 0c             	add    esp,0xc
c0012f29:	53                   	push   ebx
c0012f2a:	56                   	push   esi
c0012f2b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012f2f:	e8 24 fb ff ff       	call   c0012a58 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f34:	83 c4 4c             	add    esp,0x4c
c0012f37:	5b                   	pop    ebx
c0012f38:	5e                   	pop    esi
c0012f39:	5f                   	pop    edi
c0012f3a:	5d                   	pop    ebp
c0012f3b:	c3                   	ret    

c0012f3c <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012f3c:	55                   	push   ebp
c0012f3d:	57                   	push   edi
c0012f3e:	56                   	push   esi
c0012f3f:	31 f6                	xor    esi,esi
c0012f41:	53                   	push   ebx
c0012f42:	31 db                	xor    ebx,ebx
c0012f44:	83 ec 40             	sub    esp,0x40
c0012f47:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012f4f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012f57:	6a 12                	push   0x12
c0012f59:	68 ee 00 00 00       	push   0xee
c0012f5e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012f62:	e8 89 d5 fe ff       	call   c00004f0 <memset>
c0012f67:	83 c4 10             	add    esp,0x10
c0012f6a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012f6e:	6a 08                	push   0x8
c0012f70:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f74:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012f78:	50                   	push   eax
c0012f79:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012f7d:	55                   	push   ebp
c0012f7e:	57                   	push   edi
c0012f7f:	e8 e7 fe ff ff       	call   c0012e6b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012f84:	83 c4 10             	add    esp,0x10
c0012f87:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f8b:	50                   	push   eax
c0012f8c:	6a 06                	push   0x6
c0012f8e:	55                   	push   ebp
c0012f8f:	57                   	push   edi
c0012f90:	e8 06 ff ff ff       	call   c0012e9b <CmGetShift(unsigned int*, int*, int, bool*)>
c0012f95:	83 c4 10             	add    esp,0x10
c0012f98:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f9d:	74 07                	je     c0012fa6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012f9f:	46                   	inc    esi
c0012fa0:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012fa4:	eb e1                	jmp    c0012f87 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012fa6:	43                   	inc    ebx
c0012fa7:	83 fb 12             	cmp    ebx,0x12
c0012faa:	75 c2                	jne    c0012f6e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012fac:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012fb0:	31 f6                	xor    esi,esi
c0012fb2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012fb5:	50                   	push   eax
c0012fb6:	50                   	push   eax
c0012fb7:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012fbc:	46                   	inc    esi
c0012fbd:	8d 04 85 80 35 02 c0 	lea    eax,[eax*4-0x3ffdca80]
c0012fc4:	50                   	push   eax
c0012fc5:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012fc9:	e8 a2 d8 fe ff       	call   c0000870 <strcat>
c0012fce:	83 c4 10             	add    esp,0x10
c0012fd1:	83 fe 18             	cmp    esi,0x18
c0012fd4:	75 df                	jne    c0012fb5 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012fd6:	83 c4 3c             	add    esp,0x3c
c0012fd9:	31 c0                	xor    eax,eax
c0012fdb:	5b                   	pop    ebx
c0012fdc:	5e                   	pop    esi
c0012fdd:	5f                   	pop    edi
c0012fde:	5d                   	pop    ebp
c0012fdf:	c3                   	ret    

c0012fe0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012fe0:	83 ec 40             	sub    esp,0x40
c0012fe3:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012fe7:	50                   	push   eax
c0012fe8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ff0:	e8 3f f9 ff ff       	call   c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ff5:	58                   	pop    eax
c0012ff6:	5a                   	pop    edx
c0012ff7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012ffb:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012fff:	50                   	push   eax
c0013000:	e8 37 ff ff ff       	call   c0012f3c <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0013005:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001300a:	83 c4 4c             	add    esp,0x4c
c001300d:	c3                   	ret    

c001300e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001300e:	55                   	push   ebp
c001300f:	57                   	push   edi
c0013010:	56                   	push   esi
c0013011:	53                   	push   ebx
c0013012:	31 db                	xor    ebx,ebx
c0013014:	83 ec 70             	sub    esp,0x70
c0013017:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001301e:	6a 30                	push   0x30
c0013020:	6a 00                	push   0x0
c0013022:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013026:	56                   	push   esi
c0013027:	e8 c4 d4 fe ff       	call   c00004f0 <memset>
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	83 ec 0c             	sub    esp,0xc
c0013032:	57                   	push   edi
c0013033:	e8 48 d5 fe ff       	call   c0000580 <strlen>
c0013038:	83 c4 10             	add    esp,0x10
c001303b:	39 d8                	cmp    eax,ebx
c001303d:	76 16                	jbe    c0013055 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c001303f:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0013043:	83 ec 0c             	sub    esp,0xc
c0013046:	50                   	push   eax
c0013047:	e8 14 d9 fe ff       	call   c0000960 <toupper>
c001304c:	83 c4 10             	add    esp,0x10
c001304f:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0013052:	43                   	inc    ebx
c0013053:	eb da                	jmp    c001302f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0013055:	52                   	push   edx
c0013056:	31 db                	xor    ebx,ebx
c0013058:	6a 18                	push   0x18
c001305a:	31 ff                	xor    edi,edi
c001305c:	6a 3f                	push   0x3f
c001305e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013062:	50                   	push   eax
c0013063:	e8 88 d4 fe ff       	call   c00004f0 <memset>
c0013068:	83 c4 10             	add    esp,0x10
c001306b:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c001306f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013073:	84 c0                	test   al,al
c0013075:	0f 84 af 00 00 00    	je     c001312a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001307b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001307f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013082:	83 ec 0c             	sub    esp,0xc
c0013085:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c001308a:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c001308e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0013092:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0013097:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c001309b:	56                   	push   esi
c001309c:	e8 df d4 fe ff       	call   c0000580 <strlen>
c00130a1:	83 c4 10             	add    esp,0x10
c00130a4:	85 c0                	test   eax,eax
c00130a6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00130aa:	74 0b                	je     c00130b7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00130ac:	50                   	push   eax
c00130ad:	6a 01                	push   0x1
c00130af:	56                   	push   esi
c00130b0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00130b4:	50                   	push   eax
c00130b5:	eb 0a                	jmp    c00130c1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00130b7:	50                   	push   eax
c00130b8:	6a 00                	push   0x0
c00130ba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00130be:	50                   	push   eax
c00130bf:	6a 00                	push   0x0
c00130c1:	e8 44 fd ff ff       	call   c0012e0a <CmGetMatch(char*, char*, bool, bool*)>
c00130c6:	83 c4 10             	add    esp,0x10
c00130c9:	83 f8 ff             	cmp    eax,0xffffffff
c00130cc:	75 1a                	jne    c00130e8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00130ce:	83 ec 0c             	sub    esp,0xc
c00130d1:	68 f9 20 02 c0       	push   0xc00220f9
c00130d6:	e8 be e1 ff ff       	call   c0011299 <KePanic(char const*)>
c00130db:	83 c4 10             	add    esp,0x10
c00130de:	b8 02 00 00 00       	mov    eax,0x2
c00130e3:	e9 bb 00 00 00       	jmp    c00131a3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00130e8:	83 ff 18             	cmp    edi,0x18
c00130eb:	75 1a                	jne    c0013107 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00130ed:	83 ec 0c             	sub    esp,0xc
c00130f0:	68 0e 21 02 c0       	push   0xc002210e
c00130f5:	e8 9f e1 ff ff       	call   c0011299 <KePanic(char const*)>
c00130fa:	83 c4 10             	add    esp,0x10
c00130fd:	b8 01 00 00 00       	mov    eax,0x1
c0013102:	e9 9c 00 00 00       	jmp    c00131a3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013107:	47                   	inc    edi
c0013108:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001310d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0013111:	0f 45 dd             	cmovne ebx,ebp
c0013114:	83 ec 0c             	sub    esp,0xc
c0013117:	56                   	push   esi
c0013118:	e8 63 d4 fe ff       	call   c0000580 <strlen>
c001311d:	83 c4 10             	add    esp,0x10
c0013120:	85 c0                	test   eax,eax
c0013122:	74 06                	je     c001312a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013124:	43                   	inc    ebx
c0013125:	e9 41 ff ff ff       	jmp    c001306b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001312a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013132:	31 db                	xor    ebx,ebx
c0013134:	31 ff                	xor    edi,edi
c0013136:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001313e:	50                   	push   eax
c001313f:	6a 12                	push   0x12
c0013141:	68 ee 00 00 00       	push   0xee
c0013146:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001314d:	e8 9e d3 fe ff       	call   c00004f0 <memset>
c0013152:	83 c4 10             	add    esp,0x10
c0013155:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013159:	83 fb 17             	cmp    ebx,0x17
c001315c:	7e 26                	jle    c0013184 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c001315e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013162:	50                   	push   eax
c0013163:	6a 08                	push   0x8
c0013165:	55                   	push   ebp
c0013166:	56                   	push   esi
c0013167:	e8 2f fd ff ff       	call   c0012e9b <CmGetShift(unsigned int*, int*, int, bool*)>
c001316c:	83 c4 10             	add    esp,0x10
c001316f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013174:	74 26                	je     c001319c <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0013176:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001317d:	4b                   	dec    ebx
c001317e:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0013181:	47                   	inc    edi
c0013182:	eb 1c                	jmp    c00131a0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013184:	6a 06                	push   0x6
c0013186:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c001318b:	50                   	push   eax
c001318c:	55                   	push   ebp
c001318d:	56                   	push   esi
c001318e:	e8 d8 fc ff ff       	call   c0012e6b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013193:	83 c4 10             	add    esp,0x10
c0013196:	84 c0                	test   al,al
c0013198:	75 06                	jne    c00131a0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001319a:	eb c2                	jmp    c001315e <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c001319c:	31 c0                	xor    eax,eax
c001319e:	eb 03                	jmp    c00131a3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00131a0:	43                   	inc    ebx
c00131a1:	eb b2                	jmp    c0013155 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c00131a3:	83 c4 6c             	add    esp,0x6c
c00131a6:	5b                   	pop    ebx
c00131a7:	5e                   	pop    esi
c00131a8:	5f                   	pop    edi
c00131a9:	5d                   	pop    ebp
c00131aa:	c3                   	ret    

c00131ab <CmCreateString(Reghive_Tag*, int, char const*)>:
c00131ab:	53                   	push   ebx
c00131ac:	83 ec 3c             	sub    esp,0x3c
c00131af:	6a 2b                	push   0x2b
c00131b1:	6a 00                	push   0x0
c00131b3:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00131b7:	53                   	push   ebx
c00131b8:	e8 33 d3 fe ff       	call   c00004f0 <memset>
c00131bd:	58                   	pop    eax
c00131be:	5a                   	pop    edx
c00131bf:	8d 44 24 11          	lea    eax,[esp+0x11]
c00131c3:	50                   	push   eax
c00131c4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00131c8:	e8 41 fe ff ff       	call   c001300e <CmConvertToInternalFilename(char const*, unsigned char*)>
c00131cd:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00131d2:	83 c4 0c             	add    esp,0xc
c00131d5:	6a 15                	push   0x15
c00131d7:	6a 00                	push   0x0
c00131d9:	8d 44 24 27          	lea    eax,[esp+0x27]
c00131dd:	50                   	push   eax
c00131de:	e8 0d d3 fe ff       	call   c00004f0 <memset>
c00131e3:	53                   	push   ebx
c00131e4:	6a 00                	push   0x0
c00131e6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131ea:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131ee:	e8 eb f9 ff ff       	call   c0012bde <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131f3:	83 c4 58             	add    esp,0x58
c00131f6:	5b                   	pop    ebx
c00131f7:	c3                   	ret    

c00131f8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00131f8:	56                   	push   esi
c00131f9:	53                   	push   ebx
c00131fa:	83 ec 48             	sub    esp,0x48
c00131fd:	6a 12                	push   0x12
c00131ff:	68 ff 00 00 00       	push   0xff
c0013204:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013208:	56                   	push   esi
c0013209:	e8 e2 d2 fe ff       	call   c00004f0 <memset>
c001320e:	5a                   	pop    edx
c001320f:	59                   	pop    ecx
c0013210:	56                   	push   esi
c0013211:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013215:	e8 f4 fd ff ff       	call   c001300e <CmConvertToInternalFilename(char const*, unsigned char*)>
c001321a:	83 c4 10             	add    esp,0x10
c001321d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013221:	85 db                	test   ebx,ebx
c0013223:	74 42                	je     c0013267 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013225:	50                   	push   eax
c0013226:	8d 44 24 19          	lea    eax,[esp+0x19]
c001322a:	50                   	push   eax
c001322b:	53                   	push   ebx
c001322c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013230:	e8 ff f6 ff ff       	call   c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013235:	83 c4 0c             	add    esp,0xc
c0013238:	6a 12                	push   0x12
c001323a:	8d 44 24 21          	lea    eax,[esp+0x21]
c001323e:	50                   	push   eax
c001323f:	56                   	push   esi
c0013240:	e8 3b d1 fe ff       	call   c0000380 <memcmp>
c0013245:	83 c4 10             	add    esp,0x10
c0013248:	85 c0                	test   eax,eax
c001324a:	74 1e                	je     c001326a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001324c:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013251:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0013256:	c1 e3 08             	shl    ebx,0x8
c0013259:	09 d8                	or     eax,ebx
c001325b:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013260:	c1 e3 10             	shl    ebx,0x10
c0013263:	09 c3                	or     ebx,eax
c0013265:	eb ba                	jmp    c0013221 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013267:	83 cb ff             	or     ebx,0xffffffff
c001326a:	83 c4 44             	add    esp,0x44
c001326d:	89 d8                	mov    eax,ebx
c001326f:	5b                   	pop    ebx
c0013270:	5e                   	pop    esi
c0013271:	c3                   	ret    

c0013272 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013272:	57                   	push   edi
c0013273:	56                   	push   esi
c0013274:	53                   	push   ebx
c0013275:	83 ec 34             	sub    esp,0x34
c0013278:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001327c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013280:	6a 2b                	push   0x2b
c0013282:	6a 00                	push   0x0
c0013284:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013288:	53                   	push   ebx
c0013289:	e8 62 d2 fe ff       	call   c00004f0 <memset>
c001328e:	58                   	pop    eax
c001328f:	5a                   	pop    edx
c0013290:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013294:	50                   	push   eax
c0013295:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013299:	e8 70 fd ff ff       	call   c001300e <CmConvertToInternalFilename(char const*, unsigned char*)>
c001329e:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00132a2:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00132a6:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00132aa:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00132ae:	53                   	push   ebx
c00132af:	6a 00                	push   0x0
c00132b1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132b9:	e8 20 f9 ff ff       	call   c0012bde <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00132be:	83 c4 50             	add    esp,0x50
c00132c1:	5b                   	pop    ebx
c00132c2:	5e                   	pop    esi
c00132c3:	5f                   	pop    edi
c00132c4:	c3                   	ret    

c00132c5 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00132c5:	55                   	push   ebp
c00132c6:	57                   	push   edi
c00132c7:	56                   	push   esi
c00132c8:	53                   	push   ebx
c00132c9:	83 ec 40             	sub    esp,0x40
c00132cc:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00132d0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00132d4:	6a 2b                	push   0x2b
c00132d6:	6a 00                	push   0x0
c00132d8:	8d 74 24 11          	lea    esi,[esp+0x11]
c00132dc:	56                   	push   esi
c00132dd:	e8 0e d2 fe ff       	call   c00004f0 <memset>
c00132e2:	5f                   	pop    edi
c00132e3:	89 ef                	mov    edi,ebp
c00132e5:	58                   	pop    eax
c00132e6:	8d 44 24 11          	lea    eax,[esp+0x11]
c00132ea:	50                   	push   eax
c00132eb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00132ef:	e8 1a fd ff ff       	call   c001300e <CmConvertToInternalFilename(char const*, unsigned char*)>
c00132f4:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00132f9:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00132fe:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013303:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013308:	83 c4 10             	add    esp,0x10
c001330b:	85 ed                	test   ebp,ebp
c001330d:	74 14                	je     c0013323 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001330f:	51                   	push   ecx
c0013310:	51                   	push   ecx
c0013311:	57                   	push   edi
c0013312:	53                   	push   ebx
c0013313:	e8 0e f7 ff ff       	call   c0012a26 <CmGetNext(Reghive_Tag*, int)>
c0013318:	83 c4 10             	add    esp,0x10
c001331b:	85 c0                	test   eax,eax
c001331d:	74 04                	je     c0013323 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001331f:	89 c7                	mov    edi,eax
c0013321:	eb e8                	jmp    c001330b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013323:	56                   	push   esi
c0013324:	6a 00                	push   0x0
c0013326:	57                   	push   edi
c0013327:	53                   	push   ebx
c0013328:	e8 b1 f8 ff ff       	call   c0012bde <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001332d:	83 c4 0c             	add    esp,0xc
c0013330:	56                   	push   esi
c0013331:	50                   	push   eax
c0013332:	89 c7                	mov    edi,eax
c0013334:	53                   	push   ebx
c0013335:	e8 fa f5 ff ff       	call   c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001333a:	58                   	pop    eax
c001333b:	5a                   	pop    edx
c001333c:	6a 6c                	push   0x6c
c001333e:	6a 00                	push   0x0
c0013340:	6a 00                	push   0x0
c0013342:	68 1f 21 02 c0       	push   0xc002211f
c0013347:	57                   	push   edi
c0013348:	53                   	push   ebx
c0013349:	e8 24 ff ff ff       	call   c0013272 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c001334e:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013352:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013356:	c1 e8 10             	shr    eax,0x10
c0013359:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001335d:	83 c4 1c             	add    esp,0x1c
c0013360:	56                   	push   esi
c0013361:	57                   	push   edi
c0013362:	53                   	push   ebx
c0013363:	e8 f0 f6 ff ff       	call   c0012a58 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013368:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001336d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013372:	c1 e0 08             	shl    eax,0x8
c0013375:	09 c2                	or     edx,eax
c0013377:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001337c:	83 c4 4c             	add    esp,0x4c
c001337f:	5b                   	pop    ebx
c0013380:	5e                   	pop    esi
c0013381:	c1 e0 10             	shl    eax,0x10
c0013384:	09 d0                	or     eax,edx
c0013386:	5f                   	pop    edi
c0013387:	5d                   	pop    ebp
c0013388:	c3                   	ret    

c0013389 <zStrtok(char*, char const*)>:
c0013389:	55                   	push   ebp
c001338a:	57                   	push   edi
c001338b:	56                   	push   esi
c001338c:	53                   	push   ebx
c001338d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013391:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013395:	85 db                	test   ebx,ebx
c0013397:	74 2f                	je     c00133c8 <zStrtok(char*, char const*)+0x3f>
c0013399:	85 c0                	test   eax,eax
c001339b:	75 09                	jne    c00133a6 <zStrtok(char*, char const*)+0x1d>
c001339d:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c00133a2:	85 c0                	test   eax,eax
c00133a4:	74 50                	je     c00133f6 <zStrtok(char*, char const*)+0x6d>
c00133a6:	31 c9                	xor    ecx,ecx
c00133a8:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00133ac:	74 03                	je     c00133b1 <zStrtok(char*, char const*)+0x28>
c00133ae:	41                   	inc    ecx
c00133af:	eb f7                	jmp    c00133a8 <zStrtok(char*, char const*)+0x1f>
c00133b1:	31 d2                	xor    edx,edx
c00133b3:	39 ca                	cmp    edx,ecx
c00133b5:	74 15                	je     c00133cc <zStrtok(char*, char const*)+0x43>
c00133b7:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00133bb:	8d 3c 10             	lea    edi,[eax+edx*1]
c00133be:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00133c1:	39 ee                	cmp    esi,ebp
c00133c3:	74 13                	je     c00133d8 <zStrtok(char*, char const*)+0x4f>
c00133c5:	42                   	inc    edx
c00133c6:	eb eb                	jmp    c00133b3 <zStrtok(char*, char const*)+0x2a>
c00133c8:	31 c0                	xor    eax,eax
c00133ca:	eb 2a                	jmp    c00133f6 <zStrtok(char*, char const*)+0x6d>
c00133cc:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c00133d6:	eb 1e                	jmp    c00133f6 <zStrtok(char*, char const*)+0x6d>
c00133d8:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00133db:	39 ce                	cmp    esi,ecx
c00133dd:	75 0a                	jne    c00133e9 <zStrtok(char*, char const*)+0x60>
c00133df:	40                   	inc    eax
c00133e0:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c00133e5:	89 d8                	mov    eax,ebx
c00133e7:	eb 0d                	jmp    c00133f6 <zStrtok(char*, char const*)+0x6d>
c00133e9:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00133ec:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00133f0:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c00133f6:	5b                   	pop    ebx
c00133f7:	5e                   	pop    esi
c00133f8:	5f                   	pop    edi
c00133f9:	5d                   	pop    ebp
c00133fa:	c3                   	ret    

c00133fb <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00133fb:	57                   	push   edi
c00133fc:	56                   	push   esi
c00133fd:	53                   	push   ebx
c00133fe:	81 ec 08 01 00 00    	sub    esp,0x108
c0013404:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001340b:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013412:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013416:	53                   	push   ebx
c0013417:	e8 34 d2 fe ff       	call   c0000650 <strcpy>
c001341c:	59                   	pop    ecx
c001341d:	5e                   	pop    esi
c001341e:	68 83 24 02 c0       	push   0xc0022483
c0013423:	53                   	push   ebx
c0013424:	bb 01 00 00 00       	mov    ebx,0x1
c0013429:	e8 5b ff ff ff       	call   c0013389 <zStrtok(char*, char const*)>
c001342e:	83 c4 10             	add    esp,0x10
c0013431:	85 c0                	test   eax,eax
c0013433:	74 3b                	je     c0013470 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013435:	52                   	push   edx
c0013436:	50                   	push   eax
c0013437:	6a 01                	push   0x1
c0013439:	57                   	push   edi
c001343a:	e8 b9 fd ff ff       	call   c00131f8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c001343f:	59                   	pop    ecx
c0013440:	5e                   	pop    esi
c0013441:	89 c3                	mov    ebx,eax
c0013443:	68 83 24 02 c0       	push   0xc0022483
c0013448:	6a 00                	push   0x0
c001344a:	e8 3a ff ff ff       	call   c0013389 <zStrtok(char*, char const*)>
c001344f:	83 c4 10             	add    esp,0x10
c0013452:	85 c0                	test   eax,eax
c0013454:	89 c6                	mov    esi,eax
c0013456:	74 18                	je     c0013470 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013458:	52                   	push   edx
c0013459:	52                   	push   edx
c001345a:	53                   	push   ebx
c001345b:	57                   	push   edi
c001345c:	e8 86 f5 ff ff       	call   c00129e7 <CmEnterDirectory(Reghive_Tag*, int)>
c0013461:	83 c4 10             	add    esp,0x10
c0013464:	83 f8 ff             	cmp    eax,0xffffffff
c0013467:	89 c3                	mov    ebx,eax
c0013469:	74 05                	je     c0013470 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001346b:	50                   	push   eax
c001346c:	56                   	push   esi
c001346d:	53                   	push   ebx
c001346e:	eb c9                	jmp    c0013439 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013470:	81 c4 00 01 00 00    	add    esp,0x100
c0013476:	89 d8                	mov    eax,ebx
c0013478:	5b                   	pop    ebx
c0013479:	5e                   	pop    esi
c001347a:	5f                   	pop    edi
c001347b:	c3                   	ret    

c001347c <CmDisplayTree(Reghive_Tag*, int, int)>:
c001347c:	55                   	push   ebp
c001347d:	57                   	push   edi
c001347e:	56                   	push   esi
c001347f:	53                   	push   ebx
c0013480:	83 ec 5c             	sub    esp,0x5c
c0013483:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013487:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c001348b:	85 db                	test   ebx,ebx
c001348d:	0f 8e 84 00 00 00    	jle    c0013517 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013493:	57                   	push   edi
c0013494:	31 ed                	xor    ebp,ebp
c0013496:	6a 32                	push   0x32
c0013498:	6a 00                	push   0x0
c001349a:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001349e:	57                   	push   edi
c001349f:	e8 4c d0 fe ff       	call   c00004f0 <memset>
c00134a4:	83 c4 0c             	add    esp,0xc
c00134a7:	57                   	push   edi
c00134a8:	53                   	push   ebx
c00134a9:	56                   	push   esi
c00134aa:	e8 31 fb ff ff       	call   c0012fe0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00134af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134b3:	83 c4 10             	add    esp,0x10
c00134b6:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00134ba:	7d 13                	jge    c00134cf <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00134bc:	83 ec 0c             	sub    esp,0xc
c00134bf:	45                   	inc    ebp
c00134c0:	68 27 28 02 c0       	push   0xc0022827
c00134c5:	e8 40 74 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00134ca:	83 c4 10             	add    esp,0x10
c00134cd:	eb e7                	jmp    c00134b6 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00134cf:	51                   	push   ecx
c00134d0:	57                   	push   edi
c00134d1:	53                   	push   ebx
c00134d2:	68 25 21 02 c0       	push   0xc0022125
c00134d7:	e8 2e 74 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00134dc:	83 c4 10             	add    esp,0x10
c00134df:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00134e4:	75 1e                	jne    c0013504 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00134e6:	52                   	push   edx
c00134e7:	52                   	push   edx
c00134e8:	53                   	push   ebx
c00134e9:	56                   	push   esi
c00134ea:	e8 f8 f4 ff ff       	call   c00129e7 <CmEnterDirectory(Reghive_Tag*, int)>
c00134ef:	83 c4 0c             	add    esp,0xc
c00134f2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00134f6:	8d 51 04             	lea    edx,[ecx+0x4]
c00134f9:	52                   	push   edx
c00134fa:	50                   	push   eax
c00134fb:	56                   	push   esi
c00134fc:	e8 7b ff ff ff       	call   c001347c <CmDisplayTree(Reghive_Tag*, int, int)>
c0013501:	83 c4 10             	add    esp,0x10
c0013504:	50                   	push   eax
c0013505:	50                   	push   eax
c0013506:	53                   	push   ebx
c0013507:	56                   	push   esi
c0013508:	e8 19 f5 ff ff       	call   c0012a26 <CmGetNext(Reghive_Tag*, int)>
c001350d:	83 c4 10             	add    esp,0x10
c0013510:	89 c3                	mov    ebx,eax
c0013512:	e9 74 ff ff ff       	jmp    c001348b <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013517:	83 c4 5c             	add    esp,0x5c
c001351a:	5b                   	pop    ebx
c001351b:	5e                   	pop    esi
c001351c:	5f                   	pop    edi
c001351d:	5d                   	pop    ebp
c001351e:	c3                   	ret    

c001351f <CmSplitFinalSlashInPlace(char*)>:
c001351f:	53                   	push   ebx
c0013520:	83 ec 14             	sub    esp,0x14
c0013523:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013527:	53                   	push   ebx
c0013528:	e8 53 d0 fe ff       	call   c0000580 <strlen>
c001352d:	83 c4 10             	add    esp,0x10
c0013530:	48                   	dec    eax
c0013531:	85 c0                	test   eax,eax
c0013533:	74 15                	je     c001354a <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013535:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013539:	8d 14 03             	lea    edx,[ebx+eax*1]
c001353c:	75 09                	jne    c0013547 <CmSplitFinalSlashInPlace(char*)+0x28>
c001353e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013541:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013545:	eb 05                	jmp    c001354c <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013547:	48                   	dec    eax
c0013548:	eb e7                	jmp    c0013531 <CmSplitFinalSlashInPlace(char*)+0x12>
c001354a:	31 c0                	xor    eax,eax
c001354c:	83 c4 08             	add    esp,0x8
c001354f:	5b                   	pop    ebx
c0013550:	c3                   	ret    

c0013551 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013551:	55                   	push   ebp
c0013552:	57                   	push   edi
c0013553:	56                   	push   esi
c0013554:	53                   	push   ebx
c0013555:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001355b:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013562:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0013565:	8d 43 01             	lea    eax,[ebx+0x1]
c0013568:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001356c:	89 f0                	mov    eax,esi
c001356e:	3c 40                	cmp    al,0x40
c0013570:	75 1b                	jne    c001358d <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0013572:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0013575:	85 c0                	test   eax,eax
c0013577:	74 08                	je     c0013581 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013579:	83 f8 3a             	cmp    eax,0x3a
c001357c:	74 03                	je     c0013581 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c001357e:	43                   	inc    ebx
c001357f:	eb f1                	jmp    c0013572 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0013581:	85 c0                	test   eax,eax
c0013583:	0f 84 45 01 00 00    	je     c00136ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013589:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001358c:	43                   	inc    ebx
c001358d:	50                   	push   eax
c001358e:	6a 40                	push   0x40
c0013590:	6a 00                	push   0x0
c0013592:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013596:	50                   	push   eax
c0013597:	e8 54 cf fe ff       	call   c00004f0 <memset>
c001359c:	89 f1                	mov    ecx,esi
c001359e:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00135a5:	31 c0                	xor    eax,eax
c00135a7:	83 c4 10             	add    esp,0x10
c00135aa:	0f be f1             	movsx  esi,cl
c00135ad:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00135b0:	85 d2                	test   edx,edx
c00135b2:	89 d1                	mov    ecx,edx
c00135b4:	0f 84 14 01 00 00    	je     c00136ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00135ba:	3d c7 00 00 00       	cmp    eax,0xc7
c00135bf:	0f 8f 09 01 00 00    	jg     c00136ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00135c5:	83 fa 0a             	cmp    edx,0xa
c00135c8:	0f 85 f1 00 00 00    	jne    c00136bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c00135ce:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00135d3:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00135d8:	89 c8                	mov    eax,ecx
c00135da:	a8 df                	test   al,0xdf
c00135dc:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00135e1:	83 f9 23             	cmp    ecx,0x23
c00135e4:	0f 94 c2             	sete   dl
c00135e7:	89 d5                	mov    ebp,edx
c00135e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00135ed:	09 ea                	or     edx,ebp
c00135ef:	80 e2 01             	and    dl,0x1
c00135f2:	75 47                	jne    c001363b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00135f4:	83 e8 09             	sub    eax,0x9
c00135f7:	3c 01                	cmp    al,0x1
c00135f9:	76 40                	jbe    c001363b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00135fb:	83 f9 5b             	cmp    ecx,0x5b
c00135fe:	75 42                	jne    c0013642 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013600:	83 fe 40             	cmp    esi,0x40
c0013603:	75 36                	jne    c001363b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013605:	83 ec 0c             	sub    esp,0xc
c0013608:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c001360c:	55                   	push   ebp
c001360d:	e8 6e cf fe ff       	call   c0000580 <strlen>
c0013612:	83 c4 10             	add    esp,0x10
c0013615:	83 f8 3f             	cmp    eax,0x3f
c0013618:	0f 87 b0 00 00 00    	ja     c00136ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001361e:	50                   	push   eax
c001361f:	50                   	push   eax
c0013620:	55                   	push   ebp
c0013621:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0013625:	55                   	push   ebp
c0013626:	e8 25 d0 fe ff       	call   c0000650 <strcpy>
c001362b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001362e:	e8 4d cf fe ff       	call   c0000580 <strlen>
c0013633:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013638:	83 c4 10             	add    esp,0x10
c001363b:	31 d2                	xor    edx,edx
c001363d:	e9 84 00 00 00       	jmp    c00136c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013642:	83 fe 40             	cmp    esi,0x40
c0013645:	74 06                	je     c001364d <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013647:	8d 54 24 58          	lea    edx,[esp+0x58]
c001364b:	eb 19                	jmp    c0013666 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c001364d:	51                   	push   ecx
c001364e:	51                   	push   ecx
c001364f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013653:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013657:	50                   	push   eax
c0013658:	e8 23 d1 fe ff       	call   c0000780 <strcmp>
c001365d:	83 c4 10             	add    esp,0x10
c0013660:	85 c0                	test   eax,eax
c0013662:	75 d7                	jne    c001363b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013664:	eb e1                	jmp    c0013647 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0013666:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013669:	85 c9                	test   ecx,ecx
c001366b:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013670:	83 f9 3d             	cmp    ecx,0x3d
c0013673:	0f 94 c0             	sete   al
c0013676:	89 c5                	mov    ebp,eax
c0013678:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001367c:	09 e8                	or     eax,ebp
c001367e:	a8 01                	test   al,0x1
c0013680:	89 c5                	mov    ebp,eax
c0013682:	75 03                	jne    c0013687 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013684:	42                   	inc    edx
c0013685:	eb df                	jmp    c0013666 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013687:	85 c9                	test   ecx,ecx
c0013689:	74 43                	je     c00136ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001368b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001368f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013692:	52                   	push   edx
c0013693:	52                   	push   edx
c0013694:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013698:	50                   	push   eax
c0013699:	53                   	push   ebx
c001369a:	e8 e1 d0 fe ff       	call   c0000780 <strcmp>
c001369f:	83 c4 10             	add    esp,0x10
c00136a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136a6:	85 c0                	test   eax,eax
c00136a8:	75 91                	jne    c001363b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00136aa:	50                   	push   eax
c00136ab:	42                   	inc    edx
c00136ac:	50                   	push   eax
c00136ad:	52                   	push   edx
c00136ae:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00136b5:	e8 96 cf fe ff       	call   c0000650 <strcpy>
c00136ba:	83 c4 10             	add    esp,0x10
c00136bd:	eb 11                	jmp    c00136d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c00136bf:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00136c3:	8d 50 01             	lea    edx,[eax+0x1]
c00136c6:	47                   	inc    edi
c00136c7:	89 d0                	mov    eax,edx
c00136c9:	e9 df fe ff ff       	jmp    c00135ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c00136ce:	31 ed                	xor    ebp,ebp
c00136d0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00136d6:	89 e8                	mov    eax,ebp
c00136d8:	5b                   	pop    ebx
c00136d9:	5e                   	pop    esi
c00136da:	5f                   	pop    edi
c00136db:	5d                   	pop    ebp
c00136dc:	c3                   	ret    

c00136dd <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00136dd:	57                   	push   edi
c00136de:	56                   	push   esi
c00136df:	53                   	push   ebx
c00136e0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00136e6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00136ed:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00136f4:	53                   	push   ebx
c00136f5:	e8 86 ce fe ff       	call   c0000580 <strlen>
c00136fa:	89 34 24             	mov    DWORD PTR [esp],esi
c00136fd:	89 c7                	mov    edi,eax
c00136ff:	e8 7c ce fe ff       	call   c0000580 <strlen>
c0013704:	83 c4 10             	add    esp,0x10
c0013707:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001370b:	3d ff 00 00 00       	cmp    eax,0xff
c0013710:	0f 87 d2 00 00 00    	ja     c00137e8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10b>
c0013716:	57                   	push   edi
c0013717:	57                   	push   edi
c0013718:	56                   	push   esi
c0013719:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001371d:	56                   	push   esi
c001371e:	e8 2d cf fe ff       	call   c0000650 <strcpy>
c0013723:	58                   	pop    eax
c0013724:	5a                   	pop    edx
c0013725:	68 83 24 02 c0       	push   0xc0022483
c001372a:	56                   	push   esi
c001372b:	e8 40 d1 fe ff       	call   c0000870 <strcat>
c0013730:	59                   	pop    ecx
c0013731:	5f                   	pop    edi
c0013732:	53                   	push   ebx
c0013733:	56                   	push   esi
c0013734:	e8 37 d1 fe ff       	call   c0000870 <strcat>
c0013739:	58                   	pop    eax
c001373a:	5a                   	pop    edx
c001373b:	68 2f 21 02 c0       	push   0xc002212f
c0013740:	56                   	push   esi
c0013741:	e8 2a d1 fe ff       	call   c0000870 <strcat>
c0013746:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001374d:	e8 81 43 ff ff       	call   c0007ad3 <malloc>
c0013752:	6a 01                	push   0x1
c0013754:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001375a:	56                   	push   esi
c001375b:	89 c3                	mov    ebx,eax
c001375d:	50                   	push   eax
c001375e:	e8 63 80 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c0013763:	83 c4 20             	add    esp,0x20
c0013766:	85 db                	test   ebx,ebx
c0013768:	74 7e                	je     c00137e8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10b>
c001376a:	51                   	push   ecx
c001376b:	51                   	push   ecx
c001376c:	6a 01                	push   0x1
c001376e:	53                   	push   ebx
c001376f:	e8 30 81 ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c0013774:	83 c4 10             	add    esp,0x10
c0013777:	85 c0                	test   eax,eax
c0013779:	74 08                	je     c0013783 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa6>
c001377b:	83 ec 0c             	sub    esp,0xc
c001377e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013780:	53                   	push   ebx
c0013781:	eb 5f                	jmp    c00137e2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x105>
c0013783:	52                   	push   edx
c0013784:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013788:	50                   	push   eax
c0013789:	8d 44 24 20          	lea    eax,[esp+0x20]
c001378d:	50                   	push   eax
c001378e:	53                   	push   ebx
c001378f:	e8 12 84 ff ff       	call   c000bba6 <File::stat(unsigned long long*, bool*)>
c0013794:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013798:	83 c4 10             	add    esp,0x10
c001379b:	89 c1                	mov    ecx,eax
c001379d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00137a1:	74 31                	je     c00137d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf7>
c00137a3:	83 ec 0c             	sub    esp,0xc
c00137a6:	50                   	push   eax
c00137a7:	e8 27 43 ff ff       	call   c0007ad3 <malloc>
c00137ac:	89 c6                	mov    esi,eax
c00137ae:	58                   	pop    eax
c00137af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137b1:	8d 54 24 20          	lea    edx,[esp+0x20]
c00137b5:	52                   	push   edx
c00137b6:	56                   	push   esi
c00137b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137bf:	53                   	push   ebx
c00137c0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137c3:	83 c4 20             	add    esp,0x20
c00137c6:	85 c0                	test   eax,eax
c00137c8:	75 0a                	jne    c00137d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf7>
c00137ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137ce:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00137d2:	74 18                	je     c00137ec <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10f>
c00137d4:	83 ec 0c             	sub    esp,0xc
c00137d7:	53                   	push   ebx
c00137d8:	e8 25 81 ff ff       	call   c000b902 <File::close()>
c00137dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137e5:	83 c4 10             	add    esp,0x10
c00137e8:	31 c0                	xor    eax,eax
c00137ea:	eb 3b                	jmp    c0013827 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14a>
c00137ec:	83 ec 0c             	sub    esp,0xc
c00137ef:	53                   	push   ebx
c00137f0:	e8 0d 81 ff ff       	call   c000b902 <File::close()>
c00137f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137fd:	83 c4 0c             	add    esp,0xc
c0013800:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013807:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001380e:	56                   	push   esi
c001380f:	e8 3d fd ff ff       	call   c0013551 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013814:	89 34 24             	mov    DWORD PTR [esp],esi
c0013817:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001381b:	e8 c3 42 ff ff       	call   c0007ae3 <free>
c0013820:	83 c4 10             	add    esp,0x10
c0013823:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013827:	81 c4 20 01 00 00    	add    esp,0x120
c001382d:	5b                   	pop    ebx
c001382e:	5e                   	pop    esi
c001382f:	5f                   	pop    edi
c0013830:	c3                   	ret    

c0013831 <Reg::getLine(char*, char*, char*)>:
c0013831:	57                   	push   edi
c0013832:	56                   	push   esi
c0013833:	53                   	push   ebx
c0013834:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013838:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001383c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013840:	57                   	push   edi
c0013841:	56                   	push   esi
c0013842:	53                   	push   ebx
c0013843:	68 34 21 02 c0       	push   0xc0022134
c0013848:	e8 90 fe ff ff       	call   c00136dd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001384d:	83 c4 10             	add    esp,0x10
c0013850:	84 c0                	test   al,al
c0013852:	75 10                	jne    c0013864 <Reg::getLine(char*, char*, char*)+0x33>
c0013854:	57                   	push   edi
c0013855:	56                   	push   esi
c0013856:	53                   	push   ebx
c0013857:	68 59 21 02 c0       	push   0xc0022159
c001385c:	e8 7c fe ff ff       	call   c00136dd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013861:	83 c4 10             	add    esp,0x10
c0013864:	5b                   	pop    ebx
c0013865:	5e                   	pop    esi
c0013866:	5f                   	pop    edi
c0013867:	c3                   	ret    

c0013868 <Reg::readInt(char*, char*, int*)>:
c0013868:	55                   	push   ebp
c0013869:	57                   	push   edi
c001386a:	56                   	push   esi
c001386b:	53                   	push   ebx
c001386c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013872:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013876:	55                   	push   ebp
c0013877:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001387e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013885:	e8 a7 ff ff ff       	call   c0013831 <Reg::getLine(char*, char*, char*)>
c001388a:	83 c4 10             	add    esp,0x10
c001388d:	84 c0                	test   al,al
c001388f:	0f 84 b6 00 00 00    	je     c001394b <Reg::readInt(char*, char*, int*)+0xe3>
c0013895:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c001389a:	83 fa 2b             	cmp    edx,0x2b
c001389d:	74 0c                	je     c00138ab <Reg::readInt(char*, char*, int*)+0x43>
c001389f:	83 fa 2d             	cmp    edx,0x2d
c00138a2:	75 0e                	jne    c00138b2 <Reg::readInt(char*, char*, int*)+0x4a>
c00138a4:	ba 01 00 00 00       	mov    edx,0x1
c00138a9:	eb 0b                	jmp    c00138b6 <Reg::readInt(char*, char*, int*)+0x4e>
c00138ab:	ba 01 00 00 00       	mov    edx,0x1
c00138b0:	eb 02                	jmp    c00138b4 <Reg::readInt(char*, char*, int*)+0x4c>
c00138b2:	31 d2                	xor    edx,edx
c00138b4:	31 c0                	xor    eax,eax
c00138b6:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00138bb:	be 0a 00 00 00       	mov    esi,0xa
c00138c0:	75 21                	jne    c00138e3 <Reg::readInt(char*, char*, int*)+0x7b>
c00138c2:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00138c7:	83 f9 78             	cmp    ecx,0x78
c00138ca:	75 0a                	jne    c00138d6 <Reg::readInt(char*, char*, int*)+0x6e>
c00138cc:	83 c2 02             	add    edx,0x2
c00138cf:	be 10 00 00 00       	mov    esi,0x10
c00138d4:	eb 0d                	jmp    c00138e3 <Reg::readInt(char*, char*, int*)+0x7b>
c00138d6:	83 f9 62             	cmp    ecx,0x62
c00138d9:	75 08                	jne    c00138e3 <Reg::readInt(char*, char*, int*)+0x7b>
c00138db:	83 c2 02             	add    edx,0x2
c00138de:	be 02 00 00 00       	mov    esi,0x2
c00138e3:	01 d5                	add    ebp,edx
c00138e5:	31 d2                	xor    edx,edx
c00138e7:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00138eb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00138ef:	85 c9                	test   ecx,ecx
c00138f1:	0f 94 c3             	sete   bl
c00138f4:	83 f9 0d             	cmp    ecx,0xd
c00138f7:	89 df                	mov    edi,ebx
c00138f9:	0f 94 c3             	sete   bl
c00138fc:	09 df                	or     edi,ebx
c00138fe:	89 fb                	mov    ebx,edi
c0013900:	83 e7 01             	and    edi,0x1
c0013903:	75 35                	jne    c001393a <Reg::readInt(char*, char*, int*)+0xd2>
c0013905:	0f af d6             	imul   edx,esi
c0013908:	83 fe 10             	cmp    esi,0x10
c001390b:	75 26                	jne    c0013933 <Reg::readInt(char*, char*, int*)+0xcb>
c001390d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013911:	83 ef 41             	sub    edi,0x41
c0013914:	89 fb                	mov    ebx,edi
c0013916:	80 fb 05             	cmp    bl,0x5
c0013919:	77 06                	ja     c0013921 <Reg::readInt(char*, char*, int*)+0xb9>
c001391b:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c001391f:	eb 16                	jmp    c0013937 <Reg::readInt(char*, char*, int*)+0xcf>
c0013921:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013925:	83 eb 61             	sub    ebx,0x61
c0013928:	80 fb 05             	cmp    bl,0x5
c001392b:	77 06                	ja     c0013933 <Reg::readInt(char*, char*, int*)+0xcb>
c001392d:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013931:	eb 04                	jmp    c0013937 <Reg::readInt(char*, char*, int*)+0xcf>
c0013933:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013937:	45                   	inc    ebp
c0013938:	eb ad                	jmp    c00138e7 <Reg::readInt(char*, char*, int*)+0x7f>
c001393a:	84 c0                	test   al,al
c001393c:	74 02                	je     c0013940 <Reg::readInt(char*, char*, int*)+0xd8>
c001393e:	f7 da                	neg    edx
c0013940:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013947:	89 10                	mov    DWORD PTR [eax],edx
c0013949:	88 d8                	mov    al,bl
c001394b:	81 c4 ec 00 00 00    	add    esp,0xec
c0013951:	5b                   	pop    ebx
c0013952:	5e                   	pop    esi
c0013953:	5f                   	pop    edi
c0013954:	5d                   	pop    ebp
c0013955:	c3                   	ret    

c0013956 <Reg::readString(char*, char*, char*, int)>:
c0013956:	57                   	push   edi
c0013957:	56                   	push   esi
c0013958:	53                   	push   ebx
c0013959:	81 ec d4 00 00 00    	sub    esp,0xd4
c001395f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013963:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001396a:	57                   	push   edi
c001396b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013972:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013979:	e8 b3 fe ff ff       	call   c0013831 <Reg::getLine(char*, char*, char*)>
c001397e:	83 c4 10             	add    esp,0x10
c0013981:	84 c0                	test   al,al
c0013983:	89 c6                	mov    esi,eax
c0013985:	74 44                	je     c00139cb <Reg::readString(char*, char*, char*, int)+0x75>
c0013987:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001398e:	31 c0                	xor    eax,eax
c0013990:	4a                   	dec    edx
c0013991:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013994:	84 c9                	test   cl,cl
c0013996:	74 0f                	je     c00139a7 <Reg::readString(char*, char*, char*, int)+0x51>
c0013998:	39 c2                	cmp    edx,eax
c001399a:	7e 0b                	jle    c00139a7 <Reg::readString(char*, char*, char*, int)+0x51>
c001399c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001399f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00139a4:	40                   	inc    eax
c00139a5:	eb ea                	jmp    c0013991 <Reg::readString(char*, char*, char*, int)+0x3b>
c00139a7:	83 ec 0c             	sub    esp,0xc
c00139aa:	53                   	push   ebx
c00139ab:	e8 d0 cb fe ff       	call   c0000580 <strlen>
c00139b0:	83 c4 10             	add    esp,0x10
c00139b3:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00139b8:	75 11                	jne    c00139cb <Reg::readString(char*, char*, char*, int)+0x75>
c00139ba:	83 ec 0c             	sub    esp,0xc
c00139bd:	53                   	push   ebx
c00139be:	e8 bd cb fe ff       	call   c0000580 <strlen>
c00139c3:	83 c4 10             	add    esp,0x10
c00139c6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00139cb:	81 c4 d0 00 00 00    	add    esp,0xd0
c00139d1:	89 f0                	mov    eax,esi
c00139d3:	5b                   	pop    ebx
c00139d4:	5e                   	pop    esi
c00139d5:	5f                   	pop    edi
c00139d6:	c3                   	ret    

c00139d7 <Reg::readBool(char*, char*, bool*)>:
c00139d7:	83 ec 20             	sub    esp,0x20
c00139da:	8d 44 24 10          	lea    eax,[esp+0x10]
c00139de:	50                   	push   eax
c00139df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139e7:	e8 7c fe ff ff       	call   c0013868 <Reg::readInt(char*, char*, int*)>
c00139ec:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00139f0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00139f5:	0f 95 02             	setne  BYTE PTR [edx]
c00139f8:	83 c4 2c             	add    esp,0x2c
c00139fb:	c3                   	ret    

c00139fc <Reg::readBoolWithDefault(char*, char*, bool)>:
c00139fc:	53                   	push   ebx
c00139fd:	83 ec 1c             	sub    esp,0x1c
c0013a00:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013a04:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013a08:	50                   	push   eax
c0013a09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a11:	e8 c1 ff ff ff       	call   c00139d7 <Reg::readBool(char*, char*, bool*)>
c0013a16:	83 c4 10             	add    esp,0x10
c0013a19:	84 c0                	test   al,al
c0013a1b:	74 04                	je     c0013a21 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013a1d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013a21:	83 c4 18             	add    esp,0x18
c0013a24:	88 d8                	mov    al,bl
c0013a26:	5b                   	pop    ebx
c0013a27:	c3                   	ret    

c0013a28 <Reg::readIntWithDefault(char*, char*, int)>:
c0013a28:	53                   	push   ebx
c0013a29:	83 ec 1c             	sub    esp,0x1c
c0013a2c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013a30:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013a34:	50                   	push   eax
c0013a35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a3d:	e8 26 fe ff ff       	call   c0013868 <Reg::readInt(char*, char*, int*)>
c0013a42:	83 c4 10             	add    esp,0x10
c0013a45:	84 c0                	test   al,al
c0013a47:	74 04                	je     c0013a4d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013a49:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a4d:	83 c4 18             	add    esp,0x18
c0013a50:	89 d8                	mov    eax,ebx
c0013a52:	5b                   	pop    ebx
c0013a53:	c3                   	ret    

c0013a54 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013a54:	57                   	push   edi
c0013a55:	56                   	push   esi
c0013a56:	53                   	push   ebx
c0013a57:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013a5b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013a5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013a63:	56                   	push   esi
c0013a64:	57                   	push   edi
c0013a65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a6d:	e8 e4 fe ff ff       	call   c0013956 <Reg::readString(char*, char*, char*, int)>
c0013a72:	83 c4 10             	add    esp,0x10
c0013a75:	84 c0                	test   al,al
c0013a77:	75 16                	jne    c0013a8f <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013a79:	50                   	push   eax
c0013a7a:	56                   	push   esi
c0013a7b:	6a 00                	push   0x0
c0013a7d:	57                   	push   edi
c0013a7e:	e8 6d ca fe ff       	call   c00004f0 <memset>
c0013a83:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013a86:	89 de                	mov    esi,ebx
c0013a88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	89 df                	mov    edi,ebx
c0013a8f:	5b                   	pop    ebx
c0013a90:	89 f8                	mov    eax,edi
c0013a92:	5e                   	pop    esi
c0013a93:	5f                   	pop    edi
c0013a94:	c3                   	ret    

c0013a95 <SysEject(regs*)>:
c0013a95:	83 ec 0c             	sub    esp,0xc
c0013a98:	83 ca ff             	or     edx,0xffffffff
c0013a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a9f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013aa2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013aa7:	83 e9 41             	sub    ecx,0x41
c0013aaa:	83 f9 19             	cmp    ecx,0x19
c0013aad:	77 18                	ja     c0013ac7 <SysEject(regs*)+0x32>
c0013aaf:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013ab6:	85 c9                	test   ecx,ecx
c0013ab8:	74 0d                	je     c0013ac7 <SysEject(regs*)+0x32>
c0013aba:	83 ec 0c             	sub    esp,0xc
c0013abd:	51                   	push   ecx
c0013abe:	e8 c1 9f ff ff       	call   c000da84 <LogicalDisk::eject()>
c0013ac3:	83 c4 10             	add    esp,0x10
c0013ac6:	99                   	cdq    
c0013ac7:	83 c4 0c             	add    esp,0xc
c0013aca:	c3                   	ret    

c0013acb <SysExit(regs*)>:
c0013acb:	83 ec 18             	sub    esp,0x18
c0013ace:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ad2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ad5:	e8 3e 2b 00 00       	call   c0016618 <terminateTask(int)>
c0013ada:	83 c8 ff             	or     eax,0xffffffff
c0013add:	83 c4 1c             	add    esp,0x1c
c0013ae0:	89 c2                	mov    edx,eax
c0013ae2:	c3                   	ret    

c0013ae3 <SysGetCwd(regs*)>:
c0013ae3:	83 ec 10             	sub    esp,0x10
c0013ae6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013aea:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013aed:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013af0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013af5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013af8:	e8 57 7a ff ff       	call   c000b554 <Fs::getcwd(Process*, char*, int)>
c0013afd:	83 c4 1c             	add    esp,0x1c
c0013b00:	99                   	cdq    
c0013b01:	c3                   	ret    

c0013b02 <SysGetPID(regs*)>:
c0013b02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b0c:	99                   	cdq    
c0013b0d:	c3                   	ret    

c0013b0e <SysGetRAMData(regs*)>:
c0013b0e:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013b18:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013b1e:	99                   	cdq    
c0013b1f:	f7 f9                	idiv   ecx
c0013b21:	c1 e0 18             	shl    eax,0x18
c0013b24:	09 c8                	or     eax,ecx
c0013b26:	99                   	cdq    
c0013b27:	c3                   	ret    

c0013b28 <SysGetVGAPtr(regs*)>:
c0013b28:	55                   	push   ebp
c0013b29:	57                   	push   edi
c0013b2a:	56                   	push   esi
c0013b2b:	53                   	push   ebx
c0013b2c:	83 ec 18             	sub    esp,0x18
c0013b2f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013b33:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013b36:	e8 a9 25 00 00       	call   c00160e4 <Thr::processFromPID(int)>
c0013b3b:	83 c4 10             	add    esp,0x10
c0013b3e:	89 c1                	mov    ecx,eax
c0013b40:	b8 01 00 00 00       	mov    eax,0x1
c0013b45:	85 c9                	test   ecx,ecx
c0013b47:	74 57                	je     c0013ba0 <SysGetVGAPtr(regs*)+0x78>
c0013b49:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013b4d:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013b53:	74 0c                	je     c0013b61 <SysGetVGAPtr(regs*)+0x39>
c0013b55:	83 ec 0c             	sub    esp,0xc
c0013b58:	55                   	push   ebp
c0013b59:	e8 11 4c ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013b5e:	83 c4 10             	add    esp,0x10
c0013b61:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013b64:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013b69:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013b6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b6e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013b71:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b74:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013b7a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b7d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013b80:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013b86:	50                   	push   eax
c0013b87:	50                   	push   eax
c0013b88:	68 74 21 02 c0       	push   0xc0022174
c0013b8d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b90:	05 a8 0f 00 00       	add    eax,0xfa8
c0013b95:	50                   	push   eax
c0013b96:	e8 b5 ca fe ff       	call   c0000650 <strcpy>
c0013b9b:	83 c4 10             	add    esp,0x10
c0013b9e:	31 c0                	xor    eax,eax
c0013ba0:	83 c4 0c             	add    esp,0xc
c0013ba3:	31 d2                	xor    edx,edx
c0013ba5:	5b                   	pop    ebx
c0013ba6:	5e                   	pop    esi
c0013ba7:	5f                   	pop    edi
c0013ba8:	5d                   	pop    ebp
c0013ba9:	c3                   	ret    
c0013baa:	66 90                	xchg   ax,ax

c0013bac <SysKill(regs*)>:
c0013bac:	53                   	push   ebx
c0013bad:	83 ec 08             	sub    esp,0x8
c0013bb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bb4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013bb8:	75 16                	jne    c0013bd0 <SysKill(regs*)+0x24>
c0013bba:	83 ec 0c             	sub    esp,0xc
c0013bbd:	68 7e 21 02 c0       	push   0xc002217e
c0013bc2:	e8 d2 d6 ff ff       	call   c0011299 <KePanic(char const*)>
c0013bc7:	83 c4 10             	add    esp,0x10
c0013bca:	e9 89 00 00 00       	jmp    c0013c58 <SysKill(regs*)+0xac>
c0013bcf:	90                   	nop
c0013bd0:	83 ec 0c             	sub    esp,0xc
c0013bd3:	68 e4 96 02 c0       	push   0xc00296e4
c0013bd8:	e8 5f bd 00 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0013be0:	83 c4 10             	add    esp,0x10
c0013be3:	85 c0                	test   eax,eax
c0013be5:	74 19                	je     c0013c00 <SysKill(regs*)+0x54>
c0013be7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013bea:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013bed:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013bef:	74 33                	je     c0013c24 <SysKill(regs*)+0x78>
c0013bf1:	52                   	push   edx
c0013bf2:	52                   	push   edx
c0013bf3:	50                   	push   eax
c0013bf4:	68 e4 96 02 c0       	push   0xc00296e4
c0013bf9:	e8 5e c0 00 00       	call   c001fc5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013bfe:	eb e0                	jmp    c0013be0 <SysKill(regs*)+0x34>
c0013c00:	83 ec 0c             	sub    esp,0xc
c0013c03:	68 d8 96 02 c0       	push   0xc00296d8
c0013c08:	e8 2f bd 00 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c10:	83 c4 10             	add    esp,0x10
c0013c13:	85 c0                	test   eax,eax
c0013c15:	74 41                	je     c0013c58 <SysKill(regs*)+0xac>
c0013c17:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013c1a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013c1d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013c1f:	75 27                	jne    c0013c48 <SysKill(regs*)+0x9c>
c0013c21:	8d 76 00             	lea    esi,[esi+0x0]
c0013c24:	51                   	push   ecx
c0013c25:	51                   	push   ecx
c0013c26:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c31:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013c37:	e8 fb da ff ff       	call   c0011737 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013c3c:	83 c4 10             	add    esp,0x10
c0013c3f:	31 c0                	xor    eax,eax
c0013c41:	31 d2                	xor    edx,edx
c0013c43:	eb 1b                	jmp    c0013c60 <SysKill(regs*)+0xb4>
c0013c45:	8d 76 00             	lea    esi,[esi+0x0]
c0013c48:	52                   	push   edx
c0013c49:	52                   	push   edx
c0013c4a:	50                   	push   eax
c0013c4b:	68 d8 96 02 c0       	push   0xc00296d8
c0013c50:	e8 07 c0 00 00       	call   c001fc5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c55:	eb b9                	jmp    c0013c10 <SysKill(regs*)+0x64>
c0013c57:	90                   	nop
c0013c58:	83 c8 ff             	or     eax,0xffffffff
c0013c5b:	89 c2                	mov    edx,eax
c0013c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c60:	83 c4 08             	add    esp,0x8
c0013c63:	5b                   	pop    ebx
c0013c64:	c3                   	ret    

c0013c65 <SysLoadDLL(regs*)>:
c0013c65:	56                   	push   esi
c0013c66:	31 d2                	xor    edx,edx
c0013c68:	53                   	push   ebx
c0013c69:	b8 01 00 00 00       	mov    eax,0x1
c0013c6e:	51                   	push   ecx
c0013c6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c73:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013c77:	0f 84 8b 00 00 00    	je     c0013d08 <SysLoadDLL(regs*)+0xa3>
c0013c7d:	83 ec 0c             	sub    esp,0xc
c0013c80:	68 14 01 00 00       	push   0x114
c0013c85:	e8 49 3e ff ff       	call   c0007ad3 <malloc>
c0013c8a:	6a 01                	push   0x1
c0013c8c:	89 c3                	mov    ebx,eax
c0013c8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c93:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013c96:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013c99:	53                   	push   ebx
c0013c9a:	e8 27 7b ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c0013c9f:	83 c4 20             	add    esp,0x20
c0013ca2:	31 d2                	xor    edx,edx
c0013ca4:	85 db                	test   ebx,ebx
c0013ca6:	b8 02 00 00 00       	mov    eax,0x2
c0013cab:	74 5b                	je     c0013d08 <SysLoadDLL(regs*)+0xa3>
c0013cad:	83 ec 0c             	sub    esp,0xc
c0013cb0:	53                   	push   ebx
c0013cb1:	e8 b2 7e ff ff       	call   c000bb68 <File::exists()>
c0013cb6:	83 c4 10             	add    esp,0x10
c0013cb9:	84 c0                	test   al,al
c0013cbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cbd:	75 11                	jne    c0013cd0 <SysLoadDLL(regs*)+0x6b>
c0013cbf:	83 ec 0c             	sub    esp,0xc
c0013cc2:	53                   	push   ebx
c0013cc3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cc6:	83 c4 10             	add    esp,0x10
c0013cc9:	b8 03 00 00 00       	mov    eax,0x3
c0013cce:	eb 36                	jmp    c0013d06 <SysLoadDLL(regs*)+0xa1>
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	53                   	push   ebx
c0013cd4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cd7:	58                   	pop    eax
c0013cd8:	5a                   	pop    edx
c0013cd9:	6a 00                	push   0x0
c0013cdb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013cde:	e8 4b 15 00 00       	call   c001522e <Thr::loadDLL(char const*, bool)>
c0013ce3:	83 c4 10             	add    esp,0x10
c0013ce6:	31 d2                	xor    edx,edx
c0013ce8:	89 c1                	mov    ecx,eax
c0013cea:	b8 04 00 00 00       	mov    eax,0x4
c0013cef:	85 c9                	test   ecx,ecx
c0013cf1:	74 15                	je     c0013d08 <SysLoadDLL(regs*)+0xa3>
c0013cf3:	53                   	push   ebx
c0013cf4:	53                   	push   ebx
c0013cf5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013cfb:	51                   	push   ecx
c0013cfc:	e8 6c 17 00 00       	call   c001546d <Thr::executeDLL(unsigned long, void*)>
c0013d01:	83 c4 10             	add    esp,0x10
c0013d04:	31 c0                	xor    eax,eax
c0013d06:	31 d2                	xor    edx,edx
c0013d08:	59                   	pop    ecx
c0013d09:	5b                   	pop    ebx
c0013d0a:	5e                   	pop    esi
c0013d0b:	c3                   	ret    

c0013d0c <SysRead(regs*)>:
c0013d0c:	57                   	push   edi
c0013d0d:	56                   	push   esi
c0013d0e:	53                   	push   ebx
c0013d0f:	83 ec 10             	sub    esp,0x10
c0013d12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013d16:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013d19:	83 f8 02             	cmp    eax,0x2
c0013d1c:	77 10                	ja     c0013d2e <SysRead(regs*)+0x22>
c0013d1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d26:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013d2c:	eb 0e                	jmp    c0013d3c <SysRead(regs*)+0x30>
c0013d2e:	83 ec 0c             	sub    esp,0xc
c0013d31:	50                   	push   eax
c0013d32:	e8 64 57 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013d37:	83 c4 10             	add    esp,0x10
c0013d3a:	89 c1                	mov    ecx,eax
c0013d3c:	83 c8 ff             	or     eax,0xffffffff
c0013d3f:	85 c9                	test   ecx,ecx
c0013d41:	89 c2                	mov    edx,eax
c0013d43:	74 28                	je     c0013d6d <SysRead(regs*)+0x61>
c0013d45:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013d4d:	83 ec 0c             	sub    esp,0xc
c0013d50:	31 ff                	xor    edi,edi
c0013d52:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013d56:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d58:	52                   	push   edx
c0013d59:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d5c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013d5f:	57                   	push   edi
c0013d60:	56                   	push   esi
c0013d61:	51                   	push   ecx
c0013d62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013d69:	83 c4 20             	add    esp,0x20
c0013d6c:	99                   	cdq    
c0013d6d:	83 c4 10             	add    esp,0x10
c0013d70:	5b                   	pop    ebx
c0013d71:	5e                   	pop    esi
c0013d72:	5f                   	pop    edi
c0013d73:	c3                   	ret    

c0013d74 <SysRegisterSignal(regs*)>:
c0013d74:	83 ec 18             	sub    esp,0x18
c0013d77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d7b:	6a 00                	push   0x0
c0013d7d:	6a 00                	push   0x0
c0013d7f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d82:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d8d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013d93:	e8 69 d9 ff ff       	call   c0011701 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013d98:	83 c4 2c             	add    esp,0x2c
c0013d9b:	99                   	cdq    
c0013d9c:	c3                   	ret    

c0013d9d <SysRegistryGetTypeFromPath(regs*)>:
c0013d9d:	57                   	push   edi
c0013d9e:	56                   	push   esi
c0013d9f:	53                   	push   ebx
c0013da0:	81 ec 38 01 00 00    	sub    esp,0x138
c0013da6:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013dad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013db0:	68 9f 21 02 c0       	push   0xc002219f
c0013db5:	e8 50 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013dba:	5a                   	pop    edx
c0013dbb:	59                   	pop    ecx
c0013dbc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013dbf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013dc2:	e8 34 f6 ff ff       	call   c00133fb <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013dc7:	5f                   	pop    edi
c0013dc8:	5a                   	pop    edx
c0013dc9:	89 c6                	mov    esi,eax
c0013dcb:	50                   	push   eax
c0013dcc:	68 bf 21 02 c0       	push   0xc00221bf
c0013dd1:	e8 34 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013dd6:	83 c4 10             	add    esp,0x10
c0013dd9:	85 f6                	test   esi,esi
c0013ddb:	74 28                	je     c0013e05 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013ddd:	50                   	push   eax
c0013dde:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013de2:	57                   	push   edi
c0013de3:	56                   	push   esi
c0013de4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013de7:	e8 f4 f1 ff ff       	call   c0012fe0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013dec:	83 c4 0c             	add    esp,0xc
c0013def:	57                   	push   edi
c0013df0:	50                   	push   eax
c0013df1:	89 c3                	mov    ebx,eax
c0013df3:	68 c7 21 02 c0       	push   0xc00221c7
c0013df8:	e8 0d 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013dfd:	89 d8                	mov    eax,ebx
c0013dff:	83 c4 10             	add    esp,0x10
c0013e02:	99                   	cdq    
c0013e03:	eb 05                	jmp    c0013e0a <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013e05:	83 c8 ff             	or     eax,0xffffffff
c0013e08:	89 c2                	mov    edx,eax
c0013e0a:	81 c4 30 01 00 00    	add    esp,0x130
c0013e10:	5b                   	pop    ebx
c0013e11:	5e                   	pop    esi
c0013e12:	5f                   	pop    edi
c0013e13:	c3                   	ret    

c0013e14 <SysRegistryReadExtent(regs*)>:
c0013e14:	83 ec 1c             	sub    esp,0x1c
c0013e17:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e1b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013e1e:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013e21:	85 c0                	test   eax,eax
c0013e23:	79 1f                	jns    c0013e44 <SysRegistryReadExtent(regs*)+0x30>
c0013e25:	52                   	push   edx
c0013e26:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013e2b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013e2f:	52                   	push   edx
c0013e30:	50                   	push   eax
c0013e31:	51                   	push   ecx
c0013e32:	e8 9b f0 ff ff       	call   c0012ed2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013e37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013e3f:	83 c4 10             	add    esp,0x10
c0013e42:	eb 14                	jmp    c0013e58 <SysRegistryReadExtent(regs*)+0x44>
c0013e44:	83 ec 04             	sub    esp,0x4
c0013e47:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013e4a:	50                   	push   eax
c0013e4b:	51                   	push   ecx
c0013e4c:	e8 1f eb ff ff       	call   c0012970 <CmGetString(Reghive_Tag*, int, char*)>
c0013e51:	83 c4 10             	add    esp,0x10
c0013e54:	31 c0                	xor    eax,eax
c0013e56:	31 d2                	xor    edx,edx
c0013e58:	83 c4 1c             	add    esp,0x1c
c0013e5b:	c3                   	ret    

c0013e5c <SysRegistryPathToExtentLookup(regs*)>:
c0013e5c:	53                   	push   ebx
c0013e5d:	83 ec 10             	sub    esp,0x10
c0013e60:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e64:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e67:	68 dd 21 02 c0       	push   0xc00221dd
c0013e6c:	e8 99 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e71:	58                   	pop    eax
c0013e72:	5a                   	pop    edx
c0013e73:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e76:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e79:	e8 7d f5 ff ff       	call   c00133fb <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013e7e:	83 c4 18             	add    esp,0x18
c0013e81:	5b                   	pop    ebx
c0013e82:	99                   	cdq    
c0013e83:	c3                   	ret    

c0013e84 <SysRegistryEnterDirectory(regs*)>:
c0013e84:	53                   	push   ebx
c0013e85:	83 ec 10             	sub    esp,0x10
c0013e88:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e8c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e8f:	68 00 22 02 c0       	push   0xc0022200
c0013e94:	e8 71 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e99:	58                   	pop    eax
c0013e9a:	5a                   	pop    edx
c0013e9b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e9e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ea1:	e8 41 eb ff ff       	call   c00129e7 <CmEnterDirectory(Reghive_Tag*, int)>
c0013ea6:	83 c4 18             	add    esp,0x18
c0013ea9:	5b                   	pop    ebx
c0013eaa:	99                   	cdq    
c0013eab:	c3                   	ret    

c0013eac <SysRegistryGetNext(regs*)>:
c0013eac:	53                   	push   ebx
c0013ead:	83 ec 10             	sub    esp,0x10
c0013eb0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013eb4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013eb7:	68 1e 22 02 c0       	push   0xc002221e
c0013ebc:	e8 49 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013ec1:	58                   	pop    eax
c0013ec2:	5a                   	pop    edx
c0013ec3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ec6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ec9:	e8 58 eb ff ff       	call   c0012a26 <CmGetNext(Reghive_Tag*, int)>
c0013ece:	83 c4 18             	add    esp,0x18
c0013ed1:	5b                   	pop    ebx
c0013ed2:	99                   	cdq    
c0013ed3:	c3                   	ret    

c0013ed4 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013ed4:	57                   	push   edi
c0013ed5:	56                   	push   esi
c0013ed6:	53                   	push   ebx
c0013ed7:	81 ec 34 01 00 00    	sub    esp,0x134
c0013edd:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013ee4:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013ee8:	57                   	push   edi
c0013ee9:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013eec:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013eef:	e8 ec f0 ff ff       	call   c0012fe0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013ef4:	89 c3                	mov    ebx,eax
c0013ef6:	58                   	pop    eax
c0013ef7:	5a                   	pop    edx
c0013ef8:	57                   	push   edi
c0013ef9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013efc:	e8 4f c7 fe ff       	call   c0000650 <strcpy>
c0013f01:	81 c4 40 01 00 00    	add    esp,0x140
c0013f07:	89 d8                	mov    eax,ebx
c0013f09:	5b                   	pop    ebx
c0013f0a:	99                   	cdq    
c0013f0b:	5e                   	pop    esi
c0013f0c:	5f                   	pop    edi
c0013f0d:	c3                   	ret    

c0013f0e <SysRegistryOpen(regs*)>:
c0013f0e:	83 ec 18             	sub    esp,0x18
c0013f11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f15:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013f18:	e8 e4 e8 ff ff       	call   c0012801 <CmOpen(char const*)>
c0013f1d:	83 c4 1c             	add    esp,0x1c
c0013f20:	99                   	cdq    
c0013f21:	c3                   	ret    

c0013f22 <SysRegistryClose(regs*)>:
c0013f22:	83 ec 18             	sub    esp,0x18
c0013f25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f29:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f2c:	e8 ed e9 ff ff       	call   c001291e <CmClose(Reghive_Tag*)>
c0013f31:	31 c0                	xor    eax,eax
c0013f33:	31 d2                	xor    edx,edx
c0013f35:	83 c4 1c             	add    esp,0x1c
c0013f38:	c3                   	ret    

c0013f39 <SysSbrk(regs*)>:
c0013f39:	56                   	push   esi
c0013f3a:	53                   	push   ebx
c0013f3b:	50                   	push   eax
c0013f3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f45:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f48:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013f4b:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013f51:	85 db                	test   ebx,ebx
c0013f53:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013f56:	74 02                	je     c0013f5a <SysSbrk(regs*)+0x21>
c0013f58:	79 06                	jns    c0013f60 <SysSbrk(regs*)+0x27>
c0013f5a:	89 f0                	mov    eax,esi
c0013f5c:	31 d2                	xor    edx,edx
c0013f5e:	eb 2a                	jmp    c0013f8a <SysSbrk(regs*)+0x51>
c0013f60:	83 c8 ff             	or     eax,0xffffffff
c0013f63:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013f69:	89 c2                	mov    edx,eax
c0013f6b:	77 1d                	ja     c0013f8a <SysSbrk(regs*)+0x51>
c0013f6d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013f73:	50                   	push   eax
c0013f74:	68 07 0c 00 00       	push   0xc07
c0013f79:	c1 ea 0c             	shr    edx,0xc
c0013f7c:	52                   	push   edx
c0013f7d:	51                   	push   ecx
c0013f7e:	e8 83 5e ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0013f83:	89 f0                	mov    eax,esi
c0013f85:	31 d2                	xor    edx,edx
c0013f87:	83 c4 10             	add    esp,0x10
c0013f8a:	59                   	pop    ecx
c0013f8b:	5b                   	pop    ebx
c0013f8c:	5e                   	pop    esi
c0013f8d:	c3                   	ret    

c0013f8e <SysSetCwd(regs*)>:
c0013f8e:	83 ec 14             	sub    esp,0x14
c0013f91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f95:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f9d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fa0:	e8 62 7c ff ff       	call   c000bc07 <Fs::setcwd(Process*, char*)>
c0013fa5:	83 c4 1c             	add    esp,0x1c
c0013fa8:	99                   	cdq    
c0013fa9:	c3                   	ret    

c0013faa <SysSetTime(regs*)>:
c0013faa:	55                   	push   ebp
c0013fab:	31 c9                	xor    ecx,ecx
c0013fad:	57                   	push   edi
c0013fae:	bd 0c 00 00 00       	mov    ebp,0xc
c0013fb3:	56                   	push   esi
c0013fb4:	53                   	push   ebx
c0013fb5:	31 db                	xor    ebx,ebx
c0013fb7:	83 ec 10             	sub    esp,0x10
c0013fba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013fbe:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013fc1:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013fc4:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013fc7:	89 c2                	mov    edx,eax
c0013fc9:	c1 e8 05             	shr    eax,0x5
c0013fcc:	83 e2 1f             	and    edx,0x1f
c0013fcf:	42                   	inc    edx
c0013fd0:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013fd6:	c1 e7 10             	shl    edi,0x10
c0013fd9:	88 d1                	mov    cl,dl
c0013fdb:	31 d2                	xor    edx,edx
c0013fdd:	f7 f5                	div    ebp
c0013fdf:	89 dd                	mov    ebp,ebx
c0013fe1:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013fe7:	88 d5                	mov    ch,dl
c0013fe9:	31 d2                	xor    edx,edx
c0013feb:	0f b7 c1             	movzx  eax,cx
c0013fee:	09 f8                	or     eax,edi
c0013ff0:	bf 3c 00 00 00       	mov    edi,0x3c
c0013ff5:	89 c1                	mov    ecx,eax
c0013ff7:	89 f0                	mov    eax,esi
c0013ff9:	f7 f7                	div    edi
c0013ffb:	c1 e2 10             	shl    edx,0x10
c0013ffe:	09 d5                	or     ebp,edx
c0014000:	31 d2                	xor    edx,edx
c0014002:	f7 f7                	div    edi
c0014004:	89 eb                	mov    ebx,ebp
c0014006:	bf 10 0e 00 00       	mov    edi,0xe10
c001400b:	89 f0                	mov    eax,esi
c001400d:	88 d7                	mov    bh,dl
c001400f:	31 d2                	xor    edx,edx
c0014011:	f7 f7                	div    edi
c0014013:	bf 18 00 00 00       	mov    edi,0x18
c0014018:	31 d2                	xor    edx,edx
c001401a:	f7 f7                	div    edi
c001401c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0014021:	88 d3                	mov    bl,dl
c0014023:	53                   	push   ebx
c0014024:	51                   	push   ecx
c0014025:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001402b:	e8 e8 83 ff ff       	call   c000c418 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014030:	83 c4 1c             	add    esp,0x1c
c0014033:	31 d2                	xor    edx,edx
c0014035:	5b                   	pop    ebx
c0014036:	5e                   	pop    esi
c0014037:	83 f0 01             	xor    eax,0x1
c001403a:	5f                   	pop    edi
c001403b:	0f b6 c0             	movzx  eax,al
c001403e:	5d                   	pop    ebp
c001403f:	c3                   	ret    

c0014040 <SysSymlink(regs*)>:
c0014040:	53                   	push   ebx
c0014041:	83 c8 ff             	or     eax,0xffffffff
c0014044:	83 ec 08             	sub    esp,0x8
c0014047:	89 c2                	mov    edx,eax
c0014049:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001404d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014050:	85 c9                	test   ecx,ecx
c0014052:	74 14                	je     c0014068 <SysSymlink(regs*)+0x28>
c0014054:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014057:	85 db                	test   ebx,ebx
c0014059:	74 0d                	je     c0014068 <SysSymlink(regs*)+0x28>
c001405b:	50                   	push   eax
c001405c:	50                   	push   eax
c001405d:	53                   	push   ebx
c001405e:	51                   	push   ecx
c001405f:	e8 bc 70 ff ff       	call   c000b120 <KeCreateSymlink(char const*, char const*)>
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	99                   	cdq    
c0014068:	83 c4 08             	add    esp,0x8
c001406b:	5b                   	pop    ebx
c001406c:	c3                   	ret    

c001406d <SysTimezone(regs*)>:
c001406d:	53                   	push   ebx
c001406e:	83 ec 08             	sub    esp,0x8
c0014071:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014075:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014079:	75 17                	jne    c0014092 <SysTimezone(regs*)+0x25>
c001407b:	83 ec 0c             	sub    esp,0xc
c001407e:	68 35 22 02 c0       	push   0xc0022235
c0014083:	e8 82 68 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014088:	83 c8 ff             	or     eax,0xffffffff
c001408b:	83 c4 10             	add    esp,0x10
c001408e:	89 c2                	mov    edx,eax
c0014090:	eb 20                	jmp    c00140b2 <SysTimezone(regs*)+0x45>
c0014092:	83 ec 0c             	sub    esp,0xc
c0014095:	68 4a 22 02 c0       	push   0xc002224a
c001409a:	e8 6b 68 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001409f:	58                   	pop    eax
c00140a0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140a3:	e8 d4 80 ff ff       	call   c000c17c <User::loadClockSettings(int)>
c00140a8:	83 c4 10             	add    esp,0x10
c00140ab:	b8 01 00 00 00       	mov    eax,0x1
c00140b0:	31 d2                	xor    edx,edx
c00140b2:	83 c4 08             	add    esp,0x8
c00140b5:	5b                   	pop    ebx
c00140b6:	c3                   	ret    

c00140b7 <SysTruncate(regs*)>:
c00140b7:	55                   	push   ebp
c00140b8:	57                   	push   edi
c00140b9:	31 ff                	xor    edi,edi
c00140bb:	56                   	push   esi
c00140bc:	53                   	push   ebx
c00140bd:	83 ec 0c             	sub    esp,0xc
c00140c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00140c7:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00140cb:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00140ce:	89 ce                	mov    esi,ecx
c00140d0:	0f 84 99 00 00 00    	je     c001416f <SysTruncate(regs*)+0xb8>
c00140d6:	83 ec 0c             	sub    esp,0xc
c00140d9:	68 14 01 00 00       	push   0x114
c00140de:	e8 f0 39 ff ff       	call   c0007ad3 <malloc>
c00140e3:	6a 01                	push   0x1
c00140e5:	89 c3                	mov    ebx,eax
c00140e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140ec:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140ef:	55                   	push   ebp
c00140f0:	53                   	push   ebx
c00140f1:	e8 d0 76 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c00140f6:	83 c4 20             	add    esp,0x20
c00140f9:	31 d2                	xor    edx,edx
c00140fb:	85 db                	test   ebx,ebx
c00140fd:	b8 03 00 00 00       	mov    eax,0x3
c0014102:	0f 84 a2 00 00 00    	je     c00141aa <SysTruncate(regs*)+0xf3>
c0014108:	51                   	push   ecx
c0014109:	51                   	push   ecx
c001410a:	6a 02                	push   0x2
c001410c:	53                   	push   ebx
c001410d:	e8 92 77 ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c0014112:	83 c4 10             	add    esp,0x10
c0014115:	85 c0                	test   eax,eax
c0014117:	74 13                	je     c001412c <SysTruncate(regs*)+0x75>
c0014119:	8b 03                	mov    eax,DWORD PTR [ebx]
c001411b:	83 ec 0c             	sub    esp,0xc
c001411e:	53                   	push   ebx
c001411f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014122:	83 c4 10             	add    esp,0x10
c0014125:	b8 04 00 00 00       	mov    eax,0x4
c001412a:	eb 7c                	jmp    c00141a8 <SysTruncate(regs*)+0xf1>
c001412c:	52                   	push   edx
c001412d:	57                   	push   edi
c001412e:	56                   	push   esi
c001412f:	53                   	push   ebx
c0014130:	e8 83 78 ff ff       	call   c000b9b8 <File::truncate(unsigned long long)>
c0014135:	83 c4 10             	add    esp,0x10
c0014138:	85 c0                	test   eax,eax
c001413a:	74 1b                	je     c0014157 <SysTruncate(regs*)+0xa0>
c001413c:	83 ec 0c             	sub    esp,0xc
c001413f:	53                   	push   ebx
c0014140:	e8 bd 77 ff ff       	call   c000b902 <File::close()>
c0014145:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014147:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001414a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001414d:	83 c4 10             	add    esp,0x10
c0014150:	b8 05 00 00 00       	mov    eax,0x5
c0014155:	eb 51                	jmp    c00141a8 <SysTruncate(regs*)+0xf1>
c0014157:	83 ec 0c             	sub    esp,0xc
c001415a:	53                   	push   ebx
c001415b:	e8 a2 77 ff ff       	call   c000b902 <File::close()>
c0014160:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014162:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014165:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014168:	83 c4 10             	add    esp,0x10
c001416b:	31 c0                	xor    eax,eax
c001416d:	eb 39                	jmp    c00141a8 <SysTruncate(regs*)+0xf1>
c001416f:	31 d2                	xor    edx,edx
c0014171:	83 fd 02             	cmp    ebp,0x2
c0014174:	b8 01 00 00 00       	mov    eax,0x1
c0014179:	7e 2f                	jle    c00141aa <SysTruncate(regs*)+0xf3>
c001417b:	83 ec 0c             	sub    esp,0xc
c001417e:	51                   	push   ecx
c001417f:	e8 17 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014184:	83 c4 10             	add    esp,0x10
c0014187:	31 d2                	xor    edx,edx
c0014189:	89 c1                	mov    ecx,eax
c001418b:	b8 02 00 00 00       	mov    eax,0x2
c0014190:	85 c9                	test   ecx,ecx
c0014192:	74 16                	je     c00141aa <SysTruncate(regs*)+0xf3>
c0014194:	50                   	push   eax
c0014195:	57                   	push   edi
c0014196:	56                   	push   esi
c0014197:	51                   	push   ecx
c0014198:	e8 1b 78 ff ff       	call   c000b9b8 <File::truncate(unsigned long long)>
c001419d:	83 c4 10             	add    esp,0x10
c00141a0:	85 c0                	test   eax,eax
c00141a2:	0f 95 c0             	setne  al
c00141a5:	0f b6 c0             	movzx  eax,al
c00141a8:	31 d2                	xor    edx,edx
c00141aa:	83 c4 0c             	add    esp,0xc
c00141ad:	5b                   	pop    ebx
c00141ae:	5e                   	pop    esi
c00141af:	5f                   	pop    edi
c00141b0:	5d                   	pop    ebp
c00141b1:	c3                   	ret    

c00141b2 <SysWrite(regs*)>:
c00141b2:	57                   	push   edi
c00141b3:	56                   	push   esi
c00141b4:	53                   	push   ebx
c00141b5:	83 ec 10             	sub    esp,0x10
c00141b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00141bc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141bf:	83 f8 02             	cmp    eax,0x2
c00141c2:	77 10                	ja     c00141d4 <SysWrite(regs*)+0x22>
c00141c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141cc:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00141d2:	eb 0e                	jmp    c00141e2 <SysWrite(regs*)+0x30>
c00141d4:	83 ec 0c             	sub    esp,0xc
c00141d7:	50                   	push   eax
c00141d8:	e8 be 52 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00141dd:	83 c4 10             	add    esp,0x10
c00141e0:	89 c1                	mov    ecx,eax
c00141e2:	83 c8 ff             	or     eax,0xffffffff
c00141e5:	85 c9                	test   ecx,ecx
c00141e7:	89 c2                	mov    edx,eax
c00141e9:	74 28                	je     c0014213 <SysWrite(regs*)+0x61>
c00141eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141f3:	83 ec 0c             	sub    esp,0xc
c00141f6:	31 ff                	xor    edi,edi
c00141f8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00141fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00141fe:	52                   	push   edx
c00141ff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014202:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014205:	57                   	push   edi
c0014206:	56                   	push   esi
c0014207:	51                   	push   ecx
c0014208:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001420b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001420f:	83 c4 20             	add    esp,0x20
c0014212:	99                   	cdq    
c0014213:	83 c4 10             	add    esp,0x10
c0014216:	5b                   	pop    ebx
c0014217:	5e                   	pop    esi
c0014218:	5f                   	pop    edi
c0014219:	c3                   	ret    

c001421a <SysWsbe(regs*)>:
c001421a:	57                   	push   edi
c001421b:	b9 0b 00 00 00       	mov    ecx,0xb
c0014220:	56                   	push   esi
c0014221:	be 89 22 02 c0       	mov    esi,0xc0022289
c0014226:	53                   	push   ebx
c0014227:	83 ec 30             	sub    esp,0x30
c001422a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001422e:	fc                   	cld    
c001422f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014231:	83 ec 0c             	sub    esp,0xc
c0014234:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014238:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001423d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014240:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014246:	8b 06                	mov    eax,DWORD PTR [esi]
c0014248:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001424b:	57                   	push   edi
c001424c:	e8 2f c3 fe ff       	call   c0000580 <strlen>
c0014251:	5a                   	pop    edx
c0014252:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014256:	52                   	push   edx
c0014257:	31 d2                	xor    edx,edx
c0014259:	57                   	push   edi
c001425a:	52                   	push   edx
c001425b:	50                   	push   eax
c001425c:	56                   	push   esi
c001425d:	ff d3                	call   ebx
c001425f:	83 c4 14             	add    esp,0x14
c0014262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014266:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014269:	e8 aa 23 00 00       	call   c0016618 <terminateTask(int)>
c001426e:	83 c4 40             	add    esp,0x40
c0014271:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014276:	5b                   	pop    ebx
c0014277:	31 d2                	xor    edx,edx
c0014279:	5e                   	pop    esi
c001427a:	5f                   	pop    edi
c001427b:	c3                   	ret    

c001427c <SysYield(regs*)>:
c001427c:	83 ec 0c             	sub    esp,0xc
c001427f:	fa                   	cli    
c0014280:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014286:	e8 0d 1a 00 00       	call   c0015c98 <schedule()>
c001428b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014290:	48                   	dec    eax
c0014291:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014296:	75 01                	jne    c0014299 <SysYield(regs*)+0x1d>
c0014298:	fb                   	sti    
c0014299:	31 c0                	xor    eax,eax
c001429b:	31 d2                	xor    edx,edx
c001429d:	83 c4 0c             	add    esp,0xc
c00142a0:	c3                   	ret    

c00142a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00142a1:	55                   	push   ebp
c00142a2:	57                   	push   edi
c00142a3:	56                   	push   esi
c00142a4:	53                   	push   ebx
c00142a5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00142ab:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00142b6:	74 3b                	je     c00142f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00142b8:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00142c0:	74 31                	je     c00142f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00142c2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00142ca:	75 27                	jne    c00142f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00142cc:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00142d3:	05 00 10 00 00       	add    eax,0x1000
c00142d8:	89 c2                	mov    edx,eax
c00142da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00142df:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00142e6:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00142ec:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00142f3:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00142fa:	83 ec 0c             	sub    esp,0xc
c00142fd:	6a 01                	push   0x1
c00142ff:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014305:	e8 eb 52 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001430a:	83 c4 10             	add    esp,0x10
c001430d:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014313:	89 c3                	mov    ebx,eax
c0014315:	0f 86 26 01 00 00    	jbe    c0014441 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c001431b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014323:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001432a:	c1 ee 0c             	shr    esi,0xc
c001432d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014331:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014338:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001433f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014343:	29 ef                	sub    edi,ebp
c0014345:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014349:	0f 83 f9 00 00 00    	jae    c0014448 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c001434f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014355:	b8 00 10 00 00       	mov    eax,0x1000
c001435a:	0f 47 f8             	cmova  edi,eax
c001435d:	83 ec 0c             	sub    esp,0xc
c0014360:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014367:	31 d2                	xor    edx,edx
c0014369:	8b 08                	mov    ecx,DWORD PTR [eax]
c001436b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001436f:	50                   	push   eax
c0014370:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014374:	56                   	push   esi
c0014375:	52                   	push   edx
c0014376:	57                   	push   edi
c0014377:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001437e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014381:	83 c4 20             	add    esp,0x20
c0014384:	85 c0                	test   eax,eax
c0014386:	75 06                	jne    c001438e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014388:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001438c:	74 13                	je     c00143a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001438e:	83 ec 0c             	sub    esp,0xc
c0014391:	53                   	push   ebx
c0014392:	e8 72 55 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014397:	83 c4 10             	add    esp,0x10
c001439a:	31 c0                	xor    eax,eax
c001439c:	e9 7c 01 00 00       	jmp    c001451d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00143a1:	fa                   	cli    
c00143a2:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00143a8:	e8 35 3a ff ff       	call   c0007de2 <Phys::allocatePage()>
c00143ad:	6a 07                	push   0x7
c00143af:	53                   	push   ebx
c00143b0:	50                   	push   eax
c00143b1:	89 c7                	mov    edi,eax
c00143b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143bb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143c1:	e8 38 59 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00143c6:	83 c4 0c             	add    esp,0xc
c00143c9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00143d0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143d6:	6a 00                	push   0x0
c00143d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143e0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143e6:	e8 79 57 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00143eb:	58                   	pop    eax
c00143ec:	5a                   	pop    edx
c00143ed:	68 07 0c 00 00       	push   0xc07
c00143f2:	55                   	push   ebp
c00143f3:	57                   	push   edi
c00143f4:	89 df                	mov    edi,ebx
c00143f6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00143fd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014403:	6a 00                	push   0x0
c0014405:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001440a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001440d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014413:	e8 4a 5b ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014418:	b9 00 10 00 00       	mov    ecx,0x1000
c001441d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001441f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014424:	83 c4 20             	add    esp,0x20
c0014427:	48                   	dec    eax
c0014428:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001442d:	85 c0                	test   eax,eax
c001442f:	75 01                	jne    c0014432 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0014431:	fb                   	sti    
c0014432:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014436:	81 c5 00 10 00 00    	add    ebp,0x1000
c001443c:	e9 f0 fe ff ff       	jmp    c0014331 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0014441:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014448:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001444f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014455:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001445b:	0f 86 ae 00 00 00    	jbe    c001450f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014461:	fa                   	cli    
c0014462:	51                   	push   ecx
c0014463:	31 ff                	xor    edi,edi
c0014465:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001446c:	c1 ee 0c             	shr    esi,0xc
c001446f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014475:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001447b:	6a 00                	push   0x0
c001447d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014482:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014485:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001448b:	e8 d4 56 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014490:	83 c4 10             	add    esp,0x10
c0014493:	e8 4a 39 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014498:	47                   	inc    edi
c0014499:	6a 07                	push   0x7
c001449b:	53                   	push   ebx
c001449c:	50                   	push   eax
c001449d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144a1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00144a7:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00144aa:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00144b0:	e8 49 58 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00144b5:	58                   	pop    eax
c00144b6:	5a                   	pop    edx
c00144b7:	68 07 0c 00 00       	push   0xc07
c00144bc:	55                   	push   ebp
c00144bd:	81 c5 00 10 00 00    	add    ebp,0x1000
c00144c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144c7:	50                   	push   eax
c00144c8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00144cf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144d5:	6a 00                	push   0x0
c00144d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144df:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144e5:	e8 78 5a ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00144ea:	83 c4 1c             	add    esp,0x1c
c00144ed:	68 00 10 00 00       	push   0x1000
c00144f2:	6a 00                	push   0x0
c00144f4:	53                   	push   ebx
c00144f5:	e8 f6 bf fe ff       	call   c00004f0 <memset>
c00144fa:	83 c4 10             	add    esp,0x10
c00144fd:	39 fe                	cmp    esi,edi
c00144ff:	77 92                	ja     c0014493 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0014501:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014506:	48                   	dec    eax
c0014507:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001450c:	75 01                	jne    c001450f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001450e:	fb                   	sti    
c001450f:	83 ec 0c             	sub    esp,0xc
c0014512:	53                   	push   ebx
c0014513:	e8 f1 53 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014518:	83 c4 10             	add    esp,0x10
c001451b:	b0 01                	mov    al,0x1
c001451d:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014523:	5b                   	pop    ebx
c0014524:	5e                   	pop    esi
c0014525:	5f                   	pop    edi
c0014526:	5d                   	pop    ebp
c0014527:	c3                   	ret    

c0014528 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014528:	55                   	push   ebp
c0014529:	57                   	push   edi
c001452a:	56                   	push   esi
c001452b:	53                   	push   ebx
c001452c:	83 ec 48             	sub    esp,0x48
c001452f:	68 14 01 00 00       	push   0x114
c0014534:	e8 9a 35 ff ff       	call   c0007ad3 <malloc>
c0014539:	6a 01                	push   0x1
c001453b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001453f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014543:	89 c7                	mov    edi,eax
c0014545:	50                   	push   eax
c0014546:	e8 7b 72 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c001454b:	83 c4 18             	add    esp,0x18
c001454e:	6a 01                	push   0x1
c0014550:	57                   	push   edi
c0014551:	e8 4e 73 ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c0014556:	83 c4 10             	add    esp,0x10
c0014559:	85 c0                	test   eax,eax
c001455b:	0f 85 4c 01 00 00    	jne    c00146ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014561:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014569:	83 ec 0c             	sub    esp,0xc
c001456c:	6a 34                	push   0x34
c001456e:	e8 60 35 ff ff       	call   c0007ad3 <malloc>
c0014573:	89 c3                	mov    ebx,eax
c0014575:	58                   	pop    eax
c0014576:	8b 07                	mov    eax,DWORD PTR [edi]
c0014578:	8d 74 24 38          	lea    esi,[esp+0x38]
c001457c:	56                   	push   esi
c001457d:	53                   	push   ebx
c001457e:	6a 00                	push   0x0
c0014580:	6a 34                	push   0x34
c0014582:	57                   	push   edi
c0014583:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014586:	83 c4 20             	add    esp,0x20
c0014589:	85 c0                	test   eax,eax
c001458b:	0f 85 1c 01 00 00    	jne    c00146ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014591:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014597:	0f 85 10 01 00 00    	jne    c00146ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001459d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00145a0:	85 c0                	test   eax,eax
c00145a2:	0f 84 05 01 00 00    	je     c00146ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00145a8:	31 d2                	xor    edx,edx
c00145aa:	55                   	push   ebp
c00145ab:	52                   	push   edx
c00145ac:	50                   	push   eax
c00145ad:	57                   	push   edi
c00145ae:	e8 af 73 ff ff       	call   c000b962 <File::seek(unsigned long long)>
c00145b3:	83 c4 10             	add    esp,0x10
c00145b6:	85 c0                	test   eax,eax
c00145b8:	0f 85 ef 00 00 00    	jne    c00146ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00145be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00145c1:	83 ec 0c             	sub    esp,0xc
c00145c4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00145c8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00145cc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00145d0:	0f af c2             	imul   eax,edx
c00145d3:	50                   	push   eax
c00145d4:	e8 fa 34 ff ff       	call   c0007ad3 <malloc>
c00145d9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00145db:	89 34 24             	mov    DWORD PTR [esp],esi
c00145de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00145e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00145e6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00145ea:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00145ee:	0f af c2             	imul   eax,edx
c00145f1:	99                   	cdq    
c00145f2:	52                   	push   edx
c00145f3:	50                   	push   eax
c00145f4:	57                   	push   edi
c00145f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145f8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00145fb:	83 c4 20             	add    esp,0x20
c00145fe:	85 c0                	test   eax,eax
c0014600:	0f 84 a7 00 00 00    	je     c00146ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014606:	31 d2                	xor    edx,edx
c0014608:	51                   	push   ecx
c0014609:	52                   	push   edx
c001460a:	50                   	push   eax
c001460b:	57                   	push   edi
c001460c:	e8 51 73 ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0014611:	83 c4 10             	add    esp,0x10
c0014614:	85 c0                	test   eax,eax
c0014616:	0f 85 91 00 00 00    	jne    c00146ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001461c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014620:	83 ec 0c             	sub    esp,0xc
c0014623:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014627:	0f af c2             	imul   eax,edx
c001462a:	50                   	push   eax
c001462b:	e8 a3 34 ff ff       	call   c0007ad3 <malloc>
c0014630:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014632:	89 34 24             	mov    DWORD PTR [esp],esi
c0014635:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001463d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014641:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014645:	0f af c2             	imul   eax,edx
c0014648:	99                   	cdq    
c0014649:	52                   	push   edx
c001464a:	50                   	push   eax
c001464b:	57                   	push   edi
c001464c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001464f:	83 c4 20             	add    esp,0x20
c0014652:	31 c9                	xor    ecx,ecx
c0014654:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001465c:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014660:	0f b7 e9             	movzx  ebp,cx
c0014663:	0f 83 86 00 00 00    	jae    c00146ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014669:	c1 e5 05             	shl    ebp,0x5
c001466c:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014670:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014674:	75 73                	jne    c00146e9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014676:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001467a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001467d:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014680:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014684:	52                   	push   edx
c0014685:	31 d2                	xor    edx,edx
c0014687:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001468a:	52                   	push   edx
c001468b:	50                   	push   eax
c001468c:	57                   	push   edi
c001468d:	e8 d0 72 ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0014692:	83 c4 10             	add    esp,0x10
c0014695:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014699:	85 c0                	test   eax,eax
c001469b:	74 17                	je     c00146b4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c001469d:	83 ec 0c             	sub    esp,0xc
c00146a0:	68 b5 22 02 c0       	push   0xc00222b5
c00146a5:	e8 60 62 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00146aa:	83 c4 10             	add    esp,0x10
c00146ad:	31 c0                	xor    eax,eax
c00146af:	e9 8b 00 00 00       	jmp    c001473f <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c00146b4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00146b8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00146bb:	83 ec 0c             	sub    esp,0xc
c00146be:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c00146c1:	50                   	push   eax
c00146c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146c6:	56                   	push   esi
c00146c7:	57                   	push   edi
c00146c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00146cc:	e8 d0 fb ff ff       	call   c00142a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00146d1:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00146d5:	83 c4 20             	add    esp,0x20
c00146d8:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00146dc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00146e0:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c00146e5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00146e9:	41                   	inc    ecx
c00146ea:	e9 6d ff ff ff       	jmp    c001465c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00146ef:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00146f3:	83 ec 0c             	sub    esp,0xc
c00146f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00146fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146fe:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014704:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c001470a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001470f:	05 00 10 00 00       	add    eax,0x1000
c0014714:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014717:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001471b:	e8 c3 33 ff ff       	call   c0007ae3 <free>
c0014720:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014723:	e8 bb 33 ff ff       	call   c0007ae3 <free>
c0014728:	58                   	pop    eax
c0014729:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001472d:	e8 b1 33 ff ff       	call   c0007ae3 <free>
c0014732:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014735:	e8 c8 71 ff ff       	call   c000b902 <File::close()>
c001473a:	83 c4 10             	add    esp,0x10
c001473d:	b0 01                	mov    al,0x1
c001473f:	83 c4 3c             	add    esp,0x3c
c0014742:	5b                   	pop    ebx
c0014743:	5e                   	pop    esi
c0014744:	5f                   	pop    edi
c0014745:	5d                   	pop    ebp
c0014746:	c3                   	ret    

c0014747 <Thr::runtimeReferenceHelper()>:
c0014747:	83 ec 18             	sub    esp,0x18
c001474a:	68 bd 22 02 c0       	push   0xc00222bd
c001474f:	e8 b6 61 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014754:	fa                   	cli    
c0014755:	83 c4 10             	add    esp,0x10
c0014758:	eb fe                	jmp    c0014758 <Thr::runtimeReferenceHelper()+0x11>

c001475a <Thr::getAddressOfKernelSymbol(char const*)>:
c001475a:	57                   	push   edi
c001475b:	56                   	push   esi
c001475c:	53                   	push   ebx
c001475d:	31 db                	xor    ebx,ebx
c001475f:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c0014765:	7e 3c                	jle    c00147a3 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014767:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c001476e:	31 ff                	xor    edi,edi
c0014770:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c0014777:	7e 27                	jle    c00147a0 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014779:	50                   	push   eax
c001477a:	50                   	push   eax
c001477b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001477f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014781:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c0014788:	50                   	push   eax
c0014789:	e8 f2 bf fe ff       	call   c0000780 <strcmp>
c001478e:	83 c4 10             	add    esp,0x10
c0014791:	85 c0                	test   eax,eax
c0014793:	75 05                	jne    c001479a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014795:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014798:	eb 0b                	jmp    c00147a5 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001479a:	83 c6 10             	add    esi,0x10
c001479d:	47                   	inc    edi
c001479e:	eb d0                	jmp    c0014770 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00147a0:	43                   	inc    ebx
c00147a1:	eb bc                	jmp    c001475f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00147a3:	31 c0                	xor    eax,eax
c00147a5:	5b                   	pop    ebx
c00147a6:	5e                   	pop    esi
c00147a7:	5f                   	pop    edi
c00147a8:	c3                   	ret    

c00147a9 <Thr::loadKernelSymbolTable(char const*)>:
c00147a9:	55                   	push   ebp
c00147aa:	57                   	push   edi
c00147ab:	56                   	push   esi
c00147ac:	53                   	push   ebx
c00147ad:	83 ec 68             	sub    esp,0x68
c00147b0:	68 14 01 00 00       	push   0x114
c00147b5:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c00147bb:	e8 13 33 ff ff       	call   c0007ad3 <malloc>
c00147c0:	6a 01                	push   0x1
c00147c2:	56                   	push   esi
c00147c3:	ff b4 24 88 00 00 00 	push   DWORD PTR [esp+0x88]
c00147ca:	89 c3                	mov    ebx,eax
c00147cc:	50                   	push   eax
c00147cd:	e8 f4 6f ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c00147d2:	83 c4 18             	add    esp,0x18
c00147d5:	6a 01                	push   0x1
c00147d7:	53                   	push   ebx
c00147d8:	e8 c7 70 ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c00147dd:	83 c4 10             	add    esp,0x10
c00147e0:	85 c0                	test   eax,eax
c00147e2:	74 0a                	je     c00147ee <Thr::loadKernelSymbolTable(char const*)+0x45>
c00147e4:	83 ec 0c             	sub    esp,0xc
c00147e7:	68 df 22 02 c0       	push   0xc00222df
c00147ec:	eb 34                	jmp    c0014822 <Thr::loadKernelSymbolTable(char const*)+0x79>
c00147ee:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00147f6:	83 ec 0c             	sub    esp,0xc
c00147f9:	6a 34                	push   0x34
c00147fb:	e8 d3 32 ff ff       	call   c0007ad3 <malloc>
c0014800:	59                   	pop    ecx
c0014801:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014805:	89 c7                	mov    edi,eax
c0014807:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014809:	56                   	push   esi
c001480a:	57                   	push   edi
c001480b:	6a 00                	push   0x0
c001480d:	6a 34                	push   0x34
c001480f:	53                   	push   ebx
c0014810:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014813:	83 c4 20             	add    esp,0x20
c0014816:	85 c0                	test   eax,eax
c0014818:	74 17                	je     c0014831 <Thr::loadKernelSymbolTable(char const*)+0x88>
c001481a:	83 ec 0c             	sub    esp,0xc
c001481d:	68 f6 22 02 c0       	push   0xc00222f6
c0014822:	e8 72 ca ff ff       	call   c0011299 <KePanic(char const*)>
c0014827:	83 c4 10             	add    esp,0x10
c001482a:	31 c0                	xor    eax,eax
c001482c:	e9 31 02 00 00       	jmp    c0014a62 <Thr::loadKernelSymbolTable(char const*)+0x2b9>
c0014831:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014837:	75 e1                	jne    c001481a <Thr::loadKernelSymbolTable(char const*)+0x71>
c0014839:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001483c:	85 c0                	test   eax,eax
c001483e:	74 da                	je     c001481a <Thr::loadKernelSymbolTable(char const*)+0x71>
c0014840:	52                   	push   edx
c0014841:	31 d2                	xor    edx,edx
c0014843:	52                   	push   edx
c0014844:	50                   	push   eax
c0014845:	53                   	push   ebx
c0014846:	e8 17 71 ff ff       	call   c000b962 <File::seek(unsigned long long)>
c001484b:	83 c4 10             	add    esp,0x10
c001484e:	85 c0                	test   eax,eax
c0014850:	75 c8                	jne    c001481a <Thr::loadKernelSymbolTable(char const*)+0x71>
c0014852:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014856:	83 ec 0c             	sub    esp,0xc
c0014859:	31 ed                	xor    ebp,ebp
c001485b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001485f:	0f af c2             	imul   eax,edx
c0014862:	50                   	push   eax
c0014863:	e8 6b 32 ff ff       	call   c0007ad3 <malloc>
c0014868:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001486a:	89 34 24             	mov    DWORD PTR [esp],esi
c001486d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014871:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014875:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014879:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001487d:	0f af c2             	imul   eax,edx
c0014880:	99                   	cdq    
c0014881:	52                   	push   edx
c0014882:	50                   	push   eax
c0014883:	53                   	push   ebx
c0014884:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014887:	83 c4 20             	add    esp,0x20
c001488a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014892:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001489a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00148a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148aa:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00148ae:	0f b7 f5             	movzx  esi,bp
c00148b1:	0f 83 a7 00 00 00    	jae    c001495e <Thr::loadKernelSymbolTable(char const*)+0x1b5>
c00148b7:	6b f6 28             	imul   esi,esi,0x28
c00148ba:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00148be:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00148c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00148c5:	50                   	push   eax
c00148c6:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00148ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148ce:	8b 16                	mov    edx,DWORD PTR [esi]
c00148d0:	6b c0 28             	imul   eax,eax,0x28
c00148d3:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00148d7:	89 d0                	mov    eax,edx
c00148d9:	31 d2                	xor    edx,edx
c00148db:	52                   	push   edx
c00148dc:	50                   	push   eax
c00148dd:	53                   	push   ebx
c00148de:	e8 7f 70 ff ff       	call   c000b962 <File::seek(unsigned long long)>
c00148e3:	83 c4 0c             	add    esp,0xc
c00148e6:	6a 20                	push   0x20
c00148e8:	6a 00                	push   0x0
c00148ea:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00148ee:	52                   	push   edx
c00148ef:	e8 fc bb fe ff       	call   c00004f0 <memset>
c00148f4:	58                   	pop    eax
c00148f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148f7:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00148fb:	51                   	push   ecx
c00148fc:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014900:	52                   	push   edx
c0014901:	6a 00                	push   0x0
c0014903:	6a 1f                	push   0x1f
c0014905:	53                   	push   ebx
c0014906:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014909:	83 c4 18             	add    esp,0x18
c001490c:	68 0d 23 02 c0       	push   0xc002230d
c0014911:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014915:	52                   	push   edx
c0014916:	e8 65 be fe ff       	call   c0000780 <strcmp>
c001491b:	83 c4 10             	add    esp,0x10
c001491e:	85 c0                	test   eax,eax
c0014920:	75 0f                	jne    c0014931 <Thr::loadKernelSymbolTable(char const*)+0x188>
c0014922:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014925:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014929:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001492d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014931:	50                   	push   eax
c0014932:	50                   	push   eax
c0014933:	68 15 23 02 c0       	push   0xc0022315
c0014938:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001493c:	50                   	push   eax
c001493d:	e8 3e be fe ff       	call   c0000780 <strcmp>
c0014942:	83 c4 10             	add    esp,0x10
c0014945:	85 c0                	test   eax,eax
c0014947:	75 0f                	jne    c0014958 <Thr::loadKernelSymbolTable(char const*)+0x1af>
c0014949:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001494c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014950:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014954:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014958:	45                   	inc    ebp
c0014959:	e9 4c ff ff ff       	jmp    c00148aa <Thr::loadKernelSymbolTable(char const*)+0x101>
c001495e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014963:	75 10                	jne    c0014975 <Thr::loadKernelSymbolTable(char const*)+0x1cc>
c0014965:	83 ec 0c             	sub    esp,0xc
c0014968:	68 1d 23 02 c0       	push   0xc002231d
c001496d:	e8 27 c9 ff ff       	call   c0011299 <KePanic(char const*)>
c0014972:	83 c4 10             	add    esp,0x10
c0014975:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001497a:	75 10                	jne    c001498c <Thr::loadKernelSymbolTable(char const*)+0x1e3>
c001497c:	83 ec 0c             	sub    esp,0xc
c001497f:	68 1d 23 02 c0       	push   0xc002231d
c0014984:	e8 10 c9 ff ff       	call   c0011299 <KePanic(char const*)>
c0014989:	83 c4 10             	add    esp,0x10
c001498c:	50                   	push   eax
c001498d:	31 d2                	xor    edx,edx
c001498f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014993:	52                   	push   edx
c0014994:	50                   	push   eax
c0014995:	53                   	push   ebx
c0014996:	e8 c7 6f ff ff       	call   c000b962 <File::seek(unsigned long long)>
c001499b:	5a                   	pop    edx
c001499c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00149a0:	e8 2e 31 ff ff       	call   c0007ad3 <malloc>
c00149a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149a9:	31 c9                	xor    ecx,ecx
c00149ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00149af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149b1:	5e                   	pop    esi
c00149b2:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00149b6:	55                   	push   ebp
c00149b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149bb:	51                   	push   ecx
c00149bc:	52                   	push   edx
c00149bd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00149c1:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00149c5:	53                   	push   ebx
c00149c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149c9:	83 c4 14             	add    esp,0x14
c00149cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149d0:	e8 fe 30 ff ff       	call   c0007ad3 <malloc>
c00149d5:	89 c6                	mov    esi,eax
c00149d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00149dc:	56                   	push   esi
c00149dd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00149e1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00149e5:	51                   	push   ecx
c00149e6:	52                   	push   edx
c00149e7:	53                   	push   ebx
c00149e8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00149ef:	83 c4 1c             	add    esp,0x1c
c00149f2:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c00149f8:	c1 e8 04             	shr    eax,0x4
c00149fb:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c0014a02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a06:	31 d2                	xor    edx,edx
c0014a08:	52                   	push   edx
c0014a09:	50                   	push   eax
c0014a0a:	53                   	push   ebx
c0014a0b:	e8 52 6f ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0014a10:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014a12:	31 d2                	xor    edx,edx
c0014a14:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014a17:	56                   	push   esi
c0014a18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014a1c:	52                   	push   edx
c0014a1d:	50                   	push   eax
c0014a1e:	53                   	push   ebx
c0014a1f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a22:	83 c4 14             	add    esp,0x14
c0014a25:	53                   	push   ebx
c0014a26:	e8 d7 6e ff ff       	call   c000b902 <File::close()>
c0014a2b:	5d                   	pop    ebp
c0014a2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a30:	e8 ae 30 ff ff       	call   c0007ae3 <free>
c0014a35:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a38:	e8 a6 30 ff ff       	call   c0007ae3 <free>
c0014a3d:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014a42:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a46:	83 c4 10             	add    esp,0x10
c0014a49:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014a50:	8d 50 01             	lea    edx,[eax+0x1]
c0014a53:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014a5a:	b0 01                	mov    al,0x1
c0014a5c:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014a62:	83 c4 5c             	add    esp,0x5c
c0014a65:	5b                   	pop    ebx
c0014a66:	5e                   	pop    esi
c0014a67:	5f                   	pop    edi
c0014a68:	5d                   	pop    ebp
c0014a69:	c3                   	ret    

c0014a6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014a6a:	55                   	push   ebp
c0014a6b:	57                   	push   edi
c0014a6c:	56                   	push   esi
c0014a6d:	53                   	push   ebx
c0014a6e:	81 ec 68 03 00 00    	sub    esp,0x368
c0014a74:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014a7b:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014a81:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014a85:	68 14 01 00 00       	push   0x114
c0014a8a:	e8 44 30 ff ff       	call   c0007ad3 <malloc>
c0014a8f:	6a 01                	push   0x1
c0014a91:	56                   	push   esi
c0014a92:	ff b4 24 88 03 00 00 	push   DWORD PTR [esp+0x388]
c0014a99:	89 c3                	mov    ebx,eax
c0014a9b:	50                   	push   eax
c0014a9c:	e8 25 6d ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c0014aa1:	83 c4 18             	add    esp,0x18
c0014aa4:	6a 01                	push   0x1
c0014aa6:	53                   	push   ebx
c0014aa7:	e8 f8 6d ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c0014aac:	83 c4 10             	add    esp,0x10
c0014aaf:	85 c0                	test   eax,eax
c0014ab1:	0f 85 b3 06 00 00    	jne    c001516a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ab7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014abf:	83 ec 0c             	sub    esp,0xc
c0014ac2:	6a 34                	push   0x34
c0014ac4:	e8 0a 30 ff ff       	call   c0007ad3 <malloc>
c0014ac9:	5e                   	pop    esi
c0014aca:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014ace:	89 c5                	mov    ebp,eax
c0014ad0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ad2:	56                   	push   esi
c0014ad3:	55                   	push   ebp
c0014ad4:	6a 00                	push   0x0
c0014ad6:	6a 34                	push   0x34
c0014ad8:	53                   	push   ebx
c0014ad9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014adc:	83 c4 20             	add    esp,0x20
c0014adf:	85 c0                	test   eax,eax
c0014ae1:	0f 85 83 06 00 00    	jne    c001516a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ae7:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014aee:	0f 85 76 06 00 00    	jne    c001516a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014af4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014af7:	85 c0                	test   eax,eax
c0014af9:	0f 84 6b 06 00 00    	je     c001516a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014aff:	31 d2                	xor    edx,edx
c0014b01:	51                   	push   ecx
c0014b02:	52                   	push   edx
c0014b03:	50                   	push   eax
c0014b04:	53                   	push   ebx
c0014b05:	e8 58 6e ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	85 c0                	test   eax,eax
c0014b0f:	0f 85 55 06 00 00    	jne    c001516a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b15:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014b18:	83 ec 0c             	sub    esp,0xc
c0014b1b:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014b1f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014b23:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014b27:	0f af c2             	imul   eax,edx
c0014b2a:	50                   	push   eax
c0014b2b:	e8 a3 2f ff ff       	call   c0007ad3 <malloc>
c0014b30:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014b32:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b3d:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014b41:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014b45:	0f af c2             	imul   eax,edx
c0014b48:	99                   	cdq    
c0014b49:	52                   	push   edx
c0014b4a:	50                   	push   eax
c0014b4b:	53                   	push   ebx
c0014b4c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b4f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014b52:	83 c4 20             	add    esp,0x20
c0014b55:	85 c0                	test   eax,eax
c0014b57:	0f 84 0d 06 00 00    	je     c001516a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b5d:	52                   	push   edx
c0014b5e:	31 d2                	xor    edx,edx
c0014b60:	52                   	push   edx
c0014b61:	50                   	push   eax
c0014b62:	53                   	push   ebx
c0014b63:	e8 fa 6d ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0014b68:	83 c4 10             	add    esp,0x10
c0014b6b:	85 c0                	test   eax,eax
c0014b6d:	0f 85 f7 05 00 00    	jne    c001516a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b73:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014b77:	83 ec 0c             	sub    esp,0xc
c0014b7a:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014b7e:	0f af c2             	imul   eax,edx
c0014b81:	50                   	push   eax
c0014b82:	e8 4c 2f ff ff       	call   c0007ad3 <malloc>
c0014b87:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014b89:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b94:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014b98:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014b9c:	0f af c2             	imul   eax,edx
c0014b9f:	99                   	cdq    
c0014ba0:	52                   	push   edx
c0014ba1:	50                   	push   eax
c0014ba2:	53                   	push   ebx
c0014ba3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ba6:	83 c4 20             	add    esp,0x20
c0014ba9:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014baf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014bb2:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014bb6:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014bba:	73 78                	jae    c0014c34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014bbc:	c1 e7 05             	shl    edi,0x5
c0014bbf:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014bc3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014bc6:	75 63                	jne    c0014c2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014bc8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014bcb:	31 d2                	xor    edx,edx
c0014bcd:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014bd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014bd4:	50                   	push   eax
c0014bd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014bd8:	52                   	push   edx
c0014bd9:	50                   	push   eax
c0014bda:	53                   	push   ebx
c0014bdb:	e8 82 6d ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0014be0:	83 c4 10             	add    esp,0x10
c0014be3:	85 c0                	test   eax,eax
c0014be5:	0f 85 7f 05 00 00    	jne    c001516a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014beb:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014bf2:	83 ec 0c             	sub    esp,0xc
c0014bf5:	31 d2                	xor    edx,edx
c0014bf7:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014bfb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014bfd:	01 c6                	add    esi,eax
c0014bff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c06:	50                   	push   eax
c0014c07:	56                   	push   esi
c0014c08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c0c:	52                   	push   edx
c0014c0d:	50                   	push   eax
c0014c0e:	53                   	push   ebx
c0014c0f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c12:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c15:	83 c4 1c             	add    esp,0x1c
c0014c18:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014c1b:	50                   	push   eax
c0014c1c:	6a 00                	push   0x0
c0014c1e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014c22:	56                   	push   esi
c0014c23:	e8 c8 b8 fe ff       	call   c00004f0 <memset>
c0014c28:	83 c4 10             	add    esp,0x10
c0014c2b:	66 ff 04 24          	inc    WORD PTR [esp]
c0014c2f:	e9 7b ff ff ff       	jmp    c0014baf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014c34:	50                   	push   eax
c0014c35:	68 00 01 00 00       	push   0x100
c0014c3a:	6a 00                	push   0x0
c0014c3c:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014c40:	50                   	push   eax
c0014c41:	e8 aa b8 fe ff       	call   c00004f0 <memset>
c0014c46:	83 c4 0c             	add    esp,0xc
c0014c49:	68 00 01 00 00       	push   0x100
c0014c4e:	6a 00                	push   0x0
c0014c50:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014c57:	50                   	push   eax
c0014c58:	e8 93 b8 fe ff       	call   c00004f0 <memset>
c0014c5d:	83 c4 10             	add    esp,0x10
c0014c60:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014c67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014c6e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c76:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014c7e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c86:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014c8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c92:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014c96:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014c9b:	0f 83 16 01 00 00    	jae    c0014db7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014ca1:	6b ff 28             	imul   edi,edi,0x28
c0014ca4:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014ca8:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014cab:	51                   	push   ecx
c0014cac:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014cb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014cb4:	8b 07                	mov    eax,DWORD PTR [edi]
c0014cb6:	6b d2 28             	imul   edx,edx,0x28
c0014cb9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014cbd:	31 d2                	xor    edx,edx
c0014cbf:	52                   	push   edx
c0014cc0:	50                   	push   eax
c0014cc1:	53                   	push   ebx
c0014cc2:	e8 9b 6c ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0014cc7:	83 c4 0c             	add    esp,0xc
c0014cca:	6a 20                	push   0x20
c0014ccc:	6a 00                	push   0x0
c0014cce:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014cd5:	51                   	push   ecx
c0014cd6:	e8 15 b8 fe ff       	call   c00004f0 <memset>
c0014cdb:	58                   	pop    eax
c0014cdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cde:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014ce2:	52                   	push   edx
c0014ce3:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014cea:	51                   	push   ecx
c0014ceb:	6a 00                	push   0x0
c0014ced:	6a 1f                	push   0x1f
c0014cef:	53                   	push   ebx
c0014cf0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cf3:	83 c4 1c             	add    esp,0x1c
c0014cf6:	6a 09                	push   0x9
c0014cf8:	68 37 23 02 c0       	push   0xc0022337
c0014cfd:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d04:	51                   	push   ecx
c0014d05:	e8 76 b6 fe ff       	call   c0000380 <memcmp>
c0014d0a:	83 c4 10             	add    esp,0x10
c0014d0d:	85 c0                	test   eax,eax
c0014d0f:	75 1a                	jne    c0014d2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014d11:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014d14:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014d17:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014d1b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014d1e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014d25:	89 d0                	mov    eax,edx
c0014d27:	40                   	inc    eax
c0014d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d2b:	52                   	push   edx
c0014d2c:	6a 09                	push   0x9
c0014d2e:	68 41 23 02 c0       	push   0xc0022341
c0014d33:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d3a:	50                   	push   eax
c0014d3b:	e8 40 b6 fe ff       	call   c0000380 <memcmp>
c0014d40:	83 c4 10             	add    esp,0x10
c0014d43:	85 c0                	test   eax,eax
c0014d45:	75 1a                	jne    c0014d61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014d47:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014d4a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014d4d:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014d51:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014d54:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014d5b:	89 c8                	mov    eax,ecx
c0014d5d:	40                   	inc    eax
c0014d5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d61:	50                   	push   eax
c0014d62:	50                   	push   eax
c0014d63:	68 0d 23 02 c0       	push   0xc002230d
c0014d68:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d6f:	50                   	push   eax
c0014d70:	e8 0b ba fe ff       	call   c0000780 <strcmp>
c0014d75:	83 c4 10             	add    esp,0x10
c0014d78:	85 c0                	test   eax,eax
c0014d7a:	75 0b                	jne    c0014d87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014d7c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014d80:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014d83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d87:	50                   	push   eax
c0014d88:	50                   	push   eax
c0014d89:	68 15 23 02 c0       	push   0xc0022315
c0014d8e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d95:	50                   	push   eax
c0014d96:	e8 e5 b9 fe ff       	call   c0000780 <strcmp>
c0014d9b:	83 c4 10             	add    esp,0x10
c0014d9e:	85 c0                	test   eax,eax
c0014da0:	75 0b                	jne    c0014dad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014da2:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014da6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014da9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014dad:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014db2:	e9 d7 fe ff ff       	jmp    c0014c8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014db7:	50                   	push   eax
c0014db8:	31 d2                	xor    edx,edx
c0014dba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014dbe:	52                   	push   edx
c0014dbf:	50                   	push   eax
c0014dc0:	53                   	push   ebx
c0014dc1:	e8 9c 6b ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0014dc6:	58                   	pop    eax
c0014dc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014dcb:	e8 03 2d ff ff       	call   c0007ad3 <malloc>
c0014dd0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014dd2:	31 d2                	xor    edx,edx
c0014dd4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014dd8:	58                   	pop    eax
c0014dd9:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014ddd:	56                   	push   esi
c0014dde:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014de6:	52                   	push   edx
c0014de7:	50                   	push   eax
c0014de8:	53                   	push   ebx
c0014de9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014dec:	83 c4 14             	add    esp,0x14
c0014def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014df3:	e8 db 2c ff ff       	call   c0007ad3 <malloc>
c0014df8:	31 d2                	xor    edx,edx
c0014dfa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014dfe:	83 c4 0c             	add    esp,0xc
c0014e01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e05:	52                   	push   edx
c0014e06:	50                   	push   eax
c0014e07:	53                   	push   ebx
c0014e08:	e8 55 6b ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0014e0d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e0f:	31 d2                	xor    edx,edx
c0014e11:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e14:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014e18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e1c:	52                   	push   edx
c0014e1d:	50                   	push   eax
c0014e1e:	53                   	push   ebx
c0014e1f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e22:	83 c4 20             	add    esp,0x20
c0014e25:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014e2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014e32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e36:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014e3a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014e3d:	0f 84 2b 03 00 00    	je     c001516e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014e43:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014e4a:	31 d2                	xor    edx,edx
c0014e4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e50:	c1 e8 03             	shr    eax,0x3
c0014e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014e57:	51                   	push   ecx
c0014e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e5c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014e60:	52                   	push   edx
c0014e61:	50                   	push   eax
c0014e62:	53                   	push   ebx
c0014e63:	e8 fa 6a ff ff       	call   c000b962 <File::seek(unsigned long long)>
c0014e68:	5e                   	pop    esi
c0014e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e6d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014e74:	e8 5a 2c ff ff       	call   c0007ad3 <malloc>
c0014e79:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e7b:	31 d2                	xor    edx,edx
c0014e7d:	89 c7                	mov    edi,eax
c0014e7f:	58                   	pop    eax
c0014e80:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014e84:	50                   	push   eax
c0014e85:	57                   	push   edi
c0014e86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e8a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014e91:	52                   	push   edx
c0014e92:	50                   	push   eax
c0014e93:	53                   	push   ebx
c0014e94:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e97:	83 c4 20             	add    esp,0x20
c0014e9a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014ea2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014ea6:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014eaa:	0f 8d a5 02 00 00    	jge    c0015155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014eb0:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014eb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014eb9:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014ebc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014ec0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ec4:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014ec8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ecc:	c1 e8 08             	shr    eax,0x8
c0014ecf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014ed3:	89 c2                	mov    edx,eax
c0014ed5:	c1 e2 04             	shl    edx,0x4
c0014ed8:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014edc:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014edf:	85 f6                	test   esi,esi
c0014ee1:	0f 85 cf 00 00 00    	jne    c0014fb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014ee7:	83 ec 0c             	sub    esp,0xc
c0014eea:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014eee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ef2:	03 02                	add    eax,DWORD PTR [edx]
c0014ef4:	50                   	push   eax
c0014ef5:	e8 60 f8 ff ff       	call   c001475a <Thr::getAddressOfKernelSymbol(char const*)>
c0014efa:	83 c4 10             	add    esp,0x10
c0014efd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014f01:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014f06:	85 c0                	test   eax,eax
c0014f08:	89 c6                	mov    esi,eax
c0014f0a:	0f 85 a6 00 00 00    	jne    c0014fb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014f10:	83 ec 0c             	sub    esp,0xc
c0014f13:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f1b:	03 02                	add    eax,DWORD PTR [edx]
c0014f1d:	50                   	push   eax
c0014f1e:	e8 61 c5 ff ff       	call   c0011484 <KeResolveCompatibilitySymbol(char*)>
c0014f23:	83 c4 10             	add    esp,0x10
c0014f26:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014f2a:	85 c0                	test   eax,eax
c0014f2c:	89 c6                	mov    esi,eax
c0014f2e:	0f 85 82 00 00 00    	jne    c0014fb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014f34:	50                   	push   eax
c0014f35:	50                   	push   eax
c0014f36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f3a:	03 02                	add    eax,DWORD PTR [edx]
c0014f3c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014f40:	50                   	push   eax
c0014f41:	68 4b 23 02 c0       	push   0xc002234b
c0014f46:	e8 bf 59 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014f4b:	58                   	pop    eax
c0014f4c:	5a                   	pop    edx
c0014f4d:	68 65 23 02 c0       	push   0xc0022365
c0014f52:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014f59:	51                   	push   ecx
c0014f5a:	e8 f1 b6 fe ff       	call   c0000650 <strcpy>
c0014f5f:	59                   	pop    ecx
c0014f60:	58                   	pop    eax
c0014f61:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f69:	03 02                	add    eax,DWORD PTR [edx]
c0014f6b:	50                   	push   eax
c0014f6c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014f73:	51                   	push   ecx
c0014f74:	e8 f7 b8 fe ff       	call   c0000870 <strcat>
c0014f79:	58                   	pop    eax
c0014f7a:	5a                   	pop    edx
c0014f7b:	68 fb 23 02 c0       	push   0xc00223fb
c0014f80:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014f87:	51                   	push   ecx
c0014f88:	e8 e3 b8 fe ff       	call   c0000870 <strcat>
c0014f8d:	83 c4 10             	add    esp,0x10
c0014f90:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014f95:	0f 84 77 01 00 00    	je     c0015112 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014f9b:	83 ec 0c             	sub    esp,0xc
c0014f9e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014fa5:	51                   	push   ecx
c0014fa6:	e8 ee c2 ff ff       	call   c0011299 <KePanic(char const*)>
c0014fab:	83 c4 10             	add    esp,0x10
c0014fae:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014fb2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014fb6:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014fbb:	83 f8 01             	cmp    eax,0x1
c0014fbe:	0f 85 9b 00 00 00    	jne    c001505f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014fc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014fc8:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014fcf:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014fd3:	01 d0                	add    eax,edx
c0014fd5:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014fdd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014fe1:	0f 94 c0             	sete   al
c0014fe4:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014fec:	0f 94 c1             	sete   cl
c0014fef:	09 c1                	or     ecx,eax
c0014ff1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014ff5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ffa:	0f b6 c9             	movzx  ecx,cl
c0014ffd:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fff:	74 41                	je     c0015042 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0015001:	8d 14 06             	lea    edx,[esi+eax*1]
c0015004:	85 c9                	test   ecx,ecx
c0015006:	75 15                	jne    c001501d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0015008:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001500c:	66 83 f8 0c          	cmp    ax,0xc
c0015010:	76 05                	jbe    c0015017 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0015012:	b8 0c 00 00 00       	mov    eax,0xc
c0015017:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001501b:	76 37                	jbe    c0015054 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001501d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015022:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015026:	0f 84 e6 00 00 00    	je     c0015112 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001502c:	83 ec 0c             	sub    esp,0xc
c001502f:	68 7c 23 02 c0       	push   0xc002237c
c0015034:	e8 60 c2 ff ff       	call   c0011299 <KePanic(char const*)>
c0015039:	83 c4 10             	add    esp,0x10
c001503c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015040:	eb 12                	jmp    c0015054 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015042:	01 c2                	add    edx,eax
c0015044:	85 c9                	test   ecx,ecx
c0015046:	75 0c                	jne    c0015054 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015048:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001504c:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015050:	77 02                	ja     c0015054 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015052:	01 f2                	add    edx,esi
c0015054:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015058:	89 10                	mov    DWORD PTR [eax],edx
c001505a:	e9 ed 00 00 00       	jmp    c001514c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001505f:	83 f8 02             	cmp    eax,0x2
c0015062:	0f 85 81 00 00 00    	jne    c00150e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0015068:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001506f:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0015073:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0015077:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001507f:	74 21                	je     c00150a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015081:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015089:	74 17                	je     c00150a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001508b:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c001508f:	ba 0a 00 00 00       	mov    edx,0xa
c0015094:	83 f9 0e             	cmp    ecx,0xe
c0015097:	77 03                	ja     c001509c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0015099:	8d 51 fc             	lea    edx,[ecx-0x4]
c001509c:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c00150a0:	76 1f                	jbe    c00150c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c00150a2:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00150a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00150ab:	74 65                	je     c0015112 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00150ad:	83 ec 0c             	sub    esp,0xc
c00150b0:	68 98 23 02 c0       	push   0xc0022398
c00150b5:	e8 df c1 ff ff       	call   c0011299 <KePanic(char const*)>
c00150ba:	83 c4 10             	add    esp,0x10
c00150bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150c1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00150c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00150c8:	74 15                	je     c00150df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00150ca:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00150ce:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00150d5:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00150d9:	01 d1                	add    ecx,edx
c00150db:	01 ce                	add    esi,ecx
c00150dd:	eb 06                	jmp    c00150e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00150df:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00150e3:	01 d6                	add    esi,edx
c00150e5:	89 30                	mov    DWORD PTR [eax],esi
c00150e7:	eb 63                	jmp    c001514c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00150e9:	56                   	push   esi
c00150ea:	56                   	push   esi
c00150eb:	50                   	push   eax
c00150ec:	68 b4 23 02 c0       	push   0xc00223b4
c00150f1:	e8 14 58 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00150f6:	83 c4 10             	add    esp,0x10
c00150f9:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00150fe:	74 12                	je     c0015112 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015100:	83 ec 0c             	sub    esp,0xc
c0015103:	68 bf 23 02 c0       	push   0xc00223bf
c0015108:	e8 8c c1 ff ff       	call   c0011299 <KePanic(char const*)>
c001510d:	83 c4 10             	add    esp,0x10
c0015110:	eb 3a                	jmp    c001514c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015112:	83 ec 0c             	sub    esp,0xc
c0015115:	53                   	push   ebx
c0015116:	e8 e7 67 ff ff       	call   c000b902 <File::close()>
c001511b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001511d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015120:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015123:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015126:	e8 b8 29 ff ff       	call   c0007ae3 <free>
c001512b:	59                   	pop    ecx
c001512c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015130:	e8 ae 29 ff ff       	call   c0007ae3 <free>
c0015135:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015138:	e8 a6 29 ff ff       	call   c0007ae3 <free>
c001513d:	5b                   	pop    ebx
c001513e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015142:	e8 9c 29 ff ff       	call   c0007ae3 <free>
c0015147:	83 c4 10             	add    esp,0x10
c001514a:	eb 1e                	jmp    c001516a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001514c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0015150:	e9 4d fd ff ff       	jmp    c0014ea2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0015155:	83 ec 0c             	sub    esp,0xc
c0015158:	57                   	push   edi
c0015159:	e8 85 29 ff ff       	call   c0007ae3 <free>
c001515e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0015162:	83 c4 10             	add    esp,0x10
c0015165:	e9 cc fc ff ff       	jmp    c0014e36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c001516a:	31 c0                	xor    eax,eax
c001516c:	eb 32                	jmp    c00151a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c001516e:	83 ec 0c             	sub    esp,0xc
c0015171:	53                   	push   ebx
c0015172:	e8 8b 67 ff ff       	call   c000b902 <File::close()>
c0015177:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015179:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001517c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001517f:	58                   	pop    eax
c0015180:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015184:	e8 5a 29 ff ff       	call   c0007ae3 <free>
c0015189:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001518c:	e8 52 29 ff ff       	call   c0007ae3 <free>
c0015191:	5a                   	pop    edx
c0015192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015196:	e8 48 29 ff ff       	call   c0007ae3 <free>
c001519b:	83 c4 10             	add    esp,0x10
c001519e:	b0 01                	mov    al,0x1
c00151a0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00151a6:	5b                   	pop    ebx
c00151a7:	5e                   	pop    esi
c00151a8:	5f                   	pop    edi
c00151a9:	5d                   	pop    ebp
c00151aa:	c3                   	ret    

c00151ab <Thr::getDriverBaseFromAddress(unsigned long)>:
c00151ab:	56                   	push   esi
c00151ac:	31 d2                	xor    edx,edx
c00151ae:	53                   	push   ebx
c00151af:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c00151b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00151b9:	39 d3                	cmp    ebx,edx
c00151bb:	7e 1b                	jle    c00151d8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00151bd:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c00151c4:	39 c8                	cmp    eax,ecx
c00151c6:	77 0d                	ja     c00151d5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00151c8:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c00151cf:	01 c6                	add    esi,eax
c00151d1:	39 ce                	cmp    esi,ecx
c00151d3:	77 05                	ja     c00151da <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00151d5:	42                   	inc    edx
c00151d6:	eb e1                	jmp    c00151b9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00151d8:	31 c0                	xor    eax,eax
c00151da:	5b                   	pop    ebx
c00151db:	5e                   	pop    esi
c00151dc:	c3                   	ret    

c00151dd <Thr::getDriverNameFromAddress(unsigned long)>:
c00151dd:	53                   	push   ebx
c00151de:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c00151e4:	31 c0                	xor    eax,eax
c00151e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00151ea:	39 c3                	cmp    ebx,eax
c00151ec:	7e 22                	jle    c0015210 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00151ee:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c00151f5:	39 ca                	cmp    edx,ecx
c00151f7:	77 14                	ja     c001520d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00151f9:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c0015200:	39 ca                	cmp    edx,ecx
c0015202:	76 09                	jbe    c001520d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015204:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c001520b:	eb 05                	jmp    c0015212 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001520d:	40                   	inc    eax
c001520e:	eb da                	jmp    c00151ea <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015210:	31 c0                	xor    eax,eax
c0015212:	5b                   	pop    ebx
c0015213:	c3                   	ret    

c0015214 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015214:	53                   	push   ebx
c0015215:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015219:	53                   	push   ebx
c001521a:	e8 8c ff ff ff       	call   c00151ab <Thr::getDriverBaseFromAddress(unsigned long)>
c001521f:	5a                   	pop    edx
c0015220:	31 d2                	xor    edx,edx
c0015222:	85 c0                	test   eax,eax
c0015224:	74 04                	je     c001522a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015226:	89 da                	mov    edx,ebx
c0015228:	29 c2                	sub    edx,eax
c001522a:	5b                   	pop    ebx
c001522b:	89 d0                	mov    eax,edx
c001522d:	c3                   	ret    

c001522e <Thr::loadDLL(char const*, bool)>:
c001522e:	55                   	push   ebp
c001522f:	57                   	push   edi
c0015230:	56                   	push   esi
c0015231:	53                   	push   ebx
c0015232:	81 ec 34 01 00 00    	sub    esp,0x134
c0015238:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001523f:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0015246:	56                   	push   esi
c0015247:	68 d7 23 02 c0       	push   0xc00223d7
c001524c:	e8 b9 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015251:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015258:	e8 76 28 ff ff       	call   c0007ad3 <malloc>
c001525d:	6a 01                	push   0x1
c001525f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0015265:	56                   	push   esi
c0015266:	89 c3                	mov    ebx,eax
c0015268:	50                   	push   eax
c0015269:	e8 58 65 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c001526e:	83 c4 20             	add    esp,0x20
c0015271:	85 db                	test   ebx,ebx
c0015273:	75 3c                	jne    c00152b1 <Thr::loadDLL(char const*, bool)+0x83>
c0015275:	89 e8                	mov    eax,ebp
c0015277:	84 c0                	test   al,al
c0015279:	0f 84 e1 01 00 00    	je     c0015460 <Thr::loadDLL(char const*, bool)+0x232>
c001527f:	50                   	push   eax
c0015280:	50                   	push   eax
c0015281:	68 e8 23 02 c0       	push   0xc00223e8
c0015286:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001528a:	57                   	push   edi
c001528b:	e8 c0 b3 fe ff       	call   c0000650 <strcpy>
c0015290:	58                   	pop    eax
c0015291:	5a                   	pop    edx
c0015292:	56                   	push   esi
c0015293:	57                   	push   edi
c0015294:	e8 d7 b5 fe ff       	call   c0000870 <strcat>
c0015299:	59                   	pop    ecx
c001529a:	58                   	pop    eax
c001529b:	68 fb 23 02 c0       	push   0xc00223fb
c00152a0:	57                   	push   edi
c00152a1:	e8 ca b5 fe ff       	call   c0000870 <strcat>
c00152a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00152a9:	e8 eb bf ff ff       	call   c0011299 <KePanic(char const*)>
c00152ae:	83 c4 10             	add    esp,0x10
c00152b1:	50                   	push   eax
c00152b2:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00152b6:	50                   	push   eax
c00152b7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00152bb:	50                   	push   eax
c00152bc:	53                   	push   ebx
c00152bd:	e8 e4 68 ff ff       	call   c000bba6 <File::stat(unsigned long long*, bool*)>
c00152c2:	83 c4 10             	add    esp,0x10
c00152c5:	85 db                	test   ebx,ebx
c00152c7:	74 0c                	je     c00152d5 <Thr::loadDLL(char const*, bool)+0xa7>
c00152c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152cb:	83 ec 0c             	sub    esp,0xc
c00152ce:	53                   	push   ebx
c00152cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152d2:	83 c4 10             	add    esp,0x10
c00152d5:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00152da:	75 0a                	jne    c00152e6 <Thr::loadDLL(char const*, bool)+0xb8>
c00152dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152e0:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00152e4:	75 3e                	jne    c0015324 <Thr::loadDLL(char const*, bool)+0xf6>
c00152e6:	89 e8                	mov    eax,ebp
c00152e8:	31 db                	xor    ebx,ebx
c00152ea:	84 c0                	test   al,al
c00152ec:	0f 84 6e 01 00 00    	je     c0015460 <Thr::loadDLL(char const*, bool)+0x232>
c00152f2:	50                   	push   eax
c00152f3:	50                   	push   eax
c00152f4:	68 e8 23 02 c0       	push   0xc00223e8
c00152f9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00152fd:	53                   	push   ebx
c00152fe:	e8 4d b3 fe ff       	call   c0000650 <strcpy>
c0015303:	58                   	pop    eax
c0015304:	5a                   	pop    edx
c0015305:	56                   	push   esi
c0015306:	53                   	push   ebx
c0015307:	e8 64 b5 fe ff       	call   c0000870 <strcat>
c001530c:	59                   	pop    ecx
c001530d:	5f                   	pop    edi
c001530e:	68 fb 23 02 c0       	push   0xc00223fb
c0015313:	53                   	push   ebx
c0015314:	e8 57 b5 fe ff       	call   c0000870 <strcat>
c0015319:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001531c:	e8 78 bf ff ff       	call   c0011299 <KePanic(char const*)>
c0015321:	83 c4 10             	add    esp,0x10
c0015324:	53                   	push   ebx
c0015325:	6a 03                	push   0x3
c0015327:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001532b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001532f:	05 ff 0f 00 00       	add    eax,0xfff
c0015334:	83 d2 00             	adc    edx,0x0
c0015337:	0f ac d0 0c          	shrd   eax,edx,0xc
c001533b:	50                   	push   eax
c001533c:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015342:	e8 bf 4a ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0015347:	89 c3                	mov    ebx,eax
c0015349:	58                   	pop    eax
c001534a:	5a                   	pop    edx
c001534b:	53                   	push   ebx
c001534c:	68 d2 09 02 c0       	push   0xc00209d2
c0015351:	e8 b4 55 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015356:	89 34 24             	mov    DWORD PTR [esp],esi
c0015359:	e8 22 b2 fe ff       	call   c0000580 <strlen>
c001535e:	8b 3d 00 8f 02 c0    	mov    edi,DWORD PTR ds:0xc0028f00
c0015364:	40                   	inc    eax
c0015365:	89 04 24             	mov    DWORD PTR [esp],eax
c0015368:	e8 66 27 ff ff       	call   c0007ad3 <malloc>
c001536d:	59                   	pop    ecx
c001536e:	89 04 bd 20 93 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6ce0],eax
c0015375:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c001537a:	5f                   	pop    edi
c001537b:	56                   	push   esi
c001537c:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c0015383:	e8 c8 b2 fe ff       	call   c0000650 <strcpy>
c0015388:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c001538d:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c0015394:	8d 50 01             	lea    edx,[eax+0x1]
c0015397:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c001539d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00153a1:	83 c4 0c             	add    esp,0xc
c00153a4:	6a 01                	push   0x1
c00153a6:	53                   	push   ebx
c00153a7:	56                   	push   esi
c00153a8:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c00153af:	e8 b6 f6 ff ff       	call   c0014a6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	89 c7                	mov    edi,eax
c00153b9:	89 f8                	mov    eax,edi
c00153bb:	83 f0 01             	xor    eax,0x1
c00153be:	84 c0                	test   al,al
c00153c0:	74 18                	je     c00153da <Thr::loadDLL(char const*, bool)+0x1ac>
c00153c2:	89 e8                	mov    eax,ebp
c00153c4:	84 c0                	test   al,al
c00153c6:	74 12                	je     c00153da <Thr::loadDLL(char const*, bool)+0x1ac>
c00153c8:	83 ec 0c             	sub    esp,0xc
c00153cb:	68 fd 23 02 c0       	push   0xc00223fd
c00153d0:	e8 c4 be ff ff       	call   c0011299 <KePanic(char const*)>
c00153d5:	83 c4 10             	add    esp,0x10
c00153d8:	eb 06                	jmp    c00153e0 <Thr::loadDLL(char const*, bool)+0x1b2>
c00153da:	89 f8                	mov    eax,edi
c00153dc:	84 c0                	test   al,al
c00153de:	75 10                	jne    c00153f0 <Thr::loadDLL(char const*, bool)+0x1c2>
c00153e0:	83 ec 0c             	sub    esp,0xc
c00153e3:	68 1c 24 02 c0       	push   0xc002241c
c00153e8:	e8 ac be ff ff       	call   c0011299 <KePanic(char const*)>
c00153ed:	83 c4 10             	add    esp,0x10
c00153f0:	31 f6                	xor    esi,esi
c00153f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00153fa:	05 ff 0f 00 00       	add    eax,0xfff
c00153ff:	83 d2 00             	adc    edx,0x0
c0015402:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015406:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001540a:	c1 ea 0c             	shr    edx,0xc
c001540d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015411:	ba 00 00 00 00       	mov    edx,0x0
c0015416:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001541a:	89 d0                	mov    eax,edx
c001541c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015420:	73 32                	jae    c0015454 <Thr::loadDLL(char const*, bool)+0x226>
c0015422:	50                   	push   eax
c0015423:	50                   	push   eax
c0015424:	89 f0                	mov    eax,esi
c0015426:	c1 e0 0c             	shl    eax,0xc
c0015429:	01 d8                	add    eax,ebx
c001542b:	50                   	push   eax
c001542c:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015432:	e8 b3 44 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0015437:	83 c4 10             	add    esp,0x10
c001543a:	8b 00                	mov    eax,DWORD PTR [eax]
c001543c:	a8 60                	test   al,0x60
c001543e:	75 11                	jne    c0015451 <Thr::loadDLL(char const*, bool)+0x223>
c0015440:	83 ec 0c             	sub    esp,0xc
c0015443:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015448:	50                   	push   eax
c0015449:	e8 2b 29 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c001544e:	83 c4 10             	add    esp,0x10
c0015451:	46                   	inc    esi
c0015452:	eb 9e                	jmp    c00153f2 <Thr::loadDLL(char const*, bool)+0x1c4>
c0015454:	89 f8                	mov    eax,edi
c0015456:	84 c0                	test   al,al
c0015458:	b8 00 00 00 00       	mov    eax,0x0
c001545d:	0f 44 d8             	cmove  ebx,eax
c0015460:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015466:	89 d8                	mov    eax,ebx
c0015468:	5b                   	pop    ebx
c0015469:	5e                   	pop    esi
c001546a:	5f                   	pop    edi
c001546b:	5d                   	pop    ebp
c001546c:	c3                   	ret    

c001546d <Thr::executeDLL(unsigned long, void*)>:
c001546d:	56                   	push   esi
c001546e:	53                   	push   ebx
c001546f:	52                   	push   edx
c0015470:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015474:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015478:	85 db                	test   ebx,ebx
c001547a:	75 10                	jne    c001548c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001547c:	83 ec 0c             	sub    esp,0xc
c001547f:	68 38 24 02 c0       	push   0xc0022438
c0015484:	e8 10 be ff ff       	call   c0011299 <KePanic(char const*)>
c0015489:	83 c4 10             	add    esp,0x10
c001548c:	50                   	push   eax
c001548d:	50                   	push   eax
c001548e:	53                   	push   ebx
c001548f:	68 62 24 02 c0       	push   0xc0022462
c0015494:	e8 71 54 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015499:	89 d8                	mov    eax,ebx
c001549b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001549f:	83 c4 14             	add    esp,0x14
c00154a2:	5b                   	pop    ebx
c00154a3:	5e                   	pop    esi
c00154a4:	ff e0                	jmp    eax
c00154a6:	66 90                	xchg   ax,ax

c00154a8 <userModeEntryPoint(void*)>:
c00154a8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00154ad:	83 e8 01             	sub    eax,0x1
c00154b0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00154b5:	75 01                	jne    c00154b8 <userModeEntryPoint(void*)+0x10>
c00154b7:	fb                   	sti    
c00154b8:	fb                   	sti    
c00154b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154c1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00154c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154cb:	e9 6f ad fe ff       	jmp    c000023f <goToUsermode>

c00154d0 <changeTSS>:
c00154d0:	83 ec 14             	sub    esp,0x14
c00154d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154d8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00154db:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00154e0:	c1 e2 15             	shl    edx,0x15
c00154e3:	29 d0                	sub    eax,edx
c00154e5:	50                   	push   eax
c00154e6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00154eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00154f1:	05 7c 11 00 00       	add    eax,0x117c
c00154f6:	50                   	push   eax
c00154f7:	e8 40 3a ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c00154fc:	83 c4 1c             	add    esp,0x1c
c00154ff:	c3                   	ret    

c0015500 <switchToThread(ThreadControlBlock*)>:
c0015500:	57                   	push   edi
c0015501:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015507:	56                   	push   esi
c0015508:	53                   	push   ebx
c0015509:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001550d:	85 c9                	test   ecx,ecx
c001550f:	0f 85 8b 00 00 00    	jne    c00155a0 <switchToThread(ThreadControlBlock*)+0xa0>
c0015515:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015519:	81 fa ff 00 00 00    	cmp    edx,0xff
c001551f:	74 7b                	je     c001559c <switchToThread(ThreadControlBlock*)+0x9c>
c0015521:	b8 00 04 00 00       	mov    eax,0x400
c0015526:	29 d0                	sub    eax,edx
c0015528:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001552b:	d1 f8                	sar    eax,1
c001552d:	01 d0                	add    eax,edx
c001552f:	90                   	nop
c0015530:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015533:	e8 03 28 00 00       	call   c0017d3b <HalQueryPerformanceCounter()>
c0015538:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c001553d:	89 c6                	mov    esi,eax
c001553f:	89 d7                	mov    edi,edx
c0015541:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c0015547:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c001554c:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c0015552:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c0015558:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c001555e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015564:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c001556a:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c0015570:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015573:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015576:	01 c6                	add    esi,eax
c0015578:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001557b:	11 d7                	adc    edi,edx
c001557d:	83 ec 0c             	sub    esp,0xc
c0015580:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015583:	53                   	push   ebx
c0015584:	e8 ee ac fe ff       	call   c0000277 <switchToThreadASM>
c0015589:	0f 20 c0             	mov    eax,cr0
c001558c:	83 c8 08             	or     eax,0x8
c001558f:	0f 22 c0             	mov    cr0,eax
c0015592:	83 c4 10             	add    esp,0x10
c0015595:	5b                   	pop    ebx
c0015596:	5e                   	pop    esi
c0015597:	5f                   	pop    edi
c0015598:	c3                   	ret    
c0015599:	8d 76 00             	lea    esi,[esi+0x0]
c001559c:	31 c0                	xor    eax,eax
c001559e:	eb 90                	jmp    c0015530 <switchToThread(ThreadControlBlock*)+0x30>
c00155a0:	5b                   	pop    ebx
c00155a1:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c00155ab:	5e                   	pop    esi
c00155ac:	5f                   	pop    edi
c00155ad:	c3                   	ret    
c00155ae:	66 90                	xchg   ax,ax

c00155b0 <Process::addArgs(char**)>:
c00155b0:	57                   	push   edi
c00155b1:	56                   	push   esi
c00155b2:	53                   	push   ebx
c00155b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00155b7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00155bb:	85 f6                	test   esi,esi
c00155bd:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00155c7:	74 4f                	je     c0015618 <Process::addArgs(char**)+0x68>
c00155c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00155cb:	85 c0                	test   eax,eax
c00155cd:	74 49                	je     c0015618 <Process::addArgs(char**)+0x68>
c00155cf:	31 db                	xor    ebx,ebx
c00155d1:	8d 76 00             	lea    esi,[esi+0x0]
c00155d4:	83 ec 0c             	sub    esp,0xc
c00155d7:	50                   	push   eax
c00155d8:	e8 a3 af fe ff       	call   c0000580 <strlen>
c00155dd:	83 c0 01             	add    eax,0x1
c00155e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00155e3:	e8 eb 24 ff ff       	call   c0007ad3 <malloc>
c00155e8:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00155ef:	5a                   	pop    edx
c00155f0:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00155f3:	83 c3 01             	add    ebx,0x1
c00155f6:	59                   	pop    ecx
c00155f7:	52                   	push   edx
c00155f8:	50                   	push   eax
c00155f9:	e8 52 b0 fe ff       	call   c0000650 <strcpy>
c00155fe:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015604:	83 c4 10             	add    esp,0x10
c0015607:	83 c1 01             	add    ecx,0x1
c001560a:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015610:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015613:	85 c0                	test   eax,eax
c0015615:	75 bd                	jne    c00155d4 <Process::addArgs(char**)+0x24>
c0015617:	90                   	nop
c0015618:	5b                   	pop    ebx
c0015619:	5e                   	pop    esi
c001561a:	5f                   	pop    edi
c001561b:	c3                   	ret    

c001561c <Process::Process(char const*, Process*, char**)>:
c001561c:	56                   	push   esi
c001561d:	53                   	push   ebx
c001561e:	83 ec 14             	sub    esp,0x14
c0015621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015625:	05 0c 02 00 00       	add    eax,0x20c
c001562a:	bb 07 00 00 00       	mov    ebx,0x7
c001562f:	89 c6                	mov    esi,eax
c0015631:	8d 76 00             	lea    esi,[esi+0x0]
c0015634:	85 db                	test   ebx,ebx
c0015636:	78 14                	js     c001564c <Process::Process(char const*, Process*, char**)+0x30>
c0015638:	83 ec 0c             	sub    esp,0xc
c001563b:	56                   	push   esi
c001563c:	e8 27 a6 00 00       	call   c001fc68 <ThreadControlBlock::ThreadControlBlock()>
c0015641:	83 c4 10             	add    esp,0x10
c0015644:	83 c6 5f             	add    esi,0x5f
c0015647:	83 eb 01             	sub    ebx,0x1
c001564a:	eb e8                	jmp    c0015634 <Process::Process(char const*, Process*, char**)+0x18>
c001564c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015650:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015657:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001565b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015662:	83 ec 0c             	sub    esp,0xc
c0015665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015669:	e8 20 ba ff ff       	call   c001108e <KeNewProcessEnv(Process*)>
c001566e:	83 c4 10             	add    esp,0x10
c0015671:	89 c2                	mov    edx,eax
c0015673:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015677:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001567d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015681:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001568a:	a1 80 36 02 c0       	mov    eax,ds:0xc0023680
c001568f:	8d 50 01             	lea    edx,[eax+0x1]
c0015692:	89 15 80 36 02 c0    	mov    DWORD PTR ds:0xc0023680,edx
c0015698:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001569c:	89 02                	mov    DWORD PTR [edx],eax
c001569e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00156a6:	83 ec 0c             	sub    esp,0xc
c00156a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00156ad:	e8 21 24 ff ff       	call   c0007ad3 <malloc>
c00156b2:	83 c4 10             	add    esp,0x10
c00156b5:	89 c3                	mov    ebx,eax
c00156b7:	83 ec 08             	sub    esp,0x8
c00156ba:	6a 00                	push   0x0
c00156bc:	53                   	push   ebx
c00156bd:	e8 90 49 ff ff       	call   c000a052 <VAS::VAS(bool)>
c00156c2:	83 c4 10             	add    esp,0x10
c00156c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156c9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00156cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156d3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00156dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156e5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00156eb:	e8 c2 bf ff ff       	call   c00116b2 <KeInitSignals()>
c00156f0:	89 c2                	mov    edx,eax
c00156f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156f6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00156fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015700:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015706:	85 c0                	test   eax,eax
c0015708:	74 42                	je     c001574c <Process::Process(char const*, Process*, char**)+0x130>
c001570a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001570e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015714:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001571a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001571e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015724:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015728:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001572e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015738:	05 0c 01 00 00       	add    eax,0x10c
c001573d:	83 ec 08             	sub    esp,0x8
c0015740:	52                   	push   edx
c0015741:	50                   	push   eax
c0015742:	e8 09 af fe ff       	call   c0000650 <strcpy>
c0015747:	83 c4 10             	add    esp,0x10
c001574a:	eb 64                	jmp    c00157b0 <Process::Process(char const*, Process*, char**)+0x194>
c001574c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015754:	83 ec 0c             	sub    esp,0xc
c0015757:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001575b:	e8 73 23 ff ff       	call   c0007ad3 <malloc>
c0015760:	83 c4 10             	add    esp,0x10
c0015763:	89 c3                	mov    ebx,eax
c0015765:	83 ec 08             	sub    esp,0x8
c0015768:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001576c:	53                   	push   ebx
c001576d:	e8 fa 34 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015772:	83 c4 10             	add    esp,0x10
c0015775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015779:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001577f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015783:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015789:	83 ec 0c             	sub    esp,0xc
c001578c:	50                   	push   eax
c001578d:	e8 88 2d ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015792:	83 c4 10             	add    esp,0x10
c0015795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015799:	05 0c 01 00 00       	add    eax,0x10c
c001579e:	83 ec 08             	sub    esp,0x8
c00157a1:	68 81 24 02 c0       	push   0xc0022481
c00157a6:	50                   	push   eax
c00157a7:	e8 a4 ae fe ff       	call   c0000650 <strcpy>
c00157ac:	83 c4 10             	add    esp,0x10
c00157af:	90                   	nop
c00157b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157b4:	83 c0 0c             	add    eax,0xc
c00157b7:	83 ec 08             	sub    esp,0x8
c00157ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157be:	50                   	push   eax
c00157bf:	e8 8c ae fe ff       	call   c0000650 <strcpy>
c00157c4:	83 c4 10             	add    esp,0x10
c00157c7:	83 ec 08             	sub    esp,0x8
c00157ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00157ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157d2:	e8 d9 fd ff ff       	call   c00155b0 <Process::addArgs(char**)>
c00157d7:	83 c4 10             	add    esp,0x10
c00157da:	83 ec 08             	sub    esp,0x8
c00157dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157e5:	e8 3e ed ff ff       	call   c0014528 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00157ea:	83 c4 10             	add    esp,0x10
c00157ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00157f1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00157f5:	83 f0 01             	xor    eax,0x1
c00157f8:	88 c2                	mov    dl,al
c00157fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157fe:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015804:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015809:	83 ec 04             	sub    esp,0x4
c001580c:	50                   	push   eax
c001580d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015811:	68 d8 24 02 c0       	push   0xc00224d8
c0015816:	e8 ef 50 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001581b:	83 c4 10             	add    esp,0x10
c001581e:	90                   	nop
c001581f:	83 c4 14             	add    esp,0x14
c0015822:	5b                   	pop    ebx
c0015823:	5e                   	pop    esi
c0015824:	c3                   	ret    
c0015825:	90                   	nop
c0015826:	66 90                	xchg   ax,ax

c0015828 <Process::Process(bool, char const*, Process*, char**)>:
c0015828:	56                   	push   esi
c0015829:	53                   	push   ebx
c001582a:	83 ec 24             	sub    esp,0x24
c001582d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015831:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015835:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015839:	05 0c 02 00 00       	add    eax,0x20c
c001583e:	bb 07 00 00 00       	mov    ebx,0x7
c0015843:	89 c6                	mov    esi,eax
c0015845:	8d 76 00             	lea    esi,[esi+0x0]
c0015848:	85 db                	test   ebx,ebx
c001584a:	78 14                	js     c0015860 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001584c:	83 ec 0c             	sub    esp,0xc
c001584f:	56                   	push   esi
c0015850:	e8 13 a4 00 00       	call   c001fc68 <ThreadControlBlock::ThreadControlBlock()>
c0015855:	83 c4 10             	add    esp,0x10
c0015858:	83 c6 5f             	add    esi,0x5f
c001585b:	83 eb 01             	sub    ebx,0x1
c001585e:	eb e8                	jmp    c0015848 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015860:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015864:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001586b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001586f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015876:	83 ec 0c             	sub    esp,0xc
c0015879:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001587d:	e8 0c b8 ff ff       	call   c001108e <KeNewProcessEnv(Process*)>
c0015882:	83 c4 10             	add    esp,0x10
c0015885:	89 c2                	mov    edx,eax
c0015887:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001588b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015891:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015895:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001589e:	a1 80 36 02 c0       	mov    eax,ds:0xc0023680
c00158a3:	8d 50 01             	lea    edx,[eax+0x1]
c00158a6:	89 15 80 36 02 c0    	mov    DWORD PTR ds:0xc0023680,edx
c00158ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00158b0:	89 02                	mov    DWORD PTR [edx],eax
c00158b2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00158ba:	83 ec 0c             	sub    esp,0xc
c00158bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00158c1:	e8 0d 22 ff ff       	call   c0007ad3 <malloc>
c00158c6:	83 c4 10             	add    esp,0x10
c00158c9:	89 c3                	mov    ebx,eax
c00158cb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00158d0:	83 ec 08             	sub    esp,0x8
c00158d3:	50                   	push   eax
c00158d4:	53                   	push   ebx
c00158d5:	e8 78 47 ff ff       	call   c000a052 <VAS::VAS(bool)>
c00158da:	83 c4 10             	add    esp,0x10
c00158dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158e1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00158e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158eb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00158f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158f9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00158fd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015903:	e8 aa bd ff ff       	call   c00116b2 <KeInitSignals()>
c0015908:	89 c2                	mov    edx,eax
c001590a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001590e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015914:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015918:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001591e:	85 c0                	test   eax,eax
c0015920:	74 42                	je     c0015964 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015922:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015926:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001592c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015932:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015936:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001593c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015940:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015946:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001594c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015950:	05 0c 01 00 00       	add    eax,0x10c
c0015955:	83 ec 08             	sub    esp,0x8
c0015958:	52                   	push   edx
c0015959:	50                   	push   eax
c001595a:	e8 f1 ac fe ff       	call   c0000650 <strcpy>
c001595f:	83 c4 10             	add    esp,0x10
c0015962:	eb 64                	jmp    c00159c8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015964:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c001596c:	83 ec 0c             	sub    esp,0xc
c001596f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015973:	e8 5b 21 ff ff       	call   c0007ad3 <malloc>
c0015978:	83 c4 10             	add    esp,0x10
c001597b:	89 c3                	mov    ebx,eax
c001597d:	83 ec 08             	sub    esp,0x8
c0015980:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015984:	53                   	push   ebx
c0015985:	e8 e2 32 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c001598a:	83 c4 10             	add    esp,0x10
c001598d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015991:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015997:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001599b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00159a1:	83 ec 0c             	sub    esp,0xc
c00159a4:	50                   	push   eax
c00159a5:	e8 70 2b ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00159aa:	83 c4 10             	add    esp,0x10
c00159ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159b1:	05 0c 01 00 00       	add    eax,0x10c
c00159b6:	83 ec 08             	sub    esp,0x8
c00159b9:	68 81 24 02 c0       	push   0xc0022481
c00159be:	50                   	push   eax
c00159bf:	e8 8c ac fe ff       	call   c0000650 <strcpy>
c00159c4:	83 c4 10             	add    esp,0x10
c00159c7:	90                   	nop
c00159c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159cc:	83 c0 0c             	add    eax,0xc
c00159cf:	83 ec 08             	sub    esp,0x8
c00159d2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00159d6:	50                   	push   eax
c00159d7:	e8 74 ac fe ff       	call   c0000650 <strcpy>
c00159dc:	83 c4 10             	add    esp,0x10
c00159df:	83 ec 08             	sub    esp,0x8
c00159e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00159e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00159ea:	e8 c1 fb ff ff       	call   c00155b0 <Process::addArgs(char**)>
c00159ef:	83 c4 10             	add    esp,0x10
c00159f2:	90                   	nop
c00159f3:	83 c4 24             	add    esp,0x24
c00159f6:	5b                   	pop    ebx
c00159f7:	5e                   	pop    esi
c00159f8:	c3                   	ret    
c00159f9:	8d 76 00             	lea    esi,[esi+0x0]

c00159fc <taskStartupFunction>:
c00159fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a01:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015a04:	c3                   	ret    
c0015a05:	90                   	nop
c0015a06:	66 90                	xchg   ax,ax

c0015a08 <Semaphore::Semaphore(int)>:
c0015a08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015a10:	89 10                	mov    DWORD PTR [eax],edx
c0015a12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a16:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015a1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a2c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015a33:	90                   	nop
c0015a34:	c3                   	ret    
c0015a35:	90                   	nop
c0015a36:	66 90                	xchg   ax,ax

c0015a38 <Mutex::Mutex()>:
c0015a38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a3c:	6a 01                	push   0x1
c0015a3e:	50                   	push   eax
c0015a3f:	e8 c4 ff ff ff       	call   c0015a08 <Semaphore::Semaphore(int)>
c0015a44:	83 c4 08             	add    esp,0x8
c0015a47:	90                   	nop
c0015a48:	c3                   	ret    
c0015a49:	90                   	nop
c0015a4a:	66 90                	xchg   ax,ax

c0015a4c <Process::createThread(void (*)(void*), void*, int)>:
c0015a4c:	57                   	push   edi
c0015a4d:	31 c9                	xor    ecx,ecx
c0015a4f:	56                   	push   esi
c0015a50:	53                   	push   ebx
c0015a51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a55:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015a5c:	89 f2                	mov    edx,esi
c0015a5e:	66 90                	xchg   ax,ax
c0015a60:	0f b7 c2             	movzx  eax,dx
c0015a63:	80 e2 01             	and    dl,0x1
c0015a66:	74 14                	je     c0015a7c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015a68:	d1 f8                	sar    eax,1
c0015a6a:	83 c1 01             	add    ecx,0x1
c0015a6d:	83 f9 10             	cmp    ecx,0x10
c0015a70:	89 c2                	mov    edx,eax
c0015a72:	75 ec                	jne    c0015a60 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015a74:	31 db                	xor    ebx,ebx
c0015a76:	89 d8                	mov    eax,ebx
c0015a78:	5b                   	pop    ebx
c0015a79:	5e                   	pop    esi
c0015a7a:	5f                   	pop    edi
c0015a7b:	c3                   	ret    
c0015a7c:	b8 01 00 00 00       	mov    eax,0x1
c0015a81:	d3 e0                	shl    eax,cl
c0015a83:	09 c6                	or     esi,eax
c0015a85:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015a8c:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015a8f:	c1 e0 05             	shl    eax,0x5
c0015a92:	29 c8                	sub    eax,ecx
c0015a94:	01 d8                	add    eax,ebx
c0015a96:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015a9d:	75 0d                	jne    c0015aac <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015a9f:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0015aac:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015ab2:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015ab5:	83 ec 0c             	sub    esp,0xc
c0015ab8:	c1 e6 05             	shl    esi,0x5
c0015abb:	29 ce                	sub    esi,ecx
c0015abd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015ac0:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015ac3:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015ac9:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015acf:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015ad5:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015adc:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015ae2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015ae6:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015aec:	89 ca                	mov    edx,ecx
c0015aee:	f7 da                	neg    edx
c0015af0:	c1 e2 15             	shl    edx,0x15
c0015af3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015af9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015aff:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015b03:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015b0d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015b13:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b17:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015b1d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015b27:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015b31:	68 00 01 00 00       	push   0x100
c0015b36:	e8 98 1f ff ff       	call   c0007ad3 <malloc>
c0015b3b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015b3e:	58                   	pop    eax
c0015b3f:	5a                   	pop    edx
c0015b40:	53                   	push   ebx
c0015b41:	68 e4 96 02 c0       	push   0xc00296e4
c0015b46:	e8 b5 9e 00 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b4b:	83 c4 10             	add    esp,0x10
c0015b4e:	89 d8                	mov    eax,ebx
c0015b50:	5b                   	pop    ebx
c0015b51:	5e                   	pop    esi
c0015b52:	5f                   	pop    edi
c0015b53:	c3                   	ret    

c0015b54 <Process::createUserThread()>:
c0015b54:	83 ec 0c             	sub    esp,0xc
c0015b57:	68 80 00 00 00       	push   0x80
c0015b5c:	6a 00                	push   0x0
c0015b5e:	68 a8 54 01 c0       	push   0xc00154a8
c0015b63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b67:	50                   	push   eax
c0015b68:	e8 df fe ff ff       	call   c0015a4c <Process::createThread(void (*)(void*), void*, int)>
c0015b6d:	83 c4 1c             	add    esp,0x1c
c0015b70:	c3                   	ret    
c0015b71:	8d 76 00             	lea    esi,[esi+0x0]

c0015b74 <setupMultitasking(void (*)())>:
c0015b74:	56                   	push   esi
c0015b75:	53                   	push   ebx
c0015b76:	83 ec 04             	sub    esp,0x4
c0015b79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b7d:	eb 11                	jmp    c0015b90 <setupMultitasking(void (*)())+0x1c>
c0015b7f:	90                   	nop
c0015b80:	83 ec 0c             	sub    esp,0xc
c0015b83:	68 e4 96 02 c0       	push   0xc00296e4
c0015b88:	e8 b7 9d 00 00       	call   c001f944 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b8d:	83 c4 10             	add    esp,0x10
c0015b90:	83 ec 0c             	sub    esp,0xc
c0015b93:	68 e4 96 02 c0       	push   0xc00296e4
c0015b98:	e8 83 9d 00 00       	call   c001f920 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b9d:	83 c4 10             	add    esp,0x10
c0015ba0:	84 c0                	test   al,al
c0015ba2:	74 dc                	je     c0015b80 <setupMultitasking(void (*)())+0xc>
c0015ba4:	83 ec 0c             	sub    esp,0xc
c0015ba7:	68 24 07 00 00       	push   0x724
c0015bac:	e8 22 1f ff ff       	call   c0007ad3 <malloc>
c0015bb1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015bb8:	6a 00                	push   0x0
c0015bba:	68 85 24 02 c0       	push   0xc0022485
c0015bbf:	6a 01                	push   0x1
c0015bc1:	50                   	push   eax
c0015bc2:	89 c3                	mov    ebx,eax
c0015bc4:	e8 5f fc ff ff       	call   c0015828 <Process::Process(bool, char const*, Process*, char**)>
c0015bc9:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015bcf:	83 c4 14             	add    esp,0x14
c0015bd2:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015bd8:	50                   	push   eax
c0015bd9:	e8 91 2b ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015bde:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015be5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015bef:	83 c8 01             	or     eax,0x1
c0015bf2:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015bf9:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015bff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015c02:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015c0c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015c12:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015c1c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015c22:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015c2c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015c36:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015c3c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015c42:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015c4c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015c56:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015c5d:	e8 71 1e ff ff       	call   c0007ad3 <malloc>
c0015c62:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015c68:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015c6e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015c74:	5a                   	pop    edx
c0015c75:	59                   	pop    ecx
c0015c76:	68 81 24 02 c0       	push   0xc0022481
c0015c7b:	50                   	push   eax
c0015c7c:	e8 cf a9 fe ff       	call   c0000650 <strcpy>
c0015c81:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015c88:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015c8c:	83 c4 14             	add    esp,0x14
c0015c8f:	5b                   	pop    ebx
c0015c90:	5e                   	pop    esi
c0015c91:	e9 d3 a5 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015c96:	66 90                	xchg   ax,ax

c0015c98 <schedule()>:
c0015c98:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015c9e:	85 d2                	test   edx,edx
c0015ca0:	74 0e                	je     c0015cb0 <schedule()+0x18>
c0015ca2:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015cac:	c3                   	ret    
c0015cad:	8d 76 00             	lea    esi,[esi+0x0]
c0015cb0:	53                   	push   ebx
c0015cb1:	83 ec 14             	sub    esp,0x14
c0015cb4:	68 e4 96 02 c0       	push   0xc00296e4
c0015cb9:	e8 62 9c 00 00       	call   c001f920 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015cbe:	83 c4 10             	add    esp,0x10
c0015cc1:	84 c0                	test   al,al
c0015cc3:	75 3f                	jne    c0015d04 <schedule()+0x6c>
c0015cc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015ccd:	83 fa 01             	cmp    edx,0x1
c0015cd0:	74 3a                	je     c0015d0c <schedule()+0x74>
c0015cd2:	66 90                	xchg   ax,ax
c0015cd4:	83 ec 0c             	sub    esp,0xc
c0015cd7:	68 e4 96 02 c0       	push   0xc00296e4
c0015cdc:	e8 5b 9c 00 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ce1:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015ce8:	89 c3                	mov    ebx,eax
c0015cea:	e8 55 9c 00 00       	call   c001f944 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015cef:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cf9:	e8 02 f8 ff ff       	call   c0015500 <switchToThread(ThreadControlBlock*)>
c0015cfe:	83 c4 10             	add    esp,0x10
c0015d01:	8d 76 00             	lea    esi,[esi+0x0]
c0015d04:	83 c4 08             	add    esp,0x8
c0015d07:	5b                   	pop    ebx
c0015d08:	c3                   	ret    
c0015d09:	8d 76 00             	lea    esi,[esi+0x0]
c0015d0c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015d13:	83 ec 08             	sub    esp,0x8
c0015d16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d1b:	50                   	push   eax
c0015d1c:	68 e4 96 02 c0       	push   0xc00296e4
c0015d21:	e8 da 9c 00 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d26:	83 c4 10             	add    esp,0x10
c0015d29:	eb a9                	jmp    c0015cd4 <schedule()+0x3c>
c0015d2b:	90                   	nop

c0015d2c <Semaphore::tryAcquire()>:
c0015d2c:	53                   	push   ebx
c0015d2d:	83 ec 08             	sub    esp,0x8
c0015d30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015d34:	fa                   	cli    
c0015d35:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015d3b:	8d 42 01             	lea    eax,[edx+0x1]
c0015d3e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d43:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015d48:	8d 58 01             	lea    ebx,[eax+0x1]
c0015d4b:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015d51:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015d54:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015d56:	7c 2c                	jl     c0015d84 <Semaphore::tryAcquire()+0x58>
c0015d58:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015d5d:	85 c0                	test   eax,eax
c0015d5f:	75 0b                	jne    c0015d6c <Semaphore::tryAcquire()+0x40>
c0015d61:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015d66:	85 c0                	test   eax,eax
c0015d68:	75 5a                	jne    c0015dc4 <Semaphore::tryAcquire()+0x98>
c0015d6a:	66 90                	xchg   ax,ax
c0015d6c:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d72:	31 c0                	xor    eax,eax
c0015d74:	85 d2                	test   edx,edx
c0015d76:	75 04                	jne    c0015d7c <Semaphore::tryAcquire()+0x50>
c0015d78:	fb                   	sti    
c0015d79:	8d 76 00             	lea    esi,[esi+0x0]
c0015d7c:	83 c4 08             	add    esp,0x8
c0015d7f:	5b                   	pop    ebx
c0015d80:	c3                   	ret    
c0015d81:	8d 76 00             	lea    esi,[esi+0x0]
c0015d84:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015d89:	83 c3 01             	add    ebx,0x1
c0015d8c:	85 c0                	test   eax,eax
c0015d8e:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015d91:	75 21                	jne    c0015db4 <Semaphore::tryAcquire()+0x88>
c0015d93:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015d99:	85 c9                	test   ecx,ecx
c0015d9b:	74 17                	je     c0015db4 <Semaphore::tryAcquire()+0x88>
c0015d9d:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015da7:	e8 ec fe ff ff       	call   c0015c98 <schedule()>
c0015dac:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015db1:	8d 50 ff             	lea    edx,[eax-0x1]
c0015db4:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015dba:	85 d2                	test   edx,edx
c0015dbc:	b0 01                	mov    al,0x1
c0015dbe:	75 bc                	jne    c0015d7c <Semaphore::tryAcquire()+0x50>
c0015dc0:	eb b6                	jmp    c0015d78 <Semaphore::tryAcquire()+0x4c>
c0015dc2:	66 90                	xchg   ax,ax
c0015dc4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015dce:	e8 c5 fe ff ff       	call   c0015c98 <schedule()>
c0015dd3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015dd8:	8d 50 ff             	lea    edx,[eax-0x1]
c0015ddb:	31 c0                	xor    eax,eax
c0015ddd:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015de3:	85 d2                	test   edx,edx
c0015de5:	75 95                	jne    c0015d7c <Semaphore::tryAcquire()+0x50>
c0015de7:	eb 8f                	jmp    c0015d78 <Semaphore::tryAcquire()+0x4c>
c0015de9:	90                   	nop
c0015dea:	66 90                	xchg   ax,ax

c0015dec <Semaphore::assertLocked(char const*)>:
c0015dec:	83 ec 0c             	sub    esp,0xc
c0015def:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015df3:	fa                   	cli    
c0015df4:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015dfa:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015dff:	83 c1 01             	add    ecx,0x1
c0015e02:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015e08:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e0b:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015e11:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015e13:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015e16:	7c 28                	jl     c0015e40 <Semaphore::assertLocked(char const*)+0x54>
c0015e18:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015e1d:	85 c0                	test   eax,eax
c0015e1f:	75 0b                	jne    c0015e2c <Semaphore::assertLocked(char const*)+0x40>
c0015e21:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015e26:	85 c0                	test   eax,eax
c0015e28:	75 32                	jne    c0015e5c <Semaphore::assertLocked(char const*)+0x70>
c0015e2a:	66 90                	xchg   ax,ax
c0015e2c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e31:	83 e8 01             	sub    eax,0x1
c0015e34:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e39:	75 01                	jne    c0015e3c <Semaphore::assertLocked(char const*)+0x50>
c0015e3b:	fb                   	sti    
c0015e3c:	83 c4 0c             	add    esp,0xc
c0015e3f:	c3                   	ret    
c0015e40:	83 ec 0c             	sub    esp,0xc
c0015e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e47:	52                   	push   edx
c0015e48:	e8 4c b4 ff ff       	call   c0011299 <KePanic(char const*)>
c0015e4d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e52:	83 c4 10             	add    esp,0x10
c0015e55:	83 e8 01             	sub    eax,0x1
c0015e58:	eb be                	jmp    c0015e18 <Semaphore::assertLocked(char const*)+0x2c>
c0015e5a:	66 90                	xchg   ax,ax
c0015e5c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e66:	e8 2d fe ff ff       	call   c0015c98 <schedule()>
c0015e6b:	eb bf                	jmp    c0015e2c <Semaphore::assertLocked(char const*)+0x40>
c0015e6d:	8d 76 00             	lea    esi,[esi+0x0]

c0015e70 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015e70:	83 ec 0c             	sub    esp,0xc
c0015e73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e7c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015e7f:	e8 14 fe ff ff       	call   c0015c98 <schedule()>
c0015e84:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e89:	83 e8 01             	sub    eax,0x1
c0015e8c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e91:	75 01                	jne    c0015e94 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015e93:	fb                   	sti    
c0015e94:	83 c4 0c             	add    esp,0xc
c0015e97:	c3                   	ret    

c0015e98 <blockTask(TaskState)>:
c0015e98:	83 ec 0c             	sub    esp,0xc
c0015e9b:	fa                   	cli    
c0015e9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ea1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ea5:	83 c0 01             	add    eax,0x1
c0015ea8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ead:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015eb5:	e8 de fd ff ff       	call   c0015c98 <schedule()>
c0015eba:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ebf:	83 e8 01             	sub    eax,0x1
c0015ec2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ec7:	75 03                	jne    c0015ecc <blockTask(TaskState)+0x34>
c0015ec9:	fb                   	sti    
c0015eca:	66 90                	xchg   ax,ax
c0015ecc:	83 c4 0c             	add    esp,0xc
c0015ecf:	c3                   	ret    

c0015ed0 <waitTask(int, int*, int)>:
c0015ed0:	83 ec 18             	sub    esp,0x18
c0015ed3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ed8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015edc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015edf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ee3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ee8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015eeb:	6a 07                	push   0x7
c0015eed:	e8 a6 ff ff ff       	call   c0015e98 <blockTask(TaskState)>
c0015ef2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ef7:	83 c4 10             	add    esp,0x10
c0015efa:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015efd:	85 d2                	test   edx,edx
c0015eff:	74 0b                	je     c0015f0c <waitTask(int, int*, int)+0x3c>
c0015f01:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015f04:	89 02                	mov    DWORD PTR [edx],eax
c0015f06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f0b:	90                   	nop
c0015f0c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015f0f:	83 c4 0c             	add    esp,0xc
c0015f12:	c3                   	ret    
c0015f13:	90                   	nop

c0015f14 <milliTenthSleepUntil(unsigned int)>:
c0015f14:	83 ec 0c             	sub    esp,0xc
c0015f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f1b:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015f21:	76 05                	jbe    c0015f28 <milliTenthSleepUntil(unsigned int)+0x14>
c0015f23:	90                   	nop
c0015f24:	83 c4 0c             	add    esp,0xc
c0015f27:	c3                   	ret    
c0015f28:	fa                   	cli    
c0015f29:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015f2f:	83 ec 08             	sub    esp,0x8
c0015f32:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015f38:	83 c2 01             	add    edx,0x1
c0015f3b:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015f41:	83 c1 01             	add    ecx,0x1
c0015f44:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015f4a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015f50:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015f53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f58:	50                   	push   eax
c0015f59:	68 d8 96 02 c0       	push   0xc00296d8
c0015f5e:	e8 9d 9a 00 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f63:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015f6a:	e8 29 ff ff ff       	call   c0015e98 <blockTask(TaskState)>
c0015f6f:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f74:	83 c4 10             	add    esp,0x10
c0015f77:	83 e8 01             	sub    eax,0x1
c0015f7a:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015f7f:	85 c0                	test   eax,eax
c0015f81:	75 09                	jne    c0015f8c <milliTenthSleepUntil(unsigned int)+0x78>
c0015f83:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015f88:	85 c0                	test   eax,eax
c0015f8a:	75 14                	jne    c0015fa0 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015f8c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f91:	83 e8 01             	sub    eax,0x1
c0015f94:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f99:	75 89                	jne    c0015f24 <milliTenthSleepUntil(unsigned int)+0x10>
c0015f9b:	fb                   	sti    
c0015f9c:	83 c4 0c             	add    esp,0xc
c0015f9f:	c3                   	ret    
c0015fa0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015faa:	e8 e9 fc ff ff       	call   c0015c98 <schedule()>
c0015faf:	eb db                	jmp    c0015f8c <milliTenthSleepUntil(unsigned int)+0x78>
c0015fb1:	8d 76 00             	lea    esi,[esi+0x0]

c0015fb4 <milliTenthSleep(unsigned int)>:
c0015fb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015fb8:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015fbd:	01 c2                	add    edx,eax
c0015fbf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015fc3:	e9 4c ff ff ff       	jmp    c0015f14 <milliTenthSleepUntil(unsigned int)>

c0015fc8 <sleep(unsigned int)>:
c0015fc8:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015fd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fd4:	eb de                	jmp    c0015fb4 <milliTenthSleep(unsigned int)>
c0015fd6:	66 90                	xchg   ax,ax

c0015fd8 <Semaphore::acquire()>:
c0015fd8:	83 ec 0c             	sub    esp,0xc
c0015fdb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015fdf:	fa                   	cli    
c0015fe0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fe5:	83 c0 01             	add    eax,0x1
c0015fe8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015fed:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015ff2:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ff5:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015ffb:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015ffe:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016000:	7d 2e                	jge    c0016030 <Semaphore::acquire()+0x58>
c0016002:	83 c1 01             	add    ecx,0x1
c0016005:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016008:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001600d:	85 c0                	test   eax,eax
c001600f:	75 0b                	jne    c001601c <Semaphore::acquire()+0x44>
c0016011:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016016:	85 c0                	test   eax,eax
c0016018:	75 66                	jne    c0016080 <Semaphore::acquire()+0xa8>
c001601a:	66 90                	xchg   ax,ax
c001601c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016021:	83 e8 01             	sub    eax,0x1
c0016024:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016029:	75 01                	jne    c001602c <Semaphore::acquire()+0x54>
c001602b:	fb                   	sti    
c001602c:	83 c4 0c             	add    esp,0xc
c001602f:	c3                   	ret    
c0016030:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016035:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001603c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001603f:	85 c9                	test   ecx,ecx
c0016041:	74 51                	je     c0016094 <Semaphore::acquire()+0xbc>
c0016043:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0016046:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001604c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001604f:	90                   	nop
c0016050:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016055:	83 ec 0c             	sub    esp,0xc
c0016058:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001605b:	68 04 25 02 c0       	push   0xc0022504
c0016060:	e8 a5 48 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016065:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001606c:	e8 27 fe ff ff       	call   c0015e98 <blockTask(TaskState)>
c0016071:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016076:	83 c4 10             	add    esp,0x10
c0016079:	83 e8 01             	sub    eax,0x1
c001607c:	eb 8a                	jmp    c0016008 <Semaphore::acquire()+0x30>
c001607e:	66 90                	xchg   ax,ax
c0016080:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001608a:	e8 09 fc ff ff       	call   c0015c98 <schedule()>
c001608f:	eb 8b                	jmp    c001601c <Semaphore::acquire()+0x44>
c0016091:	8d 76 00             	lea    esi,[esi+0x0]
c0016094:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016099:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001609c:	eb b2                	jmp    c0016050 <Semaphore::acquire()+0x78>
c001609e:	66 90                	xchg   ax,ax

c00160a0 <taskReturned>:
c00160a0:	83 ec 18             	sub    esp,0x18
c00160a3:	68 24 25 02 c0       	push   0xc0022524
c00160a8:	e8 ec b1 ff ff       	call   c0011299 <KePanic(char const*)>
c00160ad:	83 c4 10             	add    esp,0x10
c00160b0:	83 ec 0c             	sub    esp,0xc
c00160b3:	6a 02                	push   0x2
c00160b5:	e8 de fd ff ff       	call   c0015e98 <blockTask(TaskState)>
c00160ba:	fa                   	cli    
c00160bb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160c0:	83 c0 01             	add    eax,0x1
c00160c3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160c8:	e8 cb fb ff ff       	call   c0015c98 <schedule()>
c00160cd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160d2:	83 c4 10             	add    esp,0x10
c00160d5:	83 e8 01             	sub    eax,0x1
c00160d8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160dd:	85 c0                	test   eax,eax
c00160df:	75 cf                	jne    c00160b0 <taskReturned+0x10>
c00160e1:	fb                   	sti    
c00160e2:	eb cc                	jmp    c00160b0 <taskReturned+0x10>

c00160e4 <Thr::processFromPID(int)>:
c00160e4:	57                   	push   edi
c00160e5:	56                   	push   esi
c00160e6:	53                   	push   ebx
c00160e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160eb:	fa                   	cli    
c00160ec:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c00160f2:	83 ec 0c             	sub    esp,0xc
c00160f5:	68 e4 96 02 c0       	push   0xc00296e4
c00160fa:	83 c1 01             	add    ecx,0x1
c00160fd:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0016103:	e8 34 98 00 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016108:	83 c4 10             	add    esp,0x10
c001610b:	89 c7                	mov    edi,eax
c001610d:	eb 15                	jmp    c0016124 <Thr::processFromPID(int)+0x40>
c001610f:	90                   	nop
c0016110:	83 ec 0c             	sub    esp,0xc
c0016113:	68 e4 96 02 c0       	push   0xc00296e4
c0016118:	e8 1f 98 00 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001611d:	83 c4 10             	add    esp,0x10
c0016120:	39 f8                	cmp    eax,edi
c0016122:	74 50                	je     c0016174 <Thr::processFromPID(int)+0x90>
c0016124:	83 ec 0c             	sub    esp,0xc
c0016127:	68 e4 96 02 c0       	push   0xc00296e4
c001612c:	e8 0b 98 00 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016131:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016138:	89 c3                	mov    ebx,eax
c001613a:	e8 05 98 00 00       	call   c001f944 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001613f:	58                   	pop    eax
c0016140:	5a                   	pop    edx
c0016141:	53                   	push   ebx
c0016142:	68 e4 96 02 c0       	push   0xc00296e4
c0016147:	e8 b4 98 00 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001614c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001614f:	83 c4 10             	add    esp,0x10
c0016152:	39 30                	cmp    DWORD PTR [eax],esi
c0016154:	75 ba                	jne    c0016110 <Thr::processFromPID(int)+0x2c>
c0016156:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001615b:	83 e8 01             	sub    eax,0x1
c001615e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016163:	74 0b                	je     c0016170 <Thr::processFromPID(int)+0x8c>
c0016165:	8d 76 00             	lea    esi,[esi+0x0]
c0016168:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001616b:	90                   	nop
c001616c:	5b                   	pop    ebx
c001616d:	5e                   	pop    esi
c001616e:	5f                   	pop    edi
c001616f:	c3                   	ret    
c0016170:	fb                   	sti    
c0016171:	eb f5                	jmp    c0016168 <Thr::processFromPID(int)+0x84>
c0016173:	90                   	nop
c0016174:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016179:	8d 50 ff             	lea    edx,[eax-0x1]
c001617c:	31 c0                	xor    eax,eax
c001617e:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016184:	85 d2                	test   edx,edx
c0016186:	75 e4                	jne    c001616c <Thr::processFromPID(int)+0x88>
c0016188:	fb                   	sti    
c0016189:	5b                   	pop    ebx
c001618a:	5e                   	pop    esi
c001618b:	5f                   	pop    edi
c001618c:	c3                   	ret    
c001618d:	8d 76 00             	lea    esi,[esi+0x0]

c0016190 <unblockTask(ThreadControlBlock*)>:
c0016190:	53                   	push   ebx
c0016191:	83 ec 08             	sub    esp,0x8
c0016194:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016198:	fa                   	cli    
c0016199:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001619e:	83 c0 01             	add    eax,0x1
c00161a1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00161a6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00161a9:	85 c0                	test   eax,eax
c00161ab:	74 67                	je     c0016214 <unblockTask(ThreadControlBlock*)+0x84>
c00161ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00161b0:	83 f8 01             	cmp    eax,0x1
c00161b3:	74 37                	je     c00161ec <unblockTask(ThreadControlBlock*)+0x5c>
c00161b5:	83 ec 0c             	sub    esp,0xc
c00161b8:	68 e4 96 02 c0       	push   0xc00296e4
c00161bd:	e8 7a 97 00 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161c2:	83 c4 10             	add    esp,0x10
c00161c5:	85 c0                	test   eax,eax
c00161c7:	75 1b                	jne    c00161e4 <unblockTask(ThreadControlBlock*)+0x54>
c00161c9:	eb 5d                	jmp    c0016228 <unblockTask(ThreadControlBlock*)+0x98>
c00161cb:	90                   	nop
c00161cc:	83 ec 08             	sub    esp,0x8
c00161cf:	50                   	push   eax
c00161d0:	68 e4 96 02 c0       	push   0xc00296e4
c00161d5:	e8 82 9a 00 00       	call   c001fc5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00161da:	83 c4 10             	add    esp,0x10
c00161dd:	85 c0                	test   eax,eax
c00161df:	74 47                	je     c0016228 <unblockTask(ThreadControlBlock*)+0x98>
c00161e1:	8d 76 00             	lea    esi,[esi+0x0]
c00161e4:	39 c3                	cmp    ebx,eax
c00161e6:	75 e4                	jne    c00161cc <unblockTask(ThreadControlBlock*)+0x3c>
c00161e8:	eb 12                	jmp    c00161fc <unblockTask(ThreadControlBlock*)+0x6c>
c00161ea:	66 90                	xchg   ax,ax
c00161ec:	83 ec 0c             	sub    esp,0xc
c00161ef:	68 a3 24 02 c0       	push   0xc00224a3
c00161f4:	e8 11 47 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00161f9:	83 c4 10             	add    esp,0x10
c00161fc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016201:	83 e8 01             	sub    eax,0x1
c0016204:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016209:	75 01                	jne    c001620c <unblockTask(ThreadControlBlock*)+0x7c>
c001620b:	fb                   	sti    
c001620c:	83 c4 08             	add    esp,0x8
c001620f:	5b                   	pop    ebx
c0016210:	c3                   	ret    
c0016211:	8d 76 00             	lea    esi,[esi+0x0]
c0016214:	83 ec 0c             	sub    esp,0xc
c0016217:	68 8c 24 02 c0       	push   0xc002248c
c001621c:	e8 e9 46 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016221:	83 c4 10             	add    esp,0x10
c0016224:	eb d6                	jmp    c00161fc <unblockTask(ThreadControlBlock*)+0x6c>
c0016226:	66 90                	xchg   ax,ax
c0016228:	83 ec 08             	sub    esp,0x8
c001622b:	53                   	push   ebx
c001622c:	68 e4 96 02 c0       	push   0xc00296e4
c0016231:	e8 ca 97 00 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016236:	83 c4 10             	add    esp,0x10
c0016239:	eb c1                	jmp    c00161fc <unblockTask(ThreadControlBlock*)+0x6c>
c001623b:	90                   	nop

c001623c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001623c:	55                   	push   ebp
c001623d:	57                   	push   edi
c001623e:	56                   	push   esi
c001623f:	53                   	push   ebx
c0016240:	83 ec 1c             	sub    esp,0x1c
c0016243:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016247:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001624a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016250:	85 ed                	test   ebp,ebp
c0016252:	7e 28                	jle    c001627c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016254:	31 f6                	xor    esi,esi
c0016256:	66 90                	xchg   ax,ax
c0016258:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001625f:	83 ec 0c             	sub    esp,0xc
c0016262:	83 c6 01             	add    esi,0x1
c0016265:	57                   	push   edi
c0016266:	e8 78 18 ff ff       	call   c0007ae3 <free>
c001626b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001626e:	83 c4 10             	add    esp,0x10
c0016271:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016277:	7f df                	jg     c0016258 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016279:	8d 76 00             	lea    esi,[esi+0x0]
c001627c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016286:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001628b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001628e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016291:	d3 c0                	rol    eax,cl
c0016293:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001629a:	21 c8                	and    eax,ecx
c001629c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00162a3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162a6:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00162ae:	89 f7                	mov    edi,esi
c00162b0:	0f 85 72 01 00 00    	jne    c0016428 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00162b6:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00162bc:	85 ed                	test   ebp,ebp
c00162be:	74 1c                	je     c00162dc <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00162c0:	83 ec 0c             	sub    esp,0xc
c00162c3:	55                   	push   ebp
c00162c4:	e8 e1 ac ff ff       	call   c0010faa <EnvVarContainer::~EnvVarContainer()>
c00162c9:	59                   	pop    ecx
c00162ca:	5e                   	pop    esi
c00162cb:	6a 0c                	push   0xc
c00162cd:	55                   	push   ebp
c00162ce:	e8 39 45 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00162d3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162d6:	83 c4 10             	add    esp,0x10
c00162d9:	89 f7                	mov    edi,esi
c00162db:	90                   	nop
c00162dc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00162e2:	85 c0                	test   eax,eax
c00162e4:	0f 84 b2 00 00 00    	je     c001639c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00162ea:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00162ed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00162f1:	31 c9                	xor    ecx,ecx
c00162f3:	eb 17                	jmp    c001630c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00162f5:	8d 76 00             	lea    esi,[esi+0x0]
c00162f8:	83 c1 01             	add    ecx,0x1
c00162fb:	83 f9 10             	cmp    ecx,0x10
c00162fe:	0f 84 98 00 00 00    	je     c001639c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016304:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001630a:	66 90                	xchg   ax,ax
c001630c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016313:	d3 fa                	sar    edx,cl
c0016315:	80 e2 01             	and    dl,0x1
c0016318:	74 de                	je     c00162f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001631a:	8d 14 49             	lea    edx,[ecx+ecx*2]
c001631d:	c1 e2 05             	shl    edx,0x5
c0016320:	29 ca                	sub    edx,ecx
c0016322:	01 d0                	add    eax,edx
c0016324:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001632a:	83 fd 07             	cmp    ebp,0x7
c001632d:	75 c9                	jne    c00162f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001632f:	05 40 02 00 00       	add    eax,0x240
c0016334:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016337:	83 fd ff             	cmp    ebp,0xffffffff
c001633a:	0f 8c f0 00 00 00    	jl     c0016430 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016340:	0f 84 ae 01 00 00    	je     c00164f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016346:	85 ed                	test   ebp,ebp
c0016348:	0f 84 92 01 00 00    	je     c00164e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001634e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016350:	75 a6                	jne    c00162f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016352:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016356:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001635c:	01 d0                	add    eax,edx
c001635e:	66 90                	xchg   ax,ax
c0016360:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016364:	83 ec 0c             	sub    esp,0xc
c0016367:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001636d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016370:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016376:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001637d:	50                   	push   eax
c001637e:	e8 0d fe ff ff       	call   c0016190 <unblockTask(ThreadControlBlock*)>
c0016383:	83 c4 10             	add    esp,0x10
c0016386:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016389:	89 f7                	mov    edi,esi
c001638b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001638f:	83 c1 01             	add    ecx,0x1
c0016392:	83 f9 10             	cmp    ecx,0x10
c0016395:	0f 85 69 ff ff ff    	jne    c0016304 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001639b:	90                   	nop
c001639c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00163a2:	85 c0                	test   eax,eax
c00163a4:	74 62                	je     c0016408 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00163a6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00163ac:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00163b2:	74 54                	je     c0016408 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00163b4:	83 ec 0c             	sub    esp,0xc
c00163b7:	68 e4 96 02 c0       	push   0xc00296e4
c00163bc:	e8 7b 95 00 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163c1:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00163c8:	89 c7                	mov    edi,eax
c00163ca:	e8 51 95 00 00       	call   c001f920 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163cf:	83 c4 10             	add    esp,0x10
c00163d2:	84 c0                	test   al,al
c00163d4:	0f 84 ce 00 00 00    	je     c00164a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00163da:	66 90                	xchg   ax,ax
c00163dc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163df:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00163e5:	85 d2                	test   edx,edx
c00163e7:	74 0f                	je     c00163f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00163e9:	8b 02                	mov    eax,DWORD PTR [edx]
c00163eb:	83 ec 0c             	sub    esp,0xc
c00163ee:	52                   	push   edx
c00163ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163f2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163f5:	83 c4 10             	add    esp,0x10
c00163f8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016402:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016405:	8d 76 00             	lea    esi,[esi+0x0]
c0016408:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001640e:	85 db                	test   ebx,ebx
c0016410:	74 16                	je     c0016428 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016412:	83 ec 0c             	sub    esp,0xc
c0016415:	53                   	push   ebx
c0016416:	e8 75 37 ff ff       	call   c0009b90 <VAS::~VAS()>
c001641b:	58                   	pop    eax
c001641c:	5a                   	pop    edx
c001641d:	6a 14                	push   0x14
c001641f:	53                   	push   ebx
c0016420:	e8 e7 43 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016425:	83 c4 10             	add    esp,0x10
c0016428:	83 c4 1c             	add    esp,0x1c
c001642b:	5b                   	pop    ebx
c001642c:	5e                   	pop    esi
c001642d:	5f                   	pop    edi
c001642e:	5d                   	pop    ebp
c001642f:	c3                   	ret    
c0016430:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016434:	83 ec 0c             	sub    esp,0xc
c0016437:	68 58 25 02 c0       	push   0xc0022558
c001643c:	e8 58 ae ff ff       	call   c0011299 <KePanic(char const*)>
c0016441:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016444:	83 c4 10             	add    esp,0x10
c0016447:	89 f7                	mov    edi,esi
c0016449:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001644d:	e9 a6 fe ff ff       	jmp    c00162f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016452:	66 90                	xchg   ax,ax
c0016454:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001645a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016460:	75 1e                	jne    c0016480 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016462:	83 ec 0c             	sub    esp,0xc
c0016465:	68 c0 25 02 c0       	push   0xc00225c0
c001646a:	e8 9b 44 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001646f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016476:	e8 1d fa ff ff       	call   c0015e98 <blockTask(TaskState)>
c001647b:	83 c4 10             	add    esp,0x10
c001647e:	66 90                	xchg   ax,ax
c0016480:	83 ec 08             	sub    esp,0x8
c0016483:	56                   	push   esi
c0016484:	68 e4 96 02 c0       	push   0xc00296e4
c0016489:	e8 72 95 00 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001648e:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016495:	e8 a2 94 00 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001649a:	83 c4 10             	add    esp,0x10
c001649d:	39 f8                	cmp    eax,edi
c001649f:	0f 84 37 ff ff ff    	je     c00163dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00164a5:	8d 76 00             	lea    esi,[esi+0x0]
c00164a8:	83 ec 0c             	sub    esp,0xc
c00164ab:	68 e4 96 02 c0       	push   0xc00296e4
c00164b0:	e8 87 94 00 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164b5:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00164bc:	89 c6                	mov    esi,eax
c00164be:	e8 81 94 00 00       	call   c001f944 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164c3:	83 c4 10             	add    esp,0x10
c00164c6:	39 f3                	cmp    ebx,esi
c00164c8:	74 b6                	je     c0016480 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00164ca:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00164cd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164d0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00164d6:	75 a8                	jne    c0016480 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00164d8:	e9 77 ff ff ff       	jmp    c0016454 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00164dd:	8d 76 00             	lea    esi,[esi+0x0]
c00164e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00164e4:	83 ec 0c             	sub    esp,0xc
c00164e7:	68 8c 25 02 c0       	push   0xc002258c
c00164ec:	e9 4b ff ff ff       	jmp    c001643c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00164f1:	8d 76 00             	lea    esi,[esi+0x0]
c00164f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00164f8:	8b 36                	mov    esi,DWORD PTR [esi]
c00164fa:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00164fd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016500:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016506:	01 d7                	add    edi,edx
c0016508:	89 f8                	mov    eax,edi
c001650a:	e9 51 fe ff ff       	jmp    c0016360 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001650f:	90                   	nop

c0016510 <cleanerTaskFunction(void*)>:
c0016510:	53                   	push   ebx
c0016511:	83 ec 08             	sub    esp,0x8
c0016514:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016519:	83 e8 01             	sub    eax,0x1
c001651c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016521:	75 01                	jne    c0016524 <cleanerTaskFunction(void*)+0x14>
c0016523:	fb                   	sti    
c0016524:	fa                   	cli    
c0016525:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001652a:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016531:	8d 50 01             	lea    edx,[eax+0x1]
c0016534:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001653a:	0f 84 c4 00 00 00    	je     c0016604 <cleanerTaskFunction(void*)+0xf4>
c0016540:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016545:	85 c0                	test   eax,eax
c0016547:	75 03                	jne    c001654c <cleanerTaskFunction(void*)+0x3c>
c0016549:	fb                   	sti    
c001654a:	66 90                	xchg   ax,ax
c001654c:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c0016553:	fa                   	cli    
c0016554:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001655a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016560:	83 c2 01             	add    edx,0x1
c0016563:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016569:	83 c1 01             	add    ecx,0x1
c001656c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016572:	fa                   	cli    
c0016573:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c0016579:	83 c3 01             	add    ebx,0x1
c001657c:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c0016582:	eb 28                	jmp    c00165ac <cleanerTaskFunction(void*)+0x9c>
c0016584:	83 ec 0c             	sub    esp,0xc
c0016587:	68 cc 96 02 c0       	push   0xc00296cc
c001658c:	e8 ab 93 00 00       	call   c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016591:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c0016598:	89 c3                	mov    ebx,eax
c001659a:	e8 a5 93 00 00       	call   c001f944 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001659f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165a2:	e8 95 fc ff ff       	call   c001623c <cleanupTerminatedTask(ThreadControlBlock*)>
c00165a7:	83 c4 10             	add    esp,0x10
c00165aa:	66 90                	xchg   ax,ax
c00165ac:	83 ec 0c             	sub    esp,0xc
c00165af:	68 cc 96 02 c0       	push   0xc00296cc
c00165b4:	e8 67 93 00 00       	call   c001f920 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165b9:	83 c4 10             	add    esp,0x10
c00165bc:	84 c0                	test   al,al
c00165be:	74 c4                	je     c0016584 <cleanerTaskFunction(void*)+0x74>
c00165c0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165c5:	83 e8 01             	sub    eax,0x1
c00165c8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165cd:	75 01                	jne    c00165d0 <cleanerTaskFunction(void*)+0xc0>
c00165cf:	fb                   	sti    
c00165d0:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165d5:	83 e8 01             	sub    eax,0x1
c00165d8:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00165dd:	0f 85 31 ff ff ff    	jne    c0016514 <cleanerTaskFunction(void*)+0x4>
c00165e3:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00165e8:	85 c0                	test   eax,eax
c00165ea:	0f 84 24 ff ff ff    	je     c0016514 <cleanerTaskFunction(void*)+0x4>
c00165f0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00165fa:	e8 99 f6 ff ff       	call   c0015c98 <schedule()>
c00165ff:	e9 10 ff ff ff       	jmp    c0016514 <cleanerTaskFunction(void*)+0x4>
c0016604:	83 ec 0c             	sub    esp,0xc
c0016607:	6a 02                	push   0x2
c0016609:	e8 62 f8 ff ff       	call   c0015e70 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001660e:	83 c4 10             	add    esp,0x10
c0016611:	e9 36 ff ff ff       	jmp    c001654c <cleanerTaskFunction(void*)+0x3c>
c0016616:	66 90                	xchg   ax,ax

c0016618 <terminateTask(int)>:
c0016618:	83 ec 14             	sub    esp,0x14
c001661b:	fa                   	cli    
c001661c:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016622:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016628:	83 c2 01             	add    edx,0x1
c001662b:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016631:	83 c1 01             	add    ecx,0x1
c0016634:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001663a:	fa                   	cli    
c001663b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016640:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016644:	83 c0 01             	add    eax,0x1
c0016647:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001664c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016651:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016654:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016659:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001665c:	50                   	push   eax
c001665d:	68 cc 96 02 c0       	push   0xc00296cc
c0016662:	e8 99 93 00 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016667:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001666c:	83 c4 10             	add    esp,0x10
c001666f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016676:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c001667b:	85 c0                	test   eax,eax
c001667d:	74 65                	je     c00166e4 <terminateTask(int)+0xcc>
c001667f:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c0016686:	83 ec 0c             	sub    esp,0xc
c0016689:	50                   	push   eax
c001668a:	e8 01 fb ff ff       	call   c0016190 <unblockTask(ThreadControlBlock*)>
c001668f:	83 c4 10             	add    esp,0x10
c0016692:	66 90                	xchg   ax,ax
c0016694:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016699:	83 e8 01             	sub    eax,0x1
c001669c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166a1:	75 01                	jne    c00166a4 <terminateTask(int)+0x8c>
c00166a3:	fb                   	sti    
c00166a4:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00166a9:	83 e8 01             	sub    eax,0x1
c00166ac:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00166b1:	75 09                	jne    c00166bc <terminateTask(int)+0xa4>
c00166b3:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c00166ba:	75 3c                	jne    c00166f8 <terminateTask(int)+0xe0>
c00166bc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166c1:	83 e8 01             	sub    eax,0x1
c00166c4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166c9:	75 01                	jne    c00166cc <terminateTask(int)+0xb4>
c00166cb:	fb                   	sti    
c00166cc:	fa                   	cli    
c00166cd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166d2:	83 c0 01             	add    eax,0x1
c00166d5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166da:	66 90                	xchg   ax,ax
c00166dc:	e8 b7 f5 ff ff       	call   c0015c98 <schedule()>
c00166e1:	eb d9                	jmp    c00166bc <terminateTask(int)+0xa4>
c00166e3:	90                   	nop
c00166e4:	83 ec 0c             	sub    esp,0xc
c00166e7:	68 ba 24 02 c0       	push   0xc00224ba
c00166ec:	e8 19 42 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00166f1:	83 c4 10             	add    esp,0x10
c00166f4:	eb 9e                	jmp    c0016694 <terminateTask(int)+0x7c>
c00166f6:	66 90                	xchg   ax,ax
c00166f8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016702:	eb d8                	jmp    c00166dc <terminateTask(int)+0xc4>

c0016704 <Thr::terminateFromIRQ(int)>:
c0016704:	83 ec 18             	sub    esp,0x18
c0016707:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001670b:	50                   	push   eax
c001670c:	e8 07 ff ff ff       	call   c0016618 <terminateTask(int)>
c0016711:	90                   	nop
c0016712:	66 90                	xchg   ax,ax

c0016714 <Semaphore::release()>:
c0016714:	83 ec 0c             	sub    esp,0xc
c0016717:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001671b:	fa                   	cli    
c001671c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016721:	83 c0 01             	add    eax,0x1
c0016724:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016729:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001672e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016731:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016737:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001673a:	85 c9                	test   ecx,ecx
c001673c:	74 42                	je     c0016780 <Semaphore::release()+0x6c>
c001673e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016741:	83 ec 0c             	sub    esp,0xc
c0016744:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016747:	51                   	push   ecx
c0016748:	e8 43 fa ff ff       	call   c0016190 <unblockTask(ThreadControlBlock*)>
c001674d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016752:	83 c4 10             	add    esp,0x10
c0016755:	83 e8 01             	sub    eax,0x1
c0016758:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001675d:	85 c0                	test   eax,eax
c001675f:	75 0b                	jne    c001676c <Semaphore::release()+0x58>
c0016761:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016766:	85 c0                	test   eax,eax
c0016768:	75 22                	jne    c001678c <Semaphore::release()+0x78>
c001676a:	66 90                	xchg   ax,ax
c001676c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016771:	83 e8 01             	sub    eax,0x1
c0016774:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016779:	75 01                	jne    c001677c <Semaphore::release()+0x68>
c001677b:	fb                   	sti    
c001677c:	83 c4 0c             	add    esp,0xc
c001677f:	c3                   	ret    
c0016780:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016783:	83 e9 01             	sub    ecx,0x1
c0016786:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016789:	eb cd                	jmp    c0016758 <Semaphore::release()+0x44>
c001678b:	90                   	nop
c001678c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016796:	e8 fd f4 ff ff       	call   c0015c98 <schedule()>
c001679b:	eb cf                	jmp    c001676c <Semaphore::release()+0x58>
c001679d:	8d 76 00             	lea    esi,[esi+0x0]

c00167a0 <__static_initialization_and_destruction_0(int, int)>:
c00167a0:	83 ec 0c             	sub    esp,0xc
c00167a3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00167a8:	0f 85 8e 00 00 00    	jne    c001683c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00167ae:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00167b6:	0f 85 80 00 00 00    	jne    c001683c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00167bc:	83 ec 0c             	sub    esp,0xc
c00167bf:	68 e4 96 02 c0       	push   0xc00296e4
c00167c4:	e8 eb 94 00 00       	call   c001fcb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00167c9:	83 c4 10             	add    esp,0x10
c00167cc:	83 ec 04             	sub    esp,0x4
c00167cf:	68 90 31 02 c0       	push   0xc0023190
c00167d4:	68 e4 96 02 c0       	push   0xc00296e4
c00167d9:	68 64 fc 01 c0       	push   0xc001fc64
c00167de:	e8 d9 3f ff ff       	call   c000a7bc <__cxa_atexit>
c00167e3:	83 c4 10             	add    esp,0x10
c00167e6:	83 ec 0c             	sub    esp,0xc
c00167e9:	68 d8 96 02 c0       	push   0xc00296d8
c00167ee:	e8 c1 94 00 00       	call   c001fcb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00167f3:	83 c4 10             	add    esp,0x10
c00167f6:	83 ec 04             	sub    esp,0x4
c00167f9:	68 90 31 02 c0       	push   0xc0023190
c00167fe:	68 d8 96 02 c0       	push   0xc00296d8
c0016803:	68 64 fc 01 c0       	push   0xc001fc64
c0016808:	e8 af 3f ff ff       	call   c000a7bc <__cxa_atexit>
c001680d:	83 c4 10             	add    esp,0x10
c0016810:	83 ec 0c             	sub    esp,0xc
c0016813:	68 cc 96 02 c0       	push   0xc00296cc
c0016818:	e8 97 94 00 00       	call   c001fcb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001681d:	83 c4 10             	add    esp,0x10
c0016820:	83 ec 04             	sub    esp,0x4
c0016823:	68 90 31 02 c0       	push   0xc0023190
c0016828:	68 cc 96 02 c0       	push   0xc00296cc
c001682d:	68 64 fc 01 c0       	push   0xc001fc64
c0016832:	e8 85 3f ff ff       	call   c000a7bc <__cxa_atexit>
c0016837:	83 c4 10             	add    esp,0x10
c001683a:	66 90                	xchg   ax,ax
c001683c:	90                   	nop
c001683d:	83 c4 0c             	add    esp,0xc
c0016840:	c3                   	ret    
c0016841:	8d 76 00             	lea    esi,[esi+0x0]

c0016844 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016844:	83 ec 0c             	sub    esp,0xc
c0016847:	83 ec 08             	sub    esp,0x8
c001684a:	68 ff ff 00 00       	push   0xffff
c001684f:	6a 01                	push   0x1
c0016851:	e8 4a ff ff ff       	call   c00167a0 <__static_initialization_and_destruction_0(int, int)>
c0016856:	83 c4 10             	add    esp,0x10
c0016859:	83 c4 0c             	add    esp,0xc
c001685c:	c3                   	ret    

c001685d <Vm::inbv(unsigned short)>:
c001685d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016861:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016866:	75 06                	jne    c001686e <Vm::inbv(unsigned short)+0x11>
c0016868:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c001686d:	c3                   	ret    
c001686e:	ec                   	in     al,dx
c001686f:	c3                   	ret    

c0016870 <Vm::outbv(unsigned short, unsigned char)>:
c0016870:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016874:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016878:	66 81 fa fe fe       	cmp    dx,0xfefe
c001687d:	75 25                	jne    c00168a4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001687f:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016885:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c001688b:	8d 51 01             	lea    edx,[ecx+0x1]
c001688e:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c0016894:	83 fa 20             	cmp    edx,0x20
c0016897:	75 0c                	jne    c00168a5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016899:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c00168a3:	c3                   	ret    
c00168a4:	ee                   	out    dx,al
c00168a5:	c3                   	ret    

c00168a6 <Vm::realToLinear(unsigned short, unsigned short)>:
c00168a6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00168ab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00168b0:	c1 e0 04             	shl    eax,0x4
c00168b3:	01 d0                	add    eax,edx
c00168b5:	c3                   	ret    

c00168b6 <Vm::getSegment(unsigned int)>:
c00168b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168ba:	c1 e8 10             	shr    eax,0x10
c00168bd:	c3                   	ret    

c00168be <Vm::getOffset(unsigned int)>:
c00168be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168c2:	c3                   	ret    

c00168c3 <Vm::mainloop2()>:
c00168c3:	83 ec 18             	sub    esp,0x18
c00168c6:	fa                   	cli    
c00168c7:	6a 02                	push   0x2
c00168c9:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168cf:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c00168d6:	e8 95 f5 ff ff       	call   c0015e70 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00168db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168e0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00168e4:	52                   	push   edx
c00168e5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00168e9:	52                   	push   edx
c00168ea:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00168ee:	52                   	push   edx
c00168ef:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00168f3:	50                   	push   eax
c00168f4:	e8 16 99 fe ff       	call   c000020f <goToVM86>
c00168f9:	83 c4 2c             	add    esp,0x2c
c00168fc:	c3                   	ret    

c00168fd <Vm::mainVm8086Loop(void*)>:
c00168fd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016902:	48                   	dec    eax
c0016903:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016908:	75 01                	jne    c001690b <Vm::mainVm8086Loop(void*)+0xe>
c001690a:	fb                   	sti    
c001690b:	eb b6                	jmp    c00168c3 <Vm::mainloop2()>

c001690d <Vm::mainloop3(unsigned long)>:
c001690d:	83 ec 18             	sub    esp,0x18
c0016910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016914:	fa                   	cli    
c0016915:	6a 02                	push   0x2
c0016917:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001691d:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c0016924:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016929:	e8 42 f5 ff ff       	call   c0015e70 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001692e:	83 c4 1c             	add    esp,0x1c
c0016931:	eb 90                	jmp    c00168c3 <Vm::mainloop2()>

c0016933 <Vm::initialise8086()>:
c0016933:	83 ec 0c             	sub    esp,0xc
c0016936:	68 80 00 00 00       	push   0x80
c001693b:	6a 00                	push   0x0
c001693d:	68 fd 68 01 c0       	push   0xc00168fd
c0016942:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016948:	e8 ff f0 ff ff       	call   c0015a4c <Process::createThread(void (*)(void*), void*, int)>
c001694d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016954:	68 00 01 00 00       	push   0x100
c0016959:	6a 00                	push   0x0
c001695b:	6a 00                	push   0x0
c001695d:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c0016962:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0016967:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001696d:	e8 96 35 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016972:	83 c4 2c             	add    esp,0x2c
c0016975:	c3                   	ret    

c0016976 <Vm::finish8086()>:
c0016976:	53                   	push   ebx
c0016977:	83 ec 08             	sub    esp,0x8
c001697a:	fa                   	cli    
c001697b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016981:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016988:	75 15                	jne    c001699f <Vm::finish8086()+0x29>
c001698a:	e8 09 f3 ff ff       	call   c0015c98 <schedule()>
c001698f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016994:	48                   	dec    eax
c0016995:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001699a:	75 de                	jne    c001697a <Vm::finish8086()+0x4>
c001699c:	fb                   	sti    
c001699d:	eb db                	jmp    c001697a <Vm::finish8086()+0x4>
c001699f:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c00169a6:	83 ec 0c             	sub    esp,0xc
c00169a9:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c00169af:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00169b5:	e8 d6 f7 ff ff       	call   c0016190 <unblockTask(ThreadControlBlock*)>
c00169ba:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169bf:	83 c4 10             	add    esp,0x10
c00169c2:	8d 50 ff             	lea    edx,[eax-0x1]
c00169c5:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00169cb:	85 d2                	test   edx,edx
c00169cd:	75 01                	jne    c00169d0 <Vm::finish8086()+0x5a>
c00169cf:	fb                   	sti    
c00169d0:	83 c4 08             	add    esp,0x8
c00169d3:	89 d8                	mov    eax,ebx
c00169d5:	5b                   	pop    ebx
c00169d6:	c3                   	ret    

c00169d7 <Vm::getOutput8086(unsigned char*)>:
c00169d7:	57                   	push   edi
c00169d8:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00169de:	56                   	push   esi
c00169df:	be 40 97 02 c0       	mov    esi,0xc0029740
c00169e4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00169e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169ea:	5e                   	pop    esi
c00169eb:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c00169f0:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00169fa:	5f                   	pop    edi
c00169fb:	c3                   	ret    

c00169fc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00169fc:	55                   	push   ebp
c00169fd:	57                   	push   edi
c00169fe:	56                   	push   esi
c00169ff:	53                   	push   ebx
c0016a00:	83 ec 0c             	sub    esp,0xc
c0016a03:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016a07:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016a0b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016a0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016a13:	fa                   	cli    
c0016a14:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a1a:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016a21:	75 15                	jne    c0016a38 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016a23:	e8 70 f2 ff ff       	call   c0015c98 <schedule()>
c0016a28:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a2d:	48                   	dec    eax
c0016a2e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a33:	75 de                	jne    c0016a13 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016a35:	fb                   	sti    
c0016a36:	eb db                	jmp    c0016a13 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016a38:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016a42:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016a47:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016a4b:	0f b7 ff             	movzx  edi,di
c0016a4e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016a52:	0f b7 f6             	movzx  esi,si
c0016a55:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016a59:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016a5d:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016a61:	50                   	push   eax
c0016a62:	6a 20                	push   0x20
c0016a64:	6a 00                	push   0x0
c0016a66:	68 40 97 02 c0       	push   0xc0029740
c0016a6b:	e8 80 9a fe ff       	call   c00004f0 <memset>
c0016a70:	5a                   	pop    edx
c0016a71:	59                   	pop    ecx
c0016a72:	57                   	push   edi
c0016a73:	56                   	push   esi
c0016a74:	e8 2d fe ff ff       	call   c00168a6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016a79:	83 c4 10             	add    esp,0x10
c0016a7c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016a80:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016a84:	89 c7                	mov    edi,eax
c0016a86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a88:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016a8f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a94:	48                   	dec    eax
c0016a95:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a9a:	75 01                	jne    c0016a9d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016a9c:	fb                   	sti    
c0016a9d:	83 ec 0c             	sub    esp,0xc
c0016aa0:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016aa6:	e8 e5 f6 ff ff       	call   c0016190 <unblockTask(ThreadControlBlock*)>
c0016aab:	83 c4 1c             	add    esp,0x1c
c0016aae:	b0 01                	mov    al,0x1
c0016ab0:	5b                   	pop    ebx
c0016ab1:	5e                   	pop    esi
c0016ab2:	5f                   	pop    edi
c0016ab3:	5d                   	pop    ebp
c0016ab4:	c3                   	ret    

c0016ab5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ab5:	55                   	push   ebp
c0016ab6:	57                   	push   edi
c0016ab7:	56                   	push   esi
c0016ab8:	53                   	push   ebx
c0016ab9:	83 ec 34             	sub    esp,0x34
c0016abc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016ac0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016ac4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016ac8:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016acc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ad0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ad4:	68 e8 25 02 c0       	push   0xc00225e8
c0016ad9:	e8 2c 3e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016ade:	83 c4 10             	add    esp,0x10
c0016ae1:	fa                   	cli    
c0016ae2:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016ae8:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016aee:	84 db                	test   bl,bl
c0016af0:	75 15                	jne    c0016b07 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016af2:	e8 a1 f1 ff ff       	call   c0015c98 <schedule()>
c0016af7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016afc:	48                   	dec    eax
c0016afd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b02:	75 dd                	jne    c0016ae1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016b04:	fb                   	sti    
c0016b05:	eb da                	jmp    c0016ae1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016b07:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016b11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b15:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016b1a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016b1e:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016b22:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016b26:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016b2a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016b2e:	50                   	push   eax
c0016b2f:	6a 20                	push   0x20
c0016b31:	6a 00                	push   0x0
c0016b33:	68 40 97 02 c0       	push   0xc0029740
c0016b38:	e8 b3 99 fe ff       	call   c00004f0 <memset>
c0016b3d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016b44:	e8 8a 0f ff ff       	call   c0007ad3 <malloc>
c0016b49:	6a 01                	push   0x1
c0016b4b:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016b51:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0016b55:	89 c5                	mov    ebp,eax
c0016b57:	50                   	push   eax
c0016b58:	e8 69 4c ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c0016b5d:	83 c4 20             	add    esp,0x20
c0016b60:	85 ed                	test   ebp,ebp
c0016b62:	75 0a                	jne    c0016b6e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xb9>
c0016b64:	83 ec 0c             	sub    esp,0xc
c0016b67:	68 0a 26 02 c0       	push   0xc002260a
c0016b6c:	eb 2b                	jmp    c0016b99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe4>
c0016b6e:	50                   	push   eax
c0016b6f:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016b73:	50                   	push   eax
c0016b74:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016b78:	50                   	push   eax
c0016b79:	55                   	push   ebp
c0016b7a:	e8 27 50 ff ff       	call   c000bba6 <File::stat(unsigned long long*, bool*)>
c0016b7f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016b83:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016b87:	83 c4 10             	add    esp,0x10
c0016b8a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016b8f:	74 27                	je     c0016bb8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x103>
c0016b91:	83 ec 0c             	sub    esp,0xc
c0016b94:	68 1e 26 02 c0       	push   0xc002261e
c0016b99:	e8 fb a6 ff ff       	call   c0011299 <KePanic(char const*)>
c0016b9e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016ba3:	83 c4 10             	add    esp,0x10
c0016ba6:	48                   	dec    eax
c0016ba7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016bac:	85 c0                	test   eax,eax
c0016bae:	75 01                	jne    c0016bb1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfc>
c0016bb0:	fb                   	sti    
c0016bb1:	31 db                	xor    ebx,ebx
c0016bb3:	e9 90 00 00 00       	jmp    c0016c48 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x193>
c0016bb8:	51                   	push   ecx
c0016bb9:	51                   	push   ecx
c0016bba:	6a 01                	push   0x1
c0016bbc:	55                   	push   ebp
c0016bbd:	e8 e2 4c ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c0016bc2:	83 c4 10             	add    esp,0x10
c0016bc5:	85 c0                	test   eax,eax
c0016bc7:	74 26                	je     c0016bef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13a>
c0016bc9:	83 ec 0c             	sub    esp,0xc
c0016bcc:	68 37 26 02 c0       	push   0xc0022637
c0016bd1:	e8 c3 a6 ff ff       	call   c0011299 <KePanic(char const*)>
c0016bd6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016bdb:	83 c4 10             	add    esp,0x10
c0016bde:	48                   	dec    eax
c0016bdf:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016be4:	85 c0                	test   eax,eax
c0016be6:	75 c9                	jne    c0016bb1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfc>
c0016be8:	fb                   	sti    
c0016be9:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016bed:	eb 59                	jmp    c0016c48 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x193>
c0016bef:	50                   	push   eax
c0016bf0:	0f b7 ff             	movzx  edi,di
c0016bf3:	50                   	push   eax
c0016bf4:	0f b7 f6             	movzx  esi,si
c0016bf7:	57                   	push   edi
c0016bf8:	56                   	push   esi
c0016bf9:	e8 a8 fc ff ff       	call   c00168a6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016bfe:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016c01:	5a                   	pop    edx
c0016c02:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016c06:	56                   	push   esi
c0016c07:	50                   	push   eax
c0016c08:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016c0c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016c10:	55                   	push   ebp
c0016c11:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016c14:	83 c4 14             	add    esp,0x14
c0016c17:	55                   	push   ebp
c0016c18:	e8 e5 4c ff ff       	call   c000b902 <File::close()>
c0016c1d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016c22:	83 c4 10             	add    esp,0x10
c0016c25:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016c2c:	48                   	dec    eax
c0016c2d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016c32:	85 c0                	test   eax,eax
c0016c34:	75 01                	jne    c0016c37 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x182>
c0016c36:	fb                   	sti    
c0016c37:	83 ec 0c             	sub    esp,0xc
c0016c3a:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016c40:	e8 4b f5 ff ff       	call   c0016190 <unblockTask(ThreadControlBlock*)>
c0016c45:	83 c4 10             	add    esp,0x10
c0016c48:	83 c4 2c             	add    esp,0x2c
c0016c4b:	88 d8                	mov    al,bl
c0016c4d:	5b                   	pop    ebx
c0016c4e:	5e                   	pop    esi
c0016c4f:	5f                   	pop    edi
c0016c50:	5d                   	pop    ebp
c0016c51:	c3                   	ret    

c0016c52 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016c52:	57                   	push   edi
c0016c53:	56                   	push   esi
c0016c54:	53                   	push   ebx
c0016c55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016c5d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016c61:	83 e8 06             	sub    eax,0x6
c0016c64:	0f b7 c0             	movzx  eax,ax
c0016c67:	50                   	push   eax
c0016c68:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016c6d:	50                   	push   eax
c0016c6e:	e8 33 fc ff ff       	call   c00168a6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016c73:	5a                   	pop    edx
c0016c74:	59                   	pop    ecx
c0016c75:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016c78:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016c7b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016c7e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016c84:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016c87:	8d 51 02             	lea    edx,[ecx+0x2]
c0016c8a:	66 89 10             	mov    WORD PTR [eax],dx
c0016c8d:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016c91:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016c95:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016c99:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016c9c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016ca0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ca6:	89 f1                	mov    ecx,esi
c0016ca8:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016cac:	89 f2                	mov    edx,esi
c0016cae:	0f b6 d6             	movzx  edx,dh
c0016cb1:	0f b6 f1             	movzx  esi,cl
c0016cb4:	74 0a                	je     c0016cc0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016cb6:	c1 e2 08             	shl    edx,0x8
c0016cb9:	09 f2                	or     edx,esi
c0016cbb:	80 ce 02             	or     dh,0x2
c0016cbe:	eb 08                	jmp    c0016cc8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016cc0:	c1 e2 08             	shl    edx,0x8
c0016cc3:	09 f2                	or     edx,esi
c0016cc5:	80 e6 fd             	and    dh,0xfd
c0016cc8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016ccc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cd1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016cd5:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016cdd:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016ce0:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016ce8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016ceb:	5b                   	pop    ebx
c0016cec:	5e                   	pop    esi
c0016ced:	5f                   	pop    edi
c0016cee:	c3                   	ret    

c0016cef <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016cef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cf4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cf9:	c1 e0 04             	shl    eax,0x4
c0016cfc:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016cff:	c3                   	ret    

c0016d00 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016d00:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d05:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d0a:	c1 e0 04             	shl    eax,0x4
c0016d0d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016d11:	c3                   	ret    

c0016d12 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016d12:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d17:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d1c:	c1 e0 04             	shl    eax,0x4
c0016d1f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016d22:	c3                   	ret    

c0016d23 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016d23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d28:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d2d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016d31:	c1 e0 04             	shl    eax,0x4
c0016d34:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016d37:	c3                   	ret    

c0016d38 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016d38:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d3d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d46:	c1 e0 04             	shl    eax,0x4
c0016d49:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016d4d:	c3                   	ret    

c0016d4e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016d4e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d53:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d5c:	c1 e0 04             	shl    eax,0x4
c0016d5f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016d62:	c3                   	ret    

c0016d63 <Vm::faultHandler(regs*)>:
c0016d63:	55                   	push   ebp
c0016d64:	57                   	push   edi
c0016d65:	56                   	push   esi
c0016d66:	53                   	push   ebx
c0016d67:	83 ec 2c             	sub    esp,0x2c
c0016d6a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016d6e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016d71:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016d75:	0f b7 f8             	movzx  edi,ax
c0016d78:	0f b7 c0             	movzx  eax,ax
c0016d7b:	52                   	push   edx
c0016d7c:	50                   	push   eax
c0016d7d:	e8 24 fb ff ff       	call   c00168a6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016d82:	5a                   	pop    edx
c0016d83:	59                   	pop    ecx
c0016d84:	89 c1                	mov    ecx,eax
c0016d86:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d8d:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016d92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d96:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016d99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d9d:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016da2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016da6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016daa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dae:	e8 f3 fa ff ff       	call   c00168a6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016db3:	5e                   	pop    esi
c0016db4:	be 06 00 00 00       	mov    esi,0x6
c0016db9:	5d                   	pop    ebp
c0016dba:	31 ed                	xor    ebp,ebp
c0016dbc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016dc1:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016dc4:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016dca:	0f 84 74 02 00 00    	je     c0017044 <Vm::faultHandler(regs*)+0x2e1>
c0016dd0:	0f 87 94 00 00 00    	ja     c0016e6a <Vm::faultHandler(regs*)+0x107>
c0016dd6:	83 fa 66             	cmp    edx,0x66
c0016dd9:	0f 84 e2 01 00 00    	je     c0016fc1 <Vm::faultHandler(regs*)+0x25e>
c0016ddf:	77 47                	ja     c0016e28 <Vm::faultHandler(regs*)+0xc5>
c0016de1:	83 fa 36             	cmp    edx,0x36
c0016de4:	0f 84 ca 01 00 00    	je     c0016fb4 <Vm::faultHandler(regs*)+0x251>
c0016dea:	77 1a                	ja     c0016e06 <Vm::faultHandler(regs*)+0xa3>
c0016dec:	83 fa 26             	cmp    edx,0x26
c0016def:	0f 84 98 01 00 00    	je     c0016f8d <Vm::faultHandler(regs*)+0x22a>
c0016df5:	83 fa 2e             	cmp    edx,0x2e
c0016df8:	0f 85 27 06 00 00    	jne    c0017425 <Vm::faultHandler(regs*)+0x6c2>
c0016dfe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e01:	31 f6                	xor    esi,esi
c0016e03:	41                   	inc    ecx
c0016e04:	eb bb                	jmp    c0016dc1 <Vm::faultHandler(regs*)+0x5e>
c0016e06:	83 fa 64             	cmp    edx,0x64
c0016e09:	0f 84 8b 01 00 00    	je     c0016f9a <Vm::faultHandler(regs*)+0x237>
c0016e0f:	0f 87 92 01 00 00    	ja     c0016fa7 <Vm::faultHandler(regs*)+0x244>
c0016e15:	83 fa 3e             	cmp    edx,0x3e
c0016e18:	0f 85 07 06 00 00    	jne    c0017425 <Vm::faultHandler(regs*)+0x6c2>
c0016e1e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e21:	be 01 00 00 00       	mov    esi,0x1
c0016e26:	eb db                	jmp    c0016e03 <Vm::faultHandler(regs*)+0xa0>
c0016e28:	83 fa 6d             	cmp    edx,0x6d
c0016e2b:	0f 84 34 03 00 00    	je     c0017165 <Vm::faultHandler(regs*)+0x402>
c0016e31:	77 17                	ja     c0016e4a <Vm::faultHandler(regs*)+0xe7>
c0016e33:	83 fa 67             	cmp    edx,0x67
c0016e36:	0f 84 92 01 00 00    	je     c0016fce <Vm::faultHandler(regs*)+0x26b>
c0016e3c:	83 fa 6c             	cmp    edx,0x6c
c0016e3f:	0f 84 b1 02 00 00    	je     c00170f6 <Vm::faultHandler(regs*)+0x393>
c0016e45:	e9 db 05 00 00       	jmp    c0017425 <Vm::faultHandler(regs*)+0x6c2>
c0016e4a:	83 fa 6f             	cmp    edx,0x6f
c0016e4d:	0f 84 40 04 00 00    	je     c0017293 <Vm::faultHandler(regs*)+0x530>
c0016e53:	0f 82 a2 03 00 00    	jb     c00171fb <Vm::faultHandler(regs*)+0x498>
c0016e59:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016e5f:	0f 84 76 01 00 00    	je     c0016fdb <Vm::faultHandler(regs*)+0x278>
c0016e65:	e9 bb 05 00 00       	jmp    c0017425 <Vm::faultHandler(regs*)+0x6c2>
c0016e6a:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016e70:	0f 84 57 05 00 00    	je     c00173cd <Vm::faultHandler(regs*)+0x66a>
c0016e76:	0f 87 a9 00 00 00    	ja     c0016f25 <Vm::faultHandler(regs*)+0x1c2>
c0016e7c:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016e82:	0f 84 d6 04 00 00    	je     c001735e <Vm::faultHandler(regs*)+0x5fb>
c0016e88:	77 78                	ja     c0016f02 <Vm::faultHandler(regs*)+0x19f>
c0016e8a:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016e90:	0f 84 0e 02 00 00    	je     c00170a4 <Vm::faultHandler(regs*)+0x341>
c0016e96:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016e9c:	0f 85 83 05 00 00    	jne    c0017425 <Vm::faultHandler(regs*)+0x6c2>
c0016ea2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016ea6:	89 d1                	mov    ecx,edx
c0016ea8:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016eab:	c1 e1 08             	shl    ecx,0x8
c0016eae:	09 ca                	or     edx,ecx
c0016eb0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016eb3:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016eb7:	89 d1                	mov    ecx,edx
c0016eb9:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016ebd:	c1 e1 08             	shl    ecx,0x8
c0016ec0:	09 ca                	or     edx,ecx
c0016ec2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016ec5:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016ec9:	89 d1                	mov    ecx,edx
c0016ecb:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016ecf:	c1 e1 08             	shl    ecx,0x8
c0016ed2:	09 ca                	or     edx,ecx
c0016ed4:	81 ca 00 02 02 00    	or     edx,0x20200
c0016eda:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016edd:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016ee1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ee7:	d1 e8                	shr    eax,1
c0016ee9:	83 e0 01             	and    eax,0x1
c0016eec:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016eef:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ef2:	83 c0 06             	add    eax,0x6
c0016ef5:	25 ff ff 00 00       	and    eax,0xffff
c0016efa:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016efd:	e9 1f 05 00 00       	jmp    c0017421 <Vm::faultHandler(regs*)+0x6be>
c0016f02:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016f08:	0f 84 95 04 00 00    	je     c00173a3 <Vm::faultHandler(regs*)+0x640>
c0016f0e:	0f 82 66 04 00 00    	jb     c001737a <Vm::faultHandler(regs*)+0x617>
c0016f14:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016f1a:	0f 84 9a 04 00 00    	je     c00173ba <Vm::faultHandler(regs*)+0x657>
c0016f20:	e9 00 05 00 00       	jmp    c0017425 <Vm::faultHandler(regs*)+0x6c2>
c0016f25:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016f2b:	0f 84 dd 04 00 00    	je     c001740e <Vm::faultHandler(regs*)+0x6ab>
c0016f31:	77 2e                	ja     c0016f61 <Vm::faultHandler(regs*)+0x1fe>
c0016f33:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016f39:	0f 84 aa 04 00 00    	je     c00173e9 <Vm::faultHandler(regs*)+0x686>
c0016f3f:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016f45:	0f 85 da 04 00 00    	jne    c0017425 <Vm::faultHandler(regs*)+0x6c2>
c0016f4b:	50                   	push   eax
c0016f4c:	50                   	push   eax
c0016f4d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016f51:	50                   	push   eax
c0016f52:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016f56:	50                   	push   eax
c0016f57:	e8 14 f9 ff ff       	call   c0016870 <Vm::outbv(unsigned short, unsigned char)>
c0016f5c:	e9 a5 04 00 00       	jmp    c0017406 <Vm::faultHandler(regs*)+0x6a3>
c0016f61:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016f67:	0f 84 6d 01 00 00    	je     c00170da <Vm::faultHandler(regs*)+0x377>
c0016f6d:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016f73:	0f 84 6f 01 00 00    	je     c00170e8 <Vm::faultHandler(regs*)+0x385>
c0016f79:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016f7f:	0f 85 a0 04 00 00    	jne    c0017425 <Vm::faultHandler(regs*)+0x6c2>
c0016f85:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f88:	e9 76 fe ff ff       	jmp    c0016e03 <Vm::faultHandler(regs*)+0xa0>
c0016f8d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f90:	be 02 00 00 00       	mov    esi,0x2
c0016f95:	e9 69 fe ff ff       	jmp    c0016e03 <Vm::faultHandler(regs*)+0xa0>
c0016f9a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f9d:	be 03 00 00 00       	mov    esi,0x3
c0016fa2:	e9 5c fe ff ff       	jmp    c0016e03 <Vm::faultHandler(regs*)+0xa0>
c0016fa7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016faa:	be 04 00 00 00       	mov    esi,0x4
c0016faf:	e9 4f fe ff ff       	jmp    c0016e03 <Vm::faultHandler(regs*)+0xa0>
c0016fb4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fb7:	be 05 00 00 00       	mov    esi,0x5
c0016fbc:	e9 42 fe ff ff       	jmp    c0016e03 <Vm::faultHandler(regs*)+0xa0>
c0016fc1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fc4:	bd 01 00 00 00       	mov    ebp,0x1
c0016fc9:	e9 35 fe ff ff       	jmp    c0016e03 <Vm::faultHandler(regs*)+0xa0>
c0016fce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fd1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016fd6:	e9 28 fe ff ff       	jmp    c0016e03 <Vm::faultHandler(regs*)+0xa0>
c0016fdb:	83 e5 01             	and    ebp,0x1
c0016fde:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016fe1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016fe5:	74 30                	je     c0017017 <Vm::faultHandler(regs*)+0x2b4>
c0016fe7:	83 e9 04             	sub    ecx,0x4
c0016fea:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016ff0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016ff6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016ff9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016ffc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017002:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017006:	0f 84 12 04 00 00    	je     c001741e <Vm::faultHandler(regs*)+0x6bb>
c001700c:	80 ce 02             	or     dh,0x2
c001700f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017012:	e9 07 04 00 00       	jmp    c001741e <Vm::faultHandler(regs*)+0x6bb>
c0017017:	83 e9 02             	sub    ecx,0x2
c001701a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017020:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017023:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017027:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001702d:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017031:	74 05                	je     c0017038 <Vm::faultHandler(regs*)+0x2d5>
c0017033:	80 ce 02             	or     dh,0x2
c0017036:	eb 03                	jmp    c001703b <Vm::faultHandler(regs*)+0x2d8>
c0017038:	80 e6 fd             	and    dh,0xfd
c001703b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001703f:	e9 da 03 00 00       	jmp    c001741e <Vm::faultHandler(regs*)+0x6bb>
c0017044:	83 e5 01             	and    ebp,0x1
c0017047:	74 2a                	je     c0017073 <Vm::faultHandler(regs*)+0x310>
c0017049:	8b 10                	mov    edx,DWORD PTR [eax]
c001704b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017051:	81 ca 00 02 02 00    	or     edx,0x20200
c0017057:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001705a:	8b 00                	mov    eax,DWORD PTR [eax]
c001705c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017062:	c1 e8 09             	shr    eax,0x9
c0017065:	83 e0 01             	and    eax,0x1
c0017068:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001706b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001706e:	83 c0 04             	add    eax,0x4
c0017071:	eb 24                	jmp    c0017097 <Vm::faultHandler(regs*)+0x334>
c0017073:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017076:	81 ca 00 02 02 00    	or     edx,0x20200
c001707c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001707f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017082:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017088:	c1 e8 09             	shr    eax,0x9
c001708b:	83 e0 01             	and    eax,0x1
c001708e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017091:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017094:	83 c0 02             	add    eax,0x2
c0017097:	25 ff ff 00 00       	and    eax,0xffff
c001709c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001709f:	e9 7a 03 00 00       	jmp    c001741e <Vm::faultHandler(regs*)+0x6bb>
c00170a4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170a8:	3d ee 00 00 00       	cmp    eax,0xee
c00170ad:	75 10                	jne    c00170bf <Vm::faultHandler(regs*)+0x35c>
c00170af:	83 ec 0c             	sub    esp,0xc
c00170b2:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00170b5:	e8 53 f8 ff ff       	call   c001690d <Vm::mainloop3(unsigned long)>
c00170ba:	e9 4a 03 00 00       	jmp    c0017409 <Vm::faultHandler(regs*)+0x6a6>
c00170bf:	83 ec 0c             	sub    esp,0xc
c00170c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00170c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170ca:	51                   	push   ecx
c00170cb:	50                   	push   eax
c00170cc:	53                   	push   ebx
c00170cd:	e8 80 fb ff ff       	call   c0016c52 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00170d2:	83 c4 20             	add    esp,0x20
c00170d5:	e9 47 03 00 00       	jmp    c0017421 <Vm::faultHandler(regs*)+0x6be>
c00170da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170df:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00170e3:	e9 36 03 00 00       	jmp    c001741e <Vm::faultHandler(regs*)+0x6bb>
c00170e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170ed:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00170f1:	e9 28 03 00 00       	jmp    c001741e <Vm::faultHandler(regs*)+0x6bb>
c00170f6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170fb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00170fe:	74 2b                	je     c001712b <Vm::faultHandler(regs*)+0x3c8>
c0017100:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017107:	76 22                	jbe    c001712b <Vm::faultHandler(regs*)+0x3c8>
c0017109:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001710d:	50                   	push   eax
c001710e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017112:	50                   	push   eax
c0017113:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017117:	50                   	push   eax
c0017118:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001711c:	50                   	push   eax
c001711d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017121:	50                   	push   eax
c0017122:	6a 6c                	push   0x6c
c0017124:	6a 6c                	push   0x6c
c0017126:	e9 c0 01 00 00       	jmp    c00172eb <Vm::faultHandler(regs*)+0x588>
c001712b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001712f:	83 ec 0c             	sub    esp,0xc
c0017132:	0f b7 f6             	movzx  esi,si
c0017135:	50                   	push   eax
c0017136:	e8 22 f7 ff ff       	call   c001685d <Vm::inbv(unsigned short)>
c001713b:	83 c4 0c             	add    esp,0xc
c001713e:	0f b6 c0             	movzx  eax,al
c0017141:	50                   	push   eax
c0017142:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017146:	50                   	push   eax
c0017147:	56                   	push   esi
c0017148:	e8 d6 fb ff ff       	call   c0016d23 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001714d:	83 c4 10             	add    esp,0x10
c0017150:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017153:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017157:	74 03                	je     c001715c <Vm::faultHandler(regs*)+0x3f9>
c0017159:	48                   	dec    eax
c001715a:	eb 01                	jmp    c001715d <Vm::faultHandler(regs*)+0x3fa>
c001715c:	40                   	inc    eax
c001715d:	0f b7 c0             	movzx  eax,ax
c0017160:	e9 8e 00 00 00       	jmp    c00171f3 <Vm::faultHandler(regs*)+0x490>
c0017165:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001716a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001716d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017170:	74 29                	je     c001719b <Vm::faultHandler(regs*)+0x438>
c0017172:	3d ff ff 00 00       	cmp    eax,0xffff
c0017177:	76 22                	jbe    c001719b <Vm::faultHandler(regs*)+0x438>
c0017179:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001717d:	50                   	push   eax
c001717e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017182:	50                   	push   eax
c0017183:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017187:	50                   	push   eax
c0017188:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001718c:	50                   	push   eax
c001718d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017191:	50                   	push   eax
c0017192:	6a 6d                	push   0x6d
c0017194:	6a 6d                	push   0x6d
c0017196:	e9 50 01 00 00       	jmp    c00172eb <Vm::faultHandler(regs*)+0x588>
c001719b:	83 e5 01             	and    ebp,0x1
c001719e:	0f b7 c8             	movzx  ecx,ax
c00171a1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00171a4:	0f b7 f6             	movzx  esi,si
c00171a7:	74 1e                	je     c00171c7 <Vm::faultHandler(regs*)+0x464>
c00171a9:	ed                   	in     eax,dx
c00171aa:	55                   	push   ebp
c00171ab:	50                   	push   eax
c00171ac:	51                   	push   ecx
c00171ad:	56                   	push   esi
c00171ae:	e8 9b fb ff ff       	call   c0016d4e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00171b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00171b6:	83 c4 10             	add    esp,0x10
c00171b9:	8d 50 04             	lea    edx,[eax+0x4]
c00171bc:	83 e8 04             	sub    eax,0x4
c00171bf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00171c5:	eb 20                	jmp    c00171e7 <Vm::faultHandler(regs*)+0x484>
c00171c7:	66 ed                	in     ax,dx
c00171c9:	57                   	push   edi
c00171ca:	0f b7 c0             	movzx  eax,ax
c00171cd:	50                   	push   eax
c00171ce:	51                   	push   ecx
c00171cf:	56                   	push   esi
c00171d0:	e8 63 fb ff ff       	call   c0016d38 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00171d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00171d8:	83 c4 10             	add    esp,0x10
c00171db:	8d 50 02             	lea    edx,[eax+0x2]
c00171de:	83 e8 02             	sub    eax,0x2
c00171e1:	81 e2 ff ff 00 00    	and    edx,0xffff
c00171e7:	25 ff ff 00 00       	and    eax,0xffff
c00171ec:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00171f0:	0f 44 c2             	cmove  eax,edx
c00171f3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00171f6:	e9 23 02 00 00       	jmp    c001741e <Vm::faultHandler(regs*)+0x6bb>
c00171fb:	8d 46 ff             	lea    eax,[esi-0x1]
c00171fe:	0f b6 f0             	movzx  esi,al
c0017201:	83 fe 05             	cmp    esi,0x5
c0017204:	77 23                	ja     c0017229 <Vm::faultHandler(regs*)+0x4c6>
c0017206:	ff 24 b5 ac 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd954]
c001720d:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017212:	eb 15                	jmp    c0017229 <Vm::faultHandler(regs*)+0x4c6>
c0017214:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017218:	eb 0f                	jmp    c0017229 <Vm::faultHandler(regs*)+0x4c6>
c001721a:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001721e:	eb 09                	jmp    c0017229 <Vm::faultHandler(regs*)+0x4c6>
c0017220:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017224:	eb 03                	jmp    c0017229 <Vm::faultHandler(regs*)+0x4c6>
c0017226:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017229:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001722e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017231:	74 29                	je     c001725c <Vm::faultHandler(regs*)+0x4f9>
c0017233:	3d ff ff 00 00       	cmp    eax,0xffff
c0017238:	76 22                	jbe    c001725c <Vm::faultHandler(regs*)+0x4f9>
c001723a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001723e:	50                   	push   eax
c001723f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017243:	50                   	push   eax
c0017244:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017248:	50                   	push   eax
c0017249:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001724d:	50                   	push   eax
c001724e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017252:	50                   	push   eax
c0017253:	6a 6e                	push   0x6e
c0017255:	6a 6e                	push   0x6e
c0017257:	e9 8f 00 00 00       	jmp    c00172eb <Vm::faultHandler(regs*)+0x588>
c001725c:	52                   	push   edx
c001725d:	0f b7 c0             	movzx  eax,ax
c0017260:	52                   	push   edx
c0017261:	50                   	push   eax
c0017262:	57                   	push   edi
c0017263:	e8 87 fa ff ff       	call   c0016cef <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017268:	59                   	pop    ecx
c0017269:	5e                   	pop    esi
c001726a:	0f b6 c0             	movzx  eax,al
c001726d:	50                   	push   eax
c001726e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017272:	50                   	push   eax
c0017273:	e8 f8 f5 ff ff       	call   c0016870 <Vm::outbv(unsigned short, unsigned char)>
c0017278:	83 c4 10             	add    esp,0x10
c001727b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001727e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017282:	74 03                	je     c0017287 <Vm::faultHandler(regs*)+0x524>
c0017284:	48                   	dec    eax
c0017285:	eb 01                	jmp    c0017288 <Vm::faultHandler(regs*)+0x525>
c0017287:	40                   	inc    eax
c0017288:	0f b7 c0             	movzx  eax,ax
c001728b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001728e:	e9 8b 01 00 00       	jmp    c001741e <Vm::faultHandler(regs*)+0x6bb>
c0017293:	8d 46 ff             	lea    eax,[esi-0x1]
c0017296:	0f b6 f0             	movzx  esi,al
c0017299:	83 fe 05             	cmp    esi,0x5
c001729c:	77 1e                	ja     c00172bc <Vm::faultHandler(regs*)+0x559>
c001729e:	ff 24 b5 c4 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd93c]
c00172a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00172a9:	eb 11                	jmp    c00172bc <Vm::faultHandler(regs*)+0x559>
c00172ab:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00172ae:	eb 0c                	jmp    c00172bc <Vm::faultHandler(regs*)+0x559>
c00172b0:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00172b3:	eb 07                	jmp    c00172bc <Vm::faultHandler(regs*)+0x559>
c00172b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00172b8:	eb 02                	jmp    c00172bc <Vm::faultHandler(regs*)+0x559>
c00172ba:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00172bc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00172c1:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00172c4:	74 37                	je     c00172fd <Vm::faultHandler(regs*)+0x59a>
c00172c6:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00172cc:	76 2f                	jbe    c00172fd <Vm::faultHandler(regs*)+0x59a>
c00172ce:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00172d2:	50                   	push   eax
c00172d3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00172d7:	50                   	push   eax
c00172d8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00172dc:	50                   	push   eax
c00172dd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00172e1:	50                   	push   eax
c00172e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172e6:	50                   	push   eax
c00172e7:	6a 6f                	push   0x6f
c00172e9:	6a 6f                	push   0x6f
c00172eb:	68 50 26 02 c0       	push   0xc0022650
c00172f0:	e8 15 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00172f5:	83 c4 20             	add    esp,0x20
c00172f8:	e9 86 01 00 00       	jmp    c0017483 <Vm::faultHandler(regs*)+0x720>
c00172fd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017300:	0f b7 d7             	movzx  edx,di
c0017303:	0f b7 c6             	movzx  eax,si
c0017306:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017309:	81 e1 00 04 00 00    	and    ecx,0x400
c001730f:	83 e5 01             	and    ebp,0x1
c0017312:	74 1c                	je     c0017330 <Vm::faultHandler(regs*)+0x5cd>
c0017314:	55                   	push   ebp
c0017315:	55                   	push   ebp
c0017316:	50                   	push   eax
c0017317:	52                   	push   edx
c0017318:	e8 f5 f9 ff ff       	call   c0016d12 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001731d:	83 c4 10             	add    esp,0x10
c0017320:	89 fa                	mov    edx,edi
c0017322:	ef                   	out    dx,eax
c0017323:	8d 46 04             	lea    eax,[esi+0x4]
c0017326:	83 ee 04             	sub    esi,0x4
c0017329:	25 ff ff 00 00       	and    eax,0xffff
c001732e:	eb 1b                	jmp    c001734b <Vm::faultHandler(regs*)+0x5e8>
c0017330:	55                   	push   ebp
c0017331:	55                   	push   ebp
c0017332:	50                   	push   eax
c0017333:	52                   	push   edx
c0017334:	e8 c7 f9 ff ff       	call   c0016d00 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017339:	83 c4 10             	add    esp,0x10
c001733c:	89 fa                	mov    edx,edi
c001733e:	66 ef                	out    dx,ax
c0017340:	8d 46 02             	lea    eax,[esi+0x2]
c0017343:	83 ee 02             	sub    esi,0x2
c0017346:	25 ff ff 00 00       	and    eax,0xffff
c001734b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017351:	85 c9                	test   ecx,ecx
c0017353:	0f 44 f0             	cmove  esi,eax
c0017356:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017359:	e9 c0 00 00 00       	jmp    c001741e <Vm::faultHandler(regs*)+0x6bb>
c001735e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017365:	83 ec 0c             	sub    esp,0xc
c0017368:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001736c:	50                   	push   eax
c001736d:	e8 eb f4 ff ff       	call   c001685d <Vm::inbv(unsigned short)>
c0017372:	0f b6 c0             	movzx  eax,al
c0017375:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017378:	eb 3a                	jmp    c00173b4 <Vm::faultHandler(regs*)+0x651>
c001737a:	83 e5 01             	and    ebp,0x1
c001737d:	74 07                	je     c0017386 <Vm::faultHandler(regs*)+0x623>
c001737f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017383:	ed                   	in     eax,dx
c0017384:	eb 14                	jmp    c001739a <Vm::faultHandler(regs*)+0x637>
c0017386:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017389:	66 31 f6             	xor    si,si
c001738c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001738f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017393:	66 ed                	in     ax,dx
c0017395:	0f b7 c0             	movzx  eax,ax
c0017398:	09 f0                	or     eax,esi
c001739a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001739d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00173a1:	eb 7e                	jmp    c0017421 <Vm::faultHandler(regs*)+0x6be>
c00173a3:	52                   	push   edx
c00173a4:	52                   	push   edx
c00173a5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00173a9:	50                   	push   eax
c00173aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173ae:	50                   	push   eax
c00173af:	e8 bc f4 ff ff       	call   c0016870 <Vm::outbv(unsigned short, unsigned char)>
c00173b4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00173b8:	eb 4f                	jmp    c0017409 <Vm::faultHandler(regs*)+0x6a6>
c00173ba:	83 e5 01             	and    ebp,0x1
c00173bd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00173c0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00173c4:	74 03                	je     c00173c9 <Vm::faultHandler(regs*)+0x666>
c00173c6:	ef                   	out    dx,eax
c00173c7:	eb d4                	jmp    c001739d <Vm::faultHandler(regs*)+0x63a>
c00173c9:	66 ef                	out    dx,ax
c00173cb:	eb d0                	jmp    c001739d <Vm::faultHandler(regs*)+0x63a>
c00173cd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00173d1:	83 ec 0c             	sub    esp,0xc
c00173d4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00173db:	50                   	push   eax
c00173dc:	e8 7c f4 ff ff       	call   c001685d <Vm::inbv(unsigned short)>
c00173e1:	0f b6 c0             	movzx  eax,al
c00173e4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00173e7:	eb 1d                	jmp    c0017406 <Vm::faultHandler(regs*)+0x6a3>
c00173e9:	83 e5 01             	and    ebp,0x1
c00173ec:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00173ef:	74 03                	je     c00173f4 <Vm::faultHandler(regs*)+0x691>
c00173f1:	ed                   	in     eax,dx
c00173f2:	eb 0d                	jmp    c0017401 <Vm::faultHandler(regs*)+0x69e>
c00173f4:	66 ed                	in     ax,dx
c00173f6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00173f9:	0f b7 c0             	movzx  eax,ax
c00173fc:	66 31 d2             	xor    dx,dx
c00173ff:	09 d0                	or     eax,edx
c0017401:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017404:	eb 18                	jmp    c001741e <Vm::faultHandler(regs*)+0x6bb>
c0017406:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017409:	83 c4 10             	add    esp,0x10
c001740c:	eb 13                	jmp    c0017421 <Vm::faultHandler(regs*)+0x6be>
c001740e:	83 e5 01             	and    ebp,0x1
c0017411:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017414:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017417:	74 03                	je     c001741c <Vm::faultHandler(regs*)+0x6b9>
c0017419:	ef                   	out    dx,eax
c001741a:	eb 02                	jmp    c001741e <Vm::faultHandler(regs*)+0x6bb>
c001741c:	66 ef                	out    dx,ax
c001741e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017421:	b0 01                	mov    al,0x1
c0017423:	eb 60                	jmp    c0017485 <Vm::faultHandler(regs*)+0x722>
c0017425:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017429:	50                   	push   eax
c001742a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001742e:	50                   	push   eax
c001742f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017433:	50                   	push   eax
c0017434:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017438:	50                   	push   eax
c0017439:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001743d:	50                   	push   eax
c001743e:	52                   	push   edx
c001743f:	52                   	push   edx
c0017440:	68 7d 26 02 c0       	push   0xc002267d
c0017445:	e8 c0 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001744a:	83 c4 20             	add    esp,0x20
c001744d:	83 ec 0c             	sub    esp,0xc
c0017450:	6a 60                	push   0x60
c0017452:	e8 06 f4 ff ff       	call   c001685d <Vm::inbv(unsigned short)>
c0017457:	83 c4 10             	add    esp,0x10
c001745a:	0f b6 d0             	movzx  edx,al
c001745d:	83 fa 1c             	cmp    edx,0x1c
c0017460:	74 05                	je     c0017467 <Vm::faultHandler(regs*)+0x704>
c0017462:	83 fa 5a             	cmp    edx,0x5a
c0017465:	75 e6                	jne    c001744d <Vm::faultHandler(regs*)+0x6ea>
c0017467:	0f b6 c0             	movzx  eax,al
c001746a:	83 f8 1c             	cmp    eax,0x1c
c001746d:	74 05                	je     c0017474 <Vm::faultHandler(regs*)+0x711>
c001746f:	83 f8 5a             	cmp    eax,0x5a
c0017472:	75 0f                	jne    c0017483 <Vm::faultHandler(regs*)+0x720>
c0017474:	83 ec 0c             	sub    esp,0xc
c0017477:	6a 60                	push   0x60
c0017479:	e8 df f3 ff ff       	call   c001685d <Vm::inbv(unsigned short)>
c001747e:	83 c4 10             	add    esp,0x10
c0017481:	eb e4                	jmp    c0017467 <Vm::faultHandler(regs*)+0x704>
c0017483:	31 c0                	xor    eax,eax
c0017485:	83 c4 2c             	add    esp,0x2c
c0017488:	5b                   	pop    ebx
c0017489:	5e                   	pop    esi
c001748a:	5f                   	pop    edi
c001748b:	5d                   	pop    ebp
c001748c:	c3                   	ret    

c001748d <noCopro(unsigned long)>:
c001748d:	c3                   	ret    

c001748e <nmiHandler(regs*, void*)>:
c001748e:	83 ec 0c             	sub    esp,0xc
c0017491:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017496:	83 ec 0c             	sub    esp,0xc
c0017499:	50                   	push   eax
c001749a:	e8 37 fe fe ff       	call   c00072d6 <Computer::handleNMI()>
c001749f:	83 c4 10             	add    esp,0x10
c00174a2:	90                   	nop
c00174a3:	83 c4 0c             	add    esp,0xc
c00174a6:	c3                   	ret    

c00174a7 <doubleFault(regs*, void*)>:
c00174a7:	55                   	push   ebp
c00174a8:	89 e5                	mov    ebp,esp
c00174aa:	83 ec 08             	sub    esp,0x8
c00174ad:	83 ec 0c             	sub    esp,0xc
c00174b0:	68 dc 26 02 c0       	push   0xc00226dc
c00174b5:	e8 df 9d ff ff       	call   c0011299 <KePanic(char const*)>
c00174ba:	83 c4 10             	add    esp,0x10
c00174bd:	90                   	nop
c00174be:	c9                   	leave  
c00174bf:	c3                   	ret    

c00174c0 <displayDebugInfo(regs*)>:
c00174c0:	83 ec 1c             	sub    esp,0x1c
c00174c3:	0f 20 c0             	mov    eax,cr0
c00174c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174ca:	0f 20 d0             	mov    eax,cr2
c00174cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174d1:	0f 20 d8             	mov    eax,cr3
c00174d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00174d8:	0f 20 e0             	mov    eax,cr4
c00174db:	89 04 24             	mov    DWORD PTR [esp],eax
c00174de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174e2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00174e5:	83 ec 08             	sub    esp,0x8
c00174e8:	50                   	push   eax
c00174e9:	68 f8 26 02 c0       	push   0xc00226f8
c00174ee:	e8 17 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00174f3:	83 c4 10             	add    esp,0x10
c00174f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174fa:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00174fd:	83 ec 08             	sub    esp,0x8
c0017500:	50                   	push   eax
c0017501:	68 e9 26 02 c0       	push   0xc00226e9
c0017506:	e8 ff 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001750b:	83 c4 10             	add    esp,0x10
c001750e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017512:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017515:	83 ec 08             	sub    esp,0x8
c0017518:	50                   	push   eax
c0017519:	68 f4 26 02 c0       	push   0xc00226f4
c001751e:	e8 e7 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017523:	83 c4 10             	add    esp,0x10
c0017526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001752a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001752d:	83 ec 08             	sub    esp,0x8
c0017530:	50                   	push   eax
c0017531:	68 03 27 02 c0       	push   0xc0022703
c0017536:	e8 cf 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001753b:	83 c4 10             	add    esp,0x10
c001753e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017542:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017545:	83 ec 08             	sub    esp,0x8
c0017548:	50                   	push   eax
c0017549:	68 0e 27 02 c0       	push   0xc002270e
c001754e:	e8 b7 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017553:	83 c4 10             	add    esp,0x10
c0017556:	83 ec 08             	sub    esp,0x8
c0017559:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001755d:	68 19 27 02 c0       	push   0xc0022719
c0017562:	e8 a3 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017567:	83 c4 10             	add    esp,0x10
c001756a:	83 ec 08             	sub    esp,0x8
c001756d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017571:	68 24 27 02 c0       	push   0xc0022724
c0017576:	e8 8f 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001757b:	83 c4 10             	add    esp,0x10
c001757e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017582:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017585:	c1 e0 05             	shl    eax,0x5
c0017588:	8d 90 a0 36 02 c0    	lea    edx,[eax-0x3ffdc960]
c001758e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017592:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017595:	83 ec 04             	sub    esp,0x4
c0017598:	52                   	push   edx
c0017599:	50                   	push   eax
c001759a:	68 2f 27 02 c0       	push   0xc002272f
c001759f:	e8 66 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00175a4:	83 c4 10             	add    esp,0x10
c00175a7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175ac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175b2:	83 ec 0c             	sub    esp,0xc
c00175b5:	50                   	push   eax
c00175b6:	e8 b4 11 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c00175bb:	83 c4 10             	add    esp,0x10
c00175be:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175c9:	83 ec 08             	sub    esp,0x8
c00175cc:	68 3e 27 02 c0       	push   0xc002273e
c00175d1:	50                   	push   eax
c00175d2:	e8 d5 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175d7:	83 c4 10             	add    esp,0x10
c00175da:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175e9:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00175ec:	83 ec 08             	sub    esp,0x8
c00175ef:	52                   	push   edx
c00175f0:	50                   	push   eax
c00175f1:	e8 70 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175f6:	83 c4 10             	add    esp,0x10
c00175f9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017604:	83 ec 08             	sub    esp,0x8
c0017607:	68 4c 27 02 c0       	push   0xc002274c
c001760c:	50                   	push   eax
c001760d:	e8 9a 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017612:	83 c4 10             	add    esp,0x10
c0017615:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001761a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017620:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017625:	8b 12                	mov    edx,DWORD PTR [edx]
c0017627:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001762a:	83 c2 0c             	add    edx,0xc
c001762d:	83 ec 08             	sub    esp,0x8
c0017630:	52                   	push   edx
c0017631:	50                   	push   eax
c0017632:	e8 75 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017637:	83 c4 10             	add    esp,0x10
c001763a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001763f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017645:	83 ec 08             	sub    esp,0x8
c0017648:	68 55 27 02 c0       	push   0xc0022755
c001764d:	50                   	push   eax
c001764e:	e8 59 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017653:	83 c4 10             	add    esp,0x10
c0017656:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001765b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017661:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017665:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017668:	83 ec 08             	sub    esp,0x8
c001766b:	52                   	push   edx
c001766c:	50                   	push   eax
c001766d:	e8 f4 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017672:	83 c4 10             	add    esp,0x10
c0017675:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001767a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017680:	83 ec 08             	sub    esp,0x8
c0017683:	68 5d 27 02 c0       	push   0xc002275d
c0017688:	50                   	push   eax
c0017689:	e8 1e 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001768e:	83 c4 10             	add    esp,0x10
c0017691:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017696:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001769c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176a0:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00176a3:	83 ec 08             	sub    esp,0x8
c00176a6:	52                   	push   edx
c00176a7:	50                   	push   eax
c00176a8:	e8 b9 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00176ad:	83 c4 10             	add    esp,0x10
c00176b0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176bb:	83 ec 08             	sub    esp,0x8
c00176be:	68 65 27 02 c0       	push   0xc0022765
c00176c3:	50                   	push   eax
c00176c4:	e8 e3 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176c9:	83 c4 10             	add    esp,0x10
c00176cc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176db:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00176de:	83 ec 08             	sub    esp,0x8
c00176e1:	52                   	push   edx
c00176e2:	50                   	push   eax
c00176e3:	e8 7e 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00176e8:	83 c4 10             	add    esp,0x10
c00176eb:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176f6:	83 ec 08             	sub    esp,0x8
c00176f9:	68 6d 27 02 c0       	push   0xc002276d
c00176fe:	50                   	push   eax
c00176ff:	e8 a8 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017704:	83 c4 10             	add    esp,0x10
c0017707:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001770c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017712:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017716:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017719:	83 ec 08             	sub    esp,0x8
c001771c:	52                   	push   edx
c001771d:	50                   	push   eax
c001771e:	e8 43 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017723:	83 c4 10             	add    esp,0x10
c0017726:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001772b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017731:	83 ec 08             	sub    esp,0x8
c0017734:	68 75 27 02 c0       	push   0xc0022775
c0017739:	50                   	push   eax
c001773a:	e8 6d 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001773f:	83 c4 10             	add    esp,0x10
c0017742:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017747:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001774d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017751:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017754:	83 ec 08             	sub    esp,0x8
c0017757:	52                   	push   edx
c0017758:	50                   	push   eax
c0017759:	e8 08 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001775e:	83 c4 10             	add    esp,0x10
c0017761:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017766:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001776c:	83 ec 08             	sub    esp,0x8
c001776f:	68 7d 27 02 c0       	push   0xc002277d
c0017774:	50                   	push   eax
c0017775:	e8 32 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001777a:	83 c4 10             	add    esp,0x10
c001777d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017782:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017788:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001778c:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001778f:	83 ec 08             	sub    esp,0x8
c0017792:	52                   	push   edx
c0017793:	50                   	push   eax
c0017794:	e8 cd 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017799:	83 c4 10             	add    esp,0x10
c001779c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177a7:	83 ec 08             	sub    esp,0x8
c00177aa:	68 85 27 02 c0       	push   0xc0022785
c00177af:	50                   	push   eax
c00177b0:	e8 f7 12 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00177b5:	83 c4 10             	add    esp,0x10
c00177b8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177c3:	83 ec 08             	sub    esp,0x8
c00177c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00177ca:	50                   	push   eax
c00177cb:	e8 96 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00177d0:	83 c4 10             	add    esp,0x10
c00177d3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177d8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177de:	83 ec 08             	sub    esp,0x8
c00177e1:	68 8e 27 02 c0       	push   0xc002278e
c00177e6:	50                   	push   eax
c00177e7:	e8 c0 12 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00177ec:	83 c4 10             	add    esp,0x10
c00177ef:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177fa:	83 ec 08             	sub    esp,0x8
c00177fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017801:	50                   	push   eax
c0017802:	e8 5f 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017807:	83 c4 10             	add    esp,0x10
c001780a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001780f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017815:	83 ec 08             	sub    esp,0x8
c0017818:	68 96 27 02 c0       	push   0xc0022796
c001781d:	50                   	push   eax
c001781e:	e8 89 12 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017823:	83 c4 10             	add    esp,0x10
c0017826:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001782b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017831:	83 ec 08             	sub    esp,0x8
c0017834:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017838:	50                   	push   eax
c0017839:	e8 28 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001783e:	83 c4 10             	add    esp,0x10
c0017841:	fa                   	cli    
c0017842:	f4                   	hlt    
c0017843:	eb fe                	jmp    c0017843 <displayDebugInfo(regs*)+0x383>

c0017845 <HalSystemIdle()>:
c0017845:	56                   	push   esi
c0017846:	53                   	push   ebx
c0017847:	83 ec 14             	sub    esp,0x14
c001784a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001784f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017855:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001785b:	83 e0 04             	and    eax,0x4
c001785e:	0f b6 c0             	movzx  eax,al
c0017861:	85 c0                	test   eax,eax
c0017863:	0f 95 c0             	setne  al
c0017866:	0f b6 c0             	movzx  eax,al
c0017869:	85 c0                	test   eax,eax
c001786b:	74 4c                	je     c00178b9 <HalSystemIdle()+0x74>
c001786d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017872:	83 ec 08             	sub    esp,0x8
c0017875:	68 e1 00 00 00       	push   0xe1
c001787a:	50                   	push   eax
c001787b:	e8 62 f8 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017880:	83 c4 10             	add    esp,0x10
c0017883:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017887:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001788b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017890:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017894:	83 e2 02             	and    edx,0x2
c0017897:	89 d3                	mov    ebx,edx
c0017899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001789d:	83 e2 00             	and    edx,0x0
c00178a0:	89 d6                	mov    esi,edx
c00178a2:	56                   	push   esi
c00178a3:	53                   	push   ebx
c00178a4:	68 e1 00 00 00       	push   0xe1
c00178a9:	50                   	push   eax
c00178aa:	e8 5f f8 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00178af:	83 c4 10             	add    esp,0x10
c00178b2:	e8 dd 88 fe ff       	call   c0000194 <doTPAUSE>
c00178b7:	eb 01                	jmp    c00178ba <HalSystemIdle()+0x75>
c00178b9:	f4                   	hlt    
c00178ba:	90                   	nop
c00178bb:	83 c4 14             	add    esp,0x14
c00178be:	5b                   	pop    ebx
c00178bf:	5e                   	pop    esi
c00178c0:	c3                   	ret    

c00178c1 <displayProgramFault(char const*)>:
c00178c1:	83 ec 0c             	sub    esp,0xc
c00178c4:	83 ec 0c             	sub    esp,0xc
c00178c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178cb:	e8 3a 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178d0:	83 c4 10             	add    esp,0x10
c00178d3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00178d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00178da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00178dd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178e3:	85 c0                	test   eax,eax
c00178e5:	74 21                	je     c0017908 <displayProgramFault(char const*)+0x47>
c00178e7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00178ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00178ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00178f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178f7:	6a 04                	push   0x4
c00178f9:	6a 0f                	push   0xf
c00178fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178ff:	50                   	push   eax
c0017900:	e8 19 12 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017905:	83 c4 10             	add    esp,0x10
c0017908:	90                   	nop
c0017909:	83 c4 0c             	add    esp,0xc
c001790c:	c3                   	ret    

c001790d <gpFault(regs*, void*)>:
c001790d:	83 ec 1c             	sub    esp,0x1c
c0017910:	c7 05 74 97 02 c0 63 6d 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016d63
c001791a:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c001791f:	85 c0                	test   eax,eax
c0017921:	74 1e                	je     c0017941 <gpFault(regs*, void*)+0x34>
c0017923:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017928:	83 ec 0c             	sub    esp,0xc
c001792b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001792f:	ff d0                	call   eax
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017938:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001793d:	85 c0                	test   eax,eax
c001793f:	75 2e                	jne    c001796f <gpFault(regs*, void*)+0x62>
c0017941:	83 ec 0c             	sub    esp,0xc
c0017944:	68 9e 27 02 c0       	push   0xc002279e
c0017949:	e8 73 ff ff ff       	call   c00178c1 <displayProgramFault(char const*)>
c001794e:	83 c4 10             	add    esp,0x10
c0017951:	83 ec 0c             	sub    esp,0xc
c0017954:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017958:	e8 63 fb ff ff       	call   c00174c0 <displayDebugInfo(regs*)>
c001795d:	83 c4 10             	add    esp,0x10
c0017960:	83 ec 0c             	sub    esp,0xc
c0017963:	6a 00                	push   0x0
c0017965:	e8 9a ed ff ff       	call   c0016704 <Thr::terminateFromIRQ(int)>
c001796a:	83 c4 10             	add    esp,0x10
c001796d:	eb 01                	jmp    c0017970 <gpFault(regs*, void*)+0x63>
c001796f:	90                   	nop
c0017970:	83 c4 1c             	add    esp,0x1c
c0017973:	c3                   	ret    

c0017974 <pgFault(regs*, void*)>:
c0017974:	83 ec 1c             	sub    esp,0x1c
c0017977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001797b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001797e:	0f 20 d0             	mov    eax,cr2
c0017981:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017985:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017989:	83 ec 04             	sub    esp,0x4
c001798c:	52                   	push   edx
c001798d:	50                   	push   eax
c001798e:	68 7c 28 02 c0       	push   0xc002287c
c0017993:	e8 72 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017998:	83 c4 10             	add    esp,0x10
c001799b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00179a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00179a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00179a5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00179ab:	0f 20 d2             	mov    edx,cr2
c00179ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00179b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179b6:	83 ec 08             	sub    esp,0x8
c00179b9:	52                   	push   edx
c00179ba:	50                   	push   eax
c00179bb:	e8 ba 29 ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c00179c0:	83 c4 10             	add    esp,0x10
c00179c3:	0f b6 c0             	movzx  eax,al
c00179c6:	85 c0                	test   eax,eax
c00179c8:	75 2e                	jne    c00179f8 <pgFault(regs*, void*)+0x84>
c00179ca:	83 ec 0c             	sub    esp,0xc
c00179cd:	68 b7 27 02 c0       	push   0xc00227b7
c00179d2:	e8 ea fe ff ff       	call   c00178c1 <displayProgramFault(char const*)>
c00179d7:	83 c4 10             	add    esp,0x10
c00179da:	83 ec 0c             	sub    esp,0xc
c00179dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179e1:	e8 da fa ff ff       	call   c00174c0 <displayDebugInfo(regs*)>
c00179e6:	83 c4 10             	add    esp,0x10
c00179e9:	83 ec 0c             	sub    esp,0xc
c00179ec:	6a 00                	push   0x0
c00179ee:	e8 11 ed ff ff       	call   c0016704 <Thr::terminateFromIRQ(int)>
c00179f3:	83 c4 10             	add    esp,0x10
c00179f6:	eb 01                	jmp    c00179f9 <pgFault(regs*, void*)+0x85>
c00179f8:	90                   	nop
c00179f9:	83 c4 1c             	add    esp,0x1c
c00179fc:	c3                   	ret    

c00179fd <otherISRHandler(regs*, void*)>:
c00179fd:	83 ec 0c             	sub    esp,0xc
c0017a00:	83 ec 0c             	sub    esp,0xc
c0017a03:	68 a4 28 02 c0       	push   0xc00228a4
c0017a08:	e8 b4 fe ff ff       	call   c00178c1 <displayProgramFault(char const*)>
c0017a0d:	83 c4 10             	add    esp,0x10
c0017a10:	83 ec 0c             	sub    esp,0xc
c0017a13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a17:	e8 a4 fa ff ff       	call   c00174c0 <displayDebugInfo(regs*)>
c0017a1c:	83 c4 10             	add    esp,0x10
c0017a1f:	83 ec 0c             	sub    esp,0xc
c0017a22:	6a 00                	push   0x0
c0017a24:	e8 db ec ff ff       	call   c0016704 <Thr::terminateFromIRQ(int)>
c0017a29:	83 c4 10             	add    esp,0x10
c0017a2c:	90                   	nop
c0017a2d:	83 c4 0c             	add    esp,0xc
c0017a30:	c3                   	ret    

c0017a31 <opcodeFault(regs*, void*)>:
c0017a31:	55                   	push   ebp
c0017a32:	89 e5                	mov    ebp,esp
c0017a34:	83 ec 08             	sub    esp,0x8
c0017a37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a3a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a3d:	83 ec 08             	sub    esp,0x8
c0017a40:	50                   	push   eax
c0017a41:	68 c2 27 02 c0       	push   0xc00227c2
c0017a46:	e8 bf 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017a4b:	83 c4 10             	add    esp,0x10
c0017a4e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017a53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017a59:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017a5f:	0f b6 c0             	movzx  eax,al
c0017a62:	85 c0                	test   eax,eax
c0017a64:	74 21                	je     c0017a87 <opcodeFault(regs*, void*)+0x56>
c0017a66:	83 ec 0c             	sub    esp,0xc
c0017a69:	68 cc 28 02 c0       	push   0xc00228cc
c0017a6e:	e8 97 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017a73:	83 c4 10             	add    esp,0x10
c0017a76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a79:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a7c:	8d 50 19             	lea    edx,[eax+0x19]
c0017a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a82:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017a85:	eb 2b                	jmp    c0017ab2 <opcodeFault(regs*, void*)+0x81>
c0017a87:	83 ec 0c             	sub    esp,0xc
c0017a8a:	68 d0 27 02 c0       	push   0xc00227d0
c0017a8f:	e8 2d fe ff ff       	call   c00178c1 <displayProgramFault(char const*)>
c0017a94:	83 c4 10             	add    esp,0x10
c0017a97:	83 ec 0c             	sub    esp,0xc
c0017a9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017a9d:	e8 1e fa ff ff       	call   c00174c0 <displayDebugInfo(regs*)>
c0017aa2:	83 c4 10             	add    esp,0x10
c0017aa5:	83 ec 0c             	sub    esp,0xc
c0017aa8:	6a 00                	push   0x0
c0017aaa:	e8 55 ec ff ff       	call   c0016704 <Thr::terminateFromIRQ(int)>
c0017aaf:	83 c4 10             	add    esp,0x10
c0017ab2:	c9                   	leave  
c0017ab3:	c3                   	ret    

c0017ab4 <i386SaveCoprocessor(void*)>:
c0017ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ab8:	83 c0 3f             	add    eax,0x3f
c0017abb:	83 e0 c0             	and    eax,0xffffffc0
c0017abe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ac2:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017ac8 <i386LoadCoprocessor(void*)>:
c0017ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017acc:	83 c0 3f             	add    eax,0x3f
c0017acf:	83 e0 c0             	and    eax,0xffffffc0
c0017ad2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ad6:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017adc <x87EmulHandler(regs*, void*)>:
c0017adc:	53                   	push   ebx
c0017add:	83 ec 08             	sub    esp,0x8
c0017ae0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ae5:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017ae9:	74 10                	je     c0017afb <x87EmulHandler(regs*, void*)+0x1f>
c0017aeb:	83 ec 0c             	sub    esp,0xc
c0017aee:	68 dd 27 02 c0       	push   0xc00227dd
c0017af3:	e8 a1 97 ff ff       	call   c0011299 <KePanic(char const*)>
c0017af8:	83 c4 10             	add    esp,0x10
c0017afb:	0f 20 c0             	mov    eax,cr0
c0017afe:	a8 08                	test   al,0x8
c0017b00:	74 59                	je     c0017b5b <x87EmulHandler(regs*, void*)+0x7f>
c0017b02:	0f 06                	clts   
c0017b04:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017b09:	85 c0                	test   eax,eax
c0017b0b:	74 0e                	je     c0017b1b <x87EmulHandler(regs*, void*)+0x3f>
c0017b0d:	83 ec 0c             	sub    esp,0xc
c0017b10:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017b13:	e8 9c ff ff ff       	call   c0017ab4 <i386SaveCoprocessor(void*)>
c0017b18:	83 c4 10             	add    esp,0x10
c0017b1b:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017b21:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017b25:	75 12                	jne    c0017b39 <x87EmulHandler(regs*, void*)+0x5d>
c0017b27:	83 ec 0c             	sub    esp,0xc
c0017b2a:	68 40 02 00 00       	push   0x240
c0017b2f:	e8 9f ff fe ff       	call   c0007ad3 <malloc>
c0017b34:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017b37:	eb 10                	jmp    c0017b49 <x87EmulHandler(regs*, void*)+0x6d>
c0017b39:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017b3e:	83 ec 0c             	sub    esp,0xc
c0017b41:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017b44:	e8 7f ff ff ff       	call   c0017ac8 <i386LoadCoprocessor(void*)>
c0017b49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b4e:	83 c4 10             	add    esp,0x10
c0017b51:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017b56:	83 c4 08             	add    esp,0x8
c0017b59:	5b                   	pop    ebx
c0017b5a:	c3                   	ret    
c0017b5b:	83 ec 0c             	sub    esp,0xc
c0017b5e:	68 f1 27 02 c0       	push   0xc00227f1
c0017b63:	e8 a2 2d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017b68:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017b70:	83 c4 18             	add    esp,0x18
c0017b73:	5b                   	pop    ebx
c0017b74:	e9 8b eb ff ff       	jmp    c0016704 <Thr::terminateFromIRQ(int)>

c0017b79 <HalInitialiseCoprocessor()>:
c0017b79:	83 ec 10             	sub    esp,0x10
c0017b7c:	6a 00                	push   0x0
c0017b7e:	68 dc 7a 01 c0       	push   0xc0017adc
c0017b83:	6a 07                	push   0x7
c0017b85:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017b8f:	e8 a6 50 ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017b94:	e8 a7 70 00 00       	call   c001ec40 <avxDetect>
c0017b99:	83 c4 10             	add    esp,0x10
c0017b9c:	85 c0                	test   eax,eax
c0017b9e:	74 1c                	je     c0017bbc <HalInitialiseCoprocessor()+0x43>
c0017ba0:	c7 05 70 97 02 c0 6a ec 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ec6a
c0017baa:	c7 05 6c 97 02 c0 7b ec 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ec7b
c0017bb4:	83 c4 0c             	add    esp,0xc
c0017bb7:	e9 d0 70 00 00       	jmp    c001ec8c <avxInit>
c0017bbc:	e8 0f 74 00 00       	call   c001efd0 <absolutelyNoChanceInHell>
c0017bc1:	85 c0                	test   eax,eax
c0017bc3:	74 1c                	je     c0017be1 <HalInitialiseCoprocessor()+0x68>
c0017bc5:	c7 05 70 97 02 c0 e8 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001efe8
c0017bcf:	c7 05 6c 97 02 c0 f0 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001eff0
c0017bd9:	83 c4 0c             	add    esp,0xc
c0017bdc:	e9 17 74 00 00       	jmp    c001eff8 <sseInit>
c0017be1:	e8 30 74 00 00       	call   c001f016 <x87Detect>
c0017be6:	85 c0                	test   eax,eax
c0017be8:	74 1c                	je     c0017c06 <HalInitialiseCoprocessor()+0x8d>
c0017bea:	c7 05 70 97 02 c0 31 f0 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001f031
c0017bf4:	c7 05 6c 97 02 c0 38 f0 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001f038
c0017bfe:	83 c4 0c             	add    esp,0xc
c0017c01:	e9 39 74 00 00       	jmp    c001f03f <x87Init>
c0017c06:	c7 05 70 97 02 c0 8d 74 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001748d
c0017c10:	c7 05 6c 97 02 c0 8d 74 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001748d
c0017c1a:	0f 20 c0             	mov    eax,cr0
c0017c1d:	83 c8 04             	or     eax,0x4
c0017c20:	0f 22 c0             	mov    cr0,eax
c0017c23:	83 c4 0c             	add    esp,0xc
c0017c26:	c3                   	ret    

c0017c27 <HalPanic(char const*)>:
c0017c27:	53                   	push   ebx
c0017c28:	83 ec 10             	sub    esp,0x10
c0017c2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c2f:	fa                   	cli    
c0017c30:	53                   	push   ebx
c0017c31:	68 07 28 02 c0       	push   0xc0022807
c0017c36:	e8 cf 2c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017c3b:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017c40:	83 c4 10             	add    esp,0x10
c0017c43:	85 c0                	test   eax,eax
c0017c45:	74 09                	je     c0017c50 <HalPanic(char const*)+0x29>
c0017c47:	83 ec 0c             	sub    esp,0xc
c0017c4a:	53                   	push   ebx
c0017c4b:	ff d0                	call   eax
c0017c4d:	83 c4 10             	add    esp,0x10
c0017c50:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017c55:	85 c0                	test   eax,eax
c0017c57:	0f 84 dc 00 00 00    	je     c0017d39 <HalPanic(char const*)+0x112>
c0017c5d:	52                   	push   edx
c0017c5e:	6a 01                	push   0x1
c0017c60:	6a 0f                	push   0xf
c0017c62:	50                   	push   eax
c0017c63:	e8 62 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c68:	59                   	pop    ecx
c0017c69:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c6f:	e8 46 0b ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017c74:	58                   	pop    eax
c0017c75:	5a                   	pop    edx
c0017c76:	68 84 0a 02 c0       	push   0xc0020a84
c0017c7b:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c81:	e8 7c 09 ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017c86:	83 c4 0c             	add    esp,0xc
c0017c89:	6a 01                	push   0x1
c0017c8b:	6a 0f                	push   0xf
c0017c8d:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c93:	e8 32 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c98:	59                   	pop    ecx
c0017c99:	58                   	pop    eax
c0017c9a:	68 20 28 02 c0       	push   0xc0022820
c0017c9f:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ca5:	e8 02 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017caa:	83 c4 0c             	add    esp,0xc
c0017cad:	6a 0f                	push   0xf
c0017caf:	6a 01                	push   0x1
c0017cb1:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cb7:	e8 0e 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017cbc:	58                   	pop    eax
c0017cbd:	5a                   	pop    edx
c0017cbe:	68 29 28 02 c0       	push   0xc0022829
c0017cc3:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cc9:	e8 de 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017cce:	83 c4 0c             	add    esp,0xc
c0017cd1:	6a 01                	push   0x1
c0017cd3:	6a 0f                	push   0xf
c0017cd5:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cdb:	e8 ea 08 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017ce0:	59                   	pop    ecx
c0017ce1:	58                   	pop    eax
c0017ce2:	68 6d 28 02 c0       	push   0xc002286d
c0017ce7:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ced:	e8 ba 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017cf2:	58                   	pop    eax
c0017cf3:	5a                   	pop    edx
c0017cf4:	68 36 28 02 c0       	push   0xc0022836
c0017cf9:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cff:	e8 a8 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017d04:	59                   	pop    ecx
c0017d05:	58                   	pop    eax
c0017d06:	68 70 28 02 c0       	push   0xc0022870
c0017d0b:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d11:	e8 96 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017d16:	58                   	pop    eax
c0017d17:	5a                   	pop    edx
c0017d18:	53                   	push   ebx
c0017d19:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d1f:	e8 88 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017d24:	59                   	pop    ecx
c0017d25:	5b                   	pop    ebx
c0017d26:	68 6d 28 02 c0       	push   0xc002286d
c0017d2b:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d31:	e8 76 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017d36:	83 c4 10             	add    esp,0x10
c0017d39:	eb fe                	jmp    c0017d39 <HalPanic(char const*)+0x112>

c0017d3b <HalQueryPerformanceCounter()>:
c0017d3b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d40:	31 d2                	xor    edx,edx
c0017d42:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017d48:	31 c0                	xor    eax,eax
c0017d4a:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017d51:	74 02                	je     c0017d55 <HalQueryPerformanceCounter()+0x1a>
c0017d53:	0f 31                	rdtsc  
c0017d55:	c3                   	ret    

c0017d56 <HalInitialise()>:
c0017d56:	53                   	push   ebx
c0017d57:	83 ec 08             	sub    esp,0x8
c0017d5a:	e8 12 51 ff ff       	call   c000ce71 <setupINTS()>
c0017d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d64:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017d6b:	75 0f                	jne    c0017d7c <HalInitialise()+0x26>
c0017d6d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017d73:	83 e2 fe             	and    edx,0xfffffffe
c0017d76:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017d7c:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017d83:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017d89:	83 e2 fe             	and    edx,0xfffffffe
c0017d8c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017d92:	e8 a1 02 00 00       	call   c0018038 <picOpen()>
c0017d97:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017d9e:	74 0a                	je     c0017daa <HalInitialise()+0x54>
c0017da0:	e8 e3 01 00 00       	call   c0017f88 <picDisable()>
c0017da5:	e8 08 68 00 00       	call   c001e5b2 <apicOpen()>
c0017daa:	50                   	push   eax
c0017dab:	bb 0f 00 00 00       	mov    ebx,0xf
c0017db0:	6a 00                	push   0x0
c0017db2:	68 fd 79 01 c0       	push   0xc00179fd
c0017db7:	6a 00                	push   0x0
c0017db9:	e8 7c 4e ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dbe:	83 c4 0c             	add    esp,0xc
c0017dc1:	6a 00                	push   0x0
c0017dc3:	68 fd 79 01 c0       	push   0xc00179fd
c0017dc8:	6a 01                	push   0x1
c0017dca:	e8 6b 4e ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dcf:	83 c4 0c             	add    esp,0xc
c0017dd2:	6a 00                	push   0x0
c0017dd4:	68 8e 74 01 c0       	push   0xc001748e
c0017dd9:	6a 02                	push   0x2
c0017ddb:	e8 5a 4e ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017de0:	83 c4 0c             	add    esp,0xc
c0017de3:	6a 00                	push   0x0
c0017de5:	68 fd 79 01 c0       	push   0xc00179fd
c0017dea:	6a 03                	push   0x3
c0017dec:	e8 49 4e ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017df1:	83 c4 0c             	add    esp,0xc
c0017df4:	6a 00                	push   0x0
c0017df6:	68 fd 79 01 c0       	push   0xc00179fd
c0017dfb:	6a 04                	push   0x4
c0017dfd:	e8 38 4e ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e02:	83 c4 0c             	add    esp,0xc
c0017e05:	6a 00                	push   0x0
c0017e07:	68 fd 79 01 c0       	push   0xc00179fd
c0017e0c:	6a 05                	push   0x5
c0017e0e:	e8 27 4e ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e13:	83 c4 0c             	add    esp,0xc
c0017e16:	6a 00                	push   0x0
c0017e18:	68 31 7a 01 c0       	push   0xc0017a31
c0017e1d:	6a 06                	push   0x6
c0017e1f:	e8 16 4e ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e24:	83 c4 0c             	add    esp,0xc
c0017e27:	6a 00                	push   0x0
c0017e29:	68 a7 74 01 c0       	push   0xc00174a7
c0017e2e:	6a 08                	push   0x8
c0017e30:	e8 05 4e ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e35:	83 c4 0c             	add    esp,0xc
c0017e38:	6a 00                	push   0x0
c0017e3a:	68 fd 79 01 c0       	push   0xc00179fd
c0017e3f:	6a 09                	push   0x9
c0017e41:	e8 f4 4d ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e46:	83 c4 0c             	add    esp,0xc
c0017e49:	6a 00                	push   0x0
c0017e4b:	68 fd 79 01 c0       	push   0xc00179fd
c0017e50:	6a 0a                	push   0xa
c0017e52:	e8 e3 4d ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e57:	83 c4 0c             	add    esp,0xc
c0017e5a:	6a 00                	push   0x0
c0017e5c:	68 fd 79 01 c0       	push   0xc00179fd
c0017e61:	6a 0b                	push   0xb
c0017e63:	e8 d2 4d ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e68:	83 c4 0c             	add    esp,0xc
c0017e6b:	6a 00                	push   0x0
c0017e6d:	68 0d 79 01 c0       	push   0xc001790d
c0017e72:	6a 0d                	push   0xd
c0017e74:	e8 c1 4d ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e79:	83 c4 0c             	add    esp,0xc
c0017e7c:	6a 00                	push   0x0
c0017e7e:	68 74 79 01 c0       	push   0xc0017974
c0017e83:	6a 0e                	push   0xe
c0017e85:	e8 b0 4d ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e8a:	83 c4 10             	add    esp,0x10
c0017e8d:	50                   	push   eax
c0017e8e:	6a 00                	push   0x0
c0017e90:	68 fd 79 01 c0       	push   0xc00179fd
c0017e95:	53                   	push   ebx
c0017e96:	43                   	inc    ebx
c0017e97:	e8 9e 4d ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e9c:	83 c4 10             	add    esp,0x10
c0017e9f:	83 fb 1e             	cmp    ebx,0x1e
c0017ea2:	75 e9                	jne    c0017e8d <HalInitialise()+0x137>
c0017ea4:	50                   	push   eax
c0017ea5:	6a 00                	push   0x0
c0017ea7:	68 63 26 01 c0       	push   0xc0012663
c0017eac:	6a 60                	push   0x60
c0017eae:	e8 87 4d ff ff       	call   c000cc3a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017eb3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017eb8:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017ec2:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017ec9:	e8 05 fc fe ff       	call   c0007ad3 <malloc>
c0017ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ed1:	89 c3                	mov    ebx,eax
c0017ed3:	e8 38 09 00 00       	call   c0018810 <RTC::RTC()>
c0017ed8:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017ee2:	5a                   	pop    edx
c0017ee3:	59                   	pop    ecx
c0017ee4:	53                   	push   ebx
c0017ee5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017eeb:	e8 14 48 ff ff       	call   c000c704 <Device::addChild(Device*)>
c0017ef0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ef2:	6a 00                	push   0x0
c0017ef4:	6a 00                	push   0x0
c0017ef6:	6a 00                	push   0x0
c0017ef8:	53                   	push   ebx
c0017ef9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017efc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017f01:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017f07:	83 c4 28             	add    esp,0x28
c0017f0a:	5b                   	pop    ebx
c0017f0b:	c3                   	ret    

c0017f0c <HalMakeBeep(int)>:
c0017f0c:	53                   	push   ebx
c0017f0d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017f11:	85 db                	test   ebx,ebx
c0017f13:	75 07                	jne    c0017f1c <HalMakeBeep(int)+0x10>
c0017f15:	e4 61                	in     al,0x61
c0017f17:	83 e0 fc             	and    eax,0xfffffffc
c0017f1a:	eb 26                	jmp    c0017f42 <HalMakeBeep(int)+0x36>
c0017f1c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017f21:	99                   	cdq    
c0017f22:	f7 fb                	idiv   ebx
c0017f24:	89 c1                	mov    ecx,eax
c0017f26:	b0 b6                	mov    al,0xb6
c0017f28:	e6 43                	out    0x43,al
c0017f2a:	88 c8                	mov    al,cl
c0017f2c:	e6 42                	out    0x42,al
c0017f2e:	89 c8                	mov    eax,ecx
c0017f30:	c1 e8 08             	shr    eax,0x8
c0017f33:	e6 42                	out    0x42,al
c0017f35:	e4 61                	in     al,0x61
c0017f37:	89 c2                	mov    edx,eax
c0017f39:	83 ca 03             	or     edx,0x3
c0017f3c:	38 d0                	cmp    al,dl
c0017f3e:	74 04                	je     c0017f44 <HalMakeBeep(int)+0x38>
c0017f40:	88 d0                	mov    al,dl
c0017f42:	e6 61                	out    0x61,al
c0017f44:	5b                   	pop    ebx
c0017f45:	c3                   	ret    

c0017f46 <HalGetRand()>:
c0017f46:	31 c0                	xor    eax,eax
c0017f48:	c3                   	ret    

c0017f49 <HalEndOfInterrupt(int)>:
c0017f49:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017f50:	74 23                	je     c0017f75 <HalEndOfInterrupt(int)+0x2c>
c0017f52:	83 ec 14             	sub    esp,0x14
c0017f55:	6a 1b                	push   0x1b
c0017f57:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f5d:	e8 80 f1 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017f62:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017f67:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017f71:	83 c4 1c             	add    esp,0x1c
c0017f74:	c3                   	ret    
c0017f75:	e9 42 02 00 00       	jmp    c00181bc <picEOI(int)>

c0017f7a <HalRestart()>:
c0017f7a:	c3                   	ret    

c0017f7b <HalShutdown()>:
c0017f7b:	c3                   	ret    

c0017f7c <HalSleep()>:
c0017f7c:	c3                   	ret    
c0017f7d:	66 90                	xchg   ax,ax
c0017f7f:	90                   	nop

c0017f80 <picIoWait()>:
c0017f80:	eb 00                	jmp    c0017f82 <picIoWait()+0x2>
c0017f82:	eb 00                	jmp    c0017f84 <picIoWait()+0x4>
c0017f84:	90                   	nop
c0017f85:	c3                   	ret    
c0017f86:	66 90                	xchg   ax,ax

c0017f88 <picDisable()>:
c0017f88:	83 ec 10             	sub    esp,0x10
c0017f8b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017f92:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017f97:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f9b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017fa0:	ee                   	out    dx,al
c0017fa1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017fa8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017fad:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017fb1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017fb6:	ee                   	out    dx,al
c0017fb7:	90                   	nop
c0017fb8:	83 c4 10             	add    esp,0x10
c0017fbb:	c3                   	ret    

c0017fbc <picGetIRQReg(int)>:
c0017fbc:	83 ec 10             	sub    esp,0x10
c0017fbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fc3:	0f b6 c0             	movzx  eax,al
c0017fc6:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017fcd:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017fd1:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017fd5:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017fda:	ee                   	out    dx,al
c0017fdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fdf:	0f b6 c0             	movzx  eax,al
c0017fe2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017fe9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017fed:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017ff1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017ff6:	ee                   	out    dx,al
c0017ff7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017ffe:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018003:	89 c2                	mov    edx,eax
c0018005:	ec                   	in     al,dx
c0018006:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001800a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001800e:	0f b6 c0             	movzx  eax,al
c0018011:	c1 e0 08             	shl    eax,0x8
c0018014:	89 c1                	mov    ecx,eax
c0018016:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001801d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018022:	89 c2                	mov    edx,eax
c0018024:	ec                   	in     al,dx
c0018025:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018029:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001802d:	0f b6 c0             	movzx  eax,al
c0018030:	09 c8                	or     eax,ecx
c0018032:	83 c4 10             	add    esp,0x10
c0018035:	c3                   	ret    
c0018036:	66 90                	xchg   ax,ax

c0018038 <picOpen()>:
c0018038:	83 ec 50             	sub    esp,0x50
c001803b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018042:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018047:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001804b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001804f:	ee                   	out    dx,al
c0018050:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018057:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001805c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018060:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018064:	ee                   	out    dx,al
c0018065:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001806d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018075:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001807c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018080:	89 c2                	mov    edx,eax
c0018082:	ec                   	in     al,dx
c0018083:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018087:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001808b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001808f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018096:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001809a:	89 c2                	mov    edx,eax
c001809c:	ec                   	in     al,dx
c001809d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00180a1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00180a5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00180a9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00180b0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00180b5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00180b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180bd:	ee                   	out    dx,al
c00180be:	e8 bd fe ff ff       	call   c0017f80 <picIoWait()>
c00180c3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00180ca:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00180cf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00180d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180d7:	ee                   	out    dx,al
c00180d8:	e8 a3 fe ff ff       	call   c0017f80 <picIoWait()>
c00180dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00180e1:	0f b6 c0             	movzx  eax,al
c00180e4:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00180eb:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00180ef:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00180f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180f7:	ee                   	out    dx,al
c00180f8:	e8 83 fe ff ff       	call   c0017f80 <picIoWait()>
c00180fd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018101:	0f b6 c0             	movzx  eax,al
c0018104:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001810b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001810f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018113:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018117:	ee                   	out    dx,al
c0018118:	e8 63 fe ff ff       	call   c0017f80 <picIoWait()>
c001811d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018124:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018129:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001812d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018131:	ee                   	out    dx,al
c0018132:	e8 49 fe ff ff       	call   c0017f80 <picIoWait()>
c0018137:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001813e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018143:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018147:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001814b:	ee                   	out    dx,al
c001814c:	e8 2f fe ff ff       	call   c0017f80 <picIoWait()>
c0018151:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018158:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001815d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018161:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018165:	ee                   	out    dx,al
c0018166:	e8 15 fe ff ff       	call   c0017f80 <picIoWait()>
c001816b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018172:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018177:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001817b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001817f:	ee                   	out    dx,al
c0018180:	e8 fb fd ff ff       	call   c0017f80 <picIoWait()>
c0018185:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001818a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018191:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018195:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018199:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001819d:	ee                   	out    dx,al
c001819e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00181a3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00181aa:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00181ae:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00181b2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00181b6:	ee                   	out    dx,al
c00181b7:	90                   	nop
c00181b8:	83 c4 50             	add    esp,0x50
c00181bb:	c3                   	ret    

c00181bc <picEOI(int)>:
c00181bc:	83 ec 10             	sub    esp,0x10
c00181bf:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00181c4:	75 1e                	jne    c00181e4 <picEOI(int)+0x28>
c00181c6:	6a 0b                	push   0xb
c00181c8:	e8 ef fd ff ff       	call   c0017fbc <picGetIRQReg(int)>
c00181cd:	83 c4 04             	add    esp,0x4
c00181d0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00181d5:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00181da:	25 80 00 00 00       	and    eax,0x80
c00181df:	74 73                	je     c0018254 <picEOI(int)+0x98>
c00181e1:	8d 76 00             	lea    esi,[esi+0x0]
c00181e4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00181e9:	75 31                	jne    c001821c <picEOI(int)+0x60>
c00181eb:	6a 0b                	push   0xb
c00181ed:	e8 ca fd ff ff       	call   c0017fbc <picGetIRQReg(int)>
c00181f2:	83 c4 04             	add    esp,0x4
c00181f5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00181fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181fe:	98                   	cwde   
c00181ff:	85 c0                	test   eax,eax
c0018201:	78 19                	js     c001821c <picEOI(int)+0x60>
c0018203:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001820a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001820f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018213:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018218:	ee                   	out    dx,al
c0018219:	eb 3d                	jmp    c0018258 <picEOI(int)+0x9c>
c001821b:	90                   	nop
c001821c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018221:	7e 19                	jle    c001823c <picEOI(int)+0x80>
c0018223:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001822a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001822f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018233:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018238:	ee                   	out    dx,al
c0018239:	8d 76 00             	lea    esi,[esi+0x0]
c001823c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018243:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018248:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001824c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018251:	ee                   	out    dx,al
c0018252:	eb 04                	jmp    c0018258 <picEOI(int)+0x9c>
c0018254:	90                   	nop
c0018255:	8d 76 00             	lea    esi,[esi+0x0]
c0018258:	83 c4 10             	add    esp,0x10
c001825b:	c3                   	ret    

c001825c <RTC::open(int, int, void*)>:
c001825c:	31 c0                	xor    eax,eax
c001825e:	c3                   	ret    
c001825f:	90                   	nop

c0018260 <RTC::close(int, int, void*)>:
c0018260:	31 c0                	xor    eax,eax
c0018262:	c3                   	ret    
c0018263:	90                   	nop

c0018264 <RTC::timeInSecondsUTC()>:
c0018264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018268:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001826e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018274:	c3                   	ret    
c0018275:	90                   	nop

c0018276 <RTC::timeInDatetimeUTC()>:
c0018276:	53                   	push   ebx
c0018277:	83 ec 14             	sub    esp,0x14
c001827a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001827e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018282:	8b 10                	mov    edx,DWORD PTR [eax]
c0018284:	50                   	push   eax
c0018285:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018288:	83 c4 0c             	add    esp,0xc
c001828b:	52                   	push   edx
c001828c:	50                   	push   eax
c001828d:	53                   	push   ebx
c001828e:	e8 e5 41 ff ff       	call   c000c478 <secondsToDatetime(unsigned long long)>
c0018293:	89 d8                	mov    eax,ebx
c0018295:	83 c4 14             	add    esp,0x14
c0018298:	5b                   	pop    ebx
c0018299:	c2 04 00             	ret    0x4

c001829c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001829c:	56                   	push   esi
c001829d:	53                   	push   ebx
c001829e:	83 ec 14             	sub    esp,0x14
c00182a1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00182a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182a7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00182aa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00182ae:	52                   	push   edx
c00182af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182b7:	50                   	push   eax
c00182b8:	e8 bb 41 ff ff       	call   c000c478 <secondsToDatetime(unsigned long long)>
c00182bd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00182c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00182c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00182cd:	89 f0                	mov    eax,esi
c00182cf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00182d3:	83 c4 20             	add    esp,0x20
c00182d6:	5b                   	pop    ebx
c00182d7:	5e                   	pop    esi
c00182d8:	ff e0                	jmp    eax

c00182da <RTC::~RTC()>:
c00182da:	83 ec 0c             	sub    esp,0xc
c00182dd:	ba 0c 29 02 c0       	mov    edx,0xc002290c
c00182e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e6:	89 10                	mov    DWORD PTR [eax],edx
c00182e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ec:	83 ec 0c             	sub    esp,0xc
c00182ef:	50                   	push   eax
c00182f0:	e8 0f 3f ff ff       	call   c000c204 <Clock::~Clock()>
c00182f5:	83 c4 10             	add    esp,0x10
c00182f8:	90                   	nop
c00182f9:	83 c4 0c             	add    esp,0xc
c00182fc:	c3                   	ret    
c00182fd:	90                   	nop

c00182fe <RTC::~RTC()>:
c00182fe:	83 ec 0c             	sub    esp,0xc
c0018301:	83 ec 0c             	sub    esp,0xc
c0018304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018308:	e8 cd ff ff ff       	call   c00182da <RTC::~RTC()>
c001830d:	83 c4 10             	add    esp,0x10
c0018310:	83 ec 08             	sub    esp,0x8
c0018313:	68 60 01 00 00       	push   0x160
c0018318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001831c:	e8 eb 24 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018321:	83 c4 10             	add    esp,0x10
c0018324:	83 c4 0c             	add    esp,0xc
c0018327:	c3                   	ret    

c0018328 <RTC::get_update_in_progress_flag()>:
c0018328:	83 ec 14             	sub    esp,0x14
c001832b:	6a 0a                	push   0xa
c001832d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018333:	e8 62 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018338:	83 c4 1c             	add    esp,0x1c
c001833b:	0f b6 c0             	movzx  eax,al
c001833e:	c1 e8 07             	shr    eax,0x7
c0018341:	c3                   	ret    

c0018342 <RTC::completeRTCRefresh()>:
c0018342:	55                   	push   ebp
c0018343:	57                   	push   edi
c0018344:	56                   	push   esi
c0018345:	53                   	push   ebx
c0018346:	83 ec 3c             	sub    esp,0x3c
c0018349:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c001834f:	83 ec 0c             	sub    esp,0xc
c0018352:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018356:	e8 cd ff ff ff       	call   c0018328 <RTC::get_update_in_progress_flag()>
c001835b:	83 c4 10             	add    esp,0x10
c001835e:	84 c0                	test   al,al
c0018360:	74 0e                	je     c0018370 <RTC::completeRTCRefresh()+0x2e>
c0018362:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018368:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c001836e:	73 df                	jae    c001834f <RTC::completeRTCRefresh()+0xd>
c0018370:	50                   	push   eax
c0018371:	50                   	push   eax
c0018372:	6a 00                	push   0x0
c0018374:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001837a:	e8 1b ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001837f:	89 c7                	mov    edi,eax
c0018381:	58                   	pop    eax
c0018382:	5a                   	pop    edx
c0018383:	6a 02                	push   0x2
c0018385:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001838b:	e8 0a ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018390:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018394:	59                   	pop    ecx
c0018395:	5b                   	pop    ebx
c0018396:	6a 04                	push   0x4
c0018398:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001839e:	e8 f7 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183a3:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00183a7:	5e                   	pop    esi
c00183a8:	5d                   	pop    ebp
c00183a9:	6a 07                	push   0x7
c00183ab:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183b1:	e8 e4 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183b6:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00183ba:	58                   	pop    eax
c00183bb:	5a                   	pop    edx
c00183bc:	6a 08                	push   0x8
c00183be:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183c4:	e8 d1 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183c9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00183cd:	59                   	pop    ecx
c00183ce:	5b                   	pop    ebx
c00183cf:	6a 09                	push   0x9
c00183d1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183d7:	e8 be ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183dc:	0f b6 c0             	movzx  eax,al
c00183df:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00183e3:	83 c4 10             	add    esp,0x10
c00183e6:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00183ec:	83 ec 0c             	sub    esp,0xc
c00183ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00183f3:	e8 30 ff ff ff       	call   c0018328 <RTC::get_update_in_progress_flag()>
c00183f8:	83 c4 10             	add    esp,0x10
c00183fb:	84 c0                	test   al,al
c00183fd:	74 0e                	je     c001840d <RTC::completeRTCRefresh()+0xcb>
c00183ff:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018405:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c001840b:	73 df                	jae    c00183ec <RTC::completeRTCRefresh()+0xaa>
c001840d:	51                   	push   ecx
c001840e:	51                   	push   ecx
c001840f:	6a 00                	push   0x0
c0018411:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018417:	e8 7e ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001841c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018420:	5b                   	pop    ebx
c0018421:	5e                   	pop    esi
c0018422:	6a 02                	push   0x2
c0018424:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001842a:	e8 6b ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001842f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018433:	5d                   	pop    ebp
c0018434:	58                   	pop    eax
c0018435:	6a 04                	push   0x4
c0018437:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001843d:	e8 58 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018442:	88 c3                	mov    bl,al
c0018444:	58                   	pop    eax
c0018445:	5a                   	pop    edx
c0018446:	6a 07                	push   0x7
c0018448:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001844e:	e8 47 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018453:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018457:	59                   	pop    ecx
c0018458:	5e                   	pop    esi
c0018459:	6a 08                	push   0x8
c001845b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018461:	e8 34 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018466:	5d                   	pop    ebp
c0018467:	89 c6                	mov    esi,eax
c0018469:	58                   	pop    eax
c001846a:	6a 09                	push   0x9
c001846c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018472:	e8 23 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018477:	89 f9                	mov    ecx,edi
c0018479:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001847d:	83 c4 10             	add    esp,0x10
c0018480:	0f b6 e8             	movzx  ebp,al
c0018483:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018488:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001848c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018490:	74 27                	je     c00184b9 <RTC::completeRTCRefresh()+0x177>
c0018492:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018496:	89 f0                	mov    eax,esi
c0018498:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001849c:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00184a0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00184a4:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00184a8:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00184ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00184b0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00184b4:	e9 2d ff ff ff       	jmp    c00183e6 <RTC::completeRTCRefresh()+0xa4>
c00184b9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00184be:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00184c2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00184c6:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c00184ca:	75 c6                	jne    c0018492 <RTC::completeRTCRefresh()+0x150>
c00184cc:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00184d1:	89 f1                	mov    ecx,esi
c00184d3:	0f b6 fb             	movzx  edi,bl
c00184d6:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00184da:	0f b6 c9             	movzx  ecx,cl
c00184dd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00184e1:	89 f1                	mov    ecx,esi
c00184e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00184e7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00184eb:	0f 94 c2             	sete   dl
c00184ee:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00184f2:	0f 94 c0             	sete   al
c00184f5:	21 d0                	and    eax,edx
c00184f7:	31 d2                	xor    edx,edx
c00184f9:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00184fd:	0f 94 c2             	sete   dl
c0018500:	85 c2                	test   edx,eax
c0018502:	74 8e                	je     c0018492 <RTC::completeRTCRefresh()+0x150>
c0018504:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018508:	75 88                	jne    c0018492 <RTC::completeRTCRefresh()+0x150>
c001850a:	52                   	push   edx
c001850b:	52                   	push   edx
c001850c:	6a 0b                	push   0xb
c001850e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018514:	e8 81 ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018519:	83 c4 10             	add    esp,0x10
c001851c:	a8 04                	test   al,0x4
c001851e:	75 7a                	jne    c001859a <RTC::completeRTCRefresh()+0x258>
c0018520:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018524:	c1 ef 04             	shr    edi,0x4
c0018527:	83 e6 0f             	and    esi,0xf
c001852a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001852e:	c1 ed 04             	shr    ebp,0x4
c0018531:	6b ed 0a             	imul   ebp,ebp,0xa
c0018534:	c1 ea 04             	shr    edx,0x4
c0018537:	6b d2 0a             	imul   edx,edx,0xa
c001853a:	83 e1 0f             	and    ecx,0xf
c001853d:	01 d1                	add    ecx,edx
c001853f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018543:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001854b:	c1 ea 04             	shr    edx,0x4
c001854e:	6b d2 0a             	imul   edx,edx,0xa
c0018551:	83 e1 0f             	and    ecx,0xf
c0018554:	01 d1                	add    ecx,edx
c0018556:	89 fa                	mov    edx,edi
c0018558:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001855c:	83 e2 07             	and    edx,0x7
c001855f:	89 d9                	mov    ecx,ebx
c0018561:	6b d2 0a             	imul   edx,edx,0xa
c0018564:	83 e1 0f             	and    ecx,0xf
c0018567:	83 e3 80             	and    ebx,0xffffff80
c001856a:	01 d1                	add    ecx,edx
c001856c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018570:	09 cb                	or     ebx,ecx
c0018572:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018576:	c1 ea 04             	shr    edx,0x4
c0018579:	6b d2 0a             	imul   edx,edx,0xa
c001857c:	83 e1 0f             	and    ecx,0xf
c001857f:	01 d1                	add    ecx,edx
c0018581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018585:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018589:	c1 ea 04             	shr    edx,0x4
c001858c:	6b d2 0a             	imul   edx,edx,0xa
c001858f:	01 d6                	add    esi,edx
c0018591:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018595:	83 e2 0f             	and    edx,0xf
c0018598:	01 d5                	add    ebp,edx
c001859a:	a8 02                	test   al,0x2
c001859c:	75 15                	jne    c00185b3 <RTC::completeRTCRefresh()+0x271>
c001859e:	f6 c3 80             	test   bl,0x80
c00185a1:	74 10                	je     c00185b3 <RTC::completeRTCRefresh()+0x271>
c00185a3:	83 e3 7f             	and    ebx,0x7f
c00185a6:	b9 18 00 00 00       	mov    ecx,0x18
c00185ab:	8d 43 0c             	lea    eax,[ebx+0xc]
c00185ae:	99                   	cdq    
c00185af:	f7 f9                	idiv   ecx
c00185b1:	88 d3                	mov    bl,dl
c00185b3:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00185b9:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00185bf:	77 06                	ja     c00185c7 <RTC::completeRTCRefresh()+0x285>
c00185c1:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00185c7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00185cc:	31 c9                	xor    ecx,ecx
c00185ce:	31 d2                	xor    edx,edx
c00185d0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00185d4:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00185d8:	89 cd                	mov    ebp,ecx
c00185da:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c00185de:	c1 e7 10             	shl    edi,0x10
c00185e1:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00185e7:	c1 e0 10             	shl    eax,0x10
c00185ea:	09 c5                	or     ebp,eax
c00185ec:	89 e9                	mov    ecx,ebp
c00185ee:	0f b7 c2             	movzx  eax,dx
c00185f1:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00185f5:	09 f8                	or     eax,edi
c00185f7:	89 c2                	mov    edx,eax
c00185f9:	50                   	push   eax
c00185fa:	50                   	push   eax
c00185fb:	88 d9                	mov    cl,bl
c00185fd:	51                   	push   ecx
c00185fe:	52                   	push   edx
c00185ff:	e8 ef 3c ff ff       	call   c000c2f3 <datetimeToSeconds(datetime_t)>
c0018604:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018608:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001860e:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018614:	83 c4 4c             	add    esp,0x4c
c0018617:	5b                   	pop    ebx
c0018618:	5e                   	pop    esi
c0018619:	5f                   	pop    edi
c001861a:	5d                   	pop    ebp
c001861b:	c3                   	ret    

c001861c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001861c:	55                   	push   ebp
c001861d:	57                   	push   edi
c001861e:	56                   	push   esi
c001861f:	53                   	push   ebx
c0018620:	83 ec 30             	sub    esp,0x30
c0018623:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018627:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001862b:	6a 00                	push   0x0
c001862d:	6a 00                	push   0x0
c001862f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018635:	e8 78 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001863a:	83 c4 0c             	add    esp,0xc
c001863d:	6a 00                	push   0x0
c001863f:	6a 02                	push   0x2
c0018641:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018647:	e8 66 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001864c:	89 f8                	mov    eax,edi
c001864e:	89 f9                	mov    ecx,edi
c0018650:	0f b6 c4             	movzx  eax,ah
c0018653:	31 d2                	xor    edx,edx
c0018655:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018659:	c1 e9 10             	shr    ecx,0x10
c001865c:	89 f0                	mov    eax,esi
c001865e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018662:	89 f0                	mov    eax,esi
c0018664:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018668:	0f b6 c4             	movzx  eax,ah
c001866b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001866f:	89 f0                	mov    eax,esi
c0018671:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018675:	c1 e8 10             	shr    eax,0x10
c0018678:	b9 64 00 00 00       	mov    ecx,0x64
c001867d:	f7 f1                	div    ecx
c001867f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018683:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018687:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001868b:	59                   	pop    ecx
c001868c:	5b                   	pop    ebx
c001868d:	89 fb                	mov    ebx,edi
c001868f:	6a 0b                	push   0xb
c0018691:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018697:	e8 fe ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001869c:	83 c4 10             	add    esp,0x10
c001869f:	a8 04                	test   al,0x4
c00186a1:	89 c5                	mov    ebp,eax
c00186a3:	75 6e                	jne    c0018713 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00186a5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00186a9:	31 d2                	xor    edx,edx
c00186ab:	0f b6 c1             	movzx  eax,cl
c00186ae:	b9 0a 00 00 00       	mov    ecx,0xa
c00186b3:	f7 f1                	div    ecx
c00186b5:	c1 e0 04             	shl    eax,0x4
c00186b8:	09 d0                	or     eax,edx
c00186ba:	31 d2                	xor    edx,edx
c00186bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00186c0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00186c5:	f7 f1                	div    ecx
c00186c7:	c1 e0 04             	shl    eax,0x4
c00186ca:	09 d0                	or     eax,edx
c00186cc:	31 d2                	xor    edx,edx
c00186ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00186d2:	0f b6 c3             	movzx  eax,bl
c00186d5:	f7 f1                	div    ecx
c00186d7:	c1 e0 04             	shl    eax,0x4
c00186da:	09 d0                	or     eax,edx
c00186dc:	31 d2                	xor    edx,edx
c00186de:	89 c3                	mov    ebx,eax
c00186e0:	89 f0                	mov    eax,esi
c00186e2:	0f b6 c0             	movzx  eax,al
c00186e5:	f7 f1                	div    ecx
c00186e7:	c1 e0 04             	shl    eax,0x4
c00186ea:	09 d0                	or     eax,edx
c00186ec:	31 d2                	xor    edx,edx
c00186ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00186f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00186f7:	f7 f1                	div    ecx
c00186f9:	c1 e0 04             	shl    eax,0x4
c00186fc:	09 d0                	or     eax,edx
c00186fe:	31 d2                	xor    edx,edx
c0018700:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018704:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018708:	f7 f1                	div    ecx
c001870a:	c1 e0 04             	shl    eax,0x4
c001870d:	09 d0                	or     eax,edx
c001870f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018713:	83 e5 02             	and    ebp,0x2
c0018716:	75 1e                	jne    c0018736 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018718:	0f b6 c3             	movzx  eax,bl
c001871b:	83 f8 0b             	cmp    eax,0xb
c001871e:	76 10                	jbe    c0018730 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018720:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018723:	84 d2                	test   dl,dl
c0018725:	88 d3                	mov    bl,dl
c0018727:	75 02                	jne    c001872b <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018729:	b3 0c                	mov    bl,0xc
c001872b:	83 cb 80             	or     ebx,0xffffff80
c001872e:	eb 06                	jmp    c0018736 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018730:	85 c0                	test   eax,eax
c0018732:	75 02                	jne    c0018736 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018734:	b3 0c                	mov    bl,0xc
c0018736:	50                   	push   eax
c0018737:	0f b6 db             	movzx  ebx,bl
c001873a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001873f:	52                   	push   edx
c0018740:	6a 00                	push   0x0
c0018742:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018748:	e8 65 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001874d:	83 c4 0c             	add    esp,0xc
c0018750:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018755:	50                   	push   eax
c0018756:	6a 02                	push   0x2
c0018758:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001875e:	e8 4f eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018763:	83 c4 0c             	add    esp,0xc
c0018766:	53                   	push   ebx
c0018767:	6a 04                	push   0x4
c0018769:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001876f:	e8 3e eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018774:	83 c4 0c             	add    esp,0xc
c0018777:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001877c:	52                   	push   edx
c001877d:	6a 07                	push   0x7
c001877f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018785:	e8 28 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001878a:	83 c4 0c             	add    esp,0xc
c001878d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018792:	50                   	push   eax
c0018793:	6a 08                	push   0x8
c0018795:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001879b:	e8 12 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00187a0:	83 c4 0c             	add    esp,0xc
c00187a3:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00187a8:	55                   	push   ebp
c00187a9:	6a 09                	push   0x9
c00187ab:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187b1:	e8 fc ea fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00187b6:	5a                   	pop    edx
c00187b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00187bb:	e8 82 fb ff ff       	call   c0018342 <RTC::completeRTCRefresh()>
c00187c0:	83 c4 3c             	add    esp,0x3c
c00187c3:	b0 01                	mov    al,0x1
c00187c5:	5b                   	pop    ebx
c00187c6:	5e                   	pop    esi
c00187c7:	5f                   	pop    edi
c00187c8:	5d                   	pop    ebp
c00187c9:	c3                   	ret    

c00187ca <rtcIRQHandler(regs*, void*)>:
c00187ca:	53                   	push   ebx
c00187cb:	83 ec 10             	sub    esp,0x10
c00187ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00187d2:	6a 0c                	push   0xc
c00187d4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187da:	e8 bb e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187df:	83 c4 10             	add    esp,0x10
c00187e2:	a8 80                	test   al,0x80
c00187e4:	74 24                	je     c001880a <rtcIRQHandler(regs*, void*)+0x40>
c00187e6:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00187ed:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00187f4:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c00187fb:	75 0d                	jne    c001880a <rtcIRQHandler(regs*, void*)+0x40>
c00187fd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018801:	83 c4 08             	add    esp,0x8
c0018804:	5b                   	pop    ebx
c0018805:	e9 38 fb ff ff       	jmp    c0018342 <RTC::completeRTCRefresh()>
c001880a:	83 c4 08             	add    esp,0x8
c001880d:	5b                   	pop    ebx
c001880e:	c3                   	ret    
c001880f:	90                   	nop

c0018810 <RTC::RTC()>:
c0018810:	83 ec 1c             	sub    esp,0x1c
c0018813:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018817:	83 ec 08             	sub    esp,0x8
c001881a:	68 ef 28 02 c0       	push   0xc00228ef
c001881f:	50                   	push   eax
c0018820:	e8 a9 39 ff ff       	call   c000c1ce <Clock::Clock(char const*)>
c0018825:	83 c4 10             	add    esp,0x10
c0018828:	ba 0c 29 02 c0       	mov    edx,0xc002290c
c001882d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018831:	89 10                	mov    DWORD PTR [eax],edx
c0018833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018837:	83 ec 0c             	sub    esp,0xc
c001883a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001883e:	6a 01                	push   0x1
c0018840:	68 ca 87 01 c0       	push   0xc00187ca
c0018845:	6a 08                	push   0x8
c0018847:	50                   	push   eax
c0018848:	e8 63 3e ff ff       	call   c000c6b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001884d:	83 c4 20             	add    esp,0x20
c0018850:	89 c2                	mov    edx,eax
c0018852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018856:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001885c:	fa                   	cli    
c001885d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018862:	83 c0 01             	add    eax,0x1
c0018865:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001886a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001886f:	83 ec 08             	sub    esp,0x8
c0018872:	6a 0b                	push   0xb
c0018874:	50                   	push   eax
c0018875:	e8 20 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001887a:	83 c4 10             	add    esp,0x10
c001887d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018881:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018886:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001888a:	83 ca 10             	or     edx,0x10
c001888d:	0f b6 d2             	movzx  edx,dl
c0018890:	83 ec 04             	sub    esp,0x4
c0018893:	52                   	push   edx
c0018894:	6a 0b                	push   0xb
c0018896:	50                   	push   eax
c0018897:	e8 16 ea fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001889c:	83 c4 10             	add    esp,0x10
c001889f:	83 ec 0c             	sub    esp,0xc
c00188a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188a6:	e8 97 fa ff ff       	call   c0018342 <RTC::completeRTCRefresh()>
c00188ab:	83 c4 10             	add    esp,0x10
c00188ae:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00188b3:	83 e8 01             	sub    eax,0x1
c00188b6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00188bb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00188c0:	85 c0                	test   eax,eax
c00188c2:	75 01                	jne    c00188c5 <RTC::RTC()+0xb5>
c00188c4:	fb                   	sti    
c00188c5:	90                   	nop
c00188c6:	83 c4 1c             	add    esp,0x1c
c00188c9:	c3                   	ret    
c00188ca:	66 90                	xchg   ax,ax

c00188cc <HalConsoleScroll(int, int)>:
c00188cc:	83 ec 10             	sub    esp,0x10
c00188cf:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00188d7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00188df:	90                   	nop
c00188e0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00188e5:	0f 8f e1 00 00 00    	jg     c00189cc <HalConsoleScroll(int, int)+0x100>
c00188eb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00188f3:	90                   	nop
c00188f4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00188fc:	0f 8f be 00 00 00    	jg     c00189c0 <HalConsoleScroll(int, int)+0xf4>
c0018902:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018906:	89 d0                	mov    eax,edx
c0018908:	c1 e0 02             	shl    eax,0x2
c001890b:	01 d0                	add    eax,edx
c001890d:	c1 e0 05             	shl    eax,0x5
c0018910:	89 c2                	mov    edx,eax
c0018912:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018916:	01 d0                	add    eax,edx
c0018918:	89 c2                	mov    edx,eax
c001891a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001891e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018921:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018925:	89 d0                	mov    eax,edx
c0018927:	c1 e0 02             	shl    eax,0x2
c001892a:	01 d0                	add    eax,edx
c001892c:	c1 e0 05             	shl    eax,0x5
c001892f:	89 c2                	mov    edx,eax
c0018931:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018935:	01 d0                	add    eax,edx
c0018937:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001893d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018941:	01 d0                	add    eax,edx
c0018943:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018945:	88 10                	mov    BYTE PTR [eax],dl
c0018947:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001894c:	75 66                	jne    c00189b4 <HalConsoleScroll(int, int)+0xe8>
c001894e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018952:	83 e0 01             	and    eax,0x1
c0018955:	74 39                	je     c0018990 <HalConsoleScroll(int, int)+0xc4>
c0018957:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001895b:	83 e0 0f             	and    eax,0xf
c001895e:	88 c2                	mov    dl,al
c0018960:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018964:	c1 e0 04             	shl    eax,0x4
c0018967:	09 d0                	or     eax,edx
c0018969:	88 c1                	mov    cl,al
c001896b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001896f:	89 d0                	mov    eax,edx
c0018971:	c1 e0 02             	shl    eax,0x2
c0018974:	01 d0                	add    eax,edx
c0018976:	c1 e0 05             	shl    eax,0x5
c0018979:	89 c2                	mov    edx,eax
c001897b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001897f:	01 d0                	add    eax,edx
c0018981:	89 c2                	mov    edx,eax
c0018983:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018987:	01 d0                	add    eax,edx
c0018989:	88 ca                	mov    dl,cl
c001898b:	88 10                	mov    BYTE PTR [eax],dl
c001898d:	eb 25                	jmp    c00189b4 <HalConsoleScroll(int, int)+0xe8>
c001898f:	90                   	nop
c0018990:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018994:	89 d0                	mov    eax,edx
c0018996:	c1 e0 02             	shl    eax,0x2
c0018999:	01 d0                	add    eax,edx
c001899b:	c1 e0 05             	shl    eax,0x5
c001899e:	89 c2                	mov    edx,eax
c00189a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189a4:	01 d0                	add    eax,edx
c00189a6:	89 c2                	mov    edx,eax
c00189a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189ac:	01 d0                	add    eax,edx
c00189ae:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00189b1:	8d 76 00             	lea    esi,[esi+0x0]
c00189b4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00189b9:	e9 36 ff ff ff       	jmp    c00188f4 <HalConsoleScroll(int, int)+0x28>
c00189be:	66 90                	xchg   ax,ax
c00189c0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00189c5:	e9 16 ff ff ff       	jmp    c00188e0 <HalConsoleScroll(int, int)+0x14>
c00189ca:	66 90                	xchg   ax,ax
c00189cc:	90                   	nop
c00189cd:	83 c4 10             	add    esp,0x10
c00189d0:	c3                   	ret    
c00189d1:	8d 76 00             	lea    esi,[esi+0x0]

c00189d4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00189d4:	83 ec 14             	sub    esp,0x14
c00189d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00189db:	88 04 24             	mov    BYTE PTR [esp],al
c00189de:	8a 04 24             	mov    al,BYTE PTR [esp]
c00189e1:	0f b6 c0             	movzx  eax,al
c00189e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189e8:	89 d1                	mov    ecx,edx
c00189ea:	83 e1 0f             	and    ecx,0xf
c00189ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00189f1:	c1 e2 04             	shl    edx,0x4
c00189f4:	0f b6 d2             	movzx  edx,dl
c00189f7:	09 ca                	or     edx,ecx
c00189f9:	c1 e2 08             	shl    edx,0x8
c00189fc:	09 d0                	or     eax,edx
c00189fe:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018a03:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018a0b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a0f:	89 d0                	mov    eax,edx
c0018a11:	c1 e0 02             	shl    eax,0x2
c0018a14:	01 d0                	add    eax,edx
c0018a16:	c1 e0 04             	shl    eax,0x4
c0018a19:	89 c2                	mov    edx,eax
c0018a1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a1f:	01 d0                	add    eax,edx
c0018a21:	d1 e0                	shl    eax,1
c0018a23:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018a27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a2b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018a30:	66 89 10             	mov    WORD PTR [eax],dx
c0018a33:	90                   	nop
c0018a34:	83 c4 14             	add    esp,0x14
c0018a37:	c3                   	ret    

c0018a38 <HalConsoleCursorUpdate(int, int)>:
c0018a38:	83 ec 20             	sub    esp,0x20
c0018a3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a3f:	89 c2                	mov    edx,eax
c0018a41:	c1 e2 02             	shl    edx,0x2
c0018a44:	01 d0                	add    eax,edx
c0018a46:	c1 e0 04             	shl    eax,0x4
c0018a49:	89 c2                	mov    edx,eax
c0018a4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a4f:	01 d0                	add    eax,edx
c0018a51:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018a56:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018a5d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018a62:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018a66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a6a:	ee                   	out    dx,al
c0018a6b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018a70:	0f b6 c0             	movzx  eax,al
c0018a73:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018a7a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018a7e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018a82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a86:	ee                   	out    dx,al
c0018a87:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018a8e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018a93:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018a97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a9b:	ee                   	out    dx,al
c0018a9c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018aa1:	c1 e8 08             	shr    eax,0x8
c0018aa4:	0f b6 c0             	movzx  eax,al
c0018aa7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018aae:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018ab2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018ab6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018aba:	ee                   	out    dx,al
c0018abb:	90                   	nop
c0018abc:	83 c4 20             	add    esp,0x20
c0018abf:	c3                   	ret    

c0018ac0 <FAT::getName()>:
c0018ac0:	b8 40 29 02 c0       	mov    eax,0xc0022940
c0018ac5:	c3                   	ret    
c0018ac6:	66 90                	xchg   ax,ax

c0018ac8 <FAT::tell(void*, unsigned long long*)>:
c0018ac8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018acd:	75 09                	jne    c0018ad8 <FAT::tell(void*, unsigned long long*)+0x10>
c0018acf:	b8 04 00 00 00       	mov    eax,0x4
c0018ad4:	c3                   	ret    
c0018ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ad8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018add:	75 09                	jne    c0018ae8 <FAT::tell(void*, unsigned long long*)+0x20>
c0018adf:	b8 04 00 00 00       	mov    eax,0x4
c0018ae4:	c3                   	ret    
c0018ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ae8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018aef:	ba 00 00 00 00       	mov    edx,0x0
c0018af4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018af8:	89 01                	mov    DWORD PTR [ecx],eax
c0018afa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018afd:	b8 00 00 00 00       	mov    eax,0x0
c0018b02:	c3                   	ret    
c0018b03:	90                   	nop

c0018b04 <FAT::stat(void*, unsigned long long*)>:
c0018b04:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018b09:	75 09                	jne    c0018b14 <FAT::stat(void*, unsigned long long*)+0x10>
c0018b0b:	b8 04 00 00 00       	mov    eax,0x4
c0018b10:	c3                   	ret    
c0018b11:	8d 76 00             	lea    esi,[esi+0x0]
c0018b14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b19:	75 09                	jne    c0018b24 <FAT::stat(void*, unsigned long long*)+0x20>
c0018b1b:	b8 04 00 00 00       	mov    eax,0x4
c0018b20:	c3                   	ret    
c0018b21:	8d 76 00             	lea    esi,[esi+0x0]
c0018b24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b2b:	ba 00 00 00 00       	mov    edx,0x0
c0018b30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b34:	89 01                	mov    DWORD PTR [ecx],eax
c0018b36:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018b39:	b8 00 00 00 00       	mov    eax,0x0
c0018b3e:	c3                   	ret    
c0018b3f:	90                   	nop

c0018b40 <FAT::~FAT()>:
c0018b40:	83 ec 0c             	sub    esp,0xc
c0018b43:	ba 8c 29 02 c0       	mov    edx,0xc002298c
c0018b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b4c:	89 10                	mov    DWORD PTR [eax],edx
c0018b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b52:	83 ec 0c             	sub    esp,0xc
c0018b55:	50                   	push   eax
c0018b56:	e8 c7 29 ff ff       	call   c000b522 <Filesystem::~Filesystem()>
c0018b5b:	83 c4 10             	add    esp,0x10
c0018b5e:	90                   	nop
c0018b5f:	83 c4 0c             	add    esp,0xc
c0018b62:	c3                   	ret    
c0018b63:	90                   	nop

c0018b64 <FAT::~FAT()>:
c0018b64:	83 ec 0c             	sub    esp,0xc
c0018b67:	83 ec 0c             	sub    esp,0xc
c0018b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b6e:	e8 cd ff ff ff       	call   c0018b40 <FAT::~FAT()>
c0018b73:	83 c4 10             	add    esp,0x10
c0018b76:	83 ec 08             	sub    esp,0x8
c0018b79:	6a 08                	push   0x8
c0018b7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b7f:	e8 88 1c ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018b84:	83 c4 10             	add    esp,0x10
c0018b87:	83 c4 0c             	add    esp,0xc
c0018b8a:	c3                   	ret    
c0018b8b:	90                   	nop

c0018b8c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018b8c:	83 ec 1c             	sub    esp,0x1c
c0018b8f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018b96:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018b9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b9f:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ba6:	83 f8 ff             	cmp    eax,0xffffffff
c0018ba9:	75 35                	jne    c0018be0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018bab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018baf:	88 c2                	mov    dl,al
c0018bb1:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018bb6:	01 d0                	add    eax,edx
c0018bb8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018bbc:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018bc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bc6:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018bcd:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018bd2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018bd6:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018bdd:	eb 19                	jmp    c0018bf8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018bdf:	90                   	nop
c0018be0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018be4:	88 c2                	mov    dl,al
c0018be6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bea:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018bf1:	01 d0                	add    eax,edx
c0018bf3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018bf7:	90                   	nop
c0018bf8:	83 ec 04             	sub    esp,0x4
c0018bfb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018bff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018c03:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018c07:	50                   	push   eax
c0018c08:	e8 e6 c3 fe ff       	call   c0004ff3 <f_getlabel>
c0018c0d:	83 c4 10             	add    esp,0x10
c0018c10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018c19:	75 09                	jne    c0018c24 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018c1b:	b8 00 00 00 00       	mov    eax,0x0
c0018c20:	eb 0a                	jmp    c0018c2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018c22:	66 90                	xchg   ax,ax
c0018c24:	b8 01 00 00 00       	mov    eax,0x1
c0018c29:	8d 76 00             	lea    esi,[esi+0x0]
c0018c2c:	83 c4 1c             	add    esp,0x1c
c0018c2f:	c3                   	ret    

c0018c30 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018c30:	53                   	push   ebx
c0018c31:	83 ec 58             	sub    esp,0x58
c0018c34:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018c3c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c40:	b9 00 00 00 00       	mov    ecx,0x0
c0018c45:	b8 3c 00 00 00       	mov    eax,0x3c
c0018c4a:	83 e0 f8             	and    eax,0xfffffff8
c0018c4d:	89 c3                	mov    ebx,eax
c0018c4f:	b8 00 00 00 00       	mov    eax,0x0
c0018c54:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018c58:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018c5c:	83 c0 08             	add    eax,0x8
c0018c5f:	39 d8                	cmp    eax,ebx
c0018c61:	72 f1                	jb     c0018c54 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018c63:	01 c2                	add    edx,eax
c0018c65:	89 0a                	mov    DWORD PTR [edx],ecx
c0018c67:	83 c2 04             	add    edx,0x4
c0018c6a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c6e:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c75:	83 f8 ff             	cmp    eax,0xffffffff
c0018c78:	75 36                	jne    c0018cb0 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018c7a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c7e:	88 c2                	mov    dl,al
c0018c80:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c85:	01 d0                	add    eax,edx
c0018c87:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c8b:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018c91:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c95:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018c9c:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ca1:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018ca5:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018cac:	eb 1a                	jmp    c0018cc8 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018cae:	66 90                	xchg   ax,ax
c0018cb0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018cb4:	88 c2                	mov    dl,al
c0018cb6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018cba:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018cc1:	01 d0                	add    eax,edx
c0018cc3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018cc7:	90                   	nop
c0018cc8:	83 ec 08             	sub    esp,0x8
c0018ccb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018ccf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018cd3:	50                   	push   eax
c0018cd4:	e8 97 7b fe ff       	call   c0000870 <strcat>
c0018cd9:	83 c4 10             	add    esp,0x10
c0018cdc:	83 ec 0c             	sub    esp,0xc
c0018cdf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ce3:	50                   	push   eax
c0018ce4:	e8 5e c4 fe ff       	call   c0005147 <f_setlabel>
c0018ce9:	83 c4 10             	add    esp,0x10
c0018cec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018cf0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018cf5:	75 09                	jne    c0018d00 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018cf7:	b8 00 00 00 00       	mov    eax,0x0
c0018cfc:	eb 0a                	jmp    c0018d08 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018cfe:	66 90                	xchg   ax,ax
c0018d00:	b8 01 00 00 00       	mov    eax,0x1
c0018d05:	8d 76 00             	lea    esi,[esi+0x0]
c0018d08:	83 c4 58             	add    esp,0x58
c0018d0b:	5b                   	pop    ebx
c0018d0c:	c3                   	ret    
c0018d0d:	90                   	nop
c0018d0e:	66 90                	xchg   ax,ax

c0018d10 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018d10:	83 ec 2c             	sub    esp,0x2c
c0018d13:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018d1b:	83 ec 08             	sub    esp,0x8
c0018d1e:	68 64 29 02 c0       	push   0xc0022964
c0018d23:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d27:	e8 54 7a fe ff       	call   c0000780 <strcmp>
c0018d2c:	83 c4 10             	add    esp,0x10
c0018d2f:	85 c0                	test   eax,eax
c0018d31:	0f 94 c0             	sete   al
c0018d34:	0f b6 c0             	movzx  eax,al
c0018d37:	85 c0                	test   eax,eax
c0018d39:	74 0d                	je     c0018d48 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018d3b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d43:	e9 c0 00 00 00       	jmp    c0018e08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d48:	83 ec 08             	sub    esp,0x8
c0018d4b:	68 56 29 02 c0       	push   0xc0022956
c0018d50:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d54:	e8 27 7a fe ff       	call   c0000780 <strcmp>
c0018d59:	83 c4 10             	add    esp,0x10
c0018d5c:	85 c0                	test   eax,eax
c0018d5e:	0f 94 c0             	sete   al
c0018d61:	0f b6 c0             	movzx  eax,al
c0018d64:	85 c0                	test   eax,eax
c0018d66:	74 10                	je     c0018d78 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018d68:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d70:	e9 93 00 00 00       	jmp    c0018e08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d75:	8d 76 00             	lea    esi,[esi+0x0]
c0018d78:	83 ec 08             	sub    esp,0x8
c0018d7b:	68 5c 29 02 c0       	push   0xc002295c
c0018d80:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d84:	e8 f7 79 fe ff       	call   c0000780 <strcmp>
c0018d89:	83 c4 10             	add    esp,0x10
c0018d8c:	85 c0                	test   eax,eax
c0018d8e:	0f 94 c0             	sete   al
c0018d91:	0f b6 c0             	movzx  eax,al
c0018d94:	85 c0                	test   eax,eax
c0018d96:	74 0c                	je     c0018da4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018d98:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018da0:	eb 66                	jmp    c0018e08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018da2:	66 90                	xchg   ax,ax
c0018da4:	83 ec 08             	sub    esp,0x8
c0018da7:	68 3c 01 02 c0       	push   0xc002013c
c0018dac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018db0:	e8 cb 79 fe ff       	call   c0000780 <strcmp>
c0018db5:	83 c4 10             	add    esp,0x10
c0018db8:	85 c0                	test   eax,eax
c0018dba:	0f 94 c0             	sete   al
c0018dbd:	0f b6 c0             	movzx  eax,al
c0018dc0:	85 c0                	test   eax,eax
c0018dc2:	74 0c                	je     c0018dd0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018dc4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018dcc:	eb 3a                	jmp    c0018e08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018dce:	66 90                	xchg   ax,ax
c0018dd0:	83 ec 08             	sub    esp,0x8
c0018dd3:	68 62 29 02 c0       	push   0xc0022962
c0018dd8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ddc:	e8 9f 79 fe ff       	call   c0000780 <strcmp>
c0018de1:	83 c4 10             	add    esp,0x10
c0018de4:	85 c0                	test   eax,eax
c0018de6:	0f 94 c0             	sete   al
c0018de9:	0f b6 c0             	movzx  eax,al
c0018dec:	85 c0                	test   eax,eax
c0018dee:	74 0c                	je     c0018dfc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018df0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018df8:	eb 0e                	jmp    c0018e08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018dfa:	66 90                	xchg   ax,ax
c0018dfc:	b8 08 00 00 00       	mov    eax,0x8
c0018e01:	e9 ea 00 00 00       	jmp    c0018ef0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018e06:	66 90                	xchg   ax,ax
c0018e08:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018e0f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018e14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e18:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e1f:	83 f8 ff             	cmp    eax,0xffffffff
c0018e22:	75 34                	jne    c0018e58 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018e24:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018e28:	88 c2                	mov    dl,al
c0018e2a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e2f:	01 d0                	add    eax,edx
c0018e31:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018e35:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018e3b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e3f:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018e46:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e4b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018e4f:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018e56:	eb 18                	jmp    c0018e70 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018e58:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018e5c:	88 c2                	mov    dl,al
c0018e5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e62:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e69:	01 d0                	add    eax,edx
c0018e6b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018e6f:	90                   	nop
c0018e70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e74:	88 04 24             	mov    BYTE PTR [esp],al
c0018e77:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e7f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018e87:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018e8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018e94:	83 ec 0c             	sub    esp,0xc
c0018e97:	68 00 20 00 00       	push   0x2000
c0018e9c:	e8 32 ec fe ff       	call   c0007ad3 <malloc>
c0018ea1:	83 c4 10             	add    esp,0x10
c0018ea4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ea8:	68 00 20 00 00       	push   0x2000
c0018ead:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018eb1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018eb5:	50                   	push   eax
c0018eb6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018eba:	50                   	push   eax
c0018ebb:	e8 84 c5 fe ff       	call   c0005444 <f_mkfs>
c0018ec0:	83 c4 10             	add    esp,0x10
c0018ec3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018ec7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018ecc:	75 0a                	jne    c0018ed8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018ece:	b8 00 00 00 00       	mov    eax,0x0
c0018ed3:	eb 1b                	jmp    c0018ef0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ed8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018edd:	75 09                	jne    c0018ee8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018edf:	b8 09 00 00 00       	mov    eax,0x9
c0018ee4:	eb 0a                	jmp    c0018ef0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018ee6:	66 90                	xchg   ax,ax
c0018ee8:	b8 01 00 00 00       	mov    eax,0x1
c0018eed:	8d 76 00             	lea    esi,[esi+0x0]
c0018ef0:	83 c4 2c             	add    esp,0x2c
c0018ef3:	c3                   	ret    

c0018ef4 <FAT::tryMount(LogicalDisk*, int)>:
c0018ef4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018efa:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018eff:	83 f8 14             	cmp    eax,0x14
c0018f02:	75 18                	jne    c0018f1c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018f04:	83 ec 0c             	sub    esp,0xc
c0018f07:	68 68 29 02 c0       	push   0xc0022968
c0018f0c:	e8 88 83 ff ff       	call   c0011299 <KePanic(char const*)>
c0018f11:	83 c4 10             	add    esp,0x10
c0018f14:	b0 00                	mov    al,0x0
c0018f16:	e9 ed 01 00 00       	jmp    c0019108 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f1b:	90                   	nop
c0018f1c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018f23:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018f29:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018f2f:	3d 00 02 00 00       	cmp    eax,0x200
c0018f34:	74 0a                	je     c0018f40 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018f36:	b0 00                	mov    al,0x0
c0018f38:	e9 cb 01 00 00       	jmp    c0019108 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f40:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018f48:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018f4f:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018f56:	83 f8 ff             	cmp    eax,0xffffffff
c0018f59:	74 09                	je     c0018f64 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018f5b:	b0 01                	mov    al,0x1
c0018f5d:	e9 a6 01 00 00       	jmp    c0019108 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f62:	66 90                	xchg   ax,ax
c0018f64:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018f6e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018f76:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018f7d:	88 c2                	mov    dl,al
c0018f7f:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f84:	01 d0                	add    eax,edx
c0018f86:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018f8d:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018f93:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018f9a:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018fa1:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018fa6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018fad:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018fb4:	83 ec 0c             	sub    esp,0xc
c0018fb7:	68 34 02 00 00       	push   0x234
c0018fbc:	e8 12 eb fe ff       	call   c0007ad3 <malloc>
c0018fc1:	83 c4 10             	add    esp,0x10
c0018fc4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018fcb:	83 ec 04             	sub    esp,0x4
c0018fce:	6a 00                	push   0x0
c0018fd0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018fd7:	50                   	push   eax
c0018fd8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018fdf:	e8 5a ac fe ff       	call   c0003c3e <f_mount>
c0018fe4:	83 c4 10             	add    esp,0x10
c0018fe7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018fee:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018ff6:	74 1c                	je     c0019014 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018ff8:	83 ec 0c             	sub    esp,0xc
c0018ffb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019002:	e8 ec ea fe ff       	call   c0007af3 <rfree>
c0019007:	83 c4 10             	add    esp,0x10
c001900a:	b0 00                	mov    al,0x0
c001900c:	e9 f7 00 00 00       	jmp    c0019108 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019011:	8d 76 00             	lea    esi,[esi+0x0]
c0019014:	83 ec 04             	sub    esp,0x4
c0019017:	68 00 01 00 00       	push   0x100
c001901c:	6a 00                	push   0x0
c001901e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019025:	50                   	push   eax
c0019026:	e8 c5 74 fe ff       	call   c00004f0 <memset>
c001902b:	83 c4 10             	add    esp,0x10
c001902e:	83 ec 08             	sub    esp,0x8
c0019031:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019038:	50                   	push   eax
c0019039:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019040:	50                   	push   eax
c0019041:	e8 2a 78 fe ff       	call   c0000870 <strcat>
c0019046:	83 c4 10             	add    esp,0x10
c0019049:	83 ec 08             	sub    esp,0x8
c001904c:	68 76 29 02 c0       	push   0xc0022976
c0019051:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019058:	50                   	push   eax
c0019059:	e8 12 78 fe ff       	call   c0000870 <strcat>
c001905e:	83 c4 10             	add    esp,0x10
c0019061:	83 ec 04             	sub    esp,0x4
c0019064:	6a 01                	push   0x1
c0019066:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001906d:	50                   	push   eax
c001906e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019072:	50                   	push   eax
c0019073:	e8 28 ac fe ff       	call   c0003ca0 <f_open>
c0019078:	83 c4 10             	add    esp,0x10
c001907b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019082:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019089:	85 c0                	test   eax,eax
c001908b:	74 0b                	je     c0019098 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001908d:	78 31                	js     c00190c0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001908f:	83 e8 04             	sub    eax,0x4
c0019092:	83 f8 01             	cmp    eax,0x1
c0019095:	77 29                	ja     c00190c0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019097:	90                   	nop
c0019098:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00190a0:	83 ec 0c             	sub    esp,0xc
c00190a3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190a7:	50                   	push   eax
c00190a8:	e8 a3 b3 fe ff       	call   c0004450 <f_close>
c00190ad:	83 c4 10             	add    esp,0x10
c00190b0:	90                   	nop
c00190b1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00190b9:	85 c0                	test   eax,eax
c00190bb:	74 43                	je     c0019100 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00190bd:	eb 31                	jmp    c00190f0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00190bf:	90                   	nop
c00190c0:	83 ec 0c             	sub    esp,0xc
c00190c3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00190ca:	e8 24 ea fe ff       	call   c0007af3 <rfree>
c00190cf:	83 c4 10             	add    esp,0x10
c00190d2:	83 ec 04             	sub    esp,0x4
c00190d5:	6a 00                	push   0x0
c00190d7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00190de:	50                   	push   eax
c00190df:	6a 00                	push   0x0
c00190e1:	e8 58 ab fe ff       	call   c0003c3e <f_mount>
c00190e6:	83 c4 10             	add    esp,0x10
c00190e9:	b0 00                	mov    al,0x0
c00190eb:	eb 1b                	jmp    c0019108 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00190ed:	8d 76 00             	lea    esi,[esi+0x0]
c00190f0:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c00190f5:	83 c0 01             	add    eax,0x1
c00190f8:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c00190fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019100:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019107:	90                   	nop
c0019108:	81 c4 4c 03 00 00    	add    esp,0x34c
c001910e:	c3                   	ret    
c001910f:	90                   	nop

c0019110 <FAT::allocateSwapfile(char const*, int)>:
c0019110:	55                   	push   ebp
c0019111:	57                   	push   edi
c0019112:	56                   	push   esi
c0019113:	53                   	push   ebx
c0019114:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001911a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019125:	83 ec 0c             	sub    esp,0xc
c0019128:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001912f:	e8 9f e9 fe ff       	call   c0007ad3 <malloc>
c0019134:	83 c4 10             	add    esp,0x10
c0019137:	89 c7                	mov    edi,eax
c0019139:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001913e:	6a 01                	push   0x1
c0019140:	50                   	push   eax
c0019141:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019148:	57                   	push   edi
c0019149:	e8 78 26 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c001914e:	83 c4 10             	add    esp,0x10
c0019151:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019158:	83 ec 04             	sub    esp,0x4
c001915b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001915f:	50                   	push   eax
c0019160:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019164:	50                   	push   eax
c0019165:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001916c:	e8 35 2a ff ff       	call   c000bba6 <File::stat(unsigned long long*, bool*)>
c0019171:	83 c4 10             	add    esp,0x10
c0019174:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001917b:	c1 e0 14             	shl    eax,0x14
c001917e:	89 c7                	mov    edi,eax
c0019180:	89 c5                	mov    ebp,eax
c0019182:	c1 fd 1f             	sar    ebp,0x1f
c0019185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019189:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001918d:	89 f9                	mov    ecx,edi
c001918f:	31 c1                	xor    ecx,eax
c0019191:	89 cb                	mov    ebx,ecx
c0019193:	89 e9                	mov    ecx,ebp
c0019195:	31 d1                	xor    ecx,edx
c0019197:	89 ce                	mov    esi,ecx
c0019199:	89 f0                	mov    eax,esi
c001919b:	09 d8                	or     eax,ebx
c001919d:	0f 84 99 00 00 00    	je     c001923c <FAT::allocateSwapfile(char const*, int)+0x12c>
c00191a3:	83 ec 0c             	sub    esp,0xc
c00191a6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191ad:	e8 c0 28 ff ff       	call   c000ba72 <File::unlink()>
c00191b2:	83 c4 10             	add    esp,0x10
c00191b5:	83 ec 08             	sub    esp,0x8
c00191b8:	6a 12                	push   0x12
c00191ba:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191c1:	e8 de 26 ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c00191c6:	83 c4 10             	add    esp,0x10
c00191c9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191d0:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00191d6:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00191dd:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00191e4:	c1 e0 14             	shl    eax,0x14
c00191e7:	83 ec 04             	sub    esp,0x4
c00191ea:	6a 01                	push   0x1
c00191ec:	50                   	push   eax
c00191ed:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00191f4:	e8 de c0 fe ff       	call   c00052d7 <f_expand>
c00191f9:	83 c4 10             	add    esp,0x10
c00191fc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019203:	8b 00                	mov    eax,DWORD PTR [eax]
c0019205:	83 c0 10             	add    eax,0x10
c0019208:	8b 00                	mov    eax,DWORD PTR [eax]
c001920a:	83 ec 0c             	sub    esp,0xc
c001920d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019211:	52                   	push   edx
c0019212:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019216:	52                   	push   edx
c0019217:	6a 00                	push   0x0
c0019219:	68 00 04 00 00       	push   0x400
c001921e:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019225:	ff d0                	call   eax
c0019227:	83 c4 20             	add    esp,0x20
c001922a:	83 ec 0c             	sub    esp,0xc
c001922d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019234:	e8 c9 26 ff ff       	call   c000b902 <File::close()>
c0019239:	83 c4 10             	add    esp,0x10
c001923c:	83 ec 08             	sub    esp,0x8
c001923f:	6a 01                	push   0x1
c0019241:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019248:	e8 57 26 ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c001924d:	83 c4 10             	add    esp,0x10
c0019250:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019257:	8b 00                	mov    eax,DWORD PTR [eax]
c0019259:	83 c0 0c             	add    eax,0xc
c001925c:	8b 00                	mov    eax,DWORD PTR [eax]
c001925e:	83 ec 0c             	sub    esp,0xc
c0019261:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019265:	52                   	push   edx
c0019266:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001926a:	52                   	push   edx
c001926b:	6a 00                	push   0x0
c001926d:	6a 04                	push   0x4
c001926f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019276:	ff d0                	call   eax
c0019278:	83 c4 20             	add    esp,0x20
c001927b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019282:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019288:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001928f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019296:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019299:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00192a0:	83 ec 0c             	sub    esp,0xc
c00192a3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00192aa:	e8 53 26 ff ff       	call   c000b902 <File::close()>
c00192af:	83 c4 10             	add    esp,0x10
c00192b2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00192b9:	ba 00 00 00 00       	mov    edx,0x0
c00192be:	81 c4 3c 04 00 00    	add    esp,0x43c
c00192c4:	5b                   	pop    ebx
c00192c5:	5e                   	pop    esi
c00192c6:	5f                   	pop    edi
c00192c7:	5d                   	pop    ebp
c00192c8:	c3                   	ret    
c00192c9:	90                   	nop
c00192ca:	66 90                	xchg   ax,ax

c00192cc <FAT::readDir(void*, unsigned long, void*, int*)>:
c00192cc:	57                   	push   edi
c00192cd:	56                   	push   esi
c00192ce:	53                   	push   ebx
c00192cf:	81 ec 50 02 00 00    	sub    esp,0x250
c00192d5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00192dd:	74 0d                	je     c00192ec <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00192df:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00192e7:	75 0f                	jne    c00192f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00192e9:	8d 76 00             	lea    esi,[esi+0x0]
c00192ec:	b8 04 00 00 00       	mov    eax,0x4
c00192f1:	e9 3a 01 00 00       	jmp    c0019430 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00192f6:	66 90                	xchg   ax,ax
c00192f8:	83 ec 08             	sub    esp,0x8
c00192fb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019302:	50                   	push   eax
c0019303:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001930a:	e8 0d b4 fe ff       	call   c000471c <f_readdir>
c001930f:	83 c4 10             	add    esp,0x10
c0019312:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019319:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019320:	83 ec 0c             	sub    esp,0xc
c0019323:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001932a:	83 c0 16             	add    eax,0x16
c001932d:	50                   	push   eax
c001932e:	e8 4d 72 fe ff       	call   c0000580 <strlen>
c0019333:	83 c4 10             	add    esp,0x10
c0019336:	ba 00 00 00 00       	mov    edx,0x0
c001933b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001933f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019343:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001934a:	0f b6 c0             	movzx  eax,al
c001934d:	83 e0 10             	and    eax,0x10
c0019350:	74 0a                	je     c001935c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019352:	b8 02 00 00 00       	mov    eax,0x2
c0019357:	eb 0b                	jmp    c0019364 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019359:	8d 76 00             	lea    esi,[esi+0x0]
c001935c:	b8 01 00 00 00       	mov    eax,0x1
c0019361:	8d 76 00             	lea    esi,[esi+0x0]
c0019364:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019368:	83 ec 08             	sub    esp,0x8
c001936b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019372:	83 c0 16             	add    eax,0x16
c0019375:	50                   	push   eax
c0019376:	8d 44 24 14          	lea    eax,[esp+0x14]
c001937a:	83 c0 10             	add    eax,0x10
c001937d:	50                   	push   eax
c001937e:	e8 cd 72 fe ff       	call   c0000650 <strcpy>
c0019383:	83 c4 10             	add    esp,0x10
c0019386:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001938d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019394:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019398:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001939f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00193a6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00193ad:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00193b4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00193bb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00193c2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00193c9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00193d0:	89 c6                	mov    esi,eax
c00193d2:	89 d7                	mov    edi,edx
c00193d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00193d6:	89 c8                	mov    eax,ecx
c00193d8:	89 fa                	mov    edx,edi
c00193da:	89 f3                	mov    ebx,esi
c00193dc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00193e3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00193ea:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00193f1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00193f8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00193fe:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019405:	0f be c0             	movsx  eax,al
c0019408:	85 c0                	test   eax,eax
c001940a:	75 08                	jne    c0019414 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001940c:	b8 07 00 00 00       	mov    eax,0x7
c0019411:	eb 1d                	jmp    c0019430 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019413:	90                   	nop
c0019414:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001941b:	85 c0                	test   eax,eax
c001941d:	75 09                	jne    c0019428 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001941f:	b8 00 00 00 00       	mov    eax,0x0
c0019424:	eb 0a                	jmp    c0019430 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019426:	66 90                	xchg   ax,ax
c0019428:	b8 01 00 00 00       	mov    eax,0x1
c001942d:	8d 76 00             	lea    esi,[esi+0x0]
c0019430:	81 c4 50 02 00 00    	add    esp,0x250
c0019436:	5b                   	pop    ebx
c0019437:	5e                   	pop    esi
c0019438:	5f                   	pop    edi
c0019439:	c3                   	ret    
c001943a:	66 90                	xchg   ax,ax

c001943c <FAT::read(void*, unsigned long, void*, int*)>:
c001943c:	83 ec 1c             	sub    esp,0x1c
c001943f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019444:	74 0a                	je     c0019450 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019446:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001944b:	75 0b                	jne    c0019458 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001944d:	8d 76 00             	lea    esi,[esi+0x0]
c0019450:	b8 04 00 00 00       	mov    eax,0x4
c0019455:	eb 41                	jmp    c0019498 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019457:	90                   	nop
c0019458:	8d 44 24 08          	lea    eax,[esp+0x8]
c001945c:	50                   	push   eax
c001945d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019461:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019465:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019469:	e8 f5 aa fe ff       	call   c0003f63 <f_read>
c001946e:	83 c4 10             	add    esp,0x10
c0019471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019475:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019479:	89 c2                	mov    edx,eax
c001947b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001947f:	89 10                	mov    DWORD PTR [eax],edx
c0019481:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019485:	85 c0                	test   eax,eax
c0019487:	75 07                	jne    c0019490 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019489:	b8 00 00 00 00       	mov    eax,0x0
c001948e:	eb 08                	jmp    c0019498 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019490:	b8 01 00 00 00       	mov    eax,0x1
c0019495:	8d 76 00             	lea    esi,[esi+0x0]
c0019498:	83 c4 1c             	add    esp,0x1c
c001949b:	c3                   	ret    

c001949c <FAT::write(void*, unsigned long, void*, int*)>:
c001949c:	83 ec 1c             	sub    esp,0x1c
c001949f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194a4:	74 0a                	je     c00194b0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00194a6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00194ab:	75 0b                	jne    c00194b8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00194ad:	8d 76 00             	lea    esi,[esi+0x0]
c00194b0:	b8 04 00 00 00       	mov    eax,0x4
c00194b5:	eb 41                	jmp    c00194f8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00194b7:	90                   	nop
c00194b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194bc:	50                   	push   eax
c00194bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00194c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194c9:	e8 76 ac fe ff       	call   c0004144 <f_write>
c00194ce:	83 c4 10             	add    esp,0x10
c00194d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194d9:	89 c2                	mov    edx,eax
c00194db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00194df:	89 10                	mov    DWORD PTR [eax],edx
c00194e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194e5:	85 c0                	test   eax,eax
c00194e7:	75 07                	jne    c00194f0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00194e9:	b8 00 00 00 00       	mov    eax,0x0
c00194ee:	eb 08                	jmp    c00194f8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00194f0:	b8 01 00 00 00       	mov    eax,0x1
c00194f5:	8d 76 00             	lea    esi,[esi+0x0]
c00194f8:	83 c4 1c             	add    esp,0x1c
c00194fb:	c3                   	ret    

c00194fc <FAT::close(void*)>:
c00194fc:	83 ec 1c             	sub    esp,0x1c
c00194ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019504:	75 0a                	jne    c0019510 <FAT::close(void*)+0x14>
c0019506:	b8 04 00 00 00       	mov    eax,0x4
c001950b:	eb 3f                	jmp    c001954c <FAT::close(void*)+0x50>
c001950d:	8d 76 00             	lea    esi,[esi+0x0]
c0019510:	83 ec 0c             	sub    esp,0xc
c0019513:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019517:	e8 34 af fe ff       	call   c0004450 <f_close>
c001951c:	83 c4 10             	add    esp,0x10
c001951f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019523:	83 ec 0c             	sub    esp,0xc
c0019526:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001952a:	e8 b4 e5 fe ff       	call   c0007ae3 <free>
c001952f:	83 c4 10             	add    esp,0x10
c0019532:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019536:	85 c0                	test   eax,eax
c0019538:	75 0a                	jne    c0019544 <FAT::close(void*)+0x48>
c001953a:	b8 00 00 00 00       	mov    eax,0x0
c001953f:	eb 0b                	jmp    c001954c <FAT::close(void*)+0x50>
c0019541:	8d 76 00             	lea    esi,[esi+0x0]
c0019544:	b8 01 00 00 00       	mov    eax,0x1
c0019549:	8d 76 00             	lea    esi,[esi+0x0]
c001954c:	83 c4 1c             	add    esp,0x1c
c001954f:	c3                   	ret    

c0019550 <FAT::closeDir(void*)>:
c0019550:	83 ec 1c             	sub    esp,0x1c
c0019553:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019558:	75 0a                	jne    c0019564 <FAT::closeDir(void*)+0x14>
c001955a:	b8 04 00 00 00       	mov    eax,0x4
c001955f:	eb 3f                	jmp    c00195a0 <FAT::closeDir(void*)+0x50>
c0019561:	8d 76 00             	lea    esi,[esi+0x0]
c0019564:	83 ec 0c             	sub    esp,0xc
c0019567:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001956b:	e8 8a b1 fe ff       	call   c00046fa <f_closedir>
c0019570:	83 c4 10             	add    esp,0x10
c0019573:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019577:	83 ec 0c             	sub    esp,0xc
c001957a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001957e:	e8 60 e5 fe ff       	call   c0007ae3 <free>
c0019583:	83 c4 10             	add    esp,0x10
c0019586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001958a:	85 c0                	test   eax,eax
c001958c:	75 0a                	jne    c0019598 <FAT::closeDir(void*)+0x48>
c001958e:	b8 00 00 00 00       	mov    eax,0x0
c0019593:	eb 0b                	jmp    c00195a0 <FAT::closeDir(void*)+0x50>
c0019595:	8d 76 00             	lea    esi,[esi+0x0]
c0019598:	b8 01 00 00 00       	mov    eax,0x1
c001959d:	8d 76 00             	lea    esi,[esi+0x0]
c00195a0:	83 c4 1c             	add    esp,0x1c
c00195a3:	c3                   	ret    

c00195a4 <FAT::truncate(void*, unsigned long long)>:
c00195a4:	83 ec 2c             	sub    esp,0x2c
c00195a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00195af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00195b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195b7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00195bc:	75 0a                	jne    c00195c8 <FAT::truncate(void*, unsigned long long)+0x24>
c00195be:	b8 04 00 00 00       	mov    eax,0x4
c00195c3:	eb 47                	jmp    c001960c <FAT::truncate(void*, unsigned long long)+0x68>
c00195c5:	8d 76 00             	lea    esi,[esi+0x0]
c00195c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00195cc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00195cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00195d3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00195db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195df:	83 ec 08             	sub    esp,0x8
c00195e2:	50                   	push   eax
c00195e3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00195e7:	e8 93 ae fe ff       	call   c000447f <f_lseek>
c00195ec:	83 c4 10             	add    esp,0x10
c00195ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00195f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195f7:	85 c0                	test   eax,eax
c00195f9:	75 09                	jne    c0019604 <FAT::truncate(void*, unsigned long long)+0x60>
c00195fb:	b8 00 00 00 00       	mov    eax,0x0
c0019600:	eb 0a                	jmp    c001960c <FAT::truncate(void*, unsigned long long)+0x68>
c0019602:	66 90                	xchg   ax,ax
c0019604:	b8 01 00 00 00       	mov    eax,0x1
c0019609:	8d 76 00             	lea    esi,[esi+0x0]
c001960c:	83 c4 2c             	add    esp,0x2c
c001960f:	c3                   	ret    

c0019610 <FAT::seek(void*, unsigned long long)>:
c0019610:	83 ec 2c             	sub    esp,0x2c
c0019613:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019617:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001961b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001961f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019623:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019628:	75 0a                	jne    c0019634 <FAT::seek(void*, unsigned long long)+0x24>
c001962a:	b8 04 00 00 00       	mov    eax,0x4
c001962f:	eb 33                	jmp    c0019664 <FAT::seek(void*, unsigned long long)+0x54>
c0019631:	8d 76 00             	lea    esi,[esi+0x0]
c0019634:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019638:	83 ec 08             	sub    esp,0x8
c001963b:	50                   	push   eax
c001963c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019640:	e8 3a ae fe ff       	call   c000447f <f_lseek>
c0019645:	83 c4 10             	add    esp,0x10
c0019648:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001964c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019650:	85 c0                	test   eax,eax
c0019652:	75 08                	jne    c001965c <FAT::seek(void*, unsigned long long)+0x4c>
c0019654:	b8 00 00 00 00       	mov    eax,0x0
c0019659:	eb 09                	jmp    c0019664 <FAT::seek(void*, unsigned long long)+0x54>
c001965b:	90                   	nop
c001965c:	b8 01 00 00 00       	mov    eax,0x1
c0019661:	8d 76 00             	lea    esi,[esi+0x0]
c0019664:	83 c4 2c             	add    esp,0x2c
c0019667:	c3                   	ret    

c0019668 <fatWrapperReadDisk>:
c0019668:	53                   	push   ebx
c0019669:	83 ec 18             	sub    esp,0x18
c001966c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019670:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019674:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019679:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019680:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019684:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019688:	ba 00 00 00 00       	mov    edx,0x0
c001968d:	83 ec 0c             	sub    esp,0xc
c0019690:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019694:	53                   	push   ebx
c0019695:	52                   	push   edx
c0019696:	50                   	push   eax
c0019697:	51                   	push   ecx
c0019698:	e8 51 44 ff ff       	call   c000daee <LogicalDisk::read(unsigned long long, int, void*)>
c001969d:	83 c4 20             	add    esp,0x20
c00196a0:	83 c4 18             	add    esp,0x18
c00196a3:	5b                   	pop    ebx
c00196a4:	c3                   	ret    
c00196a5:	8d 76 00             	lea    esi,[esi+0x0]

c00196a8 <fatWrapperWriteDisk>:
c00196a8:	53                   	push   ebx
c00196a9:	83 ec 18             	sub    esp,0x18
c00196ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00196b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196b9:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00196c0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00196c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196c8:	ba 00 00 00 00       	mov    edx,0x0
c00196cd:	83 ec 0c             	sub    esp,0xc
c00196d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196d4:	53                   	push   ebx
c00196d5:	52                   	push   edx
c00196d6:	50                   	push   eax
c00196d7:	51                   	push   ecx
c00196d8:	e8 7d 44 ff ff       	call   c000db5a <LogicalDisk::write(unsigned long long, int, void*)>
c00196dd:	83 c4 20             	add    esp,0x20
c00196e0:	83 c4 18             	add    esp,0x18
c00196e3:	5b                   	pop    ebx
c00196e4:	c3                   	ret    
c00196e5:	8d 76 00             	lea    esi,[esi+0x0]

c00196e8 <fatWrapperIoctl>:
c00196e8:	53                   	push   ebx
c00196e9:	83 ec 28             	sub    esp,0x28
c00196ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00196f0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00196f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00196f8:	88 d0                	mov    al,dl
c00196fa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00196fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019703:	83 f8 02             	cmp    eax,0x2
c0019706:	75 34                	jne    c001973c <fatWrapperIoctl+0x54>
c0019708:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001970c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019710:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019715:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c001971c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019722:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019728:	89 c2                	mov    edx,eax
c001972a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001972e:	66 89 10             	mov    WORD PTR [eax],dx
c0019731:	b8 00 00 00 00       	mov    eax,0x0
c0019736:	e9 c5 00 00 00       	jmp    c0019800 <fatWrapperIoctl+0x118>
c001973b:	90                   	nop
c001973c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019741:	83 f8 01             	cmp    eax,0x1
c0019744:	75 6a                	jne    c00197b0 <fatWrapperIoctl+0xc8>
c0019746:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001974a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001974e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019753:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c001975a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019760:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019766:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001976c:	89 c8                	mov    eax,ecx
c001976e:	89 da                	mov    edx,ebx
c0019770:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019774:	c1 e0 0a             	shl    eax,0xa
c0019777:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001977c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0019783:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019789:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001978f:	89 cb                	mov    ebx,ecx
c0019791:	c1 fb 1f             	sar    ebx,0x1f
c0019794:	53                   	push   ebx
c0019795:	51                   	push   ecx
c0019796:	52                   	push   edx
c0019797:	50                   	push   eax
c0019798:	e8 b3 5b 00 00       	call   c001f350 <__udivdi3>
c001979d:	83 c4 10             	add    esp,0x10
c00197a0:	89 c2                	mov    edx,eax
c00197a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197a6:	89 10                	mov    DWORD PTR [eax],edx
c00197a8:	b8 00 00 00 00       	mov    eax,0x0
c00197ad:	eb 51                	jmp    c0019800 <fatWrapperIoctl+0x118>
c00197af:	90                   	nop
c00197b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197b5:	85 c0                	test   eax,eax
c00197b7:	75 07                	jne    c00197c0 <fatWrapperIoctl+0xd8>
c00197b9:	b8 00 00 00 00       	mov    eax,0x0
c00197be:	eb 40                	jmp    c0019800 <fatWrapperIoctl+0x118>
c00197c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197c5:	83 f8 03             	cmp    eax,0x3
c00197c8:	75 1a                	jne    c00197e4 <fatWrapperIoctl+0xfc>
c00197ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00197d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197d6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00197dc:	b8 00 00 00 00       	mov    eax,0x0
c00197e1:	eb 1d                	jmp    c0019800 <fatWrapperIoctl+0x118>
c00197e3:	90                   	nop
c00197e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197e9:	83 f8 04             	cmp    eax,0x4
c00197ec:	75 0a                	jne    c00197f8 <fatWrapperIoctl+0x110>
c00197ee:	b8 00 00 00 00       	mov    eax,0x0
c00197f3:	eb 0b                	jmp    c0019800 <fatWrapperIoctl+0x118>
c00197f5:	8d 76 00             	lea    esi,[esi+0x0]
c00197f8:	b8 04 00 00 00       	mov    eax,0x4
c00197fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019800:	83 c4 28             	add    esp,0x28
c0019803:	5b                   	pop    ebx
c0019804:	c3                   	ret    
c0019805:	90                   	nop
c0019806:	66 90                	xchg   ax,ax

c0019808 <FAT::FAT()>:
c0019808:	83 ec 1c             	sub    esp,0x1c
c001980b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001980f:	83 ec 0c             	sub    esp,0xc
c0019812:	50                   	push   eax
c0019813:	e8 e6 1c ff ff       	call   c000b4fe <Filesystem::Filesystem()>
c0019818:	83 c4 10             	add    esp,0x10
c001981b:	ba 8c 29 02 c0       	mov    edx,0xc002298c
c0019820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019824:	89 10                	mov    DWORD PTR [eax],edx
c0019826:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c0019830:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019838:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001983d:	7f 19                	jg     c0019858 <FAT::FAT()+0x50>
c001983f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019843:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c001984e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019853:	eb e3                	jmp    c0019838 <FAT::FAT()+0x30>
c0019855:	8d 76 00             	lea    esi,[esi+0x0]
c0019858:	90                   	nop
c0019859:	83 c4 1c             	add    esp,0x1c
c001985c:	c3                   	ret    
c001985d:	90                   	nop
c001985e:	66 90                	xchg   ax,ax

c0019860 <FAT::fixFilepath(char*)>:
c0019860:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019864:	8a 00                	mov    al,BYTE PTR [eax]
c0019866:	0f be c0             	movsx  eax,al
c0019869:	83 f8 40             	cmp    eax,0x40
c001986c:	7e 2e                	jle    c001989c <FAT::fixFilepath(char*)+0x3c>
c001986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019872:	8a 00                	mov    al,BYTE PTR [eax]
c0019874:	83 e8 41             	sub    eax,0x41
c0019877:	88 c2                	mov    dl,al
c0019879:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001987d:	88 10                	mov    BYTE PTR [eax],dl
c001987f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019883:	8a 00                	mov    al,BYTE PTR [eax]
c0019885:	0f be c0             	movsx  eax,al
c0019888:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001988f:	83 c0 30             	add    eax,0x30
c0019892:	88 c2                	mov    dl,al
c0019894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019898:	88 10                	mov    BYTE PTR [eax],dl
c001989a:	66 90                	xchg   ax,ax
c001989c:	90                   	nop
c001989d:	c3                   	ret    
c001989e:	66 90                	xchg   ax,ax

c00198a0 <FAT::open(char const*, void**, FileOpenMode)>:
c00198a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00198a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00198ae:	74 0c                	je     c00198bc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00198b0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00198b8:	75 0e                	jne    c00198c8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00198ba:	66 90                	xchg   ax,ax
c00198bc:	b8 04 00 00 00       	mov    eax,0x4
c00198c1:	e9 46 01 00 00       	jmp    c0019a0c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00198c6:	66 90                	xchg   ax,ax
c00198c8:	83 ec 08             	sub    esp,0x8
c00198cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198d6:	50                   	push   eax
c00198d7:	e8 74 6d fe ff       	call   c0000650 <strcpy>
c00198dc:	83 c4 10             	add    esp,0x10
c00198df:	83 ec 08             	sub    esp,0x8
c00198e2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00198e6:	50                   	push   eax
c00198e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198ee:	e8 6d ff ff ff       	call   c0019860 <FAT::fixFilepath(char*)>
c00198f3:	83 c4 10             	add    esp,0x10
c00198f6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00198fe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019905:	83 e0 01             	and    eax,0x1
c0019908:	74 12                	je     c001991c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001990a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019911:	83 c8 01             	or     eax,0x1
c0019914:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001991b:	90                   	nop
c001991c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019923:	83 e0 04             	and    eax,0x4
c0019926:	74 24                	je     c001994c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019928:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001992f:	83 c8 30             	or     eax,0x30
c0019932:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019939:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019940:	83 c8 02             	or     eax,0x2
c0019943:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001994a:	66 90                	xchg   ax,ax
c001994c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019953:	83 e0 02             	and    eax,0x2
c0019956:	74 14                	je     c001996c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019958:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001995f:	83 c8 02             	or     eax,0x2
c0019962:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019969:	8d 76 00             	lea    esi,[esi+0x0]
c001996c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019973:	83 e0 08             	and    eax,0x8
c0019976:	74 14                	je     c001998c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019978:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001997f:	83 c8 04             	or     eax,0x4
c0019982:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019989:	8d 76 00             	lea    esi,[esi+0x0]
c001998c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019993:	83 e0 10             	and    eax,0x10
c0019996:	74 14                	je     c00199ac <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019998:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001999f:	83 c8 08             	or     eax,0x8
c00199a2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00199a9:	8d 76 00             	lea    esi,[esi+0x0]
c00199ac:	83 ec 0c             	sub    esp,0xc
c00199af:	68 28 02 00 00       	push   0x228
c00199b4:	e8 1a e1 fe ff       	call   c0007ad3 <malloc>
c00199b9:	83 c4 10             	add    esp,0x10
c00199bc:	89 c2                	mov    edx,eax
c00199be:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199c5:	89 10                	mov    DWORD PTR [eax],edx
c00199c7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00199cf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00199d8:	83 ec 04             	sub    esp,0x4
c00199db:	52                   	push   edx
c00199dc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00199e0:	52                   	push   edx
c00199e1:	50                   	push   eax
c00199e2:	e8 b9 a2 fe ff       	call   c0003ca0 <f_open>
c00199e7:	83 c4 10             	add    esp,0x10
c00199ea:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00199f1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00199f9:	74 09                	je     c0019a04 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00199fb:	b8 01 00 00 00       	mov    eax,0x1
c0019a00:	eb 0a                	jmp    c0019a0c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019a02:	66 90                	xchg   ax,ax
c0019a04:	b8 00 00 00 00       	mov    eax,0x0
c0019a09:	8d 76 00             	lea    esi,[esi+0x0]
c0019a0c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a12:	c3                   	ret    
c0019a13:	90                   	nop

c0019a14 <FAT::openDir(char const*, void**)>:
c0019a14:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a1a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019a22:	74 0c                	je     c0019a30 <FAT::openDir(char const*, void**)+0x1c>
c0019a24:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019a2c:	75 0e                	jne    c0019a3c <FAT::openDir(char const*, void**)+0x28>
c0019a2e:	66 90                	xchg   ax,ax
c0019a30:	b8 04 00 00 00       	mov    eax,0x4
c0019a35:	e9 82 00 00 00       	jmp    c0019abc <FAT::openDir(char const*, void**)+0xa8>
c0019a3a:	66 90                	xchg   ax,ax
c0019a3c:	83 ec 08             	sub    esp,0x8
c0019a3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a46:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a4a:	50                   	push   eax
c0019a4b:	e8 00 6c fe ff       	call   c0000650 <strcpy>
c0019a50:	83 c4 10             	add    esp,0x10
c0019a53:	83 ec 08             	sub    esp,0x8
c0019a56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a5a:	50                   	push   eax
c0019a5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a62:	e8 f9 fd ff ff       	call   c0019860 <FAT::fixFilepath(char*)>
c0019a67:	83 c4 10             	add    esp,0x10
c0019a6a:	83 ec 0c             	sub    esp,0xc
c0019a6d:	6a 30                	push   0x30
c0019a6f:	e8 5f e0 fe ff       	call   c0007ad3 <malloc>
c0019a74:	83 c4 10             	add    esp,0x10
c0019a77:	89 c2                	mov    edx,eax
c0019a79:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a80:	89 10                	mov    DWORD PTR [eax],edx
c0019a82:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a89:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a8b:	83 ec 08             	sub    esp,0x8
c0019a8e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019a92:	52                   	push   edx
c0019a93:	50                   	push   eax
c0019a94:	e8 96 ab fe ff       	call   c000462f <f_opendir>
c0019a99:	83 c4 10             	add    esp,0x10
c0019a9c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019aa3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019aab:	74 07                	je     c0019ab4 <FAT::openDir(char const*, void**)+0xa0>
c0019aad:	b8 01 00 00 00       	mov    eax,0x1
c0019ab2:	eb 08                	jmp    c0019abc <FAT::openDir(char const*, void**)+0xa8>
c0019ab4:	b8 00 00 00 00       	mov    eax,0x0
c0019ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0019abc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ac2:	c3                   	ret    
c0019ac3:	90                   	nop

c0019ac4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019ac4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019aca:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019ad2:	75 0c                	jne    c0019ae0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019ad4:	b8 04 00 00 00       	mov    eax,0x4
c0019ad9:	e9 d6 00 00 00       	jmp    c0019bb4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ade:	66 90                	xchg   ax,ax
c0019ae0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019ae8:	75 0a                	jne    c0019af4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019aea:	b8 04 00 00 00       	mov    eax,0x4
c0019aef:	e9 c0 00 00 00       	jmp    c0019bb4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019af4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019afc:	75 0a                	jne    c0019b08 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019afe:	b8 04 00 00 00       	mov    eax,0x4
c0019b03:	e9 ac 00 00 00       	jmp    c0019bb4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b08:	83 ec 08             	sub    esp,0x8
c0019b0b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019b12:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019b19:	50                   	push   eax
c0019b1a:	e8 31 6b fe ff       	call   c0000650 <strcpy>
c0019b1f:	83 c4 10             	add    esp,0x10
c0019b22:	83 ec 08             	sub    esp,0x8
c0019b25:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019b2c:	50                   	push   eax
c0019b2d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019b34:	e8 27 fd ff ff       	call   c0019860 <FAT::fixFilepath(char*)>
c0019b39:	83 c4 10             	add    esp,0x10
c0019b3c:	83 ec 08             	sub    esp,0x8
c0019b3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019b43:	50                   	push   eax
c0019b44:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019b4b:	50                   	push   eax
c0019b4c:	e8 5d ac fe ff       	call   c00047ae <f_stat>
c0019b51:	83 c4 10             	add    esp,0x10
c0019b54:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019b5b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019b62:	85 c0                	test   eax,eax
c0019b64:	74 0a                	je     c0019b70 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019b66:	83 f8 04             	cmp    eax,0x4
c0019b69:	74 39                	je     c0019ba4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019b6b:	eb 3f                	jmp    c0019bac <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b70:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019b74:	0f b6 c0             	movzx  eax,al
c0019b77:	83 e0 10             	and    eax,0x10
c0019b7a:	0f 95 c2             	setne  dl
c0019b7d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019b84:	88 10                	mov    BYTE PTR [eax],dl
c0019b86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b8a:	ba 00 00 00 00       	mov    edx,0x0
c0019b8f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019b96:	89 01                	mov    DWORD PTR [ecx],eax
c0019b98:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019b9b:	b8 00 00 00 00       	mov    eax,0x0
c0019ba0:	eb 12                	jmp    c0019bb4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ba2:	66 90                	xchg   ax,ax
c0019ba4:	b8 02 00 00 00       	mov    eax,0x2
c0019ba9:	eb 09                	jmp    c0019bb4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019bab:	90                   	nop
c0019bac:	b8 01 00 00 00       	mov    eax,0x1
c0019bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0019bb4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019bba:	c3                   	ret    
c0019bbb:	90                   	nop

c0019bbc <FAT::unlink(char const*)>:
c0019bbc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019bc2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019bca:	75 08                	jne    c0019bd4 <FAT::unlink(char const*)+0x18>
c0019bcc:	b8 04 00 00 00       	mov    eax,0x4
c0019bd1:	eb 61                	jmp    c0019c34 <FAT::unlink(char const*)+0x78>
c0019bd3:	90                   	nop
c0019bd4:	83 ec 08             	sub    esp,0x8
c0019bd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019bde:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019be2:	50                   	push   eax
c0019be3:	e8 68 6a fe ff       	call   c0000650 <strcpy>
c0019be8:	83 c4 10             	add    esp,0x10
c0019beb:	83 ec 08             	sub    esp,0x8
c0019bee:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019bf2:	50                   	push   eax
c0019bf3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019bfa:	e8 61 fc ff ff       	call   c0019860 <FAT::fixFilepath(char*)>
c0019bff:	83 c4 10             	add    esp,0x10
c0019c02:	83 ec 0c             	sub    esp,0xc
c0019c05:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c09:	50                   	push   eax
c0019c0a:	e8 11 ae fe ff       	call   c0004a20 <f_unlink>
c0019c0f:	83 c4 10             	add    esp,0x10
c0019c12:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019c19:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019c20:	85 c0                	test   eax,eax
c0019c22:	75 08                	jne    c0019c2c <FAT::unlink(char const*)+0x70>
c0019c24:	b8 00 00 00 00       	mov    eax,0x0
c0019c29:	eb 09                	jmp    c0019c34 <FAT::unlink(char const*)+0x78>
c0019c2b:	90                   	nop
c0019c2c:	b8 01 00 00 00       	mov    eax,0x1
c0019c31:	8d 76 00             	lea    esi,[esi+0x0]
c0019c34:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019c3a:	c3                   	ret    
c0019c3b:	90                   	nop

c0019c3c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019c3c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019c42:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019c49:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019c50:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019c54:	88 d0                	mov    al,dl
c0019c56:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019c5a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019c62:	75 0c                	jne    c0019c70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019c64:	b8 04 00 00 00       	mov    eax,0x4
c0019c69:	e9 7e 01 00 00       	jmp    c0019dec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019c6e:	66 90                	xchg   ax,ax
c0019c70:	83 ec 08             	sub    esp,0x8
c0019c73:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c7a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c7e:	50                   	push   eax
c0019c7f:	e8 cc 69 fe ff       	call   c0000650 <strcpy>
c0019c84:	83 c4 10             	add    esp,0x10
c0019c87:	83 ec 08             	sub    esp,0x8
c0019c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019c8e:	50                   	push   eax
c0019c8f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c96:	e8 c5 fb ff ff       	call   c0019860 <FAT::fixFilepath(char*)>
c0019c9b:	83 c4 10             	add    esp,0x10
c0019c9e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019ca6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019cae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cb3:	83 e0 01             	and    eax,0x1
c0019cb6:	74 14                	je     c0019ccc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019cb8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cbf:	83 c8 01             	or     eax,0x1
c0019cc2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ccc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cd1:	83 e0 02             	and    eax,0x2
c0019cd4:	74 12                	je     c0019ce8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019cd6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cdd:	83 c8 20             	or     eax,0x20
c0019ce0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019ce7:	90                   	nop
c0019ce8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ced:	83 e0 04             	and    eax,0x4
c0019cf0:	74 12                	je     c0019d04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019cf2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cf9:	83 c8 04             	or     eax,0x4
c0019cfc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019d03:	90                   	nop
c0019d04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d09:	83 e0 08             	and    eax,0x8
c0019d0c:	74 12                	je     c0019d20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019d0e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d15:	83 c8 02             	or     eax,0x2
c0019d18:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019d1f:	90                   	nop
c0019d20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d25:	83 e0 01             	and    eax,0x1
c0019d28:	74 12                	je     c0019d3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019d2a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d31:	83 c8 01             	or     eax,0x1
c0019d34:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d3b:	90                   	nop
c0019d3c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d41:	83 e0 02             	and    eax,0x2
c0019d44:	74 12                	je     c0019d58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019d46:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d4d:	83 c8 20             	or     eax,0x20
c0019d50:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d57:	90                   	nop
c0019d58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d5d:	83 e0 04             	and    eax,0x4
c0019d60:	74 12                	je     c0019d74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019d62:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d69:	83 c8 04             	or     eax,0x4
c0019d6c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d73:	90                   	nop
c0019d74:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d79:	83 e0 08             	and    eax,0x8
c0019d7c:	74 12                	je     c0019d90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019d7e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d85:	83 c8 02             	or     eax,0x2
c0019d88:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d8f:	90                   	nop
c0019d90:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019d97:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d9e:	09 d0                	or     eax,edx
c0019da0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019da7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019daf:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019db7:	83 ec 04             	sub    esp,0x4
c0019dba:	52                   	push   edx
c0019dbb:	50                   	push   eax
c0019dbc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019dc0:	50                   	push   eax
c0019dc1:	e8 cd b0 fe ff       	call   c0004e93 <f_chmod>
c0019dc6:	83 c4 10             	add    esp,0x10
c0019dc9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019dd0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019dd7:	85 c0                	test   eax,eax
c0019dd9:	75 09                	jne    c0019de4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019ddb:	b8 00 00 00 00       	mov    eax,0x0
c0019de0:	eb 0a                	jmp    c0019dec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019de2:	66 90                	xchg   ax,ax
c0019de4:	b8 01 00 00 00       	mov    eax,0x1
c0019de9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dec:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019df2:	c3                   	ret    
c0019df3:	90                   	nop

c0019df4 <FAT::rename(char const*, char const*)>:
c0019df4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019dfa:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019e02:	74 0c                	je     c0019e10 <FAT::rename(char const*, char const*)+0x1c>
c0019e04:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019e0c:	75 0e                	jne    c0019e1c <FAT::rename(char const*, char const*)+0x28>
c0019e0e:	66 90                	xchg   ax,ax
c0019e10:	b8 04 00 00 00       	mov    eax,0x4
c0019e15:	e9 9e 00 00 00       	jmp    c0019eb8 <FAT::rename(char const*, char const*)+0xc4>
c0019e1a:	66 90                	xchg   ax,ax
c0019e1c:	83 ec 08             	sub    esp,0x8
c0019e1f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e26:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019e2d:	50                   	push   eax
c0019e2e:	e8 1d 68 fe ff       	call   c0000650 <strcpy>
c0019e33:	83 c4 10             	add    esp,0x10
c0019e36:	83 ec 08             	sub    esp,0x8
c0019e39:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019e40:	50                   	push   eax
c0019e41:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e48:	e8 13 fa ff ff       	call   c0019860 <FAT::fixFilepath(char*)>
c0019e4d:	83 c4 10             	add    esp,0x10
c0019e50:	83 ec 08             	sub    esp,0x8
c0019e53:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019e5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e5e:	50                   	push   eax
c0019e5f:	e8 ec 67 fe ff       	call   c0000650 <strcpy>
c0019e64:	83 c4 10             	add    esp,0x10
c0019e67:	83 ec 08             	sub    esp,0x8
c0019e6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e6e:	50                   	push   eax
c0019e6f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e76:	e8 e5 f9 ff ff       	call   c0019860 <FAT::fixFilepath(char*)>
c0019e7b:	83 c4 10             	add    esp,0x10
c0019e7e:	83 ec 08             	sub    esp,0x8
c0019e81:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e85:	50                   	push   eax
c0019e86:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019e8d:	50                   	push   eax
c0019e8e:	e8 48 ae fe ff       	call   c0004cdb <f_rename>
c0019e93:	83 c4 10             	add    esp,0x10
c0019e96:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019e9d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019ea4:	85 c0                	test   eax,eax
c0019ea6:	75 08                	jne    c0019eb0 <FAT::rename(char const*, char const*)+0xbc>
c0019ea8:	b8 00 00 00 00       	mov    eax,0x0
c0019ead:	eb 09                	jmp    c0019eb8 <FAT::rename(char const*, char const*)+0xc4>
c0019eaf:	90                   	nop
c0019eb0:	b8 01 00 00 00       	mov    eax,0x1
c0019eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019eb8:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019ebe:	c3                   	ret    
c0019ebf:	90                   	nop

c0019ec0 <FAT::mkdir(char const*)>:
c0019ec0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ec6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019ece:	75 08                	jne    c0019ed8 <FAT::mkdir(char const*)+0x18>
c0019ed0:	b8 04 00 00 00       	mov    eax,0x4
c0019ed5:	eb 61                	jmp    c0019f38 <FAT::mkdir(char const*)+0x78>
c0019ed7:	90                   	nop
c0019ed8:	83 ec 08             	sub    esp,0x8
c0019edb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ee2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ee6:	50                   	push   eax
c0019ee7:	e8 64 67 fe ff       	call   c0000650 <strcpy>
c0019eec:	83 c4 10             	add    esp,0x10
c0019eef:	83 ec 08             	sub    esp,0x8
c0019ef2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ef6:	50                   	push   eax
c0019ef7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019efe:	e8 5d f9 ff ff       	call   c0019860 <FAT::fixFilepath(char*)>
c0019f03:	83 c4 10             	add    esp,0x10
c0019f06:	83 ec 0c             	sub    esp,0xc
c0019f09:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f0d:	50                   	push   eax
c0019f0e:	e8 2d ac fe ff       	call   c0004b40 <f_mkdir>
c0019f13:	83 c4 10             	add    esp,0x10
c0019f16:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f1d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019f24:	85 c0                	test   eax,eax
c0019f26:	75 08                	jne    c0019f30 <FAT::mkdir(char const*)+0x70>
c0019f28:	b8 00 00 00 00       	mov    eax,0x0
c0019f2d:	eb 09                	jmp    c0019f38 <FAT::mkdir(char const*)+0x78>
c0019f2f:	90                   	nop
c0019f30:	b8 01 00 00 00       	mov    eax,0x1
c0019f35:	8d 76 00             	lea    esi,[esi+0x0]
c0019f38:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f3e:	c3                   	ret    
c0019f3f:	90                   	nop

c0019f40 <FAT::exists(char const*)>:
c0019f40:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f46:	83 ec 08             	sub    esp,0x8
c0019f49:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f50:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f54:	50                   	push   eax
c0019f55:	e8 f6 66 fe ff       	call   c0000650 <strcpy>
c0019f5a:	83 c4 10             	add    esp,0x10
c0019f5d:	83 ec 08             	sub    esp,0x8
c0019f60:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f64:	50                   	push   eax
c0019f65:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f6c:	e8 ef f8 ff ff       	call   c0019860 <FAT::fixFilepath(char*)>
c0019f71:	83 c4 10             	add    esp,0x10
c0019f74:	83 ec 08             	sub    esp,0x8
c0019f77:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019f7e:	50                   	push   eax
c0019f7f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f83:	50                   	push   eax
c0019f84:	e8 25 a8 fe ff       	call   c00047ae <f_stat>
c0019f89:	83 c4 10             	add    esp,0x10
c0019f8c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f93:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f9a:	85 c0                	test   eax,eax
c0019f9c:	75 06                	jne    c0019fa4 <FAT::exists(char const*)+0x64>
c0019f9e:	b0 01                	mov    al,0x1
c0019fa0:	eb 06                	jmp    c0019fa8 <FAT::exists(char const*)+0x68>
c0019fa2:	66 90                	xchg   ax,ax
c0019fa4:	b0 00                	mov    al,0x0
c0019fa6:	66 90                	xchg   ax,ax
c0019fa8:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019fae:	c3                   	ret    
c0019faf:	90                   	nop

c0019fb0 <isoReadDiscSectorHelper>:
c0019fb0:	83 ec 2c             	sub    esp,0x2c
c0019fb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019fb7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019fbb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019fc0:	83 e8 41             	sub    eax,0x41
c0019fc3:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019fca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019fce:	ba 00 00 00 00       	mov    edx,0x0
c0019fd3:	83 ec 0c             	sub    esp,0xc
c0019fd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019fda:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019fde:	52                   	push   edx
c0019fdf:	50                   	push   eax
c0019fe0:	51                   	push   ecx
c0019fe1:	e8 08 3b ff ff       	call   c000daee <LogicalDisk::read(unsigned long long, int, void*)>
c0019fe6:	83 c4 20             	add    esp,0x20
c0019fe9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019fed:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019ff2:	74 0c                	je     c001a000 <isoReadDiscSectorHelper+0x50>
c0019ff4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ff8:	c1 e0 0b             	shl    eax,0xb
c0019ffb:	eb 0b                	jmp    c001a008 <isoReadDiscSectorHelper+0x58>
c0019ffd:	8d 76 00             	lea    esi,[esi+0x0]
c001a000:	b8 00 00 00 00       	mov    eax,0x0
c001a005:	8d 76 00             	lea    esi,[esi+0x0]
c001a008:	83 c4 2c             	add    esp,0x2c
c001a00b:	c3                   	ret    

c001a00c <iso_kprintf>:
c001a00c:	83 ec 0c             	sub    esp,0xc
c001a00f:	83 ec 08             	sub    esp,0x8
c001a012:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a016:	68 3a 27 02 c0       	push   0xc002273a
c001a01b:	e8 ea 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a020:	83 c4 10             	add    esp,0x10
c001a023:	90                   	nop
c001a024:	83 c4 0c             	add    esp,0xc
c001a027:	c3                   	ret    

c001a028 <iso_kprintfd>:
c001a028:	83 ec 0c             	sub    esp,0xc
c001a02b:	83 ec 08             	sub    esp,0x8
c001a02e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a032:	68 1a 0f 02 c0       	push   0xc0020f1a
c001a037:	e8 ce 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a03c:	83 c4 10             	add    esp,0x10
c001a03f:	90                   	nop
c001a040:	83 c4 0c             	add    esp,0xc
c001a043:	c3                   	ret    

c001a044 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a044:	b8 08 00 00 00       	mov    eax,0x8
c001a049:	c3                   	ret    

c001a04a <ISO9660::truncate(void*, unsigned long long)>:
c001a04a:	b8 01 00 00 00       	mov    eax,0x1
c001a04f:	c3                   	ret    

c001a050 <ISO9660::getName()>:
c001a050:	b8 f0 29 02 c0       	mov    eax,0xc00229f0
c001a055:	c3                   	ret    

c001a056 <ISO9660::closeDir(void*)>:
c001a056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a05a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a05c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a05f:	90                   	nop

c001a060 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a060:	b8 01 00 00 00       	mov    eax,0x1
c001a065:	c3                   	ret    

c001a066 <ISO9660::unlink(char const*)>:
c001a066:	b8 01 00 00 00       	mov    eax,0x1
c001a06b:	c3                   	ret    

c001a06c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a06c:	b8 03 00 00 00       	mov    eax,0x3
c001a071:	c3                   	ret    

c001a072 <ISO9660::rename(char const*, char const*)>:
c001a072:	b8 01 00 00 00       	mov    eax,0x1
c001a077:	c3                   	ret    

c001a078 <ISO9660::mkdir(char const*)>:
c001a078:	b8 01 00 00 00       	mov    eax,0x1
c001a07d:	c3                   	ret    

c001a07e <ISO9660::~ISO9660()>:
c001a07e:	83 ec 0c             	sub    esp,0xc
c001a081:	ba 30 2b 02 c0       	mov    edx,0xc0022b30
c001a086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a08a:	89 10                	mov    DWORD PTR [eax],edx
c001a08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a090:	83 ec 0c             	sub    esp,0xc
c001a093:	50                   	push   eax
c001a094:	e8 89 14 ff ff       	call   c000b522 <Filesystem::~Filesystem()>
c001a099:	83 c4 10             	add    esp,0x10
c001a09c:	90                   	nop
c001a09d:	83 c4 0c             	add    esp,0xc
c001a0a0:	c3                   	ret    
c001a0a1:	90                   	nop

c001a0a2 <ISO9660::~ISO9660()>:
c001a0a2:	83 ec 0c             	sub    esp,0xc
c001a0a5:	83 ec 0c             	sub    esp,0xc
c001a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0ac:	e8 cd ff ff ff       	call   c001a07e <ISO9660::~ISO9660()>
c001a0b1:	83 c4 10             	add    esp,0x10
c001a0b4:	83 ec 08             	sub    esp,0x8
c001a0b7:	6a 08                	push   0x8
c001a0b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0bd:	e8 4a 07 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a0c2:	83 c4 10             	add    esp,0x10
c001a0c5:	83 c4 0c             	add    esp,0xc
c001a0c8:	c3                   	ret    
c001a0c9:	90                   	nop

c001a0ca <ISO9660::exists(char const*)>:
c001a0ca:	83 ec 18             	sub    esp,0x18
c001a0cd:	68 0b 2a 02 c0       	push   0xc0022a0b
c001a0d2:	e8 c2 71 ff ff       	call   c0011299 <KePanic(char const*)>
c001a0d7:	31 c0                	xor    eax,eax
c001a0d9:	83 c4 1c             	add    esp,0x1c
c001a0dc:	c3                   	ret    
c001a0dd:	90                   	nop

c001a0de <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a0de:	56                   	push   esi
c001a0df:	53                   	push   ebx
c001a0e0:	53                   	push   ebx
c001a0e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a0e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a0e9:	85 db                	test   ebx,ebx
c001a0eb:	0f 84 ca 00 00 00    	je     c001a1bb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a0f1:	85 f6                	test   esi,esi
c001a0f3:	0f 84 c2 00 00 00    	je     c001a1bb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a0f9:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a0fe:	b8 03 00 00 00       	mov    eax,0x3
c001a103:	0f 85 b7 00 00 00    	jne    c001a1c0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a109:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a10b:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a111:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a118:	74 1b                	je     c001a135 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a11a:	85 c0                	test   eax,eax
c001a11c:	74 10                	je     c001a12e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a11e:	83 ec 0c             	sub    esp,0xc
c001a121:	68 29 2a 02 c0       	push   0xc0022a29
c001a126:	e8 6e 71 ff ff       	call   c0011299 <KePanic(char const*)>
c001a12b:	83 c4 10             	add    esp,0x10
c001a12e:	8a 03                	mov    al,BYTE PTR [ebx]
c001a130:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a135:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a138:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a13f:	85 c0                	test   eax,eax
c001a141:	74 09                	je     c001a14c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a143:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a14a:	74 48                	je     c001a194 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a14c:	83 ec 0c             	sub    esp,0xc
c001a14f:	68 39 2a 02 c0       	push   0xc0022a39
c001a154:	e8 b1 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a159:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a15c:	83 c4 10             	add    esp,0x10
c001a15f:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a166:	85 c0                	test   eax,eax
c001a168:	74 17                	je     c001a181 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a16a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a171:	83 ec 0c             	sub    esp,0xc
c001a174:	68 59 2a 02 c0       	push   0xc0022a59
c001a179:	e8 8c 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a17e:	83 c4 10             	add    esp,0x10
c001a181:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a188:	83 ec 0c             	sub    esp,0xc
c001a18b:	50                   	push   eax
c001a18c:	e8 d6 c8 fe ff       	call   c0006a67 <init_percd>
c001a191:	83 c4 10             	add    esp,0x10
c001a194:	51                   	push   ecx
c001a195:	83 c3 03             	add    ebx,0x3
c001a198:	51                   	push   ecx
c001a199:	6a 00                	push   0x0
c001a19b:	53                   	push   ebx
c001a19c:	e8 89 c3 fe ff       	call   c000652a <iso_open>
c001a1a1:	83 c4 10             	add    esp,0x10
c001a1a4:	89 c2                	mov    edx,eax
c001a1a6:	b8 01 00 00 00       	mov    eax,0x1
c001a1ab:	83 fa ff             	cmp    edx,0xffffffff
c001a1ae:	74 10                	je     c001a1c0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a1b0:	83 c2 32             	add    edx,0x32
c001a1b3:	31 c0                	xor    eax,eax
c001a1b5:	01 d2                	add    edx,edx
c001a1b7:	89 16                	mov    DWORD PTR [esi],edx
c001a1b9:	eb 05                	jmp    c001a1c0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a1bb:	b8 04 00 00 00       	mov    eax,0x4
c001a1c0:	5a                   	pop    edx
c001a1c1:	5b                   	pop    ebx
c001a1c2:	5e                   	pop    esi
c001a1c3:	c3                   	ret    

c001a1c4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a1c4:	53                   	push   ebx
c001a1c5:	83 ec 08             	sub    esp,0x8
c001a1c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1d0:	85 c0                	test   eax,eax
c001a1d2:	74 2d                	je     c001a201 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a1d4:	85 db                	test   ebx,ebx
c001a1d6:	74 29                	je     c001a201 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a1d8:	52                   	push   edx
c001a1d9:	b9 02 00 00 00       	mov    ecx,0x2
c001a1de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1e2:	99                   	cdq    
c001a1e3:	f7 f9                	idiv   ecx
c001a1e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1e9:	83 e8 32             	sub    eax,0x32
c001a1ec:	50                   	push   eax
c001a1ed:	e8 e0 c3 fe ff       	call   c00065d2 <iso_read>
c001a1f2:	83 c4 10             	add    esp,0x10
c001a1f5:	89 03                	mov    DWORD PTR [ebx],eax
c001a1f7:	09 d0                	or     eax,edx
c001a1f9:	0f 94 c0             	sete   al
c001a1fc:	0f b6 c0             	movzx  eax,al
c001a1ff:	eb 05                	jmp    c001a206 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a201:	b8 04 00 00 00       	mov    eax,0x4
c001a206:	83 c4 08             	add    esp,0x8
c001a209:	5b                   	pop    ebx
c001a20a:	c3                   	ret    
c001a20b:	90                   	nop

c001a20c <ISO9660::seek(void*, unsigned long long)>:
c001a20c:	57                   	push   edi
c001a20d:	b8 04 00 00 00       	mov    eax,0x4
c001a212:	56                   	push   esi
c001a213:	51                   	push   ecx
c001a214:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a218:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a21c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a220:	85 d2                	test   edx,edx
c001a222:	74 26                	je     c001a24a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a224:	89 d0                	mov    eax,edx
c001a226:	b9 02 00 00 00       	mov    ecx,0x2
c001a22b:	6a 00                	push   0x0
c001a22d:	99                   	cdq    
c001a22e:	f7 f9                	idiv   ecx
c001a230:	57                   	push   edi
c001a231:	56                   	push   esi
c001a232:	83 e8 32             	sub    eax,0x32
c001a235:	50                   	push   eax
c001a236:	e8 ad c4 fe ff       	call   c00066e8 <iso_seek>
c001a23b:	83 c4 10             	add    esp,0x10
c001a23e:	31 f0                	xor    eax,esi
c001a240:	31 fa                	xor    edx,edi
c001a242:	09 d0                	or     eax,edx
c001a244:	0f 95 c0             	setne  al
c001a247:	0f b6 c0             	movzx  eax,al
c001a24a:	5a                   	pop    edx
c001a24b:	5e                   	pop    esi
c001a24c:	5f                   	pop    edi
c001a24d:	c3                   	ret    

c001a24e <ISO9660::tell(void*, unsigned long long*)>:
c001a24e:	53                   	push   ebx
c001a24f:	83 ec 08             	sub    esp,0x8
c001a252:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a256:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a25a:	85 c0                	test   eax,eax
c001a25c:	74 24                	je     c001a282 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a25e:	85 db                	test   ebx,ebx
c001a260:	74 20                	je     c001a282 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a262:	b9 02 00 00 00       	mov    ecx,0x2
c001a267:	99                   	cdq    
c001a268:	f7 f9                	idiv   ecx
c001a26a:	83 ec 0c             	sub    esp,0xc
c001a26d:	83 e8 32             	sub    eax,0x32
c001a270:	50                   	push   eax
c001a271:	e8 f6 c4 fe ff       	call   c000676c <iso_tell>
c001a276:	83 c4 10             	add    esp,0x10
c001a279:	89 03                	mov    DWORD PTR [ebx],eax
c001a27b:	31 c0                	xor    eax,eax
c001a27d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a280:	eb 05                	jmp    c001a287 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a282:	b8 04 00 00 00       	mov    eax,0x4
c001a287:	83 c4 08             	add    esp,0x8
c001a28a:	5b                   	pop    ebx
c001a28b:	c3                   	ret    

c001a28c <ISO9660::stat(void*, unsigned long long*)>:
c001a28c:	56                   	push   esi
c001a28d:	53                   	push   ebx
c001a28e:	83 ec 10             	sub    esp,0x10
c001a291:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a295:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a299:	68 7d 2a 02 c0       	push   0xc0022a7d
c001a29e:	e8 67 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a2a3:	83 c4 10             	add    esp,0x10
c001a2a6:	85 db                	test   ebx,ebx
c001a2a8:	74 2a                	je     c001a2d4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a2aa:	85 f6                	test   esi,esi
c001a2ac:	74 26                	je     c001a2d4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a2ae:	89 d8                	mov    eax,ebx
c001a2b0:	b9 02 00 00 00       	mov    ecx,0x2
c001a2b5:	99                   	cdq    
c001a2b6:	83 ec 0c             	sub    esp,0xc
c001a2b9:	f7 f9                	idiv   ecx
c001a2bb:	83 e8 32             	sub    eax,0x32
c001a2be:	50                   	push   eax
c001a2bf:	e8 d9 c4 fe ff       	call   c000679d <iso_total>
c001a2c4:	83 c4 10             	add    esp,0x10
c001a2c7:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a2ce:	89 06                	mov    DWORD PTR [esi],eax
c001a2d0:	31 c0                	xor    eax,eax
c001a2d2:	eb 05                	jmp    c001a2d9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a2d4:	b8 04 00 00 00       	mov    eax,0x4
c001a2d9:	5a                   	pop    edx
c001a2da:	5b                   	pop    ebx
c001a2db:	5e                   	pop    esi
c001a2dc:	c3                   	ret    
c001a2dd:	90                   	nop

c001a2de <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a2de:	55                   	push   ebp
c001a2df:	57                   	push   edi
c001a2e0:	56                   	push   esi
c001a2e1:	53                   	push   ebx
c001a2e2:	83 ec 18             	sub    esp,0x18
c001a2e5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a2e9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a2ed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a2f1:	68 85 2a 02 c0       	push   0xc0022a85
c001a2f6:	e8 0f 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a2fb:	83 c4 10             	add    esp,0x10
c001a2fe:	85 ff                	test   edi,edi
c001a300:	0f 94 c0             	sete   al
c001a303:	85 f6                	test   esi,esi
c001a305:	0f 94 c2             	sete   dl
c001a308:	09 d0                	or     eax,edx
c001a30a:	a8 01                	test   al,0x1
c001a30c:	0f 85 dd 00 00 00    	jne    c001a3ef <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a312:	85 db                	test   ebx,ebx
c001a314:	0f 84 d5 00 00 00    	je     c001a3ef <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a31a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a31d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a323:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a32a:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a331:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a333:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a339:	74 1b                	je     c001a356 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a33b:	85 c0                	test   eax,eax
c001a33d:	74 10                	je     c001a34f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a33f:	83 ec 0c             	sub    esp,0xc
c001a342:	68 29 2a 02 c0       	push   0xc0022a29
c001a347:	e8 4d 6f ff ff       	call   c0011299 <KePanic(char const*)>
c001a34c:	83 c4 10             	add    esp,0x10
c001a34f:	8a 03                	mov    al,BYTE PTR [ebx]
c001a351:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a356:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a359:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a360:	85 c0                	test   eax,eax
c001a362:	74 09                	je     c001a36d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a364:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a36b:	74 51                	je     c001a3be <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a36d:	83 ec 0c             	sub    esp,0xc
c001a370:	68 8d 2a 02 c0       	push   0xc0022a8d
c001a375:	e8 90 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a37a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a37d:	83 c4 10             	add    esp,0x10
c001a380:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a388:	74 21                	je     c001a3ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a38a:	83 ec 0c             	sub    esp,0xc
c001a38d:	68 ad 2a 02 c0       	push   0xc0022aad
c001a392:	e8 73 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a397:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a39a:	83 c4 10             	add    esp,0x10
c001a39d:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a3a4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a3ab:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a3b2:	83 ec 0c             	sub    esp,0xc
c001a3b5:	50                   	push   eax
c001a3b6:	e8 ac c6 fe ff       	call   c0006a67 <init_percd>
c001a3bb:	83 c4 10             	add    esp,0x10
c001a3be:	52                   	push   edx
c001a3bf:	83 c3 03             	add    ebx,0x3
c001a3c2:	52                   	push   edx
c001a3c3:	6a 00                	push   0x0
c001a3c5:	53                   	push   ebx
c001a3c6:	e8 5f c1 fe ff       	call   c000652a <iso_open>
c001a3cb:	83 c4 10             	add    esp,0x10
c001a3ce:	83 f8 ff             	cmp    eax,0xffffffff
c001a3d1:	89 c5                	mov    ebp,eax
c001a3d3:	75 21                	jne    c001a3f6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a3d5:	50                   	push   eax
c001a3d6:	50                   	push   eax
c001a3d7:	6a 01                	push   0x1
c001a3d9:	53                   	push   ebx
c001a3da:	e8 4b c1 fe ff       	call   c000652a <iso_open>
c001a3df:	83 c4 10             	add    esp,0x10
c001a3e2:	ba 02 00 00 00       	mov    edx,0x2
c001a3e7:	40                   	inc    eax
c001a3e8:	74 2b                	je     c001a415 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a3ea:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a3ed:	eb 24                	jmp    c001a413 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a3ef:	ba 04 00 00 00       	mov    edx,0x4
c001a3f4:	eb 1f                	jmp    c001a415 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a3f6:	83 ec 0c             	sub    esp,0xc
c001a3f9:	50                   	push   eax
c001a3fa:	e8 9e c3 fe ff       	call   c000679d <iso_total>
c001a3ff:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a406:	89 07                	mov    DWORD PTR [edi],eax
c001a408:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a40b:	e8 a4 c1 fe ff       	call   c00065b4 <iso_close>
c001a410:	83 c4 10             	add    esp,0x10
c001a413:	31 d2                	xor    edx,edx
c001a415:	83 c4 0c             	add    esp,0xc
c001a418:	89 d0                	mov    eax,edx
c001a41a:	5b                   	pop    ebx
c001a41b:	5e                   	pop    esi
c001a41c:	5f                   	pop    edi
c001a41d:	5d                   	pop    ebp
c001a41e:	c3                   	ret    
c001a41f:	90                   	nop

c001a420 <ISO9660::close(void*)>:
c001a420:	83 ec 0c             	sub    esp,0xc
c001a423:	b8 04 00 00 00       	mov    eax,0x4
c001a428:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a42c:	85 d2                	test   edx,edx
c001a42e:	74 1b                	je     c001a44b <ISO9660::close(void*)+0x2b>
c001a430:	89 d0                	mov    eax,edx
c001a432:	b9 02 00 00 00       	mov    ecx,0x2
c001a437:	99                   	cdq    
c001a438:	83 ec 0c             	sub    esp,0xc
c001a43b:	f7 f9                	idiv   ecx
c001a43d:	83 e8 32             	sub    eax,0x32
c001a440:	50                   	push   eax
c001a441:	e8 6e c1 fe ff       	call   c00065b4 <iso_close>
c001a446:	83 c4 10             	add    esp,0x10
c001a449:	31 c0                	xor    eax,eax
c001a44b:	83 c4 0c             	add    esp,0xc
c001a44e:	c3                   	ret    
c001a44f:	90                   	nop

c001a450 <ISO9660::openDir(char const*, void**)>:
c001a450:	56                   	push   esi
c001a451:	53                   	push   ebx
c001a452:	50                   	push   eax
c001a453:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a457:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a45b:	85 db                	test   ebx,ebx
c001a45d:	0f 84 bd 00 00 00    	je     c001a520 <ISO9660::openDir(char const*, void**)+0xd0>
c001a463:	85 f6                	test   esi,esi
c001a465:	0f 84 b5 00 00 00    	je     c001a520 <ISO9660::openDir(char const*, void**)+0xd0>
c001a46b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a46d:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a473:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a47a:	74 1b                	je     c001a497 <ISO9660::openDir(char const*, void**)+0x47>
c001a47c:	85 c0                	test   eax,eax
c001a47e:	74 10                	je     c001a490 <ISO9660::openDir(char const*, void**)+0x40>
c001a480:	83 ec 0c             	sub    esp,0xc
c001a483:	68 29 2a 02 c0       	push   0xc0022a29
c001a488:	e8 0c 6e ff ff       	call   c0011299 <KePanic(char const*)>
c001a48d:	83 c4 10             	add    esp,0x10
c001a490:	8a 03                	mov    al,BYTE PTR [ebx]
c001a492:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a497:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a49a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a4a1:	85 c0                	test   eax,eax
c001a4a3:	74 10                	je     c001a4b5 <ISO9660::openDir(char const*, void**)+0x65>
c001a4a5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a4ac:	74 1a                	je     c001a4c8 <ISO9660::openDir(char const*, void**)+0x78>
c001a4ae:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a4b5:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a4bc:	83 ec 0c             	sub    esp,0xc
c001a4bf:	50                   	push   eax
c001a4c0:	e8 a2 c5 fe ff       	call   c0006a67 <init_percd>
c001a4c5:	83 c4 10             	add    esp,0x10
c001a4c8:	50                   	push   eax
c001a4c9:	83 c3 03             	add    ebx,0x3
c001a4cc:	50                   	push   eax
c001a4cd:	6a 01                	push   0x1
c001a4cf:	53                   	push   ebx
c001a4d0:	e8 55 c0 fe ff       	call   c000652a <iso_open>
c001a4d5:	83 c4 10             	add    esp,0x10
c001a4d8:	83 f8 ff             	cmp    eax,0xffffffff
c001a4db:	89 c3                	mov    ebx,eax
c001a4dd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a4e2:	75 1c                	jne    c001a500 <ISO9660::openDir(char const*, void**)+0xb0>
c001a4e4:	53                   	push   ebx
c001a4e5:	53                   	push   ebx
c001a4e6:	68 d1 2a 02 c0       	push   0xc0022ad1
c001a4eb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4f1:	e8 b6 e5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a4f6:	83 c4 10             	add    esp,0x10
c001a4f9:	b8 01 00 00 00       	mov    eax,0x1
c001a4fe:	eb 25                	jmp    c001a525 <ISO9660::openDir(char const*, void**)+0xd5>
c001a500:	51                   	push   ecx
c001a501:	01 db                	add    ebx,ebx
c001a503:	51                   	push   ecx
c001a504:	83 c3 65             	add    ebx,0x65
c001a507:	68 e4 2a 02 c0       	push   0xc0022ae4
c001a50c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a512:	e8 95 e5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a517:	83 c4 10             	add    esp,0x10
c001a51a:	31 c0                	xor    eax,eax
c001a51c:	89 1e                	mov    DWORD PTR [esi],ebx
c001a51e:	eb 05                	jmp    c001a525 <ISO9660::openDir(char const*, void**)+0xd5>
c001a520:	b8 04 00 00 00       	mov    eax,0x4
c001a525:	5a                   	pop    edx
c001a526:	5b                   	pop    ebx
c001a527:	5e                   	pop    esi
c001a528:	c3                   	ret    
c001a529:	90                   	nop

c001a52a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a52a:	55                   	push   ebp
c001a52b:	57                   	push   edi
c001a52c:	56                   	push   esi
c001a52d:	53                   	push   ebx
c001a52e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a534:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a53b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a542:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a549:	85 db                	test   ebx,ebx
c001a54b:	0f 84 e4 00 00 00    	je     c001a635 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a551:	85 ed                	test   ebp,ebp
c001a553:	0f 84 dc 00 00 00    	je     c001a635 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a559:	83 ec 0c             	sub    esp,0xc
c001a55c:	68 f7 2a 02 c0       	push   0xc0022af7
c001a561:	e8 a4 03 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a566:	89 d8                	mov    eax,ebx
c001a568:	b9 02 00 00 00       	mov    ecx,0x2
c001a56d:	99                   	cdq    
c001a56e:	f7 f9                	idiv   ecx
c001a570:	83 e8 32             	sub    eax,0x32
c001a573:	89 04 24             	mov    DWORD PTR [esp],eax
c001a576:	e8 74 c2 fe ff       	call   c00067ef <iso_readdir>
c001a57b:	83 c4 10             	add    esp,0x10
c001a57e:	85 c0                	test   eax,eax
c001a580:	89 c3                	mov    ebx,eax
c001a582:	75 38                	jne    c001a5bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a584:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a589:	53                   	push   ebx
c001a58a:	53                   	push   ebx
c001a58b:	68 02 2b 02 c0       	push   0xc0022b02
c001a590:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a596:	e8 11 e5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a59b:	83 c4 0c             	add    esp,0xc
c001a59e:	68 10 01 00 00       	push   0x110
c001a5a3:	6a 00                	push   0x0
c001a5a5:	57                   	push   edi
c001a5a6:	e8 45 5f fe ff       	call   c00004f0 <memset>
c001a5ab:	83 c4 10             	add    esp,0x10
c001a5ae:	b8 01 00 00 00       	mov    eax,0x1
c001a5b3:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a5ba:	eb 7e                	jmp    c001a63a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a5bc:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a5c2:	8d 70 08             	lea    esi,[eax+0x8]
c001a5c5:	83 ec 0c             	sub    esp,0xc
c001a5c8:	56                   	push   esi
c001a5c9:	e8 b2 5f fe ff       	call   c0000580 <strlen>
c001a5ce:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a5d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a5da:	83 c4 10             	add    esp,0x10
c001a5dd:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a5e1:	75 0a                	jne    c001a5ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a5e3:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a5e6:	b8 02 00 00 00       	mov    eax,0x2
c001a5eb:	74 05                	je     c001a5f2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a5ed:	b8 01 00 00 00       	mov    eax,0x1
c001a5f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5f6:	50                   	push   eax
c001a5f7:	50                   	push   eax
c001a5f8:	56                   	push   esi
c001a5f9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a5fd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a601:	50                   	push   eax
c001a602:	e8 49 60 fe ff       	call   c0000650 <strcpy>
c001a607:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a60e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a610:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a617:	5a                   	pop    edx
c001a618:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a61d:	59                   	pop    ecx
c001a61e:	68 15 2b 02 c0       	push   0xc0022b15
c001a623:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a629:	e8 7e e4 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a62e:	83 c4 10             	add    esp,0x10
c001a631:	31 c0                	xor    eax,eax
c001a633:	eb 05                	jmp    c001a63a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a635:	b8 04 00 00 00       	mov    eax,0x4
c001a63a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a640:	5b                   	pop    ebx
c001a641:	5e                   	pop    esi
c001a642:	5f                   	pop    edi
c001a643:	5d                   	pop    ebp
c001a644:	c3                   	ret    

c001a645 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a645:	57                   	push   edi
c001a646:	56                   	push   esi
c001a647:	53                   	push   ebx
c001a648:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a64c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a650:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a656:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a65a:	0f be cb             	movsx  ecx,bl
c001a65d:	75 0b                	jne    c001a66a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a65f:	0f be 05 40 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023940
c001a666:	39 c8                	cmp    eax,ecx
c001a668:	74 47                	je     c001a6b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a66a:	83 ec 0c             	sub    esp,0xc
c001a66d:	31 d2                	xor    edx,edx
c001a66f:	68 a0 98 02 c0       	push   0xc00298a0
c001a674:	6a 01                	push   0x1
c001a676:	52                   	push   edx
c001a677:	56                   	push   esi
c001a678:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a67f:	e8 6a 34 ff ff       	call   c000daee <LogicalDisk::read(unsigned long long, int, void*)>
c001a684:	83 c4 20             	add    esp,0x20
c001a687:	85 c0                	test   eax,eax
c001a689:	75 0e                	jne    c001a699 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a68b:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a691:	88 1d 40 39 02 c0    	mov    BYTE PTR ds:0xc0023940,bl
c001a697:	eb 18                	jmp    c001a6b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a699:	50                   	push   eax
c001a69a:	68 00 08 00 00       	push   0x800
c001a69f:	6a 00                	push   0x0
c001a6a1:	57                   	push   edi
c001a6a2:	e8 49 5e fe ff       	call   c00004f0 <memset>
c001a6a7:	83 c4 10             	add    esp,0x10
c001a6aa:	b8 01 00 00 00       	mov    eax,0x1
c001a6af:	eb 0e                	jmp    c001a6bf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a6b1:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a6b6:	b9 00 08 00 00       	mov    ecx,0x800
c001a6bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6bd:	31 c0                	xor    eax,eax
c001a6bf:	5b                   	pop    ebx
c001a6c0:	5e                   	pop    esi
c001a6c1:	5f                   	pop    edi
c001a6c2:	c3                   	ret    
c001a6c3:	90                   	nop

c001a6c4 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a6c4:	53                   	push   ebx
c001a6c5:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a6cb:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a6d5:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a6dc:	8d 58 41             	lea    ebx,[eax+0x41]
c001a6df:	0f be db             	movsx  ebx,bl
c001a6e2:	53                   	push   ebx
c001a6e3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a6e7:	50                   	push   eax
c001a6e8:	6a 10                	push   0x10
c001a6ea:	e8 56 ff ff ff       	call   c001a645 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a6ef:	83 c4 10             	add    esp,0x10
c001a6f2:	31 d2                	xor    edx,edx
c001a6f4:	85 c0                	test   eax,eax
c001a6f6:	75 33                	jne    c001a72b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6f8:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a6fd:	75 2c                	jne    c001a72b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6ff:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a704:	75 25                	jne    c001a72b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a706:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a70b:	75 1e                	jne    c001a72b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a70d:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a712:	75 17                	jne    c001a72b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a714:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a719:	75 10                	jne    c001a72b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a71b:	83 ec 0c             	sub    esp,0xc
c001a71e:	53                   	push   ebx
c001a71f:	e8 43 c3 fe ff       	call   c0006a67 <init_percd>
c001a724:	83 c4 10             	add    esp,0x10
c001a727:	40                   	inc    eax
c001a728:	0f 95 c2             	setne  dl
c001a72b:	81 c4 08 08 00 00    	add    esp,0x808
c001a731:	88 d0                	mov    al,dl
c001a733:	5b                   	pop    ebx
c001a734:	c3                   	ret    
c001a735:	90                   	nop

c001a736 <ISO9660::ISO9660()>:
c001a736:	83 ec 0c             	sub    esp,0xc
c001a739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a73d:	83 ec 0c             	sub    esp,0xc
c001a740:	50                   	push   eax
c001a741:	e8 b8 0d ff ff       	call   c000b4fe <Filesystem::Filesystem()>
c001a746:	83 c4 10             	add    esp,0x10
c001a749:	ba 30 2b 02 c0       	mov    edx,0xc0022b30
c001a74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a752:	89 10                	mov    DWORD PTR [eax],edx
c001a754:	e8 20 c4 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a759:	90                   	nop
c001a75a:	83 c4 0c             	add    esp,0xc
c001a75d:	c3                   	ret    

c001a75e <SoundCard::beginPlayback()>:
c001a75e:	c7 44 24 04 94 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b94
c001a766:	e9 2e 6b ff ff       	jmp    c0011299 <KePanic(char const*)>
c001a76b:	90                   	nop

c001a76c <SoundCard::stopPlayback()>:
c001a76c:	c7 44 24 04 94 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b94
c001a774:	e9 20 6b ff ff       	jmp    c0011299 <KePanic(char const*)>
c001a779:	90                   	nop

c001a77a <SoundCard::SoundCard(char const*)>:
c001a77a:	83 ec 1c             	sub    esp,0x1c
c001a77d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a781:	83 ec 08             	sub    esp,0x8
c001a784:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a788:	50                   	push   eax
c001a789:	e8 0e 21 ff ff       	call   c000c89c <Device::Device(char const*)>
c001a78e:	83 c4 10             	add    esp,0x10
c001a791:	ba e0 2b 02 c0       	mov    edx,0xc0022be0
c001a796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a79a:	89 10                	mov    DWORD PTR [eax],edx
c001a79c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7a0:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a7a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7ab:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a7b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7b9:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a7c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7c7:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7d5:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a7df:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a7e7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a7ec:	7f 1a                	jg     c001a808 <SoundCard::SoundCard(char const*)+0x8e>
c001a7ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a7f6:	83 c2 54             	add    edx,0x54
c001a7f9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a801:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a806:	eb df                	jmp    c001a7e7 <SoundCard::SoundCard(char const*)+0x6d>
c001a808:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a80c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a813:	90                   	nop
c001a814:	83 c4 1c             	add    esp,0x1c
c001a817:	c3                   	ret    

c001a818 <SoundCard::~SoundCard()>:
c001a818:	83 ec 0c             	sub    esp,0xc
c001a81b:	ba e0 2b 02 c0       	mov    edx,0xc0022be0
c001a820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a824:	89 10                	mov    DWORD PTR [eax],edx
c001a826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a82a:	83 ec 0c             	sub    esp,0xc
c001a82d:	50                   	push   eax
c001a82e:	e8 d3 1d ff ff       	call   c000c606 <Device::~Device()>
c001a833:	83 c4 10             	add    esp,0x10
c001a836:	90                   	nop
c001a837:	83 c4 0c             	add    esp,0xc
c001a83a:	c3                   	ret    
c001a83b:	90                   	nop

c001a83c <SoundCard::~SoundCard()>:
c001a83c:	83 ec 0c             	sub    esp,0xc
c001a83f:	83 ec 0c             	sub    esp,0xc
c001a842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a846:	e8 cd ff ff ff       	call   c001a818 <SoundCard::~SoundCard()>
c001a84b:	83 c4 10             	add    esp,0x10
c001a84e:	83 ec 08             	sub    esp,0x8
c001a851:	68 e8 01 00 00       	push   0x1e8
c001a856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a85a:	e8 ad ff fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a85f:	83 c4 10             	add    esp,0x10
c001a862:	83 c4 0c             	add    esp,0xc
c001a865:	c3                   	ret    

c001a866 <SoundCard::configureRates(int, int, int)>:
c001a866:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a86a:	31 c0                	xor    eax,eax
c001a86c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a873:	75 20                	jne    c001a895 <SoundCard::configureRates(int, int, int)+0x2f>
c001a875:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a879:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a87f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a883:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a88d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a893:	b0 01                	mov    al,0x1
c001a895:	c3                   	ret    

c001a896 <SoundCard::getSamples16(int, short*)>:
c001a896:	55                   	push   ebp
c001a897:	57                   	push   edi
c001a898:	31 ff                	xor    edi,edi
c001a89a:	56                   	push   esi
c001a89b:	53                   	push   ebx
c001a89c:	31 db                	xor    ebx,ebx
c001a89e:	83 ec 10             	sub    esp,0x10
c001a8a1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a8a5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a8a9:	8d 04 36             	lea    eax,[esi+esi*1]
c001a8ac:	50                   	push   eax
c001a8ad:	6a 00                	push   0x0
c001a8af:	55                   	push   ebp
c001a8b0:	e8 3b 5c fe ff       	call   c00004f0 <memset>
c001a8b5:	83 c4 10             	add    esp,0x10
c001a8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8bc:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a8c3:	85 c0                	test   eax,eax
c001a8c5:	74 1a                	je     c001a8e1 <SoundCard::getSamples16(int, short*)+0x4b>
c001a8c7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a8cb:	75 14                	jne    c001a8e1 <SoundCard::getSamples16(int, short*)+0x4b>
c001a8cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a8d1:	55                   	push   ebp
c001a8d2:	56                   	push   esi
c001a8d3:	50                   	push   eax
c001a8d4:	e8 f3 02 00 00       	call   c001abcc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a8d9:	83 c4 10             	add    esp,0x10
c001a8dc:	39 c3                	cmp    ebx,eax
c001a8de:	0f 4c d8             	cmovl  ebx,eax
c001a8e1:	47                   	inc    edi
c001a8e2:	83 ff 20             	cmp    edi,0x20
c001a8e5:	75 d1                	jne    c001a8b8 <SoundCard::getSamples16(int, short*)+0x22>
c001a8e7:	83 c4 0c             	add    esp,0xc
c001a8ea:	89 d8                	mov    eax,ebx
c001a8ec:	5b                   	pop    ebx
c001a8ed:	5e                   	pop    esi
c001a8ee:	5f                   	pop    edi
c001a8ef:	5d                   	pop    ebp
c001a8f0:	c3                   	ret    
c001a8f1:	90                   	nop

c001a8f2 <SoundCard::getSamples32(int, int*)>:
c001a8f2:	55                   	push   ebp
c001a8f3:	57                   	push   edi
c001a8f4:	31 ff                	xor    edi,edi
c001a8f6:	56                   	push   esi
c001a8f7:	31 f6                	xor    esi,esi
c001a8f9:	53                   	push   ebx
c001a8fa:	83 ec 10             	sub    esp,0x10
c001a8fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a901:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a905:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a909:	c1 e0 02             	shl    eax,0x2
c001a90c:	50                   	push   eax
c001a90d:	6a 00                	push   0x0
c001a90f:	55                   	push   ebp
c001a910:	e8 db 5b fe ff       	call   c00004f0 <memset>
c001a915:	83 c4 10             	add    esp,0x10
c001a918:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a91f:	85 c0                	test   eax,eax
c001a921:	74 1a                	je     c001a93d <SoundCard::getSamples32(int, int*)+0x4b>
c001a923:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a927:	75 14                	jne    c001a93d <SoundCard::getSamples32(int, int*)+0x4b>
c001a929:	53                   	push   ebx
c001a92a:	55                   	push   ebp
c001a92b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a92f:	50                   	push   eax
c001a930:	e8 67 03 00 00       	call   c001ac9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a935:	83 c4 10             	add    esp,0x10
c001a938:	39 c6                	cmp    esi,eax
c001a93a:	0f 4c f0             	cmovl  esi,eax
c001a93d:	47                   	inc    edi
c001a93e:	83 ff 20             	cmp    edi,0x20
c001a941:	75 d5                	jne    c001a918 <SoundCard::getSamples32(int, int*)+0x26>
c001a943:	85 f6                	test   esi,esi
c001a945:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a94c:	75 0f                	jne    c001a95d <SoundCard::getSamples32(int, int*)+0x6b>
c001a94e:	85 c0                	test   eax,eax
c001a950:	74 1b                	je     c001a96d <SoundCard::getSamples32(int, int*)+0x7b>
c001a952:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a954:	83 ec 0c             	sub    esp,0xc
c001a957:	53                   	push   ebx
c001a958:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a95b:	eb 0d                	jmp    c001a96a <SoundCard::getSamples32(int, int*)+0x78>
c001a95d:	85 c0                	test   eax,eax
c001a95f:	75 0c                	jne    c001a96d <SoundCard::getSamples32(int, int*)+0x7b>
c001a961:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a963:	83 ec 0c             	sub    esp,0xc
c001a966:	53                   	push   ebx
c001a967:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a96a:	83 c4 10             	add    esp,0x10
c001a96d:	83 c4 0c             	add    esp,0xc
c001a970:	89 f0                	mov    eax,esi
c001a972:	5b                   	pop    ebx
c001a973:	5e                   	pop    esi
c001a974:	5f                   	pop    edi
c001a975:	5d                   	pop    ebp
c001a976:	c3                   	ret    
c001a977:	90                   	nop

c001a978 <SoundCard::addChannel(SoundPort*)>:
c001a978:	83 ec 0c             	sub    esp,0xc
c001a97b:	31 c0                	xor    eax,eax
c001a97d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a981:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a989:	74 1b                	je     c001a9a6 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a98b:	40                   	inc    eax
c001a98c:	83 f8 20             	cmp    eax,0x20
c001a98f:	75 f0                	jne    c001a981 <SoundCard::addChannel(SoundPort*)+0x9>
c001a991:	83 ec 0c             	sub    esp,0xc
c001a994:	68 b9 2b 02 c0       	push   0xc0022bb9
c001a999:	e8 fb 68 ff ff       	call   c0011299 <KePanic(char const*)>
c001a99e:	83 c4 10             	add    esp,0x10
c001a9a1:	83 c8 ff             	or     eax,0xffffffff
c001a9a4:	eb 0b                	jmp    c001a9b1 <SoundCard::addChannel(SoundPort*)+0x39>
c001a9a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a9aa:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a9b1:	83 c4 0c             	add    esp,0xc
c001a9b4:	c3                   	ret    
c001a9b5:	90                   	nop

c001a9b6 <SoundCard::removeChannel(int)>:
c001a9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a9be:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a9c9:	c3                   	ret    
c001a9ca:	66 90                	xchg   ax,ax

c001a9cc <SoundPort::SoundPort(int, int, int, int)>:
c001a9cc:	83 ec 0c             	sub    esp,0xc
c001a9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9d3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9de:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a9e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a9ea:	89 10                	mov    DWORD PTR [eax],edx
c001a9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a9f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9ff:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aa02:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001aa07:	75 13                	jne    c001aa1c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001aa09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa0d:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa0f:	05 a0 0f 00 00       	add    eax,0xfa0
c001aa14:	d1 e0                	shl    eax,1
c001aa16:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa1a:	66 90                	xchg   ax,ax
c001aa1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aa24:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aa27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa2b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001aa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa36:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aa39:	c1 e0 02             	shl    eax,0x2
c001aa3c:	83 ec 0c             	sub    esp,0xc
c001aa3f:	50                   	push   eax
c001aa40:	e8 8e d0 fe ff       	call   c0007ad3 <malloc>
c001aa45:	83 c4 10             	add    esp,0x10
c001aa48:	89 c2                	mov    edx,eax
c001aa4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa4e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aa51:	90                   	nop
c001aa52:	83 c4 0c             	add    esp,0xc
c001aa55:	c3                   	ret    
c001aa56:	66 90                	xchg   ax,ax

c001aa58 <SoundPort::~SoundPort()>:
c001aa58:	83 ec 0c             	sub    esp,0xc
c001aa5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aa62:	85 c0                	test   eax,eax
c001aa64:	74 1e                	je     c001aa84 <SoundPort::~SoundPort()+0x2c>
c001aa66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa6a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aa6d:	83 ec 0c             	sub    esp,0xc
c001aa70:	50                   	push   eax
c001aa71:	e8 6d d0 fe ff       	call   c0007ae3 <free>
c001aa76:	83 c4 10             	add    esp,0x10
c001aa79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa7d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aa84:	90                   	nop
c001aa85:	83 c4 0c             	add    esp,0xc
c001aa88:	c3                   	ret    
c001aa89:	90                   	nop
c001aa8a:	66 90                	xchg   ax,ax

c001aa8c <SoundPort::unpause()>:
c001aa8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa90:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001aa94:	c3                   	ret    
c001aa95:	90                   	nop
c001aa96:	66 90                	xchg   ax,ax

c001aa98 <SoundPort::pause()>:
c001aa98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa9c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aaa0:	c3                   	ret    
c001aaa1:	90                   	nop
c001aaa2:	66 90                	xchg   ax,ax

c001aaa4 <SoundPort::getBufferUsed()>:
c001aaa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaa8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aaab:	c3                   	ret    

c001aaac <SoundPort::getBufferSize()>:
c001aaac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aab0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aab3:	c3                   	ret    

c001aab4 <SoundPort::buffer16(short*, int)>:
c001aab4:	55                   	push   ebp
c001aab5:	57                   	push   edi
c001aab6:	56                   	push   esi
c001aab7:	53                   	push   ebx
c001aab8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aabc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aac0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aac3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aac6:	74 68                	je     c001ab30 <SoundPort::buffer16(short*, int)+0x7c>
c001aac8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aacc:	85 c9                	test   ecx,ecx
c001aace:	7e 60                	jle    c001ab30 <SoundPort::buffer16(short*, int)+0x7c>
c001aad0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aad4:	8d 70 01             	lea    esi,[eax+0x1]
c001aad7:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aada:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aadd:	c1 e1 0f             	shl    ecx,0xf
c001aae0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aae3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aae6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aae9:	74 4d                	je     c001ab38 <SoundPort::buffer16(short*, int)+0x84>
c001aaeb:	31 f6                	xor    esi,esi
c001aaed:	eb 21                	jmp    c001ab10 <SoundPort::buffer16(short*, int)+0x5c>
c001aaef:	90                   	nop
c001aaf0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aaf5:	8d 79 01             	lea    edi,[ecx+0x1]
c001aaf8:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aafb:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aafe:	c1 e3 0f             	shl    ebx,0xf
c001ab01:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001ab04:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab07:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab0a:	74 1c                	je     c001ab28 <SoundPort::buffer16(short*, int)+0x74>
c001ab0c:	89 c6                	mov    esi,eax
c001ab0e:	66 90                	xchg   ax,ax
c001ab10:	8d 46 01             	lea    eax,[esi+0x1]
c001ab13:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ab17:	75 d7                	jne    c001aaf0 <SoundPort::buffer16(short*, int)+0x3c>
c001ab19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab20:	5b                   	pop    ebx
c001ab21:	5e                   	pop    esi
c001ab22:	5f                   	pop    edi
c001ab23:	5d                   	pop    ebp
c001ab24:	c3                   	ret    
c001ab25:	8d 76 00             	lea    esi,[esi+0x0]
c001ab28:	5b                   	pop    ebx
c001ab29:	8d 46 02             	lea    eax,[esi+0x2]
c001ab2c:	5e                   	pop    esi
c001ab2d:	5f                   	pop    edi
c001ab2e:	5d                   	pop    ebp
c001ab2f:	c3                   	ret    
c001ab30:	5b                   	pop    ebx
c001ab31:	31 c0                	xor    eax,eax
c001ab33:	5e                   	pop    esi
c001ab34:	5f                   	pop    edi
c001ab35:	5d                   	pop    ebp
c001ab36:	c3                   	ret    
c001ab37:	90                   	nop
c001ab38:	b8 01 00 00 00       	mov    eax,0x1
c001ab3d:	eb e1                	jmp    c001ab20 <SoundPort::buffer16(short*, int)+0x6c>
c001ab3f:	90                   	nop

c001ab40 <SoundPort::buffer32(int*, int)>:
c001ab40:	55                   	push   ebp
c001ab41:	57                   	push   edi
c001ab42:	56                   	push   esi
c001ab43:	53                   	push   ebx
c001ab44:	83 ec 04             	sub    esp,0x4
c001ab47:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab4f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ab53:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab56:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab59:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab5c:	74 5a                	je     c001abb8 <SoundPort::buffer32(int*, int)+0x78>
c001ab5e:	85 c0                	test   eax,eax
c001ab60:	7e 56                	jle    c001abb8 <SoundPort::buffer32(int*, int)+0x78>
c001ab62:	8d 71 01             	lea    esi,[ecx+0x1]
c001ab65:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ab68:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ab6b:	8b 37                	mov    esi,DWORD PTR [edi]
c001ab6d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001ab70:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab73:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab76:	74 4c                	je     c001abc4 <SoundPort::buffer32(int*, int)+0x84>
c001ab78:	31 f6                	xor    esi,esi
c001ab7a:	eb 1c                	jmp    c001ab98 <SoundPort::buffer32(int*, int)+0x58>
c001ab7c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001ab7f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001ab82:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001ab85:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ab88:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001ab8c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab8f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab92:	74 18                	je     c001abac <SoundPort::buffer32(int*, int)+0x6c>
c001ab94:	89 de                	mov    esi,ebx
c001ab96:	66 90                	xchg   ax,ax
c001ab98:	8d 5e 01             	lea    ebx,[esi+0x1]
c001ab9b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001ab9e:	75 dc                	jne    c001ab7c <SoundPort::buffer32(int*, int)+0x3c>
c001aba0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001aba3:	90                   	nop
c001aba4:	83 c4 04             	add    esp,0x4
c001aba7:	5b                   	pop    ebx
c001aba8:	5e                   	pop    esi
c001aba9:	5f                   	pop    edi
c001abaa:	5d                   	pop    ebp
c001abab:	c3                   	ret    
c001abac:	8d 46 02             	lea    eax,[esi+0x2]
c001abaf:	83 c4 04             	add    esp,0x4
c001abb2:	5b                   	pop    ebx
c001abb3:	5e                   	pop    esi
c001abb4:	5f                   	pop    edi
c001abb5:	5d                   	pop    ebp
c001abb6:	c3                   	ret    
c001abb7:	90                   	nop
c001abb8:	83 c4 04             	add    esp,0x4
c001abbb:	31 c0                	xor    eax,eax
c001abbd:	5b                   	pop    ebx
c001abbe:	5e                   	pop    esi
c001abbf:	5f                   	pop    edi
c001abc0:	5d                   	pop    ebp
c001abc1:	c3                   	ret    
c001abc2:	66 90                	xchg   ax,ax
c001abc4:	b8 01 00 00 00       	mov    eax,0x1
c001abc9:	eb d9                	jmp    c001aba4 <SoundPort::buffer32(int*, int)+0x64>
c001abcb:	90                   	nop

c001abcc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001abcc:	55                   	push   ebp
c001abcd:	57                   	push   edi
c001abce:	56                   	push   esi
c001abcf:	53                   	push   ebx
c001abd0:	83 ec 0c             	sub    esp,0xc
c001abd3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001abd7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001abdb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001abdf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001abe3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001abe9:	39 03                	cmp    DWORD PTR [ebx],eax
c001abeb:	74 13                	je     c001ac00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001abed:	83 ec 0c             	sub    esp,0xc
c001abf0:	68 0c 2c 02 c0       	push   0xc0022c0c
c001abf5:	e8 9f 66 ff ff       	call   c0011299 <KePanic(char const*)>
c001abfa:	83 c4 10             	add    esp,0x10
c001abfd:	8d 76 00             	lea    esi,[esi+0x0]
c001ac00:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ac06:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ac09:	74 11                	je     c001ac1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001ac0b:	83 ec 0c             	sub    esp,0xc
c001ac0e:	68 4b 2c 02 c0       	push   0xc0022c4b
c001ac13:	e8 81 66 ff ff       	call   c0011299 <KePanic(char const*)>
c001ac18:	83 c4 10             	add    esp,0x10
c001ac1b:	90                   	nop
c001ac1c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ac22:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ac25:	74 11                	je     c001ac38 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001ac27:	83 ec 0c             	sub    esp,0xc
c001ac2a:	68 4b 2c 02 c0       	push   0xc0022c4b
c001ac2f:	e8 65 66 ff ff       	call   c0011299 <KePanic(char const*)>
c001ac34:	83 c4 10             	add    esp,0x10
c001ac37:	90                   	nop
c001ac38:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001ac3b:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001ac3f:	85 f6                	test   esi,esi
c001ac41:	7e 2d                	jle    c001ac70 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ac43:	31 c0                	xor    eax,eax
c001ac45:	8d 76 00             	lea    esi,[esi+0x0]
c001ac48:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ac4b:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001ac4e:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001ac54:	85 c9                	test   ecx,ecx
c001ac56:	0f 49 d1             	cmovns edx,ecx
c001ac59:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001ac5d:	c1 fa 0f             	sar    edx,0xf
c001ac60:	01 d1                	add    ecx,edx
c001ac62:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001ac66:	83 c0 01             	add    eax,0x1
c001ac69:	39 f0                	cmp    eax,esi
c001ac6b:	75 db                	jne    c001ac48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001ac6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac70:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ac73:	83 ec 04             	sub    esp,0x4
c001ac76:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ac79:	29 f0                	sub    eax,esi
c001ac7b:	c1 e0 02             	shl    eax,0x2
c001ac7e:	50                   	push   eax
c001ac7f:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ac82:	50                   	push   eax
c001ac83:	52                   	push   edx
c001ac84:	e8 47 57 fe ff       	call   c00003d0 <memmove>
c001ac89:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ac8c:	29 f0                	sub    eax,esi
c001ac8e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ac91:	83 c4 1c             	add    esp,0x1c
c001ac94:	89 f0                	mov    eax,esi
c001ac96:	5b                   	pop    ebx
c001ac97:	5e                   	pop    esi
c001ac98:	5f                   	pop    edi
c001ac99:	5d                   	pop    ebp
c001ac9a:	c3                   	ret    
c001ac9b:	90                   	nop

c001ac9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ac9c:	55                   	push   ebp
c001ac9d:	57                   	push   edi
c001ac9e:	56                   	push   esi
c001ac9f:	53                   	push   ebx
c001aca0:	83 ec 0c             	sub    esp,0xc
c001aca3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aca7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001acab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001acaf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001acb3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001acb9:	39 03                	cmp    DWORD PTR [ebx],eax
c001acbb:	74 13                	je     c001acd0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001acbd:	83 ec 0c             	sub    esp,0xc
c001acc0:	68 2c 2c 02 c0       	push   0xc0022c2c
c001acc5:	e8 cf 65 ff ff       	call   c0011299 <KePanic(char const*)>
c001acca:	83 c4 10             	add    esp,0x10
c001accd:	8d 76 00             	lea    esi,[esi+0x0]
c001acd0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001acd6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001acd9:	74 11                	je     c001acec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001acdb:	83 ec 0c             	sub    esp,0xc
c001acde:	68 67 2c 02 c0       	push   0xc0022c67
c001ace3:	e8 b1 65 ff ff       	call   c0011299 <KePanic(char const*)>
c001ace8:	83 c4 10             	add    esp,0x10
c001aceb:	90                   	nop
c001acec:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001acf2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001acf5:	74 11                	je     c001ad08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001acf7:	83 ec 0c             	sub    esp,0xc
c001acfa:	68 67 2c 02 c0       	push   0xc0022c67
c001acff:	e8 95 65 ff ff       	call   c0011299 <KePanic(char const*)>
c001ad04:	83 c4 10             	add    esp,0x10
c001ad07:	90                   	nop
c001ad08:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001ad0b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001ad0f:	85 ff                	test   edi,edi
c001ad11:	7e 21                	jle    c001ad34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001ad13:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ad1a:	31 c0                	xor    eax,eax
c001ad1c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ad1f:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001ad22:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ad25:	01 d5                	add    ebp,edx
c001ad27:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001ad2a:	83 c0 04             	add    eax,0x4
c001ad2d:	39 c1                	cmp    ecx,eax
c001ad2f:	75 eb                	jne    c001ad1c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001ad31:	8d 76 00             	lea    esi,[esi+0x0]
c001ad34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ad37:	83 ec 04             	sub    esp,0x4
c001ad3a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ad3d:	29 f8                	sub    eax,edi
c001ad3f:	c1 e0 02             	shl    eax,0x2
c001ad42:	50                   	push   eax
c001ad43:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ad46:	50                   	push   eax
c001ad47:	52                   	push   edx
c001ad48:	e8 83 56 fe ff       	call   c00003d0 <memmove>
c001ad4d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad50:	29 f8                	sub    eax,edi
c001ad52:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ad55:	83 c4 1c             	add    esp,0x1c
c001ad58:	89 f8                	mov    eax,edi
c001ad5a:	5b                   	pop    ebx
c001ad5b:	5e                   	pop    esi
c001ad5c:	5f                   	pop    edi
c001ad5d:	5d                   	pop    ebp
c001ad5e:	c3                   	ret    
c001ad5f:	90                   	nop

c001ad60 <PCI::open(int, int, void*)>:
c001ad60:	83 ec 18             	sub    esp,0x18
c001ad63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ad6b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ad71:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad73:	50                   	push   eax
c001ad74:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ad77:	31 c0                	xor    eax,eax
c001ad79:	83 c4 1c             	add    esp,0x1c
c001ad7c:	c3                   	ret    
c001ad7d:	90                   	nop

c001ad7e <PCI::close(int, int, void*)>:
c001ad7e:	31 c0                	xor    eax,eax
c001ad80:	c3                   	ret    
c001ad81:	90                   	nop

c001ad82 <PCI::PCI()>:
c001ad82:	83 ec 0c             	sub    esp,0xc
c001ad85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad89:	83 ec 08             	sub    esp,0x8
c001ad8c:	68 83 2c 02 c0       	push   0xc0022c83
c001ad91:	50                   	push   eax
c001ad92:	e8 c9 12 ff ff       	call   c000c060 <Bus::Bus(char const*)>
c001ad97:	83 c4 10             	add    esp,0x10
c001ad9a:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c001ad9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ada3:	89 10                	mov    DWORD PTR [eax],edx
c001ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ada9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001adb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adb7:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001adbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001adc6:	0f b6 d0             	movzx  edx,al
c001adc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adcd:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001add4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001add8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001adde:	0f b6 d0             	movzx  edx,al
c001ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade5:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001adea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001adf4:	8d 50 01             	lea    edx,[eax+0x1]
c001adf7:	88 d1                	mov    cl,dl
c001adf9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001adfd:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ae03:	0f b6 d0             	movzx  edx,al
c001ae06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ae0e:	83 c9 c0             	or     ecx,0xffffffc0
c001ae11:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ae15:	90                   	nop
c001ae16:	83 c4 0c             	add    esp,0xc
c001ae19:	c3                   	ret    

c001ae1a <PCI::readBAR8(unsigned int, int)>:
c001ae1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae22:	f6 c2 01             	test   dl,0x1
c001ae25:	74 07                	je     c001ae2e <PCI::readBAR8(unsigned int, int)+0x14>
c001ae27:	83 e2 fc             	and    edx,0xfffffffc
c001ae2a:	01 c2                	add    edx,eax
c001ae2c:	ec                   	in     al,dx
c001ae2d:	c3                   	ret    
c001ae2e:	83 e2 f0             	and    edx,0xfffffff0
c001ae31:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ae34:	c3                   	ret    
c001ae35:	90                   	nop

c001ae36 <PCI::readBAR16(unsigned int, int)>:
c001ae36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae3e:	f6 c2 01             	test   dl,0x1
c001ae41:	74 08                	je     c001ae4b <PCI::readBAR16(unsigned int, int)+0x15>
c001ae43:	83 e2 fc             	and    edx,0xfffffffc
c001ae46:	01 c2                	add    edx,eax
c001ae48:	66 ed                	in     ax,dx
c001ae4a:	c3                   	ret    
c001ae4b:	83 e2 f0             	and    edx,0xfffffff0
c001ae4e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ae52:	c3                   	ret    
c001ae53:	90                   	nop

c001ae54 <PCI::readBAR32(unsigned int, int)>:
c001ae54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae5c:	f6 c2 01             	test   dl,0x1
c001ae5f:	74 07                	je     c001ae68 <PCI::readBAR32(unsigned int, int)+0x14>
c001ae61:	83 e2 fc             	and    edx,0xfffffffc
c001ae64:	01 c2                	add    edx,eax
c001ae66:	ed                   	in     eax,dx
c001ae67:	c3                   	ret    
c001ae68:	83 e2 f0             	and    edx,0xfffffff0
c001ae6b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ae6e:	c3                   	ret    
c001ae6f:	90                   	nop

c001ae70 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ae70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae7c:	f6 c2 01             	test   dl,0x1
c001ae7f:	74 07                	je     c001ae88 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ae81:	83 e2 fc             	and    edx,0xfffffffc
c001ae84:	01 ca                	add    edx,ecx
c001ae86:	ee                   	out    dx,al
c001ae87:	c3                   	ret    
c001ae88:	83 e2 f0             	and    edx,0xfffffff0
c001ae8b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ae8e:	c3                   	ret    
c001ae8f:	90                   	nop

c001ae90 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ae90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae9c:	f6 c2 01             	test   dl,0x1
c001ae9f:	74 08                	je     c001aea9 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001aea1:	83 e2 fc             	and    edx,0xfffffffc
c001aea4:	01 ca                	add    edx,ecx
c001aea6:	66 ef                	out    dx,ax
c001aea8:	c3                   	ret    
c001aea9:	83 e2 f0             	and    edx,0xfffffff0
c001aeac:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001aeb0:	c3                   	ret    
c001aeb1:	90                   	nop

c001aeb2 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001aeb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aeb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aeba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aebe:	f6 c2 01             	test   dl,0x1
c001aec1:	74 07                	je     c001aeca <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001aec3:	83 e2 fc             	and    edx,0xfffffffc
c001aec6:	01 ca                	add    edx,ecx
c001aec8:	ef                   	out    dx,eax
c001aec9:	c3                   	ret    
c001aeca:	83 e2 f0             	and    edx,0xfffffff0
c001aecd:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001aed0:	c3                   	ret    
c001aed1:	90                   	nop

c001aed2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001aed2:	55                   	push   ebp
c001aed3:	57                   	push   edi
c001aed4:	56                   	push   esi
c001aed5:	53                   	push   ebx
c001aed6:	83 ec 0c             	sub    esp,0xc
c001aed9:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001aede:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001aee2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001aee6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aeea:	83 fe 07             	cmp    esi,0x7
c001aeed:	76 10                	jbe    c001aeff <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001aeef:	83 ec 0c             	sub    esp,0xc
c001aef2:	68 8b 2c 02 c0       	push   0xc0022c8b
c001aef7:	e8 9d 63 ff ff       	call   c0011299 <KePanic(char const*)>
c001aefc:	83 c4 10             	add    esp,0x10
c001aeff:	0f b6 db             	movzx  ebx,bl
c001af02:	83 fb 0f             	cmp    ebx,0xf
c001af05:	76 10                	jbe    c001af17 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001af07:	83 ec 0c             	sub    esp,0xc
c001af0a:	68 bb 2c 02 c0       	push   0xc0022cbb
c001af0f:	e8 85 63 ff ff       	call   c0011299 <KePanic(char const*)>
c001af14:	83 c4 10             	add    esp,0x10
c001af17:	8d 04 36             	lea    eax,[esi+esi*1]
c001af1a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001af1f:	83 c8 f0             	or     eax,0xfffffff0
c001af22:	ee                   	out    dx,al
c001af23:	ba fa 0c 00 00       	mov    edx,0xcfa
c001af28:	89 e8                	mov    eax,ebp
c001af2a:	ee                   	out    dx,al
c001af2b:	89 f9                	mov    ecx,edi
c001af2d:	89 d8                	mov    eax,ebx
c001af2f:	0f b6 d9             	movzx  ebx,cl
c001af32:	83 c4 0c             	add    esp,0xc
c001af35:	c1 e0 08             	shl    eax,0x8
c001af38:	83 e3 fc             	and    ebx,0xfffffffc
c001af3b:	09 d8                	or     eax,ebx
c001af3d:	5b                   	pop    ebx
c001af3e:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001af43:	5e                   	pop    esi
c001af44:	5f                   	pop    edi
c001af45:	5d                   	pop    ebp
c001af46:	c3                   	ret    
c001af47:	90                   	nop

c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af48:	57                   	push   edi
c001af49:	56                   	push   esi
c001af4a:	53                   	push   ebx
c001af4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af57:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af5b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001af61:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af65:	83 ff 01             	cmp    edi,0x1
c001af68:	75 3f                	jne    c001afa9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001af6a:	89 de                	mov    esi,ebx
c001af6c:	0f b6 c0             	movzx  eax,al
c001af6f:	c1 e0 10             	shl    eax,0x10
c001af72:	81 e6 fc 00 00 00    	and    esi,0xfc
c001af78:	0f b6 c9             	movzx  ecx,cl
c001af7b:	09 f0                	or     eax,esi
c001af7d:	c1 e1 08             	shl    ecx,0x8
c001af80:	0f b6 d2             	movzx  edx,dl
c001af83:	c1 e2 0b             	shl    edx,0xb
c001af86:	09 c8                	or     eax,ecx
c001af88:	09 d0                	or     eax,edx
c001af8a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001af8f:	0d 00 00 00 80       	or     eax,0x80000000
c001af94:	ef                   	out    dx,eax
c001af95:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af9a:	ed                   	in     eax,dx
c001af9b:	83 e3 02             	and    ebx,0x2
c001af9e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001afa5:	d3 e8                	shr    eax,cl
c001afa7:	eb 44                	jmp    c001afed <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001afa9:	83 ff 02             	cmp    edi,0x2
c001afac:	75 2d                	jne    c001afdb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001afae:	83 ec 0c             	sub    esp,0xc
c001afb1:	0f b6 fb             	movzx  edi,bl
c001afb4:	57                   	push   edi
c001afb5:	0f b6 c9             	movzx  ecx,cl
c001afb8:	51                   	push   ecx
c001afb9:	0f b6 d2             	movzx  edx,dl
c001afbc:	52                   	push   edx
c001afbd:	0f b6 c0             	movzx  eax,al
c001afc0:	50                   	push   eax
c001afc1:	56                   	push   esi
c001afc2:	e8 0b ff ff ff       	call   c001aed2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afc7:	89 c2                	mov    edx,eax
c001afc9:	ed                   	in     eax,dx
c001afca:	83 e3 02             	and    ebx,0x2
c001afcd:	83 c4 20             	add    esp,0x20
c001afd0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001afd7:	d3 e8                	shr    eax,cl
c001afd9:	eb 12                	jmp    c001afed <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001afdb:	83 ec 0c             	sub    esp,0xc
c001afde:	68 eb 2c 02 c0       	push   0xc0022ceb
c001afe3:	e8 b1 62 ff ff       	call   c0011299 <KePanic(char const*)>
c001afe8:	83 c4 10             	add    esp,0x10
c001afeb:	31 c0                	xor    eax,eax
c001afed:	5b                   	pop    ebx
c001afee:	5e                   	pop    esi
c001afef:	5f                   	pop    edi
c001aff0:	c3                   	ret    
c001aff1:	90                   	nop

c001aff2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001aff2:	83 ec 18             	sub    esp,0x18
c001aff5:	6a 00                	push   0x0
c001aff7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001affc:	50                   	push   eax
c001affd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b002:	50                   	push   eax
c001b003:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b008:	50                   	push   eax
c001b009:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b00d:	e8 36 ff ff ff       	call   c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b012:	83 c4 2c             	add    esp,0x2c
c001b015:	c3                   	ret    

c001b016 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b016:	83 ec 18             	sub    esp,0x18
c001b019:	6a 0e                	push   0xe
c001b01b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b020:	50                   	push   eax
c001b021:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b026:	50                   	push   eax
c001b027:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b02c:	50                   	push   eax
c001b02d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b031:	e8 12 ff ff ff       	call   c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b036:	83 c4 2c             	add    esp,0x2c
c001b039:	0f b6 c0             	movzx  eax,al
c001b03c:	c3                   	ret    
c001b03d:	90                   	nop

c001b03e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b03e:	55                   	push   ebp
c001b03f:	57                   	push   edi
c001b040:	56                   	push   esi
c001b041:	53                   	push   ebx
c001b042:	83 ec 18             	sub    esp,0x18
c001b045:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b04a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b04f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b054:	6a 0a                	push   0xa
c001b056:	56                   	push   esi
c001b057:	55                   	push   ebp
c001b058:	57                   	push   edi
c001b059:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b05d:	e8 e6 fe ff ff       	call   c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b062:	83 c4 14             	add    esp,0x14
c001b065:	6a 0a                	push   0xa
c001b067:	56                   	push   esi
c001b068:	55                   	push   ebp
c001b069:	57                   	push   edi
c001b06a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b06e:	89 c3                	mov    ebx,eax
c001b070:	0f b6 db             	movzx  ebx,bl
c001b073:	e8 d0 fe ff ff       	call   c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b078:	83 c4 2c             	add    esp,0x2c
c001b07b:	25 00 ff 00 00       	and    eax,0xff00
c001b080:	09 d8                	or     eax,ebx
c001b082:	5b                   	pop    ebx
c001b083:	5e                   	pop    esi
c001b084:	5f                   	pop    edi
c001b085:	5d                   	pop    ebp
c001b086:	c3                   	ret    
c001b087:	90                   	nop

c001b088 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b088:	83 ec 18             	sub    esp,0x18
c001b08b:	6a 08                	push   0x8
c001b08d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b092:	50                   	push   eax
c001b093:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b098:	50                   	push   eax
c001b099:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b09e:	50                   	push   eax
c001b09f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0a3:	e8 a0 fe ff ff       	call   c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0a8:	83 c4 2c             	add    esp,0x2c
c001b0ab:	0f b6 c4             	movzx  eax,ah
c001b0ae:	c3                   	ret    
c001b0af:	90                   	nop

c001b0b0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b0b0:	83 ec 18             	sub    esp,0x18
c001b0b3:	6a 08                	push   0x8
c001b0b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0ba:	50                   	push   eax
c001b0bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0c0:	50                   	push   eax
c001b0c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0c6:	50                   	push   eax
c001b0c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0cb:	e8 78 fe ff ff       	call   c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0d0:	83 c4 2c             	add    esp,0x2c
c001b0d3:	c3                   	ret    

c001b0d4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b0d4:	83 ec 18             	sub    esp,0x18
c001b0d7:	6a 3c                	push   0x3c
c001b0d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0de:	50                   	push   eax
c001b0df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0e4:	50                   	push   eax
c001b0e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0ea:	50                   	push   eax
c001b0eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0ef:	e8 54 fe ff ff       	call   c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0f4:	83 c4 2c             	add    esp,0x2c
c001b0f7:	c3                   	ret    

c001b0f8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b0f8:	83 ec 18             	sub    esp,0x18
c001b0fb:	6a 18                	push   0x18
c001b0fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b102:	50                   	push   eax
c001b103:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b108:	50                   	push   eax
c001b109:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b10e:	50                   	push   eax
c001b10f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b113:	e8 30 fe ff ff       	call   c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b118:	83 c4 2c             	add    esp,0x2c
c001b11b:	0f b6 c4             	movzx  eax,ah
c001b11e:	c3                   	ret    
c001b11f:	90                   	nop

c001b120 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b120:	55                   	push   ebp
c001b121:	57                   	push   edi
c001b122:	56                   	push   esi
c001b123:	53                   	push   ebx
c001b124:	83 ec 28             	sub    esp,0x28
c001b127:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b12b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b130:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b135:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b13a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b141:	8d 43 12             	lea    eax,[ebx+0x12]
c001b144:	83 c3 10             	add    ebx,0x10
c001b147:	0f b6 c0             	movzx  eax,al
c001b14a:	0f b6 db             	movzx  ebx,bl
c001b14d:	50                   	push   eax
c001b14e:	51                   	push   ecx
c001b14f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b153:	57                   	push   edi
c001b154:	55                   	push   ebp
c001b155:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b159:	e8 ea fd ff ff       	call   c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b15e:	83 c4 14             	add    esp,0x14
c001b161:	53                   	push   ebx
c001b162:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b166:	51                   	push   ecx
c001b167:	89 c6                	mov    esi,eax
c001b169:	57                   	push   edi
c001b16a:	55                   	push   ebp
c001b16b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b16f:	c1 e6 10             	shl    esi,0x10
c001b172:	e8 d1 fd ff ff       	call   c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b177:	83 c4 3c             	add    esp,0x3c
c001b17a:	5b                   	pop    ebx
c001b17b:	0f b7 c0             	movzx  eax,ax
c001b17e:	09 f0                	or     eax,esi
c001b180:	5e                   	pop    esi
c001b181:	5f                   	pop    edi
c001b182:	5d                   	pop    ebp
c001b183:	c3                   	ret    

c001b184 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b184:	55                   	push   ebp
c001b185:	57                   	push   edi
c001b186:	56                   	push   esi
c001b187:	53                   	push   ebx
c001b188:	83 ec 0c             	sub    esp,0xc
c001b18b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b18f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b193:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b197:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b19b:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b1a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b1a5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b1a9:	83 f9 01             	cmp    ecx,0x1
c001b1ac:	75 5d                	jne    c001b20b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b1ae:	0f b6 c8             	movzx  ecx,al
c001b1b1:	89 f0                	mov    eax,esi
c001b1b3:	25 fc 00 00 00       	and    eax,0xfc
c001b1b8:	0f b6 d2             	movzx  edx,dl
c001b1bb:	c1 e1 10             	shl    ecx,0x10
c001b1be:	c1 e2 0b             	shl    edx,0xb
c001b1c1:	09 c1                	or     ecx,eax
c001b1c3:	89 f8                	mov    eax,edi
c001b1c5:	0f b6 f8             	movzx  edi,al
c001b1c8:	c1 e7 08             	shl    edi,0x8
c001b1cb:	09 f9                	or     ecx,edi
c001b1cd:	09 d1                	or     ecx,edx
c001b1cf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1d4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b1da:	89 c8                	mov    eax,ecx
c001b1dc:	ef                   	out    dx,eax
c001b1dd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b1e2:	ed                   	in     eax,dx
c001b1e3:	83 e6 02             	and    esi,0x2
c001b1e6:	0f b7 db             	movzx  ebx,bx
c001b1e9:	74 0a                	je     c001b1f5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b1eb:	c1 e3 10             	shl    ebx,0x10
c001b1ee:	0f b7 d0             	movzx  edx,ax
c001b1f1:	09 d3                	or     ebx,edx
c001b1f3:	eb 05                	jmp    c001b1fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b1f5:	66 31 c0             	xor    ax,ax
c001b1f8:	09 c3                	or     ebx,eax
c001b1fa:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1ff:	89 c8                	mov    eax,ecx
c001b201:	ef                   	out    dx,eax
c001b202:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b207:	89 d8                	mov    eax,ebx
c001b209:	eb 41                	jmp    c001b24c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b20b:	83 f9 02             	cmp    ecx,0x2
c001b20e:	75 45                	jne    c001b255 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b210:	89 f1                	mov    ecx,esi
c001b212:	83 ec 0c             	sub    esp,0xc
c001b215:	0f b6 f1             	movzx  esi,cl
c001b218:	89 f9                	mov    ecx,edi
c001b21a:	56                   	push   esi
c001b21b:	0f b6 f9             	movzx  edi,cl
c001b21e:	57                   	push   edi
c001b21f:	0f b6 d2             	movzx  edx,dl
c001b222:	52                   	push   edx
c001b223:	0f b6 c0             	movzx  eax,al
c001b226:	50                   	push   eax
c001b227:	55                   	push   ebp
c001b228:	e8 a5 fc ff ff       	call   c001aed2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b22d:	89 c2                	mov    edx,eax
c001b22f:	ed                   	in     eax,dx
c001b230:	83 c4 20             	add    esp,0x20
c001b233:	f6 c2 02             	test   dl,0x2
c001b236:	0f b7 db             	movzx  ebx,bx
c001b239:	74 0c                	je     c001b247 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b23b:	0f b7 c8             	movzx  ecx,ax
c001b23e:	89 d8                	mov    eax,ebx
c001b240:	c1 e0 10             	shl    eax,0x10
c001b243:	09 c8                	or     eax,ecx
c001b245:	eb 05                	jmp    c001b24c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b247:	66 31 c0             	xor    ax,ax
c001b24a:	09 d8                	or     eax,ebx
c001b24c:	ef                   	out    dx,eax
c001b24d:	83 c4 0c             	add    esp,0xc
c001b250:	5b                   	pop    ebx
c001b251:	5e                   	pop    esi
c001b252:	5f                   	pop    edi
c001b253:	5d                   	pop    ebp
c001b254:	c3                   	ret    
c001b255:	c7 44 24 20 eb 2c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022ceb
c001b25d:	83 c4 0c             	add    esp,0xc
c001b260:	5b                   	pop    ebx
c001b261:	5e                   	pop    esi
c001b262:	5f                   	pop    edi
c001b263:	5d                   	pop    ebp
c001b264:	e9 30 60 ff ff       	jmp    c0011299 <KePanic(char const*)>
c001b269:	90                   	nop

c001b26a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b26a:	55                   	push   ebp
c001b26b:	57                   	push   edi
c001b26c:	56                   	push   esi
c001b26d:	53                   	push   ebx
c001b26e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b274:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b27b:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b282:	0f 85 bc 00 00 00    	jne    c001b344 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xda>
c001b288:	83 ec 0c             	sub    esp,0xc
c001b28b:	68 14 01 00 00       	push   0x114
c001b290:	e8 3e c8 fe ff       	call   c0007ad3 <malloc>
c001b295:	6a 01                	push   0x1
c001b297:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b29d:	68 f1 2c 02 c0       	push   0xc0022cf1
c001b2a2:	89 c3                	mov    ebx,eax
c001b2a4:	50                   	push   eax
c001b2a5:	e8 1c 05 ff ff       	call   c000b7c6 <File::File(char const*, Process*, bool)>
c001b2aa:	83 c4 20             	add    esp,0x20
c001b2ad:	85 db                	test   ebx,ebx
c001b2af:	0f 84 6b 02 00 00    	je     c001b520 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b6>
c001b2b5:	57                   	push   edi
c001b2b6:	57                   	push   edi
c001b2b7:	6a 01                	push   0x1
c001b2b9:	53                   	push   ebx
c001b2ba:	e8 e5 05 ff ff       	call   c000b8a4 <File::open(FileOpenMode)>
c001b2bf:	83 c4 10             	add    esp,0x10
c001b2c2:	85 c0                	test   eax,eax
c001b2c4:	0f 85 56 02 00 00    	jne    c001b520 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b6>
c001b2ca:	52                   	push   edx
c001b2cb:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b2cf:	50                   	push   eax
c001b2d0:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b2d4:	50                   	push   eax
c001b2d5:	53                   	push   ebx
c001b2d6:	e8 cb 08 ff ff       	call   c000bba6 <File::stat(unsigned long long*, bool*)>
c001b2db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b2df:	40                   	inc    eax
c001b2e0:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2e3:	e8 eb c7 fe ff       	call   c0007ad3 <malloc>
c001b2e8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b2ec:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b2f0:	59                   	pop    ecx
c001b2f1:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b2f6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2f8:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b2fc:	51                   	push   ecx
c001b2fd:	50                   	push   eax
c001b2fe:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b302:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b306:	53                   	push   ebx
c001b307:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b30a:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b30e:	83 c4 20             	add    esp,0x20
c001b311:	89 c8                	mov    eax,ecx
c001b313:	99                   	cdq    
c001b314:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b318:	0f 85 02 02 00 00    	jne    c001b520 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b6>
c001b31e:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b322:	0f 85 f8 01 00 00    	jne    c001b520 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b6>
c001b328:	83 ec 0c             	sub    esp,0xc
c001b32b:	53                   	push   ebx
c001b32c:	e8 d1 05 ff ff       	call   c000b902 <File::close()>
c001b331:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b335:	83 c4 10             	add    esp,0x10
c001b338:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b33f:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b344:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b34c:	31 c9                	xor    ecx,ecx
c001b34e:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b355:	8b 2d a4 a0 02 c0    	mov    ebp,DWORD PTR ds:0xc002a0a4
c001b35b:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b362:	8b 15 a8 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0a8
c001b368:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b36d:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b375:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b37a:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b382:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b386:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b38e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b392:	39 cd                	cmp    ebp,ecx
c001b394:	0f 8e 86 01 00 00    	jle    c001b520 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b6>
c001b39a:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b39d:	d4 40                	aam    0x40
c001b39f:	d5 39                	aad    0x39
c001b3a1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b3a5:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b3a9:	d4 40                	aam    0x40
c001b3ab:	d5 39                	aad    0x39
c001b3ad:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b3b1:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b3b5:	d4 40                	aam    0x40
c001b3b7:	d5 39                	aad    0x39
c001b3b9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b3bd:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b3c1:	d4 40                	aam    0x40
c001b3c3:	d5 39                	aad    0x39
c001b3c5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b3c9:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b3cd:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b3d1:	3c 56                	cmp    al,0x56
c001b3d3:	74 47                	je     c001b41c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b2>
c001b3d5:	d4 40                	aam    0x40
c001b3d7:	d5 39                	aad    0x39
c001b3d9:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b3dc:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b3e0:	0f b6 db             	movzx  ebx,bl
c001b3e3:	c1 e3 04             	shl    ebx,0x4
c001b3e6:	d4 40                	aam    0x40
c001b3e8:	d5 39                	aad    0x39
c001b3ea:	83 e8 30             	sub    eax,0x30
c001b3ed:	0f b6 c0             	movzx  eax,al
c001b3f0:	09 c3                	or     ebx,eax
c001b3f2:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b3f6:	c1 e3 04             	shl    ebx,0x4
c001b3f9:	d4 40                	aam    0x40
c001b3fb:	d5 39                	aad    0x39
c001b3fd:	83 e8 30             	sub    eax,0x30
c001b400:	0f b6 c0             	movzx  eax,al
c001b403:	09 c3                	or     ebx,eax
c001b405:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b409:	c1 e3 04             	shl    ebx,0x4
c001b40c:	d4 40                	aam    0x40
c001b40e:	d5 39                	aad    0x39
c001b410:	83 e8 30             	sub    eax,0x30
c001b413:	0f b6 c0             	movzx  eax,al
c001b416:	09 c3                	or     ebx,eax
c001b418:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b41c:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b420:	80 fb 58             	cmp    bl,0x58
c001b423:	74 49                	je     c001b46e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x204>
c001b425:	88 d8                	mov    al,bl
c001b427:	d4 40                	aam    0x40
c001b429:	d5 39                	aad    0x39
c001b42b:	83 e8 30             	sub    eax,0x30
c001b42e:	0f b6 f8             	movzx  edi,al
c001b431:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b435:	c1 e7 04             	shl    edi,0x4
c001b438:	d4 40                	aam    0x40
c001b43a:	d5 39                	aad    0x39
c001b43c:	83 e8 30             	sub    eax,0x30
c001b43f:	0f b6 c0             	movzx  eax,al
c001b442:	09 c7                	or     edi,eax
c001b444:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b448:	c1 e7 04             	shl    edi,0x4
c001b44b:	d4 40                	aam    0x40
c001b44d:	d5 39                	aad    0x39
c001b44f:	83 e8 30             	sub    eax,0x30
c001b452:	0f b6 c0             	movzx  eax,al
c001b455:	09 c7                	or     edi,eax
c001b457:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b45b:	c1 e7 04             	shl    edi,0x4
c001b45e:	d4 40                	aam    0x40
c001b460:	d5 39                	aad    0x39
c001b462:	83 e8 30             	sub    eax,0x30
c001b465:	0f b6 c0             	movzx  eax,al
c001b468:	09 c7                	or     edi,eax
c001b46a:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b46e:	8d 41 10             	lea    eax,[ecx+0x10]
c001b471:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b475:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b479:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b47d:	83 f9 0a             	cmp    ecx,0xa
c001b480:	74 07                	je     c001b489 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x21f>
c001b482:	47                   	inc    edi
c001b483:	39 c5                	cmp    ebp,eax
c001b485:	75 16                	jne    c001b49d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x233>
c001b487:	89 e8                	mov    eax,ebp
c001b489:	83 f9 0a             	cmp    ecx,0xa
c001b48c:	0f 94 c1             	sete   cl
c001b48f:	0f b6 c9             	movzx  ecx,cl
c001b492:	01 c1                	add    ecx,eax
c001b494:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b499:	75 0f                	jne    c001b4aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x240>
c001b49b:	eb 1c                	jmp    c001b4b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24f>
c001b49d:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b4a0:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b4a4:	40                   	inc    eax
c001b4a5:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b4a8:	eb cb                	jmp    c001b475 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20b>
c001b4aa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b4ae:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b4b3:	0f 85 d9 fe ff ff    	jne    c001b392 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x128>
c001b4b9:	80 fb 58             	cmp    bl,0x58
c001b4bc:	74 10                	je     c001b4ce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x264>
c001b4be:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b4c3:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b4c8:	0f 85 c4 fe ff ff    	jne    c001b392 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x128>
c001b4ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b4d6:	83 e8 30             	sub    eax,0x30
c001b4d9:	c1 e0 04             	shl    eax,0x4
c001b4dc:	83 eb 30             	sub    ebx,0x30
c001b4df:	09 d8                	or     eax,ebx
c001b4e1:	0f b6 c0             	movzx  eax,al
c001b4e4:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b4e8:	0f 85 a4 fe ff ff    	jne    c001b392 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x128>
c001b4ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4f2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b4f6:	83 e8 30             	sub    eax,0x30
c001b4f9:	c1 e0 04             	shl    eax,0x4
c001b4fc:	83 eb 30             	sub    ebx,0x30
c001b4ff:	09 d8                	or     eax,ebx
c001b501:	0f b6 c0             	movzx  eax,al
c001b504:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b508:	0f 85 84 fe ff ff    	jne    c001b392 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x128>
c001b50e:	50                   	push   eax
c001b50f:	50                   	push   eax
c001b510:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b514:	50                   	push   eax
c001b515:	56                   	push   esi
c001b516:	e8 35 51 fe ff       	call   c0000650 <strcpy>
c001b51b:	83 c4 10             	add    esp,0x10
c001b51e:	eb 05                	jmp    c001b525 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bb>
c001b520:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b523:	31 f6                	xor    esi,esi
c001b525:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b52b:	89 f0                	mov    eax,esi
c001b52d:	5b                   	pop    ebx
c001b52e:	5e                   	pop    esi
c001b52f:	5f                   	pop    edi
c001b530:	5d                   	pop    ebp
c001b531:	c3                   	ret    

c001b532 <PCI::checkBus(unsigned char)>:
c001b532:	56                   	push   esi
c001b533:	53                   	push   ebx
c001b534:	31 db                	xor    ebx,ebx
c001b536:	51                   	push   ecx
c001b537:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b53c:	52                   	push   edx
c001b53d:	53                   	push   ebx
c001b53e:	43                   	inc    ebx
c001b53f:	56                   	push   esi
c001b540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b544:	e8 0f 03 00 00       	call   c001b858 <PCI::checkDevice(unsigned char, unsigned char)>
c001b549:	83 c4 10             	add    esp,0x10
c001b54c:	83 fb 20             	cmp    ebx,0x20
c001b54f:	75 eb                	jne    c001b53c <PCI::checkBus(unsigned char)+0xa>
c001b551:	58                   	pop    eax
c001b552:	5b                   	pop    ebx
c001b553:	5e                   	pop    esi
c001b554:	c3                   	ret    
c001b555:	90                   	nop

c001b556 <PCI::foundDevice(PCIDeviceInfo)>:
c001b556:	55                   	push   ebp
c001b557:	57                   	push   edi
c001b558:	56                   	push   esi
c001b559:	53                   	push   ebx
c001b55a:	83 ec 1c             	sub    esp,0x1c
c001b55d:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b562:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b566:	3d ff ff 00 00       	cmp    eax,0xffff
c001b56b:	0f 84 63 01 00 00    	je     c001b6d4 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b571:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b576:	66 3d 06 04          	cmp    ax,0x406
c001b57a:	75 2c                	jne    c001b5a8 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b57c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b581:	50                   	push   eax
c001b582:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b587:	50                   	push   eax
c001b588:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b58d:	50                   	push   eax
c001b58e:	53                   	push   ebx
c001b58f:	e8 64 fb ff ff       	call   c001b0f8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b594:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b598:	0f b6 c0             	movzx  eax,al
c001b59b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b59f:	83 c4 2c             	add    esp,0x2c
c001b5a2:	5b                   	pop    ebx
c001b5a3:	5e                   	pop    esi
c001b5a4:	5f                   	pop    edi
c001b5a5:	5d                   	pop    ebp
c001b5a6:	eb 8a                	jmp    c001b532 <PCI::checkBus(unsigned char)>
c001b5a8:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b5ad:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b5b3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b5b7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b5bb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b5bf:	85 d2                	test   edx,edx
c001b5c1:	74 34                	je     c001b5f7 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b5c3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b5c6:	85 c9                	test   ecx,ecx
c001b5c8:	74 29                	je     c001b5f3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b5ca:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b5d0:	31 f5                	xor    ebp,esi
c001b5d2:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b5d8:	75 19                	jne    c001b5f3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b5da:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b5e0:	75 11                	jne    c001b5f3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b5e2:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b5e9:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b5ed:	0f 84 e1 00 00 00    	je     c001b6d4 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b5f3:	8b 12                	mov    edx,DWORD PTR [edx]
c001b5f5:	eb c8                	jmp    c001b5bf <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b5f7:	3d 01 06 00 00       	cmp    eax,0x601
c001b5fc:	75 19                	jne    c001b617 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b5fe:	83 ec 0c             	sub    esp,0xc
c001b601:	68 64 01 00 00       	push   0x164
c001b606:	e8 c8 c4 fe ff       	call   c0007ad3 <malloc>
c001b60b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b60e:	89 c5                	mov    ebp,eax
c001b610:	e8 ab 0e 00 00       	call   c001c4c0 <SATABus::SATABus()>
c001b615:	eb 1e                	jmp    c001b635 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b617:	3d 01 01 00 00       	cmp    eax,0x101
c001b61c:	75 62                	jne    c001b680 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b61e:	83 ec 0c             	sub    esp,0xc
c001b621:	68 70 02 00 00       	push   0x270
c001b626:	e8 a8 c4 fe ff       	call   c0007ad3 <malloc>
c001b62b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b62e:	89 c5                	mov    ebp,eax
c001b630:	e8 f3 02 00 00       	call   c001b928 <IDE::IDE()>
c001b635:	58                   	pop    eax
c001b636:	5a                   	pop    edx
c001b637:	55                   	push   ebp
c001b638:	53                   	push   ebx
c001b639:	e8 c6 10 ff ff       	call   c000c704 <Device::addChild(Device*)>
c001b63e:	83 ec 1c             	sub    esp,0x1c
c001b641:	b9 09 00 00 00       	mov    ecx,0x9
c001b646:	fc                   	cld    
c001b647:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b64b:	89 e7                	mov    edi,esp
c001b64d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b64f:	55                   	push   ebp
c001b650:	e8 f5 0f ff ff       	call   c000c64a <Device::preOpenPCI(PCIDeviceInfo)>
c001b655:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b658:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b65c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b664:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b66c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b674:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b677:	83 c4 4c             	add    esp,0x4c
c001b67a:	5b                   	pop    ebx
c001b67b:	5e                   	pop    esi
c001b67c:	5f                   	pop    edi
c001b67d:	5d                   	pop    ebp
c001b67e:	ff e0                	jmp    eax
c001b680:	83 ec 0c             	sub    esp,0xc
c001b683:	68 58 01 00 00       	push   0x158
c001b688:	e8 46 c4 fe ff       	call   c0007ad3 <malloc>
c001b68d:	5a                   	pop    edx
c001b68e:	59                   	pop    ecx
c001b68f:	68 0a 2d 02 c0       	push   0xc0022d0a
c001b694:	50                   	push   eax
c001b695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b699:	e8 04 13 ff ff       	call   c000c9a2 <DriverlessDevice::DriverlessDevice(char const*)>
c001b69e:	5e                   	pop    esi
c001b69f:	5f                   	pop    edi
c001b6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6a4:	50                   	push   eax
c001b6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b6a9:	53                   	push   ebx
c001b6aa:	e8 55 10 ff ff       	call   c000c704 <Device::addChild(Device*)>
c001b6af:	83 c4 10             	add    esp,0x10
c001b6b2:	b9 09 00 00 00       	mov    ecx,0x9
c001b6b7:	fc                   	cld    
c001b6b8:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b6bc:	89 fe                	mov    esi,edi
c001b6be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b6c8:	83 c4 1c             	add    esp,0x1c
c001b6cb:	5b                   	pop    ebx
c001b6cc:	5e                   	pop    esi
c001b6cd:	5f                   	pop    edi
c001b6ce:	5d                   	pop    ebp
c001b6cf:	e9 76 0f ff ff       	jmp    c000c64a <Device::preOpenPCI(PCIDeviceInfo)>
c001b6d4:	83 c4 1c             	add    esp,0x1c
c001b6d7:	5b                   	pop    ebx
c001b6d8:	5e                   	pop    esi
c001b6d9:	5f                   	pop    edi
c001b6da:	5d                   	pop    ebp
c001b6db:	c3                   	ret    

c001b6dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b6dc:	55                   	push   ebp
c001b6dd:	57                   	push   edi
c001b6de:	56                   	push   esi
c001b6df:	53                   	push   ebx
c001b6e0:	83 ec 68             	sub    esp,0x68
c001b6e3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b6ea:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b6ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b6f2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b6f9:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b6fe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b702:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b709:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b70e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b712:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b717:	6a 0c                	push   0xc
c001b719:	57                   	push   edi
c001b71a:	53                   	push   ebx
c001b71b:	56                   	push   esi
c001b71c:	55                   	push   ebp
c001b71d:	e8 26 f8 ff ff       	call   c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b722:	83 c4 20             	add    esp,0x20
c001b725:	57                   	push   edi
c001b726:	53                   	push   ebx
c001b727:	56                   	push   esi
c001b728:	55                   	push   ebp
c001b729:	e8 10 f9 ff ff       	call   c001b03e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b72e:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b733:	57                   	push   edi
c001b734:	53                   	push   ebx
c001b735:	56                   	push   esi
c001b736:	55                   	push   ebp
c001b737:	e8 98 f9 ff ff       	call   c001b0d4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b73c:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b740:	83 c4 14             	add    esp,0x14
c001b743:	6a 3c                	push   0x3c
c001b745:	57                   	push   edi
c001b746:	53                   	push   ebx
c001b747:	56                   	push   esi
c001b748:	55                   	push   ebp
c001b749:	e8 fa f7 ff ff       	call   c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b74e:	0f b6 c4             	movzx  eax,ah
c001b751:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b755:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b759:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b75d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b762:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b768:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b76e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b772:	83 c4 20             	add    esp,0x20
c001b775:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b77a:	74 30                	je     c001b7ac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b77c:	31 c0                	xor    eax,eax
c001b77e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b782:	7e 28                	jle    c001b7ac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b784:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b78c:	39 cb                	cmp    ebx,ecx
c001b78e:	75 19                	jne    c001b7a9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b790:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b798:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b79c:	75 0b                	jne    c001b7a9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b79e:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b7a5:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b7a9:	40                   	inc    eax
c001b7aa:	eb d2                	jmp    c001b77e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b7ac:	31 d2                	xor    edx,edx
c001b7ae:	83 ec 0c             	sub    esp,0xc
c001b7b1:	57                   	push   edi
c001b7b2:	53                   	push   ebx
c001b7b3:	56                   	push   esi
c001b7b4:	52                   	push   edx
c001b7b5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b7b9:	55                   	push   ebp
c001b7ba:	e8 61 f9 ff ff       	call   c001b120 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b7bf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b7c3:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b7c7:	42                   	inc    edx
c001b7c8:	83 c4 20             	add    esp,0x20
c001b7cb:	83 fa 06             	cmp    edx,0x6
c001b7ce:	75 de                	jne    c001b7ae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b7d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b7d4:	83 ec 0c             	sub    esp,0xc
c001b7d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b7db:	c1 e2 08             	shl    edx,0x8
c001b7de:	0f b6 c4             	movzx  eax,ah
c001b7e1:	09 d0                	or     eax,edx
c001b7e3:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b7e8:	6a 02                	push   0x2
c001b7ea:	57                   	push   edi
c001b7eb:	53                   	push   ebx
c001b7ec:	56                   	push   esi
c001b7ed:	55                   	push   ebp
c001b7ee:	e8 55 f7 ff ff       	call   c001af48 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b7f3:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b7f8:	83 c4 20             	add    esp,0x20
c001b7fb:	57                   	push   edi
c001b7fc:	53                   	push   ebx
c001b7fd:	56                   	push   esi
c001b7fe:	55                   	push   ebp
c001b7ff:	e8 84 f8 ff ff       	call   c001b088 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b804:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b808:	57                   	push   edi
c001b809:	53                   	push   ebx
c001b80a:	56                   	push   esi
c001b80b:	55                   	push   ebp
c001b80c:	e8 e1 f7 ff ff       	call   c001aff2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b811:	b9 09 00 00 00       	mov    ecx,0x9
c001b816:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b81b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b81f:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b823:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b827:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b82b:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b82f:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b833:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b837:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b83b:	83 ec 0c             	sub    esp,0xc
c001b83e:	fc                   	cld    
c001b83f:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b843:	89 e7                	mov    edi,esp
c001b845:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b847:	55                   	push   ebp
c001b848:	e8 09 fd ff ff       	call   c001b556 <PCI::foundDevice(PCIDeviceInfo)>
c001b84d:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b853:	5b                   	pop    ebx
c001b854:	5e                   	pop    esi
c001b855:	5f                   	pop    edi
c001b856:	5d                   	pop    ebp
c001b857:	c3                   	ret    

c001b858 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b858:	55                   	push   ebp
c001b859:	57                   	push   edi
c001b85a:	56                   	push   esi
c001b85b:	53                   	push   ebx
c001b85c:	83 ec 0c             	sub    esp,0xc
c001b85f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b864:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b869:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b86d:	6a 00                	push   0x0
c001b86f:	56                   	push   esi
c001b870:	57                   	push   edi
c001b871:	55                   	push   ebp
c001b872:	e8 7b f7 ff ff       	call   c001aff2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b877:	6a 00                	push   0x0
c001b879:	56                   	push   esi
c001b87a:	57                   	push   edi
c001b87b:	55                   	push   ebp
c001b87c:	e8 5b fe ff ff       	call   c001b6dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b881:	83 c4 20             	add    esp,0x20
c001b884:	6a 00                	push   0x0
c001b886:	56                   	push   esi
c001b887:	57                   	push   edi
c001b888:	55                   	push   ebp
c001b889:	e8 88 f7 ff ff       	call   c001b016 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b88e:	83 c4 10             	add    esp,0x10
c001b891:	a8 80                	test   al,0x80
c001b893:	74 2d                	je     c001b8c2 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b895:	bb 01 00 00 00       	mov    ebx,0x1
c001b89a:	53                   	push   ebx
c001b89b:	56                   	push   esi
c001b89c:	57                   	push   edi
c001b89d:	55                   	push   ebp
c001b89e:	e8 4f f7 ff ff       	call   c001aff2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b8a3:	83 c4 10             	add    esp,0x10
c001b8a6:	0f b7 c0             	movzx  eax,ax
c001b8a9:	3d ff ff 00 00       	cmp    eax,0xffff
c001b8ae:	74 0c                	je     c001b8bc <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b8b0:	53                   	push   ebx
c001b8b1:	56                   	push   esi
c001b8b2:	57                   	push   edi
c001b8b3:	55                   	push   ebp
c001b8b4:	e8 23 fe ff ff       	call   c001b6dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b8b9:	83 c4 10             	add    esp,0x10
c001b8bc:	43                   	inc    ebx
c001b8bd:	83 fb 08             	cmp    ebx,0x8
c001b8c0:	75 d8                	jne    c001b89a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b8c2:	83 c4 0c             	add    esp,0xc
c001b8c5:	5b                   	pop    ebx
c001b8c6:	5e                   	pop    esi
c001b8c7:	5f                   	pop    edi
c001b8c8:	5d                   	pop    ebp
c001b8c9:	c3                   	ret    

c001b8ca <PCI::detect()>:
c001b8ca:	56                   	push   esi
c001b8cb:	53                   	push   ebx
c001b8cc:	53                   	push   ebx
c001b8cd:	31 db                	xor    ebx,ebx
c001b8cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8d3:	6a 00                	push   0x0
c001b8d5:	6a 00                	push   0x0
c001b8d7:	6a 00                	push   0x0
c001b8d9:	56                   	push   esi
c001b8da:	e8 37 f7 ff ff       	call   c001b016 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	a8 80                	test   al,0x80
c001b8e4:	75 21                	jne    c001b907 <PCI::detect()+0x3d>
c001b8e6:	51                   	push   ecx
c001b8e7:	51                   	push   ecx
c001b8e8:	6a 00                	push   0x0
c001b8ea:	56                   	push   esi
c001b8eb:	e8 42 fc ff ff       	call   c001b532 <PCI::checkBus(unsigned char)>
c001b8f0:	83 c4 10             	add    esp,0x10
c001b8f3:	eb 2a                	jmp    c001b91f <PCI::detect()+0x55>
c001b8f5:	52                   	push   edx
c001b8f6:	52                   	push   edx
c001b8f7:	53                   	push   ebx
c001b8f8:	43                   	inc    ebx
c001b8f9:	56                   	push   esi
c001b8fa:	e8 33 fc ff ff       	call   c001b532 <PCI::checkBus(unsigned char)>
c001b8ff:	83 c4 10             	add    esp,0x10
c001b902:	83 fb 08             	cmp    ebx,0x8
c001b905:	74 18                	je     c001b91f <PCI::detect()+0x55>
c001b907:	53                   	push   ebx
c001b908:	6a 00                	push   0x0
c001b90a:	6a 00                	push   0x0
c001b90c:	56                   	push   esi
c001b90d:	e8 e0 f6 ff ff       	call   c001aff2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b912:	83 c4 10             	add    esp,0x10
c001b915:	0f b7 c0             	movzx  eax,ax
c001b918:	3d ff ff 00 00       	cmp    eax,0xffff
c001b91d:	74 d6                	je     c001b8f5 <PCI::detect()+0x2b>
c001b91f:	58                   	pop    eax
c001b920:	5b                   	pop    ebx
c001b921:	5e                   	pop    esi
c001b922:	c3                   	ret    
c001b923:	90                   	nop

c001b924 <IDE::close(int, int, void*)>:
c001b924:	83 c8 ff             	or     eax,0xffffffff
c001b927:	c3                   	ret    

c001b928 <IDE::IDE()>:
c001b928:	83 ec 0c             	sub    esp,0xc
c001b92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b92f:	83 ec 08             	sub    esp,0x8
c001b932:	68 50 2d 02 c0       	push   0xc0022d50
c001b937:	50                   	push   eax
c001b938:	e8 0b 11 ff ff       	call   c000ca48 <HardDiskController::HardDiskController(char const*)>
c001b93d:	83 c4 10             	add    esp,0x10
c001b940:	ba e0 2d 02 c0       	mov    edx,0xc0022de0
c001b945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b949:	89 10                	mov    DWORD PTR [eax],edx
c001b94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b94f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b956:	90                   	nop
c001b957:	83 c4 0c             	add    esp,0xc
c001b95a:	c3                   	ret    
c001b95b:	90                   	nop

c001b95c <IDE::prepareInterrupt(unsigned char)>:
c001b95c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b961:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b965:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b96d:	c3                   	ret    

c001b96e <selectDrive(unsigned char, unsigned char)>:
c001b96e:	c3                   	ret    
c001b96f:	90                   	nop

c001b970 <IDE::getBase(unsigned char)>:
c001b970:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b975:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b979:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b981:	c3                   	ret    

c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b982:	55                   	push   ebp
c001b983:	57                   	push   edi
c001b984:	56                   	push   esi
c001b985:	53                   	push   ebx
c001b986:	83 ec 1c             	sub    esp,0x1c
c001b989:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b98d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b991:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b995:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b999:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b99c:	80 f9 03             	cmp    cl,0x3
c001b99f:	77 4f                	ja     c001b9f0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b9a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9a5:	0f b6 f2             	movzx  esi,dl
c001b9a8:	0f b6 db             	movzx  ebx,bl
c001b9ab:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b9ae:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b9b3:	80 ca 80             	or     dl,0x80
c001b9b6:	52                   	push   edx
c001b9b7:	6a 0c                	push   0xc
c001b9b9:	56                   	push   esi
c001b9ba:	57                   	push   edi
c001b9bb:	e8 c2 ff ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9c0:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b9c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b9c9:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b9cd:	ee                   	out    dx,al
c001b9ce:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b9d3:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b9d7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b9db:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b9e3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b9e7:	83 c4 2c             	add    esp,0x2c
c001b9ea:	5b                   	pop    ebx
c001b9eb:	5e                   	pop    esi
c001b9ec:	5f                   	pop    edi
c001b9ed:	5d                   	pop    ebp
c001b9ee:	eb 92                	jmp    c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9f0:	0f b6 cb             	movzx  ecx,bl
c001b9f3:	83 f9 07             	cmp    ecx,0x7
c001b9f6:	77 12                	ja     c001ba0a <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b9f8:	0f b6 d2             	movzx  edx,dl
c001b9fb:	0f b6 db             	movzx  ebx,bl
c001b9fe:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001ba06:	01 da                	add    edx,ebx
c001ba08:	eb 2f                	jmp    c001ba39 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ba0a:	83 f9 0d             	cmp    ecx,0xd
c001ba0d:	77 13                	ja     c001ba22 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ba0f:	0f b6 d2             	movzx  edx,dl
c001ba12:	0f b6 db             	movzx  ebx,bl
c001ba15:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ba1c:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ba20:	eb 17                	jmp    c001ba39 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ba22:	83 f9 15             	cmp    ecx,0x15
c001ba25:	77 13                	ja     c001ba3a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ba27:	0f b6 d2             	movzx  edx,dl
c001ba2a:	0f b6 db             	movzx  ebx,bl
c001ba2d:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ba35:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ba39:	ee                   	out    dx,al
c001ba3a:	83 c4 1c             	add    esp,0x1c
c001ba3d:	5b                   	pop    ebx
c001ba3e:	5e                   	pop    esi
c001ba3f:	5f                   	pop    edi
c001ba40:	5d                   	pop    ebp
c001ba41:	c3                   	ret    

c001ba42 <IDE::read(unsigned char, unsigned char)>:
c001ba42:	57                   	push   edi
c001ba43:	56                   	push   esi
c001ba44:	53                   	push   ebx
c001ba45:	83 ec 10             	sub    esp,0x10
c001ba48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba4c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba50:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ba54:	8d 42 f8             	lea    eax,[edx-0x8]
c001ba57:	3c 03                	cmp    al,0x3
c001ba59:	77 48                	ja     c001baa3 <IDE::read(unsigned char, unsigned char)+0x61>
c001ba5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ba5f:	0f b6 f1             	movzx  esi,cl
c001ba62:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001ba65:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001ba6a:	0c 80                	or     al,0x80
c001ba6c:	50                   	push   eax
c001ba6d:	6a 0c                	push   0xc
c001ba6f:	56                   	push   esi
c001ba70:	53                   	push   ebx
c001ba71:	e8 0c ff ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ba7a:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001ba7f:	0f b6 d2             	movzx  edx,dl
c001ba82:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ba86:	ec                   	in     al,dx
c001ba87:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ba8b:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001ba90:	52                   	push   edx
c001ba91:	6a 0c                	push   0xc
c001ba93:	56                   	push   esi
c001ba94:	53                   	push   ebx
c001ba95:	e8 e8 fe ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba9a:	83 c4 20             	add    esp,0x20
c001ba9d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001baa1:	eb 4c                	jmp    c001baef <IDE::read(unsigned char, unsigned char)+0xad>
c001baa3:	0f b6 f2             	movzx  esi,dl
c001baa6:	83 fe 07             	cmp    esi,0x7
c001baa9:	77 12                	ja     c001babd <IDE::read(unsigned char, unsigned char)+0x7b>
c001baab:	0f b6 c9             	movzx  ecx,cl
c001baae:	0f b6 d2             	movzx  edx,dl
c001bab1:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001bab9:	01 c2                	add    edx,eax
c001babb:	eb 31                	jmp    c001baee <IDE::read(unsigned char, unsigned char)+0xac>
c001babd:	83 fe 0d             	cmp    esi,0xd
c001bac0:	77 13                	ja     c001bad5 <IDE::read(unsigned char, unsigned char)+0x93>
c001bac2:	0f b6 c9             	movzx  ecx,cl
c001bac5:	0f b6 d2             	movzx  edx,dl
c001bac8:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001bacf:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bad3:	eb 19                	jmp    c001baee <IDE::read(unsigned char, unsigned char)+0xac>
c001bad5:	31 c0                	xor    eax,eax
c001bad7:	83 fe 15             	cmp    esi,0x15
c001bada:	77 13                	ja     c001baef <IDE::read(unsigned char, unsigned char)+0xad>
c001badc:	0f b6 c9             	movzx  ecx,cl
c001badf:	0f b6 d2             	movzx  edx,dl
c001bae2:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001baea:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001baee:	ec                   	in     al,dx
c001baef:	83 c4 10             	add    esp,0x10
c001baf2:	5b                   	pop    ebx
c001baf3:	5e                   	pop    esi
c001baf4:	5f                   	pop    edi
c001baf5:	c3                   	ret    

c001baf6 <IDE::waitInterrupt(unsigned char)>:
c001baf6:	55                   	push   ebp
c001baf7:	57                   	push   edi
c001baf8:	56                   	push   esi
c001baf9:	53                   	push   ebx
c001bafa:	31 db                	xor    ebx,ebx
c001bafc:	83 ec 0c             	sub    esp,0xc
c001baff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bb03:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bb08:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bb10:	89 e8                	mov    eax,ebp
c001bb12:	84 c0                	test   al,al
c001bb14:	75 30                	jne    c001bb46 <IDE::waitInterrupt(unsigned char)+0x50>
c001bb16:	50                   	push   eax
c001bb17:	6a 0c                	push   0xc
c001bb19:	56                   	push   esi
c001bb1a:	57                   	push   edi
c001bb1b:	e8 22 ff ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001bb20:	83 c4 10             	add    esp,0x10
c001bb23:	a8 01                	test   al,0x1
c001bb25:	75 27                	jne    c001bb4e <IDE::waitInterrupt(unsigned char)+0x58>
c001bb27:	f6 c3 04             	test   bl,0x4
c001bb2a:	75 12                	jne    c001bb3e <IDE::waitInterrupt(unsigned char)+0x48>
c001bb2c:	83 fb 32             	cmp    ebx,0x32
c001bb2f:	7e 0d                	jle    c001bb3e <IDE::waitInterrupt(unsigned char)+0x48>
c001bb31:	83 ec 0c             	sub    esp,0xc
c001bb34:	6a 64                	push   0x64
c001bb36:	e8 79 a4 ff ff       	call   c0015fb4 <milliTenthSleep(unsigned int)>
c001bb3b:	83 c4 10             	add    esp,0x10
c001bb3e:	83 fb 3c             	cmp    ebx,0x3c
c001bb41:	74 0b                	je     c001bb4e <IDE::waitInterrupt(unsigned char)+0x58>
c001bb43:	43                   	inc    ebx
c001bb44:	eb c2                	jmp    c001bb08 <IDE::waitInterrupt(unsigned char)+0x12>
c001bb46:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bb4e:	83 c4 0c             	add    esp,0xc
c001bb51:	89 e8                	mov    eax,ebp
c001bb53:	5b                   	pop    ebx
c001bb54:	5e                   	pop    esi
c001bb55:	5f                   	pop    edi
c001bb56:	5d                   	pop    ebp
c001bb57:	c3                   	ret    

c001bb58 <ideChannel0IRQHandler(regs*, void*)>:
c001bb58:	83 ec 10             	sub    esp,0x10
c001bb5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb5f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bb66:	6a 07                	push   0x7
c001bb68:	6a 00                	push   0x0
c001bb6a:	50                   	push   eax
c001bb6b:	e8 d2 fe ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001bb70:	83 c4 1c             	add    esp,0x1c
c001bb73:	c3                   	ret    

c001bb74 <ideChannel1IRQHandler(regs*, void*)>:
c001bb74:	83 ec 10             	sub    esp,0x10
c001bb77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb7b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bb82:	6a 07                	push   0x7
c001bb84:	6a 01                	push   0x1
c001bb86:	50                   	push   eax
c001bb87:	e8 b6 fe ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001bb8c:	83 c4 1c             	add    esp,0x1c
c001bb8f:	c3                   	ret    

c001bb90 <IDE::enableIRQs(unsigned char, bool)>:
c001bb90:	57                   	push   edi
c001bb91:	b8 02 00 00 00       	mov    eax,0x2
c001bb96:	56                   	push   esi
c001bb97:	53                   	push   ebx
c001bb98:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bb9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bba1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bba5:	74 02                	je     c001bba9 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bba7:	31 c0                	xor    eax,eax
c001bba9:	0f b6 db             	movzx  ebx,bl
c001bbac:	bf 04 00 00 00       	mov    edi,0x4
c001bbb1:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bbb8:	50                   	push   eax
c001bbb9:	6a 0c                	push   0xc
c001bbbb:	53                   	push   ebx
c001bbbc:	56                   	push   esi
c001bbbd:	e8 c0 fd ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbc2:	83 c4 10             	add    esp,0x10
c001bbc5:	50                   	push   eax
c001bbc6:	6a 0c                	push   0xc
c001bbc8:	53                   	push   ebx
c001bbc9:	56                   	push   esi
c001bbca:	e8 73 fe ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001bbcf:	83 c4 10             	add    esp,0x10
c001bbd2:	4f                   	dec    edi
c001bbd3:	75 f0                	jne    c001bbc5 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bbd5:	5b                   	pop    ebx
c001bbd6:	5e                   	pop    esi
c001bbd7:	5f                   	pop    edi
c001bbd8:	c3                   	ret    
c001bbd9:	90                   	nop

c001bbda <IDE::open(int, int, void*)>:
c001bbda:	55                   	push   ebp
c001bbdb:	57                   	push   edi
c001bbdc:	56                   	push   esi
c001bbdd:	53                   	push   ebx
c001bbde:	83 ec 1c             	sub    esp,0x1c
c001bbe1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bbe5:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bbec:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bbf5:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bbfe:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bc05:	0f 85 da 02 00 00    	jne    c001bee5 <IDE::open(int, int, void*)+0x30b>
c001bc0b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bc11:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bc15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc19:	83 e0 7f             	and    eax,0x7f
c001bc1c:	83 f8 05             	cmp    eax,0x5
c001bc1f:	74 05                	je     c001bc26 <IDE::open(int, int, void*)+0x4c>
c001bc21:	83 f8 0f             	cmp    eax,0xf
c001bc24:	75 32                	jne    c001bc58 <IDE::open(int, int, void*)+0x7e>
c001bc26:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bc2c:	83 e0 fc             	and    eax,0xfffffffc
c001bc2f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bc36:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bc3c:	83 e0 fc             	and    eax,0xfffffffc
c001bc3f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bc46:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bc4c:	83 e0 fc             	and    eax,0xfffffffc
c001bc4f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bc56:	eb 14                	jmp    c001bc6c <IDE::open(int, int, void*)+0x92>
c001bc58:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bc62:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bc6c:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001bc73:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bc78:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bc7f:	89 fa                	mov    edx,edi
c001bc81:	89 f1                	mov    ecx,esi
c001bc83:	c1 e1 10             	shl    ecx,0x10
c001bc86:	89 e8                	mov    eax,ebp
c001bc88:	c1 e0 0b             	shl    eax,0xb
c001bc8b:	09 c1                	or     ecx,eax
c001bc8d:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bc94:	c1 e0 08             	shl    eax,0x8
c001bc97:	09 c1                	or     ecx,eax
c001bc99:	89 c8                	mov    eax,ecx
c001bc9b:	0d 08 00 00 80       	or     eax,0x80000008
c001bca0:	ef                   	out    dx,eax
c001bca1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bca6:	ed                   	in     eax,dx
c001bca7:	c1 e8 10             	shr    eax,0x10
c001bcaa:	3d ff ff 00 00       	cmp    eax,0xffff
c001bcaf:	0f 84 f9 00 00 00    	je     c001bdae <IDE::open(int, int, void*)+0x1d4>
c001bcb5:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bcbb:	89 fa                	mov    edx,edi
c001bcbd:	89 c8                	mov    eax,ecx
c001bcbf:	ef                   	out    dx,eax
c001bcc0:	b0 fe                	mov    al,0xfe
c001bcc2:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bcc7:	ee                   	out    dx,al
c001bcc8:	89 c8                	mov    eax,ecx
c001bcca:	89 fa                	mov    edx,edi
c001bccc:	ef                   	out    dx,eax
c001bccd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bcd2:	ed                   	in     eax,dx
c001bcd3:	3c fe                	cmp    al,0xfe
c001bcd5:	0f 85 a4 00 00 00    	jne    c001bd7f <IDE::open(int, int, void*)+0x1a5>
c001bcdb:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bce1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bce8:	74 30                	je     c001bd1a <IDE::open(int, int, void*)+0x140>
c001bcea:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bcf0:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bcf4:	83 ec 0c             	sub    esp,0xc
c001bcf7:	40                   	inc    eax
c001bcf8:	0f b6 c0             	movzx  eax,al
c001bcfb:	50                   	push   eax
c001bcfc:	55                   	push   ebp
c001bcfd:	56                   	push   esi
c001bcfe:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bd04:	51                   	push   ecx
c001bd05:	e8 96 39 ff ff       	call   c000f6a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bd0a:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bd0f:	83 c4 1c             	add    esp,0x1c
c001bd12:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bd18:	eb 0a                	jmp    c001bd24 <IDE::open(int, int, void*)+0x14a>
c001bd1a:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bd24:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bd2b:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001bd30:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bd37:	89 ea                	mov    edx,ebp
c001bd39:	c1 e1 10             	shl    ecx,0x10
c001bd3c:	c1 e0 08             	shl    eax,0x8
c001bd3f:	09 c1                	or     ecx,eax
c001bd41:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bd48:	c1 e0 0b             	shl    eax,0xb
c001bd4b:	09 c1                	or     ecx,eax
c001bd4d:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bd53:	89 c8                	mov    eax,ecx
c001bd55:	ef                   	out    dx,eax
c001bd56:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001bd5c:	be fc 0c 00 00       	mov    esi,0xcfc
c001bd61:	89 f2                	mov    edx,esi
c001bd63:	89 f8                	mov    eax,edi
c001bd65:	ee                   	out    dx,al
c001bd66:	89 c8                	mov    eax,ecx
c001bd68:	89 ea                	mov    edx,ebp
c001bd6a:	ef                   	out    dx,eax
c001bd6b:	89 f2                	mov    edx,esi
c001bd6d:	ed                   	in     eax,dx
c001bd6e:	0f b6 c0             	movzx  eax,al
c001bd71:	39 f8                	cmp    eax,edi
c001bd73:	74 49                	je     c001bdbe <IDE::open(int, int, void*)+0x1e4>
c001bd75:	83 ec 0c             	sub    esp,0xc
c001bd78:	68 68 2d 02 c0       	push   0xc0022d68
c001bd7d:	eb 37                	jmp    c001bdb6 <IDE::open(int, int, void*)+0x1dc>
c001bd7f:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bd88:	75 1a                	jne    c001bda4 <IDE::open(int, int, void*)+0x1ca>
c001bd8a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bd8f:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bd94:	74 05                	je     c001bd9b <IDE::open(int, int, void*)+0x1c1>
c001bd96:	83 c0 80             	add    eax,0xffffff80
c001bd99:	75 09                	jne    c001bda4 <IDE::open(int, int, void*)+0x1ca>
c001bd9b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bda2:	eb 1a                	jmp    c001bdbe <IDE::open(int, int, void*)+0x1e4>
c001bda4:	83 ec 0c             	sub    esp,0xc
c001bda7:	68 70 2d 02 c0       	push   0xc0022d70
c001bdac:	eb 08                	jmp    c001bdb6 <IDE::open(int, int, void*)+0x1dc>
c001bdae:	83 ec 0c             	sub    esp,0xc
c001bdb1:	68 a1 2d 02 c0       	push   0xc0022da1
c001bdb6:	e8 de 54 ff ff       	call   c0011299 <KePanic(char const*)>
c001bdbb:	83 c4 10             	add    esp,0x10
c001bdbe:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bdc5:	74 1a                	je     c001bde1 <IDE::open(int, int, void*)+0x207>
c001bdc7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bdcd:	83 e0 fc             	and    eax,0xfffffffc
c001bdd0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bdd7:	83 c0 08             	add    eax,0x8
c001bdda:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bde1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bde7:	89 c2                	mov    edx,eax
c001bde9:	83 e2 0f             	and    edx,0xf
c001bdec:	83 fa 08             	cmp    edx,0x8
c001bdef:	75 0a                	jne    c001bdfb <IDE::open(int, int, void*)+0x221>
c001bdf1:	83 e8 02             	sub    eax,0x2
c001bdf4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bdfb:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001be01:	89 c2                	mov    edx,eax
c001be03:	83 e2 0f             	and    edx,0xf
c001be06:	83 fa 08             	cmp    edx,0x8
c001be09:	75 0a                	jne    c001be15 <IDE::open(int, int, void*)+0x23b>
c001be0b:	83 e8 02             	sub    eax,0x2
c001be0e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001be15:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001be1c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001be23:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be26:	89 d0                	mov    eax,edx
c001be28:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be2c:	8d 7a 01             	lea    edi,[edx+0x1]
c001be2f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001be33:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001be37:	83 e1 3f             	and    ecx,0x3f
c001be3a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001be3e:	89 f9                	mov    ecx,edi
c001be40:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001be47:	8d 78 02             	lea    edi,[eax+0x2]
c001be4a:	0f b6 c9             	movzx  ecx,cl
c001be4d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001be50:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001be54:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001be58:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001be5c:	83 e2 3f             	and    edx,0x3f
c001be5f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001be63:	89 f9                	mov    ecx,edi
c001be65:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001be6b:	8d 78 03             	lea    edi,[eax+0x3]
c001be6e:	0f b6 d1             	movzx  edx,cl
c001be71:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be74:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001be78:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be7c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001be80:	83 e1 3f             	and    ecx,0x3f
c001be83:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001be87:	89 f9                	mov    ecx,edi
c001be89:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001be8f:	8d 78 04             	lea    edi,[eax+0x4]
c001be92:	0f b6 c9             	movzx  ecx,cl
c001be95:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001be98:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001be9c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bea0:	89 fa                	mov    edx,edi
c001bea2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bea8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001beac:	83 e2 3f             	and    edx,0x3f
c001beaf:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001beb3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001beba:	66 85 f6             	test   si,si
c001bebd:	74 65                	je     c001bf24 <IDE::open(int, int, void*)+0x34a>
c001bebf:	89 f9                	mov    ecx,edi
c001bec1:	83 c0 05             	add    eax,0x5
c001bec4:	0f b6 d1             	movzx  edx,cl
c001bec7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001beca:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bece:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bed2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bed8:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bedc:	83 e0 3f             	and    eax,0x3f
c001bedf:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bee3:	eb 3f                	jmp    c001bf24 <IDE::open(int, int, void*)+0x34a>
c001bee5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001beec:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bef2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bef9:	05 06 02 00 00       	add    eax,0x206
c001befe:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bf05:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bf0c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bf13:	05 06 02 00 00       	add    eax,0x206
c001bf18:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bf1f:	e9 bd fe ff ff       	jmp    c001bde1 <IDE::open(int, int, void*)+0x207>
c001bf24:	50                   	push   eax
c001bf25:	50                   	push   eax
c001bf26:	6a 00                	push   0x0
c001bf28:	53                   	push   ebx
c001bf29:	e8 2e fa ff ff       	call   c001b95c <IDE::prepareInterrupt(unsigned char)>
c001bf2e:	5a                   	pop    edx
c001bf2f:	59                   	pop    ecx
c001bf30:	6a 01                	push   0x1
c001bf32:	53                   	push   ebx
c001bf33:	e8 24 fa ff ff       	call   c001b95c <IDE::prepareInterrupt(unsigned char)>
c001bf38:	83 c4 0c             	add    esp,0xc
c001bf3b:	6a 00                	push   0x0
c001bf3d:	6a 00                	push   0x0
c001bf3f:	53                   	push   ebx
c001bf40:	e8 4b fc ff ff       	call   c001bb90 <IDE::enableIRQs(unsigned char, bool)>
c001bf45:	83 c4 0c             	add    esp,0xc
c001bf48:	6a 00                	push   0x0
c001bf4a:	6a 01                	push   0x1
c001bf4c:	53                   	push   ebx
c001bf4d:	e8 3e fc ff ff       	call   c001bb90 <IDE::enableIRQs(unsigned char, bool)>
c001bf52:	83 c4 10             	add    esp,0x10
c001bf55:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bf5c:	74 34                	je     c001bf92 <IDE::open(int, int, void*)+0x3b8>
c001bf5e:	83 ec 0c             	sub    esp,0xc
c001bf61:	53                   	push   ebx
c001bf62:	6a 01                	push   0x1
c001bf64:	68 58 bb 01 c0       	push   0xc001bb58
c001bf69:	6a 0e                	push   0xe
c001bf6b:	53                   	push   ebx
c001bf6c:	e8 3f 07 ff ff       	call   c000c6b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf71:	83 c4 14             	add    esp,0x14
c001bf74:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bf7a:	53                   	push   ebx
c001bf7b:	6a 01                	push   0x1
c001bf7d:	68 74 bb 01 c0       	push   0xc001bb74
c001bf82:	6a 0f                	push   0xf
c001bf84:	53                   	push   ebx
c001bf85:	e8 26 07 ff ff       	call   c000c6b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf8a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bf90:	eb 38                	jmp    c001bfca <IDE::open(int, int, void*)+0x3f0>
c001bf92:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bf9c:	83 ec 0c             	sub    esp,0xc
c001bf9f:	53                   	push   ebx
c001bfa0:	6a 00                	push   0x0
c001bfa2:	68 58 bb 01 c0       	push   0xc001bb58
c001bfa7:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bfad:	53                   	push   ebx
c001bfae:	e8 fd 06 ff ff       	call   c000c6b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bfb3:	83 c4 14             	add    esp,0x14
c001bfb6:	53                   	push   ebx
c001bfb7:	6a 00                	push   0x0
c001bfb9:	68 74 bb 01 c0       	push   0xc001bb74
c001bfbe:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bfc4:	53                   	push   ebx
c001bfc5:	e8 e6 06 ff ff       	call   c000c6b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bfca:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfcc:	83 c4 20             	add    esp,0x20
c001bfcf:	83 ec 0c             	sub    esp,0xc
c001bfd2:	53                   	push   ebx
c001bfd3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bfd6:	83 c4 0c             	add    esp,0xc
c001bfd9:	6a 07                	push   0x7
c001bfdb:	6a 00                	push   0x0
c001bfdd:	53                   	push   ebx
c001bfde:	e8 5f fa ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001bfe3:	83 c4 0c             	add    esp,0xc
c001bfe6:	6a 07                	push   0x7
c001bfe8:	6a 01                	push   0x1
c001bfea:	53                   	push   ebx
c001bfeb:	e8 52 fa ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001bff0:	83 c4 0c             	add    esp,0xc
c001bff3:	6a 01                	push   0x1
c001bff5:	6a 00                	push   0x0
c001bff7:	53                   	push   ebx
c001bff8:	e8 93 fb ff ff       	call   c001bb90 <IDE::enableIRQs(unsigned char, bool)>
c001bffd:	83 c4 0c             	add    esp,0xc
c001c000:	6a 01                	push   0x1
c001c002:	6a 01                	push   0x1
c001c004:	53                   	push   ebx
c001c005:	e8 86 fb ff ff       	call   c001bb90 <IDE::enableIRQs(unsigned char, bool)>
c001c00a:	83 c4 2c             	add    esp,0x2c
c001c00d:	31 c0                	xor    eax,eax
c001c00f:	5b                   	pop    ebx
c001c010:	5e                   	pop    esi
c001c011:	5f                   	pop    edi
c001c012:	5d                   	pop    ebp
c001c013:	c3                   	ret    

c001c014 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c014:	55                   	push   ebp
c001c015:	57                   	push   edi
c001c016:	56                   	push   esi
c001c017:	53                   	push   ebx
c001c018:	83 ec 1c             	sub    esp,0x1c
c001c01b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c01f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c023:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c027:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c02b:	8d 42 f8             	lea    eax,[edx-0x8]
c001c02e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c032:	3c 03                	cmp    al,0x3
c001c034:	77 5a                	ja     c001c090 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c036:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c03a:	0f b6 db             	movzx  ebx,bl
c001c03d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c041:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c044:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c049:	0c 80                	or     al,0x80
c001c04b:	50                   	push   eax
c001c04c:	6a 0c                	push   0xc
c001c04e:	53                   	push   ebx
c001c04f:	56                   	push   esi
c001c050:	e8 2d f9 ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c055:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c059:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c05e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c062:	0f b6 d2             	movzx  edx,dl
c001c065:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c069:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c06b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c070:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c074:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c078:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c080:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c084:	83 c4 2c             	add    esp,0x2c
c001c087:	5b                   	pop    ebx
c001c088:	5e                   	pop    esi
c001c089:	5f                   	pop    edi
c001c08a:	5d                   	pop    ebp
c001c08b:	e9 f2 f8 ff ff       	jmp    c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c090:	0f b6 c2             	movzx  eax,dl
c001c093:	83 f8 07             	cmp    eax,0x7
c001c096:	77 12                	ja     c001c0aa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c098:	0f b6 db             	movzx  ebx,bl
c001c09b:	0f b6 c2             	movzx  eax,dl
c001c09e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c0a6:	01 c2                	add    edx,eax
c001c0a8:	eb 2f                	jmp    c001c0d9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c0aa:	83 f8 0d             	cmp    eax,0xd
c001c0ad:	77 13                	ja     c001c0c2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c0af:	0f b6 db             	movzx  ebx,bl
c001c0b2:	0f b6 d2             	movzx  edx,dl
c001c0b5:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c0bc:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c0c0:	eb 17                	jmp    c001c0d9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c0c2:	83 f8 15             	cmp    eax,0x15
c001c0c5:	77 14                	ja     c001c0db <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c0c7:	0f b6 db             	movzx  ebx,bl
c001c0ca:	0f b6 d2             	movzx  edx,dl
c001c0cd:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c0d5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c0d9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c0db:	83 c4 1c             	add    esp,0x1c
c001c0de:	5b                   	pop    ebx
c001c0df:	5e                   	pop    esi
c001c0e0:	5f                   	pop    edi
c001c0e1:	5d                   	pop    ebp
c001c0e2:	c3                   	ret    
c001c0e3:	90                   	nop

c001c0e4 <IDE::detect()>:
c001c0e4:	55                   	push   ebp
c001c0e5:	57                   	push   edi
c001c0e6:	56                   	push   esi
c001c0e7:	53                   	push   ebx
c001c0e8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c0ee:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c0f5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c0fc:	0f 85 9e 02 00 00    	jne    c001c3a0 <IDE::detect()+0x2bc>
c001c102:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c109:	31 f6                	xor    esi,esi
c001c10b:	31 ff                	xor    edi,edi
c001c10d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c115:	89 f8                	mov    eax,edi
c001c117:	c1 e0 06             	shl    eax,0x6
c001c11a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c122:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c126:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c12a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c12e:	c1 e0 04             	shl    eax,0x4
c001c131:	83 c8 a0             	or     eax,0xffffffa0
c001c134:	0f b6 c0             	movzx  eax,al
c001c137:	50                   	push   eax
c001c138:	6a 06                	push   0x6
c001c13a:	56                   	push   esi
c001c13b:	53                   	push   ebx
c001c13c:	e8 41 f8 ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c141:	83 c4 0c             	add    esp,0xc
c001c144:	6a 0c                	push   0xc
c001c146:	56                   	push   esi
c001c147:	53                   	push   ebx
c001c148:	e8 f5 f8 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c14d:	83 c4 0c             	add    esp,0xc
c001c150:	6a 0c                	push   0xc
c001c152:	56                   	push   esi
c001c153:	53                   	push   ebx
c001c154:	e8 e9 f8 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c159:	83 c4 0c             	add    esp,0xc
c001c15c:	6a 0c                	push   0xc
c001c15e:	56                   	push   esi
c001c15f:	53                   	push   ebx
c001c160:	e8 dd f8 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c165:	83 c4 0c             	add    esp,0xc
c001c168:	6a 0c                	push   0xc
c001c16a:	56                   	push   esi
c001c16b:	53                   	push   ebx
c001c16c:	e8 d1 f8 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c171:	68 ec 00 00 00       	push   0xec
c001c176:	6a 07                	push   0x7
c001c178:	56                   	push   esi
c001c179:	53                   	push   ebx
c001c17a:	e8 03 f8 ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c17f:	83 c4 1c             	add    esp,0x1c
c001c182:	6a 0c                	push   0xc
c001c184:	56                   	push   esi
c001c185:	53                   	push   ebx
c001c186:	e8 b7 f8 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c18b:	83 c4 0c             	add    esp,0xc
c001c18e:	6a 0c                	push   0xc
c001c190:	56                   	push   esi
c001c191:	53                   	push   ebx
c001c192:	e8 ab f8 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c197:	83 c4 0c             	add    esp,0xc
c001c19a:	6a 0c                	push   0xc
c001c19c:	56                   	push   esi
c001c19d:	53                   	push   ebx
c001c19e:	e8 9f f8 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c1a3:	83 c4 0c             	add    esp,0xc
c001c1a6:	6a 0c                	push   0xc
c001c1a8:	56                   	push   esi
c001c1a9:	53                   	push   ebx
c001c1aa:	e8 93 f8 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c1af:	83 c4 0c             	add    esp,0xc
c001c1b2:	6a 0c                	push   0xc
c001c1b4:	56                   	push   esi
c001c1b5:	53                   	push   ebx
c001c1b6:	e8 87 f8 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c1bb:	83 c4 10             	add    esp,0x10
c001c1be:	84 c0                	test   al,al
c001c1c0:	0f 84 61 01 00 00    	je     c001c327 <IDE::detect()+0x243>
c001c1c6:	31 ed                	xor    ebp,ebp
c001c1c8:	50                   	push   eax
c001c1c9:	6a 0c                	push   0xc
c001c1cb:	56                   	push   esi
c001c1cc:	53                   	push   ebx
c001c1cd:	e8 70 f8 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c1d2:	83 c4 10             	add    esp,0x10
c001c1d5:	a8 01                	test   al,0x1
c001c1d7:	0f 85 6b 01 00 00    	jne    c001c348 <IDE::detect()+0x264>
c001c1dd:	a8 80                	test   al,0x80
c001c1df:	75 04                	jne    c001c1e5 <IDE::detect()+0x101>
c001c1e1:	a8 08                	test   al,0x8
c001c1e3:	75 23                	jne    c001c208 <IDE::detect()+0x124>
c001c1e5:	45                   	inc    ebp
c001c1e6:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c1ec:	7e da                	jle    c001c1c8 <IDE::detect()+0xe4>
c001c1ee:	83 ec 0c             	sub    esp,0xc
c001c1f1:	6a 32                	push   0x32
c001c1f3:	e8 bc 9d ff ff       	call   c0015fb4 <milliTenthSleep(unsigned int)>
c001c1f8:	83 c4 10             	add    esp,0x10
c001c1fb:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c201:	75 c5                	jne    c001c1c8 <IDE::detect()+0xe4>
c001c203:	e9 40 01 00 00       	jmp    c001c348 <IDE::detect()+0x264>
c001c208:	31 c9                	xor    ecx,ecx
c001c20a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c20e:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c212:	83 ec 0c             	sub    esp,0xc
c001c215:	68 80 00 00 00       	push   0x80
c001c21a:	55                   	push   ebp
c001c21b:	6a 00                	push   0x0
c001c21d:	56                   	push   esi
c001c21e:	53                   	push   ebx
c001c21f:	e8 f0 fd ff ff       	call   c001c014 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c224:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c229:	89 f8                	mov    eax,edi
c001c22b:	c1 e0 06             	shl    eax,0x6
c001c22e:	01 d8                	add    eax,ebx
c001c230:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c237:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c23e:	89 d1                	mov    ecx,edx
c001c240:	89 f2                	mov    edx,esi
c001c242:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c248:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c24c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c252:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c256:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c25d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c265:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c26c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c274:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c27a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c281:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c287:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c28b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c28f:	83 c4 20             	add    esp,0x20
c001c292:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c295:	83 c5 02             	add    ebp,0x2
c001c298:	83 c0 02             	add    eax,0x2
c001c29b:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c2a1:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c2a4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c2aa:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c2ae:	75 e2                	jne    c001c292 <IDE::detect()+0x1ae>
c001c2b0:	89 f8                	mov    eax,edi
c001c2b2:	c1 e0 06             	shl    eax,0x6
c001c2b5:	01 d8                	add    eax,ebx
c001c2b7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c2be:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c2c5:	c1 ea 09             	shr    edx,0x9
c001c2c8:	83 e2 01             	and    edx,0x1
c001c2cb:	80 e1 01             	and    cl,0x1
c001c2ce:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c2d4:	75 22                	jne    c001c2f8 <IDE::detect()+0x214>
c001c2d6:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c2dd:	74 47                	je     c001c326 <IDE::detect()+0x242>
c001c2df:	83 ec 0c             	sub    esp,0xc
c001c2e2:	68 7c 01 00 00       	push   0x17c
c001c2e7:	e8 e7 b7 fe ff       	call   c0007ad3 <malloc>
c001c2ec:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2ef:	89 c5                	mov    ebp,eax
c001c2f1:	e8 16 05 00 00       	call   c001c80c <ATA::ATA()>
c001c2f6:	eb 17                	jmp    c001c30f <IDE::detect()+0x22b>
c001c2f8:	83 ec 0c             	sub    esp,0xc
c001c2fb:	68 84 01 00 00       	push   0x184
c001c300:	e8 ce b7 fe ff       	call   c0007ad3 <malloc>
c001c305:	89 04 24             	mov    DWORD PTR [esp],eax
c001c308:	89 c5                	mov    ebp,eax
c001c30a:	e8 6f 0e 00 00       	call   c001d17e <ATAPI::ATAPI()>
c001c30f:	5a                   	pop    edx
c001c310:	59                   	pop    ecx
c001c311:	55                   	push   ebp
c001c312:	53                   	push   ebx
c001c313:	e8 ec 03 ff ff       	call   c000c704 <Device::addChild(Device*)>
c001c318:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c31b:	53                   	push   ebx
c001c31c:	57                   	push   edi
c001c31d:	6a 00                	push   0x0
c001c31f:	55                   	push   ebp
c001c320:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c323:	83 c4 20             	add    esp,0x20
c001c326:	47                   	inc    edi
c001c327:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c32c:	74 0d                	je     c001c33b <IDE::detect()+0x257>
c001c32e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c336:	e9 da fd ff ff       	jmp    c001c115 <IDE::detect()+0x31>
c001c33b:	4e                   	dec    esi
c001c33c:	74 62                	je     c001c3a0 <IDE::detect()+0x2bc>
c001c33e:	be 01 00 00 00       	mov    esi,0x1
c001c343:	e9 c5 fd ff ff       	jmp    c001c10d <IDE::detect()+0x29>
c001c348:	50                   	push   eax
c001c349:	6a 04                	push   0x4
c001c34b:	56                   	push   esi
c001c34c:	53                   	push   ebx
c001c34d:	e8 f0 f6 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c352:	83 c4 0c             	add    esp,0xc
c001c355:	6a 05                	push   0x5
c001c357:	56                   	push   esi
c001c358:	53                   	push   ebx
c001c359:	89 c5                	mov    ebp,eax
c001c35b:	e8 e2 f6 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c360:	89 e9                	mov    ecx,ebp
c001c362:	83 c4 10             	add    esp,0x10
c001c365:	0f b6 e9             	movzx  ebp,cl
c001c368:	83 fd 14             	cmp    ebp,0x14
c001c36b:	74 2d                	je     c001c39a <IDE::detect()+0x2b6>
c001c36d:	83 fd 69             	cmp    ebp,0x69
c001c370:	75 b5                	jne    c001c327 <IDE::detect()+0x243>
c001c372:	3c 96                	cmp    al,0x96
c001c374:	75 b1                	jne    c001c327 <IDE::detect()+0x243>
c001c376:	68 a1 00 00 00       	push   0xa1
c001c37b:	6a 07                	push   0x7
c001c37d:	56                   	push   esi
c001c37e:	53                   	push   ebx
c001c37f:	e8 fe f5 ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c384:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c38b:	e8 24 9c ff ff       	call   c0015fb4 <milliTenthSleep(unsigned int)>
c001c390:	83 c4 10             	add    esp,0x10
c001c393:	b1 01                	mov    cl,0x1
c001c395:	e9 70 fe ff ff       	jmp    c001c20a <IDE::detect()+0x126>
c001c39a:	3c eb                	cmp    al,0xeb
c001c39c:	75 cf                	jne    c001c36d <IDE::detect()+0x289>
c001c39e:	eb d6                	jmp    c001c376 <IDE::detect()+0x292>
c001c3a0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c3a6:	5b                   	pop    ebx
c001c3a7:	5e                   	pop    esi
c001c3a8:	5f                   	pop    edi
c001c3a9:	5d                   	pop    ebp
c001c3aa:	c3                   	ret    
c001c3ab:	90                   	nop

c001c3ac <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c3ac:	55                   	push   ebp
c001c3ad:	57                   	push   edi
c001c3ae:	56                   	push   esi
c001c3af:	53                   	push   ebx
c001c3b0:	83 ec 1c             	sub    esp,0x1c
c001c3b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c3b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c3bb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c3bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c3c7:	88 c3                	mov    bl,al
c001c3c9:	25 ff 00 00 00       	and    eax,0xff
c001c3ce:	0f 84 88 00 00 00    	je     c001c45c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3d4:	83 ec 0c             	sub    esp,0xc
c001c3d7:	89 c7                	mov    edi,eax
c001c3d9:	68 cb 2d 02 c0       	push   0xc0022dcb
c001c3de:	e8 27 e5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c3e3:	83 c4 10             	add    esp,0x10
c001c3e6:	83 ff 01             	cmp    edi,0x1
c001c3e9:	74 6b                	je     c001c456 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c3eb:	83 ff 02             	cmp    edi,0x2
c001c3ee:	75 58                	jne    c001c448 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c3f0:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c3f5:	50                   	push   eax
c001c3f6:	6a 01                	push   0x1
c001c3f8:	01 ff                	add    edi,edi
c001c3fa:	09 fe                	or     esi,edi
c001c3fc:	89 f0                	mov    eax,esi
c001c3fe:	0f b6 f0             	movzx  esi,al
c001c401:	c1 e6 06             	shl    esi,0x6
c001c404:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c40c:	50                   	push   eax
c001c40d:	55                   	push   ebp
c001c40e:	e8 2f f6 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c413:	83 c4 10             	add    esp,0x10
c001c416:	a8 01                	test   al,0x1
c001c418:	74 02                	je     c001c41c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c41a:	b3 07                	mov    bl,0x7
c001c41c:	a8 02                	test   al,0x2
c001c41e:	74 02                	je     c001c422 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c420:	b3 03                	mov    bl,0x3
c001c422:	a8 04                	test   al,0x4
c001c424:	74 02                	je     c001c428 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c426:	b3 14                	mov    bl,0x14
c001c428:	a8 08                	test   al,0x8
c001c42a:	74 02                	je     c001c42e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c42c:	b3 03                	mov    bl,0x3
c001c42e:	a8 10                	test   al,0x10
c001c430:	74 02                	je     c001c434 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c432:	b3 15                	mov    bl,0x15
c001c434:	a8 20                	test   al,0x20
c001c436:	74 02                	je     c001c43a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c438:	b3 03                	mov    bl,0x3
c001c43a:	a8 40                	test   al,0x40
c001c43c:	74 02                	je     c001c440 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c43e:	b3 16                	mov    bl,0x16
c001c440:	a8 80                	test   al,0x80
c001c442:	74 18                	je     c001c45c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c444:	b3 0d                	mov    bl,0xd
c001c446:	eb 14                	jmp    c001c45c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c448:	83 ff 03             	cmp    edi,0x3
c001c44b:	74 0d                	je     c001c45a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c44d:	83 ff 04             	cmp    edi,0x4
c001c450:	75 0a                	jne    c001c45c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c452:	b3 08                	mov    bl,0x8
c001c454:	eb 06                	jmp    c001c45c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c456:	b3 13                	mov    bl,0x13
c001c458:	eb 02                	jmp    c001c45c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c45a:	b3 17                	mov    bl,0x17
c001c45c:	83 c4 1c             	add    esp,0x1c
c001c45f:	88 d8                	mov    al,bl
c001c461:	5b                   	pop    ebx
c001c462:	5e                   	pop    esi
c001c463:	5f                   	pop    edi
c001c464:	5d                   	pop    ebp
c001c465:	c3                   	ret    

c001c466 <IDE::polling(unsigned char, unsigned int)>:
c001c466:	57                   	push   edi
c001c467:	56                   	push   esi
c001c468:	53                   	push   ebx
c001c469:	bb 04 00 00 00       	mov    ebx,0x4
c001c46e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c472:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c477:	52                   	push   edx
c001c478:	6a 0c                	push   0xc
c001c47a:	56                   	push   esi
c001c47b:	57                   	push   edi
c001c47c:	e8 c1 f5 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c481:	83 c4 10             	add    esp,0x10
c001c484:	4b                   	dec    ebx
c001c485:	75 f0                	jne    c001c477 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c487:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c48c:	50                   	push   eax
c001c48d:	6a 0c                	push   0xc
c001c48f:	56                   	push   esi
c001c490:	57                   	push   edi
c001c491:	e8 ac f5 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c496:	83 c4 10             	add    esp,0x10
c001c499:	a8 01                	test   al,0x1
c001c49b:	75 17                	jne    c001c4b4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c49d:	a8 20                	test   al,0x20
c001c49f:	75 0f                	jne    c001c4b0 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c4a1:	4b                   	dec    ebx
c001c4a2:	74 10                	je     c001c4b4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c4a4:	a8 80                	test   al,0x80
c001c4a6:	75 e4                	jne    c001c48c <IDE::polling(unsigned char, unsigned int)+0x26>
c001c4a8:	a8 08                	test   al,0x8
c001c4aa:	74 e0                	je     c001c48c <IDE::polling(unsigned char, unsigned int)+0x26>
c001c4ac:	31 c0                	xor    eax,eax
c001c4ae:	eb 06                	jmp    c001c4b6 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c4b0:	b0 01                	mov    al,0x1
c001c4b2:	eb 02                	jmp    c001c4b6 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c4b4:	b0 02                	mov    al,0x2
c001c4b6:	5b                   	pop    ebx
c001c4b7:	5e                   	pop    esi
c001c4b8:	5f                   	pop    edi
c001c4b9:	c3                   	ret    

c001c4ba <SATABus::close(int, int, void*)>:
c001c4ba:	31 c0                	xor    eax,eax
c001c4bc:	c3                   	ret    
c001c4bd:	90                   	nop

c001c4be <SATABus::detect()>:
c001c4be:	c3                   	ret    
c001c4bf:	90                   	nop

c001c4c0 <SATABus::SATABus()>:
c001c4c0:	83 ec 0c             	sub    esp,0xc
c001c4c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c7:	83 ec 08             	sub    esp,0x8
c001c4ca:	68 04 2e 02 c0       	push   0xc0022e04
c001c4cf:	50                   	push   eax
c001c4d0:	e8 73 05 ff ff       	call   c000ca48 <HardDiskController::HardDiskController(char const*)>
c001c4d5:	83 c4 10             	add    esp,0x10
c001c4d8:	ba 30 2e 02 c0       	mov    edx,0xc0022e30
c001c4dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e1:	89 10                	mov    DWORD PTR [eax],edx
c001c4e3:	83 ec 0c             	sub    esp,0xc
c001c4e6:	6a 50                	push   0x50
c001c4e8:	e8 c4 b9 fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c4ed:	83 c4 10             	add    esp,0x10
c001c4f0:	89 c2                	mov    edx,eax
c001c4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c4fc:	83 ec 0c             	sub    esp,0xc
c001c4ff:	6a 50                	push   0x50
c001c501:	e8 ef d0 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c506:	83 c4 10             	add    esp,0x10
c001c509:	89 c2                	mov    edx,eax
c001c50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c50f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c515:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c51a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c51e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c524:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c528:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c52e:	83 ec 0c             	sub    esp,0xc
c001c531:	6a 03                	push   0x3
c001c533:	6a 50                	push   0x50
c001c535:	51                   	push   ecx
c001c536:	52                   	push   edx
c001c537:	50                   	push   eax
c001c538:	e8 cb d9 fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c53d:	83 c4 20             	add    esp,0x20
c001c540:	90                   	nop
c001c541:	83 c4 0c             	add    esp,0xc
c001c544:	c3                   	ret    
c001c545:	90                   	nop

c001c546 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c54a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c54d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c550:	09 c2                	or     edx,eax
c001c552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c556:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c55c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c55e:	31 c0                	xor    eax,eax
c001c560:	c1 e9 08             	shr    ecx,0x8
c001c563:	83 e1 0f             	and    ecx,0xf
c001c566:	39 c8                	cmp    eax,ecx
c001c568:	74 0a                	je     c001c574 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c56a:	f6 c2 01             	test   dl,0x1
c001c56d:	74 08                	je     c001c577 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c56f:	d1 ea                	shr    edx,1
c001c571:	40                   	inc    eax
c001c572:	eb f2                	jmp    c001c566 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c574:	83 c8 ff             	or     eax,0xffffffff
c001c577:	c3                   	ret    

c001c578 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c578:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c57c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c57f:	89 c2                	mov    edx,eax
c001c581:	c1 ea 08             	shr    edx,0x8
c001c584:	83 e2 0f             	and    edx,0xf
c001c587:	4a                   	dec    edx
c001c588:	75 32                	jne    c001c5bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c58a:	83 e0 0f             	and    eax,0xf
c001c58d:	83 f8 03             	cmp    eax,0x3
c001c590:	75 2a                	jne    c001c5bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c592:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c595:	b8 02 00 00 00       	mov    eax,0x2
c001c59a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c5a0:	74 1c                	je     c001c5be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c5a2:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c5a8:	b8 04 00 00 00       	mov    eax,0x4
c001c5ad:	74 0f                	je     c001c5be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c5af:	31 c0                	xor    eax,eax
c001c5b1:	83 fa 03             	cmp    edx,0x3
c001c5b4:	0f 94 c0             	sete   al
c001c5b7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c5bb:	c3                   	ret    
c001c5bc:	31 c0                	xor    eax,eax
c001c5be:	c3                   	ret    
c001c5bf:	90                   	nop

c001c5c0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c5c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5c7:	0f ba e2 0f          	bt     edx,0xf
c001c5cb:	72 f7                	jb     c001c5c4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c5cd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5d0:	83 ca 10             	or     edx,0x10
c001c5d3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c5d6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5d9:	83 ca 01             	or     edx,0x1
c001c5dc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c5df:	c3                   	ret    

c001c5e0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c5e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5e4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5e7:	83 e2 fe             	and    edx,0xfffffffe
c001c5ea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c5ed:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5f0:	83 e2 ef             	and    edx,0xffffffef
c001c5f3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c5f6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5f9:	0f ba e2 0e          	bt     edx,0xe
c001c5fd:	72 f7                	jb     c001c5f6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c5ff:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c602:	0f ba e2 0f          	bt     edx,0xf
c001c606:	72 ee                	jb     c001c5f6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c608:	c3                   	ret    
c001c609:	90                   	nop

c001c60a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c60a:	55                   	push   ebp
c001c60b:	57                   	push   edi
c001c60c:	56                   	push   esi
c001c60d:	53                   	push   ebx
c001c60e:	83 ec 1c             	sub    esp,0x1c
c001c611:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c615:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c619:	53                   	push   ebx
c001c61a:	57                   	push   edi
c001c61b:	e8 c0 ff ff ff       	call   c001c5e0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c620:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c624:	83 ec 0c             	sub    esp,0xc
c001c627:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c62d:	c1 e5 0a             	shl    ebp,0xa
c001c630:	01 e8                	add    eax,ebp
c001c632:	89 03                	mov    DWORD PTR [ebx],eax
c001c634:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c636:	68 00 04 00 00       	push   0x400
c001c63b:	6a 00                	push   0x0
c001c63d:	50                   	push   eax
c001c63e:	e8 ad 3e fe ff       	call   c00004f0 <memset>
c001c643:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c649:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c64d:	83 c4 1c             	add    esp,0x1c
c001c650:	01 e8                	add    eax,ebp
c001c652:	89 03                	mov    DWORD PTR [ebx],eax
c001c654:	c1 e6 08             	shl    esi,0x8
c001c657:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c65e:	81 c6 00 80 00 00    	add    esi,0x8000
c001c664:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c66a:	01 f0                	add    eax,esi
c001c66c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c66f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c672:	68 00 01 00 00       	push   0x100
c001c677:	6a 00                	push   0x0
c001c679:	50                   	push   eax
c001c67a:	e8 71 3e fe ff       	call   c00004f0 <memset>
c001c67f:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c685:	31 d2                	xor    edx,edx
c001c687:	01 f0                	add    eax,esi
c001c689:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c68c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c693:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c699:	01 ee                	add    esi,ebp
c001c69b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c69f:	83 c4 10             	add    esp,0x10
c001c6a2:	c1 e5 0d             	shl    ebp,0xd
c001c6a5:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c6ab:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c6b1:	83 c6 20             	add    esi,0x20
c001c6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c6b8:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c6be:	01 e8                	add    eax,ebp
c001c6c0:	01 d0                	add    eax,edx
c001c6c2:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c6c5:	52                   	push   edx
c001c6c6:	68 00 01 00 00       	push   0x100
c001c6cb:	6a 00                	push   0x0
c001c6cd:	50                   	push   eax
c001c6ce:	e8 1d 3e fe ff       	call   c00004f0 <memset>
c001c6d3:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c6d9:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c6e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6e4:	83 c4 10             	add    esp,0x10
c001c6e7:	01 e8                	add    eax,ebp
c001c6e9:	01 d0                	add    eax,edx
c001c6eb:	81 c2 00 01 00 00    	add    edx,0x100
c001c6f1:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c6f4:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c6fa:	75 af                	jne    c001c6ab <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c6fc:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c703:	50                   	push   eax
c001c704:	50                   	push   eax
c001c705:	53                   	push   ebx
c001c706:	57                   	push   edi
c001c707:	e8 b4 fe ff ff       	call   c001c5c0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c70c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c713:	83 c4 2c             	add    esp,0x2c
c001c716:	5b                   	pop    ebx
c001c717:	5e                   	pop    esi
c001c718:	5f                   	pop    edi
c001c719:	5d                   	pop    ebp
c001c71a:	c3                   	ret    
c001c71b:	90                   	nop

c001c71c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c71c:	55                   	push   ebp
c001c71d:	57                   	push   edi
c001c71e:	56                   	push   esi
c001c71f:	53                   	push   ebx
c001c720:	31 db                	xor    ebx,ebx
c001c722:	83 ec 0c             	sub    esp,0xc
c001c725:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c729:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c72d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c730:	f7 c7 01 00 00 00    	test   edi,0x1
c001c736:	74 7a                	je     c001c7b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c738:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c73c:	89 d8                	mov    eax,ebx
c001c73e:	c1 e0 07             	shl    eax,0x7
c001c741:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c748:	55                   	push   ebp
c001c749:	56                   	push   esi
c001c74a:	e8 29 fe ff ff       	call   c001c578 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c74f:	5a                   	pop    edx
c001c750:	59                   	pop    ecx
c001c751:	83 f8 01             	cmp    eax,0x1
c001c754:	75 21                	jne    c001c777 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c756:	50                   	push   eax
c001c757:	53                   	push   ebx
c001c758:	55                   	push   ebp
c001c759:	56                   	push   esi
c001c75a:	e8 ab fe ff ff       	call   c001c60a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c75f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c766:	e8 68 b3 fe ff       	call   c0007ad3 <malloc>
c001c76b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c76e:	89 c5                	mov    ebp,eax
c001c770:	e8 c1 10 00 00       	call   c001d836 <SATA::SATA()>
c001c775:	eb 24                	jmp    c001c79b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c777:	83 f8 04             	cmp    eax,0x4
c001c77a:	75 36                	jne    c001c7b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c77c:	51                   	push   ecx
c001c77d:	53                   	push   ebx
c001c77e:	55                   	push   ebp
c001c77f:	56                   	push   esi
c001c780:	e8 85 fe ff ff       	call   c001c60a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c785:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c78c:	e8 42 b3 fe ff       	call   c0007ad3 <malloc>
c001c791:	89 04 24             	mov    DWORD PTR [esp],eax
c001c794:	89 c5                	mov    ebp,eax
c001c796:	e8 f5 17 00 00       	call   c001df90 <SATAPI::SATAPI()>
c001c79b:	58                   	pop    eax
c001c79c:	5a                   	pop    edx
c001c79d:	55                   	push   ebp
c001c79e:	56                   	push   esi
c001c79f:	e8 60 ff fe ff       	call   c000c704 <Device::addChild(Device*)>
c001c7a4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c7a7:	56                   	push   esi
c001c7a8:	6a 00                	push   0x0
c001c7aa:	53                   	push   ebx
c001c7ab:	55                   	push   ebp
c001c7ac:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c7af:	83 c4 20             	add    esp,0x20
c001c7b2:	d1 ef                	shr    edi,1
c001c7b4:	43                   	inc    ebx
c001c7b5:	83 fb 20             	cmp    ebx,0x20
c001c7b8:	0f 85 72 ff ff ff    	jne    c001c730 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c7be:	83 c4 0c             	add    esp,0xc
c001c7c1:	5b                   	pop    ebx
c001c7c2:	5e                   	pop    esi
c001c7c3:	5f                   	pop    edi
c001c7c4:	5d                   	pop    ebp
c001c7c5:	c3                   	ret    

c001c7c6 <SATABus::open(int, int, void*)>:
c001c7c6:	83 ec 14             	sub    esp,0x14
c001c7c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7cd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c7d3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c7d9:	52                   	push   edx
c001c7da:	50                   	push   eax
c001c7db:	e8 3c ff ff ff       	call   c001c71c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c7e0:	31 c0                	xor    eax,eax
c001c7e2:	83 c4 1c             	add    esp,0x1c
c001c7e5:	c3                   	ret    

c001c7e6 <ATA::close(int, int, void*)>:
c001c7e6:	83 ec 0c             	sub    esp,0xc
c001c7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c7f3:	85 c0                	test   eax,eax
c001c7f5:	74 0c                	je     c001c803 <ATA::close(int, int, void*)+0x1d>
c001c7f7:	8b 10                	mov    edx,DWORD PTR [eax]
c001c7f9:	83 ec 0c             	sub    esp,0xc
c001c7fc:	50                   	push   eax
c001c7fd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c800:	83 c4 10             	add    esp,0x10
c001c803:	31 c0                	xor    eax,eax
c001c805:	83 c4 0c             	add    esp,0xc
c001c808:	c3                   	ret    
c001c809:	90                   	nop

c001c80a <ATA::powerSaving(PowerSavingLevel)>:
c001c80a:	c3                   	ret    
c001c80b:	90                   	nop

c001c80c <ATA::ATA()>:
c001c80c:	83 ec 0c             	sub    esp,0xc
c001c80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c813:	83 ec 04             	sub    esp,0x4
c001c816:	68 00 02 00 00       	push   0x200
c001c81b:	68 fd 2e 02 c0       	push   0xc0022efd
c001c820:	50                   	push   eax
c001c821:	e8 ac 02 ff ff       	call   c000cad2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c826:	83 c4 10             	add    esp,0x10
c001c829:	ba 70 2e 02 c0       	mov    edx,0xc0022e70
c001c82e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c832:	89 10                	mov    DWORD PTR [eax],edx
c001c834:	90                   	nop
c001c835:	83 c4 0c             	add    esp,0xc
c001c838:	c3                   	ret    
c001c839:	90                   	nop

c001c83a <ATA::flush(bool)>:
c001c83a:	53                   	push   ebx
c001c83b:	83 ec 08             	sub    esp,0x8
c001c83e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c847:	83 f8 01             	cmp    eax,0x1
c001c84a:	19 c0                	sbb    eax,eax
c001c84c:	83 e0 fd             	and    eax,0xfffffffd
c001c84f:	05 ea 00 00 00       	add    eax,0xea
c001c854:	50                   	push   eax
c001c855:	6a 07                	push   0x7
c001c857:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c85e:	50                   	push   eax
c001c85f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c865:	e8 18 f1 ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c86a:	83 c4 0c             	add    esp,0xc
c001c86d:	6a 00                	push   0x0
c001c86f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c876:	50                   	push   eax
c001c877:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c87d:	e8 e4 fb ff ff       	call   c001c466 <IDE::polling(unsigned char, unsigned int)>
c001c882:	83 c4 18             	add    esp,0x18
c001c885:	5b                   	pop    ebx
c001c886:	c3                   	ret    
c001c887:	90                   	nop

c001c888 <ATA::readyForCommand()>:
c001c888:	56                   	push   esi
c001c889:	53                   	push   ebx
c001c88a:	53                   	push   ebx
c001c88b:	31 db                	xor    ebx,ebx
c001c88d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c891:	51                   	push   ecx
c001c892:	6a 0c                	push   0xc
c001c894:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c89b:	50                   	push   eax
c001c89c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c8a2:	e8 9b f1 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001c8a7:	83 c4 10             	add    esp,0x10
c001c8aa:	a8 88                	test   al,0x88
c001c8ac:	74 1f                	je     c001c8cd <ATA::readyForCommand()+0x45>
c001c8ae:	43                   	inc    ebx
c001c8af:	83 fb 63             	cmp    ebx,0x63
c001c8b2:	7e dd                	jle    c001c891 <ATA::readyForCommand()+0x9>
c001c8b4:	83 ec 0c             	sub    esp,0xc
c001c8b7:	6a 0a                	push   0xa
c001c8b9:	e8 f6 96 ff ff       	call   c0015fb4 <milliTenthSleep(unsigned int)>
c001c8be:	83 c4 10             	add    esp,0x10
c001c8c1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c8c7:	75 c8                	jne    c001c891 <ATA::readyForCommand()+0x9>
c001c8c9:	31 c0                	xor    eax,eax
c001c8cb:	eb 02                	jmp    c001c8cf <ATA::readyForCommand()+0x47>
c001c8cd:	b0 01                	mov    al,0x1
c001c8cf:	5a                   	pop    edx
c001c8d0:	5b                   	pop    ebx
c001c8d1:	5e                   	pop    esi
c001c8d2:	c3                   	ret    
c001c8d3:	90                   	nop

c001c8d4 <ATA::access(unsigned long long, int, void*, bool)>:
c001c8d4:	55                   	push   ebp
c001c8d5:	57                   	push   edi
c001c8d6:	56                   	push   esi
c001c8d7:	53                   	push   ebx
c001c8d8:	83 ec 2c             	sub    esp,0x2c
c001c8db:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c8df:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c8e3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c8e7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c8eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8ef:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c8f3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c8f7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c8fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c901:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c907:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c90b:	c1 e0 06             	shl    eax,0x6
c001c90e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c916:	74 5b                	je     c001c973 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c918:	89 fa                	mov    edx,edi
c001c91a:	89 f0                	mov    eax,esi
c001c91c:	c1 ea 1c             	shr    edx,0x1c
c001c91f:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c923:	89 d1                	mov    ecx,edx
c001c925:	09 c1                	or     ecx,eax
c001c927:	74 25                	je     c001c94e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c929:	31 ed                	xor    ebp,ebp
c001c92b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c932:	89 fa                	mov    edx,edi
c001c934:	89 f0                	mov    eax,esi
c001c936:	0f ad d0             	shrd   eax,edx,cl
c001c939:	d3 ea                	shr    edx,cl
c001c93b:	f6 c1 20             	test   cl,0x20
c001c93e:	74 02                	je     c001c942 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c940:	89 d0                	mov    eax,edx
c001c942:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c946:	45                   	inc    ebp
c001c947:	83 fd 06             	cmp    ebp,0x6
c001c94a:	75 df                	jne    c001c92b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c94c:	eb 71                	jmp    c001c9bf <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c94e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c953:	89 f0                	mov    eax,esi
c001c955:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c95c:	0f ac f8 10          	shrd   eax,edi,0x10
c001c960:	bf 01 00 00 00       	mov    edi,0x1
c001c965:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c969:	c1 ee 18             	shr    esi,0x18
c001c96c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c971:	eb 53                	jmp    c001c9c6 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c973:	6a 00                	push   0x0
c001c975:	6a 3f                	push   0x3f
c001c977:	57                   	push   edi
c001c978:	56                   	push   esi
c001c979:	e8 d2 2a 00 00       	call   c001f450 <__umoddi3>
c001c97e:	83 c4 10             	add    esp,0x10
c001c981:	40                   	inc    eax
c001c982:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c986:	6a 00                	push   0x0
c001c988:	68 f0 03 00 00       	push   0x3f0
c001c98d:	57                   	push   edi
c001c98e:	56                   	push   esi
c001c98f:	e8 bc 29 00 00       	call   c001f350 <__udivdi3>
c001c994:	83 c4 10             	add    esp,0x10
c001c997:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c99c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c9a3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c9a8:	6a 00                	push   0x0
c001c9aa:	6a 3f                	push   0x3f
c001c9ac:	57                   	push   edi
c001c9ad:	31 ff                	xor    edi,edi
c001c9af:	56                   	push   esi
c001c9b0:	e8 9b 29 00 00       	call   c001f350 <__udivdi3>
c001c9b5:	83 c4 10             	add    esp,0x10
c001c9b8:	83 e0 0f             	and    eax,0xf
c001c9bb:	89 c6                	mov    esi,eax
c001c9bd:	eb 07                	jmp    c001c9c6 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c9bf:	31 f6                	xor    esi,esi
c001c9c1:	bf 02 00 00 00       	mov    edi,0x2
c001c9c6:	50                   	push   eax
c001c9c7:	6a 00                	push   0x0
c001c9c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9d0:	50                   	push   eax
c001c9d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9d5:	e8 b6 f1 ff ff       	call   c001bb90 <IDE::enableIRQs(unsigned char, bool)>
c001c9da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9dd:	e8 a6 fe ff ff       	call   c001c888 <ATA::readyForCommand()>
c001c9e2:	83 c4 10             	add    esp,0x10
c001c9e5:	84 c0                	test   al,al
c001c9e7:	75 0a                	jne    c001c9f3 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c9e9:	be 01 00 00 00       	mov    esi,0x1
c001c9ee:	e9 9b 02 00 00       	jmp    c001cc8e <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c9f3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c9f9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c9ff:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ca06:	c1 e0 04             	shl    eax,0x4
c001ca09:	09 c6                	or     esi,eax
c001ca0b:	f7 c7 03 00 00 00    	test   edi,0x3
c001ca11:	75 05                	jne    c001ca18 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001ca13:	83 ce a0             	or     esi,0xffffffa0
c001ca16:	eb 03                	jmp    c001ca1b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ca18:	83 ce e0             	or     esi,0xffffffe0
c001ca1b:	89 f0                	mov    eax,esi
c001ca1d:	0f b6 f0             	movzx  esi,al
c001ca20:	56                   	push   esi
c001ca21:	6a 06                	push   0x6
c001ca23:	51                   	push   ecx
c001ca24:	52                   	push   edx
c001ca25:	e8 58 ef ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca2a:	83 c4 10             	add    esp,0x10
c001ca2d:	6a 00                	push   0x0
c001ca2f:	6a 01                	push   0x1
c001ca31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca38:	50                   	push   eax
c001ca39:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca3f:	e8 3e ef ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca44:	89 f8                	mov    eax,edi
c001ca46:	83 c4 10             	add    esp,0x10
c001ca49:	0f b6 f0             	movzx  esi,al
c001ca4c:	83 fe 02             	cmp    esi,0x2
c001ca4f:	75 6e                	jne    c001cabf <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ca51:	6a 00                	push   0x0
c001ca53:	6a 08                	push   0x8
c001ca55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca5c:	50                   	push   eax
c001ca5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca63:	e8 1a ef ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca68:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ca6d:	50                   	push   eax
c001ca6e:	6a 09                	push   0x9
c001ca70:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca77:	50                   	push   eax
c001ca78:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca7e:	e8 ff ee ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca83:	83 c4 20             	add    esp,0x20
c001ca86:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ca8b:	50                   	push   eax
c001ca8c:	6a 0a                	push   0xa
c001ca8e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca95:	50                   	push   eax
c001ca96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca9c:	e8 e1 ee ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caa1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001caa6:	50                   	push   eax
c001caa7:	6a 0b                	push   0xb
c001caa9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cab0:	50                   	push   eax
c001cab1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cab7:	e8 c6 ee ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cabc:	83 c4 20             	add    esp,0x20
c001cabf:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cac4:	50                   	push   eax
c001cac5:	6a 02                	push   0x2
c001cac7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cace:	50                   	push   eax
c001cacf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cad5:	e8 a8 ee ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cada:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cadf:	50                   	push   eax
c001cae0:	6a 03                	push   0x3
c001cae2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cae9:	50                   	push   eax
c001caea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caf0:	e8 8d ee ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caf5:	83 c4 20             	add    esp,0x20
c001caf8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cafd:	50                   	push   eax
c001cafe:	6a 04                	push   0x4
c001cb00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb07:	50                   	push   eax
c001cb08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb0e:	e8 6f ee ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb18:	50                   	push   eax
c001cb19:	6a 05                	push   0x5
c001cb1b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb22:	50                   	push   eax
c001cb23:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb29:	e8 54 ee ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb2e:	83 c4 20             	add    esp,0x20
c001cb31:	83 fe 02             	cmp    esi,0x2
c001cb34:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001cb39:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cb3e:	85 c9                	test   ecx,ecx
c001cb40:	74 07                	je     c001cb49 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cb42:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb47:	75 47                	jne    c001cb90 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001cb49:	89 f8                	mov    eax,edi
c001cb4b:	0f b6 f8             	movzx  edi,al
c001cb4e:	31 c0                	xor    eax,eax
c001cb50:	83 ff 02             	cmp    edi,0x2
c001cb53:	0f 95 c0             	setne  al
c001cb56:	89 c6                	mov    esi,eax
c001cb58:	74 0c                	je     c001cb66 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cb5a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb5f:	b8 30 00 00 00       	mov    eax,0x30
c001cb64:	75 2f                	jne    c001cb95 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cb66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb6a:	83 f2 01             	xor    edx,0x1
c001cb6d:	85 c9                	test   ecx,ecx
c001cb6f:	74 09                	je     c001cb7a <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001cb71:	84 d2                	test   dl,dl
c001cb73:	b8 24 00 00 00       	mov    eax,0x24
c001cb78:	75 1b                	jne    c001cb95 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cb7a:	85 f6                	test   esi,esi
c001cb7c:	0f 84 67 fe ff ff    	je     c001c9e9 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cb82:	84 d2                	test   dl,dl
c001cb84:	b8 20 00 00 00       	mov    eax,0x20
c001cb89:	75 0a                	jne    c001cb95 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cb8b:	e9 59 fe ff ff       	jmp    c001c9e9 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cb90:	b8 34 00 00 00       	mov    eax,0x34
c001cb95:	50                   	push   eax
c001cb96:	6a 07                	push   0x7
c001cb98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb9f:	50                   	push   eax
c001cba0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cba6:	e8 d7 ed ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbab:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cbaf:	83 c4 10             	add    esp,0x10
c001cbb2:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cbb7:	85 f6                	test   esi,esi
c001cbb9:	0f 84 b5 00 00 00    	je     c001cc74 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cbbf:	50                   	push   eax
c001cbc0:	6a 01                	push   0x1
c001cbc2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbc9:	50                   	push   eax
c001cbca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbd0:	e8 91 f8 ff ff       	call   c001c466 <IDE::polling(unsigned char, unsigned int)>
c001cbd5:	83 c4 10             	add    esp,0x10
c001cbd8:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cbde:	0f b6 c0             	movzx  eax,al
c001cbe1:	85 c0                	test   eax,eax
c001cbe3:	74 1f                	je     c001cc04 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cbe5:	50                   	push   eax
c001cbe6:	89 c6                	mov    esi,eax
c001cbe8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cbef:	0f b6 d2             	movzx  edx,dl
c001cbf2:	50                   	push   eax
c001cbf3:	52                   	push   edx
c001cbf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbfa:	e8 ad f7 ff ff       	call   c001c3ac <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cbff:	e9 87 00 00 00       	jmp    c001cc8b <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001cc04:	85 ed                	test   ebp,ebp
c001cc06:	74 3b                	je     c001cc43 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001cc08:	31 ff                	xor    edi,edi
c001cc0a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cc0e:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001cc12:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cc17:	50                   	push   eax
c001cc18:	50                   	push   eax
c001cc19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc20:	50                   	push   eax
c001cc21:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc27:	e8 44 ed ff ff       	call   c001b970 <IDE::getBase(unsigned char)>
c001cc2c:	89 c2                	mov    edx,eax
c001cc2e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001cc33:	66 ef                	out    dx,ax
c001cc35:	47                   	inc    edi
c001cc36:	83 c4 10             	add    esp,0x10
c001cc39:	81 ff 00 01 00 00    	cmp    edi,0x100
c001cc3f:	75 c9                	jne    c001cc0a <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001cc41:	eb 23                	jmp    c001cc66 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001cc43:	51                   	push   ecx
c001cc44:	0f b6 d2             	movzx  edx,dl
c001cc47:	51                   	push   ecx
c001cc48:	52                   	push   edx
c001cc49:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc4f:	e8 1c ed ff ff       	call   c001b970 <IDE::getBase(unsigned char)>
c001cc54:	b9 00 01 00 00       	mov    ecx,0x100
c001cc59:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cc5d:	89 c2                	mov    edx,eax
c001cc5f:	fc                   	cld    
c001cc60:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cc63:	83 c4 10             	add    esp,0x10
c001cc66:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cc6e:	4e                   	dec    esi
c001cc6f:	e9 43 ff ff ff       	jmp    c001cbb7 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001cc74:	31 f6                	xor    esi,esi
c001cc76:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cc7b:	74 11                	je     c001cc8e <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cc7d:	50                   	push   eax
c001cc7e:	50                   	push   eax
c001cc7f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001cc84:	50                   	push   eax
c001cc85:	53                   	push   ebx
c001cc86:	e8 af fb ff ff       	call   c001c83a <ATA::flush(bool)>
c001cc8b:	83 c4 10             	add    esp,0x10
c001cc8e:	83 c4 2c             	add    esp,0x2c
c001cc91:	89 f0                	mov    eax,esi
c001cc93:	5b                   	pop    ebx
c001cc94:	5e                   	pop    esi
c001cc95:	5f                   	pop    edi
c001cc96:	5d                   	pop    ebp
c001cc97:	c3                   	ret    

c001cc98 <ATA::detectCHS()>:
c001cc98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc9c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cca2:	c1 e0 06             	shl    eax,0x6
c001cca5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ccab:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ccb5:	c7 44 24 04 54 2e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022e54
c001ccbd:	e9 d7 45 ff ff       	jmp    c0011299 <KePanic(char const*)>

c001ccc2 <ATA::open(int, int, void*)>:
c001ccc2:	53                   	push   ebx
c001ccc3:	83 ec 08             	sub    esp,0x8
c001ccc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccd2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ccd8:	c1 e0 06             	shl    eax,0x6
c001ccdb:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cce1:	01 d0                	add    eax,edx
c001cce3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ccea:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001ccf0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001ccf7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cd01:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cd08:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cd0e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cd15:	75 0c                	jne    c001cd23 <ATA::open(int, int, void*)+0x61>
c001cd17:	83 ec 0c             	sub    esp,0xc
c001cd1a:	53                   	push   ebx
c001cd1b:	e8 78 ff ff ff       	call   c001cc98 <ATA::detectCHS()>
c001cd20:	83 c4 10             	add    esp,0x10
c001cd23:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd29:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd2f:	c1 e0 06             	shl    eax,0x6
c001cd32:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cd39:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cd43:	d1 e8                	shr    eax,1
c001cd45:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cd4b:	6a 04                	push   0x4
c001cd4d:	6a 0c                	push   0xc
c001cd4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd56:	50                   	push   eax
c001cd57:	52                   	push   edx
c001cd58:	e8 25 ec ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd5d:	90                   	nop
c001cd5e:	90                   	nop
c001cd5f:	6a 00                	push   0x0
c001cd61:	6a 0c                	push   0xc
c001cd63:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd6a:	50                   	push   eax
c001cd6b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd71:	e8 0c ec ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd76:	83 c4 14             	add    esp,0x14
c001cd79:	53                   	push   ebx
c001cd7a:	e8 bb fd fe ff       	call   c000cb3a <PhysicalDisk::startCache()>
c001cd7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd82:	e8 ff 0f ff ff       	call   c000dd86 <createPartitionsForDisk(PhysicalDisk*)>
c001cd87:	83 c4 18             	add    esp,0x18
c001cd8a:	31 c0                	xor    eax,eax
c001cd8c:	5b                   	pop    ebx
c001cd8d:	c3                   	ret    

c001cd8e <combineCharAndColour(char, unsigned char)>:
c001cd8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd93:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cd99:	c1 e0 08             	shl    eax,0x8
c001cd9c:	09 d0                	or     eax,edx
c001cd9e:	c3                   	ret    

c001cd9f <combineColours(unsigned char, unsigned char)>:
c001cd9f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cda4:	c1 e0 04             	shl    eax,0x4
c001cda7:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cdab:	c3                   	ret    

c001cdac <ATA::read(unsigned long long, int, void*)>:
c001cdac:	55                   	push   ebp
c001cdad:	57                   	push   edi
c001cdae:	56                   	push   esi
c001cdaf:	be 04 00 00 00       	mov    esi,0x4
c001cdb4:	53                   	push   ebx
c001cdb5:	83 ec 0c             	sub    esp,0xc
c001cdb8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cdbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdc0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cdc4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdc8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cdcb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cdd1:	0f 87 a1 01 00 00    	ja     c001cf78 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cdd7:	85 c9                	test   ecx,ecx
c001cdd9:	be 06 00 00 00       	mov    esi,0x6
c001cdde:	0f 84 94 01 00 00    	je     c001cf78 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cde4:	55                   	push   ebp
c001cde5:	55                   	push   ebp
c001cde6:	6a 00                	push   0x0
c001cde8:	51                   	push   ecx
c001cde9:	53                   	push   ebx
c001cdea:	52                   	push   edx
c001cdeb:	50                   	push   eax
c001cdec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cdf0:	e8 df fa ff ff       	call   c001c8d4 <ATA::access(unsigned long long, int, void*, bool)>
c001cdf5:	83 c4 20             	add    esp,0x20
c001cdf8:	85 c0                	test   eax,eax
c001cdfa:	89 c6                	mov    esi,eax
c001cdfc:	0f 85 71 01 00 00    	jne    c001cf73 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001ce02:	50                   	push   eax
c001ce03:	bd 10 27 00 00       	mov    ebp,0x2710
c001ce08:	50                   	push   eax
c001ce09:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001ce0f:	6a 0f                	push   0xf
c001ce11:	6a 00                	push   0x0
c001ce13:	89 da                	mov    edx,ebx
c001ce15:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001ce1b:	e8 7f ff ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001ce20:	59                   	pop    ecx
c001ce21:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce26:	5b                   	pop    ebx
c001ce27:	0f b6 d8             	movzx  ebx,al
c001ce2a:	89 d0                	mov    eax,edx
c001ce2c:	53                   	push   ebx
c001ce2d:	99                   	cdq    
c001ce2e:	f7 fd                	idiv   ebp
c001ce30:	99                   	cdq    
c001ce31:	f7 f9                	idiv   ecx
c001ce33:	83 c2 30             	add    edx,0x30
c001ce36:	0f b6 d2             	movzx  edx,dl
c001ce39:	52                   	push   edx
c001ce3a:	e8 4f ff ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001ce3f:	5f                   	pop    edi
c001ce40:	bf e8 03 00 00       	mov    edi,0x3e8
c001ce45:	5a                   	pop    edx
c001ce46:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce4c:	53                   	push   ebx
c001ce4d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce52:	99                   	cdq    
c001ce53:	f7 ff                	idiv   edi
c001ce55:	99                   	cdq    
c001ce56:	f7 f9                	idiv   ecx
c001ce58:	8d 42 30             	lea    eax,[edx+0x30]
c001ce5b:	0f b6 c0             	movzx  eax,al
c001ce5e:	50                   	push   eax
c001ce5f:	e8 2a ff ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001ce64:	5f                   	pop    edi
c001ce65:	bf 64 00 00 00       	mov    edi,0x64
c001ce6a:	5a                   	pop    edx
c001ce6b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce71:	53                   	push   ebx
c001ce72:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce77:	99                   	cdq    
c001ce78:	f7 ff                	idiv   edi
c001ce7a:	99                   	cdq    
c001ce7b:	f7 f9                	idiv   ecx
c001ce7d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce80:	0f b6 c0             	movzx  eax,al
c001ce83:	50                   	push   eax
c001ce84:	e8 05 ff ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001ce89:	5a                   	pop    edx
c001ce8a:	5a                   	pop    edx
c001ce8b:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce91:	53                   	push   ebx
c001ce92:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce97:	99                   	cdq    
c001ce98:	f7 f9                	idiv   ecx
c001ce9a:	99                   	cdq    
c001ce9b:	f7 f9                	idiv   ecx
c001ce9d:	8d 42 30             	lea    eax,[edx+0x30]
c001cea0:	0f b6 c0             	movzx  eax,al
c001cea3:	50                   	push   eax
c001cea4:	e8 e5 fe ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001cea9:	5a                   	pop    edx
c001ceaa:	5a                   	pop    edx
c001ceab:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ceb1:	53                   	push   ebx
c001ceb2:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ceb7:	99                   	cdq    
c001ceb8:	f7 f9                	idiv   ecx
c001ceba:	83 c2 30             	add    edx,0x30
c001cebd:	0f b6 d2             	movzx  edx,dl
c001cec0:	52                   	push   edx
c001cec1:	e8 c8 fe ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001cec6:	5a                   	pop    edx
c001cec7:	5a                   	pop    edx
c001cec8:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cece:	53                   	push   ebx
c001cecf:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ced4:	99                   	cdq    
c001ced5:	f7 fd                	idiv   ebp
c001ced7:	99                   	cdq    
c001ced8:	f7 f9                	idiv   ecx
c001ceda:	8d 42 30             	lea    eax,[edx+0x30]
c001cedd:	0f b6 c0             	movzx  eax,al
c001cee0:	50                   	push   eax
c001cee1:	e8 a8 fe ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001cee6:	5d                   	pop    ebp
c001cee7:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ceec:	5a                   	pop    edx
c001ceed:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cef3:	53                   	push   ebx
c001cef4:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cef9:	99                   	cdq    
c001cefa:	f7 fd                	idiv   ebp
c001cefc:	99                   	cdq    
c001cefd:	f7 f9                	idiv   ecx
c001ceff:	8d 42 30             	lea    eax,[edx+0x30]
c001cf02:	0f b6 c0             	movzx  eax,al
c001cf05:	50                   	push   eax
c001cf06:	e8 83 fe ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001cf0b:	5d                   	pop    ebp
c001cf0c:	5a                   	pop    edx
c001cf0d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf13:	53                   	push   ebx
c001cf14:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf19:	99                   	cdq    
c001cf1a:	f7 ff                	idiv   edi
c001cf1c:	99                   	cdq    
c001cf1d:	f7 f9                	idiv   ecx
c001cf1f:	8d 42 30             	lea    eax,[edx+0x30]
c001cf22:	0f b6 c0             	movzx  eax,al
c001cf25:	50                   	push   eax
c001cf26:	e8 63 fe ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001cf2b:	5f                   	pop    edi
c001cf2c:	5d                   	pop    ebp
c001cf2d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf33:	53                   	push   ebx
c001cf34:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf39:	99                   	cdq    
c001cf3a:	f7 f9                	idiv   ecx
c001cf3c:	99                   	cdq    
c001cf3d:	f7 f9                	idiv   ecx
c001cf3f:	8d 42 30             	lea    eax,[edx+0x30]
c001cf42:	0f b6 c0             	movzx  eax,al
c001cf45:	50                   	push   eax
c001cf46:	e8 43 fe ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001cf4b:	5a                   	pop    edx
c001cf4c:	5f                   	pop    edi
c001cf4d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf53:	53                   	push   ebx
c001cf54:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf59:	99                   	cdq    
c001cf5a:	f7 f9                	idiv   ecx
c001cf5c:	83 c2 30             	add    edx,0x30
c001cf5f:	0f b6 d2             	movzx  edx,dl
c001cf62:	52                   	push   edx
c001cf63:	e8 26 fe ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001cf68:	83 c4 10             	add    esp,0x10
c001cf6b:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf71:	eb 05                	jmp    c001cf78 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cf73:	be 01 00 00 00       	mov    esi,0x1
c001cf78:	83 c4 0c             	add    esp,0xc
c001cf7b:	89 f0                	mov    eax,esi
c001cf7d:	5b                   	pop    ebx
c001cf7e:	5e                   	pop    esi
c001cf7f:	5f                   	pop    edi
c001cf80:	5d                   	pop    ebp
c001cf81:	c3                   	ret    

c001cf82 <ATA::write(unsigned long long, int, void*)>:
c001cf82:	55                   	push   ebp
c001cf83:	57                   	push   edi
c001cf84:	56                   	push   esi
c001cf85:	be 04 00 00 00       	mov    esi,0x4
c001cf8a:	53                   	push   ebx
c001cf8b:	83 ec 0c             	sub    esp,0xc
c001cf8e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cf92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf96:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf9a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf9e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cfa1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cfa7:	0f 87 9c 01 00 00    	ja     c001d149 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cfad:	85 c9                	test   ecx,ecx
c001cfaf:	be 06 00 00 00       	mov    esi,0x6
c001cfb4:	0f 84 8f 01 00 00    	je     c001d149 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cfba:	55                   	push   ebp
c001cfbb:	55                   	push   ebp
c001cfbc:	6a 01                	push   0x1
c001cfbe:	51                   	push   ecx
c001cfbf:	53                   	push   ebx
c001cfc0:	52                   	push   edx
c001cfc1:	50                   	push   eax
c001cfc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cfc6:	e8 09 f9 ff ff       	call   c001c8d4 <ATA::access(unsigned long long, int, void*, bool)>
c001cfcb:	83 c4 20             	add    esp,0x20
c001cfce:	85 c0                	test   eax,eax
c001cfd0:	89 c6                	mov    esi,eax
c001cfd2:	0f 85 6c 01 00 00    	jne    c001d144 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cfd8:	50                   	push   eax
c001cfd9:	bd 10 27 00 00       	mov    ebp,0x2710
c001cfde:	50                   	push   eax
c001cfdf:	6a 0f                	push   0xf
c001cfe1:	6a 00                	push   0x0
c001cfe3:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001cfe9:	e8 b1 fd ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001cfee:	5a                   	pop    edx
c001cfef:	59                   	pop    ecx
c001cff0:	b9 0a 00 00 00       	mov    ecx,0xa
c001cff5:	0f b6 d8             	movzx  ebx,al
c001cff8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cffd:	53                   	push   ebx
c001cffe:	99                   	cdq    
c001cfff:	f7 fd                	idiv   ebp
c001d001:	99                   	cdq    
c001d002:	f7 f9                	idiv   ecx
c001d004:	8d 42 30             	lea    eax,[edx+0x30]
c001d007:	0f b6 c0             	movzx  eax,al
c001d00a:	50                   	push   eax
c001d00b:	e8 7e fd ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001d010:	5f                   	pop    edi
c001d011:	bf e8 03 00 00       	mov    edi,0x3e8
c001d016:	5a                   	pop    edx
c001d017:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d01d:	53                   	push   ebx
c001d01e:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d023:	99                   	cdq    
c001d024:	f7 ff                	idiv   edi
c001d026:	99                   	cdq    
c001d027:	f7 f9                	idiv   ecx
c001d029:	8d 42 30             	lea    eax,[edx+0x30]
c001d02c:	0f b6 c0             	movzx  eax,al
c001d02f:	50                   	push   eax
c001d030:	e8 59 fd ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001d035:	5f                   	pop    edi
c001d036:	bf 64 00 00 00       	mov    edi,0x64
c001d03b:	5a                   	pop    edx
c001d03c:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d042:	53                   	push   ebx
c001d043:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d048:	99                   	cdq    
c001d049:	f7 ff                	idiv   edi
c001d04b:	99                   	cdq    
c001d04c:	f7 f9                	idiv   ecx
c001d04e:	8d 42 30             	lea    eax,[edx+0x30]
c001d051:	0f b6 c0             	movzx  eax,al
c001d054:	50                   	push   eax
c001d055:	e8 34 fd ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001d05a:	5a                   	pop    edx
c001d05b:	5a                   	pop    edx
c001d05c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d062:	53                   	push   ebx
c001d063:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d068:	99                   	cdq    
c001d069:	f7 f9                	idiv   ecx
c001d06b:	99                   	cdq    
c001d06c:	f7 f9                	idiv   ecx
c001d06e:	8d 42 30             	lea    eax,[edx+0x30]
c001d071:	0f b6 c0             	movzx  eax,al
c001d074:	50                   	push   eax
c001d075:	e8 14 fd ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001d07a:	5a                   	pop    edx
c001d07b:	5a                   	pop    edx
c001d07c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d082:	53                   	push   ebx
c001d083:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d088:	99                   	cdq    
c001d089:	f7 f9                	idiv   ecx
c001d08b:	83 c2 30             	add    edx,0x30
c001d08e:	0f b6 d2             	movzx  edx,dl
c001d091:	52                   	push   edx
c001d092:	e8 f7 fc ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001d097:	5a                   	pop    edx
c001d098:	5a                   	pop    edx
c001d099:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d09f:	53                   	push   ebx
c001d0a0:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d0a5:	99                   	cdq    
c001d0a6:	f7 fd                	idiv   ebp
c001d0a8:	99                   	cdq    
c001d0a9:	f7 f9                	idiv   ecx
c001d0ab:	8d 42 30             	lea    eax,[edx+0x30]
c001d0ae:	0f b6 c0             	movzx  eax,al
c001d0b1:	50                   	push   eax
c001d0b2:	e8 d7 fc ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001d0b7:	5d                   	pop    ebp
c001d0b8:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d0bd:	5a                   	pop    edx
c001d0be:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d0c4:	53                   	push   ebx
c001d0c5:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d0ca:	99                   	cdq    
c001d0cb:	f7 fd                	idiv   ebp
c001d0cd:	99                   	cdq    
c001d0ce:	f7 f9                	idiv   ecx
c001d0d0:	8d 42 30             	lea    eax,[edx+0x30]
c001d0d3:	0f b6 c0             	movzx  eax,al
c001d0d6:	50                   	push   eax
c001d0d7:	e8 b2 fc ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001d0dc:	5d                   	pop    ebp
c001d0dd:	5a                   	pop    edx
c001d0de:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d0e4:	53                   	push   ebx
c001d0e5:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d0ea:	99                   	cdq    
c001d0eb:	f7 ff                	idiv   edi
c001d0ed:	99                   	cdq    
c001d0ee:	f7 f9                	idiv   ecx
c001d0f0:	8d 42 30             	lea    eax,[edx+0x30]
c001d0f3:	0f b6 c0             	movzx  eax,al
c001d0f6:	50                   	push   eax
c001d0f7:	e8 92 fc ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001d0fc:	5f                   	pop    edi
c001d0fd:	5d                   	pop    ebp
c001d0fe:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d104:	53                   	push   ebx
c001d105:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d10a:	99                   	cdq    
c001d10b:	f7 f9                	idiv   ecx
c001d10d:	99                   	cdq    
c001d10e:	f7 f9                	idiv   ecx
c001d110:	8d 42 30             	lea    eax,[edx+0x30]
c001d113:	0f b6 c0             	movzx  eax,al
c001d116:	50                   	push   eax
c001d117:	e8 72 fc ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001d11c:	5a                   	pop    edx
c001d11d:	5f                   	pop    edi
c001d11e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d124:	53                   	push   ebx
c001d125:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d12a:	99                   	cdq    
c001d12b:	f7 f9                	idiv   ecx
c001d12d:	83 c2 30             	add    edx,0x30
c001d130:	0f b6 d2             	movzx  edx,dl
c001d133:	52                   	push   edx
c001d134:	e8 55 fc ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001d139:	83 c4 10             	add    esp,0x10
c001d13c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d142:	eb 05                	jmp    c001d149 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d144:	be 01 00 00 00       	mov    esi,0x1
c001d149:	83 c4 0c             	add    esp,0xc
c001d14c:	89 f0                	mov    eax,esi
c001d14e:	5b                   	pop    ebx
c001d14f:	5e                   	pop    esi
c001d150:	5f                   	pop    edi
c001d151:	5d                   	pop    ebp
c001d152:	c3                   	ret    
c001d153:	90                   	nop

c001d154 <ATAPI::write(unsigned long long, int, void*)>:
c001d154:	b8 03 00 00 00       	mov    eax,0x3
c001d159:	c3                   	ret    

c001d15a <ATAPI::close(int, int, void*)>:
c001d15a:	83 ec 0c             	sub    esp,0xc
c001d15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d161:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d167:	85 c0                	test   eax,eax
c001d169:	74 0c                	je     c001d177 <ATAPI::close(int, int, void*)+0x1d>
c001d16b:	8b 10                	mov    edx,DWORD PTR [eax]
c001d16d:	83 ec 0c             	sub    esp,0xc
c001d170:	50                   	push   eax
c001d171:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d174:	83 c4 10             	add    esp,0x10
c001d177:	31 c0                	xor    eax,eax
c001d179:	83 c4 0c             	add    esp,0xc
c001d17c:	c3                   	ret    
c001d17d:	90                   	nop

c001d17e <ATAPI::ATAPI()>:
c001d17e:	83 ec 0c             	sub    esp,0xc
c001d181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d185:	83 ec 04             	sub    esp,0x4
c001d188:	68 00 08 00 00       	push   0x800
c001d18d:	68 9d 2f 02 c0       	push   0xc0022f9d
c001d192:	50                   	push   eax
c001d193:	e8 3a f9 fe ff       	call   c000cad2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d198:	83 c4 10             	add    esp,0x10
c001d19b:	ba b8 2e 02 c0       	mov    edx,0xc0022eb8
c001d1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1a4:	89 10                	mov    DWORD PTR [eax],edx
c001d1a6:	90                   	nop
c001d1a7:	83 c4 0c             	add    esp,0xc
c001d1aa:	c3                   	ret    
c001d1ab:	90                   	nop

c001d1ac <ATAPI::readyForCommand()>:
c001d1ac:	56                   	push   esi
c001d1ad:	53                   	push   ebx
c001d1ae:	53                   	push   ebx
c001d1af:	31 db                	xor    ebx,ebx
c001d1b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d1b5:	51                   	push   ecx
c001d1b6:	6a 0c                	push   0xc
c001d1b8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d1bf:	50                   	push   eax
c001d1c0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d1c6:	e8 77 e8 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001d1cb:	83 c4 10             	add    esp,0x10
c001d1ce:	a8 88                	test   al,0x88
c001d1d0:	74 25                	je     c001d1f7 <ATAPI::readyForCommand()+0x4b>
c001d1d2:	43                   	inc    ebx
c001d1d3:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d1d9:	7e da                	jle    c001d1b5 <ATAPI::readyForCommand()+0x9>
c001d1db:	83 ec 0c             	sub    esp,0xc
c001d1de:	68 5e 01 00 00       	push   0x15e
c001d1e3:	e8 cc 8d ff ff       	call   c0015fb4 <milliTenthSleep(unsigned int)>
c001d1e8:	83 c4 10             	add    esp,0x10
c001d1eb:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d1f1:	75 c2                	jne    c001d1b5 <ATAPI::readyForCommand()+0x9>
c001d1f3:	31 c0                	xor    eax,eax
c001d1f5:	eb 02                	jmp    c001d1f9 <ATAPI::readyForCommand()+0x4d>
c001d1f7:	b0 01                	mov    al,0x1
c001d1f9:	5a                   	pop    edx
c001d1fa:	5b                   	pop    ebx
c001d1fb:	5e                   	pop    esi
c001d1fc:	c3                   	ret    
c001d1fd:	90                   	nop

c001d1fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d1fe:	55                   	push   ebp
c001d1ff:	57                   	push   edi
c001d200:	56                   	push   esi
c001d201:	53                   	push   ebx
c001d202:	83 ec 20             	sub    esp,0x20
c001d205:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d209:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d20d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d211:	6a 01                	push   0x1
c001d213:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d21a:	50                   	push   eax
c001d21b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d221:	e8 6a e9 ff ff       	call   c001bb90 <IDE::enableIRQs(unsigned char, bool)>
c001d226:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d22d:	59                   	pop    ecx
c001d22e:	5e                   	pop    esi
c001d22f:	50                   	push   eax
c001d230:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d236:	e8 21 e7 ff ff       	call   c001b95c <IDE::prepareInterrupt(unsigned char)>
c001d23b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d23e:	e8 69 ff ff ff       	call   c001d1ac <ATAPI::readyForCommand()>
c001d243:	83 c4 10             	add    esp,0x10
c001d246:	84 c0                	test   al,al
c001d248:	75 0a                	jne    c001d254 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d24a:	bb 01 00 00 00       	mov    ebx,0x1
c001d24f:	e9 5f 02 00 00       	jmp    c001d4b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d254:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d25a:	c1 e0 04             	shl    eax,0x4
c001d25d:	0f b6 c0             	movzx  eax,al
c001d260:	50                   	push   eax
c001d261:	6a 06                	push   0x6
c001d263:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d26a:	50                   	push   eax
c001d26b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d271:	e8 0c e7 ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d276:	6a 00                	push   0x0
c001d278:	6a 01                	push   0x1
c001d27a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d281:	50                   	push   eax
c001d282:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d288:	e8 f5 e6 ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d28d:	83 c4 20             	add    esp,0x20
c001d290:	0f b6 c3             	movzx  eax,bl
c001d293:	50                   	push   eax
c001d294:	0f b6 df             	movzx  ebx,bh
c001d297:	6a 04                	push   0x4
c001d299:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2a0:	50                   	push   eax
c001d2a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2a7:	e8 d6 e6 ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2ac:	53                   	push   ebx
c001d2ad:	6a 05                	push   0x5
c001d2af:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2b6:	50                   	push   eax
c001d2b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2bd:	e8 c0 e6 ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2c2:	83 c4 20             	add    esp,0x20
c001d2c5:	68 a0 00 00 00       	push   0xa0
c001d2ca:	6a 07                	push   0x7
c001d2cc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2d3:	50                   	push   eax
c001d2d4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2da:	e8 a3 e6 ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2df:	83 c4 0c             	add    esp,0xc
c001d2e2:	6a 01                	push   0x1
c001d2e4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2eb:	50                   	push   eax
c001d2ec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2f2:	e8 6f f1 ff ff       	call   c001c466 <IDE::polling(unsigned char, unsigned int)>
c001d2f7:	83 c4 10             	add    esp,0x10
c001d2fa:	0f b6 d8             	movzx  ebx,al
c001d2fd:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d303:	85 db                	test   ebx,ebx
c001d305:	74 20                	je     c001d327 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d307:	53                   	push   ebx
c001d308:	0f b6 c0             	movzx  eax,al
c001d30b:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d312:	52                   	push   edx
c001d313:	50                   	push   eax
c001d314:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d31a:	e8 8d f0 ff ff       	call   c001c3ac <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d31f:	83 c4 10             	add    esp,0x10
c001d322:	e9 8c 01 00 00       	jmp    c001d4b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d327:	52                   	push   edx
c001d328:	0f b6 c0             	movzx  eax,al
c001d32b:	52                   	push   edx
c001d32c:	50                   	push   eax
c001d32d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d333:	e8 38 e6 ff ff       	call   c001b970 <IDE::getBase(unsigned char)>
c001d338:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d33c:	b9 06 00 00 00       	mov    ecx,0x6
c001d341:	89 c2                	mov    edx,eax
c001d343:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d346:	89 e8                	mov    eax,ebp
c001d348:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d34c:	83 c4 10             	add    esp,0x10
c001d34f:	0f b6 c0             	movzx  eax,al
c001d352:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d356:	85 db                	test   ebx,ebx
c001d358:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d35e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d365:	0f 84 eb 00 00 00    	je     c001d456 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d36b:	55                   	push   ebp
c001d36c:	55                   	push   ebp
c001d36d:	52                   	push   edx
c001d36e:	50                   	push   eax
c001d36f:	e8 82 e7 ff ff       	call   c001baf6 <IDE::waitInterrupt(unsigned char)>
c001d374:	83 c4 10             	add    esp,0x10
c001d377:	84 c0                	test   al,al
c001d379:	0f 84 cb fe ff ff    	je     c001d24a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d37f:	56                   	push   esi
c001d380:	56                   	push   esi
c001d381:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d388:	50                   	push   eax
c001d389:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d38f:	e8 c8 e5 ff ff       	call   c001b95c <IDE::prepareInterrupt(unsigned char)>
c001d394:	83 c4 0c             	add    esp,0xc
c001d397:	6a 04                	push   0x4
c001d399:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3a0:	50                   	push   eax
c001d3a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3a7:	e8 96 e6 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001d3ac:	83 c4 0c             	add    esp,0xc
c001d3af:	6a 05                	push   0x5
c001d3b1:	89 c6                	mov    esi,eax
c001d3b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3ba:	50                   	push   eax
c001d3bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3c1:	e8 7c e6 ff ff       	call   c001ba42 <IDE::read(unsigned char, unsigned char)>
c001d3c6:	83 c4 10             	add    esp,0x10
c001d3c9:	0f b6 e8             	movzx  ebp,al
c001d3cc:	89 f0                	mov    eax,esi
c001d3ce:	c1 e5 08             	shl    ebp,0x8
c001d3d1:	0f b6 f0             	movzx  esi,al
c001d3d4:	09 f5                	or     ebp,esi
c001d3d6:	31 f6                	xor    esi,esi
c001d3d8:	d1 fd                	sar    ebp,1
c001d3da:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d3df:	74 5c                	je     c001d43d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d3e1:	39 ee                	cmp    esi,ebp
c001d3e3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d3e9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d3f0:	75 0d                	jne    c001d3ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d3f2:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d3f5:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d3f9:	4b                   	dec    ebx
c001d3fa:	e9 57 ff ff ff       	jmp    c001d356 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d3ff:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d403:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d407:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d40c:	51                   	push   ecx
c001d40d:	51                   	push   ecx
c001d40e:	52                   	push   edx
c001d40f:	50                   	push   eax
c001d410:	e8 5b e5 ff ff       	call   c001b970 <IDE::getBase(unsigned char)>
c001d415:	89 c2                	mov    edx,eax
c001d417:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d41c:	66 ef                	out    dx,ax
c001d41e:	46                   	inc    esi
c001d41f:	83 c4 10             	add    esp,0x10
c001d422:	eb bd                	jmp    c001d3e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d424:	51                   	push   ecx
c001d425:	51                   	push   ecx
c001d426:	52                   	push   edx
c001d427:	50                   	push   eax
c001d428:	e8 43 e5 ff ff       	call   c001b970 <IDE::getBase(unsigned char)>
c001d42d:	89 c2                	mov    edx,eax
c001d42f:	66 ed                	in     ax,dx
c001d431:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d435:	83 c4 10             	add    esp,0x10
c001d438:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d43c:	46                   	inc    esi
c001d43d:	39 ee                	cmp    esi,ebp
c001d43f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d445:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d44c:	75 d6                	jne    c001d424 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d44e:	01 f6                	add    esi,esi
c001d450:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d454:	eb a3                	jmp    c001d3f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d456:	51                   	push   ecx
c001d457:	51                   	push   ecx
c001d458:	52                   	push   edx
c001d459:	50                   	push   eax
c001d45a:	e8 97 e6 ff ff       	call   c001baf6 <IDE::waitInterrupt(unsigned char)>
c001d45f:	83 c4 10             	add    esp,0x10
c001d462:	84 c0                	test   al,al
c001d464:	0f 84 e0 fd ff ff    	je     c001d24a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d46a:	52                   	push   edx
c001d46b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d470:	52                   	push   edx
c001d471:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d478:	50                   	push   eax
c001d479:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d47f:	e8 d8 e4 ff ff       	call   c001b95c <IDE::prepareInterrupt(unsigned char)>
c001d484:	83 c4 10             	add    esp,0x10
c001d487:	50                   	push   eax
c001d488:	50                   	push   eax
c001d489:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d490:	50                   	push   eax
c001d491:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d497:	e8 d4 e4 ff ff       	call   c001b970 <IDE::getBase(unsigned char)>
c001d49c:	8d 50 07             	lea    edx,[eax+0x7]
c001d49f:	ec                   	in     al,dx
c001d4a0:	83 c4 10             	add    esp,0x10
c001d4a3:	a8 88                	test   al,0x88
c001d4a5:	74 0a                	je     c001d4b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d4a7:	4b                   	dec    ebx
c001d4a8:	75 dd                	jne    c001d487 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d4aa:	bb 02 00 00 00       	mov    ebx,0x2
c001d4af:	eb 02                	jmp    c001d4b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d4b1:	31 db                	xor    ebx,ebx
c001d4b3:	83 c4 1c             	add    esp,0x1c
c001d4b6:	89 d8                	mov    eax,ebx
c001d4b8:	5b                   	pop    ebx
c001d4b9:	5e                   	pop    esi
c001d4ba:	5f                   	pop    edi
c001d4bb:	5d                   	pop    ebp
c001d4bc:	c3                   	ret    
c001d4bd:	90                   	nop

c001d4be <ATAPI::diskRemoved()>:
c001d4be:	53                   	push   ebx
c001d4bf:	83 ec 14             	sub    esp,0x14
c001d4c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d4c6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d4cd:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d4d3:	e8 9c 05 ff ff       	call   c000da74 <LogicalDisk::unmount()>
c001d4d8:	58                   	pop    eax
c001d4d9:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d4df:	e8 74 0f ff ff       	call   c000e458 <VCache::writeWriteBuffer()>
c001d4e4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d4ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d4ee:	83 c4 18             	add    esp,0x18
c001d4f1:	5b                   	pop    ebx
c001d4f2:	e9 51 0f ff ff       	jmp    c000e448 <VCache::invalidateReadBuffer()>
c001d4f7:	90                   	nop

c001d4f8 <ATAPI::eject()>:
c001d4f8:	57                   	push   edi
c001d4f9:	b9 03 00 00 00       	mov    ecx,0x3
c001d4fe:	53                   	push   ebx
c001d4ff:	83 ec 14             	sub    esp,0x14
c001d502:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d506:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d50a:	fc                   	cld    
c001d50b:	31 c0                	xor    eax,eax
c001d50d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d50f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d514:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d519:	50                   	push   eax
c001d51a:	50                   	push   eax
c001d51b:	6a 00                	push   0x0
c001d51d:	6a 00                	push   0x0
c001d51f:	6a 00                	push   0x0
c001d521:	6a 02                	push   0x2
c001d523:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d527:	50                   	push   eax
c001d528:	53                   	push   ebx
c001d529:	e8 d0 fc ff ff       	call   c001d1fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d52e:	83 c4 14             	add    esp,0x14
c001d531:	53                   	push   ebx
c001d532:	e8 87 ff ff ff       	call   c001d4be <ATAPI::diskRemoved()>
c001d537:	83 c4 24             	add    esp,0x24
c001d53a:	31 c0                	xor    eax,eax
c001d53c:	5b                   	pop    ebx
c001d53d:	5f                   	pop    edi
c001d53e:	c3                   	ret    
c001d53f:	90                   	nop

c001d540 <ATAPI::diskInserted()>:
c001d540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d544:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d54b:	c3                   	ret    

c001d54c <ATAPI::detectMedia()>:
c001d54c:	56                   	push   esi
c001d54d:	53                   	push   ebx
c001d54e:	83 ec 28             	sub    esp,0x28
c001d551:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d555:	6a 0c                	push   0xc
c001d557:	6a 00                	push   0x0
c001d559:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d55d:	56                   	push   esi
c001d55e:	e8 8d 2f fe ff       	call   c00004f0 <memset>
c001d563:	58                   	pop    eax
c001d564:	5a                   	pop    edx
c001d565:	6a 00                	push   0x0
c001d567:	6a 00                	push   0x0
c001d569:	6a 00                	push   0x0
c001d56b:	6a 00                	push   0x0
c001d56d:	56                   	push   esi
c001d56e:	53                   	push   ebx
c001d56f:	e8 8a fc ff ff       	call   c001d1fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d574:	83 c4 1c             	add    esp,0x1c
c001d577:	6a 0c                	push   0xc
c001d579:	6a 00                	push   0x0
c001d57b:	56                   	push   esi
c001d57c:	e8 6f 2f fe ff       	call   c00004f0 <memset>
c001d581:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d586:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d58b:	59                   	pop    ecx
c001d58c:	58                   	pop    eax
c001d58d:	6a 01                	push   0x1
c001d58f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d593:	50                   	push   eax
c001d594:	6a 00                	push   0x0
c001d596:	6a 12                	push   0x12
c001d598:	56                   	push   esi
c001d599:	53                   	push   ebx
c001d59a:	e8 5f fc ff ff       	call   c001d1fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d59f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d5a3:	83 c4 20             	add    esp,0x20
c001d5a6:	83 e0 7f             	and    eax,0x7f
c001d5a9:	83 f8 70             	cmp    eax,0x70
c001d5ac:	74 15                	je     c001d5c3 <ATAPI::detectMedia()+0x77>
c001d5ae:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d5b5:	75 0c                	jne    c001d5c3 <ATAPI::detectMedia()+0x77>
c001d5b7:	83 ec 0c             	sub    esp,0xc
c001d5ba:	53                   	push   ebx
c001d5bb:	e8 80 ff ff ff       	call   c001d540 <ATAPI::diskInserted()>
c001d5c0:	83 c4 10             	add    esp,0x10
c001d5c3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d5c7:	83 e0 0f             	and    eax,0xf
c001d5ca:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d5cf:	0f b6 c0             	movzx  eax,al
c001d5d2:	75 19                	jne    c001d5ed <ATAPI::detectMedia()+0xa1>
c001d5d4:	83 f8 02             	cmp    eax,0x2
c001d5d7:	75 14                	jne    c001d5ed <ATAPI::detectMedia()+0xa1>
c001d5d9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d5e0:	74 24                	je     c001d606 <ATAPI::detectMedia()+0xba>
c001d5e2:	83 ec 0c             	sub    esp,0xc
c001d5e5:	53                   	push   ebx
c001d5e6:	e8 d3 fe ff ff       	call   c001d4be <ATAPI::diskRemoved()>
c001d5eb:	eb 16                	jmp    c001d603 <ATAPI::detectMedia()+0xb7>
c001d5ed:	85 c0                	test   eax,eax
c001d5ef:	75 15                	jne    c001d606 <ATAPI::detectMedia()+0xba>
c001d5f1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d5f8:	75 0c                	jne    c001d606 <ATAPI::detectMedia()+0xba>
c001d5fa:	83 ec 0c             	sub    esp,0xc
c001d5fd:	53                   	push   ebx
c001d5fe:	e8 3d ff ff ff       	call   c001d540 <ATAPI::diskInserted()>
c001d603:	83 c4 10             	add    esp,0x10
c001d606:	83 c4 24             	add    esp,0x24
c001d609:	5b                   	pop    ebx
c001d60a:	5e                   	pop    esi
c001d60b:	c3                   	ret    

c001d60c <ATAPI::open(int, int, void*)>:
c001d60c:	56                   	push   esi
c001d60d:	53                   	push   ebx
c001d60e:	50                   	push   eax
c001d60f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d613:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d617:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d61b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d621:	c1 e0 06             	shl    eax,0x6
c001d624:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d62a:	01 d0                	add    eax,edx
c001d62c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d633:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d639:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d640:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d64a:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d651:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d657:	6a 04                	push   0x4
c001d659:	6a 0c                	push   0xc
c001d65b:	51                   	push   ecx
c001d65c:	52                   	push   edx
c001d65d:	e8 20 e3 ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d662:	90                   	nop
c001d663:	90                   	nop
c001d664:	6a 00                	push   0x0
c001d666:	6a 0c                	push   0xc
c001d668:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d66f:	50                   	push   eax
c001d670:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d676:	e8 07 e3 ff ff       	call   c001b982 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d67b:	83 c4 14             	add    esp,0x14
c001d67e:	68 78 01 00 00       	push   0x178
c001d683:	e8 4b a4 fe ff       	call   c0007ad3 <malloc>
c001d688:	83 c4 0c             	add    esp,0xc
c001d68b:	6a 00                	push   0x0
c001d68d:	68 ff ff ff 7f       	push   0x7fffffff
c001d692:	6a 00                	push   0x0
c001d694:	6a 00                	push   0x0
c001d696:	53                   	push   ebx
c001d697:	68 4f 30 02 c0       	push   0xc002304f
c001d69c:	89 c6                	mov    esi,eax
c001d69e:	50                   	push   eax
c001d69f:	e8 0e 02 ff ff       	call   c000d8b2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d6a4:	83 c4 14             	add    esp,0x14
c001d6a7:	56                   	push   esi
c001d6a8:	e8 c5 02 ff ff       	call   c000d972 <LogicalDisk::assignDriveLetter()>
c001d6ad:	5a                   	pop    edx
c001d6ae:	59                   	pop    ecx
c001d6af:	0f be c0             	movsx  eax,al
c001d6b2:	50                   	push   eax
c001d6b3:	68 a0 2e 02 c0       	push   0xc0022ea0
c001d6b8:	e8 4d d2 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d6bd:	58                   	pop    eax
c001d6be:	5a                   	pop    edx
c001d6bf:	56                   	push   esi
c001d6c0:	53                   	push   ebx
c001d6c1:	e8 3e f0 fe ff       	call   c000c704 <Device::addChild(Device*)>
c001d6c6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d6cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6cf:	e8 66 f4 fe ff       	call   c000cb3a <PhysicalDisk::startCache()>
c001d6d4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d6db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6de:	e8 69 fe ff ff       	call   c001d54c <ATAPI::detectMedia()>
c001d6e3:	83 c4 14             	add    esp,0x14
c001d6e6:	31 c0                	xor    eax,eax
c001d6e8:	5b                   	pop    ebx
c001d6e9:	5e                   	pop    esi
c001d6ea:	c3                   	ret    
c001d6eb:	90                   	nop

c001d6ec <ATAPI::read(unsigned long long, int, void*)>:
c001d6ec:	55                   	push   ebp
c001d6ed:	57                   	push   edi
c001d6ee:	56                   	push   esi
c001d6ef:	53                   	push   ebx
c001d6f0:	83 ec 1c             	sub    esp,0x1c
c001d6f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d6f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d6fb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d6ff:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d706:	74 3c                	je     c001d744 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d708:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d70c:	b9 03 00 00 00       	mov    ecx,0x3
c001d711:	fc                   	cld    
c001d712:	31 c0                	xor    eax,eax
c001d714:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d716:	89 e8                	mov    eax,ebp
c001d718:	0f ce                	bswap  esi
c001d71a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d71e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d723:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d727:	50                   	push   eax
c001d728:	50                   	push   eax
c001d729:	55                   	push   ebp
c001d72a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d72e:	c1 e5 0b             	shl    ebp,0xb
c001d731:	6a 00                	push   0x0
c001d733:	55                   	push   ebp
c001d734:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d738:	50                   	push   eax
c001d739:	53                   	push   ebx
c001d73a:	e8 bf fa ff ff       	call   c001d1fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d73f:	83 c4 20             	add    esp,0x20
c001d742:	eb 1a                	jmp    c001d75e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d744:	83 ec 0c             	sub    esp,0xc
c001d747:	53                   	push   ebx
c001d748:	e8 ff fd ff ff       	call   c001d54c <ATAPI::detectMedia()>
c001d74d:	83 c4 10             	add    esp,0x10
c001d750:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d757:	75 af                	jne    c001d708 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d759:	b8 02 00 00 00       	mov    eax,0x2
c001d75e:	83 c4 1c             	add    esp,0x1c
c001d761:	5b                   	pop    ebx
c001d762:	5e                   	pop    esi
c001d763:	5f                   	pop    edi
c001d764:	5d                   	pop    ebp
c001d765:	c3                   	ret    

c001d766 <SATA::close(int, int, void*)>:
c001d766:	83 ec 0c             	sub    esp,0xc
c001d769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d76d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d773:	85 c0                	test   eax,eax
c001d775:	74 0c                	je     c001d783 <SATA::close(int, int, void*)+0x1d>
c001d777:	8b 10                	mov    edx,DWORD PTR [eax]
c001d779:	83 ec 0c             	sub    esp,0xc
c001d77c:	50                   	push   eax
c001d77d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d780:	83 c4 10             	add    esp,0x10
c001d783:	31 c0                	xor    eax,eax
c001d785:	83 c4 0c             	add    esp,0xc
c001d788:	c3                   	ret    
c001d789:	90                   	nop

c001d78a <SATA::powerSaving(PowerSavingLevel)>:
c001d78a:	c3                   	ret    
c001d78b:	90                   	nop

c001d78c <SATA::open(int, int, void*)>:
c001d78c:	56                   	push   esi
c001d78d:	53                   	push   ebx
c001d78e:	50                   	push   eax
c001d78f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d793:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d797:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d7a1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d7a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7ab:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d7b5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d7bf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d7c6:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d7cc:	e8 11 a6 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d7d1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d7d7:	89 c6                	mov    esi,eax
c001d7d9:	e8 04 a6 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d7de:	81 c6 00 10 00 00    	add    esi,0x1000
c001d7e4:	39 c6                	cmp    esi,eax
c001d7e6:	74 10                	je     c001d7f8 <SATA::open(int, int, void*)+0x6c>
c001d7e8:	83 ec 0c             	sub    esp,0xc
c001d7eb:	68 e8 2e 02 c0       	push   0xc0022ee8
c001d7f0:	e8 a4 3a ff ff       	call   c0011299 <KePanic(char const*)>
c001d7f5:	83 c4 10             	add    esp,0x10
c001d7f8:	83 ec 0c             	sub    esp,0xc
c001d7fb:	6a 02                	push   0x2
c001d7fd:	e8 f3 bd fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d802:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d808:	6a 03                	push   0x3
c001d80a:	50                   	push   eax
c001d80b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d811:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d817:	e8 e2 c4 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d81c:	83 c4 14             	add    esp,0x14
c001d81f:	53                   	push   ebx
c001d820:	e8 15 f3 fe ff       	call   c000cb3a <PhysicalDisk::startCache()>
c001d825:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d828:	e8 59 05 ff ff       	call   c000dd86 <createPartitionsForDisk(PhysicalDisk*)>
c001d82d:	83 c4 14             	add    esp,0x14
c001d830:	31 c0                	xor    eax,eax
c001d832:	5b                   	pop    ebx
c001d833:	5e                   	pop    esi
c001d834:	c3                   	ret    
c001d835:	90                   	nop

c001d836 <SATA::SATA()>:
c001d836:	83 ec 0c             	sub    esp,0xc
c001d839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d83d:	83 ec 04             	sub    esp,0x4
c001d840:	68 00 02 00 00       	push   0x200
c001d845:	68 fc 2e 02 c0       	push   0xc0022efc
c001d84a:	50                   	push   eax
c001d84b:	e8 82 f2 fe ff       	call   c000cad2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d850:	83 c4 10             	add    esp,0x10
c001d853:	ba 6c 2f 02 c0       	mov    edx,0xc0022f6c
c001d858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d85c:	89 10                	mov    DWORD PTR [eax],edx
c001d85e:	90                   	nop
c001d85f:	83 c4 0c             	add    esp,0xc
c001d862:	c3                   	ret    
c001d863:	90                   	nop

c001d864 <SATA::access(unsigned long long, int, void*, bool)>:
c001d864:	55                   	push   ebp
c001d865:	57                   	push   edi
c001d866:	56                   	push   esi
c001d867:	53                   	push   ebx
c001d868:	83 ec 2c             	sub    esp,0x2c
c001d86b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d86f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d874:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d878:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d87c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d880:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d884:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d888:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d88c:	7e 10                	jle    c001d89e <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d88e:	83 ec 0c             	sub    esp,0xc
c001d891:	68 0c 2f 02 c0       	push   0xc0022f0c
c001d896:	e8 fe 39 ff ff       	call   c0011299 <KePanic(char const*)>
c001d89b:	83 c4 10             	add    esp,0x10
c001d89e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d8a4:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d8aa:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d8b0:	89 e8                	mov    eax,ebp
c001d8b2:	c1 e0 07             	shl    eax,0x7
c001d8b5:	01 d0                	add    eax,edx
c001d8b7:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d8c1:	8d 45 02             	lea    eax,[ebp+0x2]
c001d8c4:	51                   	push   ecx
c001d8c5:	c1 e0 07             	shl    eax,0x7
c001d8c8:	51                   	push   ecx
c001d8c9:	01 d0                	add    eax,edx
c001d8cb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d8cf:	50                   	push   eax
c001d8d0:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d8d6:	e8 6b ec ff ff       	call   c001c546 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d8db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d8df:	83 c4 10             	add    esp,0x10
c001d8e2:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d8e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d8eb:	0f 84 5b 01 00 00    	je     c001da4c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d8f1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d8f5:	c1 e0 09             	shl    eax,0x9
c001d8f8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d8fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d901:	74 0e                	je     c001d911 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d903:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d909:	89 c1                	mov    ecx,eax
c001d90b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d90f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d911:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d915:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d91b:	8d 45 02             	lea    eax,[ebp+0x2]
c001d91e:	c1 e0 07             	shl    eax,0x7
c001d921:	01 d0                	add    eax,edx
c001d923:	8b 00                	mov    eax,DWORD PTR [eax]
c001d925:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d92b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d931:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d935:	c1 e1 05             	shl    ecx,0x5
c001d938:	01 c8                	add    eax,ecx
c001d93a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d93e:	83 e1 01             	and    ecx,0x1
c001d941:	89 ce                	mov    esi,ecx
c001d943:	8a 08                	mov    cl,BYTE PTR [eax]
c001d945:	c1 e6 06             	shl    esi,0x6
c001d948:	83 e1 bf             	and    ecx,0xffffffbf
c001d94b:	09 f1                	or     ecx,esi
c001d94d:	88 08                	mov    BYTE PTR [eax],cl
c001d94f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d951:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d957:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d95d:	89 08                	mov    DWORD PTR [eax],ecx
c001d95f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d965:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d96b:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d971:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d974:	50                   	push   eax
c001d975:	68 90 00 00 00       	push   0x90
c001d97a:	6a 00                	push   0x0
c001d97c:	56                   	push   esi
c001d97d:	e8 6e 2b fe ff       	call   c00004f0 <memset>
c001d982:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d988:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d98e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d992:	83 c4 10             	add    esp,0x10
c001d995:	48                   	dec    eax
c001d996:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d99b:	89 c1                	mov    ecx,eax
c001d99d:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d9a3:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d9a8:	09 c8                	or     eax,ecx
c001d9aa:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d9b0:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d9b6:	83 c8 80             	or     eax,0xffffff80
c001d9b9:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d9bf:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d9c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9c6:	25 00 7f 00 00       	and    eax,0x7f00
c001d9cb:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d9d0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d9d5:	66 89 06             	mov    WORD PTR [esi],ax
c001d9d8:	b0 35                	mov    al,0x35
c001d9da:	75 02                	jne    c001d9de <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d9dc:	b0 25                	mov    al,0x25
c001d9de:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d9e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d9e5:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d9e9:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d9ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d9f1:	c1 e8 10             	shr    eax,0x10
c001d9f4:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d9f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d9fb:	c1 e8 18             	shr    eax,0x18
c001d9fe:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001da01:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001da05:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001da08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da0c:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001da0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001da13:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001da17:	89 ee                	mov    esi,ebp
c001da19:	31 c0                	xor    eax,eax
c001da1b:	c1 e6 07             	shl    esi,0x7
c001da1e:	01 d6                	add    esi,edx
c001da20:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001da26:	80 e1 88             	and    cl,0x88
c001da29:	74 0a                	je     c001da35 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001da2b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001da30:	74 0a                	je     c001da3c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001da32:	40                   	inc    eax
c001da33:	eb eb                	jmp    c001da20 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001da35:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001da3a:	75 17                	jne    c001da53 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001da3c:	83 ec 0c             	sub    esp,0xc
c001da3f:	68 45 2f 02 c0       	push   0xc0022f45
c001da44:	e8 c1 ce fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001da49:	83 c4 10             	add    esp,0x10
c001da4c:	b8 01 00 00 00       	mov    eax,0x1
c001da51:	eb 5b                	jmp    c001daae <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001da53:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001da57:	c1 e5 07             	shl    ebp,0x7
c001da5a:	b8 01 00 00 00       	mov    eax,0x1
c001da5f:	01 ea                	add    edx,ebp
c001da61:	d3 e0                	shl    eax,cl
c001da63:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001da69:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001da6f:	85 c8                	test   eax,ecx
c001da71:	74 16                	je     c001da89 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001da73:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001da79:	0f ba e1 1e          	bt     ecx,0x1e
c001da7d:	73 ea                	jae    c001da69 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001da7f:	83 ec 0c             	sub    esp,0xc
c001da82:	68 53 2f 02 c0       	push   0xc0022f53
c001da87:	eb bb                	jmp    c001da44 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001da89:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001da8f:	0f ba e0 1e          	bt     eax,0x1e
c001da93:	72 b7                	jb     c001da4c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001da95:	31 c0                	xor    eax,eax
c001da97:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001da9c:	75 10                	jne    c001daae <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001da9e:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001daa4:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001daa8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001daac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001daae:	83 c4 2c             	add    esp,0x2c
c001dab1:	5b                   	pop    ebx
c001dab2:	5e                   	pop    esi
c001dab3:	5f                   	pop    edi
c001dab4:	5d                   	pop    ebp
c001dab5:	c3                   	ret    

c001dab6 <SATA::read(unsigned long long, int, void*)>:
c001dab6:	55                   	push   ebp
c001dab7:	57                   	push   edi
c001dab8:	56                   	push   esi
c001dab9:	be 04 00 00 00       	mov    esi,0x4
c001dabe:	53                   	push   ebx
c001dabf:	83 ec 0c             	sub    esp,0xc
c001dac2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dac6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001daca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dace:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dad2:	8d 7b ff             	lea    edi,[ebx-0x1]
c001dad5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dadb:	0f 87 1a 02 00 00    	ja     c001dcfb <SATA::read(unsigned long long, int, void*)+0x245>
c001dae1:	85 c9                	test   ecx,ecx
c001dae3:	be 06 00 00 00       	mov    esi,0x6
c001dae8:	0f 84 0d 02 00 00    	je     c001dcfb <SATA::read(unsigned long long, int, void*)+0x245>
c001daee:	56                   	push   esi
c001daef:	56                   	push   esi
c001daf0:	6a 00                	push   0x0
c001daf2:	51                   	push   ecx
c001daf3:	53                   	push   ebx
c001daf4:	52                   	push   edx
c001daf5:	50                   	push   eax
c001daf6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dafa:	e8 65 fd ff ff       	call   c001d864 <SATA::access(unsigned long long, int, void*, bool)>
c001daff:	83 c4 20             	add    esp,0x20
c001db02:	85 c0                	test   eax,eax
c001db04:	89 c6                	mov    esi,eax
c001db06:	0f 85 ea 01 00 00    	jne    c001dcf6 <SATA::read(unsigned long long, int, void*)+0x240>
c001db0c:	50                   	push   eax
c001db0d:	50                   	push   eax
c001db0e:	6a 0f                	push   0xf
c001db10:	6a 00                	push   0x0
c001db12:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001db18:	bb 0a 00 00 00       	mov    ebx,0xa
c001db1d:	e8 7d f2 ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001db22:	5a                   	pop    edx
c001db23:	59                   	pop    ecx
c001db24:	b9 10 27 00 00       	mov    ecx,0x2710
c001db29:	0f b6 c0             	movzx  eax,al
c001db2c:	50                   	push   eax
c001db2d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db32:	99                   	cdq    
c001db33:	f7 f9                	idiv   ecx
c001db35:	99                   	cdq    
c001db36:	f7 fb                	idiv   ebx
c001db38:	8d 42 30             	lea    eax,[edx+0x30]
c001db3b:	0f b6 c0             	movzx  eax,al
c001db3e:	50                   	push   eax
c001db3f:	e8 4a f2 ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001db44:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001db4a:	5f                   	pop    edi
c001db4b:	5d                   	pop    ebp
c001db4c:	bd e8 03 00 00       	mov    ebp,0x3e8
c001db51:	6a 0f                	push   0xf
c001db53:	6a 00                	push   0x0
c001db55:	e8 45 f2 ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001db5a:	5a                   	pop    edx
c001db5b:	59                   	pop    ecx
c001db5c:	0f b6 c0             	movzx  eax,al
c001db5f:	50                   	push   eax
c001db60:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db65:	99                   	cdq    
c001db66:	f7 fd                	idiv   ebp
c001db68:	99                   	cdq    
c001db69:	f7 fb                	idiv   ebx
c001db6b:	8d 42 30             	lea    eax,[edx+0x30]
c001db6e:	0f b6 c0             	movzx  eax,al
c001db71:	50                   	push   eax
c001db72:	e8 17 f2 ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001db77:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001db7d:	5f                   	pop    edi
c001db7e:	bf 64 00 00 00       	mov    edi,0x64
c001db83:	58                   	pop    eax
c001db84:	6a 0f                	push   0xf
c001db86:	6a 00                	push   0x0
c001db88:	e8 12 f2 ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001db8d:	5a                   	pop    edx
c001db8e:	59                   	pop    ecx
c001db8f:	0f b6 c0             	movzx  eax,al
c001db92:	50                   	push   eax
c001db93:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db98:	99                   	cdq    
c001db99:	f7 ff                	idiv   edi
c001db9b:	99                   	cdq    
c001db9c:	f7 fb                	idiv   ebx
c001db9e:	8d 42 30             	lea    eax,[edx+0x30]
c001dba1:	0f b6 c0             	movzx  eax,al
c001dba4:	50                   	push   eax
c001dba5:	e8 e4 f1 ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001dbaa:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dbb0:	58                   	pop    eax
c001dbb1:	5a                   	pop    edx
c001dbb2:	6a 0f                	push   0xf
c001dbb4:	6a 00                	push   0x0
c001dbb6:	e8 e4 f1 ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001dbbb:	59                   	pop    ecx
c001dbbc:	5a                   	pop    edx
c001dbbd:	0f b6 c0             	movzx  eax,al
c001dbc0:	50                   	push   eax
c001dbc1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbc6:	99                   	cdq    
c001dbc7:	f7 fb                	idiv   ebx
c001dbc9:	99                   	cdq    
c001dbca:	f7 fb                	idiv   ebx
c001dbcc:	8d 42 30             	lea    eax,[edx+0x30]
c001dbcf:	0f b6 c0             	movzx  eax,al
c001dbd2:	50                   	push   eax
c001dbd3:	e8 b6 f1 ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001dbd8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dbde:	59                   	pop    ecx
c001dbdf:	58                   	pop    eax
c001dbe0:	6a 0f                	push   0xf
c001dbe2:	6a 00                	push   0x0
c001dbe4:	e8 b6 f1 ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001dbe9:	5a                   	pop    edx
c001dbea:	59                   	pop    ecx
c001dbeb:	0f b6 c0             	movzx  eax,al
c001dbee:	50                   	push   eax
c001dbef:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbf4:	99                   	cdq    
c001dbf5:	f7 fb                	idiv   ebx
c001dbf7:	83 c2 30             	add    edx,0x30
c001dbfa:	0f b6 d2             	movzx  edx,dl
c001dbfd:	52                   	push   edx
c001dbfe:	e8 8b f1 ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001dc03:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dc09:	58                   	pop    eax
c001dc0a:	5a                   	pop    edx
c001dc0b:	6a 0f                	push   0xf
c001dc0d:	6a 00                	push   0x0
c001dc0f:	e8 8b f1 ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001dc14:	59                   	pop    ecx
c001dc15:	b9 10 27 00 00       	mov    ecx,0x2710
c001dc1a:	5a                   	pop    edx
c001dc1b:	0f b6 c0             	movzx  eax,al
c001dc1e:	50                   	push   eax
c001dc1f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc24:	99                   	cdq    
c001dc25:	f7 f9                	idiv   ecx
c001dc27:	99                   	cdq    
c001dc28:	f7 fb                	idiv   ebx
c001dc2a:	8d 42 30             	lea    eax,[edx+0x30]
c001dc2d:	0f b6 c0             	movzx  eax,al
c001dc30:	50                   	push   eax
c001dc31:	e8 58 f1 ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001dc36:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dc3c:	59                   	pop    ecx
c001dc3d:	58                   	pop    eax
c001dc3e:	6a 0f                	push   0xf
c001dc40:	6a 00                	push   0x0
c001dc42:	e8 58 f1 ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001dc47:	5a                   	pop    edx
c001dc48:	59                   	pop    ecx
c001dc49:	0f b6 c0             	movzx  eax,al
c001dc4c:	50                   	push   eax
c001dc4d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc52:	99                   	cdq    
c001dc53:	f7 fd                	idiv   ebp
c001dc55:	99                   	cdq    
c001dc56:	f7 fb                	idiv   ebx
c001dc58:	8d 42 30             	lea    eax,[edx+0x30]
c001dc5b:	0f b6 c0             	movzx  eax,al
c001dc5e:	50                   	push   eax
c001dc5f:	e8 2a f1 ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001dc64:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dc6a:	5d                   	pop    ebp
c001dc6b:	58                   	pop    eax
c001dc6c:	6a 0f                	push   0xf
c001dc6e:	6a 00                	push   0x0
c001dc70:	e8 2a f1 ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001dc75:	5a                   	pop    edx
c001dc76:	59                   	pop    ecx
c001dc77:	0f b6 c0             	movzx  eax,al
c001dc7a:	50                   	push   eax
c001dc7b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc80:	99                   	cdq    
c001dc81:	f7 ff                	idiv   edi
c001dc83:	99                   	cdq    
c001dc84:	f7 fb                	idiv   ebx
c001dc86:	8d 42 30             	lea    eax,[edx+0x30]
c001dc89:	0f b6 c0             	movzx  eax,al
c001dc8c:	50                   	push   eax
c001dc8d:	e8 fc f0 ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001dc92:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dc98:	5f                   	pop    edi
c001dc99:	5d                   	pop    ebp
c001dc9a:	6a 0f                	push   0xf
c001dc9c:	6a 00                	push   0x0
c001dc9e:	e8 fc f0 ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001dca3:	5a                   	pop    edx
c001dca4:	59                   	pop    ecx
c001dca5:	0f b6 c0             	movzx  eax,al
c001dca8:	50                   	push   eax
c001dca9:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcae:	99                   	cdq    
c001dcaf:	f7 fb                	idiv   ebx
c001dcb1:	99                   	cdq    
c001dcb2:	f7 fb                	idiv   ebx
c001dcb4:	8d 42 30             	lea    eax,[edx+0x30]
c001dcb7:	0f b6 c0             	movzx  eax,al
c001dcba:	50                   	push   eax
c001dcbb:	e8 ce f0 ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001dcc0:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dcc6:	5f                   	pop    edi
c001dcc7:	5d                   	pop    ebp
c001dcc8:	6a 0f                	push   0xf
c001dcca:	6a 00                	push   0x0
c001dccc:	e8 ce f0 ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001dcd1:	5a                   	pop    edx
c001dcd2:	59                   	pop    ecx
c001dcd3:	0f b6 c0             	movzx  eax,al
c001dcd6:	50                   	push   eax
c001dcd7:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcdc:	99                   	cdq    
c001dcdd:	f7 fb                	idiv   ebx
c001dcdf:	83 c2 30             	add    edx,0x30
c001dce2:	0f b6 d2             	movzx  edx,dl
c001dce5:	52                   	push   edx
c001dce6:	e8 a3 f0 ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001dceb:	83 c4 10             	add    esp,0x10
c001dcee:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dcf4:	eb 05                	jmp    c001dcfb <SATA::read(unsigned long long, int, void*)+0x245>
c001dcf6:	be 01 00 00 00       	mov    esi,0x1
c001dcfb:	83 c4 0c             	add    esp,0xc
c001dcfe:	89 f0                	mov    eax,esi
c001dd00:	5b                   	pop    ebx
c001dd01:	5e                   	pop    esi
c001dd02:	5f                   	pop    edi
c001dd03:	5d                   	pop    ebp
c001dd04:	c3                   	ret    
c001dd05:	90                   	nop

c001dd06 <SATA::write(unsigned long long, int, void*)>:
c001dd06:	55                   	push   ebp
c001dd07:	57                   	push   edi
c001dd08:	56                   	push   esi
c001dd09:	53                   	push   ebx
c001dd0a:	83 ec 0c             	sub    esp,0xc
c001dd0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dd11:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dd15:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dd19:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd1d:	8d 70 ff             	lea    esi,[eax-0x1]
c001dd20:	b8 04 00 00 00       	mov    eax,0x4
c001dd25:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dd2b:	0f 87 2c 02 00 00    	ja     c001df5d <SATA::write(unsigned long long, int, void*)+0x257>
c001dd31:	85 db                	test   ebx,ebx
c001dd33:	b8 06 00 00 00       	mov    eax,0x6
c001dd38:	0f 84 1f 02 00 00    	je     c001df5d <SATA::write(unsigned long long, int, void*)+0x257>
c001dd3e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dd42:	c1 e6 09             	shl    esi,0x9
c001dd45:	01 de                	add    esi,ebx
c001dd47:	50                   	push   eax
c001dd48:	89 d7                	mov    edi,edx
c001dd4a:	50                   	push   eax
c001dd4b:	83 c7 01             	add    edi,0x1
c001dd4e:	6a 01                	push   0x1
c001dd50:	89 cd                	mov    ebp,ecx
c001dd52:	53                   	push   ebx
c001dd53:	83 d5 00             	adc    ebp,0x0
c001dd56:	6a 01                	push   0x1
c001dd58:	81 c3 00 02 00 00    	add    ebx,0x200
c001dd5e:	51                   	push   ecx
c001dd5f:	52                   	push   edx
c001dd60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd64:	e8 fb fa ff ff       	call   c001d864 <SATA::access(unsigned long long, int, void*, bool)>
c001dd69:	83 c4 20             	add    esp,0x20
c001dd6c:	39 f3                	cmp    ebx,esi
c001dd6e:	89 fa                	mov    edx,edi
c001dd70:	89 e9                	mov    ecx,ebp
c001dd72:	75 d3                	jne    c001dd47 <SATA::write(unsigned long long, int, void*)+0x41>
c001dd74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dd78:	bd 10 27 00 00       	mov    ebp,0x2710
c001dd7d:	bb 0a 00 00 00       	mov    ebx,0xa
c001dd82:	01 05 b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,eax
c001dd88:	50                   	push   eax
c001dd89:	50                   	push   eax
c001dd8a:	6a 0f                	push   0xf
c001dd8c:	6a 00                	push   0x0
c001dd8e:	e8 0c f0 ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001dd93:	5a                   	pop    edx
c001dd94:	59                   	pop    ecx
c001dd95:	0f b6 c0             	movzx  eax,al
c001dd98:	50                   	push   eax
c001dd99:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd9e:	99                   	cdq    
c001dd9f:	f7 fd                	idiv   ebp
c001dda1:	99                   	cdq    
c001dda2:	f7 fb                	idiv   ebx
c001dda4:	8d 42 30             	lea    eax,[edx+0x30]
c001dda7:	0f b6 c0             	movzx  eax,al
c001ddaa:	50                   	push   eax
c001ddab:	e8 de ef ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001ddb0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ddb6:	5e                   	pop    esi
c001ddb7:	5f                   	pop    edi
c001ddb8:	bf e8 03 00 00       	mov    edi,0x3e8
c001ddbd:	6a 0f                	push   0xf
c001ddbf:	6a 00                	push   0x0
c001ddc1:	e8 d9 ef ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001ddc6:	5a                   	pop    edx
c001ddc7:	59                   	pop    ecx
c001ddc8:	0f b6 c0             	movzx  eax,al
c001ddcb:	50                   	push   eax
c001ddcc:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ddd1:	99                   	cdq    
c001ddd2:	f7 ff                	idiv   edi
c001ddd4:	99                   	cdq    
c001ddd5:	f7 fb                	idiv   ebx
c001ddd7:	8d 42 30             	lea    eax,[edx+0x30]
c001ddda:	0f b6 c0             	movzx  eax,al
c001dddd:	50                   	push   eax
c001ddde:	e8 ab ef ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001dde3:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dde9:	5e                   	pop    esi
c001ddea:	be 64 00 00 00       	mov    esi,0x64
c001ddef:	58                   	pop    eax
c001ddf0:	6a 0f                	push   0xf
c001ddf2:	6a 00                	push   0x0
c001ddf4:	e8 a6 ef ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001ddf9:	5a                   	pop    edx
c001ddfa:	59                   	pop    ecx
c001ddfb:	0f b6 c0             	movzx  eax,al
c001ddfe:	50                   	push   eax
c001ddff:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de04:	99                   	cdq    
c001de05:	f7 fe                	idiv   esi
c001de07:	99                   	cdq    
c001de08:	f7 fb                	idiv   ebx
c001de0a:	8d 42 30             	lea    eax,[edx+0x30]
c001de0d:	0f b6 c0             	movzx  eax,al
c001de10:	50                   	push   eax
c001de11:	e8 78 ef ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001de16:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001de1c:	58                   	pop    eax
c001de1d:	5a                   	pop    edx
c001de1e:	6a 0f                	push   0xf
c001de20:	6a 00                	push   0x0
c001de22:	e8 78 ef ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001de27:	59                   	pop    ecx
c001de28:	5a                   	pop    edx
c001de29:	0f b6 c0             	movzx  eax,al
c001de2c:	50                   	push   eax
c001de2d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de32:	99                   	cdq    
c001de33:	f7 fb                	idiv   ebx
c001de35:	99                   	cdq    
c001de36:	f7 fb                	idiv   ebx
c001de38:	8d 42 30             	lea    eax,[edx+0x30]
c001de3b:	0f b6 c0             	movzx  eax,al
c001de3e:	50                   	push   eax
c001de3f:	e8 4a ef ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001de44:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001de4a:	59                   	pop    ecx
c001de4b:	58                   	pop    eax
c001de4c:	6a 0f                	push   0xf
c001de4e:	6a 00                	push   0x0
c001de50:	e8 4a ef ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001de55:	5a                   	pop    edx
c001de56:	59                   	pop    ecx
c001de57:	0f b6 c0             	movzx  eax,al
c001de5a:	50                   	push   eax
c001de5b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de60:	99                   	cdq    
c001de61:	f7 fb                	idiv   ebx
c001de63:	83 c2 30             	add    edx,0x30
c001de66:	0f b6 d2             	movzx  edx,dl
c001de69:	52                   	push   edx
c001de6a:	e8 1f ef ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001de6f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001de75:	58                   	pop    eax
c001de76:	5a                   	pop    edx
c001de77:	6a 0f                	push   0xf
c001de79:	6a 00                	push   0x0
c001de7b:	e8 1f ef ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001de80:	59                   	pop    ecx
c001de81:	5a                   	pop    edx
c001de82:	0f b6 c0             	movzx  eax,al
c001de85:	50                   	push   eax
c001de86:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de8b:	99                   	cdq    
c001de8c:	f7 fd                	idiv   ebp
c001de8e:	99                   	cdq    
c001de8f:	f7 fb                	idiv   ebx
c001de91:	8d 42 30             	lea    eax,[edx+0x30]
c001de94:	0f b6 c0             	movzx  eax,al
c001de97:	50                   	push   eax
c001de98:	e8 f1 ee ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001de9d:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dea3:	59                   	pop    ecx
c001dea4:	5d                   	pop    ebp
c001dea5:	6a 0f                	push   0xf
c001dea7:	6a 00                	push   0x0
c001dea9:	e8 f1 ee ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001deae:	5a                   	pop    edx
c001deaf:	59                   	pop    ecx
c001deb0:	0f b6 c0             	movzx  eax,al
c001deb3:	50                   	push   eax
c001deb4:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001deb9:	99                   	cdq    
c001deba:	f7 ff                	idiv   edi
c001debc:	99                   	cdq    
c001debd:	f7 fb                	idiv   ebx
c001debf:	8d 42 30             	lea    eax,[edx+0x30]
c001dec2:	0f b6 c0             	movzx  eax,al
c001dec5:	50                   	push   eax
c001dec6:	e8 c3 ee ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001decb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ded1:	5f                   	pop    edi
c001ded2:	5d                   	pop    ebp
c001ded3:	6a 0f                	push   0xf
c001ded5:	6a 00                	push   0x0
c001ded7:	e8 c3 ee ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001dedc:	5a                   	pop    edx
c001dedd:	59                   	pop    ecx
c001dede:	0f b6 c0             	movzx  eax,al
c001dee1:	50                   	push   eax
c001dee2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dee7:	99                   	cdq    
c001dee8:	f7 fe                	idiv   esi
c001deea:	99                   	cdq    
c001deeb:	f7 fb                	idiv   ebx
c001deed:	8d 42 30             	lea    eax,[edx+0x30]
c001def0:	0f b6 c0             	movzx  eax,al
c001def3:	50                   	push   eax
c001def4:	e8 95 ee ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001def9:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001deff:	5e                   	pop    esi
c001df00:	5f                   	pop    edi
c001df01:	6a 0f                	push   0xf
c001df03:	6a 00                	push   0x0
c001df05:	e8 95 ee ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001df0a:	5d                   	pop    ebp
c001df0b:	5a                   	pop    edx
c001df0c:	0f b6 c0             	movzx  eax,al
c001df0f:	50                   	push   eax
c001df10:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df15:	99                   	cdq    
c001df16:	f7 fb                	idiv   ebx
c001df18:	99                   	cdq    
c001df19:	f7 fb                	idiv   ebx
c001df1b:	8d 42 30             	lea    eax,[edx+0x30]
c001df1e:	0f b6 c0             	movzx  eax,al
c001df21:	50                   	push   eax
c001df22:	e8 67 ee ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001df27:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001df2d:	59                   	pop    ecx
c001df2e:	5e                   	pop    esi
c001df2f:	6a 0f                	push   0xf
c001df31:	6a 00                	push   0x0
c001df33:	e8 67 ee ff ff       	call   c001cd9f <combineColours(unsigned char, unsigned char)>
c001df38:	5f                   	pop    edi
c001df39:	5d                   	pop    ebp
c001df3a:	0f b6 c0             	movzx  eax,al
c001df3d:	50                   	push   eax
c001df3e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df43:	99                   	cdq    
c001df44:	f7 fb                	idiv   ebx
c001df46:	83 c2 30             	add    edx,0x30
c001df49:	0f b6 d2             	movzx  edx,dl
c001df4c:	52                   	push   edx
c001df4d:	e8 3c ee ff ff       	call   c001cd8e <combineCharAndColour(char, unsigned char)>
c001df52:	83 c4 10             	add    esp,0x10
c001df55:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001df5b:	31 c0                	xor    eax,eax
c001df5d:	83 c4 0c             	add    esp,0xc
c001df60:	5b                   	pop    ebx
c001df61:	5e                   	pop    esi
c001df62:	5f                   	pop    edi
c001df63:	5d                   	pop    ebp
c001df64:	c3                   	ret    
c001df65:	90                   	nop

c001df66 <SATAPI::write(unsigned long long, int, void*)>:
c001df66:	b8 03 00 00 00       	mov    eax,0x3
c001df6b:	c3                   	ret    

c001df6c <SATAPI::close(int, int, void*)>:
c001df6c:	83 ec 0c             	sub    esp,0xc
c001df6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df73:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001df79:	85 c0                	test   eax,eax
c001df7b:	74 0c                	je     c001df89 <SATAPI::close(int, int, void*)+0x1d>
c001df7d:	8b 10                	mov    edx,DWORD PTR [eax]
c001df7f:	83 ec 0c             	sub    esp,0xc
c001df82:	50                   	push   eax
c001df83:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001df86:	83 c4 10             	add    esp,0x10
c001df89:	31 c0                	xor    eax,eax
c001df8b:	83 c4 0c             	add    esp,0xc
c001df8e:	c3                   	ret    
c001df8f:	90                   	nop

c001df90 <SATAPI::SATAPI()>:
c001df90:	83 ec 0c             	sub    esp,0xc
c001df93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df97:	83 ec 04             	sub    esp,0x4
c001df9a:	68 00 08 00 00       	push   0x800
c001df9f:	68 9c 2f 02 c0       	push   0xc0022f9c
c001dfa4:	50                   	push   eax
c001dfa5:	e8 28 eb fe ff       	call   c000cad2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dfaa:	83 c4 10             	add    esp,0x10
c001dfad:	ba 90 30 02 c0       	mov    edx,0xc0023090
c001dfb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfb6:	89 10                	mov    DWORD PTR [eax],edx
c001dfb8:	90                   	nop
c001dfb9:	83 c4 0c             	add    esp,0xc
c001dfbc:	c3                   	ret    
c001dfbd:	90                   	nop

c001dfbe <SATAPI::diskRemoved()>:
c001dfbe:	c3                   	ret    
c001dfbf:	90                   	nop

c001dfc0 <SATAPI::diskInserted()>:
c001dfc0:	83 ec 18             	sub    esp,0x18
c001dfc3:	68 a8 2f 02 c0       	push   0xc0022fa8
c001dfc8:	e8 3d c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001dfcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfd1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001dfd8:	83 c4 1c             	add    esp,0x1c
c001dfdb:	c3                   	ret    

c001dfdc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001dfdc:	55                   	push   ebp
c001dfdd:	57                   	push   edi
c001dfde:	56                   	push   esi
c001dfdf:	53                   	push   ebx
c001dfe0:	83 ec 34             	sub    esp,0x34
c001dfe3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dfe7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001dfeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dfef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dff3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dff7:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001dffd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e003:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e007:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e00d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e011:	83 c0 02             	add    eax,0x2
c001e014:	c1 e0 07             	shl    eax,0x7
c001e017:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e01b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e01f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e023:	c1 e0 07             	shl    eax,0x7
c001e026:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e02a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e02e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e038:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e03c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e042:	e8 ff e4 ff ff       	call   c001c546 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e047:	83 c4 10             	add    esp,0x10
c001e04a:	89 c2                	mov    edx,eax
c001e04c:	b8 01 00 00 00       	mov    eax,0x1
c001e051:	83 fa ff             	cmp    edx,0xffffffff
c001e054:	0f 84 5f 02 00 00    	je     c001e2b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e05a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e05e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e062:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e068:	8b 00                	mov    eax,DWORD PTR [eax]
c001e06a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e070:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e076:	89 d1                	mov    ecx,edx
c001e078:	c1 e1 05             	shl    ecx,0x5
c001e07b:	01 c8                	add    eax,ecx
c001e07d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e07f:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e085:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e08b:	89 08                	mov    DWORD PTR [eax],ecx
c001e08d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e093:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e099:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e09f:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e0a2:	50                   	push   eax
c001e0a3:	68 90 00 00 00       	push   0x90
c001e0a8:	6a 00                	push   0x0
c001e0aa:	53                   	push   ebx
c001e0ab:	e8 40 24 fe ff       	call   c00004f0 <memset>
c001e0b0:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e0b3:	b9 0c 00 00 00       	mov    ecx,0xc
c001e0b8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e0bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e0be:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e0c4:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e0c8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e0cc:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e0d2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e0d6:	48                   	dec    eax
c001e0d7:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e0dc:	89 c1                	mov    ecx,eax
c001e0de:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e0e4:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e0e9:	09 c8                	or     eax,ecx
c001e0eb:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e0f1:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e0f7:	83 c8 80             	or     eax,0xffffff80
c001e0fa:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e100:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e103:	25 00 7f 00 00       	and    eax,0x7f00
c001e108:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e10d:	66 89 03             	mov    WORD PTR [ebx],ax
c001e110:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e114:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e11c:	c1 e8 10             	shr    eax,0x10
c001e11f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e126:	c1 e8 18             	shr    eax,0x18
c001e129:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e12c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e130:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e133:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e137:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e13a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e13e:	83 c4 10             	add    esp,0x10
c001e141:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e145:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e149:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e14d:	31 c0                	xor    eax,eax
c001e14f:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e155:	80 e1 88             	and    cl,0x88
c001e158:	74 0a                	je     c001e164 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e15a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e15f:	74 0a                	je     c001e16b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e161:	40                   	inc    eax
c001e162:	eb eb                	jmp    c001e14f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e164:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e169:	75 43                	jne    c001e1ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e16b:	83 ec 0c             	sub    esp,0xc
c001e16e:	68 c0 2f 02 c0       	push   0xc0022fc0
c001e173:	e8 92 c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e178:	58                   	pop    eax
c001e179:	5a                   	pop    edx
c001e17a:	68 d5 2f 02 c0       	push   0xc0022fd5
c001e17f:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e185:	e8 22 a9 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e18a:	59                   	pop    ecx
c001e18b:	5b                   	pop    ebx
c001e18c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e190:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e196:	e8 45 e4 ff ff       	call   c001c5e0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e19b:	5e                   	pop    esi
c001e19c:	5f                   	pop    edi
c001e19d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e1a1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e1a7:	e8 14 e4 ff ff       	call   c001c5c0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e1ac:	eb 48                	jmp    c001e1f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e1ae:	b8 01 00 00 00       	mov    eax,0x1
c001e1b3:	88 d1                	mov    cl,dl
c001e1b5:	d3 e0                	shl    eax,cl
c001e1b7:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e1bc:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e1c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e1c6:	89 c7                	mov    edi,eax
c001e1c8:	c1 e3 07             	shl    ebx,0x7
c001e1cb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e1cf:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e1d5:	85 c7                	test   edi,eax
c001e1d7:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e1dd:	0f 84 a3 00 00 00    	je     c001e286 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e1e3:	0f ba e0 1e          	bt     eax,0x1e
c001e1e7:	73 1a                	jae    c001e203 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e1e9:	83 ec 0c             	sub    esp,0xc
c001e1ec:	68 e7 2f 02 c0       	push   0xc0022fe7
c001e1f1:	e8 14 c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e1f6:	83 c4 10             	add    esp,0x10
c001e1f9:	b8 01 00 00 00       	mov    eax,0x1
c001e1fe:	e9 b6 00 00 00       	jmp    c001e2b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e203:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e209:	83 f8 0d             	cmp    eax,0xd
c001e20c:	77 0a                	ja     c001e218 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e20e:	83 ec 0c             	sub    esp,0xc
c001e211:	68 c8 00 00 00       	push   0xc8
c001e216:	eb 28                	jmp    c001e240 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e218:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e21e:	83 f8 0d             	cmp    eax,0xd
c001e221:	77 0a                	ja     c001e22d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e223:	83 ec 0c             	sub    esp,0xc
c001e226:	68 58 02 00 00       	push   0x258
c001e22b:	eb 13                	jmp    c001e240 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e22d:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e233:	83 f8 06             	cmp    eax,0x6
c001e236:	77 10                	ja     c001e248 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e238:	83 ec 0c             	sub    esp,0xc
c001e23b:	68 dc 05 00 00       	push   0x5dc
c001e240:	e8 6f 7d ff ff       	call   c0015fb4 <milliTenthSleep(unsigned int)>
c001e245:	83 c4 10             	add    esp,0x10
c001e248:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e24c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e24f:	75 06                	jne    c001e257 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e251:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e255:	74 15                	je     c001e26c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e257:	83 fe 06             	cmp    esi,0x6
c001e25a:	77 10                	ja     c001e26c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e25c:	83 ec 0c             	sub    esp,0xc
c001e25f:	68 c4 09 00 00       	push   0x9c4
c001e264:	e8 4b 7d ff ff       	call   c0015fb4 <milliTenthSleep(unsigned int)>
c001e269:	83 c4 10             	add    esp,0x10
c001e26c:	46                   	inc    esi
c001e26d:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e273:	0f 85 56 ff ff ff    	jne    c001e1cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e279:	83 ec 0c             	sub    esp,0xc
c001e27c:	68 fa 2f 02 c0       	push   0xc0022ffa
c001e281:	e9 6b ff ff ff       	jmp    c001e1f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e286:	0f ba e0 1e          	bt     eax,0x1e
c001e28a:	73 0d                	jae    c001e299 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e28c:	83 ec 0c             	sub    esp,0xc
c001e28f:	68 0e 30 02 c0       	push   0xc002300e
c001e294:	e9 58 ff ff ff       	jmp    c001e1f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e299:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e29e:	74 17                	je     c001e2b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e2a0:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e2a5:	74 10                	je     c001e2b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e2a7:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e2ad:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e2b1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e2b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e2b7:	31 c0                	xor    eax,eax
c001e2b9:	83 c4 2c             	add    esp,0x2c
c001e2bc:	5b                   	pop    ebx
c001e2bd:	5e                   	pop    esi
c001e2be:	5f                   	pop    edi
c001e2bf:	5d                   	pop    ebp
c001e2c0:	c3                   	ret    
c001e2c1:	90                   	nop

c001e2c2 <SATAPI::eject()>:
c001e2c2:	57                   	push   edi
c001e2c3:	b9 03 00 00 00       	mov    ecx,0x3
c001e2c8:	83 ec 18             	sub    esp,0x18
c001e2cb:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e2cf:	fc                   	cld    
c001e2d0:	31 c0                	xor    eax,eax
c001e2d2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2d4:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e2d9:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e2de:	50                   	push   eax
c001e2df:	6a 00                	push   0x0
c001e2e1:	6a 00                	push   0x0
c001e2e3:	6a 00                	push   0x0
c001e2e5:	6a 00                	push   0x0
c001e2e7:	6a 02                	push   0x2
c001e2e9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e2ed:	50                   	push   eax
c001e2ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e2f2:	e8 e5 fc ff ff       	call   c001dfdc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e2f7:	83 c4 38             	add    esp,0x38
c001e2fa:	31 c0                	xor    eax,eax
c001e2fc:	5f                   	pop    edi
c001e2fd:	c3                   	ret    

c001e2fe <SATAPI::detectMedia()>:
c001e2fe:	53                   	push   ebx
c001e2ff:	83 ec 14             	sub    esp,0x14
c001e302:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e306:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e30c:	e8 47 01 ff ff       	call   c000e458 <VCache::writeWriteBuffer()>
c001e311:	59                   	pop    ecx
c001e312:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e318:	e8 2b 01 ff ff       	call   c000e448 <VCache::invalidateReadBuffer()>
c001e31d:	c7 04 24 23 30 02 c0 	mov    DWORD PTR [esp],0xc0023023
c001e324:	e8 e1 c5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e329:	83 c4 10             	add    esp,0x10
c001e32c:	31 c0                	xor    eax,eax
c001e32e:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e335:	85 d2                	test   edx,edx
c001e337:	74 0f                	je     c001e348 <SATAPI::detectMedia()+0x4a>
c001e339:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e33f:	75 07                	jne    c001e348 <SATAPI::detectMedia()+0x4a>
c001e341:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e348:	40                   	inc    eax
c001e349:	83 f8 1a             	cmp    eax,0x1a
c001e34c:	75 e0                	jne    c001e32e <SATAPI::detectMedia()+0x30>
c001e34e:	83 c4 08             	add    esp,0x8
c001e351:	5b                   	pop    ebx
c001e352:	c3                   	ret    
c001e353:	90                   	nop

c001e354 <SATAPI::open(int, int, void*)>:
c001e354:	56                   	push   esi
c001e355:	53                   	push   ebx
c001e356:	51                   	push   ecx
c001e357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e35b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e35f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e369:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e36f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e373:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e37d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e387:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e38e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e394:	e8 49 9a fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e399:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e39f:	89 c6                	mov    esi,eax
c001e3a1:	e8 3c 9a fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e3a6:	81 c6 00 10 00 00    	add    esi,0x1000
c001e3ac:	39 c6                	cmp    esi,eax
c001e3ae:	74 10                	je     c001e3c0 <SATAPI::open(int, int, void*)+0x6c>
c001e3b0:	83 ec 0c             	sub    esp,0xc
c001e3b3:	68 38 30 02 c0       	push   0xc0023038
c001e3b8:	e8 dc 2e ff ff       	call   c0011299 <KePanic(char const*)>
c001e3bd:	83 c4 10             	add    esp,0x10
c001e3c0:	83 ec 0c             	sub    esp,0xc
c001e3c3:	6a 02                	push   0x2
c001e3c5:	e8 2b b2 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e3ca:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e3d0:	6a 03                	push   0x3
c001e3d2:	50                   	push   eax
c001e3d3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e3d9:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e3df:	e8 1a b9 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e3e4:	83 c4 14             	add    esp,0x14
c001e3e7:	68 78 01 00 00       	push   0x178
c001e3ec:	e8 e2 96 fe ff       	call   c0007ad3 <malloc>
c001e3f1:	83 c4 0c             	add    esp,0xc
c001e3f4:	6a 00                	push   0x0
c001e3f6:	68 ff ff ff 7f       	push   0x7fffffff
c001e3fb:	6a 00                	push   0x0
c001e3fd:	6a 00                	push   0x0
c001e3ff:	53                   	push   ebx
c001e400:	68 4e 30 02 c0       	push   0xc002304e
c001e405:	89 c6                	mov    esi,eax
c001e407:	50                   	push   eax
c001e408:	e8 a5 f4 fe ff       	call   c000d8b2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e40d:	83 c4 14             	add    esp,0x14
c001e410:	56                   	push   esi
c001e411:	e8 5c f5 fe ff       	call   c000d972 <LogicalDisk::assignDriveLetter()>
c001e416:	5a                   	pop    edx
c001e417:	59                   	pop    ecx
c001e418:	0f be c0             	movsx  eax,al
c001e41b:	50                   	push   eax
c001e41c:	68 a0 2e 02 c0       	push   0xc0022ea0
c001e421:	e8 e4 c4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e426:	58                   	pop    eax
c001e427:	5a                   	pop    edx
c001e428:	56                   	push   esi
c001e429:	53                   	push   ebx
c001e42a:	e8 d5 e2 fe ff       	call   c000c704 <Device::addChild(Device*)>
c001e42f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e435:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e438:	e8 fd e6 fe ff       	call   c000cb3a <PhysicalDisk::startCache()>
c001e43d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e444:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e447:	e8 b2 fe ff ff       	call   c001e2fe <SATAPI::detectMedia()>
c001e44c:	83 c4 14             	add    esp,0x14
c001e44f:	31 c0                	xor    eax,eax
c001e451:	5b                   	pop    ebx
c001e452:	5e                   	pop    esi
c001e453:	c3                   	ret    

c001e454 <SATAPI::read(unsigned long long, int, void*)>:
c001e454:	55                   	push   ebp
c001e455:	57                   	push   edi
c001e456:	56                   	push   esi
c001e457:	53                   	push   ebx
c001e458:	83 ec 3c             	sub    esp,0x3c
c001e45b:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e45f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e463:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e467:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e46b:	83 fd 04             	cmp    ebp,0x4
c001e46e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e472:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e476:	7e 10                	jle    c001e488 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e478:	83 ec 0c             	sub    esp,0xc
c001e47b:	68 5c 30 02 c0       	push   0xc002305c
c001e480:	e8 14 2e ff ff       	call   c0011299 <KePanic(char const*)>
c001e485:	83 c4 10             	add    esp,0x10
c001e488:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e48e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e494:	51                   	push   ecx
c001e495:	50                   	push   eax
c001e496:	83 c0 02             	add    eax,0x2
c001e499:	c1 e0 07             	shl    eax,0x7
c001e49c:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e4a2:	50                   	push   eax
c001e4a3:	52                   	push   edx
c001e4a4:	e8 61 e1 ff ff       	call   c001c60a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e4a9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e4ad:	b9 03 00 00 00       	mov    ecx,0x3
c001e4b2:	fc                   	cld    
c001e4b3:	31 c0                	xor    eax,eax
c001e4b5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e4b7:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e4bc:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e4c1:	83 c4 0c             	add    esp,0xc
c001e4c4:	6a 00                	push   0x0
c001e4c6:	6a 00                	push   0x0
c001e4c8:	6a 00                	push   0x0
c001e4ca:	6a 00                	push   0x0
c001e4cc:	6a 02                	push   0x2
c001e4ce:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e4d2:	50                   	push   eax
c001e4d3:	53                   	push   ebx
c001e4d4:	e8 03 fb ff ff       	call   c001dfdc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e4d9:	83 c4 20             	add    esp,0x20
c001e4dc:	85 c0                	test   eax,eax
c001e4de:	89 c6                	mov    esi,eax
c001e4e0:	75 46                	jne    c001e528 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e4e2:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e4e6:	b9 03 00 00 00       	mov    ecx,0x3
c001e4eb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e4ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e4f1:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e4f6:	0f c8                	bswap  eax
c001e4f8:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e4fc:	89 e8                	mov    eax,ebp
c001e4fe:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e502:	50                   	push   eax
c001e503:	55                   	push   ebp
c001e504:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e508:	c1 e5 0b             	shl    ebp,0xb
c001e50b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e50f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e513:	55                   	push   ebp
c001e514:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e518:	50                   	push   eax
c001e519:	53                   	push   ebx
c001e51a:	e8 bd fa ff ff       	call   c001dfdc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e51f:	83 c4 20             	add    esp,0x20
c001e522:	85 c0                	test   eax,eax
c001e524:	89 c6                	mov    esi,eax
c001e526:	74 0c                	je     c001e534 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e528:	83 ec 0c             	sub    esp,0xc
c001e52b:	53                   	push   ebx
c001e52c:	e8 cd fd ff ff       	call   c001e2fe <SATAPI::detectMedia()>
c001e531:	83 c4 10             	add    esp,0x10
c001e534:	83 c4 3c             	add    esp,0x3c
c001e537:	89 f0                	mov    eax,esi
c001e539:	5b                   	pop    ebx
c001e53a:	5e                   	pop    esi
c001e53b:	5f                   	pop    edi
c001e53c:	5d                   	pop    ebp
c001e53d:	c3                   	ret    

c001e53e <IOAPIC::close(int, int, void*)>:
c001e53e:	b8 00 00 00 00       	mov    eax,0x0
c001e543:	c3                   	ret    

c001e544 <apicGetBase()>:
c001e544:	55                   	push   ebp
c001e545:	89 e5                	mov    ebp,esp
c001e547:	83 ec 18             	sub    esp,0x18
c001e54a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e54f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e555:	83 e0 08             	and    eax,0x8
c001e558:	0f b6 c0             	movzx  eax,al
c001e55b:	85 c0                	test   eax,eax
c001e55d:	75 07                	jne    c001e566 <apicGetBase()+0x22>
c001e55f:	b8 00 00 00 00       	mov    eax,0x0
c001e564:	eb 21                	jmp    c001e587 <apicGetBase()+0x43>
c001e566:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e56b:	83 ec 08             	sub    esp,0x8
c001e56e:	6a 1b                	push   0x1b
c001e570:	50                   	push   eax
c001e571:	e8 6c 8b fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e576:	83 c4 10             	add    esp,0x10
c001e579:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e57c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e57f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e582:	25 00 00 ff ff       	and    eax,0xffff0000
c001e587:	c9                   	leave  
c001e588:	c3                   	ret    
c001e589:	90                   	nop

c001e58a <IOAPIC::IOAPIC()>:
c001e58a:	83 ec 0c             	sub    esp,0xc
c001e58d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e591:	83 ec 08             	sub    esp,0x8
c001e594:	68 c0 30 02 c0       	push   0xc00230c0
c001e599:	50                   	push   eax
c001e59a:	e8 fd e2 fe ff       	call   c000c89c <Device::Device(char const*)>
c001e59f:	83 c4 10             	add    esp,0x10
c001e5a2:	ba d0 30 02 c0       	mov    edx,0xc00230d0
c001e5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ab:	89 10                	mov    DWORD PTR [eax],edx
c001e5ad:	90                   	nop
c001e5ae:	83 c4 0c             	add    esp,0xc
c001e5b1:	c3                   	ret    

c001e5b2 <apicOpen()>:
c001e5b2:	55                   	push   ebp
c001e5b3:	89 e5                	mov    ebp,esp
c001e5b5:	53                   	push   ebx
c001e5b6:	83 ec 34             	sub    esp,0x34
c001e5b9:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e5be:	83 f0 01             	xor    eax,0x1
c001e5c1:	0f b6 c0             	movzx  eax,al
c001e5c4:	85 c0                	test   eax,eax
c001e5c6:	0f 84 a3 00 00 00    	je     c001e66f <apicOpen()+0xbd>
c001e5cc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e5d0:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e5d5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e5d9:	0f b6 c0             	movzx  eax,al
c001e5dc:	39 c2                	cmp    edx,eax
c001e5de:	0f 83 84 00 00 00    	jae    c001e668 <apicOpen()+0xb6>
c001e5e4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e5eb:	83 ec 0c             	sub    esp,0xc
c001e5ee:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e5f1:	e8 dd 94 fe ff       	call   c0007ad3 <malloc>
c001e5f6:	83 c4 10             	add    esp,0x10
c001e5f9:	89 c3                	mov    ebx,eax
c001e5fb:	83 ec 0c             	sub    esp,0xc
c001e5fe:	53                   	push   ebx
c001e5ff:	e8 86 ff ff ff       	call   c001e58a <IOAPIC::IOAPIC()>
c001e604:	83 c4 10             	add    esp,0x10
c001e607:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e60a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e60e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e611:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e618:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e61d:	83 c0 01             	add    eax,0x1
c001e620:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e625:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e62a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e630:	83 ec 08             	sub    esp,0x8
c001e633:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e636:	50                   	push   eax
c001e637:	e8 c8 e0 fe ff       	call   c000c704 <Device::addChild(Device*)>
c001e63c:	83 c4 10             	add    esp,0x10
c001e63f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e642:	8b 00                	mov    eax,DWORD PTR [eax]
c001e644:	83 c0 08             	add    eax,0x8
c001e647:	8b 00                	mov    eax,DWORD PTR [eax]
c001e649:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e64d:	6a 00                	push   0x0
c001e64f:	6a 00                	push   0x0
c001e651:	52                   	push   edx
c001e652:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e655:	ff d0                	call   eax
c001e657:	83 c4 10             	add    esp,0x10
c001e65a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e65d:	83 c0 01             	add    eax,0x1
c001e660:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e663:	e9 68 ff ff ff       	jmp    c001e5d0 <apicOpen()+0x1e>
c001e668:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e66f:	e8 d0 fe ff ff       	call   c001e544 <apicGetBase()>
c001e674:	05 f0 00 00 00       	add    eax,0xf0
c001e679:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e67c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e67f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e681:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e684:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e68b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e692:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e695:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e698:	89 10                	mov    DWORD PTR [eax],edx
c001e69a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e6a1:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e6a6:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e6a9:	7d 7c                	jge    c001e727 <apicOpen()+0x175>
c001e6ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6ae:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e6b5:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e6b8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6bb:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e6c2:	c1 e8 08             	shr    eax,0x8
c001e6c5:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e6c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6cc:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e6d3:	c1 e8 18             	shr    eax,0x18
c001e6d6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e6d9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e6dd:	3d ff 00 00 00       	cmp    eax,0xff
c001e6e2:	75 3a                	jne    c001e71e <apicOpen()+0x16c>
c001e6e4:	e8 5b fe ff ff       	call   c001e544 <apicGetBase()>
c001e6e9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e6ed:	83 fa 01             	cmp    edx,0x1
c001e6f0:	75 07                	jne    c001e6f9 <apicOpen()+0x147>
c001e6f2:	ba 60 03 00 00       	mov    edx,0x360
c001e6f7:	eb 05                	jmp    c001e6fe <apicOpen()+0x14c>
c001e6f9:	ba 50 03 00 00       	mov    edx,0x350
c001e6fe:	01 d0                	add    eax,edx
c001e700:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e703:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e706:	8b 00                	mov    eax,DWORD PTR [eax]
c001e708:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e70b:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e712:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e716:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e719:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e71c:	89 10                	mov    DWORD PTR [eax],edx
c001e71e:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e722:	e9 7a ff ff ff       	jmp    c001e6a1 <apicOpen()+0xef>
c001e727:	90                   	nop
c001e728:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e72b:	c9                   	leave  
c001e72c:	c3                   	ret    
c001e72d:	90                   	nop

c001e72e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e72e:	55                   	push   ebp
c001e72f:	89 e5                	mov    ebp,esp
c001e731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e734:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e73a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e73d:	72 1d                	jb     c001e75c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e73f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e742:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e74b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e751:	01 d0                	add    eax,edx
c001e753:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e756:	73 04                	jae    c001e75c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e758:	b0 01                	mov    al,0x1
c001e75a:	eb 02                	jmp    c001e75e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e75c:	b0 00                	mov    al,0x0
c001e75e:	5d                   	pop    ebp
c001e75f:	c3                   	ret    

c001e760 <IOAPIC::read(int)>:
c001e760:	55                   	push   ebp
c001e761:	89 e5                	mov    ebp,esp
c001e763:	83 ec 10             	sub    esp,0x10
c001e766:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e769:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e76f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e772:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e775:	0f b6 d0             	movzx  edx,al
c001e778:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e77b:	89 10                	mov    DWORD PTR [eax],edx
c001e77d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e780:	83 c0 10             	add    eax,0x10
c001e783:	8b 00                	mov    eax,DWORD PTR [eax]
c001e785:	c9                   	leave  
c001e786:	c3                   	ret    
c001e787:	90                   	nop

c001e788 <IOAPIC::open(int, int, void*)>:
c001e788:	55                   	push   ebp
c001e789:	89 e5                	mov    ebp,esp
c001e78b:	57                   	push   edi
c001e78c:	56                   	push   esi
c001e78d:	53                   	push   ebx
c001e78e:	83 ec 04             	sub    esp,0x4
c001e791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e794:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e797:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e79d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7a0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e7a6:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7b0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e7b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e7bf:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e7c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7c9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e7cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7d2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e7d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7db:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e7e1:	0f b6 f0             	movzx  esi,al
c001e7e4:	89 d0                	mov    eax,edx
c001e7e6:	ba 00 00 00 00       	mov    edx,0x0
c001e7eb:	89 c7                	mov    edi,eax
c001e7ed:	83 e7 ff             	and    edi,0xffffffff
c001e7f0:	89 f9                	mov    ecx,edi
c001e7f2:	0f b6 da             	movzx  ebx,dl
c001e7f5:	89 c8                	mov    eax,ecx
c001e7f7:	89 da                	mov    edx,ebx
c001e7f9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e7fc:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e7ff:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e803:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e807:	83 e0 00             	and    eax,0x0
c001e80a:	09 d0                	or     eax,edx
c001e80c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e813:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e819:	8d 50 01             	lea    edx,[eax+0x1]
c001e81c:	88 d1                	mov    cl,dl
c001e81e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e821:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e827:	0f b6 d0             	movzx  edx,al
c001e82a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e82d:	83 c2 08             	add    edx,0x8
c001e830:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e834:	0f b6 c9             	movzx  ecx,cl
c001e837:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e83d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e841:	6a 01                	push   0x1
c001e843:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e846:	e8 15 ff ff ff       	call   c001e760 <IOAPIC::read(int)>
c001e84b:	83 c4 08             	add    esp,0x8
c001e84e:	c1 f8 10             	sar    eax,0x10
c001e851:	0f b6 c0             	movzx  eax,al
c001e854:	8d 50 01             	lea    edx,[eax+0x1]
c001e857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e85a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e860:	b8 00 00 00 00       	mov    eax,0x0
c001e865:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e868:	5b                   	pop    ebx
c001e869:	5e                   	pop    esi
c001e86a:	5f                   	pop    edi
c001e86b:	5d                   	pop    ebp
c001e86c:	c3                   	ret    
c001e86d:	90                   	nop

c001e86e <IOAPIC::write(int, int)>:
c001e86e:	55                   	push   ebp
c001e86f:	89 e5                	mov    ebp,esp
c001e871:	83 ec 10             	sub    esp,0x10
c001e874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e877:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e87d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e880:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e883:	0f b6 d0             	movzx  edx,al
c001e886:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e889:	89 10                	mov    DWORD PTR [eax],edx
c001e88b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e88e:	8d 50 10             	lea    edx,[eax+0x10]
c001e891:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e894:	89 02                	mov    DWORD PTR [edx],eax
c001e896:	90                   	nop
c001e897:	c9                   	leave  
c001e898:	c3                   	ret    
c001e899:	90                   	nop

c001e89a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e89a:	55                   	push   ebp
c001e89b:	89 e5                	mov    ebp,esp
c001e89d:	53                   	push   ebx
c001e89e:	83 ec 2c             	sub    esp,0x2c
c001e8a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e8a4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e8a7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e8aa:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e8ad:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e8b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e8b3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e8b6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e8b9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e8bc:	88 d8                	mov    al,bl
c001e8be:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e8c1:	88 c8                	mov    al,cl
c001e8c3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e8c6:	88 d0                	mov    al,dl
c001e8c8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e8cb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e8cf:	83 c0 08             	add    eax,0x8
c001e8d2:	d1 e0                	shl    eax,1
c001e8d4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e8d7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e8db:	83 c0 08             	add    eax,0x8
c001e8de:	d1 e0                	shl    eax,1
c001e8e0:	83 c0 01             	add    eax,0x1
c001e8e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e8e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e8e9:	50                   	push   eax
c001e8ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8ed:	e8 6e fe ff ff       	call   c001e760 <IOAPIC::read(int)>
c001e8f2:	83 c4 08             	add    esp,0x8
c001e8f5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e8f8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e8ff:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e902:	c1 e0 18             	shl    eax,0x18
c001e905:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e908:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e90b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e90e:	52                   	push   edx
c001e90f:	50                   	push   eax
c001e910:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e913:	e8 56 ff ff ff       	call   c001e86e <IOAPIC::write(int, int)>
c001e918:	83 c4 0c             	add    esp,0xc
c001e91b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e91e:	50                   	push   eax
c001e91f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e922:	e8 39 fe ff ff       	call   c001e760 <IOAPIC::read(int)>
c001e927:	83 c4 08             	add    esp,0x8
c001e92a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e92d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e934:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e93b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e942:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e946:	85 c0                	test   eax,eax
c001e948:	74 09                	je     c001e953 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e94a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e951:	eb 07                	jmp    c001e95a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e953:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e95a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e95e:	85 c0                	test   eax,eax
c001e960:	74 09                	je     c001e96b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e962:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e969:	eb 07                	jmp    c001e972 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e96b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e972:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e979:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e97d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e980:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e983:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e986:	52                   	push   edx
c001e987:	50                   	push   eax
c001e988:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e98b:	e8 de fe ff ff       	call   c001e86e <IOAPIC::write(int, int)>
c001e990:	83 c4 0c             	add    esp,0xc
c001e993:	90                   	nop
c001e994:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e997:	c9                   	leave  
c001e998:	c3                   	ret    
c001e999:	66 90                	xchg   ax,ax
c001e99b:	90                   	nop

c001e99c <APICTimer::close(int, int, void*)>:
c001e99c:	b8 00 00 00 00       	mov    eax,0x0
c001e9a1:	c3                   	ret    
c001e9a2:	66 90                	xchg   ax,ax

c001e9a4 <apicTimerHandler(regs*, void*)>:
c001e9a4:	83 ec 0c             	sub    esp,0xc
c001e9a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9ab:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e9ad:	b8 10 27 00 00       	mov    eax,0x2710
c001e9b2:	ba 00 00 00 00       	mov    edx,0x0
c001e9b7:	f7 f1                	div    ecx
c001e9b9:	83 ec 0c             	sub    esp,0xc
c001e9bc:	50                   	push   eax
c001e9bd:	e8 ae f7 fe ff       	call   c000e170 <timerHandler(unsigned int)>
c001e9c2:	83 c4 10             	add    esp,0x10
c001e9c5:	90                   	nop
c001e9c6:	83 c4 0c             	add    esp,0xc
c001e9c9:	c3                   	ret    
c001e9ca:	66 90                	xchg   ax,ax

c001e9cc <APICTimer::open(int, int, void*)>:
c001e9cc:	83 ec 0c             	sub    esp,0xc
c001e9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9d5:	83 c0 24             	add    eax,0x24
c001e9d8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9da:	83 ec 08             	sub    esp,0x8
c001e9dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9e5:	ff d0                	call   eax
c001e9e7:	83 c4 10             	add    esp,0x10
c001e9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e9f2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea00:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ea06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea0a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ea10:	83 ec 0c             	sub    esp,0xc
c001ea13:	51                   	push   ecx
c001ea14:	6a 01                	push   0x1
c001ea16:	68 a4 e9 01 c0       	push   0xc001e9a4
c001ea1b:	52                   	push   edx
c001ea1c:	50                   	push   eax
c001ea1d:	e8 8e dc fe ff       	call   c000c6b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea22:	83 c4 20             	add    esp,0x20
c001ea25:	89 c2                	mov    edx,eax
c001ea27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ea31:	b8 00 00 00 00       	mov    eax,0x0
c001ea36:	83 c4 0c             	add    esp,0xc
c001ea39:	c3                   	ret    
c001ea3a:	66 90                	xchg   ax,ax

c001ea3c <APICTimer::write(int)>:
c001ea3c:	83 ec 0c             	sub    esp,0xc
c001ea3f:	83 ec 0c             	sub    esp,0xc
c001ea42:	68 f4 30 02 c0       	push   0xc00230f4
c001ea47:	e8 4d 28 ff ff       	call   c0011299 <KePanic(char const*)>
c001ea4c:	83 c4 10             	add    esp,0x10
c001ea4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea57:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ea5d:	90                   	nop
c001ea5e:	83 c4 0c             	add    esp,0xc
c001ea61:	c3                   	ret    
c001ea62:	66 90                	xchg   ax,ax

c001ea64 <APICTimer::APICTimer()>:
c001ea64:	83 ec 0c             	sub    esp,0xc
c001ea67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6b:	83 ec 08             	sub    esp,0x8
c001ea6e:	68 04 31 02 c0       	push   0xc0023104
c001ea73:	50                   	push   eax
c001ea74:	e8 2b f6 fe ff       	call   c000e0a4 <Timer::Timer(char const*)>
c001ea79:	83 c4 10             	add    esp,0x10
c001ea7c:	ba 18 31 02 c0       	mov    edx,0xc0023118
c001ea81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea85:	89 10                	mov    DWORD PTR [eax],edx
c001ea87:	90                   	nop
c001ea88:	83 c4 0c             	add    esp,0xc
c001ea8b:	c3                   	ret    

c001ea8c <PIT::write(int)>:
c001ea8c:	83 ec 10             	sub    esp,0x10
c001ea8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ea97:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ea9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eaa1:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001eaa6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001eaab:	89 c2                	mov    edx,eax
c001eaad:	c1 fa 1f             	sar    edx,0x1f
c001eab0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eab4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eab8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eabf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eac4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eac8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eacd:	ee                   	out    dx,al
c001eace:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ead2:	0f b6 c0             	movzx  eax,al
c001ead5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eadc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001eae0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001eae4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eae9:	ee                   	out    dx,al
c001eaea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eaee:	c1 f8 08             	sar    eax,0x8
c001eaf1:	0f b6 c0             	movzx  eax,al
c001eaf4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eafb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eaff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eb03:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eb08:	ee                   	out    dx,al
c001eb09:	90                   	nop
c001eb0a:	83 c4 10             	add    esp,0x10
c001eb0d:	c3                   	ret    
c001eb0e:	66 90                	xchg   ax,ax

c001eb10 <pitHandler(regs*, void*)>:
c001eb10:	83 ec 0c             	sub    esp,0xc
c001eb13:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001eb19:	b8 10 27 00 00       	mov    eax,0x2710
c001eb1e:	89 c2                	mov    edx,eax
c001eb20:	c1 fa 1f             	sar    edx,0x1f
c001eb23:	f7 f9                	idiv   ecx
c001eb25:	83 ec 0c             	sub    esp,0xc
c001eb28:	50                   	push   eax
c001eb29:	e8 42 f6 fe ff       	call   c000e170 <timerHandler(unsigned int)>
c001eb2e:	83 c4 10             	add    esp,0x10
c001eb31:	90                   	nop
c001eb32:	83 c4 0c             	add    esp,0xc
c001eb35:	c3                   	ret    
c001eb36:	66 90                	xchg   ax,ax

c001eb38 <PIT::open(int, int, void*)>:
c001eb38:	83 ec 0c             	sub    esp,0xc
c001eb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3f:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb41:	83 c0 24             	add    eax,0x24
c001eb44:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb46:	83 ec 08             	sub    esp,0x8
c001eb49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb51:	ff d0                	call   eax
c001eb53:	83 c4 10             	add    esp,0x10
c001eb56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5a:	83 ec 0c             	sub    esp,0xc
c001eb5d:	6a 00                	push   0x0
c001eb5f:	6a 01                	push   0x1
c001eb61:	68 10 eb 01 c0       	push   0xc001eb10
c001eb66:	6a 00                	push   0x0
c001eb68:	50                   	push   eax
c001eb69:	e8 42 db fe ff       	call   c000c6b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb6e:	83 c4 20             	add    esp,0x20
c001eb71:	89 c2                	mov    edx,eax
c001eb73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb77:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eb7d:	b8 00 00 00 00       	mov    eax,0x0
c001eb82:	83 c4 0c             	add    esp,0xc
c001eb85:	c3                   	ret    
c001eb86:	66 90                	xchg   ax,ax

c001eb88 <PIT::close(int, int, void*)>:
c001eb88:	83 ec 0c             	sub    esp,0xc
c001eb8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001eb99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb9d:	6a 01                	push   0x1
c001eb9f:	68 10 eb 01 c0       	push   0xc001eb10
c001eba4:	6a 00                	push   0x0
c001eba6:	50                   	push   eax
c001eba7:	e8 3a db fe ff       	call   c000c6e6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ebac:	83 c4 10             	add    esp,0x10
c001ebaf:	b8 00 00 00 00       	mov    eax,0x0
c001ebb4:	83 c4 0c             	add    esp,0xc
c001ebb7:	c3                   	ret    

c001ebb8 <PIT::PIT()>:
c001ebb8:	83 ec 0c             	sub    esp,0xc
c001ebbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbf:	83 ec 08             	sub    esp,0x8
c001ebc2:	68 40 31 02 c0       	push   0xc0023140
c001ebc7:	50                   	push   eax
c001ebc8:	e8 d7 f4 fe ff       	call   c000e0a4 <Timer::Timer(char const*)>
c001ebcd:	83 c4 10             	add    esp,0x10
c001ebd0:	ba 68 31 02 c0       	mov    edx,0xc0023168
c001ebd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd9:	89 10                	mov    DWORD PTR [eax],edx
c001ebdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebdf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ebe5:	0f b6 d0             	movzx  edx,al
c001ebe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebec:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ebf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ebfd:	0f b6 d0             	movzx  edx,al
c001ec00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec04:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ec09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec13:	8d 50 01             	lea    edx,[eax+0x1]
c001ec16:	88 d1                	mov    cl,dl
c001ec18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec1c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ec22:	0f b6 d0             	movzx  edx,al
c001ec25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec29:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ec2d:	83 e1 3f             	and    ecx,0x3f
c001ec30:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ec34:	90                   	nop
c001ec35:	83 c4 0c             	add    esp,0xc
c001ec38:	c3                   	ret    
c001ec39:	66 90                	xchg   ax,ax
c001ec3b:	66 90                	xchg   ax,ax
c001ec3d:	66 90                	xchg   ax,ax
c001ec3f:	90                   	nop

c001ec40 <avxDetect>:
c001ec40:	b8 01 00 00 00       	mov    eax,0x1
c001ec45:	0f a2                	cpuid  
c001ec47:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ec4d:	74 15                	je     c001ec64 <avxDetect.noAVX>
c001ec4f:	b8 01 00 00 00       	mov    eax,0x1
c001ec54:	0f a2                	cpuid  
c001ec56:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ec5c:	74 06                	je     c001ec64 <avxDetect.noAVX>
c001ec5e:	b8 01 00 00 00       	mov    eax,0x1
c001ec63:	c3                   	ret    

c001ec64 <avxDetect.noAVX>:
c001ec64:	b8 00 00 00 00       	mov    eax,0x0
c001ec69:	c3                   	ret    

c001ec6a <avxSave>:
c001ec6a:	53                   	push   ebx
c001ec6b:	52                   	push   edx
c001ec6c:	31 c0                	xor    eax,eax
c001ec6e:	48                   	dec    eax
c001ec6f:	89 c2                	mov    edx,eax
c001ec71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ec75:	0f ae 23             	xsave  [ebx]
c001ec78:	5a                   	pop    edx
c001ec79:	5b                   	pop    ebx
c001ec7a:	c3                   	ret    

c001ec7b <avxLoad>:
c001ec7b:	53                   	push   ebx
c001ec7c:	52                   	push   edx
c001ec7d:	31 c0                	xor    eax,eax
c001ec7f:	48                   	dec    eax
c001ec80:	89 c2                	mov    edx,eax
c001ec82:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ec86:	0f ae 2b             	xrstor [ebx]
c001ec89:	5a                   	pop    edx
c001ec8a:	5b                   	pop    ebx
c001ec8b:	c3                   	ret    

c001ec8c <avxInit>:
c001ec8c:	e8 67 03 00 00       	call   c001eff8 <sseInit>
c001ec91:	50                   	push   eax
c001ec92:	51                   	push   ecx
c001ec93:	0f 20 e0             	mov    eax,cr4
c001ec96:	0d 00 00 04 00       	or     eax,0x40000
c001ec9b:	0f 22 e0             	mov    cr4,eax
c001ec9e:	31 c9                	xor    ecx,ecx
c001eca0:	0f 01 d0             	xgetbv 
c001eca3:	0d 07 00 00 00       	or     eax,0x7
c001eca8:	0f 01 d1             	xsetbv 
c001ecab:	59                   	pop    ecx
c001ecac:	58                   	pop    eax
c001ecad:	c3                   	ret    

c001ecae <avxClose>:
c001ecae:	c3                   	ret    

c001ecaf <wouldSheSayYes>:
c001ecaf:	c3                   	ret    
c001ecb0:	49                   	dec    ecx
c001ecb1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ecb5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ecb9:	75 20                	jne    c001ecdb <isr0+0xb>
c001ecbb:	4e                   	dec    esi
c001ecbc:	79 61                	jns    c001ed1f <isr7+0x3>
c001ecbe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ecc3:	66 90                	xchg   ax,ax
c001ecc5:	66 90                	xchg   ax,ax
c001ecc7:	66 90                	xchg   ax,ax
c001ecc9:	66 90                	xchg   ax,ax
c001eccb:	66 90                	xchg   ax,ax
c001eccd:	66 90                	xchg   ax,ax
c001eccf:	90                   	nop

c001ecd0 <isr0>:
c001ecd0:	fa                   	cli    
c001ecd1:	68 00 00 00 00       	push   0x0
c001ecd6:	68 00 00 00 00       	push   0x0
c001ecdb:	e9 56 01 00 00       	jmp    c001ee36 <int_common_stub>

c001ece0 <isr1>:
c001ece0:	fa                   	cli    
c001ece1:	6a 00                	push   0x0
c001ece3:	6a 01                	push   0x1
c001ece5:	e9 4c 01 00 00       	jmp    c001ee36 <int_common_stub>

c001ecea <isr2>:
c001ecea:	fa                   	cli    
c001eceb:	6a 00                	push   0x0
c001eced:	6a 02                	push   0x2
c001ecef:	e9 42 01 00 00       	jmp    c001ee36 <int_common_stub>

c001ecf4 <isr3>:
c001ecf4:	fa                   	cli    
c001ecf5:	6a 00                	push   0x0
c001ecf7:	6a 03                	push   0x3
c001ecf9:	e9 38 01 00 00       	jmp    c001ee36 <int_common_stub>

c001ecfe <isr4>:
c001ecfe:	fa                   	cli    
c001ecff:	6a 00                	push   0x0
c001ed01:	6a 04                	push   0x4
c001ed03:	e9 2e 01 00 00       	jmp    c001ee36 <int_common_stub>

c001ed08 <isr5>:
c001ed08:	fa                   	cli    
c001ed09:	6a 00                	push   0x0
c001ed0b:	6a 05                	push   0x5
c001ed0d:	e9 24 01 00 00       	jmp    c001ee36 <int_common_stub>

c001ed12 <isr6>:
c001ed12:	fa                   	cli    
c001ed13:	6a 00                	push   0x0
c001ed15:	6a 06                	push   0x6
c001ed17:	e9 1a 01 00 00       	jmp    c001ee36 <int_common_stub>

c001ed1c <isr7>:
c001ed1c:	fa                   	cli    
c001ed1d:	6a 00                	push   0x0
c001ed1f:	6a 07                	push   0x7
c001ed21:	e9 10 01 00 00       	jmp    c001ee36 <int_common_stub>

c001ed26 <isr8>:
c001ed26:	fa                   	cli    
c001ed27:	6a 08                	push   0x8
c001ed29:	e9 08 01 00 00       	jmp    c001ee36 <int_common_stub>

c001ed2e <isr9>:
c001ed2e:	fa                   	cli    
c001ed2f:	6a 00                	push   0x0
c001ed31:	6a 09                	push   0x9
c001ed33:	e9 fe 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ed38 <isr10>:
c001ed38:	fa                   	cli    
c001ed39:	6a 0a                	push   0xa
c001ed3b:	e9 f6 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ed40 <isr11>:
c001ed40:	fa                   	cli    
c001ed41:	6a 0b                	push   0xb
c001ed43:	e9 ee 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ed48 <isr12>:
c001ed48:	fa                   	cli    
c001ed49:	6a 0c                	push   0xc
c001ed4b:	e9 e6 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ed50 <isr13>:
c001ed50:	fa                   	cli    
c001ed51:	6a 0d                	push   0xd
c001ed53:	53                   	push   ebx
c001ed54:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ed58:	81 fb 26 ef 01 c0    	cmp    ebx,0xc001ef26
c001ed5e:	5b                   	pop    ebx
c001ed5f:	0f 84 c3 01 00 00    	je     c001ef28 <finishSignal2>
c001ed65:	e9 cc 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ed6a <isr14>:
c001ed6a:	fa                   	cli    
c001ed6b:	6a 0e                	push   0xe
c001ed6d:	e9 c4 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ed72 <isr15>:
c001ed72:	fa                   	cli    
c001ed73:	6a 00                	push   0x0
c001ed75:	6a 0f                	push   0xf
c001ed77:	e9 ba 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ed7c <isr16>:
c001ed7c:	fa                   	cli    
c001ed7d:	6a 00                	push   0x0
c001ed7f:	6a 10                	push   0x10
c001ed81:	e9 b0 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ed86 <isr17>:
c001ed86:	fa                   	cli    
c001ed87:	6a 00                	push   0x0
c001ed89:	6a 11                	push   0x11
c001ed8b:	e9 a6 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ed90 <isr18>:
c001ed90:	fa                   	cli    
c001ed91:	6a 00                	push   0x0
c001ed93:	6a 12                	push   0x12
c001ed95:	e9 9c 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ed9a <irq3>:
c001ed9a:	fa                   	cli    
c001ed9b:	6a 00                	push   0x0
c001ed9d:	6a 23                	push   0x23
c001ed9f:	e9 92 00 00 00       	jmp    c001ee36 <int_common_stub>

c001eda4 <irq4>:
c001eda4:	fa                   	cli    
c001eda5:	6a 00                	push   0x0
c001eda7:	6a 24                	push   0x24
c001eda9:	e9 88 00 00 00       	jmp    c001ee36 <int_common_stub>

c001edae <irq5>:
c001edae:	fa                   	cli    
c001edaf:	6a 00                	push   0x0
c001edb1:	6a 25                	push   0x25
c001edb3:	e9 7e 00 00 00       	jmp    c001ee36 <int_common_stub>

c001edb8 <irq6>:
c001edb8:	fa                   	cli    
c001edb9:	6a 00                	push   0x0
c001edbb:	6a 26                	push   0x26
c001edbd:	e9 74 00 00 00       	jmp    c001ee36 <int_common_stub>

c001edc2 <irq7>:
c001edc2:	fa                   	cli    
c001edc3:	6a 00                	push   0x0
c001edc5:	6a 27                	push   0x27
c001edc7:	e9 6a 00 00 00       	jmp    c001ee36 <int_common_stub>

c001edcc <irq8>:
c001edcc:	fa                   	cli    
c001edcd:	6a 00                	push   0x0
c001edcf:	6a 28                	push   0x28
c001edd1:	e9 60 00 00 00       	jmp    c001ee36 <int_common_stub>

c001edd6 <irq9>:
c001edd6:	fa                   	cli    
c001edd7:	6a 00                	push   0x0
c001edd9:	6a 29                	push   0x29
c001eddb:	e9 56 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ede0 <irq10>:
c001ede0:	fa                   	cli    
c001ede1:	6a 00                	push   0x0
c001ede3:	6a 2a                	push   0x2a
c001ede5:	e9 4c 00 00 00       	jmp    c001ee36 <int_common_stub>

c001edea <irq11>:
c001edea:	fa                   	cli    
c001edeb:	6a 00                	push   0x0
c001eded:	6a 2b                	push   0x2b
c001edef:	e9 42 00 00 00       	jmp    c001ee36 <int_common_stub>

c001edf4 <irq12>:
c001edf4:	fa                   	cli    
c001edf5:	6a 00                	push   0x0
c001edf7:	6a 2c                	push   0x2c
c001edf9:	e9 38 00 00 00       	jmp    c001ee36 <int_common_stub>

c001edfe <irq13>:
c001edfe:	fa                   	cli    
c001edff:	6a 00                	push   0x0
c001ee01:	6a 2d                	push   0x2d
c001ee03:	e9 2e 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ee08 <irq14>:
c001ee08:	fa                   	cli    
c001ee09:	6a 00                	push   0x0
c001ee0b:	6a 2e                	push   0x2e
c001ee0d:	e9 24 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ee12 <irq15>:
c001ee12:	fa                   	cli    
c001ee13:	6a 00                	push   0x0
c001ee15:	6a 2f                	push   0x2f
c001ee17:	e9 1a 00 00 00       	jmp    c001ee36 <int_common_stub>

c001ee1c <irq1>:
c001ee1c:	fa                   	cli    
c001ee1d:	6a 00                	push   0x0
c001ee1f:	6a 21                	push   0x21
c001ee21:	eb 13                	jmp    c001ee36 <int_common_stub>

c001ee23 <irq2>:
c001ee23:	fa                   	cli    
c001ee24:	6a 00                	push   0x0
c001ee26:	6a 22                	push   0x22
c001ee28:	eb 0c                	jmp    c001ee36 <int_common_stub>

c001ee2a <isr96>:
c001ee2a:	6a 00                	push   0x0
c001ee2c:	6a 60                	push   0x60
c001ee2e:	fb                   	sti    
c001ee2f:	eb 37                	jmp    c001ee68 <syscall_common_stub>

c001ee31 <irq0>:
c001ee31:	fa                   	cli    
c001ee32:	6a 00                	push   0x0
c001ee34:	6a 20                	push   0x20

c001ee36 <int_common_stub>:
c001ee36:	60                   	pusha  
c001ee37:	1e                   	push   ds
c001ee38:	06                   	push   es
c001ee39:	0f a0                	push   fs
c001ee3b:	0f a8                	push   gs
c001ee3d:	66 b8 10 00          	mov    ax,0x10
c001ee41:	66 8e d8             	mov    ds,ax
c001ee44:	66 8e c0             	mov    es,ax
c001ee47:	66 8e e0             	mov    fs,ax
c001ee4a:	66 8e e8             	mov    gs,ax
c001ee4d:	54                   	push   esp
c001ee4e:	fc                   	cld    
c001ee4f:	e8 5c dd fe ff       	call   c000cbb0 <int_handler>
c001ee54:	81 c4 04 00 00 00    	add    esp,0x4
c001ee5a:	0f a9                	pop    gs
c001ee5c:	0f a1                	pop    fs
c001ee5e:	07                   	pop    es
c001ee5f:	1f                   	pop    ds
c001ee60:	61                   	popa   
c001ee61:	81 c4 08 00 00 00    	add    esp,0x8
c001ee67:	cf                   	iret   

c001ee68 <syscall_common_stub>:
c001ee68:	60                   	pusha  
c001ee69:	1e                   	push   ds
c001ee6a:	06                   	push   es
c001ee6b:	0f a0                	push   fs
c001ee6d:	0f a8                	push   gs
c001ee6f:	66 b8 10 00          	mov    ax,0x10
c001ee73:	66 8e d8             	mov    ds,ax
c001ee76:	66 8e c0             	mov    es,ax
c001ee79:	66 8e e0             	mov    fs,ax
c001ee7c:	66 8e e8             	mov    gs,ax
c001ee7f:	54                   	push   esp
c001ee80:	fc                   	cld    
c001ee81:	e8 2a dd fe ff       	call   c000cbb0 <int_handler>
c001ee86:	81 c4 04 00 00 00    	add    esp,0x4
c001ee8c:	0f a9                	pop    gs
c001ee8e:	0f a1                	pop    fs
c001ee90:	07                   	pop    es
c001ee91:	1f                   	pop    ds
c001ee92:	e8 14 2a ff ff       	call   c00118ab <KiCheckSignalZ>
c001ee97:	3d 00 00 00 00       	cmp    eax,0x0
c001ee9c:	0f 84 c0 00 00 00    	je     c001ef62 <skipSignals>
c001eea2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001eea7:	61                   	popa   
c001eea8:	53                   	push   ebx
c001eea9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001eeaf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001eeb2:	5b                   	pop    ebx
c001eeb3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001eeb8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001eebb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001eebe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eec1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001eec4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001eec7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001eeca:	81 c4 08 00 00 00    	add    esp,0x8
c001eed0:	5e                   	pop    esi
c001eed1:	5b                   	pop    ebx
c001eed2:	59                   	pop    ecx
c001eed3:	5a                   	pop    edx
c001eed4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001eed7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001eeda:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001eedd:	52                   	push   edx
c001eede:	51                   	push   ecx
c001eedf:	53                   	push   ebx
c001eee0:	56                   	push   esi
c001eee1:	81 ec 08 00 00 00    	sub    esp,0x8
c001eee7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001eeea:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001eeed:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001eef0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eef3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001eef6:	60                   	pusha  
c001eef7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001eefd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ef00:	89 e3                	mov    ebx,esp
c001ef02:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ef05:	52                   	push   edx
c001ef06:	68 26 ef 01 c0       	push   0xc001ef26
c001ef0b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ef0e:	89 dc                	mov    esp,ebx
c001ef10:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ef13:	68 23 00 00 00       	push   0x23
c001ef18:	51                   	push   ecx
c001ef19:	68 02 02 00 00       	push   0x202
c001ef1e:	68 1b 00 00 00       	push   0x1b
c001ef23:	ff 36                	push   DWORD PTR [esi]
c001ef25:	cf                   	iret   

c001ef26 <finishSignal>:
c001ef26:	cd 0f                	int    0xf

c001ef28 <finishSignal2>:
c001ef28:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ef2e:	e8 f5 29 ff ff       	call   c0011928 <KiFinishSignalZ>
c001ef33:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ef39:	68 23 00 00 00       	push   0x23
c001ef3e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ef41:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ef44:	68 1b 00 00 00       	push   0x1b
c001ef49:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ef4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ef4f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ef52:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ef55:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ef58:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ef5b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ef5e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ef61:	cf                   	iret   

c001ef62 <skipSignals>:
c001ef62:	61                   	popa   
c001ef63:	81 c4 08 00 00 00    	add    esp,0x8
c001ef69:	cf                   	iret   
c001ef6a:	90                   	nop
c001ef6b:	90                   	nop

c001ef6c <irq16>:
c001ef6c:	fa                   	cli    
c001ef6d:	6a 00                	push   0x0
c001ef6f:	6a 30                	push   0x30
c001ef71:	e9 c0 fe ff ff       	jmp    c001ee36 <int_common_stub>

c001ef76 <irq17>:
c001ef76:	fa                   	cli    
c001ef77:	6a 00                	push   0x0
c001ef79:	6a 31                	push   0x31
c001ef7b:	e9 b6 fe ff ff       	jmp    c001ee36 <int_common_stub>

c001ef80 <irq18>:
c001ef80:	fa                   	cli    
c001ef81:	6a 00                	push   0x0
c001ef83:	6a 32                	push   0x32
c001ef85:	e9 ac fe ff ff       	jmp    c001ee36 <int_common_stub>

c001ef8a <irq19>:
c001ef8a:	fa                   	cli    
c001ef8b:	6a 00                	push   0x0
c001ef8d:	6a 33                	push   0x33
c001ef8f:	e9 a2 fe ff ff       	jmp    c001ee36 <int_common_stub>

c001ef94 <irq20>:
c001ef94:	fa                   	cli    
c001ef95:	6a 00                	push   0x0
c001ef97:	6a 34                	push   0x34
c001ef99:	e9 98 fe ff ff       	jmp    c001ee36 <int_common_stub>

c001ef9e <irq21>:
c001ef9e:	fa                   	cli    
c001ef9f:	6a 00                	push   0x0
c001efa1:	6a 35                	push   0x35
c001efa3:	e9 8e fe ff ff       	jmp    c001ee36 <int_common_stub>

c001efa8 <irq22>:
c001efa8:	fa                   	cli    
c001efa9:	6a 00                	push   0x0
c001efab:	6a 36                	push   0x36
c001efad:	e9 84 fe ff ff       	jmp    c001ee36 <int_common_stub>

c001efb2 <irq23>:
c001efb2:	fa                   	cli    
c001efb3:	6a 00                	push   0x0
c001efb5:	6a 37                	push   0x37
c001efb7:	e9 7a fe ff ff       	jmp    c001ee36 <int_common_stub>
c001efbc:	66 90                	xchg   ax,ax
c001efbe:	66 90                	xchg   ax,ax

c001efc0 <i386GetRDRAND>:
c001efc0:	b9 64 00 00 00       	mov    ecx,0x64

c001efc5 <retry>:
c001efc5:	0f c7 f0             	rdrand eax
c001efc8:	72 05                	jb     c001efcf <retry.done>
c001efca:	e2 f9                	loop   c001efc5 <retry>

c001efcc <retry.fail>:
c001efcc:	31 c0                	xor    eax,eax
c001efce:	c3                   	ret    

c001efcf <retry.done>:
c001efcf:	c3                   	ret    

c001efd0 <absolutelyNoChanceInHell>:
c001efd0:	b8 01 00 00 00       	mov    eax,0x1
c001efd5:	0f a2                	cpuid  
c001efd7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001efdd:	74 06                	je     c001efe5 <sseDetect.noSSE>
c001efdf:	b8 01 00 00 00       	mov    eax,0x1
c001efe4:	c3                   	ret    

c001efe5 <sseDetect.noSSE>:
c001efe5:	31 c0                	xor    eax,eax
c001efe7:	c3                   	ret    

c001efe8 <sseSave>:
c001efe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efec:	0f ae 00             	fxsave [eax]
c001efef:	c3                   	ret    

c001eff0 <sseLoad>:
c001eff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eff4:	0f ae 08             	fxrstor [eax]
c001eff7:	c3                   	ret    

c001eff8 <sseInit>:
c001eff8:	e8 42 00 00 00       	call   c001f03f <x87Init>
c001effd:	0f 20 e0             	mov    eax,cr4
c001f000:	66 0d 00 06          	or     ax,0x600
c001f004:	0f 22 e0             	mov    cr4,eax
c001f007:	c3                   	ret    

c001f008 <sseClose>:
c001f008:	c3                   	ret    
c001f009:	66 90                	xchg   ax,ax
c001f00b:	66 90                	xchg   ax,ax
c001f00d:	66 90                	xchg   ax,ax
c001f00f:	90                   	nop

c001f010 <value_37F>:
c001f010:	7f 03                	jg     c001f015 <value_37A+0x1>

c001f012 <value_37E>:
c001f012:	7e 03                	jle    c001f017 <x87Detect+0x1>

c001f014 <value_37A>:
c001f014:	7a 03                	jp     c001f019 <x87Detect+0x3>

c001f016 <x87Detect>:
c001f016:	b8 01 00 00 00       	mov    eax,0x1
c001f01b:	0f a2                	cpuid  
c001f01d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f023:	74 06                	je     c001f02b <x87Detect.nox87>
c001f025:	b8 01 00 00 00       	mov    eax,0x1
c001f02a:	c3                   	ret    

c001f02b <x87Detect.nox87>:
c001f02b:	b8 00 00 00 00       	mov    eax,0x0
c001f030:	c3                   	ret    

c001f031 <x87Save>:
c001f031:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f035:	dd 30                	fnsave [eax]
c001f037:	c3                   	ret    

c001f038 <x87Load>:
c001f038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f03c:	dd 20                	frstor [eax]
c001f03e:	c3                   	ret    

c001f03f <x87Init>:
c001f03f:	0f 20 c0             	mov    eax,cr0
c001f042:	66 25 fb ff          	and    ax,0xfffb
c001f046:	66 0d 22 00          	or     ax,0x22
c001f04a:	0f 22 c0             	mov    cr0,eax
c001f04d:	db e3                	fninit 
c001f04f:	0f 06                	clts   
c001f051:	d9 2d 14 f0 01 c0    	fldcw  WORD PTR ds:0xc001f014
c001f057:	c3                   	ret    

c001f058 <x87Close>:
c001f058:	c3                   	ret    
c001f059:	66 90                	xchg   ax,ax
c001f05b:	90                   	nop

c001f05c <__do_global_ctors_aux>:
c001f05c:	a1 10 00 02 c0       	mov    eax,ds:0xc0020010
c001f061:	83 f8 ff             	cmp    eax,0xffffffff
c001f064:	74 1a                	je     c001f080 <__do_global_ctors_aux+0x24>
c001f066:	55                   	push   ebp
c001f067:	89 e5                	mov    ebp,esp
c001f069:	53                   	push   ebx
c001f06a:	52                   	push   edx
c001f06b:	bb 10 00 02 c0       	mov    ebx,0xc0020010
c001f070:	ff d0                	call   eax
c001f072:	83 eb 04             	sub    ebx,0x4
c001f075:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f077:	83 f8 ff             	cmp    eax,0xffffffff
c001f07a:	75 f4                	jne    c001f070 <__do_global_ctors_aux+0x14>
c001f07c:	58                   	pop    eax
c001f07d:	5b                   	pop    ebx
c001f07e:	5d                   	pop    ebp
c001f07f:	c3                   	ret    
c001f080:	c3                   	ret    
c001f081:	66 90                	xchg   ax,ax
c001f083:	90                   	nop

c001f084 <__divdi3>:
c001f084:	55                   	push   ebp
c001f085:	57                   	push   edi
c001f086:	56                   	push   esi
c001f087:	53                   	push   ebx
c001f088:	83 ec 1c             	sub    esp,0x1c
c001f08b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f08f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f093:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f096:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f09a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f09e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f0a2:	85 db                	test   ebx,ebx
c001f0a4:	0f 88 8e 00 00 00    	js     c001f138 <__divdi3+0xb4>
c001f0aa:	89 dd                	mov    ebp,ebx
c001f0ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f0b4:	89 d3                	mov    ebx,edx
c001f0b6:	85 d2                	test   edx,edx
c001f0b8:	79 0d                	jns    c001f0c7 <__divdi3+0x43>
c001f0ba:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f0be:	f7 d8                	neg    eax
c001f0c0:	83 d2 00             	adc    edx,0x0
c001f0c3:	f7 da                	neg    edx
c001f0c5:	89 d3                	mov    ebx,edx
c001f0c7:	89 c7                	mov    edi,eax
c001f0c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f0cc:	85 db                	test   ebx,ebx
c001f0ce:	75 48                	jne    c001f118 <__divdi3+0x94>
c001f0d0:	39 ef                	cmp    edi,ebp
c001f0d2:	76 24                	jbe    c001f0f8 <__divdi3+0x74>
c001f0d4:	89 ea                	mov    edx,ebp
c001f0d6:	f7 f7                	div    edi
c001f0d8:	89 c1                	mov    ecx,eax
c001f0da:	31 f6                	xor    esi,esi
c001f0dc:	89 c8                	mov    eax,ecx
c001f0de:	89 f2                	mov    edx,esi
c001f0e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f0e4:	85 c9                	test   ecx,ecx
c001f0e6:	74 07                	je     c001f0ef <__divdi3+0x6b>
c001f0e8:	f7 d8                	neg    eax
c001f0ea:	83 d2 00             	adc    edx,0x0
c001f0ed:	f7 da                	neg    edx
c001f0ef:	83 c4 1c             	add    esp,0x1c
c001f0f2:	5b                   	pop    ebx
c001f0f3:	5e                   	pop    esi
c001f0f4:	5f                   	pop    edi
c001f0f5:	5d                   	pop    ebp
c001f0f6:	c3                   	ret    
c001f0f7:	90                   	nop
c001f0f8:	85 ff                	test   edi,edi
c001f0fa:	75 0b                	jne    c001f107 <__divdi3+0x83>
c001f0fc:	b8 01 00 00 00       	mov    eax,0x1
c001f101:	31 d2                	xor    edx,edx
c001f103:	f7 f3                	div    ebx
c001f105:	89 c7                	mov    edi,eax
c001f107:	31 d2                	xor    edx,edx
c001f109:	89 e8                	mov    eax,ebp
c001f10b:	f7 f7                	div    edi
c001f10d:	89 c6                	mov    esi,eax
c001f10f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f112:	f7 f7                	div    edi
c001f114:	89 c1                	mov    ecx,eax
c001f116:	eb c4                	jmp    c001f0dc <__divdi3+0x58>
c001f118:	39 eb                	cmp    ebx,ebp
c001f11a:	77 3c                	ja     c001f158 <__divdi3+0xd4>
c001f11c:	0f bd f3             	bsr    esi,ebx
c001f11f:	83 f6 1f             	xor    esi,0x1f
c001f122:	75 40                	jne    c001f164 <__divdi3+0xe0>
c001f124:	39 eb                	cmp    ebx,ebp
c001f126:	72 09                	jb     c001f131 <__divdi3+0xad>
c001f128:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f12b:	0f 87 97 00 00 00    	ja     c001f1c8 <__divdi3+0x144>
c001f131:	b9 01 00 00 00       	mov    ecx,0x1
c001f136:	eb a4                	jmp    c001f0dc <__divdi3+0x58>
c001f138:	f7 d9                	neg    ecx
c001f13a:	83 d3 00             	adc    ebx,0x0
c001f13d:	f7 db                	neg    ebx
c001f13f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f142:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f146:	89 dd                	mov    ebp,ebx
c001f148:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f150:	e9 5f ff ff ff       	jmp    c001f0b4 <__divdi3+0x30>
c001f155:	8d 76 00             	lea    esi,[esi+0x0]
c001f158:	31 f6                	xor    esi,esi
c001f15a:	31 c9                	xor    ecx,ecx
c001f15c:	e9 7b ff ff ff       	jmp    c001f0dc <__divdi3+0x58>
c001f161:	8d 76 00             	lea    esi,[esi+0x0]
c001f164:	b8 20 00 00 00       	mov    eax,0x20
c001f169:	29 f0                	sub    eax,esi
c001f16b:	89 f1                	mov    ecx,esi
c001f16d:	d3 e3                	shl    ebx,cl
c001f16f:	89 fa                	mov    edx,edi
c001f171:	88 c1                	mov    cl,al
c001f173:	d3 ea                	shr    edx,cl
c001f175:	09 da                	or     edx,ebx
c001f177:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f17b:	89 f1                	mov    ecx,esi
c001f17d:	d3 e7                	shl    edi,cl
c001f17f:	89 eb                	mov    ebx,ebp
c001f181:	88 c1                	mov    cl,al
c001f183:	d3 eb                	shr    ebx,cl
c001f185:	89 f1                	mov    ecx,esi
c001f187:	d3 e5                	shl    ebp,cl
c001f189:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f18c:	88 c1                	mov    cl,al
c001f18e:	d3 ea                	shr    edx,cl
c001f190:	09 d5                	or     ebp,edx
c001f192:	89 e8                	mov    eax,ebp
c001f194:	89 da                	mov    edx,ebx
c001f196:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f19a:	89 d3                	mov    ebx,edx
c001f19c:	89 c5                	mov    ebp,eax
c001f19e:	f7 e7                	mul    edi
c001f1a0:	39 d3                	cmp    ebx,edx
c001f1a2:	72 18                	jb     c001f1bc <__divdi3+0x138>
c001f1a4:	74 0a                	je     c001f1b0 <__divdi3+0x12c>
c001f1a6:	89 e9                	mov    ecx,ebp
c001f1a8:	31 f6                	xor    esi,esi
c001f1aa:	e9 2d ff ff ff       	jmp    c001f0dc <__divdi3+0x58>
c001f1af:	90                   	nop
c001f1b0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f1b3:	89 f1                	mov    ecx,esi
c001f1b5:	d3 e7                	shl    edi,cl
c001f1b7:	39 c7                	cmp    edi,eax
c001f1b9:	73 eb                	jae    c001f1a6 <__divdi3+0x122>
c001f1bb:	90                   	nop
c001f1bc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f1bf:	31 f6                	xor    esi,esi
c001f1c1:	e9 16 ff ff ff       	jmp    c001f0dc <__divdi3+0x58>
c001f1c6:	66 90                	xchg   ax,ax
c001f1c8:	31 c9                	xor    ecx,ecx
c001f1ca:	e9 0d ff ff ff       	jmp    c001f0dc <__divdi3+0x58>
c001f1cf:	90                   	nop

c001f1d0 <__moddi3>:
c001f1d0:	55                   	push   ebp
c001f1d1:	57                   	push   edi
c001f1d2:	56                   	push   esi
c001f1d3:	53                   	push   ebx
c001f1d4:	83 ec 2c             	sub    esp,0x2c
c001f1d7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f1db:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f1df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f1e3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f1e7:	85 db                	test   ebx,ebx
c001f1e9:	0f 88 85 00 00 00    	js     c001f274 <__moddi3+0xa4>
c001f1ef:	89 de                	mov    esi,ebx
c001f1f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f1f9:	89 d7                	mov    edi,edx
c001f1fb:	85 d2                	test   edx,edx
c001f1fd:	79 09                	jns    c001f208 <__moddi3+0x38>
c001f1ff:	f7 d8                	neg    eax
c001f201:	83 d2 00             	adc    edx,0x0
c001f204:	f7 da                	neg    edx
c001f206:	89 d7                	mov    edi,edx
c001f208:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f20c:	89 cd                	mov    ebp,ecx
c001f20e:	85 ff                	test   edi,edi
c001f210:	75 52                	jne    c001f264 <__moddi3+0x94>
c001f212:	89 c3                	mov    ebx,eax
c001f214:	39 f0                	cmp    eax,esi
c001f216:	76 24                	jbe    c001f23c <__moddi3+0x6c>
c001f218:	89 c8                	mov    eax,ecx
c001f21a:	89 f2                	mov    edx,esi
c001f21c:	f7 f3                	div    ebx
c001f21e:	89 d6                	mov    esi,edx
c001f220:	89 f0                	mov    eax,esi
c001f222:	31 d2                	xor    edx,edx
c001f224:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f228:	85 c9                	test   ecx,ecx
c001f22a:	74 07                	je     c001f233 <__moddi3+0x63>
c001f22c:	f7 d8                	neg    eax
c001f22e:	83 d2 00             	adc    edx,0x0
c001f231:	f7 da                	neg    edx
c001f233:	83 c4 2c             	add    esp,0x2c
c001f236:	5b                   	pop    ebx
c001f237:	5e                   	pop    esi
c001f238:	5f                   	pop    edi
c001f239:	5d                   	pop    ebp
c001f23a:	c3                   	ret    
c001f23b:	90                   	nop
c001f23c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f240:	85 db                	test   ebx,ebx
c001f242:	75 0d                	jne    c001f251 <__moddi3+0x81>
c001f244:	b8 01 00 00 00       	mov    eax,0x1
c001f249:	31 d2                	xor    edx,edx
c001f24b:	f7 f7                	div    edi
c001f24d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f251:	89 f0                	mov    eax,esi
c001f253:	31 d2                	xor    edx,edx
c001f255:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f259:	f7 f7                	div    edi
c001f25b:	89 e8                	mov    eax,ebp
c001f25d:	f7 f7                	div    edi
c001f25f:	89 d6                	mov    esi,edx
c001f261:	eb bd                	jmp    c001f220 <__moddi3+0x50>
c001f263:	90                   	nop
c001f264:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f268:	39 f7                	cmp    edi,esi
c001f26a:	76 20                	jbe    c001f28c <__moddi3+0xbc>
c001f26c:	89 c8                	mov    eax,ecx
c001f26e:	89 f2                	mov    edx,esi
c001f270:	eb b2                	jmp    c001f224 <__moddi3+0x54>
c001f272:	66 90                	xchg   ax,ax
c001f274:	f7 d9                	neg    ecx
c001f276:	83 d3 00             	adc    ebx,0x0
c001f279:	f7 db                	neg    ebx
c001f27b:	89 de                	mov    esi,ebx
c001f27d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f285:	e9 6f ff ff ff       	jmp    c001f1f9 <__moddi3+0x29>
c001f28a:	66 90                	xchg   ax,ax
c001f28c:	0f bd c7             	bsr    eax,edi
c001f28f:	83 f0 1f             	xor    eax,0x1f
c001f292:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f296:	75 24                	jne    c001f2bc <__moddi3+0xec>
c001f298:	39 f7                	cmp    edi,esi
c001f29a:	72 06                	jb     c001f2a2 <__moddi3+0xd2>
c001f29c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f2a0:	77 0c                	ja     c001f2ae <__moddi3+0xde>
c001f2a2:	89 e9                	mov    ecx,ebp
c001f2a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f2a8:	19 fe                	sbb    esi,edi
c001f2aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f2ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f2b2:	89 f2                	mov    edx,esi
c001f2b4:	e9 6b ff ff ff       	jmp    c001f224 <__moddi3+0x54>
c001f2b9:	8d 76 00             	lea    esi,[esi+0x0]
c001f2bc:	b8 20 00 00 00       	mov    eax,0x20
c001f2c1:	89 c2                	mov    edx,eax
c001f2c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f2c7:	29 da                	sub    edx,ebx
c001f2c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f2cd:	88 d9                	mov    cl,bl
c001f2cf:	d3 e7                	shl    edi,cl
c001f2d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2d5:	88 d1                	mov    cl,dl
c001f2d7:	d3 e8                	shr    eax,cl
c001f2d9:	09 c7                	or     edi,eax
c001f2db:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f2df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f2e3:	89 d8                	mov    eax,ebx
c001f2e5:	88 d9                	mov    cl,bl
c001f2e7:	d3 e7                	shl    edi,cl
c001f2e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f2ed:	89 f3                	mov    ebx,esi
c001f2ef:	88 d1                	mov    cl,dl
c001f2f1:	d3 eb                	shr    ebx,cl
c001f2f3:	89 c7                	mov    edi,eax
c001f2f5:	88 c1                	mov    cl,al
c001f2f7:	d3 e6                	shl    esi,cl
c001f2f9:	89 e8                	mov    eax,ebp
c001f2fb:	88 d1                	mov    cl,dl
c001f2fd:	d3 e8                	shr    eax,cl
c001f2ff:	09 f0                	or     eax,esi
c001f301:	89 f9                	mov    ecx,edi
c001f303:	d3 e5                	shl    ebp,cl
c001f305:	89 da                	mov    edx,ebx
c001f307:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f30b:	89 d3                	mov    ebx,edx
c001f30d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f311:	89 c6                	mov    esi,eax
c001f313:	89 d1                	mov    ecx,edx
c001f315:	39 d3                	cmp    ebx,edx
c001f317:	72 27                	jb     c001f340 <__moddi3+0x170>
c001f319:	74 21                	je     c001f33c <__moddi3+0x16c>
c001f31b:	29 f5                	sub    ebp,esi
c001f31d:	19 cb                	sbb    ebx,ecx
c001f31f:	89 de                	mov    esi,ebx
c001f321:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f325:	d3 e6                	shl    esi,cl
c001f327:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f32b:	89 f9                	mov    ecx,edi
c001f32d:	d3 ed                	shr    ebp,cl
c001f32f:	09 ee                	or     esi,ebp
c001f331:	89 f0                	mov    eax,esi
c001f333:	d3 eb                	shr    ebx,cl
c001f335:	89 da                	mov    edx,ebx
c001f337:	e9 e8 fe ff ff       	jmp    c001f224 <__moddi3+0x54>
c001f33c:	39 c5                	cmp    ebp,eax
c001f33e:	73 db                	jae    c001f31b <__moddi3+0x14b>
c001f340:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f344:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f348:	89 d1                	mov    ecx,edx
c001f34a:	89 c6                	mov    esi,eax
c001f34c:	eb cd                	jmp    c001f31b <__moddi3+0x14b>
c001f34e:	66 90                	xchg   ax,ax

c001f350 <__udivdi3>:
c001f350:	55                   	push   ebp
c001f351:	57                   	push   edi
c001f352:	56                   	push   esi
c001f353:	53                   	push   ebx
c001f354:	83 ec 1c             	sub    esp,0x1c
c001f357:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f35b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f35f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f363:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f367:	85 d2                	test   edx,edx
c001f369:	75 41                	jne    c001f3ac <__udivdi3+0x5c>
c001f36b:	39 f7                	cmp    edi,esi
c001f36d:	76 15                	jbe    c001f384 <__udivdi3+0x34>
c001f36f:	89 e8                	mov    eax,ebp
c001f371:	89 f2                	mov    edx,esi
c001f373:	f7 f7                	div    edi
c001f375:	31 db                	xor    ebx,ebx
c001f377:	89 da                	mov    edx,ebx
c001f379:	83 c4 1c             	add    esp,0x1c
c001f37c:	5b                   	pop    ebx
c001f37d:	5e                   	pop    esi
c001f37e:	5f                   	pop    edi
c001f37f:	5d                   	pop    ebp
c001f380:	c3                   	ret    
c001f381:	8d 76 00             	lea    esi,[esi+0x0]
c001f384:	89 f9                	mov    ecx,edi
c001f386:	85 ff                	test   edi,edi
c001f388:	75 0b                	jne    c001f395 <__udivdi3+0x45>
c001f38a:	b8 01 00 00 00       	mov    eax,0x1
c001f38f:	31 d2                	xor    edx,edx
c001f391:	f7 f7                	div    edi
c001f393:	89 c1                	mov    ecx,eax
c001f395:	31 d2                	xor    edx,edx
c001f397:	89 f0                	mov    eax,esi
c001f399:	f7 f1                	div    ecx
c001f39b:	89 c3                	mov    ebx,eax
c001f39d:	89 e8                	mov    eax,ebp
c001f39f:	f7 f1                	div    ecx
c001f3a1:	89 da                	mov    edx,ebx
c001f3a3:	83 c4 1c             	add    esp,0x1c
c001f3a6:	5b                   	pop    ebx
c001f3a7:	5e                   	pop    esi
c001f3a8:	5f                   	pop    edi
c001f3a9:	5d                   	pop    ebp
c001f3aa:	c3                   	ret    
c001f3ab:	90                   	nop
c001f3ac:	39 f2                	cmp    edx,esi
c001f3ae:	77 1c                	ja     c001f3cc <__udivdi3+0x7c>
c001f3b0:	0f bd da             	bsr    ebx,edx
c001f3b3:	83 f3 1f             	xor    ebx,0x1f
c001f3b6:	75 24                	jne    c001f3dc <__udivdi3+0x8c>
c001f3b8:	39 f2                	cmp    edx,esi
c001f3ba:	72 08                	jb     c001f3c4 <__udivdi3+0x74>
c001f3bc:	39 ef                	cmp    edi,ebp
c001f3be:	0f 87 84 00 00 00    	ja     c001f448 <__udivdi3+0xf8>
c001f3c4:	b8 01 00 00 00       	mov    eax,0x1
c001f3c9:	eb ac                	jmp    c001f377 <__udivdi3+0x27>
c001f3cb:	90                   	nop
c001f3cc:	31 db                	xor    ebx,ebx
c001f3ce:	31 c0                	xor    eax,eax
c001f3d0:	89 da                	mov    edx,ebx
c001f3d2:	83 c4 1c             	add    esp,0x1c
c001f3d5:	5b                   	pop    ebx
c001f3d6:	5e                   	pop    esi
c001f3d7:	5f                   	pop    edi
c001f3d8:	5d                   	pop    ebp
c001f3d9:	c3                   	ret    
c001f3da:	66 90                	xchg   ax,ax
c001f3dc:	b8 20 00 00 00       	mov    eax,0x20
c001f3e1:	29 d8                	sub    eax,ebx
c001f3e3:	88 d9                	mov    cl,bl
c001f3e5:	d3 e2                	shl    edx,cl
c001f3e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f3eb:	89 fa                	mov    edx,edi
c001f3ed:	88 c1                	mov    cl,al
c001f3ef:	d3 ea                	shr    edx,cl
c001f3f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f3f5:	09 d1                	or     ecx,edx
c001f3f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f3fb:	88 d9                	mov    cl,bl
c001f3fd:	d3 e7                	shl    edi,cl
c001f3ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f403:	89 f7                	mov    edi,esi
c001f405:	88 c1                	mov    cl,al
c001f407:	d3 ef                	shr    edi,cl
c001f409:	88 d9                	mov    cl,bl
c001f40b:	d3 e6                	shl    esi,cl
c001f40d:	89 ea                	mov    edx,ebp
c001f40f:	88 c1                	mov    cl,al
c001f411:	d3 ea                	shr    edx,cl
c001f413:	09 d6                	or     esi,edx
c001f415:	89 f0                	mov    eax,esi
c001f417:	89 fa                	mov    edx,edi
c001f419:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f41d:	89 d7                	mov    edi,edx
c001f41f:	89 c6                	mov    esi,eax
c001f421:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f425:	39 d7                	cmp    edi,edx
c001f427:	72 13                	jb     c001f43c <__udivdi3+0xec>
c001f429:	74 09                	je     c001f434 <__udivdi3+0xe4>
c001f42b:	89 f0                	mov    eax,esi
c001f42d:	31 db                	xor    ebx,ebx
c001f42f:	e9 43 ff ff ff       	jmp    c001f377 <__udivdi3+0x27>
c001f434:	88 d9                	mov    cl,bl
c001f436:	d3 e5                	shl    ebp,cl
c001f438:	39 c5                	cmp    ebp,eax
c001f43a:	73 ef                	jae    c001f42b <__udivdi3+0xdb>
c001f43c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f43f:	31 db                	xor    ebx,ebx
c001f441:	e9 31 ff ff ff       	jmp    c001f377 <__udivdi3+0x27>
c001f446:	66 90                	xchg   ax,ax
c001f448:	31 c0                	xor    eax,eax
c001f44a:	e9 28 ff ff ff       	jmp    c001f377 <__udivdi3+0x27>
c001f44f:	90                   	nop

c001f450 <__umoddi3>:
c001f450:	55                   	push   ebp
c001f451:	57                   	push   edi
c001f452:	56                   	push   esi
c001f453:	53                   	push   ebx
c001f454:	83 ec 1c             	sub    esp,0x1c
c001f457:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f45b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f45f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f463:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f467:	89 da                	mov    edx,ebx
c001f469:	85 c0                	test   eax,eax
c001f46b:	75 37                	jne    c001f4a4 <__umoddi3+0x54>
c001f46d:	39 df                	cmp    edi,ebx
c001f46f:	76 13                	jbe    c001f484 <__umoddi3+0x34>
c001f471:	89 f0                	mov    eax,esi
c001f473:	f7 f7                	div    edi
c001f475:	89 d0                	mov    eax,edx
c001f477:	31 d2                	xor    edx,edx
c001f479:	83 c4 1c             	add    esp,0x1c
c001f47c:	5b                   	pop    ebx
c001f47d:	5e                   	pop    esi
c001f47e:	5f                   	pop    edi
c001f47f:	5d                   	pop    ebp
c001f480:	c3                   	ret    
c001f481:	8d 76 00             	lea    esi,[esi+0x0]
c001f484:	89 fd                	mov    ebp,edi
c001f486:	85 ff                	test   edi,edi
c001f488:	75 0b                	jne    c001f495 <__umoddi3+0x45>
c001f48a:	b8 01 00 00 00       	mov    eax,0x1
c001f48f:	31 d2                	xor    edx,edx
c001f491:	f7 f7                	div    edi
c001f493:	89 c5                	mov    ebp,eax
c001f495:	89 d8                	mov    eax,ebx
c001f497:	31 d2                	xor    edx,edx
c001f499:	f7 f5                	div    ebp
c001f49b:	89 f0                	mov    eax,esi
c001f49d:	f7 f5                	div    ebp
c001f49f:	89 d0                	mov    eax,edx
c001f4a1:	eb d4                	jmp    c001f477 <__umoddi3+0x27>
c001f4a3:	90                   	nop
c001f4a4:	89 f1                	mov    ecx,esi
c001f4a6:	39 d8                	cmp    eax,ebx
c001f4a8:	76 0a                	jbe    c001f4b4 <__umoddi3+0x64>
c001f4aa:	89 f0                	mov    eax,esi
c001f4ac:	83 c4 1c             	add    esp,0x1c
c001f4af:	5b                   	pop    ebx
c001f4b0:	5e                   	pop    esi
c001f4b1:	5f                   	pop    edi
c001f4b2:	5d                   	pop    ebp
c001f4b3:	c3                   	ret    
c001f4b4:	0f bd e8             	bsr    ebp,eax
c001f4b7:	83 f5 1f             	xor    ebp,0x1f
c001f4ba:	75 1c                	jne    c001f4d8 <__umoddi3+0x88>
c001f4bc:	39 d8                	cmp    eax,ebx
c001f4be:	72 04                	jb     c001f4c4 <__umoddi3+0x74>
c001f4c0:	39 f7                	cmp    edi,esi
c001f4c2:	77 08                	ja     c001f4cc <__umoddi3+0x7c>
c001f4c4:	89 da                	mov    edx,ebx
c001f4c6:	29 fe                	sub    esi,edi
c001f4c8:	19 c2                	sbb    edx,eax
c001f4ca:	89 f1                	mov    ecx,esi
c001f4cc:	89 c8                	mov    eax,ecx
c001f4ce:	83 c4 1c             	add    esp,0x1c
c001f4d1:	5b                   	pop    ebx
c001f4d2:	5e                   	pop    esi
c001f4d3:	5f                   	pop    edi
c001f4d4:	5d                   	pop    ebp
c001f4d5:	c3                   	ret    
c001f4d6:	66 90                	xchg   ax,ax
c001f4d8:	ba 20 00 00 00       	mov    edx,0x20
c001f4dd:	29 ea                	sub    edx,ebp
c001f4df:	89 e9                	mov    ecx,ebp
c001f4e1:	d3 e0                	shl    eax,cl
c001f4e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f4e7:	89 f8                	mov    eax,edi
c001f4e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f4ed:	88 d1                	mov    cl,dl
c001f4ef:	d3 e8                	shr    eax,cl
c001f4f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f4f5:	09 c1                	or     ecx,eax
c001f4f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f4fb:	89 e9                	mov    ecx,ebp
c001f4fd:	d3 e7                	shl    edi,cl
c001f4ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f503:	89 d8                	mov    eax,ebx
c001f505:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f509:	88 d1                	mov    cl,dl
c001f50b:	d3 e8                	shr    eax,cl
c001f50d:	89 c7                	mov    edi,eax
c001f50f:	89 e9                	mov    ecx,ebp
c001f511:	d3 e3                	shl    ebx,cl
c001f513:	89 f0                	mov    eax,esi
c001f515:	88 d1                	mov    cl,dl
c001f517:	d3 e8                	shr    eax,cl
c001f519:	09 d8                	or     eax,ebx
c001f51b:	89 e9                	mov    ecx,ebp
c001f51d:	d3 e6                	shl    esi,cl
c001f51f:	89 f3                	mov    ebx,esi
c001f521:	89 fa                	mov    edx,edi
c001f523:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f527:	89 d1                	mov    ecx,edx
c001f529:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f52d:	89 c6                	mov    esi,eax
c001f52f:	89 d7                	mov    edi,edx
c001f531:	39 d1                	cmp    ecx,edx
c001f533:	72 27                	jb     c001f55c <__umoddi3+0x10c>
c001f535:	74 21                	je     c001f558 <__umoddi3+0x108>
c001f537:	89 ca                	mov    edx,ecx
c001f539:	29 f3                	sub    ebx,esi
c001f53b:	19 fa                	sbb    edx,edi
c001f53d:	89 d0                	mov    eax,edx
c001f53f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f543:	d3 e0                	shl    eax,cl
c001f545:	89 e9                	mov    ecx,ebp
c001f547:	d3 eb                	shr    ebx,cl
c001f549:	09 d8                	or     eax,ebx
c001f54b:	d3 ea                	shr    edx,cl
c001f54d:	83 c4 1c             	add    esp,0x1c
c001f550:	5b                   	pop    ebx
c001f551:	5e                   	pop    esi
c001f552:	5f                   	pop    edi
c001f553:	5d                   	pop    ebp
c001f554:	c3                   	ret    
c001f555:	8d 76 00             	lea    esi,[esi+0x0]
c001f558:	39 c3                	cmp    ebx,eax
c001f55a:	73 db                	jae    c001f537 <__umoddi3+0xe7>
c001f55c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f560:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f564:	89 d7                	mov    edi,edx
c001f566:	89 c6                	mov    esi,eax
c001f568:	eb cd                	jmp    c001f537 <__umoddi3+0xe7>

Disassembly of section .init:

c001f56a <_init>:
c001f56a:	55                   	push   ebp
c001f56b:	89 e5                	mov    ebp,esp
c001f56d:	e8 82 0b fe ff       	call   c00000f4 <frame_dummy>
c001f572:	e8 e5 fa ff ff       	call   c001f05c <__do_global_ctors_aux>
c001f577:	5d                   	pop    ebp
c001f578:	c3                   	ret    

Disassembly of section .fini:

c001f579 <_fini>:
c001f579:	55                   	push   ebp
c001f57a:	89 e5                	mov    ebp,esp
c001f57c:	e8 03 0b fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f581:	5d                   	pop    ebp
c001f582:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f584 <Computer::~Computer()>:
c001f584:	83 ec 0c             	sub    esp,0xc
c001f587:	ba 94 08 02 c0       	mov    edx,0xc0020894
c001f58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f590:	89 10                	mov    DWORD PTR [eax],edx
c001f592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f596:	83 ec 0c             	sub    esp,0xc
c001f599:	50                   	push   eax
c001f59a:	e8 67 d0 fe ff       	call   c000c606 <Device::~Device()>
c001f59f:	83 c4 10             	add    esp,0x10
c001f5a2:	90                   	nop
c001f5a3:	83 c4 0c             	add    esp,0xc
c001f5a6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f5a8 <Computer::~Computer()>:
c001f5a8:	83 ec 0c             	sub    esp,0xc
c001f5ab:	83 ec 0c             	sub    esp,0xc
c001f5ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5b2:	e8 cd ff ff ff       	call   c001f584 <Computer::~Computer()>
c001f5b7:	83 c4 10             	add    esp,0x10
c001f5ba:	83 ec 08             	sub    esp,0x8
c001f5bd:	68 70 01 00 00       	push   0x170
c001f5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5c6:	e8 41 b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f5cb:	83 c4 10             	add    esp,0x10
c001f5ce:	83 c4 0c             	add    esp,0xc
c001f5d1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f5d2 <idleCommon()>:
c001f5d2:	83 ec 0c             	sub    esp,0xc
c001f5d5:	fa                   	cli    
c001f5d6:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f5dc:	e8 b7 66 ff ff       	call   c0015c98 <schedule()>
c001f5e1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f5e6:	48                   	dec    eax
c001f5e7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f5ec:	75 01                	jne    c001f5ef <idleCommon()+0x1d>
c001f5ee:	fb                   	sti    
c001f5ef:	83 c4 0c             	add    esp,0xc
c001f5f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f5f4 <LinkedList<UnixFile>::~LinkedList()>:
c001f5f4:	90                   	nop
c001f5f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f5f6 <LinkedList<UnixFile>::LinkedList()>:
c001f5f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f604:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f60b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f60f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f61a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f624:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f62b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f62f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f636:	90                   	nop
c001f637:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f638 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f638:	83 ec 0c             	sub    esp,0xc
c001f63b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f640:	75 10                	jne    c001f652 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f642:	83 ec 0c             	sub    esp,0xc
c001f645:	68 a8 0a 02 c0       	push   0xc0020aa8
c001f64a:	e8 4a 1c ff ff       	call   c0011299 <KePanic(char const*)>
c001f64f:	83 c4 10             	add    esp,0x10
c001f652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f656:	8b 00                	mov    eax,DWORD PTR [eax]
c001f658:	85 c0                	test   eax,eax
c001f65a:	74 34                	je     c001f690 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f660:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f663:	85 c0                	test   eax,eax
c001f665:	74 29                	je     c001f690 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f66e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f672:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f679:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f67d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f684:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f687:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f68e:	eb 65                	jmp    c001f6f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f694:	8b 00                	mov    eax,DWORD PTR [eax]
c001f696:	85 c0                	test   eax,eax
c001f698:	75 4b                	jne    c001f6e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6a1:	85 c0                	test   eax,eax
c001f6a3:	75 40                	jne    c001f6e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6ad:	89 10                	mov    DWORD PTR [eax],edx
c001f6af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6cf:	85 c0                	test   eax,eax
c001f6d1:	74 22                	je     c001f6f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f6d3:	83 ec 0c             	sub    esp,0xc
c001f6d6:	68 ca 0a 02 c0       	push   0xc0020aca
c001f6db:	e8 b9 1b ff ff       	call   c0011299 <KePanic(char const*)>
c001f6e0:	83 c4 10             	add    esp,0x10
c001f6e3:	eb 10                	jmp    c001f6f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f6e5:	83 ec 0c             	sub    esp,0xc
c001f6e8:	68 d4 0a 02 c0       	push   0xc0020ad4
c001f6ed:	e8 a7 1b ff ff       	call   c0011299 <KePanic(char const*)>
c001f6f2:	83 c4 10             	add    esp,0x10
c001f6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6fc:	8d 50 01             	lea    edx,[eax+0x1]
c001f6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f703:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f706:	90                   	nop
c001f707:	83 c4 0c             	add    esp,0xc
c001f70a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f70c <LinkedList<UnixFile>::getFirstElement()>:
c001f70c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f710:	8b 00                	mov    eax,DWORD PTR [eax]
c001f712:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f714 <LinkedList<UnixFile>::removeFirst()>:
c001f714:	83 ec 0c             	sub    esp,0xc
c001f717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f71d:	85 c0                	test   eax,eax
c001f71f:	75 12                	jne    c001f733 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f721:	83 ec 0c             	sub    esp,0xc
c001f724:	68 e0 0a 02 c0       	push   0xc0020ae0
c001f729:	e8 6b 1b ff ff       	call   c0011299 <KePanic(char const*)>
c001f72e:	83 c4 10             	add    esp,0x10
c001f731:	eb 7e                	jmp    c001f7b1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f737:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f73a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f73d:	85 c0                	test   eax,eax
c001f73f:	74 10                	je     c001f751 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f741:	83 ec 0c             	sub    esp,0xc
c001f744:	68 2b 0b 02 c0       	push   0xc0020b2b
c001f749:	e8 4b 1b ff ff       	call   c0011299 <KePanic(char const*)>
c001f74e:	83 c4 10             	add    esp,0x10
c001f751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f755:	8b 00                	mov    eax,DWORD PTR [eax]
c001f757:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f75a:	85 c0                	test   eax,eax
c001f75c:	75 33                	jne    c001f791 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f762:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f76c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f777:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f77a:	83 f8 01             	cmp    eax,0x1
c001f77d:	74 21                	je     c001f7a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f77f:	83 ec 0c             	sub    esp,0xc
c001f782:	68 04 0b 02 c0       	push   0xc0020b04
c001f787:	e8 0d 1b ff ff       	call   c0011299 <KePanic(char const*)>
c001f78c:	83 c4 10             	add    esp,0x10
c001f78f:	eb 0f                	jmp    c001f7a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f795:	8b 00                	mov    eax,DWORD PTR [eax]
c001f797:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79e:	89 10                	mov    DWORD PTR [eax],edx
c001f7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7a7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7b1:	83 c4 0c             	add    esp,0xc
c001f7b4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f7b6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f7b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7bd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f7be <DriverlessDevice::~DriverlessDevice()>:
c001f7be:	ba bc 16 02 c0       	mov    edx,0xc00216bc
c001f7c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7c7:	89 10                	mov    DWORD PTR [eax],edx
c001f7c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7cd:	50                   	push   eax
c001f7ce:	e8 33 ce fe ff       	call   c000c606 <Device::~Device()>
c001f7d3:	83 c4 04             	add    esp,0x4
c001f7d6:	90                   	nop
c001f7d7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f7d8 <DriverlessDevice::~DriverlessDevice()>:
c001f7d8:	83 ec 0c             	sub    esp,0xc
c001f7db:	83 ec 0c             	sub    esp,0xc
c001f7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7e2:	e8 d7 ff ff ff       	call   c001f7be <DriverlessDevice::~DriverlessDevice()>
c001f7e7:	83 c4 10             	add    esp,0x10
c001f7ea:	83 ec 08             	sub    esp,0x8
c001f7ed:	68 58 01 00 00       	push   0x158
c001f7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7f6:	e8 11 b0 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f7fb:	83 c4 10             	add    esp,0x10
c001f7fe:	83 c4 0c             	add    esp,0xc
c001f801:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f802 <LinkedList<Device>::addElement(Device*)>:
c001f802:	83 ec 0c             	sub    esp,0xc
c001f805:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f80a:	75 10                	jne    c001f81c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f80c:	83 ec 0c             	sub    esp,0xc
c001f80f:	68 a8 0a 02 c0       	push   0xc0020aa8
c001f814:	e8 80 1a ff ff       	call   c0011299 <KePanic(char const*)>
c001f819:	83 c4 10             	add    esp,0x10
c001f81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f820:	8b 00                	mov    eax,DWORD PTR [eax]
c001f822:	85 c0                	test   eax,eax
c001f824:	74 3a                	je     c001f860 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f82d:	85 c0                	test   eax,eax
c001f82f:	74 2f                	je     c001f860 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f835:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f838:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f83c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f846:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f84a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f851:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f854:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f85e:	eb 68                	jmp    c001f8c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f864:	8b 00                	mov    eax,DWORD PTR [eax]
c001f866:	85 c0                	test   eax,eax
c001f868:	75 4e                	jne    c001f8b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f86e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f871:	85 c0                	test   eax,eax
c001f873:	75 43                	jne    c001f8b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f879:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f87d:	89 10                	mov    DWORD PTR [eax],edx
c001f87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f883:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f887:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f891:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8a2:	85 c0                	test   eax,eax
c001f8a4:	74 22                	je     c001f8c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f8a6:	83 ec 0c             	sub    esp,0xc
c001f8a9:	68 ca 0a 02 c0       	push   0xc0020aca
c001f8ae:	e8 e6 19 ff ff       	call   c0011299 <KePanic(char const*)>
c001f8b3:	83 c4 10             	add    esp,0x10
c001f8b6:	eb 10                	jmp    c001f8c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f8b8:	83 ec 0c             	sub    esp,0xc
c001f8bb:	68 d4 0a 02 c0       	push   0xc0020ad4
c001f8c0:	e8 d4 19 ff ff       	call   c0011299 <KePanic(char const*)>
c001f8c5:	83 c4 10             	add    esp,0x10
c001f8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8cf:	8d 50 01             	lea    edx,[eax+0x1]
c001f8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8d9:	90                   	nop
c001f8da:	83 c4 0c             	add    esp,0xc
c001f8dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f8de <LinkedList<Device>::LinkedList()>:
c001f8de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f8e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f8f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f902:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f90c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f913:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f917:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f91e:	90                   	nop
c001f91f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f920 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f924:	8b 00                	mov    eax,DWORD PTR [eax]
c001f926:	85 c0                	test   eax,eax
c001f928:	75 0e                	jne    c001f938 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f92a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f92e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f931:	85 c0                	test   eax,eax
c001f933:	75 03                	jne    c001f938 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f935:	b0 01                	mov    al,0x1
c001f937:	c3                   	ret    
c001f938:	b0 00                	mov    al,0x0
c001f93a:	90                   	nop
c001f93b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f93c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f93c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f940:	8b 00                	mov    eax,DWORD PTR [eax]
c001f942:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f944 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f944:	83 ec 0c             	sub    esp,0xc
c001f947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f94d:	85 c0                	test   eax,eax
c001f94f:	75 17                	jne    c001f968 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f951:	83 ec 0c             	sub    esp,0xc
c001f954:	68 e0 0a 02 c0       	push   0xc0020ae0
c001f959:	e8 3b 19 ff ff       	call   c0011299 <KePanic(char const*)>
c001f95e:	83 c4 10             	add    esp,0x10
c001f961:	e9 96 00 00 00       	jmp    c001f9fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f966:	66 90                	xchg   ax,ax
c001f968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f96c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f96f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f972:	85 c0                	test   eax,eax
c001f974:	0f 95 c0             	setne  al
c001f977:	0f b6 c0             	movzx  eax,al
c001f97a:	85 c0                	test   eax,eax
c001f97c:	74 12                	je     c001f990 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f97e:	83 ec 0c             	sub    esp,0xc
c001f981:	68 2b 0b 02 c0       	push   0xc0020b2b
c001f986:	e8 0e 19 ff ff       	call   c0011299 <KePanic(char const*)>
c001f98b:	83 c4 10             	add    esp,0x10
c001f98e:	66 90                	xchg   ax,ax
c001f990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f994:	8b 00                	mov    eax,DWORD PTR [eax]
c001f996:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f999:	85 c0                	test   eax,eax
c001f99b:	0f 94 c0             	sete   al
c001f99e:	0f b6 c0             	movzx  eax,al
c001f9a1:	85 c0                	test   eax,eax
c001f9a3:	74 33                	je     c001f9d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9c1:	83 f8 01             	cmp    eax,0x1
c001f9c4:	74 22                	je     c001f9e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f9c6:	83 ec 0c             	sub    esp,0xc
c001f9c9:	68 04 0b 02 c0       	push   0xc0020b04
c001f9ce:	e8 c6 18 ff ff       	call   c0011299 <KePanic(char const*)>
c001f9d3:	83 c4 10             	add    esp,0x10
c001f9d6:	eb 10                	jmp    c001f9e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9de:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f9e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e5:	89 10                	mov    DWORD PTR [eax],edx
c001f9e7:	90                   	nop
c001f9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9ef:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9f9:	8d 76 00             	lea    esi,[esi+0x0]
c001f9fc:	83 c4 0c             	add    esp,0xc
c001f9ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fa00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fa00:	83 ec 0c             	sub    esp,0xc
c001fa03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa08:	75 12                	jne    c001fa1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fa0a:	83 ec 0c             	sub    esp,0xc
c001fa0d:	68 a8 0a 02 c0       	push   0xc0020aa8
c001fa12:	e8 82 18 ff ff       	call   c0011299 <KePanic(char const*)>
c001fa17:	83 c4 10             	add    esp,0x10
c001fa1a:	66 90                	xchg   ax,ax
c001fa1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa20:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa22:	85 c0                	test   eax,eax
c001fa24:	74 36                	je     c001fa5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fa26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa2d:	85 c0                	test   eax,eax
c001fa2f:	74 2b                	je     c001fa5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fa31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa3c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fa3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa51:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa58:	eb 6a                	jmp    c001fac4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa5a:	66 90                	xchg   ax,ax
c001fa5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa60:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa62:	85 c0                	test   eax,eax
c001fa64:	75 4e                	jne    c001fab4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fa66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa6d:	85 c0                	test   eax,eax
c001fa6f:	75 43                	jne    c001fab4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fa71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa75:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa79:	89 10                	mov    DWORD PTR [eax],edx
c001fa7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa83:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa8d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa9b:	85 c0                	test   eax,eax
c001fa9d:	74 25                	je     c001fac4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa9f:	83 ec 0c             	sub    esp,0xc
c001faa2:	68 ca 0a 02 c0       	push   0xc0020aca
c001faa7:	e8 ed 17 ff ff       	call   c0011299 <KePanic(char const*)>
c001faac:	83 c4 10             	add    esp,0x10
c001faaf:	eb 13                	jmp    c001fac4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fab1:	8d 76 00             	lea    esi,[esi+0x0]
c001fab4:	83 ec 0c             	sub    esp,0xc
c001fab7:	68 d4 0a 02 c0       	push   0xc0020ad4
c001fabc:	e8 d8 17 ff ff       	call   c0011299 <KePanic(char const*)>
c001fac1:	83 c4 10             	add    esp,0x10
c001fac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001facb:	8d 50 01             	lea    edx,[eax+0x1]
c001face:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fad5:	90                   	nop
c001fad6:	83 c4 0c             	add    esp,0xc
c001fad9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fadc <ACPI::~ACPI()>:
c001fadc:	83 ec 0c             	sub    esp,0xc
c001fadf:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c001fae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae8:	89 10                	mov    DWORD PTR [eax],edx
c001faea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faee:	83 ec 0c             	sub    esp,0xc
c001faf1:	50                   	push   eax
c001faf2:	e8 0f cb fe ff       	call   c000c606 <Device::~Device()>
c001faf7:	83 c4 10             	add    esp,0x10
c001fafa:	90                   	nop
c001fafb:	83 c4 0c             	add    esp,0xc
c001fafe:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fb00 <ACPI::~ACPI()>:
c001fb00:	83 ec 0c             	sub    esp,0xc
c001fb03:	83 ec 0c             	sub    esp,0xc
c001fb06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb0a:	e8 cd ff ff ff       	call   c001fadc <ACPI::~ACPI()>
c001fb0f:	83 c4 10             	add    esp,0x10
c001fb12:	83 ec 08             	sub    esp,0x8
c001fb15:	68 64 12 00 00       	push   0x1264
c001fb1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb1e:	e8 e9 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb23:	83 c4 10             	add    esp,0x10
c001fb26:	83 c4 0c             	add    esp,0xc
c001fb29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fb2c <LinkedList<Device>::~LinkedList()>:
c001fb2c:	90                   	nop
c001fb2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fb30 <LinkedList<Device>::isEmpty()>:
c001fb30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb36:	85 c0                	test   eax,eax
c001fb38:	75 0e                	jne    c001fb48 <LinkedList<Device>::isEmpty()+0x18>
c001fb3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb41:	85 c0                	test   eax,eax
c001fb43:	75 03                	jne    c001fb48 <LinkedList<Device>::isEmpty()+0x18>
c001fb45:	b0 01                	mov    al,0x1
c001fb47:	c3                   	ret    
c001fb48:	b0 00                	mov    al,0x0
c001fb4a:	90                   	nop
c001fb4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fb4c <LinkedList<Device>::getFirstElement()>:
c001fb4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb50:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fb54 <LinkedList<Device>::removeFirst()>:
c001fb54:	83 ec 0c             	sub    esp,0xc
c001fb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb5d:	85 c0                	test   eax,eax
c001fb5f:	75 17                	jne    c001fb78 <LinkedList<Device>::removeFirst()+0x24>
c001fb61:	83 ec 0c             	sub    esp,0xc
c001fb64:	68 e0 0a 02 c0       	push   0xc0020ae0
c001fb69:	e8 2b 17 ff ff       	call   c0011299 <KePanic(char const*)>
c001fb6e:	83 c4 10             	add    esp,0x10
c001fb71:	e9 92 00 00 00       	jmp    c001fc08 <LinkedList<Device>::removeFirst()+0xb4>
c001fb76:	66 90                	xchg   ax,ax
c001fb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb7f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fb85:	85 c0                	test   eax,eax
c001fb87:	74 13                	je     c001fb9c <LinkedList<Device>::removeFirst()+0x48>
c001fb89:	83 ec 0c             	sub    esp,0xc
c001fb8c:	68 2b 0b 02 c0       	push   0xc0020b2b
c001fb91:	e8 03 17 ff ff       	call   c0011299 <KePanic(char const*)>
c001fb96:	83 c4 10             	add    esp,0x10
c001fb99:	8d 76 00             	lea    esi,[esi+0x0]
c001fb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fba2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fba8:	85 c0                	test   eax,eax
c001fbaa:	75 34                	jne    c001fbe0 <LinkedList<Device>::removeFirst()+0x8c>
c001fbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fbb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbc8:	83 f8 01             	cmp    eax,0x1
c001fbcb:	74 27                	je     c001fbf4 <LinkedList<Device>::removeFirst()+0xa0>
c001fbcd:	83 ec 0c             	sub    esp,0xc
c001fbd0:	68 04 0b 02 c0       	push   0xc0020b04
c001fbd5:	e8 bf 16 ff ff       	call   c0011299 <KePanic(char const*)>
c001fbda:	83 c4 10             	add    esp,0x10
c001fbdd:	eb 15                	jmp    c001fbf4 <LinkedList<Device>::removeFirst()+0xa0>
c001fbdf:	90                   	nop
c001fbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbe6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fbec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf0:	89 10                	mov    DWORD PTR [eax],edx
c001fbf2:	66 90                	xchg   ax,ax
c001fbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbfb:	8d 50 ff             	lea    edx,[eax-0x1]
c001fbfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc05:	8d 76 00             	lea    esi,[esi+0x0]
c001fc08:	83 c4 0c             	add    esp,0xc
c001fc0b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fc0c <CPU::~CPU()>:
c001fc0c:	83 ec 0c             	sub    esp,0xc
c001fc0f:	ba 4c 1e 02 c0       	mov    edx,0xc0021e4c
c001fc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc18:	89 10                	mov    DWORD PTR [eax],edx
c001fc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1e:	83 ec 0c             	sub    esp,0xc
c001fc21:	50                   	push   eax
c001fc22:	e8 df c9 fe ff       	call   c000c606 <Device::~Device()>
c001fc27:	83 c4 10             	add    esp,0x10
c001fc2a:	90                   	nop
c001fc2b:	83 c4 0c             	add    esp,0xc
c001fc2e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fc30 <CPU::~CPU()>:
c001fc30:	83 ec 0c             	sub    esp,0xc
c001fc33:	83 ec 0c             	sub    esp,0xc
c001fc36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc3a:	e8 cd ff ff ff       	call   c001fc0c <CPU::~CPU()>
c001fc3f:	83 c4 10             	add    esp,0x10
c001fc42:	83 ec 08             	sub    esp,0x8
c001fc45:	68 94 11 00 00       	push   0x1194
c001fc4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc4e:	e8 b9 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc53:	83 c4 10             	add    esp,0x10
c001fc56:	83 c4 0c             	add    esp,0xc
c001fc59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fc5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fc5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc63:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fc64 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fc64:	90                   	nop
c001fc65:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fc68 <ThreadControlBlock::ThreadControlBlock()>:
c001fc68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc6c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fc73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc77:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fc7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc82:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fc89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc8d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fc94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc98:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fc9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fca3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fca7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcab:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fcaf:	90                   	nop
c001fcb0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fcb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fcb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fcbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fccd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fcde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fce9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fced:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcf4:	90                   	nop
c001fcf5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fcf6 <PCI::~PCI()>:
c001fcf6:	83 ec 0c             	sub    esp,0xc
c001fcf9:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c001fcfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd02:	89 10                	mov    DWORD PTR [eax],edx
c001fd04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd08:	83 ec 0c             	sub    esp,0xc
c001fd0b:	50                   	push   eax
c001fd0c:	e8 87 c3 fe ff       	call   c000c098 <Bus::~Bus()>
c001fd11:	83 c4 10             	add    esp,0x10
c001fd14:	90                   	nop
c001fd15:	83 c4 0c             	add    esp,0xc
c001fd18:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fd1a <PCI::~PCI()>:
c001fd1a:	83 ec 0c             	sub    esp,0xc
c001fd1d:	83 ec 0c             	sub    esp,0xc
c001fd20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd24:	e8 cd ff ff ff       	call   c001fcf6 <PCI::~PCI()>
c001fd29:	83 c4 10             	add    esp,0x10
c001fd2c:	83 ec 08             	sub    esp,0x8
c001fd2f:	68 5c 01 00 00       	push   0x15c
c001fd34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd38:	e8 cf aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd3d:	83 c4 10             	add    esp,0x10
c001fd40:	83 c4 0c             	add    esp,0xc
c001fd43:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fd44 <IDE::~IDE()>:
c001fd44:	83 ec 0c             	sub    esp,0xc
c001fd47:	ba e0 2d 02 c0       	mov    edx,0xc0022de0
c001fd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd50:	89 10                	mov    DWORD PTR [eax],edx
c001fd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd56:	83 ec 0c             	sub    esp,0xc
c001fd59:	50                   	push   eax
c001fd5a:	e8 21 cd fe ff       	call   c000ca80 <HardDiskController::~HardDiskController()>
c001fd5f:	83 c4 10             	add    esp,0x10
c001fd62:	90                   	nop
c001fd63:	83 c4 0c             	add    esp,0xc
c001fd66:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fd68 <IDE::~IDE()>:
c001fd68:	83 ec 0c             	sub    esp,0xc
c001fd6b:	83 ec 0c             	sub    esp,0xc
c001fd6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd72:	e8 cd ff ff ff       	call   c001fd44 <IDE::~IDE()>
c001fd77:	83 c4 10             	add    esp,0x10
c001fd7a:	83 ec 08             	sub    esp,0x8
c001fd7d:	68 70 02 00 00       	push   0x270
c001fd82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd86:	e8 81 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd8b:	83 c4 10             	add    esp,0x10
c001fd8e:	83 c4 0c             	add    esp,0xc
c001fd91:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fd92 <SATABus::~SATABus()>:
c001fd92:	83 ec 0c             	sub    esp,0xc
c001fd95:	ba 30 2e 02 c0       	mov    edx,0xc0022e30
c001fd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9e:	89 10                	mov    DWORD PTR [eax],edx
c001fda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda4:	83 ec 0c             	sub    esp,0xc
c001fda7:	50                   	push   eax
c001fda8:	e8 d3 cc fe ff       	call   c000ca80 <HardDiskController::~HardDiskController()>
c001fdad:	83 c4 10             	add    esp,0x10
c001fdb0:	90                   	nop
c001fdb1:	83 c4 0c             	add    esp,0xc
c001fdb4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fdb6 <SATABus::~SATABus()>:
c001fdb6:	83 ec 0c             	sub    esp,0xc
c001fdb9:	83 ec 0c             	sub    esp,0xc
c001fdbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc0:	e8 cd ff ff ff       	call   c001fd92 <SATABus::~SATABus()>
c001fdc5:	83 c4 10             	add    esp,0x10
c001fdc8:	83 ec 08             	sub    esp,0x8
c001fdcb:	68 64 01 00 00       	push   0x164
c001fdd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdd4:	e8 33 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fdd9:	83 c4 10             	add    esp,0x10
c001fddc:	83 c4 0c             	add    esp,0xc
c001fddf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fde0 <ATA::~ATA()>:
c001fde0:	83 ec 0c             	sub    esp,0xc
c001fde3:	ba 70 2e 02 c0       	mov    edx,0xc0022e70
c001fde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdec:	89 10                	mov    DWORD PTR [eax],edx
c001fdee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf2:	83 ec 0c             	sub    esp,0xc
c001fdf5:	50                   	push   eax
c001fdf6:	e8 67 cd fe ff       	call   c000cb62 <PhysicalDisk::~PhysicalDisk()>
c001fdfb:	83 c4 10             	add    esp,0x10
c001fdfe:	90                   	nop
c001fdff:	83 c4 0c             	add    esp,0xc
c001fe02:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fe04 <ATA::~ATA()>:
c001fe04:	83 ec 0c             	sub    esp,0xc
c001fe07:	83 ec 0c             	sub    esp,0xc
c001fe0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe0e:	e8 cd ff ff ff       	call   c001fde0 <ATA::~ATA()>
c001fe13:	83 c4 10             	add    esp,0x10
c001fe16:	83 ec 08             	sub    esp,0x8
c001fe19:	68 7c 01 00 00       	push   0x17c
c001fe1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe22:	e8 e5 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe27:	83 c4 10             	add    esp,0x10
c001fe2a:	83 c4 0c             	add    esp,0xc
c001fe2d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fe2e <ATAPI::~ATAPI()>:
c001fe2e:	83 ec 0c             	sub    esp,0xc
c001fe31:	ba b8 2e 02 c0       	mov    edx,0xc0022eb8
c001fe36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3a:	89 10                	mov    DWORD PTR [eax],edx
c001fe3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe40:	83 ec 0c             	sub    esp,0xc
c001fe43:	50                   	push   eax
c001fe44:	e8 19 cd fe ff       	call   c000cb62 <PhysicalDisk::~PhysicalDisk()>
c001fe49:	83 c4 10             	add    esp,0x10
c001fe4c:	90                   	nop
c001fe4d:	83 c4 0c             	add    esp,0xc
c001fe50:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fe52 <ATAPI::~ATAPI()>:
c001fe52:	83 ec 0c             	sub    esp,0xc
c001fe55:	83 ec 0c             	sub    esp,0xc
c001fe58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe5c:	e8 cd ff ff ff       	call   c001fe2e <ATAPI::~ATAPI()>
c001fe61:	83 c4 10             	add    esp,0x10
c001fe64:	83 ec 08             	sub    esp,0x8
c001fe67:	68 84 01 00 00       	push   0x184
c001fe6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe70:	e8 97 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe75:	83 c4 10             	add    esp,0x10
c001fe78:	83 c4 0c             	add    esp,0xc
c001fe7b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fe7c <SATA::~SATA()>:
c001fe7c:	83 ec 0c             	sub    esp,0xc
c001fe7f:	ba 6c 2f 02 c0       	mov    edx,0xc0022f6c
c001fe84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe88:	89 10                	mov    DWORD PTR [eax],edx
c001fe8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8e:	83 ec 0c             	sub    esp,0xc
c001fe91:	50                   	push   eax
c001fe92:	e8 cb cc fe ff       	call   c000cb62 <PhysicalDisk::~PhysicalDisk()>
c001fe97:	83 c4 10             	add    esp,0x10
c001fe9a:	90                   	nop
c001fe9b:	83 c4 0c             	add    esp,0xc
c001fe9e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fea0 <SATA::~SATA()>:
c001fea0:	83 ec 0c             	sub    esp,0xc
c001fea3:	83 ec 0c             	sub    esp,0xc
c001fea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feaa:	e8 cd ff ff ff       	call   c001fe7c <SATA::~SATA()>
c001feaf:	83 c4 10             	add    esp,0x10
c001feb2:	83 ec 08             	sub    esp,0x8
c001feb5:	68 7c 01 00 00       	push   0x17c
c001feba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001febe:	e8 49 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fec3:	83 c4 10             	add    esp,0x10
c001fec6:	83 c4 0c             	add    esp,0xc
c001fec9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001feca <SATAPI::~SATAPI()>:
c001feca:	83 ec 0c             	sub    esp,0xc
c001fecd:	ba 90 30 02 c0       	mov    edx,0xc0023090
c001fed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed6:	89 10                	mov    DWORD PTR [eax],edx
c001fed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fedc:	83 ec 0c             	sub    esp,0xc
c001fedf:	50                   	push   eax
c001fee0:	e8 7d cc fe ff       	call   c000cb62 <PhysicalDisk::~PhysicalDisk()>
c001fee5:	83 c4 10             	add    esp,0x10
c001fee8:	90                   	nop
c001fee9:	83 c4 0c             	add    esp,0xc
c001feec:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001feee <SATAPI::~SATAPI()>:
c001feee:	83 ec 0c             	sub    esp,0xc
c001fef1:	83 ec 0c             	sub    esp,0xc
c001fef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fef8:	e8 cd ff ff ff       	call   c001feca <SATAPI::~SATAPI()>
c001fefd:	83 c4 10             	add    esp,0x10
c001ff00:	83 ec 08             	sub    esp,0x8
c001ff03:	68 84 01 00 00       	push   0x184
c001ff08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff0c:	e8 fb a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff11:	83 c4 10             	add    esp,0x10
c001ff14:	83 c4 0c             	add    esp,0xc
c001ff17:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ff18 <IOAPIC::~IOAPIC()>:
c001ff18:	83 ec 0c             	sub    esp,0xc
c001ff1b:	ba d0 30 02 c0       	mov    edx,0xc00230d0
c001ff20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff24:	89 10                	mov    DWORD PTR [eax],edx
c001ff26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2a:	83 ec 0c             	sub    esp,0xc
c001ff2d:	50                   	push   eax
c001ff2e:	e8 d3 c6 fe ff       	call   c000c606 <Device::~Device()>
c001ff33:	83 c4 10             	add    esp,0x10
c001ff36:	90                   	nop
c001ff37:	83 c4 0c             	add    esp,0xc
c001ff3a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ff3c <IOAPIC::~IOAPIC()>:
c001ff3c:	83 ec 0c             	sub    esp,0xc
c001ff3f:	83 ec 0c             	sub    esp,0xc
c001ff42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff46:	e8 cd ff ff ff       	call   c001ff18 <IOAPIC::~IOAPIC()>
c001ff4b:	83 c4 10             	add    esp,0x10
c001ff4e:	83 ec 08             	sub    esp,0x8
c001ff51:	68 68 01 00 00       	push   0x168
c001ff56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff5a:	e8 ad a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff5f:	83 c4 10             	add    esp,0x10
c001ff62:	83 c4 0c             	add    esp,0xc
c001ff65:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ff68 <APICTimer::~APICTimer()>:
c001ff68:	83 ec 0c             	sub    esp,0xc
c001ff6b:	ba 18 31 02 c0       	mov    edx,0xc0023118
c001ff70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff74:	89 10                	mov    DWORD PTR [eax],edx
c001ff76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff7a:	83 ec 0c             	sub    esp,0xc
c001ff7d:	50                   	push   eax
c001ff7e:	e8 59 e1 fe ff       	call   c000e0dc <Timer::~Timer()>
c001ff83:	83 c4 10             	add    esp,0x10
c001ff86:	90                   	nop
c001ff87:	83 c4 0c             	add    esp,0xc
c001ff8a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ff8c <APICTimer::~APICTimer()>:
c001ff8c:	83 ec 0c             	sub    esp,0xc
c001ff8f:	83 ec 0c             	sub    esp,0xc
c001ff92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff96:	e8 cd ff ff ff       	call   c001ff68 <APICTimer::~APICTimer()>
c001ff9b:	83 c4 10             	add    esp,0x10
c001ff9e:	83 ec 08             	sub    esp,0x8
c001ffa1:	68 60 01 00 00       	push   0x160
c001ffa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffaa:	e8 5d a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ffaf:	83 c4 10             	add    esp,0x10
c001ffb2:	83 c4 0c             	add    esp,0xc
c001ffb5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ffb8 <PIT::~PIT()>:
c001ffb8:	83 ec 0c             	sub    esp,0xc
c001ffbb:	ba 68 31 02 c0       	mov    edx,0xc0023168
c001ffc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc4:	89 10                	mov    DWORD PTR [eax],edx
c001ffc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffca:	83 ec 0c             	sub    esp,0xc
c001ffcd:	50                   	push   eax
c001ffce:	e8 09 e1 fe ff       	call   c000e0dc <Timer::~Timer()>
c001ffd3:	83 c4 10             	add    esp,0x10
c001ffd6:	90                   	nop
c001ffd7:	83 c4 0c             	add    esp,0xc
c001ffda:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ffdc <PIT::~PIT()>:
c001ffdc:	83 ec 0c             	sub    esp,0xc
c001ffdf:	83 ec 0c             	sub    esp,0xc
c001ffe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffe6:	e8 cd ff ff ff       	call   c001ffb8 <PIT::~PIT()>
c001ffeb:	83 c4 10             	add    esp,0x10
c001ffee:	83 ec 08             	sub    esp,0x8
c001fff1:	68 5c 01 00 00       	push   0x15c
c001fff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fffa:	e8 0d a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ffff:	83 c4 10             	add    esp,0x10
c0020002:	83 c4 0c             	add    esp,0xc
c0020005:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 7d 1f 02 c0       	mov    esi,0xc0021f7d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 99 1f 02 c0       	mov    esi,0xc0021f99
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
