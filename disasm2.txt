
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e4 36 02 c0       	mov    eax,0xc00236e4
c0000025:	3d e4 36 02 c0       	cmp    eax,0xc00236e4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e4 36 02 c0       	push   0xc00236e4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e4 36 02 c0       	mov    eax,0xc00236e4
c0000051:	2d e4 36 02 c0       	sub    eax,0xc00236e4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e4 36 02 c0       	push   0xc00236e4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 3c fe 01 c0       	mov    ebx,0xc001fe3c
c0000097:	81 eb 38 fe 01 c0    	sub    ebx,0xc001fe38
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 38 fe 01 c0       	mov    esi,0xc001fe38
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e4 36 02 c0       	push   0xc00236e4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 e4 36 02 c0       	push   0xc00236e4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 3b 50 01 00       	call   c00152e8 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 19 50 01 00       	call   c00152e8 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 26 55 01 00       	call   c0015814 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 c1 5b 01 00       	call   c0015eb8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 19 0e 01 00       	jmp    c0011198 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 40 fe 01 c0 02 	test   BYTE PTR [edx-0x3ffe01c0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 40 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe01c0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 40 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe01c0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 40 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe01c0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 40 fe 01 c0 04 	test   BYTE PTR [ecx-0x3ffe01c0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 40 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe01c0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 44 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe00bc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 aa 76 01 00       	jmp    c0019484 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 d4 76 01 00       	jmp    c00194c4 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 f5 76 01 00       	jmp    c0019504 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 a0 00 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdff60]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 a0 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdff60]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 04 27 02 c0       	mov    edx,0xc0022704
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 5c ff 01 c0       	mov    edx,0xc001ff5c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 62 ff 01 c0       	mov    eax,0xc001ff62
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 20 00 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdffe0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 6b ff 01 c0       	mov    eax,0xc001ff6b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 a0 00 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdff60]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 f0 ff 01 c0       	mov    eax,0xc001fff0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb e0 ff 01 c0       	mov    ebx,0xc001ffe0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 c0 ff 01 c0       	mov    eax,0xc001ffc0
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 d0 ff 01 c0       	mov    eax,0xc001ffd0
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 72 ff 01 c0       	mov    edx,0xc001ff72
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 7e ff 01 c0       	mov    edx,0xc001ff7e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 92 ff 01 c0       	mov    edx,0xc001ff92
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c c0 03 02 c0 	mov    DWORD PTR [esp+0xc],0xc00203c0
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 c0 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc00203c0
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 c0 01 02 c0       	mov    eax,0xc00201c0
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 00 01 02 c0       	mov    eax,0xc0020100
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 c0 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff40]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 c0 04 02 c0       	push   0xc00204c0
c0006147:	e8 dc 3c 01 00       	call   c0019e28 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 ce 04 02 c0       	push   0xc00204ce
c000617f:	e8 a4 3c 01 00       	call   c0019e28 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 0d 3c 01 00       	call   c0019dcc <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 dd 04 02 c0       	push   0xc00204dd
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 e0 04 02 c0       	push   0xc00204e0
c000682f:	e8 f4 35 01 00       	call   c0019e28 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 02 36 01 00       	call   c0019e44 <iso_kprintfd>
c0006842:	c7 04 24 e5 04 02 c0 	mov    DWORD PTR [esp],0xc00204e5
c0006849:	e8 da 35 01 00       	call   c0019e28 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 ea 35 01 00       	call   c0019e44 <iso_kprintfd>
c000685a:	c7 04 24 eb 04 02 c0 	mov    DWORD PTR [esp],0xc00204eb
c0006861:	e8 c2 35 01 00       	call   c0019e28 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 d2 35 01 00       	call   c0019e44 <iso_kprintfd>
c0006872:	c7 04 24 f1 04 02 c0 	mov    DWORD PTR [esp],0xc00204f1
c0006879:	e8 aa 35 01 00       	call   c0019e28 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 ba 35 01 00       	call   c0019e44 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 dd 04 02 c0       	push   0xc00204dd
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 fa 04 02 c0       	push   0xc00204fa
c0006a52:	e8 d1 33 01 00       	call   c0019e28 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 05 05 02 c0       	push   0xc0020505
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 0c 05 02 c0       	push   0xc002050c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 13 05 02 c0       	push   0xc0020513
c0006b69:	e8 ba 32 01 00       	call   c0019e28 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 1e 05 02 c0       	push   0xc002051e
c0006b84:	e8 9f 32 01 00       	call   c0019e28 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 66 9d 00 00       	call   c00109fa <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 8b 5a 00 00       	call   c000c72e <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 2f 05 02 c0       	push   0xc002052f
c0006cd4:	e8 00 9e 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 48 05 02 c0       	push   0xc0020548
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 3f e9 00 00       	call   c0015640 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 4e eb 00 00       	call   c0015864 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 28 63 01 c0       	push   0xc0016328
c0006d25:	52                   	push   edx
c0006d26:	e8 39 eb 00 00       	call   c0015864 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 44 06 02 c0       	push   0xc0020644
c0006d33:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d38:	e8 9c 9d 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d44:	e8 1b a6 00 00       	call   c0011364 <KeInitRand()>
c0006d49:	e8 fd f9 00 00       	call   c001674b <Vm::initialise8086()>
c0006d4e:	e8 a7 47 00 00       	call   c000b4fa <Fs::initVFS()>
c0006d53:	c7 04 24 55 05 02 c0 	mov    DWORD PTR [esp],0xc0020555
c0006d5a:	e8 7a 9d 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 44 06 02 c0       	push   0xc0020644
c0006d7e:	e8 56 9d 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c0006d83:	e8 50 44 00 00       	call   c000b1d8 <KeInitialiseSymlinks()>
c0006d88:	e8 83 a2 00 00       	call   c0011010 <KeLoadSystemEnv()>
c0006d8d:	e8 e0 a4 00 00       	call   c0011272 <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 6f 05 02 c0       	push   0xc002056f
c0006d9c:	68 78 05 02 c0       	push   0xc0020578
c0006da1:	e8 c8 ca 00 00       	call   c001386e <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 da 52 00 00       	call   c000c088 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 68 06 02 c0 	mov    DWORD PTR [esp],0xc0020668
c0006db5:	e8 1f 9d 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 60 59 00 00       	call   c000c72c <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 80 05 02 c0 	mov    DWORD PTR [esp],0xc0020580
c0006dd3:	e8 01 9d 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 91 05 02 c0       	push   0xc0020591
c0006de7:	e8 58 e2 00 00       	call   c0015044 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 8f e4 00 00       	call   c0015284 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 ae ee 00 00       	call   c0015cb0 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 ad 05 02 c0       	push   0xc00205ad
c0006e17:	50                   	push   eax
c0006e18:	e8 8b 59 00 00       	call   c000c7a8 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba b4 06 02 c0       	mov    edx,0xc00206b4
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 1f 7f 01 00       	call   c001ee36 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 bd 8f 00 00       	call   c000ff12 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 96 8f 00 00       	call   c000ff12 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 74 8f 00 00       	call   c000ff12 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 52 8f 00 00       	call   c000ff12 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 5f 8e 00 00       	call   c000fe8e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 3a 8e 00 00       	call   c000fe8e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 7e 7d 01 00       	call   c001edf0 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 cc 79 01 00       	call   c001ea60 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 50 8e 00 00       	call   c000ff12 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 b6 05 02 c0       	push   0xc00205b6
c0007104:	e8 a4 a0 00 00       	call   c00111ad <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 bc 05 02 c0       	push   0xc00205bc
c0007140:	e8 68 a0 00 00       	call   c00111ad <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 57 88 00 00       	jmp    c000f9e4 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 c2 05 02 c0       	push   0xc00205c2
c00071e3:	0f 94 05 40 2f 02 c0 	sete   BYTE PTR ds:0xc0022f40
c00071ea:	e8 ea 98 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 53 83 00 00       	call   c000f558 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 fc 53 00 00       	call   c000c610 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 da 05 02 c0 	mov    DWORD PTR [esp],0xc00205da
c000722d:	e8 a7 98 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 82 8d 00 00       	call   c000ffca <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 b9 53 00 00       	call   c000c610 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 88 06 02 c0       	push   0xc0020688
c0007274:	e8 60 98 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c0007279:	e8 14 07 01 00       	call   c0017992 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 f4 05 02 c0 	mov    DWORD PTR [esp],0xc00205f4
c0007285:	e8 4f 98 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 f6 e6 00 00       	call   c001598c <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 0f 06 02 c0       	push   0xc002060f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 20 06 02 c0       	push   0xc0020620
c000730d:	e8 9b 9e 00 00       	call   c00111ad <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 2d 06 02 c0       	push   0xc002062d
c0007322:	e8 86 9e 00 00       	call   c00111ad <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 37 06 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020637
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 6c 9e 00 00       	jmp    c00111ad <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 2b 01 01 00       	call   c001765e <HalSystemIdle()>
c0007533:	e8 ba 7e 01 00       	call   c001f3f2 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 f0 ea 01 c0       	push   0xc001eaf0
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 00 eb 01 c0       	push   0xc001eb00
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 0a eb 01 c0       	push   0xc001eb0a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 14 eb 01 c0       	push   0xc001eb14
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 1e eb 01 c0       	push   0xc001eb1e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 28 eb 01 c0       	push   0xc001eb28
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 32 eb 01 c0       	push   0xc001eb32
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 3c eb 01 c0       	push   0xc001eb3c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 46 eb 01 c0       	push   0xc001eb46
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 4e eb 01 c0       	push   0xc001eb4e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 58 eb 01 c0       	push   0xc001eb58
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 60 eb 01 c0       	push   0xc001eb60
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 68 eb 01 c0       	push   0xc001eb68
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 70 eb 01 c0       	push   0xc001eb70
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 8a eb 01 c0       	push   0xc001eb8a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 92 eb 01 c0       	push   0xc001eb92
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 9c eb 01 c0       	push   0xc001eb9c
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 a6 eb 01 c0       	push   0xc001eba6
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 b0 eb 01 c0       	push   0xc001ebb0
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 4a ec 01 c0       	push   0xc001ec4a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 51 ec 01 c0       	push   0xc001ec51
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 3c ec 01 c0       	push   0xc001ec3c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 43 ec 01 c0       	push   0xc001ec43
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 ba eb 01 c0       	push   0xc001ebba
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 c4 eb 01 c0       	push   0xc001ebc4
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 ce eb 01 c0       	push   0xc001ebce
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 d8 eb 01 c0       	push   0xc001ebd8
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 e2 eb 01 c0       	push   0xc001ebe2
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 ec eb 01 c0       	push   0xc001ebec
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 f6 eb 01 c0       	push   0xc001ebf6
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 00 ec 01 c0       	push   0xc001ec00
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 0a ec 01 c0       	push   0xc001ec0a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 14 ec 01 c0       	push   0xc001ec14
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 1e ec 01 c0       	push   0xc001ec1e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 28 ec 01 c0       	push   0xc001ec28
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 32 ec 01 c0       	push   0xc001ec32
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 8c ed 01 c0       	push   0xc001ed8c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 96 ed 01 c0       	push   0xc001ed96
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 a0 ed 01 c0       	push   0xc001eda0
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 aa ed 01 c0       	push   0xc001edaa
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 b4 ed 01 c0       	push   0xc001edb4
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 be ed 01 c0       	push   0xc001edbe
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 c8 ed 01 c0       	push   0xc001edc8
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 d2 ed 01 c0       	push   0xc001edd2
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 46 eb 01 c0       	push   0xc001eb46
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 34 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f34
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d 34 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f34
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 34 2f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022f34,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 34 2f 02 c0       	mov    eax,ds:0xc0022f34
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 d8 06 02 c0       	push   0xc00206d8
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 08 07 02 c0       	push   0xc0020708
c0007a44:	e8 64 97 00 00       	call   c00111ad <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 0d 07 02 c0       	push   0xc002070d
c0007a5a:	e8 4e 97 00 00       	call   c00111ad <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 14 07 02 c0       	push   0xc0020714
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 d7 8e 00 00       	call   c0010a5d <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 00 8e 00 00       	call   c00109a7 <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 cd 77 01 00       	call   c001f38a <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 2c 07 02 c0       	push   0xc002072c
c0007c4b:	e8 5d 95 00 00       	call   c00111ad <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 2c 07 02 c0       	push   0xc002072c
c0007cc5:	e8 e3 94 00 00       	call   c00111ad <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 38 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f38
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 38 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f38
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 38 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f38
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 d1 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc00207d1
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 dd 93 00 00       	jmp    c00111ad <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 54 07 02 c0       	push   0xc0020754
c0007e54:	e8 54 93 00 00       	call   c00111ad <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 e7 07 02 c0       	push   0xc00207e7
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 84 07 02 c0       	push   0xc0020784
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 ff 07 02 c0       	push   0xc00207ff
c000810a:	e8 9e 90 00 00       	call   c00111ad <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 a8 07 02 c0       	push   0xc00207a8
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 0d 08 02 c0       	push   0xc002080d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 6c 08 02 c0       	mov    edx,0xc002086c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 29 08 02 c0       	push   0xc0020829
c0008331:	e8 77 8e 00 00       	call   c00111ad <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000837a:	e8 31 d7 00 00       	call   c0015ab0 <schedule()>
c000837f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 63 6e 01 00       	call   c001f270 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 46 08 02 c0       	push   0xc0020846
c0008422:	e8 86 8d 00 00       	call   c00111ad <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 6c 08 02 c0       	mov    edx,0xc002086c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba b4 08 02 c0       	mov    edx,0xc00208b4
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 e6 4f 00 00       	call   c000d4f2 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 1e 03 01 00       	call   c0018850 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d 60 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd0a0]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d 60 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd0a0]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 18 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1e8]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 f0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd210]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 50 00 01 00       	call   c00186e4 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 ad 00 01 00       	jmp    c00187ec <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 80 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020880
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 21 8a 00 00       	jmp    c00111ad <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 46 37 00 00       	jmp    c000c02f <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be 8e 08 02 c0       	mov    esi,0xc002088e
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 c4 fb 00 00       	call   c00187ec <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba b4 08 02 c0       	mov    edx,0xc00208b4
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 9f 08 02 c0       	push   0xc002089f
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 a5 08 02 c0       	push   0xc00208a5
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 7c 09 02 c0       	mov    edx,0xc002097c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 a0 2f 02 c0       	mov    eax,ds:0xc0022fa0
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 a0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fa0,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 6f 62 01 00       	call   c001f458 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba 98 09 02 c0       	mov    edx,0xc0020998
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 7c 09 02 c0       	mov    edx,0xc002097c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 6f 61 01 00       	call   c001f52c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 63 61 01 00       	call   c001f534 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 69 60 01 00       	call   c001f458 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 54 09 02 c0       	push   0xc0020954
c0009414:	e8 94 7d 00 00       	call   c00111ad <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba 98 09 02 c0       	mov    edx,0xc0020998
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 6e 60 01 00       	call   c001f52c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 fb 60 01 00       	call   c001f5d6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 b9 5e 01 00       	call   c001f416 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 30 2f 02 c0       	push   0xc0022f30
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 14 f4 01 c0       	push   0xc001f414
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 a8 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fa8
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d a8 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fa8
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d a4 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022fa4
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 a4 2f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022fa4,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d a4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fa4,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 ac 09 02 c0       	push   0xc00209ac
c0009674:	e8 34 7b 00 00       	call   c00111ad <KePanic(char const*)>
c0009679:	8b 2d a4 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022fa4
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 a4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fa4,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 a4 2f 02 c0       	mov    eax,ds:0xc0022fa4
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 a4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fa4,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 a4 2f 02 c0       	mov    ds:0xc0022fa4,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 ac 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fac
c000973e:	8b 0d b4 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fb4
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c0009759:	8b 0d ac 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fac
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 40 0c 02 c0       	push   0xc0020c40
c000979e:	e8 0a 7a 00 00       	call   c00111ad <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 57 0c 02 c0       	push   0xc0020c57
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d b0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fb0,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 b8 2f 02 c0 43 	mov    BYTE PTR ds:0xc0022fb8,0x43
c000984f:	c7 05 ac 2f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0022fac,0x8
c0009859:	a3 b4 2f 02 c0       	mov    ds:0xc0022fb4,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c0009874:	f7 35 ac 2f 02 c0    	div    DWORD PTR ds:0xc0022fac
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 cc 09 02 c0       	push   0xc00209cc
c00098af:	e8 f9 78 00 00       	call   c00111ad <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 6e 0c 02 c0       	push   0xc0020c6e
c0009981:	e8 27 78 00 00       	call   c00111ad <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 f0 09 02 c0 	mov    DWORD PTR [esp+0x30],0xc00209f0
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 c4 77 00 00       	jmp    c00111ad <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 8a 0c 02 c0       	push   0xc0020c8a
c00099f6:	e8 b2 77 00 00       	call   c00111ad <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 a6 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020ca6
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 68 77 00 00       	jmp    c00111ad <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 14 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a14
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009cee:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 38 0a 02 c0       	push   0xc0020a38
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 a0 0a 02 c0       	push   0xc0020aa0
c0009d87:	e8 21 74 00 00       	call   c00111ad <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 c4 0a 02 c0       	push   0xc0020ac4
c0009e7b:	e8 2d 73 00 00       	call   c00111ad <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 f0 0a 02 c0       	push   0xc0020af0
c0009fd9:	e8 cf 71 00 00       	call   c00111ad <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 96 26 00 00       	call   c000c8a4 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 c0 0c 02 c0       	push   0xc0020cc0
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 b8 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022fb8
c000a2e7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 72 37 00 00       	call   c000da66 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d ac 2f 02 c0    	cmp    DWORD PTR ds:0xc0022fac,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 14 0b 02 c0       	push   0xc0020b14
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 ce 0c 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020cce
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 f1 0c 02 c0       	push   0xc0020cf1
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 df 0c 02 c0       	push   0xc0020cdf
c000a413:	e8 95 6d 00 00       	call   c00111ad <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 44 0b 02 c0       	push   0xc0020b44
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 b8 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022fb8
c000a4bf:	8b 2c 85 7c 87 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 2e 35 00 00       	call   c000d9fa <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 ac 2f 02 c0    	cmp    DWORD PTR ds:0xc0022fac,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 04 0d 02 c0       	push   0xc0020d04
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 64 0b 02 c0       	push   0xc0020b64
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 c4 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bc4
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 19 0d 02 c0       	push   0xc0020d19
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 2d 0d 02 c0       	push   0xc0020d2d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 40 0d 02 c0       	push   0xc0020d40
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 4d 0d 02 c0       	push   0xc0020d4d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 66 0d 02 c0       	push   0xc0020d66
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 66 0d 02 c0       	push   0xc0020d66
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 6e 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d6e
c000a7ec:	e8 bc 69 00 00       	call   c00111ad <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 86 0d 02 c0       	push   0xc0020d86
c000a7fe:	e8 aa 69 00 00       	call   c00111ad <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 9c 0d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf264]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 ec 0e 02 c0       	push   0xc0020eec
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 00 0f 02 c0       	push   0xc0020f00
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 0a 0f 02 c0       	push   0xc0020f0a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 14 0f 02 c0       	push   0xc0020f14
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 58 10 02 c0       	push   0xc0021058
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 1e 0f 02 c0       	push   0xc0020f1e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 78 10 02 c0       	push   0xc0021078
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 33 0f 02 c0       	push   0xc0020f33
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 4d 0f 02 c0       	push   0xc0020f4d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 c0 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd040]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 a0 10 02 c0       	push   0xc00210a0
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 58 10 02 c0       	push   0xc0021058
c000ab78:	e8 30 66 00 00       	call   c00111ad <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 e8 10 02 c0       	push   0xc00210e8
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 e8 10 02 c0       	push   0xc00210e8
c000aba7:	e8 01 66 00 00       	call   c00111ad <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 58 0f 02 c0       	push   0xc0020f58
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 58 0f 02 c0       	push   0xc0020f58
c000abd3:	e8 d5 65 00 00       	call   c00111ad <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 75 0f 02 c0       	push   0xc0020f75
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 75 0f 02 c0       	push   0xc0020f75
c000abff:	e8 a9 65 00 00       	call   c00111ad <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 08 11 02 c0       	push   0xc0021108
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 08 11 02 c0       	push   0xc0021108
c000ac2b:	e8 7d 65 00 00       	call   c00111ad <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 2c 11 02 c0       	push   0xc002112c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 2c 11 02 c0       	push   0xc002112c
c000ac57:	e8 51 65 00 00       	call   c00111ad <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 91 0f 02 c0       	push   0xc0020f91
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 91 0f 02 c0       	push   0xc0020f91
c000ac83:	e8 25 65 00 00       	call   c00111ad <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 ad 0f 02 c0       	push   0xc0020fad
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 ad 0f 02 c0       	push   0xc0020fad
c000acaf:	e8 f9 64 00 00       	call   c00111ad <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 4c 11 02 c0       	push   0xc002114c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 4c 11 02 c0       	push   0xc002114c
c000acdb:	e8 cd 64 00 00       	call   c00111ad <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 70 11 02 c0       	push   0xc0021170
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 70 11 02 c0       	push   0xc0021170
c000ad07:	e8 a1 64 00 00       	call   c00111ad <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateSymlinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 d9 65 00 00       	call   c00112fb <KeRand()>
c000ad22:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateSymlinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 8f 11 02 c0       	push   0xc002118f
c000ad57:	e8 51 64 00 00       	call   c00111ad <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateSymlinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateSymlinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000ad97:	68 98 11 02 c0       	push   0xc0021198
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 5c 09 00 00       	call   c000b700 <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3c>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 b6 11 02 c0       	push   0xc00211b6
c000adb3:	e8 f5 63 00 00       	call   c00111ad <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 06                	push   0x6
c000adbf:	53                   	push   ebx
c000adc0:	e8 f7 09 00 00       	call   c000b7bc <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5d>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 d0 11 02 c0       	push   0xc00211d0
c000add4:	e8 d4 63 00 00       	call   c00111ad <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade4:	7e 40                	jle    c000ae26 <KiFlushSymlinkChanges()+0xa7>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adef:	50                   	push   eax
c000adf0:	89 f0                	mov    eax,esi
c000adf2:	c1 e0 08             	shl    eax,0x8
c000adf5:	05 00 60 02 c0       	add    eax,0xc0026000
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa4>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 ea 11 02 c0       	push   0xc00211ea
c000ae1b:	e8 8d 63 00 00       	call   c00111ad <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	46                   	inc    esi
c000ae24:	eb b8                	jmp    c000adde <KiFlushSymlinkChanges()+0x5f>
c000ae26:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	53                   	push   ebx
c000ae34:	e8 e1 09 00 00       	call   c000b81a <File::close()>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 db                	test   ebx,ebx
c000ae3e:	74 0c                	je     c000ae4c <KiFlushSymlinkChanges()+0xcd>
c000ae40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	83 c4 14             	add    esp,0x14
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	c3                   	ret    

c000ae52 <KiDeinitialiseSymlinks(void*)>:
c000ae52:	e9 28 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae57:	53                   	push   ebx
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae63:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6c:	68 00 01 00 00       	push   0x100
c000ae71:	6a 00                	push   0x0
c000ae73:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae7a:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae81:	c1 e0 08             	shl    eax,0x8
c000ae84:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae89:	50                   	push   eax
c000ae8a:	e8 61 56 ff ff       	call   c00004f0 <memset>
c000ae8f:	58                   	pop    eax
c000ae90:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae95:	5a                   	pop    edx
c000ae96:	c1 e0 08             	shl    eax,0x8
c000ae99:	53                   	push   ebx
c000ae9a:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae9f:	50                   	push   eax
c000aea0:	e8 ab 57 ff ff       	call   c0000650 <strcpy>
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	40                   	inc    eax
c000aeae:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb3:	83 f8 03             	cmp    eax,0x3
c000aeb6:	7e 09                	jle    c000aec1 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb8:	83 c4 08             	add    esp,0x8
c000aebb:	5b                   	pop    ebx
c000aebc:	e9 be fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec1:	83 c4 08             	add    esp,0x8
c000aec4:	5b                   	pop    ebx
c000aec5:	c3                   	ret    

c000aec6 <KiIsSymlinkRegistered(char const*)>:
c000aec6:	53                   	push   ebx
c000aec7:	31 db                	xor    ebx,ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000aed2:	7e 30                	jle    c000af04 <KiIsSymlinkRegistered(char const*)+0x3e>
c000aed4:	50                   	push   eax
c000aed5:	50                   	push   eax
c000aed6:	89 d8                	mov    eax,ebx
c000aed8:	c1 e0 08             	shl    eax,0x8
c000aedb:	05 00 60 02 c0       	add    eax,0xc0026000
c000aee0:	50                   	push   eax
c000aee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee5:	e8 96 58 ff ff       	call   c0000780 <strcmp>
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	85 c0                	test   eax,eax
c000aeef:	75 10                	jne    c000af01 <KiIsSymlinkRegistered(char const*)+0x3b>
c000aef1:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000aef8:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000aeff:	eb 07                	jmp    c000af08 <KiIsSymlinkRegistered(char const*)+0x42>
c000af01:	43                   	inc    ebx
c000af02:	eb c8                	jmp    c000aecc <KiIsSymlinkRegistered(char const*)+0x6>
c000af04:	31 c0                	xor    eax,eax
c000af06:	31 d2                	xor    edx,edx
c000af08:	83 c4 08             	add    esp,0x8
c000af0b:	5b                   	pop    ebx
c000af0c:	c3                   	ret    

c000af0d <KeDereferenceSymlink(char const*, char*)>:
c000af0d:	55                   	push   ebp
c000af0e:	57                   	push   edi
c000af0f:	56                   	push   esi
c000af10:	53                   	push   ebx
c000af11:	83 ec 48             	sub    esp,0x48
c000af14:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000af18:	56                   	push   esi
c000af19:	e8 a8 ff ff ff       	call   c000aec6 <KiIsSymlinkRegistered(char const*)>
c000af1e:	83 c4 10             	add    esp,0x10
c000af21:	89 c7                	mov    edi,eax
c000af23:	89 d0                	mov    eax,edx
c000af25:	09 f8                	or     eax,edi
c000af27:	0f 84 64 01 00 00    	je     c000b091 <KeDereferenceSymlink(char const*, char*)+0x184>
c000af2d:	83 ec 0c             	sub    esp,0xc
c000af30:	89 d5                	mov    ebp,edx
c000af32:	68 14 01 00 00       	push   0x114
c000af37:	e8 97 cb ff ff       	call   c0007ad3 <malloc>
c000af3c:	83 c4 0c             	add    esp,0xc
c000af3f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af45:	56                   	push   esi
c000af46:	50                   	push   eax
c000af47:	89 c3                	mov    ebx,eax
c000af49:	e8 b2 07 00 00       	call   c000b700 <File::File(char const*, Process*)>
c000af4e:	83 c4 10             	add    esp,0x10
c000af51:	85 db                	test   ebx,ebx
c000af53:	0f 84 1f 01 00 00    	je     c000b078 <KeDereferenceSymlink(char const*, char*)+0x16b>
c000af59:	52                   	push   edx
c000af5a:	52                   	push   edx
c000af5b:	6a 01                	push   0x1
c000af5d:	53                   	push   ebx
c000af5e:	e8 59 08 00 00       	call   c000b7bc <File::open(FileOpenMode)>
c000af63:	83 c4 10             	add    esp,0x10
c000af66:	85 c0                	test   eax,eax
c000af68:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af6a:	74 09                	je     c000af75 <KeDereferenceSymlink(char const*, char*)+0x68>
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	53                   	push   ebx
c000af70:	e9 fd 00 00 00       	jmp    c000b072 <KeDereferenceSymlink(char const*, char*)+0x165>
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 74 24 18          	lea    esi,[esp+0x18]
c000af7c:	56                   	push   esi
c000af7d:	8d 54 24 37          	lea    edx,[esp+0x37]
c000af81:	52                   	push   edx
c000af82:	6a 00                	push   0x0
c000af84:	6a 08                	push   0x8
c000af86:	53                   	push   ebx
c000af87:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000af8a:	83 c4 20             	add    esp,0x20
c000af8d:	85 c0                	test   eax,eax
c000af8f:	0f 85 cf 00 00 00    	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000af95:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000af9a:	0f 85 c4 00 00 00    	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000afa0:	83 ec 0c             	sub    esp,0xc
c000afa3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afa5:	56                   	push   esi
c000afa6:	8d 54 24 20          	lea    edx,[esp+0x20]
c000afaa:	52                   	push   edx
c000afab:	6a 00                	push   0x0
c000afad:	6a 08                	push   0x8
c000afaf:	53                   	push   ebx
c000afb0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afb3:	83 c4 20             	add    esp,0x20
c000afb6:	85 c0                	test   eax,eax
c000afb8:	0f 85 a6 00 00 00    	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000afbe:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000afc3:	0f 85 9b 00 00 00    	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000afc9:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000afcd:	0f 85 be 00 00 00    	jne    c000b091 <KeDereferenceSymlink(char const*, char*)+0x184>
c000afd3:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000afd7:	0f 85 b4 00 00 00    	jne    c000b091 <KeDereferenceSymlink(char const*, char*)+0x184>
c000afdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000afe5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000afed:	50                   	push   eax
c000afee:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000aff2:	50                   	push   eax
c000aff3:	8d 44 24 20          	lea    eax,[esp+0x20]
c000aff7:	50                   	push   eax
c000aff8:	53                   	push   ebx
c000aff9:	e8 c0 0a 00 00       	call   c000babe <File::stat(unsigned long long*, bool*)>
c000affe:	83 c4 10             	add    esp,0x10
c000b001:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b006:	75 5c                	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b008:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b00c:	31 c9                	xor    ecx,ecx
c000b00e:	bf 0f 00 00 00       	mov    edi,0xf
c000b013:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b017:	39 c7                	cmp    edi,eax
c000b019:	89 cf                	mov    edi,ecx
c000b01b:	19 d7                	sbb    edi,edx
c000b01d:	73 45                	jae    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b01f:	83 c0 f0             	add    eax,0xfffffff0
c000b022:	bf ff 00 00 00       	mov    edi,0xff
c000b027:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b02b:	83 d2 ff             	adc    edx,0xffffffff
c000b02e:	39 c7                	cmp    edi,eax
c000b030:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b034:	19 d1                	sbb    ecx,edx
c000b036:	72 40                	jb     c000b078 <KeDereferenceSymlink(char const*, char*)+0x16b>
c000b038:	83 ec 0c             	sub    esp,0xc
c000b03b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b03d:	56                   	push   esi
c000b03e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b042:	52                   	push   edx
c000b043:	50                   	push   eax
c000b044:	53                   	push   ebx
c000b045:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b048:	83 c4 20             	add    esp,0x20
c000b04b:	85 c0                	test   eax,eax
c000b04d:	75 15                	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b04f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b053:	89 c7                	mov    edi,eax
c000b055:	c1 ff 1f             	sar    edi,0x1f
c000b058:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b05c:	75 06                	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b05e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b062:	74 19                	je     c000b07d <KeDereferenceSymlink(char const*, char*)+0x170>
c000b064:	83 ec 0c             	sub    esp,0xc
c000b067:	53                   	push   ebx
c000b068:	e8 ad 07 00 00       	call   c000b81a <File::close()>
c000b06d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b06f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b072:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	83 c8 ff             	or     eax,0xffffffff
c000b07b:	eb 16                	jmp    c000b093 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b07d:	83 ec 0c             	sub    esp,0xc
c000b080:	53                   	push   ebx
c000b081:	e8 94 07 00 00       	call   c000b81a <File::close()>
c000b086:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b088:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b08b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b08e:	83 c4 10             	add    esp,0x10
c000b091:	31 c0                	xor    eax,eax
c000b093:	83 c4 3c             	add    esp,0x3c
c000b096:	5b                   	pop    ebx
c000b097:	5e                   	pop    esi
c000b098:	5f                   	pop    edi
c000b099:	5d                   	pop    ebp
c000b09a:	c3                   	ret    

c000b09b <KeCreateSymlink(char const*, char const*)>:
c000b09b:	55                   	push   ebp
c000b09c:	57                   	push   edi
c000b09d:	56                   	push   esi
c000b09e:	53                   	push   ebx
c000b09f:	83 ec 38             	sub    esp,0x38
c000b0a2:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b0a6:	68 14 01 00 00       	push   0x114
c000b0ab:	e8 23 ca ff ff       	call   c0007ad3 <malloc>
c000b0b0:	83 c4 0c             	add    esp,0xc
c000b0b3:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b0b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0bd:	89 c3                	mov    ebx,eax
c000b0bf:	50                   	push   eax
c000b0c0:	e8 3b 06 00 00       	call   c000b700 <File::File(char const*, Process*)>
c000b0c5:	83 c4 10             	add    esp,0x10
c000b0c8:	85 db                	test   ebx,ebx
c000b0ca:	b8 01 00 00 00       	mov    eax,0x1
c000b0cf:	0f 84 fb 00 00 00    	je     c000b1d0 <KeCreateSymlink(char const*, char const*)+0x135>
c000b0d5:	52                   	push   edx
c000b0d6:	52                   	push   edx
c000b0d7:	6a 12                	push   0x12
c000b0d9:	53                   	push   ebx
c000b0da:	e8 dd 06 00 00       	call   c000b7bc <File::open(FileOpenMode)>
c000b0df:	83 c4 10             	add    esp,0x10
c000b0e2:	85 c0                	test   eax,eax
c000b0e4:	74 0b                	je     c000b0f1 <KeCreateSymlink(char const*, char const*)+0x56>
c000b0e6:	83 ec 0c             	sub    esp,0xc
c000b0e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0eb:	53                   	push   ebx
c000b0ec:	e9 d4 00 00 00       	jmp    c000b1c5 <KeCreateSymlink(char const*, char const*)+0x12a>
c000b0f1:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b0f5:	be 04 12 02 c0       	mov    esi,0xc0021204
c000b0fa:	b9 09 00 00 00       	mov    ecx,0x9
c000b0ff:	fc                   	cld    
c000b100:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b102:	83 ec 0c             	sub    esp,0xc
c000b105:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b109:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b10b:	56                   	push   esi
c000b10c:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b110:	52                   	push   edx
c000b111:	6a 00                	push   0x0
c000b113:	6a 08                	push   0x8
c000b115:	53                   	push   ebx
c000b116:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b119:	83 c4 20             	add    esp,0x20
c000b11c:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b121:	0f 85 90 00 00 00    	jne    c000b1b7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b127:	85 c0                	test   eax,eax
c000b129:	0f 85 88 00 00 00    	jne    c000b1b7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b12f:	e8 e0 fb ff ff       	call   c000ad14 <KiCreateSymlinkID()>
c000b134:	83 ec 0c             	sub    esp,0xc
c000b137:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b13b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b13f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b141:	56                   	push   esi
c000b142:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b146:	52                   	push   edx
c000b147:	6a 00                	push   0x0
c000b149:	6a 08                	push   0x8
c000b14b:	53                   	push   ebx
c000b14c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b14f:	83 c4 20             	add    esp,0x20
c000b152:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b157:	75 5e                	jne    c000b1b7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b159:	85 c0                	test   eax,eax
c000b15b:	75 5a                	jne    c000b1b7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b15d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b165:	55                   	push   ebp
c000b166:	e8 15 54 ff ff       	call   c0000580 <strlen>
c000b16b:	31 d2                	xor    edx,edx
c000b16d:	89 34 24             	mov    DWORD PTR [esp],esi
c000b170:	55                   	push   ebp
c000b171:	52                   	push   edx
c000b172:	50                   	push   eax
c000b173:	53                   	push   ebx
c000b174:	ff d7                	call   edi
c000b176:	83 c4 14             	add    esp,0x14
c000b179:	55                   	push   ebp
c000b17a:	89 c6                	mov    esi,eax
c000b17c:	e8 ff 53 ff ff       	call   c0000580 <strlen>
c000b181:	83 c4 10             	add    esp,0x10
c000b184:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b188:	75 2d                	jne    c000b1b7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b18a:	85 f6                	test   esi,esi
c000b18c:	75 29                	jne    c000b1b7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b18e:	50                   	push   eax
c000b18f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b193:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b197:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b19b:	e8 b7 fc ff ff       	call   c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>
c000b1a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1a3:	e8 72 06 00 00       	call   c000b81a <File::close()>
c000b1a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	31 c0                	xor    eax,eax
c000b1b5:	eb 19                	jmp    c000b1d0 <KeCreateSymlink(char const*, char const*)+0x135>
c000b1b7:	83 ec 0c             	sub    esp,0xc
c000b1ba:	53                   	push   ebx
c000b1bb:	e8 5a 06 00 00       	call   c000b81a <File::close()>
c000b1c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	b8 01 00 00 00       	mov    eax,0x1
c000b1d0:	83 c4 2c             	add    esp,0x2c
c000b1d3:	5b                   	pop    ebx
c000b1d4:	5e                   	pop    esi
c000b1d5:	5f                   	pop    edi
c000b1d6:	5d                   	pop    ebp
c000b1d7:	c3                   	ret    

c000b1d8 <KeInitialiseSymlinks()>:
c000b1d8:	53                   	push   ebx
c000b1d9:	83 ec 10             	sub    esp,0x10
c000b1dc:	6a 00                	push   0x0
c000b1de:	68 52 ae 00 c0       	push   0xc000ae52
c000b1e3:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b1ed:	e8 d4 57 00 00       	call   c00109c6 <KeRegisterAtexit(void (*)(void*), void*)>
c000b1f2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b1f9:	e8 d5 c8 ff ff       	call   c0007ad3 <malloc>
c000b1fe:	83 c4 0c             	add    esp,0xc
c000b201:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b207:	68 98 11 02 c0       	push   0xc0021198
c000b20c:	50                   	push   eax
c000b20d:	89 c3                	mov    ebx,eax
c000b20f:	e8 ec 04 00 00       	call   c000b700 <File::File(char const*, Process*)>
c000b214:	83 c4 10             	add    esp,0x10
c000b217:	85 db                	test   ebx,ebx
c000b219:	75 10                	jne    c000b22b <KeInitialiseSymlinks()+0x53>
c000b21b:	83 ec 0c             	sub    esp,0xc
c000b21e:	68 0d 12 02 c0       	push   0xc002120d
c000b223:	e8 85 5f 00 00       	call   c00111ad <KePanic(char const*)>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	83 ec 0c             	sub    esp,0xc
c000b22e:	53                   	push   ebx
c000b22f:	e8 4c 08 00 00       	call   c000ba80 <File::exists()>
c000b234:	83 c4 10             	add    esp,0x10
c000b237:	84 c0                	test   al,al
c000b239:	75 2d                	jne    c000b268 <KeInitialiseSymlinks()+0x90>
c000b23b:	52                   	push   edx
c000b23c:	52                   	push   edx
c000b23d:	6a 12                	push   0x12
c000b23f:	53                   	push   ebx
c000b240:	e8 77 05 00 00       	call   c000b7bc <File::open(FileOpenMode)>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	85 c0                	test   eax,eax
c000b24a:	74 10                	je     c000b25c <KeInitialiseSymlinks()+0x84>
c000b24c:	83 ec 0c             	sub    esp,0xc
c000b24f:	68 2a 12 02 c0       	push   0xc002122a
c000b254:	e8 54 5f 00 00       	call   c00111ad <KePanic(char const*)>
c000b259:	83 c4 10             	add    esp,0x10
c000b25c:	83 ec 0c             	sub    esp,0xc
c000b25f:	53                   	push   ebx
c000b260:	e8 b5 05 00 00       	call   c000b81a <File::close()>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	85 db                	test   ebx,ebx
c000b26a:	74 0c                	je     c000b278 <KeInitialiseSymlinks()+0xa0>
c000b26c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b26e:	83 ec 0c             	sub    esp,0xc
c000b271:	53                   	push   ebx
c000b272:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b275:	83 c4 10             	add    esp,0x10
c000b278:	50                   	push   eax
c000b279:	50                   	push   eax
c000b27a:	68 47 12 02 c0       	push   0xc0021247
c000b27f:	68 55 12 02 c0       	push   0xc0021255
c000b284:	e8 12 fe ff ff       	call   c000b09b <KeCreateSymlink(char const*, char const*)>
c000b289:	83 c4 18             	add    esp,0x18
c000b28c:	5b                   	pop    ebx
c000b28d:	c3                   	ret    

c000b28e <File::read(unsigned long long, void*, int*)>:
c000b28e:	53                   	push   ebx
c000b28f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b293:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b297:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b29e:	83 f8 19             	cmp    eax,0x19
c000b2a1:	77 35                	ja     c000b2d8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2a3:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b2aa:	85 c0                	test   eax,eax
c000b2ac:	74 2a                	je     c000b2d8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2ae:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2b4:	85 c0                	test   eax,eax
c000b2b6:	74 20                	je     c000b2d8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2b8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2bc:	74 21                	je     c000b2df <File::read(unsigned long long, void*, int*)+0x51>
c000b2be:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2c0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b2c4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b2ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b2ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b2d2:	5b                   	pop    ebx
c000b2d3:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b2d6:	ff e0                	jmp    eax
c000b2d8:	b8 0b 00 00 00       	mov    eax,0xb
c000b2dd:	eb 05                	jmp    c000b2e4 <File::read(unsigned long long, void*, int*)+0x56>
c000b2df:	b8 05 00 00 00       	mov    eax,0x5
c000b2e4:	5b                   	pop    ebx
c000b2e5:	c3                   	ret    

c000b2e6 <File::write(unsigned long long, void*, int*)>:
c000b2e6:	53                   	push   ebx
c000b2e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b2eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b2ef:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b2f6:	83 f8 19             	cmp    eax,0x19
c000b2f9:	77 35                	ja     c000b330 <File::write(unsigned long long, void*, int*)+0x4a>
c000b2fb:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b302:	85 c0                	test   eax,eax
c000b304:	74 2a                	je     c000b330 <File::write(unsigned long long, void*, int*)+0x4a>
c000b306:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b30c:	85 c0                	test   eax,eax
c000b30e:	74 20                	je     c000b330 <File::write(unsigned long long, void*, int*)+0x4a>
c000b310:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b314:	74 21                	je     c000b337 <File::write(unsigned long long, void*, int*)+0x51>
c000b316:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b318:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b31c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b322:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b326:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b32a:	5b                   	pop    ebx
c000b32b:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b32e:	ff e0                	jmp    eax
c000b330:	b8 0b 00 00 00       	mov    eax,0xb
c000b335:	eb 05                	jmp    c000b33c <File::write(unsigned long long, void*, int*)+0x56>
c000b337:	b8 05 00 00 00       	mov    eax,0x5
c000b33c:	5b                   	pop    ebx
c000b33d:	c3                   	ret    

c000b33e <Directory::read(unsigned long long, void*, int*)>:
c000b33e:	53                   	push   ebx
c000b33f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b343:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b347:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b34e:	83 f8 19             	cmp    eax,0x19
c000b351:	77 35                	ja     c000b388 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b353:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b35a:	85 c0                	test   eax,eax
c000b35c:	74 2a                	je     c000b388 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b35e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b364:	85 c0                	test   eax,eax
c000b366:	74 20                	je     c000b388 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b368:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b36c:	74 21                	je     c000b38f <Directory::read(unsigned long long, void*, int*)+0x51>
c000b36e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b370:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b374:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b37a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b37e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b382:	5b                   	pop    ebx
c000b383:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b386:	ff e0                	jmp    eax
c000b388:	b8 0b 00 00 00       	mov    eax,0xb
c000b38d:	eb 05                	jmp    c000b394 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b38f:	b8 05 00 00 00       	mov    eax,0x5
c000b394:	5b                   	pop    ebx
c000b395:	c3                   	ret    

c000b396 <Directory::write(unsigned long long, void*, int*)>:
c000b396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b39a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b3a1:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a6:	83 fa 19             	cmp    edx,0x19
c000b3a9:	77 18                	ja     c000b3c3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3ab:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b3b2:	85 d2                	test   edx,edx
c000b3b4:	74 0d                	je     c000b3c3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3b6:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b3bd:	19 c0                	sbb    eax,eax
c000b3bf:	83 e0 0a             	and    eax,0xa
c000b3c2:	40                   	inc    eax
c000b3c3:	c3                   	ret    

c000b3c4 <File::isAtty()>:
c000b3c4:	31 c0                	xor    eax,eax
c000b3c6:	c3                   	ret    
c000b3c7:	90                   	nop

c000b3c8 <Directory::isAtty()>:
c000b3c8:	31 c0                	xor    eax,eax
c000b3ca:	c3                   	ret    
c000b3cb:	90                   	nop

c000b3cc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b3cc:	b8 0a 00 00 00       	mov    eax,0xa
c000b3d1:	c3                   	ret    

c000b3d2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b3d2:	b8 0a 00 00 00       	mov    eax,0xa
c000b3d7:	c3                   	ret    

c000b3d8 <Filesystem::allocateSwapfile(char const*, int)>:
c000b3d8:	31 c0                	xor    eax,eax
c000b3da:	31 d2                	xor    edx,edx
c000b3dc:	c3                   	ret    
c000b3dd:	90                   	nop

c000b3de <File::~File()>:
c000b3de:	83 ec 0c             	sub    esp,0xc
c000b3e1:	ba e8 12 02 c0       	mov    edx,0xc00212e8
c000b3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ea:	89 10                	mov    DWORD PTR [eax],edx
c000b3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f0:	83 ec 0c             	sub    esp,0xc
c000b3f3:	50                   	push   eax
c000b3f4:	e8 93 df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b3f9:	83 c4 10             	add    esp,0x10
c000b3fc:	90                   	nop
c000b3fd:	83 c4 0c             	add    esp,0xc
c000b400:	c3                   	ret    
c000b401:	90                   	nop

c000b402 <File::~File()>:
c000b402:	83 ec 0c             	sub    esp,0xc
c000b405:	83 ec 0c             	sub    esp,0xc
c000b408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40c:	e8 cd ff ff ff       	call   c000b3de <File::~File()>
c000b411:	83 c4 10             	add    esp,0x10
c000b414:	83 ec 08             	sub    esp,0x8
c000b417:	68 14 01 00 00       	push   0x114
c000b41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b420:	e8 e7 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	83 c4 0c             	add    esp,0xc
c000b42b:	c3                   	ret    

c000b42c <Directory::~Directory()>:
c000b42c:	83 ec 0c             	sub    esp,0xc
c000b42f:	ba 04 13 02 c0       	mov    edx,0xc0021304
c000b434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b438:	89 10                	mov    DWORD PTR [eax],edx
c000b43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b43e:	83 ec 0c             	sub    esp,0xc
c000b441:	50                   	push   eax
c000b442:	e8 45 df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b447:	83 c4 10             	add    esp,0x10
c000b44a:	90                   	nop
c000b44b:	83 c4 0c             	add    esp,0xc
c000b44e:	c3                   	ret    
c000b44f:	90                   	nop

c000b450 <Directory::~Directory()>:
c000b450:	83 ec 0c             	sub    esp,0xc
c000b453:	83 ec 0c             	sub    esp,0xc
c000b456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45a:	e8 cd ff ff ff       	call   c000b42c <Directory::~Directory()>
c000b45f:	83 c4 10             	add    esp,0x10
c000b462:	83 ec 08             	sub    esp,0x8
c000b465:	68 14 01 00 00       	push   0x114
c000b46a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46e:	e8 99 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b473:	83 c4 10             	add    esp,0x10
c000b476:	83 c4 0c             	add    esp,0xc
c000b479:	c3                   	ret    

c000b47a <Filesystem::Filesystem()>:
c000b47a:	ba 7c 12 02 c0       	mov    edx,0xc002127c
c000b47f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b483:	89 10                	mov    DWORD PTR [eax],edx
c000b485:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b48b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b496:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b49b:	90                   	nop
c000b49c:	c3                   	ret    
c000b49d:	90                   	nop

c000b49e <Filesystem::~Filesystem()>:
c000b49e:	ba 7c 12 02 c0       	mov    edx,0xc002127c
c000b4a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a7:	89 10                	mov    DWORD PTR [eax],edx
c000b4a9:	90                   	nop
c000b4aa:	c3                   	ret    
c000b4ab:	90                   	nop

c000b4ac <Filesystem::~Filesystem()>:
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b4b3:	e8 e6 ff ff ff       	call   c000b49e <Filesystem::~Filesystem()>
c000b4b8:	83 c4 04             	add    esp,0x4
c000b4bb:	83 ec 08             	sub    esp,0x8
c000b4be:	6a 08                	push   0x8
c000b4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c4:	e8 43 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4c9:	83 c4 10             	add    esp,0x10
c000b4cc:	83 c4 0c             	add    esp,0xc
c000b4cf:	c3                   	ret    

c000b4d0 <Fs::getcwd(Process*, char*, int)>:
c000b4d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b4d4:	31 c0                	xor    eax,eax
c000b4d6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b4da:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b4dd:	7d 15                	jge    c000b4f4 <Fs::getcwd(Process*, char*, int)+0x24>
c000b4df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b4e3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b4ea:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b4ed:	84 c9                	test   cl,cl
c000b4ef:	74 06                	je     c000b4f7 <Fs::getcwd(Process*, char*, int)+0x27>
c000b4f1:	40                   	inc    eax
c000b4f2:	eb e2                	jmp    c000b4d6 <Fs::getcwd(Process*, char*, int)+0x6>
c000b4f4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b4f7:	31 c0                	xor    eax,eax
c000b4f9:	c3                   	ret    

c000b4fa <Fs::initVFS()>:
c000b4fa:	83 ec 18             	sub    esp,0x18
c000b4fd:	6a 08                	push   0x8
c000b4ff:	e8 cf c5 ff ff       	call   c0007ad3 <malloc>
c000b504:	89 04 24             	mov    DWORD PTR [esp],eax
c000b507:	e8 18 e1 00 00       	call   c0019624 <FAT::FAT()>
c000b50c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b513:	e8 bb c5 ff ff       	call   c0007ad3 <malloc>
c000b518:	89 04 24             	mov    DWORD PTR [esp],eax
c000b51b:	e8 32 f0 00 00       	call   c001a552 <ISO9660::ISO9660()>
c000b520:	83 c4 1c             	add    esp,0x1c
c000b523:	c3                   	ret    

c000b524 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b524:	55                   	push   ebp
c000b525:	57                   	push   edi
c000b526:	56                   	push   esi
c000b527:	53                   	push   ebx
c000b528:	81 ec 20 04 00 00    	sub    esp,0x420
c000b52e:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000b535:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b53c:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b543:	68 00 04 00 00       	push   0x400
c000b548:	6a 00                	push   0x0
c000b54a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b54e:	56                   	push   esi
c000b54f:	e8 9c 4f ff ff       	call   c00004f0 <memset>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b55b:	75 0b                	jne    c000b568 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b55d:	50                   	push   eax
c000b55e:	50                   	push   eax
c000b55f:	57                   	push   edi
c000b560:	56                   	push   esi
c000b561:	e8 ea 50 ff ff       	call   c0000650 <strcpy>
c000b566:	eb 45                	jmp    c000b5ad <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000b568:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b56b:	83 f8 2f             	cmp    eax,0x2f
c000b56e:	74 05                	je     c000b575 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b570:	83 f8 5c             	cmp    eax,0x5c
c000b573:	75 19                	jne    c000b58e <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000b575:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b578:	3c 60                	cmp    al,0x60
c000b57a:	7e 03                	jle    c000b57f <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b57c:	83 e8 20             	sub    eax,0x20
c000b57f:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b583:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b58a:	50                   	push   eax
c000b58b:	50                   	push   eax
c000b58c:	eb 18                	jmp    c000b5a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000b58e:	50                   	push   eax
c000b58f:	50                   	push   eax
c000b590:	55                   	push   ebp
c000b591:	56                   	push   esi
c000b592:	e8 b9 50 ff ff       	call   c0000650 <strcpy>
c000b597:	5a                   	pop    edx
c000b598:	59                   	pop    ecx
c000b599:	68 23 22 02 c0       	push   0xc0022223
c000b59e:	56                   	push   esi
c000b59f:	e8 cc 52 ff ff       	call   c0000870 <strcat>
c000b5a4:	5d                   	pop    ebp
c000b5a5:	58                   	pop    eax
c000b5a6:	57                   	push   edi
c000b5a7:	56                   	push   esi
c000b5a8:	e8 c3 52 ff ff       	call   c0000870 <strcat>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b5b4:	3c 60                	cmp    al,0x60
c000b5b6:	7e 03                	jle    c000b5bb <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000b5b8:	83 e8 20             	sub    eax,0x20
c000b5bb:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b5bf:	88 03                	mov    BYTE PTR [ebx],al
c000b5c1:	b8 03 00 00 00       	mov    eax,0x3
c000b5c6:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b5cd:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b5d3:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b5d7:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000b5df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b5e3:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000b5e8:	89 fa                	mov    edx,edi
c000b5ea:	0f be ea             	movsx  ebp,dl
c000b5ed:	85 ed                	test   ebp,ebp
c000b5ef:	0f 84 af 00 00 00    	je     c000b6a4 <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000b5f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b5f9:	42                   	inc    edx
c000b5fa:	83 fd 2f             	cmp    ebp,0x2f
c000b5fd:	74 05                	je     c000b604 <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000b5ff:	83 fd 5c             	cmp    ebp,0x5c
c000b602:	75 14                	jne    c000b618 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b604:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b609:	89 c5                	mov    ebp,eax
c000b60b:	74 0b                	je     c000b618 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b60d:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b611:	40                   	inc    eax
c000b612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b616:	eb c7                	jmp    c000b5df <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000b618:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b61c:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000b621:	89 f9                	mov    ecx,edi
c000b623:	0f be e9             	movsx  ebp,cl
c000b626:	75 63                	jne    c000b68b <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b628:	83 fd 2e             	cmp    ebp,0x2e
c000b62b:	75 5e                	jne    c000b68b <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b62d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b631:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b636:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000b63b:	74 18                	je     c000b655 <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000b63d:	83 fd 2e             	cmp    ebp,0x2e
c000b640:	74 57                	je     c000b699 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b642:	89 ca                	mov    edx,ecx
c000b644:	42                   	inc    edx
c000b645:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b649:	83 f9 2f             	cmp    ecx,0x2f
c000b64c:	74 f6                	je     c000b644 <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b64e:	83 f9 5c             	cmp    ecx,0x5c
c000b651:	74 f1                	je     c000b644 <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b653:	eb bd                	jmp    c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b655:	83 fd 2e             	cmp    ebp,0x2e
c000b658:	74 3f                	je     c000b699 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b65a:	83 f8 03             	cmp    eax,0x3
c000b65d:	74 b3                	je     c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b65f:	42                   	inc    edx
c000b660:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b664:	83 f9 2f             	cmp    ecx,0x2f
c000b667:	74 f6                	je     c000b65f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b669:	83 f9 5c             	cmp    ecx,0x5c
c000b66c:	74 f1                	je     c000b65f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b66e:	48                   	dec    eax
c000b66f:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b673:	75 06                	jne    c000b67b <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b675:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b679:	eb f3                	jmp    c000b66e <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b67b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b67f:	74 07                	je     c000b688 <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000b681:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b685:	48                   	dec    eax
c000b686:	eb f3                	jmp    c000b67b <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b688:	40                   	inc    eax
c000b689:	eb 87                	jmp    c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b68b:	83 fd 2f             	cmp    ebp,0x2f
c000b68e:	74 82                	je     c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b690:	83 fd 5c             	cmp    ebp,0x5c
c000b693:	0f 84 79 ff ff ff    	je     c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b699:	89 f9                	mov    ecx,edi
c000b69b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b69e:	40                   	inc    eax
c000b69f:	e9 6e ff ff ff       	jmp    c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b6a4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6a8:	83 ec 0c             	sub    esp,0xc
c000b6ab:	53                   	push   ebx
c000b6ac:	e8 cf 4e ff ff       	call   c0000580 <strlen>
c000b6b1:	83 c4 10             	add    esp,0x10
c000b6b4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b6b9:	75 26                	jne    c000b6e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000b6bb:	83 ec 0c             	sub    esp,0xc
c000b6be:	53                   	push   ebx
c000b6bf:	e8 bc 4e ff ff       	call   c0000580 <strlen>
c000b6c4:	83 c4 10             	add    esp,0x10
c000b6c7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b6cc:	74 26                	je     c000b6f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000b6ce:	83 ec 0c             	sub    esp,0xc
c000b6d1:	53                   	push   ebx
c000b6d2:	e8 a9 4e ff ff       	call   c0000580 <strlen>
c000b6d7:	83 c4 10             	add    esp,0x10
c000b6da:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b6df:	eb c7                	jmp    c000b6a8 <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000b6e1:	83 ec 0c             	sub    esp,0xc
c000b6e4:	53                   	push   ebx
c000b6e5:	e8 96 4e ff ff       	call   c0000580 <strlen>
c000b6ea:	83 c4 10             	add    esp,0x10
c000b6ed:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b6f2:	74 c7                	je     c000b6bb <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b6f4:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b6fa:	5b                   	pop    ebx
c000b6fb:	5e                   	pop    esi
c000b6fc:	5f                   	pop    edi
c000b6fd:	5d                   	pop    ebp
c000b6fe:	c3                   	ret    
c000b6ff:	90                   	nop

c000b700 <File::File(char const*, Process*)>:
c000b700:	83 ec 0c             	sub    esp,0xc
c000b703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b707:	83 ec 08             	sub    esp,0x8
c000b70a:	6a 00                	push   0x0
c000b70c:	50                   	push   eax
c000b70d:	e8 94 da ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b712:	83 c4 10             	add    esp,0x10
c000b715:	ba e8 12 02 c0       	mov    edx,0xc00212e8
c000b71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71e:	89 10                	mov    DWORD PTR [eax],edx
c000b720:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b724:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b72e:	83 c0 0d             	add    eax,0xd
c000b731:	83 ec 04             	sub    esp,0x4
c000b734:	52                   	push   edx
c000b735:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b739:	50                   	push   eax
c000b73a:	e8 e5 fd ff ff       	call   c000b524 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b73f:	83 c4 10             	add    esp,0x10
c000b742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b746:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b749:	83 e8 41             	sub    eax,0x41
c000b74c:	88 c2                	mov    dl,al
c000b74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b752:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b764:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b76a:	0f b6 c0             	movzx  eax,al
c000b76d:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b774:	85 c0                	test   eax,eax
c000b776:	74 3e                	je     c000b7b6 <File::File(char const*, Process*)+0xb6>
c000b778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b77c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b782:	0f b6 c0             	movzx  eax,al
c000b785:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b78c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b792:	85 c0                	test   eax,eax
c000b794:	75 20                	jne    c000b7b6 <File::File(char const*, Process*)+0xb6>
c000b796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b79a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b7a0:	0f b6 c0             	movzx  eax,al
c000b7a3:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	50                   	push   eax
c000b7ae:	e8 85 21 00 00       	call   c000d938 <LogicalDisk::mount()>
c000b7b3:	83 c4 10             	add    esp,0x10
c000b7b6:	90                   	nop
c000b7b7:	83 c4 0c             	add    esp,0xc
c000b7ba:	c3                   	ret    
c000b7bb:	90                   	nop

c000b7bc <File::open(FileOpenMode)>:
c000b7bc:	53                   	push   ebx
c000b7bd:	b8 0b 00 00 00       	mov    eax,0xb
c000b7c2:	83 ec 08             	sub    esp,0x8
c000b7c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7c9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b7d0:	83 fa 19             	cmp    edx,0x19
c000b7d3:	77 40                	ja     c000b815 <File::open(FileOpenMode)+0x59>
c000b7d5:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b7dc:	85 d2                	test   edx,edx
c000b7de:	74 35                	je     c000b815 <File::open(FileOpenMode)+0x59>
c000b7e0:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b7e6:	85 d2                	test   edx,edx
c000b7e8:	74 2b                	je     c000b815 <File::open(FileOpenMode)+0x59>
c000b7ea:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b7ee:	b8 06 00 00 00       	mov    eax,0x6
c000b7f3:	75 20                	jne    c000b815 <File::open(FileOpenMode)+0x59>
c000b7f5:	8b 02                	mov    eax,DWORD PTR [edx]
c000b7f7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b7fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b801:	51                   	push   ecx
c000b802:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b805:	51                   	push   ecx
c000b806:	52                   	push   edx
c000b807:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b80a:	83 c4 10             	add    esp,0x10
c000b80d:	85 c0                	test   eax,eax
c000b80f:	75 04                	jne    c000b815 <File::open(FileOpenMode)+0x59>
c000b811:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b815:	83 c4 08             	add    esp,0x8
c000b818:	5b                   	pop    ebx
c000b819:	c3                   	ret    

c000b81a <File::close()>:
c000b81a:	53                   	push   ebx
c000b81b:	b8 0b 00 00 00       	mov    eax,0xb
c000b820:	83 ec 08             	sub    esp,0x8
c000b823:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b827:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b82e:	83 f9 19             	cmp    ecx,0x19
c000b831:	77 41                	ja     c000b874 <File::close()+0x5a>
c000b833:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b83a:	85 db                	test   ebx,ebx
c000b83c:	74 36                	je     c000b874 <File::close()+0x5a>
c000b83e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b845:	74 2d                	je     c000b874 <File::close()+0x5a>
c000b847:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b84b:	b8 05 00 00 00       	mov    eax,0x5
c000b850:	74 22                	je     c000b874 <File::close()+0x5a>
c000b852:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b856:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b85d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b863:	53                   	push   ebx
c000b864:	53                   	push   ebx
c000b865:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b867:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b86d:	50                   	push   eax
c000b86e:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b871:	83 c4 10             	add    esp,0x10
c000b874:	83 c4 08             	add    esp,0x8
c000b877:	5b                   	pop    ebx
c000b878:	c3                   	ret    
c000b879:	90                   	nop

c000b87a <File::seek(unsigned long long)>:
c000b87a:	56                   	push   esi
c000b87b:	b8 0b 00 00 00       	mov    eax,0xb
c000b880:	53                   	push   ebx
c000b881:	51                   	push   ecx
c000b882:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b886:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b88a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b88e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b895:	83 fa 19             	cmp    edx,0x19
c000b898:	77 31                	ja     c000b8cb <File::seek(unsigned long long)+0x51>
c000b89a:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b8a1:	85 d2                	test   edx,edx
c000b8a3:	74 26                	je     c000b8cb <File::seek(unsigned long long)+0x51>
c000b8a5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8ab:	85 d2                	test   edx,edx
c000b8ad:	74 1c                	je     c000b8cb <File::seek(unsigned long long)+0x51>
c000b8af:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b8b3:	b8 05 00 00 00       	mov    eax,0x5
c000b8b8:	74 11                	je     c000b8cb <File::seek(unsigned long long)+0x51>
c000b8ba:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8bc:	53                   	push   ebx
c000b8bd:	51                   	push   ecx
c000b8be:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b8c4:	52                   	push   edx
c000b8c5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8c8:	83 c4 10             	add    esp,0x10
c000b8cb:	5a                   	pop    edx
c000b8cc:	5b                   	pop    ebx
c000b8cd:	5e                   	pop    esi
c000b8ce:	c3                   	ret    
c000b8cf:	90                   	nop

c000b8d0 <File::truncate(unsigned long long)>:
c000b8d0:	56                   	push   esi
c000b8d1:	b8 0b 00 00 00       	mov    eax,0xb
c000b8d6:	53                   	push   ebx
c000b8d7:	51                   	push   ecx
c000b8d8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8e0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8e4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b8eb:	83 fa 19             	cmp    edx,0x19
c000b8ee:	77 31                	ja     c000b921 <File::truncate(unsigned long long)+0x51>
c000b8f0:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b8f7:	85 d2                	test   edx,edx
c000b8f9:	74 26                	je     c000b921 <File::truncate(unsigned long long)+0x51>
c000b8fb:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b901:	85 d2                	test   edx,edx
c000b903:	74 1c                	je     c000b921 <File::truncate(unsigned long long)+0x51>
c000b905:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b909:	b8 05 00 00 00       	mov    eax,0x5
c000b90e:	74 11                	je     c000b921 <File::truncate(unsigned long long)+0x51>
c000b910:	8b 02                	mov    eax,DWORD PTR [edx]
c000b912:	53                   	push   ebx
c000b913:	51                   	push   ecx
c000b914:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b91a:	52                   	push   edx
c000b91b:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b91e:	83 c4 10             	add    esp,0x10
c000b921:	5a                   	pop    edx
c000b922:	5b                   	pop    ebx
c000b923:	5e                   	pop    esi
c000b924:	c3                   	ret    
c000b925:	90                   	nop

c000b926 <File::tell(unsigned long long*)>:
c000b926:	83 ec 0c             	sub    esp,0xc
c000b929:	b8 0b 00 00 00       	mov    eax,0xb
c000b92e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b932:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b939:	83 fa 19             	cmp    edx,0x19
c000b93c:	77 34                	ja     c000b972 <File::tell(unsigned long long*)+0x4c>
c000b93e:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b945:	85 d2                	test   edx,edx
c000b947:	74 29                	je     c000b972 <File::tell(unsigned long long*)+0x4c>
c000b949:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b94f:	85 d2                	test   edx,edx
c000b951:	74 1f                	je     c000b972 <File::tell(unsigned long long*)+0x4c>
c000b953:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b957:	b8 05 00 00 00       	mov    eax,0x5
c000b95c:	74 14                	je     c000b972 <File::tell(unsigned long long*)+0x4c>
c000b95e:	50                   	push   eax
c000b95f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b961:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b965:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b96b:	52                   	push   edx
c000b96c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b96f:	83 c4 10             	add    esp,0x10
c000b972:	83 c4 0c             	add    esp,0xc
c000b975:	c3                   	ret    

c000b976 <File::rewind()>:
c000b976:	83 ec 10             	sub    esp,0x10
c000b979:	6a 00                	push   0x0
c000b97b:	6a 00                	push   0x0
c000b97d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b981:	e8 f4 fe ff ff       	call   c000b87a <File::seek(unsigned long long)>
c000b986:	83 c4 1c             	add    esp,0x1c
c000b989:	c3                   	ret    

c000b98a <File::unlink()>:
c000b98a:	83 ec 0c             	sub    esp,0xc
c000b98d:	b8 0b 00 00 00       	mov    eax,0xb
c000b992:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b996:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b99d:	83 f9 19             	cmp    ecx,0x19
c000b9a0:	77 2f                	ja     c000b9d1 <File::unlink()+0x47>
c000b9a2:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000b9a9:	85 c9                	test   ecx,ecx
c000b9ab:	74 24                	je     c000b9d1 <File::unlink()+0x47>
c000b9ad:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9b3:	85 c9                	test   ecx,ecx
c000b9b5:	74 1a                	je     c000b9d1 <File::unlink()+0x47>
c000b9b7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9bb:	b8 06 00 00 00       	mov    eax,0x6
c000b9c0:	75 0f                	jne    c000b9d1 <File::unlink()+0x47>
c000b9c2:	50                   	push   eax
c000b9c3:	83 c2 0d             	add    edx,0xd
c000b9c6:	50                   	push   eax
c000b9c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9c9:	52                   	push   edx
c000b9ca:	51                   	push   ecx
c000b9cb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b9ce:	83 c4 10             	add    esp,0x10
c000b9d1:	83 c4 0c             	add    esp,0xc
c000b9d4:	c3                   	ret    
c000b9d5:	90                   	nop

c000b9d6 <File::rename(char const*)>:
c000b9d6:	83 ec 0c             	sub    esp,0xc
c000b9d9:	b8 0b 00 00 00       	mov    eax,0xb
c000b9de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9e9:	83 f9 19             	cmp    ecx,0x19
c000b9ec:	77 32                	ja     c000ba20 <File::rename(char const*)+0x4a>
c000b9ee:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000b9f5:	85 c9                	test   ecx,ecx
c000b9f7:	74 27                	je     c000ba20 <File::rename(char const*)+0x4a>
c000b9f9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9ff:	85 c9                	test   ecx,ecx
c000ba01:	74 1d                	je     c000ba20 <File::rename(char const*)+0x4a>
c000ba03:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba07:	b8 06 00 00 00       	mov    eax,0x6
c000ba0c:	75 12                	jne    c000ba20 <File::rename(char const*)+0x4a>
c000ba0e:	50                   	push   eax
c000ba0f:	83 c2 0d             	add    edx,0xd
c000ba12:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba18:	52                   	push   edx
c000ba19:	51                   	push   ecx
c000ba1a:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	83 c4 0c             	add    esp,0xc
c000ba23:	c3                   	ret    

c000ba24 <File::chfatattr(unsigned char, unsigned char)>:
c000ba24:	57                   	push   edi
c000ba25:	b8 0b 00 00 00       	mov    eax,0xb
c000ba2a:	56                   	push   esi
c000ba2b:	53                   	push   ebx
c000ba2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba30:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ba34:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba38:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba3f:	83 f9 19             	cmp    ecx,0x19
c000ba42:	77 37                	ja     c000ba7b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba44:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba4b:	85 c9                	test   ecx,ecx
c000ba4d:	74 2c                	je     c000ba7b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba4f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba55:	85 c9                	test   ecx,ecx
c000ba57:	74 22                	je     c000ba7b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba59:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba5d:	b8 06 00 00 00       	mov    eax,0x6
c000ba62:	75 17                	jne    c000ba7b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba64:	89 f0                	mov    eax,esi
c000ba66:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ba68:	0f b6 db             	movzx  ebx,bl
c000ba6b:	0f b6 f0             	movzx  esi,al
c000ba6e:	83 c2 0d             	add    edx,0xd
c000ba71:	56                   	push   esi
c000ba72:	53                   	push   ebx
c000ba73:	52                   	push   edx
c000ba74:	51                   	push   ecx
c000ba75:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000ba78:	83 c4 10             	add    esp,0x10
c000ba7b:	5b                   	pop    ebx
c000ba7c:	5e                   	pop    esi
c000ba7d:	5f                   	pop    edi
c000ba7e:	c3                   	ret    
c000ba7f:	90                   	nop

c000ba80 <File::exists()>:
c000ba80:	83 ec 0c             	sub    esp,0xc
c000ba83:	31 c0                	xor    eax,eax
c000ba85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba89:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba90:	83 f9 19             	cmp    ecx,0x19
c000ba93:	77 24                	ja     c000bab9 <File::exists()+0x39>
c000ba95:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba9c:	85 c9                	test   ecx,ecx
c000ba9e:	74 19                	je     c000bab9 <File::exists()+0x39>
c000baa0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000baa6:	85 c9                	test   ecx,ecx
c000baa8:	74 0f                	je     c000bab9 <File::exists()+0x39>
c000baaa:	50                   	push   eax
c000baab:	83 c2 0d             	add    edx,0xd
c000baae:	50                   	push   eax
c000baaf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bab1:	52                   	push   edx
c000bab2:	51                   	push   ecx
c000bab3:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bab6:	83 c4 10             	add    esp,0x10
c000bab9:	83 c4 0c             	add    esp,0xc
c000babc:	c3                   	ret    
c000babd:	90                   	nop

c000babe <File::stat(unsigned long long*, bool*)>:
c000babe:	56                   	push   esi
c000babf:	53                   	push   ebx
c000bac0:	50                   	push   eax
c000bac1:	b8 0b 00 00 00       	mov    eax,0xb
c000bac6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bace:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bad2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bad9:	83 f9 19             	cmp    ecx,0x19
c000badc:	77 3d                	ja     c000bb1b <File::stat(unsigned long long*, bool*)+0x5d>
c000bade:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bae5:	85 c9                	test   ecx,ecx
c000bae7:	74 32                	je     c000bb1b <File::stat(unsigned long long*, bool*)+0x5d>
c000bae9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000baef:	85 c9                	test   ecx,ecx
c000baf1:	74 28                	je     c000bb1b <File::stat(unsigned long long*, bool*)+0x5d>
c000baf3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000baf7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000baf9:	74 13                	je     c000bb0e <File::stat(unsigned long long*, bool*)+0x50>
c000bafb:	83 ec 04             	sub    esp,0x4
c000bafe:	56                   	push   esi
c000baff:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bb05:	51                   	push   ecx
c000bb06:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bb09:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bb0c:	eb 0a                	jmp    c000bb18 <File::stat(unsigned long long*, bool*)+0x5a>
c000bb0e:	53                   	push   ebx
c000bb0f:	83 c2 0d             	add    edx,0xd
c000bb12:	56                   	push   esi
c000bb13:	52                   	push   edx
c000bb14:	51                   	push   ecx
c000bb15:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bb18:	83 c4 10             	add    esp,0x10
c000bb1b:	5a                   	pop    edx
c000bb1c:	5b                   	pop    ebx
c000bb1d:	5e                   	pop    esi
c000bb1e:	c3                   	ret    

c000bb1f <Fs::setcwd(Process*, char*)>:
c000bb1f:	55                   	push   ebp
c000bb20:	57                   	push   edi
c000bb21:	56                   	push   esi
c000bb22:	53                   	push   ebx
c000bb23:	81 ec 20 02 00 00    	sub    esp,0x220
c000bb29:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000bb30:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bb36:	57                   	push   edi
c000bb37:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bb3e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bb42:	56                   	push   esi
c000bb43:	e8 dc f9 ff ff       	call   c000b524 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bb48:	89 34 24             	mov    DWORD PTR [esp],esi
c000bb4b:	e8 30 4a ff ff       	call   c0000580 <strlen>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	83 f8 02             	cmp    eax,0x2
c000bb56:	77 15                	ja     c000bb6d <Fs::setcwd(Process*, char*)+0x4e>
c000bb58:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bb5d:	83 eb 41             	sub    ebx,0x41
c000bb60:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bb67:	85 c0                	test   eax,eax
c000bb69:	75 1c                	jne    c000bb87 <Fs::setcwd(Process*, char*)+0x68>
c000bb6b:	eb 2f                	jmp    c000bb9c <Fs::setcwd(Process*, char*)+0x7d>
c000bb6d:	83 ec 0c             	sub    esp,0xc
c000bb70:	56                   	push   esi
c000bb71:	e8 0a 4a ff ff       	call   c0000580 <strlen>
c000bb76:	83 c4 10             	add    esp,0x10
c000bb79:	83 f8 03             	cmp    eax,0x3
c000bb7c:	75 57                	jne    c000bbd5 <Fs::setcwd(Process*, char*)+0xb6>
c000bb7e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bb83:	75 50                	jne    c000bbd5 <Fs::setcwd(Process*, char*)+0xb6>
c000bb85:	eb d1                	jmp    c000bb58 <Fs::setcwd(Process*, char*)+0x39>
c000bb87:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bb8e:	75 0c                	jne    c000bb9c <Fs::setcwd(Process*, char*)+0x7d>
c000bb90:	83 ec 0c             	sub    esp,0xc
c000bb93:	50                   	push   eax
c000bb94:	e8 9f 1d 00 00       	call   c000d938 <LogicalDisk::mount()>
c000bb99:	83 c4 10             	add    esp,0x10
c000bb9c:	83 fb 19             	cmp    ebx,0x19
c000bb9f:	b8 03 00 00 00       	mov    eax,0x3
c000bba4:	0f 87 c6 00 00 00    	ja     c000bc70 <Fs::setcwd(Process*, char*)+0x151>
c000bbaa:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bbb1:	b8 05 00 00 00       	mov    eax,0x5
c000bbb6:	85 d2                	test   edx,edx
c000bbb8:	0f 84 b2 00 00 00    	je     c000bc70 <Fs::setcwd(Process*, char*)+0x151>
c000bbbe:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bbc5:	b8 06 00 00 00       	mov    eax,0x6
c000bbca:	0f 85 92 00 00 00    	jne    c000bc62 <Fs::setcwd(Process*, char*)+0x143>
c000bbd0:	e9 9b 00 00 00       	jmp    c000bc70 <Fs::setcwd(Process*, char*)+0x151>
c000bbd5:	83 ec 0c             	sub    esp,0xc
c000bbd8:	68 14 01 00 00       	push   0x114
c000bbdd:	e8 f1 be ff ff       	call   c0007ad3 <malloc>
c000bbe2:	83 c4 0c             	add    esp,0xc
c000bbe5:	55                   	push   ebp
c000bbe6:	56                   	push   esi
c000bbe7:	50                   	push   eax
c000bbe8:	89 c3                	mov    ebx,eax
c000bbea:	e8 11 fb ff ff       	call   c000b700 <File::File(char const*, Process*)>
c000bbef:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bbf4:	83 c4 0c             	add    esp,0xc
c000bbf7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bbfb:	50                   	push   eax
c000bbfc:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bc00:	50                   	push   eax
c000bc01:	53                   	push   ebx
c000bc02:	e8 b7 fe ff ff       	call   c000babe <File::stat(unsigned long long*, bool*)>
c000bc07:	83 c4 10             	add    esp,0x10
c000bc0a:	83 f8 02             	cmp    eax,0x2
c000bc0d:	74 27                	je     c000bc36 <Fs::setcwd(Process*, char*)+0x117>
c000bc0f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bc14:	75 1c                	jne    c000bc32 <Fs::setcwd(Process*, char*)+0x113>
c000bc16:	85 db                	test   ebx,ebx
c000bc18:	b8 02 00 00 00       	mov    eax,0x2
c000bc1d:	74 51                	je     c000bc70 <Fs::setcwd(Process*, char*)+0x151>
c000bc1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc21:	83 ec 0c             	sub    esp,0xc
c000bc24:	53                   	push   ebx
c000bc25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc28:	83 c4 10             	add    esp,0x10
c000bc2b:	b8 02 00 00 00       	mov    eax,0x2
c000bc30:	eb 3e                	jmp    c000bc70 <Fs::setcwd(Process*, char*)+0x151>
c000bc32:	85 c0                	test   eax,eax
c000bc34:	74 1c                	je     c000bc52 <Fs::setcwd(Process*, char*)+0x133>
c000bc36:	85 db                	test   ebx,ebx
c000bc38:	b8 01 00 00 00       	mov    eax,0x1
c000bc3d:	74 31                	je     c000bc70 <Fs::setcwd(Process*, char*)+0x151>
c000bc3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc41:	83 ec 0c             	sub    esp,0xc
c000bc44:	53                   	push   ebx
c000bc45:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc48:	83 c4 10             	add    esp,0x10
c000bc4b:	b8 01 00 00 00       	mov    eax,0x1
c000bc50:	eb 1e                	jmp    c000bc70 <Fs::setcwd(Process*, char*)+0x151>
c000bc52:	85 db                	test   ebx,ebx
c000bc54:	74 0c                	je     c000bc62 <Fs::setcwd(Process*, char*)+0x143>
c000bc56:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc58:	83 ec 0c             	sub    esp,0xc
c000bc5b:	53                   	push   ebx
c000bc5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc5f:	83 c4 10             	add    esp,0x10
c000bc62:	50                   	push   eax
c000bc63:	50                   	push   eax
c000bc64:	56                   	push   esi
c000bc65:	57                   	push   edi
c000bc66:	e8 e5 49 ff ff       	call   c0000650 <strcpy>
c000bc6b:	83 c4 10             	add    esp,0x10
c000bc6e:	31 c0                	xor    eax,eax
c000bc70:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bc76:	5b                   	pop    ebx
c000bc77:	5e                   	pop    esi
c000bc78:	5f                   	pop    edi
c000bc79:	5d                   	pop    ebp
c000bc7a:	c3                   	ret    
c000bc7b:	90                   	nop

c000bc7c <Directory::Directory(char const*, Process*)>:
c000bc7c:	83 ec 0c             	sub    esp,0xc
c000bc7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc83:	83 ec 08             	sub    esp,0x8
c000bc86:	6a 00                	push   0x0
c000bc88:	50                   	push   eax
c000bc89:	e8 18 d5 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bc8e:	83 c4 10             	add    esp,0x10
c000bc91:	ba 04 13 02 c0       	mov    edx,0xc0021304
c000bc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9a:	89 10                	mov    DWORD PTR [eax],edx
c000bc9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bca0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcaa:	83 c0 0d             	add    eax,0xd
c000bcad:	83 ec 04             	sub    esp,0x4
c000bcb0:	52                   	push   edx
c000bcb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcb5:	50                   	push   eax
c000bcb6:	e8 69 f8 ff ff       	call   c000b524 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bcbb:	83 c4 10             	add    esp,0x10
c000bcbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bcc5:	83 e8 41             	sub    eax,0x41
c000bcc8:	88 c2                	mov    dl,al
c000bcca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcce:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bcd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bce6:	0f b6 c0             	movzx  eax,al
c000bce9:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bcf0:	85 c0                	test   eax,eax
c000bcf2:	74 3e                	je     c000bd32 <Directory::Directory(char const*, Process*)+0xb6>
c000bcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcfe:	0f b6 c0             	movzx  eax,al
c000bd01:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd08:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bd0e:	85 c0                	test   eax,eax
c000bd10:	75 20                	jne    c000bd32 <Directory::Directory(char const*, Process*)+0xb6>
c000bd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd16:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd1c:	0f b6 c0             	movzx  eax,al
c000bd1f:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd26:	83 ec 0c             	sub    esp,0xc
c000bd29:	50                   	push   eax
c000bd2a:	e8 09 1c 00 00       	call   c000d938 <LogicalDisk::mount()>
c000bd2f:	83 c4 10             	add    esp,0x10
c000bd32:	90                   	nop
c000bd33:	83 c4 0c             	add    esp,0xc
c000bd36:	c3                   	ret    
c000bd37:	90                   	nop

c000bd38 <Directory::open()>:
c000bd38:	53                   	push   ebx
c000bd39:	b8 0b 00 00 00       	mov    eax,0xb
c000bd3e:	83 ec 08             	sub    esp,0x8
c000bd41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd45:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bd4c:	83 fa 19             	cmp    edx,0x19
c000bd4f:	77 3d                	ja     c000bd8e <Directory::open()+0x56>
c000bd51:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000bd58:	85 d2                	test   edx,edx
c000bd5a:	74 32                	je     c000bd8e <Directory::open()+0x56>
c000bd5c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd62:	85 d2                	test   edx,edx
c000bd64:	74 28                	je     c000bd8e <Directory::open()+0x56>
c000bd66:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bd6a:	b8 06 00 00 00       	mov    eax,0x6
c000bd6f:	75 1d                	jne    c000bd8e <Directory::open()+0x56>
c000bd71:	50                   	push   eax
c000bd72:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd74:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bd7a:	51                   	push   ecx
c000bd7b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bd7e:	51                   	push   ecx
c000bd7f:	52                   	push   edx
c000bd80:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bd83:	83 c4 10             	add    esp,0x10
c000bd86:	85 c0                	test   eax,eax
c000bd88:	75 04                	jne    c000bd8e <Directory::open()+0x56>
c000bd8a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bd8e:	83 c4 08             	add    esp,0x8
c000bd91:	5b                   	pop    ebx
c000bd92:	c3                   	ret    
c000bd93:	90                   	nop

c000bd94 <Directory::close()>:
c000bd94:	53                   	push   ebx
c000bd95:	b8 0b 00 00 00       	mov    eax,0xb
c000bd9a:	83 ec 08             	sub    esp,0x8
c000bd9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bda1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bda8:	83 f9 19             	cmp    ecx,0x19
c000bdab:	77 41                	ja     c000bdee <Directory::close()+0x5a>
c000bdad:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bdb4:	85 db                	test   ebx,ebx
c000bdb6:	74 36                	je     c000bdee <Directory::close()+0x5a>
c000bdb8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bdbf:	74 2d                	je     c000bdee <Directory::close()+0x5a>
c000bdc1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdc5:	b8 05 00 00 00       	mov    eax,0x5
c000bdca:	74 22                	je     c000bdee <Directory::close()+0x5a>
c000bdcc:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bdd0:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bdd7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bddd:	53                   	push   ebx
c000bdde:	53                   	push   ebx
c000bddf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bde1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bde7:	50                   	push   eax
c000bde8:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bdeb:	83 c4 10             	add    esp,0x10
c000bdee:	83 c4 08             	add    esp,0x8
c000bdf1:	5b                   	pop    ebx
c000bdf2:	c3                   	ret    
c000bdf3:	90                   	nop

c000bdf4 <Directory::unlink()>:
c000bdf4:	83 ec 0c             	sub    esp,0xc
c000bdf7:	b8 0b 00 00 00       	mov    eax,0xb
c000bdfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be07:	83 f9 19             	cmp    ecx,0x19
c000be0a:	77 2f                	ja     c000be3b <Directory::unlink()+0x47>
c000be0c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000be13:	85 c9                	test   ecx,ecx
c000be15:	74 24                	je     c000be3b <Directory::unlink()+0x47>
c000be17:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be1d:	85 c9                	test   ecx,ecx
c000be1f:	74 1a                	je     c000be3b <Directory::unlink()+0x47>
c000be21:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be25:	b8 06 00 00 00       	mov    eax,0x6
c000be2a:	75 0f                	jne    c000be3b <Directory::unlink()+0x47>
c000be2c:	50                   	push   eax
c000be2d:	83 c2 0d             	add    edx,0xd
c000be30:	50                   	push   eax
c000be31:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be33:	52                   	push   edx
c000be34:	51                   	push   ecx
c000be35:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000be38:	83 c4 10             	add    esp,0x10
c000be3b:	83 c4 0c             	add    esp,0xc
c000be3e:	c3                   	ret    
c000be3f:	90                   	nop

c000be40 <Directory::rename(char const*)>:
c000be40:	83 ec 0c             	sub    esp,0xc
c000be43:	b8 0b 00 00 00       	mov    eax,0xb
c000be48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be4c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be53:	83 f9 19             	cmp    ecx,0x19
c000be56:	77 32                	ja     c000be8a <Directory::rename(char const*)+0x4a>
c000be58:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000be5f:	85 c9                	test   ecx,ecx
c000be61:	74 27                	je     c000be8a <Directory::rename(char const*)+0x4a>
c000be63:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be69:	85 c9                	test   ecx,ecx
c000be6b:	74 1d                	je     c000be8a <Directory::rename(char const*)+0x4a>
c000be6d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be71:	b8 06 00 00 00       	mov    eax,0x6
c000be76:	75 12                	jne    c000be8a <Directory::rename(char const*)+0x4a>
c000be78:	50                   	push   eax
c000be79:	83 c2 0d             	add    edx,0xd
c000be7c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be82:	52                   	push   edx
c000be83:	51                   	push   ecx
c000be84:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be87:	83 c4 10             	add    esp,0x10
c000be8a:	83 c4 0c             	add    esp,0xc
c000be8d:	c3                   	ret    

c000be8e <Directory::exists()>:
c000be8e:	83 ec 0c             	sub    esp,0xc
c000be91:	31 c0                	xor    eax,eax
c000be93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be97:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be9e:	83 f9 19             	cmp    ecx,0x19
c000bea1:	77 24                	ja     c000bec7 <Directory::exists()+0x39>
c000bea3:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000beaa:	85 c9                	test   ecx,ecx
c000beac:	74 19                	je     c000bec7 <Directory::exists()+0x39>
c000beae:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000beb4:	85 c9                	test   ecx,ecx
c000beb6:	74 0f                	je     c000bec7 <Directory::exists()+0x39>
c000beb8:	50                   	push   eax
c000beb9:	83 c2 0d             	add    edx,0xd
c000bebc:	50                   	push   eax
c000bebd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bebf:	52                   	push   edx
c000bec0:	51                   	push   ecx
c000bec1:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	83 c4 0c             	add    esp,0xc
c000beca:	c3                   	ret    
c000becb:	90                   	nop

c000becc <Directory::read(dirent*)>:
c000becc:	83 ec 1c             	sub    esp,0x1c
c000becf:	b8 0b 00 00 00       	mov    eax,0xb
c000bed4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bed8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bedf:	83 f9 19             	cmp    ecx,0x19
c000bee2:	77 30                	ja     c000bf14 <Directory::read(dirent*)+0x48>
c000bee4:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000beeb:	85 c9                	test   ecx,ecx
c000beed:	74 25                	je     c000bf14 <Directory::read(dirent*)+0x48>
c000beef:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bef6:	74 1c                	je     c000bf14 <Directory::read(dirent*)+0x48>
c000bef8:	83 ec 0c             	sub    esp,0xc
c000befb:	8b 02                	mov    eax,DWORD PTR [edx]
c000befd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bf01:	51                   	push   ecx
c000bf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf06:	6a 00                	push   0x0
c000bf08:	68 10 01 00 00       	push   0x110
c000bf0d:	52                   	push   edx
c000bf0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf11:	83 c4 20             	add    esp,0x20
c000bf14:	83 c4 1c             	add    esp,0x1c
c000bf17:	c3                   	ret    

c000bf18 <Directory::create()>:
c000bf18:	83 ec 0c             	sub    esp,0xc
c000bf1b:	b8 0b 00 00 00       	mov    eax,0xb
c000bf20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf24:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf2b:	83 f9 19             	cmp    ecx,0x19
c000bf2e:	77 2f                	ja     c000bf5f <Directory::create()+0x47>
c000bf30:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf37:	85 c9                	test   ecx,ecx
c000bf39:	74 24                	je     c000bf5f <Directory::create()+0x47>
c000bf3b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf41:	85 c9                	test   ecx,ecx
c000bf43:	74 1a                	je     c000bf5f <Directory::create()+0x47>
c000bf45:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf49:	b8 06 00 00 00       	mov    eax,0x6
c000bf4e:	75 0f                	jne    c000bf5f <Directory::create()+0x47>
c000bf50:	50                   	push   eax
c000bf51:	83 c2 0d             	add    edx,0xd
c000bf54:	50                   	push   eax
c000bf55:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf57:	52                   	push   edx
c000bf58:	51                   	push   ecx
c000bf59:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000bf5c:	83 c4 10             	add    esp,0x10
c000bf5f:	83 c4 0c             	add    esp,0xc
c000bf62:	c3                   	ret    
c000bf63:	90                   	nop

c000bf64 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000bf64:	b8 0a 00 00 00       	mov    eax,0xa
c000bf69:	c3                   	ret    
c000bf6a:	66 90                	xchg   ax,ax

c000bf6c <Bus::Bus(char const*)>:
c000bf6c:	83 ec 0c             	sub    esp,0xc
c000bf6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf73:	83 ec 08             	sub    esp,0x8
c000bf76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf7a:	50                   	push   eax
c000bf7b:	e8 28 08 00 00       	call   c000c7a8 <Device::Device(char const*)>
c000bf80:	83 c4 10             	add    esp,0x10
c000bf83:	ba 20 13 02 c0       	mov    edx,0xc0021320
c000bf88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8c:	89 10                	mov    DWORD PTR [eax],edx
c000bf8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf92:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000bf9c:	90                   	nop
c000bf9d:	83 c4 0c             	add    esp,0xc
c000bfa0:	c3                   	ret    
c000bfa1:	90                   	nop
c000bfa2:	66 90                	xchg   ax,ax

c000bfa4 <Bus::~Bus()>:
c000bfa4:	83 ec 0c             	sub    esp,0xc
c000bfa7:	ba 20 13 02 c0       	mov    edx,0xc0021320
c000bfac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfb0:	89 10                	mov    DWORD PTR [eax],edx
c000bfb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfb6:	83 ec 0c             	sub    esp,0xc
c000bfb9:	50                   	push   eax
c000bfba:	e8 53 05 00 00       	call   c000c512 <Device::~Device()>
c000bfbf:	83 c4 10             	add    esp,0x10
c000bfc2:	90                   	nop
c000bfc3:	83 c4 0c             	add    esp,0xc
c000bfc6:	c3                   	ret    
c000bfc7:	90                   	nop

c000bfc8 <Bus::~Bus()>:
c000bfc8:	83 ec 0c             	sub    esp,0xc
c000bfcb:	83 ec 0c             	sub    esp,0xc
c000bfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd2:	e8 cd ff ff ff       	call   c000bfa4 <Bus::~Bus()>
c000bfd7:	83 c4 10             	add    esp,0x10
c000bfda:	83 ec 08             	sub    esp,0x8
c000bfdd:	68 58 01 00 00       	push   0x158
c000bfe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe6:	e8 21 e8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000bfeb:	83 c4 10             	add    esp,0x10
c000bfee:	83 c4 0c             	add    esp,0xc
c000bff1:	c3                   	ret    

c000bff2 <beepThread(void*)>:
c000bff2:	83 ec 0c             	sub    esp,0xc
c000bff5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000bffa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bffe:	48                   	dec    eax
c000bfff:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c004:	75 01                	jne    c000c007 <beepThread(void*)+0x15>
c000c006:	fb                   	sti    
c000c007:	6b c2 0a             	imul   eax,edx,0xa
c000c00a:	83 ec 0c             	sub    esp,0xc
c000c00d:	50                   	push   eax
c000c00e:	e8 b9 9d 00 00       	call   c0015dcc <milliTenthSleep(unsigned int)>
c000c013:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c01a:	e8 06 bd 00 00       	call   c0017d25 <HalMakeBeep(int)>
c000c01f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c027:	83 c4 1c             	add    esp,0x1c
c000c02a:	e9 81 9c 00 00       	jmp    c0015cb0 <blockTask(TaskState)>

c000c02f <Krnl::beep(int, int, bool)>:
c000c02f:	56                   	push   esi
c000c030:	53                   	push   ebx
c000c031:	83 ec 10             	sub    esp,0x10
c000c034:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c038:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c03c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c040:	e8 e0 bc 00 00       	call   c0017d25 <HalMakeBeep(int)>
c000c045:	89 f0                	mov    eax,esi
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	84 c0                	test   al,al
c000c04c:	74 1e                	je     c000c06c <Krnl::beep(int, int, bool)+0x3d>
c000c04e:	6b db 0a             	imul   ebx,ebx,0xa
c000c051:	83 ec 0c             	sub    esp,0xc
c000c054:	53                   	push   ebx
c000c055:	e8 72 9d 00 00       	call   c0015dcc <milliTenthSleep(unsigned int)>
c000c05a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c062:	83 c4 14             	add    esp,0x14
c000c065:	5b                   	pop    ebx
c000c066:	5e                   	pop    esi
c000c067:	e9 b9 bc 00 00       	jmp    c0017d25 <HalMakeBeep(int)>
c000c06c:	68 e6 00 00 00       	push   0xe6
c000c071:	53                   	push   ebx
c000c072:	68 f2 bf 00 c0       	push   0xc000bff2
c000c077:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c07d:	e8 e2 97 00 00       	call   c0015864 <Process::createThread(void (*)(void*), void*, int)>
c000c082:	83 c4 14             	add    esp,0x14
c000c085:	5b                   	pop    ebx
c000c086:	5e                   	pop    esi
c000c087:	c3                   	ret    

c000c088 <User::loadClockSettings(int)>:
c000c088:	53                   	push   ebx
c000c089:	83 ec 14             	sub    esp,0x14
c000c08c:	68 14 01 00 00       	push   0x114
c000c091:	e8 3d ba ff ff       	call   c0007ad3 <malloc>
c000c096:	83 c4 0c             	add    esp,0xc
c000c099:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c09f:	68 44 13 02 c0       	push   0xc0021344
c000c0a4:	50                   	push   eax
c000c0a5:	89 c3                	mov    ebx,eax
c000c0a7:	e8 54 f6 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c000c0ac:	58                   	pop    eax
c000c0ad:	5a                   	pop    edx
c000c0ae:	6a 01                	push   0x1
c000c0b0:	53                   	push   ebx
c000c0b1:	e8 06 f7 ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c000c0b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c0b9:	e8 5c f7 ff ff       	call   c000b81a <File::close()>
c000c0be:	83 c4 10             	add    esp,0x10
c000c0c1:	85 db                	test   ebx,ebx
c000c0c3:	74 0f                	je     c000c0d4 <User::loadClockSettings(int)+0x4c>
c000c0c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c0cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c0ce:	83 c4 08             	add    esp,0x8
c000c0d1:	5b                   	pop    ebx
c000c0d2:	ff e0                	jmp    eax
c000c0d4:	83 c4 08             	add    esp,0x8
c000c0d7:	5b                   	pop    ebx
c000c0d8:	c3                   	ret    
c000c0d9:	90                   	nop

c000c0da <Clock::Clock(char const*)>:
c000c0da:	83 ec 0c             	sub    esp,0xc
c000c0dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e1:	83 ec 08             	sub    esp,0x8
c000c0e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e8:	50                   	push   eax
c000c0e9:	e8 ba 06 00 00       	call   c000c7a8 <Device::Device(char const*)>
c000c0ee:	83 c4 10             	add    esp,0x10
c000c0f1:	ba 6c 13 02 c0       	mov    edx,0xc002136c
c000c0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0fa:	89 10                	mov    DWORD PTR [eax],edx
c000c0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c100:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c10a:	90                   	nop
c000c10b:	83 c4 0c             	add    esp,0xc
c000c10e:	c3                   	ret    
c000c10f:	90                   	nop

c000c110 <Clock::~Clock()>:
c000c110:	83 ec 0c             	sub    esp,0xc
c000c113:	ba 6c 13 02 c0       	mov    edx,0xc002136c
c000c118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11c:	89 10                	mov    DWORD PTR [eax],edx
c000c11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c122:	83 ec 0c             	sub    esp,0xc
c000c125:	50                   	push   eax
c000c126:	e8 e7 03 00 00       	call   c000c512 <Device::~Device()>
c000c12b:	83 c4 10             	add    esp,0x10
c000c12e:	90                   	nop
c000c12f:	83 c4 0c             	add    esp,0xc
c000c132:	c3                   	ret    
c000c133:	90                   	nop

c000c134 <Clock::~Clock()>:
c000c134:	83 ec 0c             	sub    esp,0xc
c000c137:	83 ec 0c             	sub    esp,0xc
c000c13a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c13e:	e8 cd ff ff ff       	call   c000c110 <Clock::~Clock()>
c000c143:	83 c4 10             	add    esp,0x10
c000c146:	83 ec 08             	sub    esp,0x8
c000c149:	68 58 01 00 00       	push   0x158
c000c14e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c152:	e8 b5 e6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c157:	83 c4 10             	add    esp,0x10
c000c15a:	83 c4 0c             	add    esp,0xc
c000c15d:	c3                   	ret    

c000c15e <Clock::timeInSecondsLocal()>:
c000c15e:	53                   	push   ebx
c000c15f:	83 ec 14             	sub    esp,0x14
c000c162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c166:	8b 10                	mov    edx,DWORD PTR [eax]
c000c168:	50                   	push   eax
c000c169:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c16c:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c173:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c179:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c17f:	89 cb                	mov    ebx,ecx
c000c181:	c1 fb 1f             	sar    ebx,0x1f
c000c184:	01 c8                	add    eax,ecx
c000c186:	11 da                	adc    edx,ebx
c000c188:	83 c4 10             	add    esp,0x10
c000c18b:	31 c9                	xor    ecx,ecx
c000c18d:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c194:	74 05                	je     c000c19b <Clock::timeInSecondsLocal()+0x3d>
c000c196:	b9 08 07 00 00       	mov    ecx,0x708
c000c19b:	31 db                	xor    ebx,ebx
c000c19d:	01 c8                	add    eax,ecx
c000c19f:	11 da                	adc    edx,ebx
c000c1a1:	83 c4 08             	add    esp,0x8
c000c1a4:	5b                   	pop    ebx
c000c1a5:	c3                   	ret    

c000c1a6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c1a6:	57                   	push   edi
c000c1a7:	56                   	push   esi
c000c1a8:	53                   	push   ebx
c000c1a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c1ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c1b1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c1b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1b7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c1ba:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c1c1:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c1c7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c1cd:	99                   	cdq    
c000c1ce:	29 c6                	sub    esi,eax
c000c1d0:	19 d7                	sbb    edi,edx
c000c1d2:	89 f0                	mov    eax,esi
c000c1d4:	31 f6                	xor    esi,esi
c000c1d6:	89 fa                	mov    edx,edi
c000c1d8:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c1df:	74 05                	je     c000c1e6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c1e1:	be 08 07 00 00       	mov    esi,0x708
c000c1e6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c1ea:	31 ff                	xor    edi,edi
c000c1ec:	29 f0                	sub    eax,esi
c000c1ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1f2:	19 fa                	sbb    edx,edi
c000c1f4:	89 d8                	mov    eax,ebx
c000c1f6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1fa:	5b                   	pop    ebx
c000c1fb:	5e                   	pop    esi
c000c1fc:	5f                   	pop    edi
c000c1fd:	ff e0                	jmp    eax

c000c1ff <datetimeToSeconds(datetime_t)>:
c000c1ff:	55                   	push   ebp
c000c200:	57                   	push   edi
c000c201:	56                   	push   esi
c000c202:	53                   	push   ebx
c000c203:	83 ec 0c             	sub    esp,0xc
c000c206:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c20a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c20e:	89 f7                	mov    edi,esi
c000c210:	89 f0                	mov    eax,esi
c000c212:	0f b6 cf             	movzx  ecx,bh
c000c215:	0f b6 c4             	movzx  eax,ah
c000c218:	c1 ef 10             	shr    edi,0x10
c000c21b:	89 da                	mov    edx,ebx
c000c21d:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c220:	89 f9                	mov    ecx,edi
c000c222:	0f b6 f9             	movzx  edi,cl
c000c225:	89 f1                	mov    ecx,esi
c000c227:	6b c0 3c             	imul   eax,eax,0x3c
c000c22a:	0f b6 f1             	movzx  esi,cl
c000c22d:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c233:	0f b6 db             	movzx  ebx,bl
c000c236:	c1 ea 10             	shr    edx,0x10
c000c239:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c23f:	01 f8                	add    eax,edi
c000c241:	01 f0                	add    eax,esi
c000c243:	89 04 24             	mov    DWORD PTR [esp],eax
c000c246:	c1 f8 1f             	sar    eax,0x1f
c000c249:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c24d:	89 e8                	mov    eax,ebp
c000c24f:	0f b6 c0             	movzx  eax,al
c000c252:	8b 0c 85 a0 13 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdec60]
c000c259:	83 f8 01             	cmp    eax,0x1
c000c25c:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c260:	0f b7 da             	movzx  ebx,dx
c000c263:	76 27                	jbe    c000c28c <datetimeToSeconds(datetime_t)+0x8d>
c000c265:	80 e2 03             	and    dl,0x3
c000c268:	75 22                	jne    c000c28c <datetimeToSeconds(datetime_t)+0x8d>
c000c26a:	31 d2                	xor    edx,edx
c000c26c:	be 64 00 00 00       	mov    esi,0x64
c000c271:	89 d8                	mov    eax,ebx
c000c273:	f7 f6                	div    esi
c000c275:	85 d2                	test   edx,edx
c000c277:	75 12                	jne    c000c28b <datetimeToSeconds(datetime_t)+0x8c>
c000c279:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c27f:	be 90 01 00 00       	mov    esi,0x190
c000c284:	99                   	cdq    
c000c285:	f7 fe                	idiv   esi
c000c287:	85 d2                	test   edx,edx
c000c289:	75 01                	jne    c000c28c <datetimeToSeconds(datetime_t)+0x8d>
c000c28b:	41                   	inc    ecx
c000c28c:	83 fb 46             	cmp    ebx,0x46
c000c28f:	76 48                	jbe    c000c2d9 <datetimeToSeconds(datetime_t)+0xda>
c000c291:	be 46 00 00 00       	mov    esi,0x46
c000c296:	bf 64 00 00 00       	mov    edi,0x64
c000c29b:	bd 90 01 00 00       	mov    ebp,0x190
c000c2a0:	f7 c6 03 00 00 00    	test   esi,0x3
c000c2a6:	b8 6d 01 00 00       	mov    eax,0x16d
c000c2ab:	75 23                	jne    c000c2d0 <datetimeToSeconds(datetime_t)+0xd1>
c000c2ad:	89 f0                	mov    eax,esi
c000c2af:	99                   	cdq    
c000c2b0:	f7 ff                	idiv   edi
c000c2b2:	b8 6e 01 00 00       	mov    eax,0x16e
c000c2b7:	85 d2                	test   edx,edx
c000c2b9:	75 15                	jne    c000c2d0 <datetimeToSeconds(datetime_t)+0xd1>
c000c2bb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c2c1:	99                   	cdq    
c000c2c2:	f7 fd                	idiv   ebp
c000c2c4:	83 fa 01             	cmp    edx,0x1
c000c2c7:	19 c0                	sbb    eax,eax
c000c2c9:	f7 d0                	not    eax
c000c2cb:	05 6e 01 00 00       	add    eax,0x16e
c000c2d0:	46                   	inc    esi
c000c2d1:	01 c1                	add    ecx,eax
c000c2d3:	39 de                	cmp    esi,ebx
c000c2d5:	7c c9                	jl     c000c2a0 <datetimeToSeconds(datetime_t)+0xa1>
c000c2d7:	eb 34                	jmp    c000c30d <datetimeToSeconds(datetime_t)+0x10e>
c000c2d9:	74 32                	je     c000c30d <datetimeToSeconds(datetime_t)+0x10e>
c000c2db:	b8 45 00 00 00       	mov    eax,0x45
c000c2e0:	89 c2                	mov    edx,eax
c000c2e2:	83 e2 03             	and    edx,0x3
c000c2e5:	39 d8                	cmp    eax,ebx
c000c2e7:	7e 0f                	jle    c000c2f8 <datetimeToSeconds(datetime_t)+0xf9>
c000c2e9:	83 fa 01             	cmp    edx,0x1
c000c2ec:	19 d2                	sbb    edx,edx
c000c2ee:	48                   	dec    eax
c000c2ef:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c2f6:	eb e8                	jmp    c000c2e0 <datetimeToSeconds(datetime_t)+0xe1>
c000c2f8:	85 d2                	test   edx,edx
c000c2fa:	b8 6d 01 00 00       	mov    eax,0x16d
c000c2ff:	75 0a                	jne    c000c30b <datetimeToSeconds(datetime_t)+0x10c>
c000c301:	83 fb 01             	cmp    ebx,0x1
c000c304:	19 c0                	sbb    eax,eax
c000c306:	05 6e 01 00 00       	add    eax,0x16e
c000c30b:	29 c1                	sub    ecx,eax
c000c30d:	b8 80 51 01 00       	mov    eax,0x15180
c000c312:	f7 e9                	imul   ecx
c000c314:	03 04 24             	add    eax,DWORD PTR [esp]
c000c317:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c31b:	83 c4 0c             	add    esp,0xc
c000c31e:	5b                   	pop    ebx
c000c31f:	5e                   	pop    esi
c000c320:	5f                   	pop    edi
c000c321:	5d                   	pop    ebp
c000c322:	c3                   	ret    
c000c323:	90                   	nop

c000c324 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c324:	57                   	push   edi
c000c325:	56                   	push   esi
c000c326:	53                   	push   ebx
c000c327:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c32b:	8b 06                	mov    eax,DWORD PTR [esi]
c000c32d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c330:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c334:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c338:	e8 c2 fe ff ff       	call   c000c1ff <datetimeToSeconds(datetime_t)>
c000c33d:	59                   	pop    ecx
c000c33e:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c345:	5b                   	pop    ebx
c000c346:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c34c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c352:	89 cb                	mov    ebx,ecx
c000c354:	c1 fb 1f             	sar    ebx,0x1f
c000c357:	29 c8                	sub    eax,ecx
c000c359:	19 da                	sbb    edx,ebx
c000c35b:	31 c9                	xor    ecx,ecx
c000c35d:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c364:	74 05                	je     c000c36b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c366:	b9 08 07 00 00       	mov    ecx,0x708
c000c36b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c36f:	31 db                	xor    ebx,ebx
c000c371:	29 c8                	sub    eax,ecx
c000c373:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c377:	19 da                	sbb    edx,ebx
c000c379:	89 f8                	mov    eax,edi
c000c37b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c37f:	5b                   	pop    ebx
c000c380:	5e                   	pop    esi
c000c381:	5f                   	pop    edi
c000c382:	ff e0                	jmp    eax

c000c384 <secondsToDatetime(unsigned long long)>:
c000c384:	55                   	push   ebp
c000c385:	57                   	push   edi
c000c386:	56                   	push   esi
c000c387:	53                   	push   ebx
c000c388:	83 ec 1c             	sub    esp,0x1c
c000c38b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c38f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c393:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c397:	6a 00                	push   0x0
c000c399:	68 80 51 01 00       	push   0x15180
c000c39e:	55                   	push   ebp
c000c39f:	57                   	push   edi
c000c3a0:	e8 cb 2d 01 00       	call   c001f170 <__udivdi3>
c000c3a5:	83 c4 10             	add    esp,0x10
c000c3a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3ac:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c3b2:	6a 00                	push   0x0
c000c3b4:	68 80 51 01 00       	push   0x15180
c000c3b9:	55                   	push   ebp
c000c3ba:	57                   	push   edi
c000c3bb:	bf 10 0e 00 00       	mov    edi,0xe10
c000c3c0:	e8 ab 2e 01 00       	call   c001f270 <__umoddi3>
c000c3c5:	83 c4 10             	add    esp,0x10
c000c3c8:	99                   	cdq    
c000c3c9:	f7 ff                	idiv   edi
c000c3cb:	bf 3c 00 00 00       	mov    edi,0x3c
c000c3d0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c3d3:	89 d0                	mov    eax,edx
c000c3d5:	99                   	cdq    
c000c3d6:	f7 ff                	idiv   edi
c000c3d8:	85 db                	test   ebx,ebx
c000c3da:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c3dd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c3e0:	79 11                	jns    c000c3f3 <secondsToDatetime(unsigned long long)+0x6f>
c000c3e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3e6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c3ec:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3f1:	eb 07                	jmp    c000c3fa <secondsToDatetime(unsigned long long)+0x76>
c000c3f3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3f8:	89 d8                	mov    eax,ebx
c000c3fa:	99                   	cdq    
c000c3fb:	bf b4 05 00 00       	mov    edi,0x5b4
c000c400:	f7 f9                	idiv   ecx
c000c402:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c407:	31 d2                	xor    edx,edx
c000c409:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c40e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c412:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c41a:	01 c3                	add    ebx,eax
c000c41c:	89 d8                	mov    eax,ebx
c000c41e:	f7 f1                	div    ecx
c000c420:	31 d2                	xor    edx,edx
c000c422:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c425:	89 d8                	mov    eax,ebx
c000c427:	f7 f7                	div    edi
c000c429:	31 d2                	xor    edx,edx
c000c42b:	29 c1                	sub    ecx,eax
c000c42d:	89 d8                	mov    eax,ebx
c000c42f:	f7 f5                	div    ebp
c000c431:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c436:	31 d2                	xor    edx,edx
c000c438:	29 c1                	sub    ecx,eax
c000c43a:	89 c8                	mov    eax,ecx
c000c43c:	f7 f5                	div    ebp
c000c43e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c443:	31 d2                	xor    edx,edx
c000c445:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c449:	89 c8                	mov    eax,ecx
c000c44b:	f7 f5                	div    ebp
c000c44d:	31 d2                	xor    edx,edx
c000c44f:	01 c3                	add    ebx,eax
c000c451:	89 c8                	mov    eax,ecx
c000c453:	f7 f7                	div    edi
c000c455:	bf 99 00 00 00       	mov    edi,0x99
c000c45a:	31 d2                	xor    edx,edx
c000c45c:	29 c3                	sub    ebx,eax
c000c45e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c466:	29 c3                	sub    ebx,eax
c000c468:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c46b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c46e:	83 c1 02             	add    ecx,0x2
c000c471:	89 c8                	mov    eax,ecx
c000c473:	bb 05 00 00 00       	mov    ebx,0x5
c000c478:	f7 f7                	div    edi
c000c47a:	31 d2                	xor    edx,edx
c000c47c:	89 c7                	mov    edi,eax
c000c47e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c484:	83 c0 02             	add    eax,0x2
c000c487:	f7 f3                	div    ebx
c000c489:	89 eb                	mov    ebx,ebp
c000c48b:	29 c3                	sub    ebx,eax
c000c48d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c493:	88 1e                	mov    BYTE PTR [esi],bl
c000c495:	19 c0                	sbb    eax,eax
c000c497:	31 d2                	xor    edx,edx
c000c499:	83 e0 0c             	and    eax,0xc
c000c49c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c4a0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c4a8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c4ac:	83 f9 01             	cmp    ecx,0x1
c000c4af:	0f 96 c2             	setbe  dl
c000c4b2:	41                   	inc    ecx
c000c4b3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c4b6:	01 d0                	add    eax,edx
c000c4b8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c4bc:	83 c4 1c             	add    esp,0x1c
c000c4bf:	89 f0                	mov    eax,esi
c000c4c1:	5b                   	pop    ebx
c000c4c2:	5e                   	pop    esi
c000c4c3:	5f                   	pop    edi
c000c4c4:	5d                   	pop    ebp
c000c4c5:	c2 04 00             	ret    0x4

c000c4c8 <Clock::timeInDatetimeLocal()>:
c000c4c8:	53                   	push   ebx
c000c4c9:	83 ec 14             	sub    esp,0x14
c000c4cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c4d4:	e8 85 fc ff ff       	call   c000c15e <Clock::timeInSecondsLocal()>
c000c4d9:	83 c4 0c             	add    esp,0xc
c000c4dc:	52                   	push   edx
c000c4dd:	50                   	push   eax
c000c4de:	53                   	push   ebx
c000c4df:	e8 a0 fe ff ff       	call   c000c384 <secondsToDatetime(unsigned long long)>
c000c4e4:	89 d8                	mov    eax,ebx
c000c4e6:	83 c4 14             	add    esp,0x14
c000c4e9:	5b                   	pop    ebx
c000c4ea:	c2 04 00             	ret    0x4
c000c4ed:	90                   	nop

c000c4ee <Device::hibernate()>:
c000c4ee:	c3                   	ret    
c000c4ef:	90                   	nop

c000c4f0 <Device::wake()>:
c000c4f0:	c3                   	ret    
c000c4f1:	90                   	nop

c000c4f2 <Device::detect()>:
c000c4f2:	c3                   	ret    
c000c4f3:	90                   	nop

c000c4f4 <Device::disableLegacy()>:
c000c4f4:	c3                   	ret    
c000c4f5:	90                   	nop

c000c4f6 <Device::powerSaving(PowerSavingLevel)>:
c000c4f6:	c3                   	ret    
c000c4f7:	90                   	nop

c000c4f8 <DriverlessDevice::close(int, int, void*)>:
c000c4f8:	31 c0                	xor    eax,eax
c000c4fa:	c3                   	ret    
c000c4fb:	90                   	nop

c000c4fc <DriverlessDevice::detect()>:
c000c4fc:	c3                   	ret    
c000c4fd:	90                   	nop

c000c4fe <DriverlessDevice::open(int, int, void*)>:
c000c4fe:	83 ec 18             	sub    esp,0x18
c000c501:	68 d0 13 02 c0       	push   0xc00213d0
c000c506:	e8 a2 4c 00 00       	call   c00111ad <KePanic(char const*)>
c000c50b:	83 c8 ff             	or     eax,0xffffffff
c000c50e:	83 c4 1c             	add    esp,0x1c
c000c511:	c3                   	ret    

c000c512 <Device::~Device()>:
c000c512:	ba 30 14 02 c0       	mov    edx,0xc0021430
c000c517:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c51b:	89 10                	mov    DWORD PTR [eax],edx
c000c51d:	90                   	nop
c000c51e:	c3                   	ret    
c000c51f:	90                   	nop

c000c520 <Device::~Device()>:
c000c520:	83 ec 0c             	sub    esp,0xc
c000c523:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c527:	e8 e6 ff ff ff       	call   c000c512 <Device::~Device()>
c000c52c:	83 c4 04             	add    esp,0x4
c000c52f:	83 ec 08             	sub    esp,0x8
c000c532:	68 58 01 00 00       	push   0x158
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	e8 cc e2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c540:	83 c4 10             	add    esp,0x10
c000c543:	83 c4 0c             	add    esp,0xc
c000c546:	c3                   	ret    
c000c547:	90                   	nop

c000c548 <Device::findAndLoadDriver()>:
c000c548:	c7 44 24 04 ee 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213ee
c000c550:	e9 b5 e3 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c555:	90                   	nop

c000c556 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c556:	57                   	push   edi
c000c557:	b9 09 00 00 00       	mov    ecx,0x9
c000c55c:	56                   	push   esi
c000c55d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c561:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c565:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c56f:	81 c7 18 01 00 00    	add    edi,0x118
c000c575:	fc                   	cld    
c000c576:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c578:	5e                   	pop    esi
c000c579:	5f                   	pop    edi
c000c57a:	c3                   	ret    
c000c57b:	90                   	nop

c000c57c <Device::preOpenACPI(void*, char*, char*)>:
c000c57c:	57                   	push   edi
c000c57d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c582:	56                   	push   esi
c000c583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c587:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c58b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c58f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c599:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c59f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c5a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5a7:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c5ad:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c5b1:	b9 0e 00 00 00       	mov    ecx,0xe
c000c5b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5b8:	5e                   	pop    esi
c000c5b9:	5f                   	pop    edi
c000c5ba:	c3                   	ret    
c000c5bb:	90                   	nop

c000c5bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5bc:	53                   	push   ebx
c000c5bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c5c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c5cd:	0f b6 c0             	movzx  eax,al
c000c5d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5d8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c5dc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5e0:	5b                   	pop    ebx
c000c5e1:	e9 aa 05 00 00       	jmp    c000cb90 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c5e6 <Device::getParent()>:
c000c5e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5ea:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c5f0:	c3                   	ret    
c000c5f1:	90                   	nop

c000c5f2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c5f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5fa:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c5ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c603:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c607:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c60b:	e9 f7 06 00 00       	jmp    c000cd07 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c610 <Device::addChild(Device*)>:
c000c610:	53                   	push   ebx
c000c611:	83 ec 08             	sub    esp,0x8
c000c614:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c618:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c61c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c622:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c628:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c62a:	85 d2                	test   edx,edx
c000c62c:	74 04                	je     c000c632 <Device::addChild(Device*)+0x22>
c000c62e:	89 d3                	mov    ebx,edx
c000c630:	eb f6                	jmp    c000c628 <Device::addChild(Device*)+0x18>
c000c632:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c635:	83 ec 0c             	sub    esp,0xc
c000c638:	6a 08                	push   0x8
c000c63a:	e8 94 b4 ff ff       	call   c0007ad3 <malloc>
c000c63f:	89 03                	mov    DWORD PTR [ebx],eax
c000c641:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c647:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c64e:	83 c4 18             	add    esp,0x18
c000c651:	5b                   	pop    ebx
c000c652:	c3                   	ret    
c000c653:	90                   	nop

c000c654 <Device::removeAllChildren()>:
c000c654:	56                   	push   esi
c000c655:	53                   	push   ebx
c000c656:	52                   	push   edx
c000c657:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c65b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c661:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c664:	74 17                	je     c000c67d <Device::removeAllChildren()+0x29>
c000c666:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c669:	85 c0                	test   eax,eax
c000c66b:	74 0c                	je     c000c679 <Device::removeAllChildren()+0x25>
c000c66d:	8b 10                	mov    edx,DWORD PTR [eax]
c000c66f:	83 ec 0c             	sub    esp,0xc
c000c672:	50                   	push   eax
c000c673:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c676:	83 c4 10             	add    esp,0x10
c000c679:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c67b:	eb e4                	jmp    c000c661 <Device::removeAllChildren()+0xd>
c000c67d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c683:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c689:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c68f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c696:	58                   	pop    eax
c000c697:	5b                   	pop    ebx
c000c698:	5e                   	pop    esi
c000c699:	c3                   	ret    

c000c69a <Device::hibernateAll()>:
c000c69a:	53                   	push   ebx
c000c69b:	83 ec 14             	sub    esp,0x14
c000c69e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6a4:	53                   	push   ebx
c000c6a5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c6a8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6ae:	83 c4 10             	add    esp,0x10
c000c6b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6b4:	74 0f                	je     c000c6c5 <Device::hibernateAll()+0x2b>
c000c6b6:	83 ec 0c             	sub    esp,0xc
c000c6b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6bc:	e8 d9 ff ff ff       	call   c000c69a <Device::hibernateAll()>
c000c6c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6c3:	eb e9                	jmp    c000c6ae <Device::hibernateAll()+0x14>
c000c6c5:	83 c4 08             	add    esp,0x8
c000c6c8:	5b                   	pop    ebx
c000c6c9:	c3                   	ret    

c000c6ca <Device::wakeAll()>:
c000c6ca:	53                   	push   ebx
c000c6cb:	83 ec 14             	sub    esp,0x14
c000c6ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6d4:	53                   	push   ebx
c000c6d5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c6d8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6de:	83 c4 10             	add    esp,0x10
c000c6e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6e4:	74 0f                	je     c000c6f5 <Device::wakeAll()+0x2b>
c000c6e6:	83 ec 0c             	sub    esp,0xc
c000c6e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6ec:	e8 d9 ff ff ff       	call   c000c6ca <Device::wakeAll()>
c000c6f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6f3:	eb e9                	jmp    c000c6de <Device::wakeAll()+0x14>
c000c6f5:	83 c4 08             	add    esp,0x8
c000c6f8:	5b                   	pop    ebx
c000c6f9:	c3                   	ret    

c000c6fa <Device::detectAll()>:
c000c6fa:	53                   	push   ebx
c000c6fb:	83 ec 14             	sub    esp,0x14
c000c6fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c702:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c704:	53                   	push   ebx
c000c705:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c708:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c70e:	83 c4 10             	add    esp,0x10
c000c711:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c714:	74 0f                	je     c000c725 <Device::detectAll()+0x2b>
c000c716:	83 ec 0c             	sub    esp,0xc
c000c719:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c71c:	e8 d9 ff ff ff       	call   c000c6fa <Device::detectAll()>
c000c721:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c723:	eb e9                	jmp    c000c70e <Device::detectAll()+0x14>
c000c725:	83 c4 08             	add    esp,0x8
c000c728:	5b                   	pop    ebx
c000c729:	c3                   	ret    

c000c72a <Device::disableLegacyAll()>:
c000c72a:	c3                   	ret    
c000c72b:	90                   	nop

c000c72c <Device::loadDriversForAll()>:
c000c72c:	c3                   	ret    
c000c72d:	90                   	nop

c000c72e <Device::closeAll()>:
c000c72e:	53                   	push   ebx
c000c72f:	83 ec 08             	sub    esp,0x8
c000c732:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c736:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c738:	6a 00                	push   0x0
c000c73a:	6a 00                	push   0x0
c000c73c:	6a 00                	push   0x0
c000c73e:	53                   	push   ebx
c000c73f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c742:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c748:	83 c4 10             	add    esp,0x10
c000c74b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c74e:	74 0f                	je     c000c75f <Device::closeAll()+0x31>
c000c750:	83 ec 0c             	sub    esp,0xc
c000c753:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c756:	e8 d3 ff ff ff       	call   c000c72e <Device::closeAll()>
c000c75b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c75d:	eb e9                	jmp    c000c748 <Device::closeAll()+0x1a>
c000c75f:	83 c4 08             	add    esp,0x8
c000c762:	5b                   	pop    ebx
c000c763:	c3                   	ret    

c000c764 <Device::powerSavingAll(PowerSavingLevel)>:
c000c764:	56                   	push   esi
c000c765:	53                   	push   ebx
c000c766:	83 ec 0c             	sub    esp,0xc
c000c769:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c76d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c771:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c773:	56                   	push   esi
c000c774:	53                   	push   ebx
c000c775:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c778:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c77e:	83 c4 10             	add    esp,0x10
c000c781:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c784:	74 0f                	je     c000c795 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c786:	52                   	push   edx
c000c787:	52                   	push   edx
c000c788:	56                   	push   esi
c000c789:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c78c:	e8 d3 ff ff ff       	call   c000c764 <Device::powerSavingAll(PowerSavingLevel)>
c000c791:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c793:	eb e9                	jmp    c000c77e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c795:	58                   	pop    eax
c000c796:	5b                   	pop    ebx
c000c797:	5e                   	pop    esi
c000c798:	c3                   	ret    
c000c799:	90                   	nop

c000c79a <Device::setName(char const*)>:
c000c79a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c7a2:	e9 a9 3e ff ff       	jmp    c0000650 <strcpy>
c000c7a7:	90                   	nop

c000c7a8 <Device::Device(char const*)>:
c000c7a8:	83 ec 1c             	sub    esp,0x1c
c000c7ab:	ba 30 14 02 c0       	mov    edx,0xc0021430
c000c7b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7b4:	89 10                	mov    DWORD PTR [eax],edx
c000c7b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7ba:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c7c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7c8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c7d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7d6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c7e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7e4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c7ee:	83 ec 08             	sub    esp,0x8
c000c7f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7f9:	e8 9c ff ff ff       	call   c000c79a <Device::setName(char const*)>
c000c7fe:	83 c4 10             	add    esp,0x10
c000c801:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c809:	83 ec 0c             	sub    esp,0xc
c000c80c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c810:	e8 be b2 ff ff       	call   c0007ad3 <malloc>
c000c815:	83 c4 10             	add    esp,0x10
c000c818:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c81e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c825:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c829:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c82f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c833:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c839:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c83f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c843:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c849:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c854:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c85b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c85f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c86a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c874:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c878:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c886:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c894:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c89e:	90                   	nop
c000c89f:	83 c4 1c             	add    esp,0x1c
c000c8a2:	c3                   	ret    
c000c8a3:	90                   	nop

c000c8a4 <Device::getName()>:
c000c8a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8a8:	05 d0 00 00 00       	add    eax,0xd0
c000c8ad:	c3                   	ret    

c000c8ae <DriverlessDevice::DriverlessDevice(char const*)>:
c000c8ae:	83 ec 0c             	sub    esp,0xc
c000c8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b5:	83 ec 08             	sub    esp,0x8
c000c8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8bc:	50                   	push   eax
c000c8bd:	e8 e6 fe ff ff       	call   c000c7a8 <Device::Device(char const*)>
c000c8c2:	83 c4 10             	add    esp,0x10
c000c8c5:	ba 5c 14 02 c0       	mov    edx,0xc002145c
c000c8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8ce:	89 10                	mov    DWORD PTR [eax],edx
c000c8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8d4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c8de:	90                   	nop
c000c8df:	83 c4 0c             	add    esp,0xc
c000c8e2:	c3                   	ret    
c000c8e3:	90                   	nop

c000c8e4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c8e4:	57                   	push   edi
c000c8e5:	56                   	push   esi
c000c8e6:	53                   	push   ebx
c000c8e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c8ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c8f3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c8f9:	75 0c                	jne    c000c907 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c8fb:	52                   	push   edx
c000c8fc:	52                   	push   edx
c000c8fd:	53                   	push   ebx
c000c8fe:	56                   	push   esi
c000c8ff:	e8 1e 2d 01 00       	call   c001f622 <LinkedList<Device>::addElement(Device*)>
c000c904:	83 c4 10             	add    esp,0x10
c000c907:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c90d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c910:	74 12                	je     c000c924 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c912:	50                   	push   eax
c000c913:	57                   	push   edi
c000c914:	56                   	push   esi
c000c915:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c918:	e8 c7 ff ff ff       	call   c000c8e4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c91d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c91f:	83 c4 10             	add    esp,0x10
c000c922:	eb e9                	jmp    c000c90d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c924:	5b                   	pop    ebx
c000c925:	5e                   	pop    esi
c000c926:	5f                   	pop    edi
c000c927:	c3                   	ret    

c000c928 <getDevicesOfType(DeviceType)>:
c000c928:	53                   	push   ebx
c000c929:	83 ec 14             	sub    esp,0x14
c000c92c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c930:	53                   	push   ebx
c000c931:	e8 c8 2d 01 00       	call   c001f6fe <LinkedList<Device>::LinkedList()>
c000c936:	83 c4 0c             	add    esp,0xc
c000c939:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c93d:	53                   	push   ebx
c000c93e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c944:	e8 9b ff ff ff       	call   c000c8e4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c949:	83 c4 18             	add    esp,0x18
c000c94c:	89 d8                	mov    eax,ebx
c000c94e:	5b                   	pop    ebx
c000c94f:	c2 04 00             	ret    0x4
c000c952:	66 90                	xchg   ax,ax

c000c954 <HardDiskController::HardDiskController(char const*)>:
c000c954:	83 ec 0c             	sub    esp,0xc
c000c957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c95b:	83 ec 08             	sub    esp,0x8
c000c95e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c962:	50                   	push   eax
c000c963:	e8 40 fe ff ff       	call   c000c7a8 <Device::Device(char const*)>
c000c968:	83 c4 10             	add    esp,0x10
c000c96b:	ba 88 14 02 c0       	mov    edx,0xc0021488
c000c970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c974:	89 10                	mov    DWORD PTR [eax],edx
c000c976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c97a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c984:	90                   	nop
c000c985:	83 c4 0c             	add    esp,0xc
c000c988:	c3                   	ret    
c000c989:	90                   	nop
c000c98a:	66 90                	xchg   ax,ax

c000c98c <HardDiskController::~HardDiskController()>:
c000c98c:	83 ec 0c             	sub    esp,0xc
c000c98f:	ba 88 14 02 c0       	mov    edx,0xc0021488
c000c994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c998:	89 10                	mov    DWORD PTR [eax],edx
c000c99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c99e:	83 ec 0c             	sub    esp,0xc
c000c9a1:	50                   	push   eax
c000c9a2:	e8 6b fb ff ff       	call   c000c512 <Device::~Device()>
c000c9a7:	83 c4 10             	add    esp,0x10
c000c9aa:	90                   	nop
c000c9ab:	83 c4 0c             	add    esp,0xc
c000c9ae:	c3                   	ret    
c000c9af:	90                   	nop

c000c9b0 <HardDiskController::~HardDiskController()>:
c000c9b0:	83 ec 0c             	sub    esp,0xc
c000c9b3:	83 ec 0c             	sub    esp,0xc
c000c9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9ba:	e8 cd ff ff ff       	call   c000c98c <HardDiskController::~HardDiskController()>
c000c9bf:	83 c4 10             	add    esp,0x10
c000c9c2:	83 ec 08             	sub    esp,0x8
c000c9c5:	68 58 01 00 00       	push   0x158
c000c9ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9ce:	e8 39 de ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c9d3:	83 c4 10             	add    esp,0x10
c000c9d6:	83 c4 0c             	add    esp,0xc
c000c9d9:	c3                   	ret    

c000c9da <PhysicalDisk::eject()>:
c000c9da:	83 c8 ff             	or     eax,0xffffffff
c000c9dd:	c3                   	ret    

c000c9de <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c9de:	83 ec 0c             	sub    esp,0xc
c000c9e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9e5:	83 ec 08             	sub    esp,0x8
c000c9e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9ec:	50                   	push   eax
c000c9ed:	e8 b6 fd ff ff       	call   c000c7a8 <Device::Device(char const*)>
c000c9f2:	83 c4 10             	add    esp,0x10
c000c9f5:	ba b4 14 02 c0       	mov    edx,0xc00214b4
c000c9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9fe:	89 10                	mov    DWORD PTR [eax],edx
c000ca00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca04:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca0f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ca16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca1a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ca24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ca2c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ca32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca36:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ca40:	90                   	nop
c000ca41:	83 c4 0c             	add    esp,0xc
c000ca44:	c3                   	ret    
c000ca45:	90                   	nop

c000ca46 <PhysicalDisk::startCache()>:
c000ca46:	56                   	push   esi
c000ca47:	53                   	push   ebx
c000ca48:	83 ec 10             	sub    esp,0x10
c000ca4b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca4f:	6a 44                	push   0x44
c000ca51:	e8 7d b0 ff ff       	call   c0007ad3 <malloc>
c000ca56:	89 c6                	mov    esi,eax
c000ca58:	58                   	pop    eax
c000ca59:	5a                   	pop    edx
c000ca5a:	53                   	push   ebx
c000ca5b:	56                   	push   esi
c000ca5c:	e8 83 17 00 00       	call   c000e1e4 <VCache::VCache(PhysicalDisk*)>
c000ca61:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ca67:	83 c4 14             	add    esp,0x14
c000ca6a:	5b                   	pop    ebx
c000ca6b:	5e                   	pop    esi
c000ca6c:	c3                   	ret    
c000ca6d:	90                   	nop

c000ca6e <PhysicalDisk::~PhysicalDisk()>:
c000ca6e:	83 ec 0c             	sub    esp,0xc
c000ca71:	ba b4 14 02 c0       	mov    edx,0xc00214b4
c000ca76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca7a:	89 10                	mov    DWORD PTR [eax],edx
c000ca7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca80:	83 ec 0c             	sub    esp,0xc
c000ca83:	50                   	push   eax
c000ca84:	e8 89 fa ff ff       	call   c000c512 <Device::~Device()>
c000ca89:	83 c4 10             	add    esp,0x10
c000ca8c:	90                   	nop
c000ca8d:	83 c4 0c             	add    esp,0xc
c000ca90:	c3                   	ret    
c000ca91:	90                   	nop

c000ca92 <PhysicalDisk::~PhysicalDisk()>:
c000ca92:	83 ec 0c             	sub    esp,0xc
c000ca95:	83 ec 0c             	sub    esp,0xc
c000ca98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca9c:	e8 cd ff ff ff       	call   c000ca6e <PhysicalDisk::~PhysicalDisk()>
c000caa1:	83 c4 10             	add    esp,0x10
c000caa4:	83 ec 08             	sub    esp,0x8
c000caa7:	68 6c 01 00 00       	push   0x16c
c000caac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab0:	e8 57 dd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cab5:	83 c4 10             	add    esp,0x10
c000cab8:	83 c4 0c             	add    esp,0xc
c000cabb:	c3                   	ret    

c000cabc <int_handler>:
c000cabc:	55                   	push   ebp
c000cabd:	57                   	push   edi
c000cabe:	56                   	push   esi
c000cabf:	53                   	push   ebx
c000cac0:	83 ec 0c             	sub    esp,0xc
c000cac3:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000caca:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cace:	74 0b                	je     c000cadb <int_handler+0x1f>
c000cad0:	fa                   	cli    
c000cad1:	f4                   	hlt    
c000cad2:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cad9:	75 f5                	jne    c000cad0 <int_handler+0x14>
c000cadb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cade:	8d 46 e0             	lea    eax,[esi-0x20]
c000cae1:	83 f8 17             	cmp    eax,0x17
c000cae4:	76 40                	jbe    c000cb26 <int_handler+0x6a>
c000cae6:	c1 e6 04             	shl    esi,0x4
c000cae9:	31 db                	xor    ebx,ebx
c000caeb:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000caf1:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000caf7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cafb:	85 c0                	test   eax,eax
c000cafd:	74 13                	je     c000cb12 <int_handler+0x56>
c000caff:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cb03:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cb06:	74 2c                	je     c000cb34 <int_handler+0x78>
c000cb08:	83 ec 08             	sub    esp,0x8
c000cb0b:	52                   	push   edx
c000cb0c:	57                   	push   edi
c000cb0d:	ff d0                	call   eax
c000cb0f:	83 c4 10             	add    esp,0x10
c000cb12:	83 c3 01             	add    ebx,0x1
c000cb15:	83 fb 04             	cmp    ebx,0x4
c000cb18:	75 dd                	jne    c000caf7 <int_handler+0x3b>
c000cb1a:	83 c4 0c             	add    esp,0xc
c000cb1d:	31 c0                	xor    eax,eax
c000cb1f:	5b                   	pop    ebx
c000cb20:	31 d2                	xor    edx,edx
c000cb22:	5e                   	pop    esi
c000cb23:	5f                   	pop    edi
c000cb24:	5d                   	pop    ebp
c000cb25:	c3                   	ret    
c000cb26:	83 ec 0c             	sub    esp,0xc
c000cb29:	50                   	push   eax
c000cb2a:	e8 33 b2 00 00       	call   c0017d62 <HalEndOfInterrupt(int)>
c000cb2f:	83 c4 10             	add    esp,0x10
c000cb32:	eb b2                	jmp    c000cae6 <int_handler+0x2a>
c000cb34:	83 ec 08             	sub    esp,0x8
c000cb37:	52                   	push   edx
c000cb38:	57                   	push   edi
c000cb39:	ff d0                	call   eax
c000cb3b:	83 c4 10             	add    esp,0x10
c000cb3e:	83 c4 0c             	add    esp,0xc
c000cb41:	5b                   	pop    ebx
c000cb42:	5e                   	pop    esi
c000cb43:	5f                   	pop    edi
c000cb44:	5d                   	pop    ebp
c000cb45:	c3                   	ret    

c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cb46:	56                   	push   esi
c000cb47:	31 c0                	xor    eax,eax
c000cb49:	53                   	push   ebx
c000cb4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb52:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb56:	89 ca                	mov    edx,ecx
c000cb58:	c1 e2 04             	shl    edx,0x4
c000cb5b:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cb63:	74 17                	je     c000cb7c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cb65:	83 c0 01             	add    eax,0x1
c000cb68:	83 f8 04             	cmp    eax,0x4
c000cb6b:	75 ee                	jne    c000cb5b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cb6d:	c7 44 24 0c e4 14 02 c0 	mov    DWORD PTR [esp+0xc],0xc00214e4
c000cb75:	5b                   	pop    ebx
c000cb76:	5e                   	pop    esi
c000cb77:	e9 31 46 00 00       	jmp    c00111ad <KePanic(char const*)>
c000cb7c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cb7f:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cb86:	5b                   	pop    ebx
c000cb87:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cb8e:	5e                   	pop    esi
c000cb8f:	c3                   	ret    

c000cb90 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cb90:	55                   	push   ebp
c000cb91:	57                   	push   edi
c000cb92:	56                   	push   esi
c000cb93:	53                   	push   ebx
c000cb94:	83 ec 0c             	sub    esp,0xc
c000cb97:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cb9d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cba1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cba5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cbac:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cbaf:	74 57                	je     c000cc08 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cbb1:	84 c0                	test   al,al
c000cbb3:	89 c7                	mov    edi,eax
c000cbb5:	74 1d                	je     c000cbd4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cbb7:	83 fe 0f             	cmp    esi,0xf
c000cbba:	0f 8f d9 00 00 00    	jg     c000cc99 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cbc0:	0f b6 b6 e8 2f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd018]
c000cbc7:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cbcf:	d1 ef                	shr    edi,1
c000cbd1:	83 e7 01             	and    edi,0x1
c000cbd4:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cbd9:	83 ec 08             	sub    esp,0x8
c000cbdc:	31 db                	xor    ebx,ebx
c000cbde:	50                   	push   eax
c000cbdf:	68 f1 14 02 c0       	push   0xc00214f1
c000cbe4:	e8 21 dd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cbe9:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cbee:	83 c4 10             	add    esp,0x10
c000cbf1:	85 c0                	test   eax,eax
c000cbf3:	7f 59                	jg     c000cc4e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cbf5:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cbf8:	83 ec 0c             	sub    esp,0xc
c000cbfb:	68 08 15 02 c0       	push   0xc0021508
c000cc00:	e8 a8 45 00 00       	call   c00111ad <KePanic(char const*)>
c000cc05:	83 c4 10             	add    esp,0x10
c000cc08:	89 e8                	mov    eax,ebp
c000cc0a:	31 d2                	xor    edx,edx
c000cc0c:	c1 e0 04             	shl    eax,0x4
c000cc0f:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cc16:	85 c9                	test   ecx,ecx
c000cc18:	0f 84 92 00 00 00    	je     c000ccb0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cc1e:	83 c2 01             	add    edx,0x1
c000cc21:	83 fa 04             	cmp    edx,0x4
c000cc24:	75 e9                	jne    c000cc0f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cc26:	83 ec 0c             	sub    esp,0xc
c000cc29:	68 5c 15 02 c0       	push   0xc002155c
c000cc2e:	e8 7a 45 00 00       	call   c00111ad <KePanic(char const*)>
c000cc33:	83 c4 10             	add    esp,0x10
c000cc36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cc3b:	83 c4 0c             	add    esp,0xc
c000cc3e:	5b                   	pop    ebx
c000cc3f:	5e                   	pop    esi
c000cc40:	5f                   	pop    edi
c000cc41:	5d                   	pop    ebp
c000cc42:	c3                   	ret    
c000cc43:	83 c3 01             	add    ebx,0x1
c000cc46:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cc4c:	7e a7                	jle    c000cbf5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cc4e:	8b 2c 9d e0 a0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5f20]
c000cc55:	83 ec 08             	sub    esp,0x8
c000cc58:	56                   	push   esi
c000cc59:	55                   	push   ebp
c000cc5a:	e8 ed 18 01 00       	call   c001e54c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cc5f:	83 c4 10             	add    esp,0x10
c000cc62:	84 c0                	test   al,al
c000cc64:	74 dd                	je     c000cc43 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cc66:	89 f8                	mov    eax,edi
c000cc68:	83 ec 04             	sub    esp,0x4
c000cc6b:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cc72:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cc75:	0f b6 f8             	movzx  edi,al
c000cc78:	57                   	push   edi
c000cc79:	89 e8                	mov    eax,ebp
c000cc7b:	6a 00                	push   0x0
c000cc7d:	0f b6 c0             	movzx  eax,al
c000cc80:	50                   	push   eax
c000cc81:	89 f0                	mov    eax,esi
c000cc83:	6a 00                	push   0x0
c000cc85:	0f b6 c0             	movzx  eax,al
c000cc88:	6a 00                	push   0x0
c000cc8a:	50                   	push   eax
c000cc8b:	53                   	push   ebx
c000cc8c:	e8 27 1a 01 00       	call   c001e6b8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cc91:	83 c4 20             	add    esp,0x20
c000cc94:	e9 6f ff ff ff       	jmp    c000cc08 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cc99:	83 ec 0c             	sub    esp,0xc
c000cc9c:	31 ff                	xor    edi,edi
c000cc9e:	68 24 15 02 c0       	push   0xc0021524
c000cca3:	e8 05 45 00 00       	call   c00111ad <KePanic(char const*)>
c000cca8:	83 c4 10             	add    esp,0x10
c000ccab:	e9 24 ff ff ff       	jmp    c000cbd4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000ccb0:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000ccb3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ccb7:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000ccbe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ccc2:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000ccc9:	83 c4 0c             	add    esp,0xc
c000cccc:	89 f0                	mov    eax,esi
c000ccce:	5b                   	pop    ebx
c000cccf:	5e                   	pop    esi
c000ccd0:	5f                   	pop    edi
c000ccd1:	5d                   	pop    ebp
c000ccd2:	c3                   	ret    

c000ccd3 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ccd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccd7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ccdb:	c1 e0 04             	shl    eax,0x4
c000ccde:	8d 50 10             	lea    edx,[eax+0x10]
c000cce1:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000cce7:	74 08                	je     c000ccf1 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000cce9:	83 c0 04             	add    eax,0x4
c000ccec:	39 d0                	cmp    eax,edx
c000ccee:	75 f1                	jne    c000cce1 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ccf0:	c3                   	ret    
c000ccf1:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ccfb:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cd05:	eb e2                	jmp    c000cce9 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cd07 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cd07:	56                   	push   esi
c000cd08:	53                   	push   ebx
c000cd09:	83 ec 04             	sub    esp,0x4
c000cd0c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cd11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd15:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cd19:	74 0e                	je     c000cd29 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cd1b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000cd20:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cd27:	75 34                	jne    c000cd5d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000cd29:	8d 43 20             	lea    eax,[ebx+0x20]
c000cd2c:	c1 e0 04             	shl    eax,0x4
c000cd2f:	8d 50 10             	lea    edx,[eax+0x10]
c000cd32:	39 b0 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],esi
c000cd38:	74 0d                	je     c000cd47 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000cd3a:	83 c0 04             	add    eax,0x4
c000cd3d:	39 d0                	cmp    eax,edx
c000cd3f:	75 f1                	jne    c000cd32 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000cd41:	83 c4 04             	add    esp,0x4
c000cd44:	5b                   	pop    ebx
c000cd45:	5e                   	pop    esi
c000cd46:	c3                   	ret    
c000cd47:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd51:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cd5b:	eb dd                	jmp    c000cd3a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000cd5d:	83 fb 0f             	cmp    ebx,0xf
c000cd60:	7f 09                	jg     c000cd6b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000cd62:	0f b6 9b e8 2f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd018]
c000cd69:	eb be                	jmp    c000cd29 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cd6b:	83 ec 0c             	sub    esp,0xc
c000cd6e:	68 15 15 02 c0       	push   0xc0021515
c000cd73:	e8 35 44 00 00       	call   c00111ad <KePanic(char const*)>
c000cd78:	83 c4 10             	add    esp,0x10
c000cd7b:	eb ac                	jmp    c000cd29 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000cd7d <setupINTS()>:
c000cd7d:	31 c0                	xor    eax,eax
c000cd7f:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd89:	83 c0 10             	add    eax,0x10
c000cd8c:	c7 80 10 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bf0],0x0
c000cd96:	c7 80 14 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bec],0x0
c000cda0:	c7 80 14 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bec],0x0
c000cdaa:	c7 80 18 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be8],0x0
c000cdb4:	c7 80 18 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be8],0x0
c000cdbe:	c7 80 1c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be4],0x0
c000cdc8:	c7 80 1c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be4],0x0
c000cdd2:	3d 00 10 00 00       	cmp    eax,0x1000
c000cdd7:	75 a6                	jne    c000cd7f <setupINTS()+0x2>
c000cdd9:	c3                   	ret    

c000cdda <convertLegacyIRQNumber(int)>:
c000cdda:	83 ec 0c             	sub    esp,0xc
c000cddd:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cde3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde7:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cdee:	74 0c                	je     c000cdfc <convertLegacyIRQNumber(int)+0x22>
c000cdf0:	83 f8 0f             	cmp    eax,0xf
c000cdf3:	7f 0b                	jg     c000ce00 <convertLegacyIRQNumber(int)+0x26>
c000cdf5:	0f b6 80 e8 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd018]
c000cdfc:	83 c4 0c             	add    esp,0xc
c000cdff:	c3                   	ret    
c000ce00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce04:	83 ec 0c             	sub    esp,0xc
c000ce07:	68 24 15 02 c0       	push   0xc0021524
c000ce0c:	e8 9c 43 00 00       	call   c00111ad <KePanic(char const*)>
c000ce11:	83 c4 10             	add    esp,0x10
c000ce14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce18:	83 c4 0c             	add    esp,0xc
c000ce1b:	c3                   	ret    

c000ce1c <startGUI(void*)>:
c000ce1c:	55                   	push   ebp
c000ce1d:	89 e5                	mov    ebp,esp
c000ce1f:	53                   	push   ebx
c000ce20:	83 ec 04             	sub    esp,0x4
c000ce23:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ce28:	83 e8 01             	sub    eax,0x1
c000ce2b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000ce30:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ce35:	85 c0                	test   eax,eax
c000ce37:	75 01                	jne    c000ce3a <startGUI(void*)+0x1e>
c000ce39:	fb                   	sti    
c000ce3a:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce40:	83 ec 08             	sub    esp,0x8
c000ce43:	6a 01                	push   0x1
c000ce45:	68 81 15 02 c0       	push   0xc0021581
c000ce4a:	e8 f5 81 00 00       	call   c0015044 <Thr::loadDLL(char const*, bool)>
c000ce4f:	83 c4 10             	add    esp,0x10
c000ce52:	83 ec 08             	sub    esp,0x8
c000ce55:	53                   	push   ebx
c000ce56:	50                   	push   eax
c000ce57:	e8 28 84 00 00       	call   c0015284 <Thr::executeDLL(unsigned long, void*)>
c000ce5c:	83 c4 10             	add    esp,0x10
c000ce5f:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce65:	83 ec 08             	sub    esp,0x8
c000ce68:	6a 01                	push   0x1
c000ce6a:	68 9b 15 02 c0       	push   0xc002159b
c000ce6f:	e8 d0 81 00 00       	call   c0015044 <Thr::loadDLL(char const*, bool)>
c000ce74:	83 c4 10             	add    esp,0x10
c000ce77:	83 ec 08             	sub    esp,0x8
c000ce7a:	53                   	push   ebx
c000ce7b:	50                   	push   eax
c000ce7c:	e8 03 84 00 00       	call   c0015284 <Thr::executeDLL(unsigned long, void*)>
c000ce81:	83 c4 10             	add    esp,0x10
c000ce84:	90                   	nop
c000ce85:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ce88:	c9                   	leave  
c000ce89:	c3                   	ret    

c000ce8a <startGUIVESA(void*)>:
c000ce8a:	55                   	push   ebp
c000ce8b:	89 e5                	mov    ebp,esp
c000ce8d:	53                   	push   ebx
c000ce8e:	83 ec 04             	sub    esp,0x4
c000ce91:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ce96:	83 e8 01             	sub    eax,0x1
c000ce99:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000ce9e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cea3:	85 c0                	test   eax,eax
c000cea5:	75 01                	jne    c000cea8 <startGUIVESA(void*)+0x1e>
c000cea7:	fb                   	sti    
c000cea8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ceae:	83 ec 08             	sub    esp,0x8
c000ceb1:	6a 01                	push   0x1
c000ceb3:	68 b9 15 02 c0       	push   0xc00215b9
c000ceb8:	e8 87 81 00 00       	call   c0015044 <Thr::loadDLL(char const*, bool)>
c000cebd:	83 c4 10             	add    esp,0x10
c000cec0:	83 ec 08             	sub    esp,0x8
c000cec3:	53                   	push   ebx
c000cec4:	50                   	push   eax
c000cec5:	e8 ba 83 00 00       	call   c0015284 <Thr::executeDLL(unsigned long, void*)>
c000ceca:	83 c4 10             	add    esp,0x10
c000cecd:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ced3:	83 ec 08             	sub    esp,0x8
c000ced6:	6a 01                	push   0x1
c000ced8:	68 9b 15 02 c0       	push   0xc002159b
c000cedd:	e8 62 81 00 00       	call   c0015044 <Thr::loadDLL(char const*, bool)>
c000cee2:	83 c4 10             	add    esp,0x10
c000cee5:	83 ec 08             	sub    esp,0x8
c000cee8:	53                   	push   ebx
c000cee9:	50                   	push   eax
c000ceea:	e8 95 83 00 00       	call   c0015284 <Thr::executeDLL(unsigned long, void*)>
c000ceef:	83 c4 10             	add    esp,0x10
c000cef2:	90                   	nop
c000cef3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cef6:	c9                   	leave  
c000cef7:	c3                   	ret    

c000cef8 <sendKeyToTerminal(unsigned char)>:
c000cef8:	55                   	push   ebp
c000cef9:	89 e5                	mov    ebp,esp
c000cefb:	83 ec 28             	sub    esp,0x28
c000cefe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf01:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cf04:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cf09:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cf0d:	83 ec 08             	sub    esp,0x8
c000cf10:	52                   	push   edx
c000cf11:	50                   	push   eax
c000cf12:	e8 a5 be ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000cf17:	83 c4 10             	add    esp,0x10
c000cf1a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf1e:	83 f8 0a             	cmp    eax,0xa
c000cf21:	74 16                	je     c000cf39 <sendKeyToTerminal(unsigned char)+0x41>
c000cf23:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf27:	83 f8 03             	cmp    eax,0x3
c000cf2a:	74 0d                	je     c000cf39 <sendKeyToTerminal(unsigned char)+0x41>
c000cf2c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf30:	83 f8 1c             	cmp    eax,0x1c
c000cf33:	0f 85 97 00 00 00    	jne    c000cfd0 <sendKeyToTerminal(unsigned char)+0xd8>
c000cf39:	fa                   	cli    
c000cf3a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf3f:	83 c0 01             	add    eax,0x1
c000cf42:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf47:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cf4c:	83 c0 01             	add    eax,0x1
c000cf4f:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cf54:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000cf59:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf5c:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000cf66:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000cf6a:	74 1f                	je     c000cf8b <sendKeyToTerminal(unsigned char)+0x93>
c000cf6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf6f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000cf72:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cf75:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000cf78:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf7b:	83 ec 0c             	sub    esp,0xc
c000cf7e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cf81:	e8 22 90 00 00       	call   c0015fa8 <unblockTask(ThreadControlBlock*)>
c000cf86:	83 c4 10             	add    esp,0x10
c000cf89:	eb db                	jmp    c000cf66 <sendKeyToTerminal(unsigned char)+0x6e>
c000cf8b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cf90:	83 e8 01             	sub    eax,0x1
c000cf93:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cf98:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cf9d:	85 c0                	test   eax,eax
c000cf9f:	75 18                	jne    c000cfb9 <sendKeyToTerminal(unsigned char)+0xc1>
c000cfa1:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000cfa6:	85 c0                	test   eax,eax
c000cfa8:	74 0f                	je     c000cfb9 <sendKeyToTerminal(unsigned char)+0xc1>
c000cfaa:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000cfb4:	e8 f7 8a 00 00       	call   c0015ab0 <schedule()>
c000cfb9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfbe:	83 e8 01             	sub    eax,0x1
c000cfc1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cfc6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfcb:	85 c0                	test   eax,eax
c000cfcd:	75 01                	jne    c000cfd0 <sendKeyToTerminal(unsigned char)+0xd8>
c000cfcf:	fb                   	sti    
c000cfd0:	90                   	nop
c000cfd1:	c9                   	leave  
c000cfd2:	c3                   	ret    

c000cfd3 <sendKeyboardToken(KeyboardToken)>:
c000cfd3:	55                   	push   ebp
c000cfd4:	89 e5                	mov    ebp,esp
c000cfd6:	83 ec 18             	sub    esp,0x18
c000cfd9:	e8 1f 42 00 00       	call   c00111fd <KeUserIOReceived()>
c000cfde:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000cfe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfe4:	0f b7 c0             	movzx  eax,ax
c000cfe7:	83 f2 01             	xor    edx,0x1
c000cfea:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000cff0:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000cff5:	85 c0                	test   eax,eax
c000cff7:	74 24                	je     c000d01d <sendKeyboardToken(KeyboardToken)+0x4a>
c000cff9:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000cfff:	83 ec 04             	sub    esp,0x4
c000d002:	68 40 84 02 c0       	push   0xc0028440
c000d007:	83 ec 08             	sub    esp,0x8
c000d00a:	89 e0                	mov    eax,esp
c000d00c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d00f:	89 08                	mov    DWORD PTR [eax],ecx
c000d011:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d014:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d018:	ff d2                	call   edx
c000d01a:	83 c4 10             	add    esp,0x10
c000d01d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d021:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d024:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d029:	0f b6 d2             	movzx  edx,dl
c000d02c:	0f b6 c0             	movzx  eax,al
c000d02f:	39 c2                	cmp    edx,eax
c000d031:	74 1c                	je     c000d04f <sendKeyboardToken(KeyboardToken)+0x7c>
c000d033:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d036:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d03b:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d040:	0f b6 c0             	movzx  eax,al
c000d043:	83 ec 0c             	sub    esp,0xc
c000d046:	50                   	push   eax
c000d047:	e8 cc b4 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d04c:	83 c4 10             	add    esp,0x10
c000d04f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d052:	0f b6 c0             	movzx  eax,al
c000d055:	85 c0                	test   eax,eax
c000d057:	0f 84 da 00 00 00    	je     c000d137 <sendKeyboardToken(KeyboardToken)+0x164>
c000d05d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d060:	0f b7 c0             	movzx  eax,ax
c000d063:	3d 18 03 00 00       	cmp    eax,0x318
c000d068:	75 06                	jne    c000d070 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d06a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d073:	0f b7 c0             	movzx  eax,ax
c000d076:	3d 19 03 00 00       	cmp    eax,0x319
c000d07b:	75 06                	jne    c000d083 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d07d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d086:	0f b7 c0             	movzx  eax,ax
c000d089:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d08e:	75 06                	jne    c000d096 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d090:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d099:	0f b7 c0             	movzx  eax,ax
c000d09c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d0a1:	75 06                	jne    c000d0a9 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d0a3:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d0a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0ac:	0f b7 c0             	movzx  eax,ax
c000d0af:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d0b4:	75 06                	jne    c000d0bc <sendKeyboardToken(KeyboardToken)+0xe9>
c000d0b6:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d0bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0bf:	0f b7 c0             	movzx  eax,ax
c000d0c2:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d0c7:	75 06                	jne    c000d0cf <sendKeyboardToken(KeyboardToken)+0xfc>
c000d0c9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d0cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0d2:	0f b7 c0             	movzx  eax,ax
c000d0d5:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d0da:	75 06                	jne    c000d0e2 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d0dc:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d0e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0e5:	0f b7 c0             	movzx  eax,ax
c000d0e8:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d0ed:	75 06                	jne    c000d0f5 <sendKeyboardToken(KeyboardToken)+0x122>
c000d0ef:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d0f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0f8:	0f b7 c0             	movzx  eax,ax
c000d0fb:	3d 20 03 00 00       	cmp    eax,0x320
c000d100:	75 06                	jne    c000d108 <sendKeyboardToken(KeyboardToken)+0x135>
c000d102:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d10b:	0f b7 c0             	movzx  eax,ax
c000d10e:	3d 21 03 00 00       	cmp    eax,0x321
c000d113:	75 06                	jne    c000d11b <sendKeyboardToken(KeyboardToken)+0x148>
c000d115:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d11b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d11e:	0f b7 c0             	movzx  eax,ax
c000d121:	3d 22 03 00 00       	cmp    eax,0x322
c000d126:	0f 85 f1 00 00 00    	jne    c000d21d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d12c:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d132:	e9 e6 00 00 00       	jmp    c000d21d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d13a:	0f b7 c0             	movzx  eax,ax
c000d13d:	3d 18 03 00 00       	cmp    eax,0x318
c000d142:	75 0a                	jne    c000d14e <sendKeyboardToken(KeyboardToken)+0x17b>
c000d144:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d14a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d14e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d151:	0f b7 c0             	movzx  eax,ax
c000d154:	3d 19 03 00 00       	cmp    eax,0x319
c000d159:	75 0a                	jne    c000d165 <sendKeyboardToken(KeyboardToken)+0x192>
c000d15b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d161:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d168:	0f b7 c0             	movzx  eax,ax
c000d16b:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d170:	75 0a                	jne    c000d17c <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d172:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d178:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d17c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d17f:	0f b7 c0             	movzx  eax,ax
c000d182:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d187:	75 0a                	jne    c000d193 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d189:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d18f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d196:	0f b7 c0             	movzx  eax,ax
c000d199:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d19e:	75 0a                	jne    c000d1aa <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d1a0:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d1a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ad:	0f b7 c0             	movzx  eax,ax
c000d1b0:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1b5:	75 0a                	jne    c000d1c1 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d1b7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c4:	0f b7 c0             	movzx  eax,ax
c000d1c7:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1cc:	75 0a                	jne    c000d1d8 <sendKeyboardToken(KeyboardToken)+0x205>
c000d1ce:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d1d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1db:	0f b7 c0             	movzx  eax,ax
c000d1de:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d1e3:	75 0a                	jne    c000d1ef <sendKeyboardToken(KeyboardToken)+0x21c>
c000d1e5:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d1eb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f2:	0f b7 c0             	movzx  eax,ax
c000d1f5:	3d 20 03 00 00       	cmp    eax,0x320
c000d1fa:	75 0a                	jne    c000d206 <sendKeyboardToken(KeyboardToken)+0x233>
c000d1fc:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d202:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d209:	0f b7 c0             	movzx  eax,ax
c000d20c:	3d 21 03 00 00       	cmp    eax,0x321
c000d211:	75 0a                	jne    c000d21d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d213:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d219:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d21d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d220:	0f b7 c0             	movzx  eax,ax
c000d223:	3d 00 02 00 00       	cmp    eax,0x200
c000d228:	75 2f                	jne    c000d259 <sendKeyboardToken(KeyboardToken)+0x286>
c000d22a:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d22f:	83 f0 01             	xor    eax,0x1
c000d232:	0f b6 c0             	movzx  eax,al
c000d235:	85 c0                	test   eax,eax
c000d237:	74 20                	je     c000d259 <sendKeyboardToken(KeyboardToken)+0x286>
c000d239:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d23e:	6a 01                	push   0x1
c000d240:	6a 00                	push   0x0
c000d242:	68 1c ce 00 c0       	push   0xc000ce1c
c000d247:	50                   	push   eax
c000d248:	e8 17 86 00 00       	call   c0015864 <Process::createThread(void (*)(void*), void*, int)>
c000d24d:	83 c4 10             	add    esp,0x10
c000d250:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d257:	eb 3a                	jmp    c000d293 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d25c:	0f b7 c0             	movzx  eax,ax
c000d25f:	3d 01 02 00 00       	cmp    eax,0x201
c000d264:	75 2d                	jne    c000d293 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d266:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d26b:	83 f0 01             	xor    eax,0x1
c000d26e:	0f b6 c0             	movzx  eax,al
c000d271:	85 c0                	test   eax,eax
c000d273:	74 1e                	je     c000d293 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d275:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d27a:	6a 01                	push   0x1
c000d27c:	6a 00                	push   0x0
c000d27e:	68 8a ce 00 c0       	push   0xc000ce8a
c000d283:	50                   	push   eax
c000d284:	e8 db 85 00 00       	call   c0015864 <Process::createThread(void (*)(void*), void*, int)>
c000d289:	83 c4 10             	add    esp,0x10
c000d28c:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d296:	0f b7 c0             	movzx  eax,ax
c000d299:	3d 25 03 00 00       	cmp    eax,0x325
c000d29e:	75 06                	jne    c000d2a6 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d2a0:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d2a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a9:	0f b7 c0             	movzx  eax,ax
c000d2ac:	3d 24 03 00 00       	cmp    eax,0x324
c000d2b1:	75 06                	jne    c000d2b9 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d2b3:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d2b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2bc:	0f b7 c0             	movzx  eax,ax
c000d2bf:	3d 23 03 00 00       	cmp    eax,0x323
c000d2c4:	75 06                	jne    c000d2cc <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d2c6:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d2cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2cf:	0f b7 c0             	movzx  eax,ax
c000d2d2:	3d 26 03 00 00       	cmp    eax,0x326
c000d2d7:	75 06                	jne    c000d2df <sendKeyboardToken(KeyboardToken)+0x30c>
c000d2d9:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d2df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2e2:	0f b7 c0             	movzx  eax,ax
c000d2e5:	3d 27 03 00 00       	cmp    eax,0x327
c000d2ea:	75 06                	jne    c000d2f2 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d2ec:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d2f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2f5:	0f b7 c0             	movzx  eax,ax
c000d2f8:	3d 22 03 00 00       	cmp    eax,0x322
c000d2fd:	75 06                	jne    c000d305 <sendKeyboardToken(KeyboardToken)+0x332>
c000d2ff:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d305:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d309:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d30c:	83 f0 01             	xor    eax,0x1
c000d30f:	0f b6 c0             	movzx  eax,al
c000d312:	85 c0                	test   eax,eax
c000d314:	74 7c                	je     c000d392 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d316:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d31b:	0f b6 c0             	movzx  eax,al
c000d31e:	85 c0                	test   eax,eax
c000d320:	74 43                	je     c000d365 <sendKeyboardToken(KeyboardToken)+0x392>
c000d322:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d326:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d32a:	85 c0                	test   eax,eax
c000d32c:	74 2b                	je     c000d359 <sendKeyboardToken(KeyboardToken)+0x386>
c000d32e:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d334:	89 d0                	mov    eax,edx
c000d336:	c1 e0 02             	shl    eax,0x2
c000d339:	01 d0                	add    eax,edx
c000d33b:	d1 e0                	shl    eax,1
c000d33d:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d345:	0f b7 c0             	movzx  eax,ax
c000d348:	8d 50 d0             	lea    edx,[eax-0x30]
c000d34b:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d350:	01 d0                	add    eax,edx
c000d352:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d357:	eb 71                	jmp    c000d3ca <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d359:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d363:	eb 65                	jmp    c000d3ca <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d365:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d36a:	85 c0                	test   eax,eax
c000d36c:	74 18                	je     c000d386 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d36e:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d373:	0f b6 c0             	movzx  eax,al
c000d376:	83 ec 0c             	sub    esp,0xc
c000d379:	50                   	push   eax
c000d37a:	e8 79 fb ff ff       	call   c000cef8 <sendKeyToTerminal(unsigned char)>
c000d37f:	83 c4 10             	add    esp,0x10
c000d382:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d386:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d390:	eb 38                	jmp    c000d3ca <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d395:	0f b7 c0             	movzx  eax,ax
c000d398:	3d 01 01 00 00       	cmp    eax,0x101
c000d39d:	75 2b                	jne    c000d3ca <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d39f:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3a4:	85 c0                	test   eax,eax
c000d3a6:	74 18                	je     c000d3c0 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d3a8:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3ad:	0f b6 c0             	movzx  eax,al
c000d3b0:	83 ec 0c             	sub    esp,0xc
c000d3b3:	50                   	push   eax
c000d3b4:	e8 3f fb ff ff       	call   c000cef8 <sendKeyToTerminal(unsigned char)>
c000d3b9:	83 c4 10             	add    esp,0x10
c000d3bc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d3c0:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d3ca:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d3cd:	83 f0 01             	xor    eax,0x1
c000d3d0:	0f b6 c0             	movzx  eax,al
c000d3d3:	85 c0                	test   eax,eax
c000d3d5:	74 5a                	je     c000d431 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3d7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d3da:	83 f0 01             	xor    eax,0x1
c000d3dd:	0f b6 c0             	movzx  eax,al
c000d3e0:	85 c0                	test   eax,eax
c000d3e2:	74 4d                	je     c000d431 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3e4:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d3e9:	83 f0 01             	xor    eax,0x1
c000d3ec:	0f b6 c0             	movzx  eax,al
c000d3ef:	85 c0                	test   eax,eax
c000d3f1:	74 3e                	je     c000d431 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f6:	0f b7 c0             	movzx  eax,ax
c000d3f9:	83 f8 1f             	cmp    eax,0x1f
c000d3fc:	76 0b                	jbe    c000d409 <sendKeyboardToken(KeyboardToken)+0x436>
c000d3fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d401:	0f b7 c0             	movzx  eax,ax
c000d404:	83 f8 7e             	cmp    eax,0x7e
c000d407:	76 16                	jbe    c000d41f <sendKeyboardToken(KeyboardToken)+0x44c>
c000d409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d40c:	0f b7 c0             	movzx  eax,ax
c000d40f:	83 f8 0a             	cmp    eax,0xa
c000d412:	74 0b                	je     c000d41f <sendKeyboardToken(KeyboardToken)+0x44c>
c000d414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d417:	0f b7 c0             	movzx  eax,ax
c000d41a:	83 f8 08             	cmp    eax,0x8
c000d41d:	75 12                	jne    c000d431 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d41f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d422:	0f b6 c0             	movzx  eax,al
c000d425:	83 ec 0c             	sub    esp,0xc
c000d428:	50                   	push   eax
c000d429:	e8 ca fa ff ff       	call   c000cef8 <sendKeyToTerminal(unsigned char)>
c000d42e:	83 c4 10             	add    esp,0x10
c000d431:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d434:	83 f0 01             	xor    eax,0x1
c000d437:	0f b6 c0             	movzx  eax,al
c000d43a:	85 c0                	test   eax,eax
c000d43c:	74 5d                	je     c000d49b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d43e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d441:	83 f0 01             	xor    eax,0x1
c000d444:	0f b6 c0             	movzx  eax,al
c000d447:	85 c0                	test   eax,eax
c000d449:	74 50                	je     c000d49b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d44b:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d450:	0f b6 c0             	movzx  eax,al
c000d453:	85 c0                	test   eax,eax
c000d455:	74 44                	je     c000d49b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d45a:	0f b7 c0             	movzx  eax,ax
c000d45d:	83 f8 3f             	cmp    eax,0x3f
c000d460:	76 39                	jbe    c000d49b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d465:	0f b7 c0             	movzx  eax,ax
c000d468:	83 f8 7f             	cmp    eax,0x7f
c000d46b:	77 2e                	ja     c000d49b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d46d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d470:	88 c2                	mov    dl,al
c000d472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d475:	0f b7 c0             	movzx  eax,ax
c000d478:	83 f8 5f             	cmp    eax,0x5f
c000d47b:	76 04                	jbe    c000d481 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d47d:	b0 20                	mov    al,0x20
c000d47f:	eb 02                	jmp    c000d483 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d481:	b0 00                	mov    al,0x0
c000d483:	89 d1                	mov    ecx,edx
c000d485:	29 c1                	sub    ecx,eax
c000d487:	89 c8                	mov    eax,ecx
c000d489:	83 e8 40             	sub    eax,0x40
c000d48c:	0f b6 c0             	movzx  eax,al
c000d48f:	83 ec 0c             	sub    esp,0xc
c000d492:	50                   	push   eax
c000d493:	e8 60 fa ff ff       	call   c000cef8 <sendKeyToTerminal(unsigned char)>
c000d498:	83 c4 10             	add    esp,0x10
c000d49b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d49e:	0f b7 c0             	movzx  eax,ax
c000d4a1:	3d 00 03 00 00       	cmp    eax,0x300
c000d4a6:	75 12                	jne    c000d4ba <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d4a8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4ab:	83 f0 01             	xor    eax,0x1
c000d4ae:	0f b6 c0             	movzx  eax,al
c000d4b1:	85 c0                	test   eax,eax
c000d4b3:	74 05                	je     c000d4ba <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d4b5:	e8 5f b0 ff ff       	call   c0008519 <doTerminalCycle()>
c000d4ba:	90                   	nop
c000d4bb:	c9                   	leave  
c000d4bc:	c3                   	ret    

c000d4bd <clearInternalKeybuffer(VgaText*)>:
c000d4bd:	55                   	push   ebp
c000d4be:	89 e5                	mov    ebp,esp
c000d4c0:	83 ec 08             	sub    esp,0x8
c000d4c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c6:	05 02 01 00 00       	add    eax,0x102
c000d4cb:	83 ec 0c             	sub    esp,0xc
c000d4ce:	50                   	push   eax
c000d4cf:	e8 ac 30 ff ff       	call   c0000580 <strlen>
c000d4d4:	83 c4 10             	add    esp,0x10
c000d4d7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d4da:	81 c2 02 01 00 00    	add    edx,0x102
c000d4e0:	83 ec 04             	sub    esp,0x4
c000d4e3:	50                   	push   eax
c000d4e4:	6a 00                	push   0x0
c000d4e6:	52                   	push   edx
c000d4e7:	e8 04 30 ff ff       	call   c00004f0 <memset>
c000d4ec:	83 c4 10             	add    esp,0x10
c000d4ef:	90                   	nop
c000d4f0:	c9                   	leave  
c000d4f1:	c3                   	ret    

c000d4f2 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d4f2:	55                   	push   ebp
c000d4f3:	89 e5                	mov    ebp,esp
c000d4f5:	83 ec 18             	sub    esp,0x18
c000d4f8:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d4fd:	85 c0                	test   eax,eax
c000d4ff:	74 2a                	je     c000d52b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d501:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d507:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d50d:	83 ec 04             	sub    esp,0x4
c000d510:	68 40 84 02 c0       	push   0xc0028440
c000d515:	83 ec 08             	sub    esp,0x8
c000d518:	89 e0                	mov    eax,esp
c000d51a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d51d:	89 08                	mov    DWORD PTR [eax],ecx
c000d51f:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d522:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d526:	ff d2                	call   edx
c000d528:	83 c4 10             	add    esp,0x10
c000d52b:	fb                   	sti    
c000d52c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d533:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d537:	0f 84 0d 01 00 00    	je     c000d64a <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d53d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d540:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d546:	0f be c0             	movsx  eax,al
c000d549:	85 c0                	test   eax,eax
c000d54b:	75 2c                	jne    c000d579 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d54d:	fa                   	cli    
c000d54e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d553:	83 c0 01             	add    eax,0x1
c000d556:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d55b:	e8 50 85 00 00       	call   c0015ab0 <schedule()>
c000d560:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d565:	83 e8 01             	sub    eax,0x1
c000d568:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d56d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d572:	85 c0                	test   eax,eax
c000d574:	75 c7                	jne    c000d53d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d576:	fb                   	sti    
c000d577:	eb c4                	jmp    c000d53d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d579:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d57c:	8d 50 01             	lea    edx,[eax+0x1]
c000d57f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d582:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d585:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d58b:	88 10                	mov    BYTE PTR [eax],dl
c000d58d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d590:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d596:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d599:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d59d:	83 f8 03             	cmp    eax,0x3
c000d5a0:	75 1e                	jne    c000d5c0 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d5a2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5ac:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5b2:	83 ec 08             	sub    esp,0x8
c000d5b5:	6a 02                	push   0x2
c000d5b7:	50                   	push   eax
c000d5b8:	e8 8e 40 00 00       	call   c001164b <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5bd:	83 c4 10             	add    esp,0x10
c000d5c0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5c4:	83 f8 1c             	cmp    eax,0x1c
c000d5c7:	75 1e                	jne    c000d5e7 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d5c9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5d3:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5d9:	83 ec 08             	sub    esp,0x8
c000d5dc:	6a 09                	push   0x9
c000d5de:	50                   	push   eax
c000d5df:	e8 67 40 00 00       	call   c001164b <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5e4:	83 c4 10             	add    esp,0x10
c000d5e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ea:	05 02 01 00 00       	add    eax,0x102
c000d5ef:	83 ec 0c             	sub    esp,0xc
c000d5f2:	50                   	push   eax
c000d5f3:	e8 88 2f ff ff       	call   c0000580 <strlen>
c000d5f8:	83 c4 10             	add    esp,0x10
c000d5fb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5fe:	81 c2 02 01 00 00    	add    edx,0x102
c000d604:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d607:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d60a:	81 c2 02 01 00 00    	add    edx,0x102
c000d610:	83 ec 04             	sub    esp,0x4
c000d613:	50                   	push   eax
c000d614:	51                   	push   ecx
c000d615:	52                   	push   edx
c000d616:	e8 b5 2d ff ff       	call   c00003d0 <memmove>
c000d61b:	83 c4 10             	add    esp,0x10
c000d61e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d622:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d626:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d62a:	83 f8 0a             	cmp    eax,0xa
c000d62d:	74 16                	je     c000d645 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d62f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d633:	83 f8 03             	cmp    eax,0x3
c000d636:	74 0d                	je     c000d645 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d638:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d63c:	83 f8 1c             	cmp    eax,0x1c
c000d63f:	0f 85 ee fe ff ff    	jne    c000d533 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d645:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d648:	eb 03                	jmp    c000d64d <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d64a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d64d:	c9                   	leave  
c000d64e:	c3                   	ret    
c000d64f:	90                   	nop

c000d650 <Keyboard::Keyboard(char const*)>:
c000d650:	83 ec 0c             	sub    esp,0xc
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	83 ec 08             	sub    esp,0x8
c000d65a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d65e:	50                   	push   eax
c000d65f:	e8 44 f1 ff ff       	call   c000c7a8 <Device::Device(char const*)>
c000d664:	83 c4 10             	add    esp,0x10
c000d667:	ba dc 15 02 c0       	mov    edx,0xc00215dc
c000d66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d670:	89 10                	mov    DWORD PTR [eax],edx
c000d672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d676:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d680:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d687:	90                   	nop
c000d688:	83 c4 0c             	add    esp,0xc
c000d68b:	c3                   	ret    

c000d68c <Keyboard::~Keyboard()>:
c000d68c:	83 ec 0c             	sub    esp,0xc
c000d68f:	ba dc 15 02 c0       	mov    edx,0xc00215dc
c000d694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d698:	89 10                	mov    DWORD PTR [eax],edx
c000d69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d69e:	83 ec 0c             	sub    esp,0xc
c000d6a1:	50                   	push   eax
c000d6a2:	e8 6b ee ff ff       	call   c000c512 <Device::~Device()>
c000d6a7:	83 c4 10             	add    esp,0x10
c000d6aa:	90                   	nop
c000d6ab:	83 c4 0c             	add    esp,0xc
c000d6ae:	c3                   	ret    
c000d6af:	90                   	nop

c000d6b0 <Keyboard::~Keyboard()>:
c000d6b0:	83 ec 0c             	sub    esp,0xc
c000d6b3:	83 ec 0c             	sub    esp,0xc
c000d6b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6ba:	e8 cd ff ff ff       	call   c000d68c <Keyboard::~Keyboard()>
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	83 ec 08             	sub    esp,0x8
c000d6c5:	68 5c 01 00 00       	push   0x15c
c000d6ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6ce:	e8 39 d1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d6d3:	83 c4 10             	add    esp,0x10
c000d6d6:	83 c4 0c             	add    esp,0xc
c000d6d9:	c3                   	ret    

c000d6da <LogicalDisk::close(int, int, void*)>:
c000d6da:	83 c8 ff             	or     eax,0xffffffff
c000d6dd:	c3                   	ret    

c000d6de <LogicalDisk::~LogicalDisk()>:
c000d6de:	83 ec 0c             	sub    esp,0xc
c000d6e1:	ba 54 16 02 c0       	mov    edx,0xc0021654
c000d6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ea:	89 10                	mov    DWORD PTR [eax],edx
c000d6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f0:	83 ec 0c             	sub    esp,0xc
c000d6f3:	50                   	push   eax
c000d6f4:	e8 19 ee ff ff       	call   c000c512 <Device::~Device()>
c000d6f9:	83 c4 10             	add    esp,0x10
c000d6fc:	90                   	nop
c000d6fd:	83 c4 0c             	add    esp,0xc
c000d700:	c3                   	ret    
c000d701:	90                   	nop

c000d702 <LogicalDisk::~LogicalDisk()>:
c000d702:	83 ec 0c             	sub    esp,0xc
c000d705:	83 ec 0c             	sub    esp,0xc
c000d708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70c:	e8 cd ff ff ff       	call   c000d6de <LogicalDisk::~LogicalDisk()>
c000d711:	83 c4 10             	add    esp,0x10
c000d714:	83 ec 08             	sub    esp,0x8
c000d717:	68 78 01 00 00       	push   0x178
c000d71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d720:	e8 e7 d0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d725:	83 c4 10             	add    esp,0x10
c000d728:	83 c4 0c             	add    esp,0xc
c000d72b:	c3                   	ret    

c000d72c <LogicalDisk::open(int, int, void*)>:
c000d72c:	83 ec 18             	sub    esp,0x18
c000d72f:	68 08 16 02 c0       	push   0xc0021608
c000d734:	e8 74 3a 00 00       	call   c00111ad <KePanic(char const*)>
c000d739:	83 c8 ff             	or     eax,0xffffffff
c000d73c:	83 c4 1c             	add    esp,0x1c
c000d73f:	c3                   	ret    

c000d740 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d740:	53                   	push   ebx
c000d741:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d745:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d749:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d74d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d753:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d759:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d75f:	77 10                	ja     c000d771 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d761:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d767:	89 d3                	mov    ebx,edx
c000d769:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d76f:	72 05                	jb     c000d776 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d771:	83 c8 ff             	or     eax,0xffffffff
c000d774:	89 c2                	mov    edx,eax
c000d776:	5b                   	pop    ebx
c000d777:	c3                   	ret    

c000d778 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d778:	56                   	push   esi
c000d779:	83 c8 ff             	or     eax,0xffffffff
c000d77c:	53                   	push   ebx
c000d77d:	89 c2                	mov    edx,eax
c000d77f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d783:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d787:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d78b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d791:	77 27                	ja     c000d7ba <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d793:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d799:	89 d8                	mov    eax,ebx
c000d79b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d7a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d7a6:	89 c2                	mov    edx,eax
c000d7a8:	73 10                	jae    c000d7ba <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d7aa:	89 c8                	mov    eax,ecx
c000d7ac:	89 da                	mov    edx,ebx
c000d7ae:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d7b4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d7ba:	5b                   	pop    ebx
c000d7bb:	5e                   	pop    esi
c000d7bc:	c3                   	ret    
c000d7bd:	90                   	nop

c000d7be <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d7be:	83 ec 1c             	sub    esp,0x1c
c000d7c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7d5:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d7dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d7e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e4:	83 ec 08             	sub    esp,0x8
c000d7e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d7eb:	50                   	push   eax
c000d7ec:	e8 b7 ef ff ff       	call   c000c7a8 <Device::Device(char const*)>
c000d7f1:	83 c4 10             	add    esp,0x10
c000d7f4:	ba 54 16 02 c0       	mov    edx,0xc0021654
c000d7f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7fd:	89 10                	mov    DWORD PTR [eax],edx
c000d7ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d803:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d80a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d80e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d819:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d824:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d82e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d832:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d836:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d83a:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d840:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d846:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d84a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d84d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d851:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d857:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d85d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d861:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d865:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d86b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d86f:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d879:	90                   	nop
c000d87a:	83 c4 1c             	add    esp,0x1c
c000d87d:	c3                   	ret    

c000d87e <LogicalDisk::assignDriveLetter()>:
c000d87e:	55                   	push   ebp
c000d87f:	57                   	push   edi
c000d880:	56                   	push   esi
c000d881:	53                   	push   ebx
c000d882:	83 ec 14             	sub    esp,0x14
c000d885:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d889:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d88f:	b0 41                	mov    al,0x41
c000d891:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d897:	84 d2                	test   dl,dl
c000d899:	75 02                	jne    c000d89d <LogicalDisk::assignDriveLetter()+0x1f>
c000d89b:	b0 43                	mov    al,0x43
c000d89d:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d8a3:	0f b6 ca             	movzx  ecx,dl
c000d8a6:	0f be e8             	movsx  ebp,al
c000d8a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d8ad:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d8b1:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d8b7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d8bb:	3c 43                	cmp    al,0x43
c000d8bd:	75 10                	jne    c000d8cf <LogicalDisk::assignDriveLetter()+0x51>
c000d8bf:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d8c6:	75 5a                	jne    c000d922 <LogicalDisk::assignDriveLetter()+0xa4>
c000d8c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d8cd:	75 53                	jne    c000d922 <LogicalDisk::assignDriveLetter()+0xa4>
c000d8cf:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d8d2:	ba 01 00 00 00       	mov    edx,0x1
c000d8d7:	89 34 24             	mov    DWORD PTR [esp],esi
c000d8da:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d8dd:	d3 e2                	shl    edx,cl
c000d8df:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d8e3:	89 d7                	mov    edi,edx
c000d8e5:	89 d6                	mov    esi,edx
c000d8e7:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d8eb:	c1 ff 1f             	sar    edi,0x1f
c000d8ee:	21 f9                	and    ecx,edi
c000d8f0:	09 d1                	or     ecx,edx
c000d8f2:	75 2e                	jne    c000d922 <LogicalDisk::assignDriveLetter()+0xa4>
c000d8f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d8f8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d8fc:	09 f2                	or     edx,esi
c000d8fe:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d901:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000d907:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d90b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d911:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000d918:	09 fa                	or     edx,edi
c000d91a:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000d920:	eb 0d                	jmp    c000d92f <LogicalDisk::assignDriveLetter()+0xb1>
c000d922:	8d 50 01             	lea    edx,[eax+0x1]
c000d925:	45                   	inc    ebp
c000d926:	80 fa 5b             	cmp    dl,0x5b
c000d929:	88 d0                	mov    al,dl
c000d92b:	75 8e                	jne    c000d8bb <LogicalDisk::assignDriveLetter()+0x3d>
c000d92d:	31 c0                	xor    eax,eax
c000d92f:	83 c4 14             	add    esp,0x14
c000d932:	5b                   	pop    ebx
c000d933:	5e                   	pop    esi
c000d934:	5f                   	pop    edi
c000d935:	5d                   	pop    ebp
c000d936:	c3                   	ret    
c000d937:	90                   	nop

c000d938 <LogicalDisk::mount()>:
c000d938:	56                   	push   esi
c000d939:	53                   	push   ebx
c000d93a:	53                   	push   ebx
c000d93b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d93f:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000d945:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d94f:	85 db                	test   ebx,ebx
c000d951:	74 27                	je     c000d97a <LogicalDisk::mount()+0x42>
c000d953:	51                   	push   ecx
c000d954:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d95b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d95d:	83 e8 41             	sub    eax,0x41
c000d960:	50                   	push   eax
c000d961:	56                   	push   esi
c000d962:	53                   	push   ebx
c000d963:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	84 c0                	test   al,al
c000d96b:	74 08                	je     c000d975 <LogicalDisk::mount()+0x3d>
c000d96d:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d973:	eb 07                	jmp    c000d97c <LogicalDisk::mount()+0x44>
c000d975:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d978:	eb d5                	jmp    c000d94f <LogicalDisk::mount()+0x17>
c000d97a:	31 c0                	xor    eax,eax
c000d97c:	5a                   	pop    edx
c000d97d:	5b                   	pop    ebx
c000d97e:	5e                   	pop    esi
c000d97f:	c3                   	ret    

c000d980 <LogicalDisk::unmount()>:
c000d980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d984:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d98e:	c3                   	ret    
c000d98f:	90                   	nop

c000d990 <LogicalDisk::eject()>:
c000d990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d994:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d99a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d99c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d9a0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d9a3:	90                   	nop

c000d9a4 <LogicalDisk::unassignDriveLetter()>:
c000d9a4:	57                   	push   edi
c000d9a5:	56                   	push   esi
c000d9a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d9aa:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d9b1:	85 c9                	test   ecx,ecx
c000d9b3:	75 0f                	jne    c000d9c4 <LogicalDisk::unassignDriveLetter()+0x20>
c000d9b5:	c7 44 24 0c 2c 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc002162c
c000d9bd:	5e                   	pop    esi
c000d9be:	5f                   	pop    edi
c000d9bf:	e9 e9 37 00 00       	jmp    c00111ad <KePanic(char const*)>
c000d9c4:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d9cb:	83 e9 41             	sub    ecx,0x41
c000d9ce:	b8 01 00 00 00       	mov    eax,0x1
c000d9d3:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000d9de:	d3 e0                	shl    eax,cl
c000d9e0:	89 c7                	mov    edi,eax
c000d9e2:	f7 d0                	not    eax
c000d9e4:	c1 ff 1f             	sar    edi,0x1f
c000d9e7:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000d9ed:	89 fe                	mov    esi,edi
c000d9ef:	f7 d6                	not    esi
c000d9f1:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000d9f7:	5e                   	pop    esi
c000d9f8:	5f                   	pop    edi
c000d9f9:	c3                   	ret    

c000d9fa <LogicalDisk::read(unsigned long long, int, void*)>:
c000d9fa:	57                   	push   edi
c000d9fb:	56                   	push   esi
c000d9fc:	53                   	push   ebx
c000d9fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da0d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da13:	77 41                	ja     c000da56 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000da15:	99                   	cdq    
c000da16:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da1c:	01 c8                	add    eax,ecx
c000da1e:	11 da                	adc    edx,ebx
c000da20:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da26:	19 d7                	sbb    edi,edx
c000da28:	72 33                	jb     c000da5d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000da2a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da30:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da36:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da3a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da3e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da44:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da4e:	5b                   	pop    ebx
c000da4f:	5e                   	pop    esi
c000da50:	5f                   	pop    edi
c000da51:	e9 d4 0a 00 00       	jmp    c000e52a <VCache::read(unsigned long long, int, void*)>
c000da56:	b8 05 00 00 00       	mov    eax,0x5
c000da5b:	eb 05                	jmp    c000da62 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000da5d:	b8 07 00 00 00       	mov    eax,0x7
c000da62:	5b                   	pop    ebx
c000da63:	5e                   	pop    esi
c000da64:	5f                   	pop    edi
c000da65:	c3                   	ret    

c000da66 <LogicalDisk::write(unsigned long long, int, void*)>:
c000da66:	57                   	push   edi
c000da67:	56                   	push   esi
c000da68:	53                   	push   ebx
c000da69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da71:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da79:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da7f:	77 41                	ja     c000dac2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000da81:	99                   	cdq    
c000da82:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da88:	01 c8                	add    eax,ecx
c000da8a:	11 da                	adc    edx,ebx
c000da8c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da92:	19 d7                	sbb    edi,edx
c000da94:	72 33                	jb     c000dac9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000da96:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da9c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000daa2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000daa6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000daaa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dab0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dab6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000daba:	5b                   	pop    ebx
c000dabb:	5e                   	pop    esi
c000dabc:	5f                   	pop    edi
c000dabd:	e9 6e 09 00 00       	jmp    c000e430 <VCache::write(unsigned long long, int, void*)>
c000dac2:	b8 05 00 00 00       	mov    eax,0x5
c000dac7:	eb 05                	jmp    c000dace <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dac9:	b8 07 00 00 00       	mov    eax,0x7
c000dace:	5b                   	pop    ebx
c000dacf:	5e                   	pop    esi
c000dad0:	5f                   	pop    edi
c000dad1:	c3                   	ret    
c000dad2:	66 90                	xchg   ax,ax

c000dad4 <Mouse::Mouse(char const*)>:
c000dad4:	83 ec 0c             	sub    esp,0xc
c000dad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dadb:	83 ec 08             	sub    esp,0x8
c000dade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dae2:	50                   	push   eax
c000dae3:	e8 c0 ec ff ff       	call   c000c7a8 <Device::Device(char const*)>
c000dae8:	83 c4 10             	add    esp,0x10
c000daeb:	ba 80 16 02 c0       	mov    edx,0xc0021680
c000daf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf4:	89 10                	mov    DWORD PTR [eax],edx
c000daf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dafa:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000db04:	90                   	nop
c000db05:	83 c4 0c             	add    esp,0xc
c000db08:	c3                   	ret    
c000db09:	90                   	nop
c000db0a:	66 90                	xchg   ax,ax

c000db0c <Mouse::~Mouse()>:
c000db0c:	83 ec 0c             	sub    esp,0xc
c000db0f:	ba 80 16 02 c0       	mov    edx,0xc0021680
c000db14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db18:	89 10                	mov    DWORD PTR [eax],edx
c000db1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db1e:	83 ec 0c             	sub    esp,0xc
c000db21:	50                   	push   eax
c000db22:	e8 eb e9 ff ff       	call   c000c512 <Device::~Device()>
c000db27:	83 c4 10             	add    esp,0x10
c000db2a:	90                   	nop
c000db2b:	83 c4 0c             	add    esp,0xc
c000db2e:	c3                   	ret    
c000db2f:	90                   	nop

c000db30 <Mouse::~Mouse()>:
c000db30:	83 ec 0c             	sub    esp,0xc
c000db33:	83 ec 0c             	sub    esp,0xc
c000db36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db3a:	e8 cd ff ff ff       	call   c000db0c <Mouse::~Mouse()>
c000db3f:	83 c4 10             	add    esp,0x10
c000db42:	83 ec 08             	sub    esp,0x8
c000db45:	68 58 01 00 00       	push   0x158
c000db4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db4e:	e8 b9 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000db53:	83 c4 10             	add    esp,0x10
c000db56:	83 c4 0c             	add    esp,0xc
c000db59:	c3                   	ret    

c000db5a <NIC::getMAC()>:
c000db5a:	31 c0                	xor    eax,eax
c000db5c:	31 d2                	xor    edx,edx
c000db5e:	c3                   	ret    
c000db5f:	90                   	nop

c000db60 <NIC::write(int, unsigned char*, int*)>:
c000db60:	b8 01 00 00 00       	mov    eax,0x1
c000db65:	c3                   	ret    

c000db66 <NIC::NIC(char const*)>:
c000db66:	83 ec 0c             	sub    esp,0xc
c000db69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6d:	83 ec 08             	sub    esp,0x8
c000db70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db74:	50                   	push   eax
c000db75:	e8 2e ec ff ff       	call   c000c7a8 <Device::Device(char const*)>
c000db7a:	83 c4 10             	add    esp,0x10
c000db7d:	ba ac 16 02 c0       	mov    edx,0xc00216ac
c000db82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db86:	89 10                	mov    DWORD PTR [eax],edx
c000db88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db8c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000db96:	90                   	nop
c000db97:	83 c4 0c             	add    esp,0xc
c000db9a:	c3                   	ret    
c000db9b:	90                   	nop

c000db9c <NIC::~NIC()>:
c000db9c:	83 ec 0c             	sub    esp,0xc
c000db9f:	ba ac 16 02 c0       	mov    edx,0xc00216ac
c000dba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba8:	89 10                	mov    DWORD PTR [eax],edx
c000dbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbae:	83 ec 0c             	sub    esp,0xc
c000dbb1:	50                   	push   eax
c000dbb2:	e8 5b e9 ff ff       	call   c000c512 <Device::~Device()>
c000dbb7:	83 c4 10             	add    esp,0x10
c000dbba:	90                   	nop
c000dbbb:	83 c4 0c             	add    esp,0xc
c000dbbe:	c3                   	ret    
c000dbbf:	90                   	nop

c000dbc0 <NIC::~NIC()>:
c000dbc0:	83 ec 0c             	sub    esp,0xc
c000dbc3:	83 ec 0c             	sub    esp,0xc
c000dbc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbca:	e8 cd ff ff ff       	call   c000db9c <NIC::~NIC()>
c000dbcf:	83 c4 10             	add    esp,0x10
c000dbd2:	83 ec 08             	sub    esp,0x8
c000dbd5:	68 58 01 00 00       	push   0x158
c000dbda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbde:	e8 29 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dbe3:	83 c4 10             	add    esp,0x10
c000dbe6:	83 c4 0c             	add    esp,0xc
c000dbe9:	c3                   	ret    

c000dbea <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbea:	55                   	push   ebp
c000dbeb:	57                   	push   edi
c000dbec:	56                   	push   esi
c000dbed:	53                   	push   ebx
c000dbee:	81 ec 28 01 00 00    	sub    esp,0x128
c000dbf4:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dbfb:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dc02:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dc09:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dc10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc14:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc18:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc1f:	e8 80 ec ff ff       	call   c000c8a4 <Device::getName()>
c000dc24:	5a                   	pop    edx
c000dc25:	59                   	pop    ecx
c000dc26:	50                   	push   eax
c000dc27:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dc2b:	55                   	push   ebp
c000dc2c:	e8 1f 2a ff ff       	call   c0000650 <strcpy>
c000dc31:	5b                   	pop    ebx
c000dc32:	58                   	pop    eax
c000dc33:	68 d8 16 02 c0       	push   0xc00216d8
c000dc38:	55                   	push   ebp
c000dc39:	e8 32 2c ff ff       	call   c0000870 <strcat>
c000dc3e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dc45:	e8 89 9e ff ff       	call   c0007ad3 <malloc>
c000dc4a:	83 c4 0c             	add    esp,0xc
c000dc4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc51:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc55:	89 c3                	mov    ebx,eax
c000dc57:	57                   	push   edi
c000dc58:	56                   	push   esi
c000dc59:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dc60:	55                   	push   ebp
c000dc61:	50                   	push   eax
c000dc62:	e8 57 fb ff ff       	call   c000d7be <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dc67:	83 c4 14             	add    esp,0x14
c000dc6a:	53                   	push   ebx
c000dc6b:	e8 0e fc ff ff       	call   c000d87e <LogicalDisk::assignDriveLetter()>
c000dc70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc73:	e8 c0 fc ff ff       	call   c000d938 <LogicalDisk::mount()>
c000dc78:	58                   	pop    eax
c000dc79:	5a                   	pop    edx
c000dc7a:	53                   	push   ebx
c000dc7b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc82:	e8 89 e9 ff ff       	call   c000c610 <Device::addChild(Device*)>
c000dc87:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dc8d:	5b                   	pop    ebx
c000dc8e:	5e                   	pop    esi
c000dc8f:	5f                   	pop    edi
c000dc90:	5d                   	pop    ebp
c000dc91:	c3                   	ret    

c000dc92 <createPartitionsForDisk(PhysicalDisk*)>:
c000dc92:	55                   	push   ebp
c000dc93:	57                   	push   edi
c000dc94:	56                   	push   esi
c000dc95:	53                   	push   ebx
c000dc96:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dc9c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dca3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dca9:	3d 00 02 00 00       	cmp    eax,0x200
c000dcae:	74 27                	je     c000dcd7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dcb0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dcb6:	83 ec 10             	sub    esp,0x10
c000dcb9:	99                   	cdq    
c000dcba:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dcc0:	52                   	push   edx
c000dcc1:	50                   	push   eax
c000dcc2:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dcc6:	c1 e6 0a             	shl    esi,0xa
c000dcc9:	89 fd                	mov    ebp,edi
c000dccb:	55                   	push   ebp
c000dccc:	56                   	push   esi
c000dccd:	e8 9e 14 01 00       	call   c001f170 <__udivdi3>
c000dcd2:	e9 b9 00 00 00       	jmp    c000dd90 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dcd7:	83 ec 0c             	sub    esp,0xc
c000dcda:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcdc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dce0:	56                   	push   esi
c000dce1:	6a 01                	push   0x1
c000dce3:	6a 00                	push   0x0
c000dce5:	6a 00                	push   0x0
c000dce7:	53                   	push   ebx
c000dce8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dceb:	83 c4 20             	add    esp,0x20
c000dcee:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dcf6:	75 0a                	jne    c000dd02 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dcf8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dd00:	74 2c                	je     c000dd2e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dd02:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd08:	83 ec 10             	sub    esp,0x10
c000dd0b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd11:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd17:	89 f7                	mov    edi,esi
c000dd19:	c1 ff 1f             	sar    edi,0x1f
c000dd1c:	57                   	push   edi
c000dd1d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd21:	56                   	push   esi
c000dd22:	c1 e0 0a             	shl    eax,0xa
c000dd25:	52                   	push   edx
c000dd26:	50                   	push   eax
c000dd27:	e8 44 14 01 00       	call   c001f170 <__udivdi3>
c000dd2c:	eb 62                	jmp    c000dd90 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd2e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dd35:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dd3c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dd43:	89 cf                	mov    edi,ecx
c000dd45:	83 e2 7f             	and    edx,0x7f
c000dd48:	83 e7 7f             	and    edi,0x7f
c000dd4b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dd4e:	83 e0 7f             	and    eax,0x7f
c000dd51:	8d 14 01             	lea    edx,[ecx+eax*1]
c000dd54:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000dd5b:	83 e0 7f             	and    eax,0x7f
c000dd5e:	01 d0                	add    eax,edx
c000dd60:	84 c0                	test   al,al
c000dd62:	89 c5                	mov    ebp,eax
c000dd64:	74 41                	je     c000dda7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dd66:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd6c:	83 ec 10             	sub    esp,0x10
c000dd6f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd75:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd7b:	89 f7                	mov    edi,esi
c000dd7d:	c1 ff 1f             	sar    edi,0x1f
c000dd80:	57                   	push   edi
c000dd81:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd85:	56                   	push   esi
c000dd86:	c1 e0 0a             	shl    eax,0xa
c000dd89:	52                   	push   edx
c000dd8a:	50                   	push   eax
c000dd8b:	e8 e0 13 01 00       	call   c001f170 <__udivdi3>
c000dd90:	83 c4 14             	add    esp,0x14
c000dd93:	52                   	push   edx
c000dd94:	50                   	push   eax
c000dd95:	6a 00                	push   0x0
c000dd97:	6a 00                	push   0x0
c000dd99:	53                   	push   ebx
c000dd9a:	e8 4b fe ff ff       	call   c000dbea <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd9f:	83 c4 20             	add    esp,0x20
c000dda2:	e9 73 01 00 00       	jmp    c000df1a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000dda7:	89 f0                	mov    eax,esi
c000dda9:	31 c9                	xor    ecx,ecx
c000ddab:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ddb2:	75 02                	jne    c000ddb6 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ddb4:	89 cd                	mov    ebp,ecx
c000ddb6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ddbe:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ddc5:	83 c0 10             	add    eax,0x10
c000ddc8:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ddd0:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000ddd7:	c1 e2 08             	shl    edx,0x8
c000ddda:	c1 e6 10             	shl    esi,0x10
c000dddd:	09 f2                	or     edx,esi
c000dddf:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000dde6:	09 f2                	or     edx,esi
c000dde8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ddef:	c1 e6 18             	shl    esi,0x18
c000ddf2:	09 f2                	or     edx,esi
c000ddf4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ddfb:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ddff:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000de06:	c1 e6 10             	shl    esi,0x10
c000de09:	c1 e2 08             	shl    edx,0x8
c000de0c:	09 f2                	or     edx,esi
c000de0e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000de15:	09 f2                	or     edx,esi
c000de17:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000de1e:	c1 e6 18             	shl    esi,0x18
c000de21:	09 f2                	or     edx,esi
c000de23:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000de27:	41                   	inc    ecx
c000de28:	83 f9 04             	cmp    ecx,0x4
c000de2b:	0f 85 7a ff ff ff    	jne    c000ddab <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000de31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de35:	83 f0 01             	xor    eax,0x1
c000de38:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000de3c:	75 4f                	jne    c000de8d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de42:	83 f0 01             	xor    eax,0x1
c000de45:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000de49:	75 42                	jne    c000de8d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de4b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de51:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000de59:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de5f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000de67:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de6d:	89 f7                	mov    edi,esi
c000de6f:	c1 ff 1f             	sar    edi,0x1f
c000de72:	57                   	push   edi
c000de73:	56                   	push   esi
c000de74:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de78:	52                   	push   edx
c000de79:	c1 e0 0a             	shl    eax,0xa
c000de7c:	50                   	push   eax
c000de7d:	e8 ee 12 01 00       	call   c001f170 <__udivdi3>
c000de82:	83 c4 10             	add    esp,0x10
c000de85:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de89:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de8d:	89 e8                	mov    eax,ebp
c000de8f:	0f b6 e8             	movzx  ebp,al
c000de92:	85 ed                	test   ebp,ebp
c000de94:	74 50                	je     c000dee6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000de96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de9a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de9e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dea2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dea6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000deaa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000deae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000deb2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000deb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000debe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dec2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dec6:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000deca:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dece:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000ded2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000ded6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000deda:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000dede:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000dee2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000dee6:	31 ed                	xor    ebp,ebp
c000dee8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000deec:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000def0:	89 f8                	mov    eax,edi
c000def2:	09 f0                	or     eax,esi
c000def4:	74 1e                	je     c000df14 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000def6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000defa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000defe:	89 d1                	mov    ecx,edx
c000df00:	09 c1                	or     ecx,eax
c000df02:	74 10                	je     c000df14 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000df04:	83 ec 0c             	sub    esp,0xc
c000df07:	57                   	push   edi
c000df08:	56                   	push   esi
c000df09:	52                   	push   edx
c000df0a:	50                   	push   eax
c000df0b:	53                   	push   ebx
c000df0c:	e8 d9 fc ff ff       	call   c000dbea <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000df11:	83 c4 20             	add    esp,0x20
c000df14:	45                   	inc    ebp
c000df15:	83 fd 04             	cmp    ebp,0x4
c000df18:	75 ce                	jne    c000dee8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000df1a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000df20:	5b                   	pop    ebx
c000df21:	5e                   	pop    esi
c000df22:	5f                   	pop    edi
c000df23:	5d                   	pop    ebp
c000df24:	c3                   	ret    
c000df25:	66 90                	xchg   ax,ax
c000df27:	90                   	nop

c000df28 <Serial::Serial(char const*)>:
c000df28:	83 ec 0c             	sub    esp,0xc
c000df2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df2f:	83 ec 08             	sub    esp,0x8
c000df32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df36:	50                   	push   eax
c000df37:	e8 6c e8 ff ff       	call   c000c7a8 <Device::Device(char const*)>
c000df3c:	83 c4 10             	add    esp,0x10
c000df3f:	ba ec 16 02 c0       	mov    edx,0xc00216ec
c000df44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df48:	89 10                	mov    DWORD PTR [eax],edx
c000df4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000df58:	90                   	nop
c000df59:	83 c4 0c             	add    esp,0xc
c000df5c:	c3                   	ret    
c000df5d:	90                   	nop
c000df5e:	66 90                	xchg   ax,ax

c000df60 <Serial::~Serial()>:
c000df60:	83 ec 0c             	sub    esp,0xc
c000df63:	ba ec 16 02 c0       	mov    edx,0xc00216ec
c000df68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df6c:	89 10                	mov    DWORD PTR [eax],edx
c000df6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df72:	83 ec 0c             	sub    esp,0xc
c000df75:	50                   	push   eax
c000df76:	e8 97 e5 ff ff       	call   c000c512 <Device::~Device()>
c000df7b:	83 c4 10             	add    esp,0x10
c000df7e:	90                   	nop
c000df7f:	83 c4 0c             	add    esp,0xc
c000df82:	c3                   	ret    
c000df83:	90                   	nop

c000df84 <Serial::~Serial()>:
c000df84:	83 ec 0c             	sub    esp,0xc
c000df87:	83 ec 0c             	sub    esp,0xc
c000df8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8e:	e8 cd ff ff ff       	call   c000df60 <Serial::~Serial()>
c000df93:	83 c4 10             	add    esp,0x10
c000df96:	83 ec 08             	sub    esp,0x8
c000df99:	68 58 01 00 00       	push   0x158
c000df9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa2:	e8 65 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dfa7:	83 c4 10             	add    esp,0x10
c000dfaa:	83 c4 0c             	add    esp,0xc
c000dfad:	c3                   	ret    
c000dfae:	66 90                	xchg   ax,ax

c000dfb0 <Timer::Timer(char const*)>:
c000dfb0:	83 ec 0c             	sub    esp,0xc
c000dfb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb7:	83 ec 08             	sub    esp,0x8
c000dfba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfbe:	50                   	push   eax
c000dfbf:	e8 e4 e7 ff ff       	call   c000c7a8 <Device::Device(char const*)>
c000dfc4:	83 c4 10             	add    esp,0x10
c000dfc7:	ba 30 17 02 c0       	mov    edx,0xc0021730
c000dfcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd0:	89 10                	mov    DWORD PTR [eax],edx
c000dfd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000dfe0:	90                   	nop
c000dfe1:	83 c4 0c             	add    esp,0xc
c000dfe4:	c3                   	ret    
c000dfe5:	90                   	nop
c000dfe6:	66 90                	xchg   ax,ax

c000dfe8 <Timer::~Timer()>:
c000dfe8:	83 ec 0c             	sub    esp,0xc
c000dfeb:	ba 30 17 02 c0       	mov    edx,0xc0021730
c000dff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff4:	89 10                	mov    DWORD PTR [eax],edx
c000dff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffa:	83 ec 0c             	sub    esp,0xc
c000dffd:	50                   	push   eax
c000dffe:	e8 0f e5 ff ff       	call   c000c512 <Device::~Device()>
c000e003:	83 c4 10             	add    esp,0x10
c000e006:	90                   	nop
c000e007:	83 c4 0c             	add    esp,0xc
c000e00a:	c3                   	ret    
c000e00b:	90                   	nop

c000e00c <Timer::~Timer()>:
c000e00c:	83 ec 0c             	sub    esp,0xc
c000e00f:	83 ec 0c             	sub    esp,0xc
c000e012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e016:	e8 cd ff ff ff       	call   c000dfe8 <Timer::~Timer()>
c000e01b:	83 c4 10             	add    esp,0x10
c000e01e:	83 ec 08             	sub    esp,0x8
c000e021:	68 5c 01 00 00       	push   0x15c
c000e026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02a:	e8 dd c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e02f:	83 c4 10             	add    esp,0x10
c000e032:	83 c4 0c             	add    esp,0xc
c000e035:	c3                   	ret    

c000e036 <Timer::read()>:
c000e036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e03a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e040:	c3                   	ret    

c000e041 <setupTimer(int)>:
c000e041:	53                   	push   ebx
c000e042:	83 ec 14             	sub    esp,0x14
c000e045:	68 5c 01 00 00       	push   0x15c
c000e04a:	e8 84 9a ff ff       	call   c0007ad3 <malloc>
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 c3                	mov    ebx,eax
c000e054:	e8 7b 09 01 00       	call   c001e9d4 <PIT::PIT()>
c000e059:	58                   	pop    eax
c000e05a:	5a                   	pop    edx
c000e05b:	53                   	push   ebx
c000e05c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e062:	e8 a9 e5 ff ff       	call   c000c610 <Device::addChild(Device*)>
c000e067:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e069:	6a 00                	push   0x0
c000e06b:	6a 00                	push   0x0
c000e06d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e071:	53                   	push   ebx
c000e072:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e075:	83 c4 28             	add    esp,0x28
c000e078:	89 d8                	mov    eax,ebx
c000e07a:	5b                   	pop    ebx
c000e07b:	c3                   	ret    

c000e07c <timerHandler(unsigned int)>:
c000e07c:	56                   	push   esi
c000e07d:	53                   	push   ebx
c000e07e:	51                   	push   ecx
c000e07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e083:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e089:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e090:	0f 84 4a 01 00 00    	je     c000e1e0 <timerHandler(unsigned int)+0x164>
c000e096:	fa                   	cli    
c000e097:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e09d:	83 ec 0c             	sub    esp,0xc
c000e0a0:	68 d8 96 02 c0       	push   0xc00296d8
c000e0a5:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e0ab:	e8 90 16 01 00       	call   c001f740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e0b0:	83 c4 10             	add    esp,0x10
c000e0b3:	84 c0                	test   al,al
c000e0b5:	0f 85 a1 00 00 00    	jne    c000e15c <timerHandler(unsigned int)+0xe0>
c000e0bb:	83 ec 0c             	sub    esp,0xc
c000e0be:	68 d8 96 02 c0       	push   0xc00296d8
c000e0c3:	e8 94 16 01 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0c8:	83 c4 10             	add    esp,0x10
c000e0cb:	89 c6                	mov    esi,eax
c000e0cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e0d0:	83 ec 0c             	sub    esp,0xc
c000e0d3:	68 d8 96 02 c0       	push   0xc00296d8
c000e0d8:	e8 7f 16 01 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0dd:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e0e4:	89 c3                	mov    ebx,eax
c000e0e6:	e8 79 16 01 00       	call   c001f764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e0eb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e0ee:	83 c4 10             	add    esp,0x10
c000e0f1:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e0f7:	77 23                	ja     c000e11c <timerHandler(unsigned int)+0xa0>
c000e0f9:	83 ec 0c             	sub    esp,0xc
c000e0fc:	53                   	push   ebx
c000e0fd:	e8 a6 7e 00 00       	call   c0015fa8 <unblockTask(ThreadControlBlock*)>
c000e102:	83 c4 10             	add    esp,0x10
c000e105:	39 de                	cmp    esi,ebx
c000e107:	75 27                	jne    c000e130 <timerHandler(unsigned int)+0xb4>
c000e109:	83 ec 0c             	sub    esp,0xc
c000e10c:	68 d8 96 02 c0       	push   0xc00296d8
c000e111:	e8 46 16 01 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e116:	89 c6                	mov    esi,eax
c000e118:	eb 12                	jmp    c000e12c <timerHandler(unsigned int)+0xb0>
c000e11a:	66 90                	xchg   ax,ax
c000e11c:	52                   	push   edx
c000e11d:	52                   	push   edx
c000e11e:	53                   	push   ebx
c000e11f:	68 d8 96 02 c0       	push   0xc00296d8
c000e124:	e8 f7 16 01 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e129:	8d 76 00             	lea    esi,[esi+0x0]
c000e12c:	83 c4 10             	add    esp,0x10
c000e12f:	90                   	nop
c000e130:	83 ec 0c             	sub    esp,0xc
c000e133:	68 d8 96 02 c0       	push   0xc00296d8
c000e138:	e8 03 16 01 00       	call   c001f740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	84 c0                	test   al,al
c000e142:	75 18                	jne    c000e15c <timerHandler(unsigned int)+0xe0>
c000e144:	83 ec 0c             	sub    esp,0xc
c000e147:	68 d8 96 02 c0       	push   0xc00296d8
c000e14c:	e8 0b 16 01 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e151:	83 c4 10             	add    esp,0x10
c000e154:	39 f0                	cmp    eax,esi
c000e156:	0f 85 74 ff ff ff    	jne    c000e0d0 <timerHandler(unsigned int)+0x54>
c000e15c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e161:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e165:	74 41                	je     c000e1a8 <timerHandler(unsigned int)+0x12c>
c000e167:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e16e:	74 38                	je     c000e1a8 <timerHandler(unsigned int)+0x12c>
c000e170:	fa                   	cli    
c000e171:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e177:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e17c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e182:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e185:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e18b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e18e:	72 08                	jb     c000e198 <timerHandler(unsigned int)+0x11c>
c000e190:	e8 1b 79 00 00       	call   c0015ab0 <schedule()>
c000e195:	8d 76 00             	lea    esi,[esi+0x0]
c000e198:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e19d:	48                   	dec    eax
c000e19e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e1a3:	75 03                	jne    c000e1a8 <timerHandler(unsigned int)+0x12c>
c000e1a5:	fb                   	sti    
c000e1a6:	66 90                	xchg   ax,ax
c000e1a8:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e1ad:	48                   	dec    eax
c000e1ae:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e1b3:	75 1b                	jne    c000e1d0 <timerHandler(unsigned int)+0x154>
c000e1b5:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e1bc:	74 12                	je     c000e1d0 <timerHandler(unsigned int)+0x154>
c000e1be:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e1c8:	e8 e3 78 00 00       	call   c0015ab0 <schedule()>
c000e1cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e1d0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e1d5:	48                   	dec    eax
c000e1d6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e1db:	75 03                	jne    c000e1e0 <timerHandler(unsigned int)+0x164>
c000e1dd:	fb                   	sti    
c000e1de:	66 90                	xchg   ax,ax
c000e1e0:	58                   	pop    eax
c000e1e1:	5b                   	pop    ebx
c000e1e2:	5e                   	pop    esi
c000e1e3:	c3                   	ret    

c000e1e4 <VCache::VCache(PhysicalDisk*)>:
c000e1e4:	53                   	push   ebx
c000e1e5:	83 ec 18             	sub    esp,0x18
c000e1e8:	ba 60 17 02 c0       	mov    edx,0xc0021760
c000e1ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f1:	89 10                	mov    DWORD PTR [eax],edx
c000e1f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e1fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e202:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e20d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e214:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e21b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e21f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e226:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e22d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e231:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e238:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e23c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e240:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e244:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e24b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e256:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e25a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e25e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e266:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e26a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e26e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e275:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e27d:	83 ec 0c             	sub    esp,0xc
c000e280:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e284:	e8 4a 98 ff ff       	call   c0007ad3 <malloc>
c000e289:	83 c4 10             	add    esp,0x10
c000e28c:	89 c3                	mov    ebx,eax
c000e28e:	83 ec 0c             	sub    esp,0xc
c000e291:	53                   	push   ebx
c000e292:	e8 b9 75 00 00       	call   c0015850 <Mutex::Mutex()>
c000e297:	83 c4 10             	add    esp,0x10
c000e29a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e29e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e2a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2a5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e2a9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e2ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2b0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e2b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2bb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e2c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2cc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e2d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e2dc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e2df:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e2e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e2ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2ee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e2f4:	05 00 02 00 00       	add    eax,0x200
c000e2f9:	c1 e0 03             	shl    eax,0x3
c000e2fc:	83 ec 0c             	sub    esp,0xc
c000e2ff:	50                   	push   eax
c000e300:	e8 ce 97 ff ff       	call   c0007ad3 <malloc>
c000e305:	83 c4 10             	add    esp,0x10
c000e308:	89 c2                	mov    edx,eax
c000e30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e30e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e315:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e31c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e320:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e324:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e328:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e32e:	89 d0                	mov    eax,edx
c000e330:	c1 e0 02             	shl    eax,0x2
c000e333:	01 d0                	add    eax,edx
c000e335:	c1 e0 04             	shl    eax,0x4
c000e338:	83 ec 0c             	sub    esp,0xc
c000e33b:	50                   	push   eax
c000e33c:	e8 92 97 ff ff       	call   c0007ad3 <malloc>
c000e341:	83 c4 10             	add    esp,0x10
c000e344:	89 c2                	mov    edx,eax
c000e346:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e34a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e34d:	90                   	nop
c000e34e:	83 c4 18             	add    esp,0x18
c000e351:	5b                   	pop    ebx
c000e352:	c3                   	ret    
c000e353:	90                   	nop

c000e354 <VCache::invalidateReadBuffer()>:
c000e354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e358:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e35e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e362:	c3                   	ret    
c000e363:	90                   	nop

c000e364 <VCache::writeWriteBuffer()>:
c000e364:	53                   	push   ebx
c000e365:	83 ec 08             	sub    esp,0x8
c000e368:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e36c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e370:	74 1e                	je     c000e390 <VCache::writeWriteBuffer()+0x2c>
c000e372:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e375:	83 ec 0c             	sub    esp,0xc
c000e378:	8b 10                	mov    edx,DWORD PTR [eax]
c000e37a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e37d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e380:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e383:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e386:	50                   	push   eax
c000e387:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e38a:	83 c4 20             	add    esp,0x20
c000e38d:	8d 76 00             	lea    esi,[esi+0x0]
c000e390:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e397:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e39e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e3a2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e3a9:	83 c4 08             	add    esp,0x8
c000e3ac:	5b                   	pop    ebx
c000e3ad:	c3                   	ret    
c000e3ae:	66 90                	xchg   ax,ax

c000e3b0 <VCache::~VCache()>:
c000e3b0:	83 ec 0c             	sub    esp,0xc
c000e3b3:	ba 60 17 02 c0       	mov    edx,0xc0021760
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	89 10                	mov    DWORD PTR [eax],edx
c000e3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e3c5:	0f b6 c0             	movzx  eax,al
c000e3c8:	85 c0                	test   eax,eax
c000e3ca:	74 10                	je     c000e3dc <VCache::~VCache()+0x2c>
c000e3cc:	83 ec 0c             	sub    esp,0xc
c000e3cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d3:	e8 8c ff ff ff       	call   c000e364 <VCache::writeWriteBuffer()>
c000e3d8:	83 c4 10             	add    esp,0x10
c000e3db:	90                   	nop
c000e3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e3e3:	83 ec 0c             	sub    esp,0xc
c000e3e6:	50                   	push   eax
c000e3e7:	e8 f7 96 ff ff       	call   c0007ae3 <free>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e3f6:	83 ec 0c             	sub    esp,0xc
c000e3f9:	50                   	push   eax
c000e3fa:	e8 e4 96 ff ff       	call   c0007ae3 <free>
c000e3ff:	83 c4 10             	add    esp,0x10
c000e402:	90                   	nop
c000e403:	83 c4 0c             	add    esp,0xc
c000e406:	c3                   	ret    
c000e407:	90                   	nop

c000e408 <VCache::~VCache()>:
c000e408:	83 ec 0c             	sub    esp,0xc
c000e40b:	83 ec 0c             	sub    esp,0xc
c000e40e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e412:	e8 99 ff ff ff       	call   c000e3b0 <VCache::~VCache()>
c000e417:	83 c4 10             	add    esp,0x10
c000e41a:	83 ec 08             	sub    esp,0x8
c000e41d:	6a 44                	push   0x44
c000e41f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e423:	e8 e4 c3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e428:	83 c4 10             	add    esp,0x10
c000e42b:	83 c4 0c             	add    esp,0xc
c000e42e:	c3                   	ret    
c000e42f:	90                   	nop

c000e430 <VCache::write(unsigned long long, int, void*)>:
c000e430:	55                   	push   ebp
c000e431:	57                   	push   edi
c000e432:	56                   	push   esi
c000e433:	53                   	push   ebx
c000e434:	83 ec 1c             	sub    esp,0x1c
c000e437:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e43b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e43f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e443:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e447:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e44b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e44f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e453:	74 0f                	je     c000e464 <VCache::write(unsigned long long, int, void*)+0x34>
c000e455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e459:	53                   	push   ebx
c000e45a:	e8 f5 fe ff ff       	call   c000e354 <VCache::invalidateReadBuffer()>
c000e45f:	58                   	pop    eax
c000e460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e464:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e468:	74 66                	je     c000e4d0 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e46a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e471:	99                   	cdq    
c000e472:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e475:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e478:	89 c6                	mov    esi,eax
c000e47a:	31 ce                	xor    esi,ecx
c000e47c:	89 d0                	mov    eax,edx
c000e47e:	31 e8                	xor    eax,ebp
c000e480:	09 c6                	or     esi,eax
c000e482:	75 38                	jne    c000e4bc <VCache::write(unsigned long long, int, void*)+0x8c>
c000e484:	83 ff 01             	cmp    edi,0x1
c000e487:	75 33                	jne    c000e4bc <VCache::write(unsigned long long, int, void*)+0x8c>
c000e489:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e48c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e490:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e494:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e49a:	0f af f9             	imul   edi,ecx
c000e49d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e4a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4a2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e4a5:	40                   	inc    eax
c000e4a6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e4a9:	83 f8 50             	cmp    eax,0x50
c000e4ac:	75 72                	jne    c000e520 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e4ae:	83 ec 0c             	sub    esp,0xc
c000e4b1:	53                   	push   ebx
c000e4b2:	e8 ad fe ff ff       	call   c000e364 <VCache::writeWriteBuffer()>
c000e4b7:	83 c4 10             	add    esp,0x10
c000e4ba:	eb 64                	jmp    c000e520 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e4bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e4c0:	83 ec 0c             	sub    esp,0xc
c000e4c3:	53                   	push   ebx
c000e4c4:	e8 9b fe ff ff       	call   c000e364 <VCache::writeWriteBuffer()>
c000e4c9:	83 c4 10             	add    esp,0x10
c000e4cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4d0:	83 ff 4f             	cmp    edi,0x4f
c000e4d3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4d6:	7f 20                	jg     c000e4f8 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e4d8:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e4db:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4df:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e4e2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e4e5:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e4e8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e4ec:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e4f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4f4:	eb 2a                	jmp    c000e520 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e4f6:	66 90                	xchg   ax,ax
c000e4f8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4fc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4fe:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e502:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e506:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e50a:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e50e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e512:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e515:	83 c4 1c             	add    esp,0x1c
c000e518:	5b                   	pop    ebx
c000e519:	5e                   	pop    esi
c000e51a:	5f                   	pop    edi
c000e51b:	5d                   	pop    ebp
c000e51c:	ff e0                	jmp    eax
c000e51e:	66 90                	xchg   ax,ax
c000e520:	83 c4 1c             	add    esp,0x1c
c000e523:	31 c0                	xor    eax,eax
c000e525:	5b                   	pop    ebx
c000e526:	5e                   	pop    esi
c000e527:	5f                   	pop    edi
c000e528:	5d                   	pop    ebp
c000e529:	c3                   	ret    

c000e52a <VCache::read(unsigned long long, int, void*)>:
c000e52a:	55                   	push   ebp
c000e52b:	57                   	push   edi
c000e52c:	56                   	push   esi
c000e52d:	53                   	push   ebx
c000e52e:	83 ec 1c             	sub    esp,0x1c
c000e531:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e539:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e53d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e541:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e545:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e549:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e54d:	74 0d                	je     c000e55c <VCache::read(unsigned long long, int, void*)+0x32>
c000e54f:	83 ec 0c             	sub    esp,0xc
c000e552:	57                   	push   edi
c000e553:	e8 0c fe ff ff       	call   c000e364 <VCache::writeWriteBuffer()>
c000e558:	83 c4 10             	add    esp,0x10
c000e55b:	90                   	nop
c000e55c:	83 fd 01             	cmp    ebp,0x1
c000e55f:	0f 85 93 00 00 00    	jne    c000e5f8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e565:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e568:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e56f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e572:	0f 85 80 00 00 00    	jne    c000e5f8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e578:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e57b:	89 cd                	mov    ebp,ecx
c000e57d:	f7 dd                	neg    ebp
c000e57f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e583:	89 e8                	mov    eax,ebp
c000e585:	21 dd                	and    ebp,ebx
c000e587:	c1 f8 1f             	sar    eax,0x1f
c000e58a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e58e:	89 e8                	mov    eax,ebp
c000e590:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e594:	21 f5                	and    ebp,esi
c000e596:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e59a:	89 ea                	mov    edx,ebp
c000e59c:	74 2e                	je     c000e5cc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e59e:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e5a1:	75 29                	jne    c000e5cc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5a3:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e5a6:	75 24                	jne    c000e5cc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5a8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e5ab:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5b1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e5b4:	8d 70 ff             	lea    esi,[eax-0x1]
c000e5b7:	21 f3                	and    ebx,esi
c000e5b9:	0f af d9             	imul   ebx,ecx
c000e5bc:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e5bf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e5c3:	89 de                	mov    esi,ebx
c000e5c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5c7:	31 c0                	xor    eax,eax
c000e5c9:	eb 61                	jmp    c000e62c <VCache::read(unsigned long long, int, void*)+0x102>
c000e5cb:	90                   	nop
c000e5cc:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e5d0:	83 ec 0c             	sub    esp,0xc
c000e5d3:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e5d6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e5da:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e5dd:	8b 36                	mov    esi,DWORD PTR [esi]
c000e5df:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e5e2:	51                   	push   ecx
c000e5e3:	52                   	push   edx
c000e5e4:	50                   	push   eax
c000e5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e9:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e5ec:	83 c4 20             	add    esp,0x20
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	75 39                	jne    c000e62c <VCache::read(unsigned long long, int, void*)+0x102>
c000e5f3:	eb b3                	jmp    c000e5a8 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e5f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e5f8:	83 ec 0c             	sub    esp,0xc
c000e5fb:	57                   	push   edi
c000e5fc:	e8 53 fd ff ff       	call   c000e354 <VCache::invalidateReadBuffer()>
c000e601:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e604:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e608:	8b 10                	mov    edx,DWORD PTR [eax]
c000e60a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e60e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e612:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e616:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e61a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e61e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e621:	83 c4 2c             	add    esp,0x2c
c000e624:	5b                   	pop    ebx
c000e625:	5e                   	pop    esi
c000e626:	5f                   	pop    edi
c000e627:	5d                   	pop    ebp
c000e628:	ff e0                	jmp    eax
c000e62a:	66 90                	xchg   ax,ax
c000e62c:	83 c4 1c             	add    esp,0x1c
c000e62f:	5b                   	pop    ebx
c000e630:	5e                   	pop    esi
c000e631:	5f                   	pop    edi
c000e632:	5d                   	pop    ebp
c000e633:	c3                   	ret    

c000e634 <Video::putrect(int, int, int, int, unsigned int)>:
c000e634:	55                   	push   ebp
c000e635:	57                   	push   edi
c000e636:	56                   	push   esi
c000e637:	53                   	push   ebx
c000e638:	83 ec 1c             	sub    esp,0x1c
c000e63b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e63f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e643:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e647:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e64b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e64f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e653:	01 df                	add    edi,ebx
c000e655:	39 fb                	cmp    ebx,edi
c000e657:	7d 1f                	jge    c000e678 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e659:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e65d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e661:	7d 12                	jge    c000e675 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e663:	8b 16                	mov    edx,DWORD PTR [esi]
c000e665:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e669:	53                   	push   ebx
c000e66a:	55                   	push   ebp
c000e66b:	45                   	inc    ebp
c000e66c:	56                   	push   esi
c000e66d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e670:	83 c4 10             	add    esp,0x10
c000e673:	eb e8                	jmp    c000e65d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e675:	43                   	inc    ebx
c000e676:	eb dd                	jmp    c000e655 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e678:	83 c4 1c             	add    esp,0x1c
c000e67b:	5b                   	pop    ebx
c000e67c:	5e                   	pop    esi
c000e67d:	5f                   	pop    edi
c000e67e:	5d                   	pop    ebp
c000e67f:	c3                   	ret    

c000e680 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e680:	55                   	push   ebp
c000e681:	57                   	push   edi
c000e682:	31 ff                	xor    edi,edi
c000e684:	56                   	push   esi
c000e685:	53                   	push   ebx
c000e686:	83 ec 1c             	sub    esp,0x1c
c000e689:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e68d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e691:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e698:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e69d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e6a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e6a5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e6a9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e6ac:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6b0:	01 f9                	add    ecx,edi
c000e6b2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e6b6:	7d 2f                	jge    c000e6e7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e6b8:	31 f6                	xor    esi,esi
c000e6ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e6be:	01 f2                	add    edx,esi
c000e6c0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e6c4:	7d 1a                	jge    c000e6e0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e6c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e6c9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e6cc:	46                   	inc    esi
c000e6cd:	51                   	push   ecx
c000e6ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e6d2:	52                   	push   edx
c000e6d3:	55                   	push   ebp
c000e6d4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e6d7:	83 c4 10             	add    esp,0x10
c000e6da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6de:	eb da                	jmp    c000e6ba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e6e0:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e6e4:	47                   	inc    edi
c000e6e5:	eb c5                	jmp    c000e6ac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e6e7:	83 c4 1c             	add    esp,0x1c
c000e6ea:	5b                   	pop    ebx
c000e6eb:	5e                   	pop    esi
c000e6ec:	5f                   	pop    edi
c000e6ed:	5d                   	pop    ebp
c000e6ee:	c3                   	ret    
c000e6ef:	90                   	nop

c000e6f0 <Video::blit(unsigned int*, int, int, int, int)>:
c000e6f0:	55                   	push   ebp
c000e6f1:	ba 00 00 00 00       	mov    edx,0x0
c000e6f6:	57                   	push   edi
c000e6f7:	56                   	push   esi
c000e6f8:	53                   	push   ebx
c000e6f9:	83 ec 1c             	sub    esp,0x1c
c000e6fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e700:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e704:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e708:	85 c0                	test   eax,eax
c000e70a:	0f 49 d0             	cmovns edx,eax
c000e70d:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e714:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e718:	89 eb                	mov    ebx,ebp
c000e71a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e71e:	01 ea                	add    edx,ebp
c000e720:	39 da                	cmp    edx,ebx
c000e722:	7e 54                	jle    c000e778 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e724:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e72a:	7c 4c                	jl     c000e778 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e72c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e730:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e734:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e738:	01 c1                	add    ecx,eax
c000e73a:	39 f9                	cmp    ecx,edi
c000e73c:	7e 2f                	jle    c000e76d <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e73e:	83 c2 04             	add    edx,0x4
c000e741:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e747:	7c 21                	jl     c000e76a <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e749:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e74d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e74f:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e752:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e756:	55                   	push   ebp
c000e757:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e75b:	56                   	push   esi
c000e75c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e75f:	83 c4 10             	add    esp,0x10
c000e762:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e766:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e76a:	47                   	inc    edi
c000e76b:	eb c7                	jmp    c000e734 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e76d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e771:	43                   	inc    ebx
c000e772:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e776:	eb a2                	jmp    c000e71a <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e778:	83 c4 1c             	add    esp,0x1c
c000e77b:	5b                   	pop    ebx
c000e77c:	5e                   	pop    esi
c000e77d:	5f                   	pop    edi
c000e77e:	5d                   	pop    ebp
c000e77f:	c3                   	ret    

c000e780 <Video::clearScreen(unsigned int)>:
c000e780:	57                   	push   edi
c000e781:	56                   	push   esi
c000e782:	53                   	push   ebx
c000e783:	31 db                	xor    ebx,ebx
c000e785:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e789:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e78f:	7e 1f                	jle    c000e7b0 <Video::clearScreen(unsigned int)+0x30>
c000e791:	31 ff                	xor    edi,edi
c000e793:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e799:	7e 12                	jle    c000e7ad <Video::clearScreen(unsigned int)+0x2d>
c000e79b:	8b 06                	mov    eax,DWORD PTR [esi]
c000e79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7a1:	53                   	push   ebx
c000e7a2:	57                   	push   edi
c000e7a3:	47                   	inc    edi
c000e7a4:	56                   	push   esi
c000e7a5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e7a8:	83 c4 10             	add    esp,0x10
c000e7ab:	eb e6                	jmp    c000e793 <Video::clearScreen(unsigned int)+0x13>
c000e7ad:	43                   	inc    ebx
c000e7ae:	eb d9                	jmp    c000e789 <Video::clearScreen(unsigned int)+0x9>
c000e7b0:	5b                   	pop    ebx
c000e7b1:	5e                   	pop    esi
c000e7b2:	5f                   	pop    edi
c000e7b3:	c3                   	ret    

c000e7b4 <Video::putpixel(int, int, unsigned int)>:
c000e7b4:	c7 44 24 04 68 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021768
c000e7bc:	e9 ec 29 00 00       	jmp    c00111ad <KePanic(char const*)>
c000e7c1:	90                   	nop

c000e7c2 <Video::readPixelApprox(int, int)>:
c000e7c2:	83 ec 18             	sub    esp,0x18
c000e7c5:	68 89 17 02 c0       	push   0xc0021789
c000e7ca:	e8 de 29 00 00       	call   c00111ad <KePanic(char const*)>
c000e7cf:	31 c0                	xor    eax,eax
c000e7d1:	83 c4 1c             	add    esp,0x1c
c000e7d4:	c3                   	ret    
c000e7d5:	90                   	nop

c000e7d6 <Video::Video(char const*)>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7e4:	50                   	push   eax
c000e7e5:	e8 be df ff ff       	call   c000c7a8 <Device::Device(char const*)>
c000e7ea:	83 c4 10             	add    esp,0x10
c000e7ed:	ba 04 18 02 c0       	mov    edx,0xc0021804
c000e7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f6:	89 10                	mov    DWORD PTR [eax],edx
c000e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e806:	90                   	nop
c000e807:	83 c4 0c             	add    esp,0xc
c000e80a:	c3                   	ret    
c000e80b:	90                   	nop

c000e80c <Video::~Video()>:
c000e80c:	83 ec 0c             	sub    esp,0xc
c000e80f:	ba 04 18 02 c0       	mov    edx,0xc0021804
c000e814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e818:	89 10                	mov    DWORD PTR [eax],edx
c000e81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81e:	83 ec 0c             	sub    esp,0xc
c000e821:	50                   	push   eax
c000e822:	e8 eb dc ff ff       	call   c000c512 <Device::~Device()>
c000e827:	83 c4 10             	add    esp,0x10
c000e82a:	90                   	nop
c000e82b:	83 c4 0c             	add    esp,0xc
c000e82e:	c3                   	ret    
c000e82f:	90                   	nop

c000e830 <Video::~Video()>:
c000e830:	83 ec 0c             	sub    esp,0xc
c000e833:	83 ec 0c             	sub    esp,0xc
c000e836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e83a:	e8 cd ff ff ff       	call   c000e80c <Video::~Video()>
c000e83f:	83 c4 10             	add    esp,0x10
c000e842:	83 ec 08             	sub    esp,0x8
c000e845:	68 64 01 00 00       	push   0x164
c000e84a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e84e:	e8 b9 bf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e853:	83 c4 10             	add    esp,0x10
c000e856:	83 c4 0c             	add    esp,0xc
c000e859:	c3                   	ret    

c000e85a <Video::isMonochrome()>:
c000e85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e85e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e864:	c3                   	ret    
c000e865:	90                   	nop

c000e866 <Video::getWidth()>:
c000e866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e86a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e870:	c3                   	ret    
c000e871:	90                   	nop

c000e872 <Video::getHeight()>:
c000e872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e876:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e87c:	c3                   	ret    
c000e87d:	90                   	nop

c000e87e <Video::drawCursor(int, int, unsigned int*, int)>:
c000e87e:	55                   	push   ebp
c000e87f:	57                   	push   edi
c000e880:	56                   	push   esi
c000e881:	53                   	push   ebx
c000e882:	83 ec 2c             	sub    esp,0x2c
c000e885:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e889:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e88d:	83 f8 01             	cmp    eax,0x1
c000e890:	19 c9                	sbb    ecx,ecx
c000e892:	31 db                	xor    ebx,ebx
c000e894:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e898:	89 ce                	mov    esi,ecx
c000e89a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e8a2:	f7 d6                	not    esi
c000e8a4:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e8aa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e8ae:	01 d8                	add    eax,ebx
c000e8b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8b4:	57                   	push   edi
c000e8b5:	e8 b8 ff ff ff       	call   c000e872 <Video::getHeight()>
c000e8ba:	59                   	pop    ecx
c000e8bb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e8bf:	7e 70                	jle    c000e931 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e8c1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8c5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e8c9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e8cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8d0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8d4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e8db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8df:	89 e8                	mov    eax,ebp
c000e8e1:	83 c0 20             	add    eax,0x20
c000e8e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e8e8:	57                   	push   edi
c000e8e9:	e8 78 ff ff ff       	call   c000e866 <Video::getWidth()>
c000e8ee:	5a                   	pop    edx
c000e8ef:	39 c5                	cmp    ebp,eax
c000e8f1:	7d 34                	jge    c000e927 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e8f3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e8f8:	74 05                	je     c000e8ff <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e8fa:	8b 07                	mov    eax,DWORD PTR [edi]
c000e8fc:	56                   	push   esi
c000e8fd:	eb 0d                	jmp    c000e90c <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e8ff:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e904:	74 12                	je     c000e918 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e906:	8b 07                	mov    eax,DWORD PTR [edi]
c000e908:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e90c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e910:	55                   	push   ebp
c000e911:	57                   	push   edi
c000e912:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e915:	83 c4 10             	add    esp,0x10
c000e918:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e91c:	45                   	inc    ebp
c000e91d:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e921:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e925:	75 c1                	jne    c000e8e8 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e927:	43                   	inc    ebx
c000e928:	83 fb 20             	cmp    ebx,0x20
c000e92b:	0f 85 79 ff ff ff    	jne    c000e8aa <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e931:	83 c4 2c             	add    esp,0x2c
c000e934:	5b                   	pop    ebx
c000e935:	5e                   	pop    esi
c000e936:	5f                   	pop    edi
c000e937:	5d                   	pop    ebp
c000e938:	c3                   	ret    
c000e939:	90                   	nop

c000e93a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e93a:	55                   	push   ebp
c000e93b:	57                   	push   edi
c000e93c:	56                   	push   esi
c000e93d:	53                   	push   ebx
c000e93e:	83 ec 28             	sub    esp,0x28
c000e941:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e945:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e949:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e94d:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e951:	c1 e7 08             	shl    edi,0x8
c000e954:	01 c7                	add    edi,eax
c000e956:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e95a:	c1 e6 08             	shl    esi,0x8
c000e95d:	01 f0                	add    eax,esi
c000e95f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e963:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e967:	0f af c7             	imul   eax,edi
c000e96a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e971:	50                   	push   eax
c000e972:	e8 5c 91 ff ff       	call   c0007ad3 <malloc>
c000e977:	83 c4 10             	add    esp,0x10
c000e97a:	85 c0                	test   eax,eax
c000e97c:	89 c5                	mov    ebp,eax
c000e97e:	75 10                	jne    c000e990 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e980:	83 ec 0c             	sub    esp,0xc
c000e983:	68 b4 17 02 c0       	push   0xc00217b4
c000e988:	e8 20 28 00 00       	call   c00111ad <KePanic(char const*)>
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e994:	ba 12 00 00 00       	mov    edx,0x12
c000e999:	85 c0                	test   eax,eax
c000e99b:	74 11                	je     c000e9ae <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e99d:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e9a1:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e9a5:	c1 fa 03             	sar    edx,0x3
c000e9a8:	0f af d1             	imul   edx,ecx
c000e9ab:	83 c2 12             	add    edx,0x12
c000e9ae:	85 ff                	test   edi,edi
c000e9b0:	74 06                	je     c000e9b8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e9b2:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e9b6:	75 12                	jne    c000e9ca <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e9b8:	83 ec 0c             	sub    esp,0xc
c000e9bb:	68 c4 17 02 c0       	push   0xc00217c4
c000e9c0:	e8 45 bf ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000e9c5:	e9 b8 00 00 00       	jmp    c000ea82 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e9ca:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e9ce:	83 f9 02             	cmp    ecx,0x2
c000e9d1:	0f 85 96 00 00 00    	jne    c000ea6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e9d7:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e9dc:	75 0e                	jne    c000e9ec <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9de:	85 c0                	test   eax,eax
c000e9e0:	75 0a                	jne    c000e9ec <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9e2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e9e5:	83 e8 18             	sub    eax,0x18
c000e9e8:	a8 f7                	test   al,0xf7
c000e9ea:	74 0a                	je     c000e9f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e9ec:	83 ec 0c             	sub    esp,0xc
c000e9ef:	68 d9 17 02 c0       	push   0xc00217d9
c000e9f4:	eb 7f                	jmp    c000ea75 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e9f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e9fe:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ea06:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000ea0a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ea0e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ea16:	75 0c                	jne    c000ea24 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ea18:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000ea1d:	c1 e1 18             	shl    ecx,0x18
c000ea20:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ea24:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ea29:	46                   	inc    esi
c000ea2a:	89 c8                	mov    eax,ecx
c000ea2c:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ea31:	c1 e0 10             	shl    eax,0x10
c000ea34:	c1 e1 08             	shl    ecx,0x8
c000ea37:	09 c1                	or     ecx,eax
c000ea39:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ea3d:	09 c1                	or     ecx,eax
c000ea3f:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ea43:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ea47:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ea4b:	c1 f8 03             	sar    eax,0x3
c000ea4e:	01 c2                	add    edx,eax
c000ea50:	89 f0                	mov    eax,esi
c000ea52:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ea56:	39 c7                	cmp    edi,eax
c000ea58:	7f b0                	jg     c000ea0a <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ea5a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ea5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea62:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ea65:	7e 22                	jle    c000ea89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ea67:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ea6b:	eb 99                	jmp    c000ea06 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ea6d:	50                   	push   eax
c000ea6e:	50                   	push   eax
c000ea6f:	51                   	push   ecx
c000ea70:	68 e7 17 02 c0       	push   0xc00217e7
c000ea75:	e8 90 be ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ea7a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ea7d:	e8 61 90 ff ff       	call   c0007ae3 <free>
c000ea82:	83 c4 10             	add    esp,0x10
c000ea85:	31 ed                	xor    ebp,ebp
c000ea87:	eb 0f                	jmp    c000ea98 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ea89:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea8d:	89 38                	mov    DWORD PTR [eax],edi
c000ea8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea93:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ea96:	89 38                	mov    DWORD PTR [eax],edi
c000ea98:	83 c4 1c             	add    esp,0x1c
c000ea9b:	89 e8                	mov    eax,ebp
c000ea9d:	5b                   	pop    ebx
c000ea9e:	5e                   	pop    esi
c000ea9f:	5f                   	pop    edi
c000eaa0:	5d                   	pop    ebp
c000eaa1:	c3                   	ret    

c000eaa2 <Video::putTGA(int, int, unsigned char*, int)>:
c000eaa2:	55                   	push   ebp
c000eaa3:	57                   	push   edi
c000eaa4:	56                   	push   esi
c000eaa5:	53                   	push   ebx
c000eaa6:	83 ec 28             	sub    esp,0x28
c000eaa9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eaad:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eab1:	50                   	push   eax
c000eab2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eab6:	50                   	push   eax
c000eab7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eabb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eabf:	57                   	push   edi
c000eac0:	e8 75 fe ff ff       	call   c000e93a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eac5:	83 c4 20             	add    esp,0x20
c000eac8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eacc:	85 c0                	test   eax,eax
c000eace:	74 35                	je     c000eb05 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ead0:	89 c6                	mov    esi,eax
c000ead2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ead6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eada:	39 d8                	cmp    eax,ebx
c000eadc:	7e 27                	jle    c000eb05 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eade:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eae2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eae6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000eaea:	39 e9                	cmp    ecx,ebp
c000eaec:	7e 14                	jle    c000eb02 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eaee:	83 c6 04             	add    esi,0x4
c000eaf1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eaf3:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000eaf6:	53                   	push   ebx
c000eaf7:	55                   	push   ebp
c000eaf8:	45                   	inc    ebp
c000eaf9:	57                   	push   edi
c000eafa:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eafd:	83 c4 10             	add    esp,0x10
c000eb00:	eb e0                	jmp    c000eae2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eb02:	43                   	inc    ebx
c000eb03:	eb cd                	jmp    c000ead2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eb05:	83 c4 1c             	add    esp,0x1c
c000eb08:	5b                   	pop    ebx
c000eb09:	5e                   	pop    esi
c000eb0a:	5f                   	pop    edi
c000eb0b:	5d                   	pop    ebp
c000eb0c:	c3                   	ret    
c000eb0d:	66 90                	xchg   ax,ax
c000eb0f:	90                   	nop

c000eb10 <ACPI::close(int, int, void*)>:
c000eb10:	83 ec 1c             	sub    esp,0x1c
c000eb13:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eb1b:	74 0b                	je     c000eb28 <ACPI::close(int, int, void*)+0x18>
c000eb1d:	b8 00 00 00 00       	mov    eax,0x0
c000eb22:	e9 99 00 00 00       	jmp    c000ebc0 <ACPI::close(int, int, void*)+0xb0>
c000eb27:	90                   	nop
c000eb28:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eb2d:	75 29                	jne    c000eb58 <ACPI::close(int, int, void*)+0x48>
c000eb2f:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000eb34:	85 c0                	test   eax,eax
c000eb36:	74 08                	je     c000eb40 <ACPI::close(int, int, void*)+0x30>
c000eb38:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000eb3d:	ff d0                	call   eax
c000eb3f:	90                   	nop
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	68 48 18 02 c0       	push   0xc0021848
c000eb48:	e8 60 26 00 00       	call   c00111ad <KePanic(char const*)>
c000eb4d:	83 c4 10             	add    esp,0x10
c000eb50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb55:	eb 69                	jmp    c000ebc0 <ACPI::close(int, int, void*)+0xb0>
c000eb57:	90                   	nop
c000eb58:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eb5d:	75 59                	jne    c000ebb8 <ACPI::close(int, int, void*)+0xa8>
c000eb5f:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eb64:	85 c0                	test   eax,eax
c000eb66:	74 08                	je     c000eb70 <ACPI::close(int, int, void*)+0x60>
c000eb68:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eb6d:	ff d0                	call   eax
c000eb6f:	90                   	nop
c000eb70:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eb75:	8d 76 00             	lea    esi,[esi+0x0]
c000eb78:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb7d:	83 e0 02             	and    eax,0x2
c000eb80:	74 1e                	je     c000eba0 <ACPI::close(int, int, void*)+0x90>
c000eb82:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eb89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb8d:	89 c2                	mov    edx,eax
c000eb8f:	ec                   	in     al,dx
c000eb90:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb94:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eb98:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb9c:	eb da                	jmp    c000eb78 <ACPI::close(int, int, void*)+0x68>
c000eb9e:	66 90                	xchg   ax,ax
c000eba0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eba7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ebac:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ebb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebb4:	ee                   	out    dx,al
c000ebb5:	8d 76 00             	lea    esi,[esi+0x0]
c000ebb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebbd:	8d 76 00             	lea    esi,[esi+0x0]
c000ebc0:	83 c4 1c             	add    esp,0x1c
c000ebc3:	c3                   	ret    

c000ebc4 <findRSDP()>:
c000ebc4:	83 ec 1c             	sub    esp,0x1c
c000ebc7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebcc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ebd2:	83 e0 04             	and    eax,0x4
c000ebd5:	0f b6 c0             	movzx  eax,al
c000ebd8:	85 c0                	test   eax,eax
c000ebda:	75 08                	jne    c000ebe4 <findRSDP()+0x20>
c000ebdc:	b8 00 00 00 00       	mov    eax,0x0
c000ebe1:	eb 75                	jmp    c000ec58 <findRSDP()+0x94>
c000ebe3:	90                   	nop
c000ebe4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ebe9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ebee:	7f 1c                	jg     c000ec0c <findRSDP()+0x48>
c000ebf0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebf5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ebfb:	83 e2 fb             	and    edx,0xfffffffb
c000ebfe:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ec04:	b8 00 00 00 00       	mov    eax,0x0
c000ec09:	eb 4d                	jmp    c000ec58 <findRSDP()+0x94>
c000ec0b:	90                   	nop
c000ec0c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ec14:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ec1c:	77 32                	ja     c000ec50 <findRSDP()+0x8c>
c000ec1e:	83 ec 04             	sub    esp,0x4
c000ec21:	6a 08                	push   0x8
c000ec23:	68 e3 18 02 c0       	push   0xc00218e3
c000ec28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec2c:	e8 4f 17 ff ff       	call   c0000380 <memcmp>
c000ec31:	83 c4 10             	add    esp,0x10
c000ec34:	85 c0                	test   eax,eax
c000ec36:	0f 94 c0             	sete   al
c000ec39:	0f b6 c0             	movzx  eax,al
c000ec3c:	85 c0                	test   eax,eax
c000ec3e:	74 08                	je     c000ec48 <findRSDP()+0x84>
c000ec40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec44:	eb 12                	jmp    c000ec58 <findRSDP()+0x94>
c000ec46:	66 90                	xchg   ax,ax
c000ec48:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ec4d:	eb c5                	jmp    c000ec14 <findRSDP()+0x50>
c000ec4f:	90                   	nop
c000ec50:	b8 00 00 00 00       	mov    eax,0x0
c000ec55:	8d 76 00             	lea    esi,[esi+0x0]
c000ec58:	83 c4 1c             	add    esp,0x1c
c000ec5b:	c3                   	ret    

c000ec5c <loadACPITables(unsigned char*)>:
c000ec5c:	57                   	push   edi
c000ec5d:	56                   	push   esi
c000ec5e:	53                   	push   ebx
c000ec5f:	83 ec 60             	sub    esp,0x60
c000ec62:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec67:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec6d:	83 e0 04             	and    eax,0x4
c000ec70:	0f b6 c0             	movzx  eax,al
c000ec73:	85 c0                	test   eax,eax
c000ec75:	0f 84 41 02 00 00    	je     c000eebc <loadACPITables(unsigned char*)+0x260>
c000ec7b:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ec80:	0f b6 c0             	movzx  eax,al
c000ec83:	85 c0                	test   eax,eax
c000ec85:	74 79                	je     c000ed00 <loadACPITables(unsigned char*)+0xa4>
c000ec87:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec8b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ec8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec96:	83 e8 24             	sub    eax,0x24
c000ec99:	c1 e8 03             	shr    eax,0x3
c000ec9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000eca0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000eca8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ecac:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ecb0:	0f 8d ba 00 00 00    	jge    c000ed70 <loadACPITables(unsigned char*)+0x114>
c000ecb6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecba:	83 c0 24             	add    eax,0x24
c000ecbd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ecc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ecc5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ecc9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000eccd:	c1 e0 03             	shl    eax,0x3
c000ecd0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ecd4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ecd8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ecdb:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecdd:	89 c1                	mov    ecx,eax
c000ecdf:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ece4:	8d 50 01             	lea    edx,[eax+0x1]
c000ece7:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000eced:	89 ca                	mov    edx,ecx
c000ecef:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ecf6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ecfb:	eb ab                	jmp    c000eca8 <loadACPITables(unsigned char*)+0x4c>
c000ecfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ed00:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed04:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ed08:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed0f:	83 e8 24             	sub    eax,0x24
c000ed12:	c1 e8 02             	shr    eax,0x2
c000ed15:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ed19:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ed21:	8d 76 00             	lea    esi,[esi+0x0]
c000ed24:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed28:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ed2c:	7d 42                	jge    c000ed70 <loadACPITables(unsigned char*)+0x114>
c000ed2e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed32:	83 c0 24             	add    eax,0x24
c000ed35:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ed39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed3d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ed41:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed45:	c1 e0 02             	shl    eax,0x2
c000ed48:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ed4c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed50:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ed52:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed57:	8d 50 01             	lea    edx,[eax+0x1]
c000ed5a:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ed60:	89 ca                	mov    edx,ecx
c000ed62:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ed69:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ed6e:	eb b4                	jmp    c000ed24 <loadACPITables(unsigned char*)+0xc8>
c000ed70:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ed78:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed7d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ed81:	0f 8d 39 01 00 00    	jge    c000eec0 <loadACPITables(unsigned char*)+0x264>
c000ed87:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed8b:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000ed92:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ed96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed9a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eda2:	25 ff 0f 00 00       	and    eax,0xfff
c000eda7:	89 c6                	mov    esi,eax
c000eda9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000edaf:	83 ec 0c             	sub    esp,0xc
c000edb2:	6a 01                	push   0x1
c000edb4:	e8 3c a8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000edb9:	83 c4 10             	add    esp,0x10
c000edbc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000edc0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000edc6:	83 ec 0c             	sub    esp,0xc
c000edc9:	6a 01                	push   0x1
c000edcb:	6a 01                	push   0x1
c000edcd:	50                   	push   eax
c000edce:	52                   	push   edx
c000edcf:	53                   	push   ebx
c000edd0:	e8 33 b1 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edd5:	83 c4 20             	add    esp,0x20
c000edd8:	09 f0                	or     eax,esi
c000edda:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000edde:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ede2:	c1 e0 03             	shl    eax,0x3
c000ede5:	05 20 89 02 c0       	add    eax,0xc0028920
c000edea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000edee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000edf6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000edfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ee02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ee06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee12:	89 c6                	mov    esi,eax
c000ee14:	89 d7                	mov    edi,edx
c000ee16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ee18:	89 c8                	mov    eax,ecx
c000ee1a:	89 fa                	mov    edx,edi
c000ee1c:	89 f3                	mov    ebx,esi
c000ee1e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ee22:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ee26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee31:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ee35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee39:	05 00 10 00 00       	add    eax,0x1000
c000ee3e:	c1 e8 0c             	shr    eax,0xc
c000ee41:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ee45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee49:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ee4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee51:	25 ff 0f 00 00       	and    eax,0xfff
c000ee56:	89 c6                	mov    esi,eax
c000ee58:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee5e:	83 ec 0c             	sub    esp,0xc
c000ee61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee65:	e8 8b a7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ee6a:	83 c4 10             	add    esp,0x10
c000ee6d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee71:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ee77:	83 ec 0c             	sub    esp,0xc
c000ee7a:	6a 01                	push   0x1
c000ee7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ee80:	50                   	push   eax
c000ee81:	52                   	push   edx
c000ee82:	53                   	push   ebx
c000ee83:	e8 80 b0 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee88:	83 c4 20             	add    esp,0x20
c000ee8b:	09 f0                	or     eax,esi
c000ee8d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee95:	83 ec 0c             	sub    esp,0xc
c000ee98:	50                   	push   eax
c000ee99:	e8 6b aa ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000ee9e:	83 c4 10             	add    esp,0x10
c000eea1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eea5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eea9:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000eeb0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000eeb5:	e9 be fe ff ff       	jmp    c000ed78 <loadACPITables(unsigned char*)+0x11c>
c000eeba:	66 90                	xchg   ax,ax
c000eebc:	90                   	nop
c000eebd:	8d 76 00             	lea    esi,[esi+0x0]
c000eec0:	83 c4 60             	add    esp,0x60
c000eec3:	5b                   	pop    ebx
c000eec4:	5e                   	pop    esi
c000eec5:	5f                   	pop    edi
c000eec6:	c3                   	ret    
c000eec7:	90                   	nop

c000eec8 <findRSDT(unsigned char*)>:
c000eec8:	57                   	push   edi
c000eec9:	56                   	push   esi
c000eeca:	53                   	push   ebx
c000eecb:	83 ec 50             	sub    esp,0x50
c000eece:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eed3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eed9:	83 e0 04             	and    eax,0x4
c000eedc:	0f b6 c0             	movzx  eax,al
c000eedf:	85 c0                	test   eax,eax
c000eee1:	75 0d                	jne    c000eef0 <findRSDT(unsigned char*)+0x28>
c000eee3:	b8 00 00 00 00       	mov    eax,0x0
c000eee8:	e9 2b 01 00 00       	jmp    c000f018 <findRSDT(unsigned char*)+0x150>
c000eeed:	8d 76 00             	lea    esi,[esi+0x0]
c000eef0:	89 e0                	mov    eax,esp
c000eef2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eef6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eefa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000eefe:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000ef06:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef0a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ef12:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ef16:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ef1a:	89 c6                	mov    esi,eax
c000ef1c:	89 d7                	mov    edi,edx
c000ef1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef20:	89 c8                	mov    eax,ecx
c000ef22:	89 fa                	mov    edx,edi
c000ef24:	89 f3                	mov    ebx,esi
c000ef26:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000ef2a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ef2e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ef36:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000ef3a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef4a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef52:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef56:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef5a:	25 ff 0f 00 00       	and    eax,0xfff
c000ef5f:	89 c6                	mov    esi,eax
c000ef61:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef67:	83 ec 0c             	sub    esp,0xc
c000ef6a:	6a 02                	push   0x2
c000ef6c:	e8 84 a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef71:	83 c4 10             	add    esp,0x10
c000ef74:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ef78:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef7e:	83 ec 0c             	sub    esp,0xc
c000ef81:	6a 01                	push   0x1
c000ef83:	6a 02                	push   0x2
c000ef85:	50                   	push   eax
c000ef86:	52                   	push   edx
c000ef87:	53                   	push   ebx
c000ef88:	e8 7b af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef8d:	83 c4 20             	add    esp,0x20
c000ef90:	09 f0                	or     eax,esi
c000ef92:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef9a:	25 ff 0f 00 00       	and    eax,0xfff
c000ef9f:	89 c6                	mov    esi,eax
c000efa1:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000efa7:	83 ec 0c             	sub    esp,0xc
c000efaa:	6a 02                	push   0x2
c000efac:	e8 44 a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000efb1:	83 c4 10             	add    esp,0x10
c000efb4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000efb8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efbe:	83 ec 0c             	sub    esp,0xc
c000efc1:	6a 01                	push   0x1
c000efc3:	6a 02                	push   0x2
c000efc5:	50                   	push   eax
c000efc6:	52                   	push   edx
c000efc7:	53                   	push   ebx
c000efc8:	e8 3b af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efcd:	83 c4 20             	add    esp,0x20
c000efd0:	09 f0                	or     eax,esi
c000efd2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000efd6:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000efdb:	85 c0                	test   eax,eax
c000efdd:	75 11                	jne    c000eff0 <findRSDT(unsigned char*)+0x128>
c000efdf:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000efe6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000efea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efee:	eb 24                	jmp    c000f014 <findRSDT(unsigned char*)+0x14c>
c000eff0:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000eff5:	83 f8 02             	cmp    eax,0x2
c000eff8:	75 12                	jne    c000f00c <findRSDT(unsigned char*)+0x144>
c000effa:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f001:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f005:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f009:	eb 09                	jmp    c000f014 <findRSDT(unsigned char*)+0x14c>
c000f00b:	90                   	nop
c000f00c:	b8 00 00 00 00       	mov    eax,0x0
c000f011:	eb 05                	jmp    c000f018 <findRSDT(unsigned char*)+0x150>
c000f013:	90                   	nop
c000f014:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f018:	83 c4 50             	add    esp,0x50
c000f01b:	5b                   	pop    ebx
c000f01c:	5e                   	pop    esi
c000f01d:	5f                   	pop    edi
c000f01e:	c3                   	ret    
c000f01f:	90                   	nop

c000f020 <findDataTable(unsigned char*, char*)>:
c000f020:	83 ec 1c             	sub    esp,0x1c
c000f023:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f028:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f02e:	83 e0 04             	and    eax,0x4
c000f031:	0f b6 c0             	movzx  eax,al
c000f034:	85 c0                	test   eax,eax
c000f036:	75 08                	jne    c000f040 <findDataTable(unsigned char*, char*)+0x20>
c000f038:	b8 00 00 00 00       	mov    eax,0x0
c000f03d:	eb 5d                	jmp    c000f09c <findDataTable(unsigned char*, char*)+0x7c>
c000f03f:	90                   	nop
c000f040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f048:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f04d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f051:	7d 41                	jge    c000f094 <findDataTable(unsigned char*, char*)+0x74>
c000f053:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f057:	c1 e0 03             	shl    eax,0x3
c000f05a:	05 20 89 02 c0       	add    eax,0xc0028920
c000f05f:	83 ec 04             	sub    esp,0x4
c000f062:	6a 04                	push   0x4
c000f064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f068:	50                   	push   eax
c000f069:	e8 12 13 ff ff       	call   c0000380 <memcmp>
c000f06e:	83 c4 10             	add    esp,0x10
c000f071:	85 c0                	test   eax,eax
c000f073:	0f 94 c0             	sete   al
c000f076:	0f b6 c0             	movzx  eax,al
c000f079:	85 c0                	test   eax,eax
c000f07b:	74 0f                	je     c000f08c <findDataTable(unsigned char*, char*)+0x6c>
c000f07d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f081:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f088:	eb 12                	jmp    c000f09c <findDataTable(unsigned char*, char*)+0x7c>
c000f08a:	66 90                	xchg   ax,ax
c000f08c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f091:	eb b5                	jmp    c000f048 <findDataTable(unsigned char*, char*)+0x28>
c000f093:	90                   	nop
c000f094:	b8 00 00 00 00       	mov    eax,0x0
c000f099:	8d 76 00             	lea    esi,[esi+0x0]
c000f09c:	83 c4 1c             	add    esp,0x1c
c000f09f:	c3                   	ret    

c000f0a0 <scanMADT()>:
c000f0a0:	53                   	push   ebx
c000f0a1:	83 ec 38             	sub    esp,0x38
c000f0a4:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f0a9:	25 00 04 00 00       	and    eax,0x400
c000f0ae:	74 14                	je     c000f0c4 <scanMADT()+0x24>
c000f0b0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0b5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0bb:	83 e2 fb             	and    edx,0xfffffffb
c000f0be:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0c4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0c9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0cf:	83 e0 04             	and    eax,0x4
c000f0d2:	0f b6 c0             	movzx  eax,al
c000f0d5:	85 c0                	test   eax,eax
c000f0d7:	0f 84 6b 04 00 00    	je     c000f548 <scanMADT()+0x4a8>
c000f0dd:	e8 e2 fa ff ff       	call   c000ebc4 <findRSDP()>
c000f0e2:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f0e7:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f0ec:	85 c0                	test   eax,eax
c000f0ee:	75 1c                	jne    c000f10c <scanMADT()+0x6c>
c000f0f0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0f5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0fb:	83 e2 fb             	and    edx,0xfffffffb
c000f0fe:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f104:	e9 47 04 00 00       	jmp    c000f550 <scanMADT()+0x4b0>
c000f109:	8d 76 00             	lea    esi,[esi+0x0]
c000f10c:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f111:	83 ec 0c             	sub    esp,0xc
c000f114:	50                   	push   eax
c000f115:	e8 ae fd ff ff       	call   c000eec8 <findRSDT(unsigned char*)>
c000f11a:	83 c4 10             	add    esp,0x10
c000f11d:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f122:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f127:	85 c0                	test   eax,eax
c000f129:	75 19                	jne    c000f144 <scanMADT()+0xa4>
c000f12b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f130:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f136:	83 e2 fb             	and    edx,0xfffffffb
c000f139:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f13f:	e9 0c 04 00 00       	jmp    c000f550 <scanMADT()+0x4b0>
c000f144:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f149:	83 ec 0c             	sub    esp,0xc
c000f14c:	50                   	push   eax
c000f14d:	e8 0a fb ff ff       	call   c000ec5c <loadACPITables(unsigned char*)>
c000f152:	83 c4 10             	add    esp,0x10
c000f155:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f15a:	83 ec 08             	sub    esp,0x8
c000f15d:	68 ec 18 02 c0       	push   0xc00218ec
c000f162:	50                   	push   eax
c000f163:	e8 b8 fe ff ff       	call   c000f020 <findDataTable(unsigned char*, char*)>
c000f168:	83 c4 10             	add    esp,0x10
c000f16b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f16f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f174:	75 1a                	jne    c000f190 <scanMADT()+0xf0>
c000f176:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f17b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f181:	83 e2 fe             	and    edx,0xfffffffe
c000f184:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f18a:	e9 c1 03 00 00       	jmp    c000f550 <scanMADT()+0x4b0>
c000f18f:	90                   	nop
c000f190:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f198:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f19c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f19f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f1a3:	0f 87 a7 03 00 00    	ja     c000f550 <scanMADT()+0x4b0>
c000f1a9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f1b1:	0f 87 99 03 00 00    	ja     c000f550 <scanMADT()+0x4b0>
c000f1b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f1bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1c3:	8d 50 01             	lea    edx,[eax+0x1]
c000f1c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1ce:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1d2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f1d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1da:	8d 50 01             	lea    edx,[eax+0x1]
c000f1dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1e5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1e9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f1ed:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f1f2:	83 f8 02             	cmp    eax,0x2
c000f1f5:	0f 86 51 03 00 00    	jbe    c000f54c <scanMADT()+0x4ac>
c000f1fb:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f200:	85 c0                	test   eax,eax
c000f202:	75 58                	jne    c000f25c <scanMADT()+0x1bc>
c000f204:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f208:	8d 50 01             	lea    edx,[eax+0x1]
c000f20b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f20f:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f215:	0f b6 d2             	movzx  edx,dl
c000f218:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f21c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f220:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f226:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f22a:	8d 50 01             	lea    edx,[eax+0x1]
c000f22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f231:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f237:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f23a:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f240:	0f b6 d2             	movzx  edx,dl
c000f243:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f247:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f24b:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f251:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f256:	e9 d9 02 00 00       	jmp    c000f534 <scanMADT()+0x494>
c000f25b:	90                   	nop
c000f25c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f261:	83 f8 01             	cmp    eax,0x1
c000f264:	0f 85 1a 01 00 00    	jne    c000f384 <scanMADT()+0x2e4>
c000f26a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f26e:	8d 50 01             	lea    edx,[eax+0x1]
c000f271:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f275:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f27b:	0f b6 d2             	movzx  edx,dl
c000f27e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f282:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f286:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f28c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f291:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f295:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f299:	01 d0                	add    eax,edx
c000f29b:	83 c0 2c             	add    eax,0x2c
c000f29e:	8a 00                	mov    al,BYTE PTR [eax]
c000f2a0:	0f b6 d0             	movzx  edx,al
c000f2a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2a7:	8d 48 01             	lea    ecx,[eax+0x1]
c000f2aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2ae:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f2b2:	0f b6 c0             	movzx  eax,al
c000f2b5:	c1 e0 08             	shl    eax,0x8
c000f2b8:	89 d1                	mov    ecx,edx
c000f2ba:	09 c1                	or     ecx,eax
c000f2bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2c0:	8d 50 02             	lea    edx,[eax+0x2]
c000f2c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2c7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2cb:	0f b6 c0             	movzx  eax,al
c000f2ce:	c1 e0 10             	shl    eax,0x10
c000f2d1:	09 c1                	or     ecx,eax
c000f2d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2d7:	8d 50 03             	lea    edx,[eax+0x3]
c000f2da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2e2:	0f b6 c0             	movzx  eax,al
c000f2e5:	c1 e0 18             	shl    eax,0x18
c000f2e8:	09 c1                	or     ecx,eax
c000f2ea:	89 ca                	mov    edx,ecx
c000f2ec:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f2f1:	0f b6 c0             	movzx  eax,al
c000f2f4:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f2fb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f300:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f304:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f308:	01 d0                	add    eax,edx
c000f30a:	83 c0 2c             	add    eax,0x2c
c000f30d:	8a 00                	mov    al,BYTE PTR [eax]
c000f30f:	0f b6 d0             	movzx  edx,al
c000f312:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f316:	8d 48 01             	lea    ecx,[eax+0x1]
c000f319:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f31d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f321:	0f b6 c0             	movzx  eax,al
c000f324:	c1 e0 08             	shl    eax,0x8
c000f327:	89 d1                	mov    ecx,edx
c000f329:	09 c1                	or     ecx,eax
c000f32b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f32f:	8d 50 02             	lea    edx,[eax+0x2]
c000f332:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f336:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f33a:	0f b6 c0             	movzx  eax,al
c000f33d:	c1 e0 10             	shl    eax,0x10
c000f340:	09 c1                	or     ecx,eax
c000f342:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f346:	8d 50 03             	lea    edx,[eax+0x3]
c000f349:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f34d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f351:	0f b6 c0             	movzx  eax,al
c000f354:	c1 e0 18             	shl    eax,0x18
c000f357:	09 c1                	or     ecx,eax
c000f359:	89 ca                	mov    edx,ecx
c000f35b:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f360:	0f b6 c0             	movzx  eax,al
c000f363:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f36a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f36f:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f374:	83 c0 01             	add    eax,0x1
c000f377:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f37c:	e9 b3 01 00 00       	jmp    c000f534 <scanMADT()+0x494>
c000f381:	8d 76 00             	lea    esi,[esi+0x0]
c000f384:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f389:	83 f8 02             	cmp    eax,0x2
c000f38c:	0f 85 ea 00 00 00    	jne    c000f47c <scanMADT()+0x3dc>
c000f392:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f396:	8d 50 01             	lea    edx,[eax+0x1]
c000f399:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f39d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3a1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3a5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f3a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ad:	8d 50 01             	lea    edx,[eax+0x1]
c000f3b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3b8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3bc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f3c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3c8:	01 d0                	add    eax,edx
c000f3ca:	83 c0 2c             	add    eax,0x2c
c000f3cd:	8a 00                	mov    al,BYTE PTR [eax]
c000f3cf:	0f b6 d0             	movzx  edx,al
c000f3d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3d6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3dd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3e1:	0f b6 c0             	movzx  eax,al
c000f3e4:	c1 e0 08             	shl    eax,0x8
c000f3e7:	89 d1                	mov    ecx,edx
c000f3e9:	09 c1                	or     ecx,eax
c000f3eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ef:	8d 50 02             	lea    edx,[eax+0x2]
c000f3f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3fa:	0f b6 c0             	movzx  eax,al
c000f3fd:	c1 e0 10             	shl    eax,0x10
c000f400:	09 c1                	or     ecx,eax
c000f402:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f406:	8d 50 03             	lea    edx,[eax+0x3]
c000f409:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f40d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f411:	0f b6 c0             	movzx  eax,al
c000f414:	c1 e0 18             	shl    eax,0x18
c000f417:	09 c8                	or     eax,ecx
c000f419:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f41d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f422:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f426:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f42a:	01 d0                	add    eax,edx
c000f42c:	83 c0 2c             	add    eax,0x2c
c000f42f:	8a 00                	mov    al,BYTE PTR [eax]
c000f431:	0f b6 d0             	movzx  edx,al
c000f434:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f438:	8d 48 01             	lea    ecx,[eax+0x1]
c000f43b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f43f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f443:	0f b6 c0             	movzx  eax,al
c000f446:	c1 e0 08             	shl    eax,0x8
c000f449:	09 d0                	or     eax,edx
c000f44b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f450:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f455:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f45a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f45e:	88 90 e8 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd018],dl
c000f464:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f469:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f46e:	66 89 94 00 c0 8b 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd7440],dx
c000f476:	e9 b9 00 00 00       	jmp    c000f534 <scanMADT()+0x494>
c000f47b:	90                   	nop
c000f47c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f481:	83 f8 04             	cmp    eax,0x4
c000f484:	0f 85 9a 00 00 00    	jne    c000f524 <scanMADT()+0x484>
c000f48a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f48e:	8d 50 01             	lea    edx,[eax+0x1]
c000f491:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f495:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f499:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f49d:	0f b6 c0             	movzx  eax,al
c000f4a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f4a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ac:	01 d0                	add    eax,edx
c000f4ae:	83 c0 2c             	add    eax,0x2c
c000f4b1:	8a 00                	mov    al,BYTE PTR [eax]
c000f4b3:	0f b6 d0             	movzx  edx,al
c000f4b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ba:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4c1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4c5:	0f b6 c0             	movzx  eax,al
c000f4c8:	c1 e0 08             	shl    eax,0x8
c000f4cb:	09 d0                	or     eax,edx
c000f4cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f4d1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f4d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4da:	8d 50 01             	lea    edx,[eax+0x1]
c000f4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4e5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4e9:	0f b6 c0             	movzx  eax,al
c000f4ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4f4:	c1 e0 08             	shl    eax,0x8
c000f4f7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f4fb:	89 c1                	mov    ecx,eax
c000f4fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f501:	c1 e0 18             	shl    eax,0x18
c000f504:	89 c3                	mov    ebx,eax
c000f506:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f50b:	8d 50 01             	lea    edx,[eax+0x1]
c000f50e:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f514:	09 d9                	or     ecx,ebx
c000f516:	89 ca                	mov    edx,ecx
c000f518:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f51f:	eb 13                	jmp    c000f534 <scanMADT()+0x494>
c000f521:	8d 76 00             	lea    esi,[esi+0x0]
c000f524:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f529:	83 f8 05             	cmp    eax,0x5
c000f52c:	75 06                	jne    c000f534 <scanMADT()+0x494>
c000f52e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f533:	90                   	nop
c000f534:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f539:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f53d:	01 d0                	add    eax,edx
c000f53f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f543:	e9 50 fc ff ff       	jmp    c000f198 <scanMADT()+0xf8>
c000f548:	90                   	nop
c000f549:	eb 05                	jmp    c000f550 <scanMADT()+0x4b0>
c000f54b:	90                   	nop
c000f54c:	90                   	nop
c000f54d:	8d 76 00             	lea    esi,[esi+0x0]
c000f550:	83 c4 38             	add    esp,0x38
c000f553:	5b                   	pop    ebx
c000f554:	c3                   	ret    
c000f555:	90                   	nop
c000f556:	66 90                	xchg   ax,ax

c000f558 <ACPI::ACPI()>:
c000f558:	83 ec 0c             	sub    esp,0xc
c000f55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f55f:	83 ec 08             	sub    esp,0x8
c000f562:	68 f1 18 02 c0       	push   0xc00218f1
c000f567:	50                   	push   eax
c000f568:	e8 3b d2 ff ff       	call   c000c7a8 <Device::Device(char const*)>
c000f56d:	83 c4 10             	add    esp,0x10
c000f570:	ba 44 1a 02 c0       	mov    edx,0xc0021a44
c000f575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f579:	89 10                	mov    DWORD PTR [eax],edx
c000f57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f57f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f58a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f598:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f5a2:	e8 f9 fa ff ff       	call   c000f0a0 <scanMADT()>
c000f5a7:	90                   	nop
c000f5a8:	83 c4 0c             	add    esp,0xc
c000f5ab:	c3                   	ret    

c000f5ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f5ac:	83 ec 2c             	sub    esp,0x2c
c000f5af:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f5b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f5b7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f5bb:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f5bf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f5c4:	88 c8                	mov    al,cl
c000f5c6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f5ca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f5cf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f5d7:	90                   	nop
c000f5d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5dc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f5e2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f5e6:	0f 8d b0 00 00 00    	jge    c000f69c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f5ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5f4:	83 c2 2a             	add    edx,0x2a
c000f5f7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f5fb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f600:	0f b7 c0             	movzx  eax,ax
c000f603:	39 c2                	cmp    edx,eax
c000f605:	0f 85 85 00 00 00    	jne    c000f690 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f60b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f60f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f613:	83 c2 2a             	add    edx,0x2a
c000f616:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f61a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f61f:	0f b6 c0             	movzx  eax,al
c000f622:	39 c2                	cmp    edx,eax
c000f624:	75 6a                	jne    c000f690 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f626:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f62b:	85 c0                	test   eax,eax
c000f62d:	74 3d                	je     c000f66c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f62f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f633:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f637:	83 c2 2a             	add    edx,0x2a
c000f63a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f63e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f642:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f645:	39 c2                	cmp    edx,eax
c000f647:	74 13                	je     c000f65c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f649:	83 ec 0c             	sub    esp,0xc
c000f64c:	68 6c 18 02 c0       	push   0xc002186c
c000f651:	e8 57 1b 00 00       	call   c00111ad <KePanic(char const*)>
c000f656:	83 c4 10             	add    esp,0x10
c000f659:	8d 76 00             	lea    esi,[esi+0x0]
c000f65c:	83 ec 0c             	sub    esp,0xc
c000f65f:	68 f6 18 02 c0       	push   0xc00218f6
c000f664:	e8 44 1b 00 00       	call   c00111ad <KePanic(char const*)>
c000f669:	83 c4 10             	add    esp,0x10
c000f66c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f670:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f674:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f678:	83 c2 2a             	add    edx,0x2a
c000f67b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f67f:	8b 02                	mov    eax,DWORD PTR [edx]
c000f681:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f684:	89 01                	mov    DWORD PTR [ecx],eax
c000f686:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f689:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f68e:	66 90                	xchg   ax,ax
c000f690:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f695:	e9 3e ff ff ff       	jmp    c000f5d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f69a:	66 90                	xchg   ax,ax
c000f69c:	90                   	nop
c000f69d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a1:	83 c4 2c             	add    esp,0x2c
c000f6a4:	c2 04 00             	ret    0x4
c000f6a7:	90                   	nop

c000f6a8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f6a8:	83 ec 1c             	sub    esp,0x1c
c000f6ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6af:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f6b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f6b7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f6bc:	88 c8                	mov    al,cl
c000f6be:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f6c2:	88 d0                	mov    al,dl
c000f6c4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6cc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6d6:	83 c2 2a             	add    edx,0x2a
c000f6d9:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f6dd:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f6e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6e5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ef:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f6f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f6f6:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f6fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ff:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f705:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f709:	83 c0 01             	add    eax,0x1
c000f70c:	88 c1                	mov    cl,al
c000f70e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f712:	83 c2 2a             	add    edx,0x2a
c000f715:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f71d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f723:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f727:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f72a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f72e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f732:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f736:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f73c:	8d 50 01             	lea    edx,[eax+0x1]
c000f73f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f743:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f749:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f74d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f753:	3d 00 02 00 00       	cmp    eax,0x200
c000f758:	75 12                	jne    c000f76c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f75a:	83 ec 0c             	sub    esp,0xc
c000f75d:	68 05 19 02 c0       	push   0xc0021905
c000f762:	e8 46 1a 00 00       	call   c00111ad <KePanic(char const*)>
c000f767:	83 c4 10             	add    esp,0x10
c000f76a:	66 90                	xchg   ax,ax
c000f76c:	90                   	nop
c000f76d:	83 c4 1c             	add    esp,0x1c
c000f770:	c3                   	ret    
c000f771:	90                   	nop
c000f772:	66 90                	xchg   ax,ax

c000f774 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f774:	b8 00 00 00 00       	mov    eax,0x0
c000f779:	c3                   	ret    
c000f77a:	66 90                	xchg   ax,ax

c000f77c <ACPI::detectPCI()>:
c000f77c:	53                   	push   ebx
c000f77d:	83 ec 28             	sub    esp,0x28
c000f780:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f785:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f78a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f78f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f795:	83 e0 04             	and    eax,0x4
c000f798:	0f b6 c0             	movzx  eax,al
c000f79b:	85 c0                	test   eax,eax
c000f79d:	74 2d                	je     c000f7cc <ACPI::detectPCI()+0x50>
c000f79f:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f7a4:	83 ec 08             	sub    esp,0x8
c000f7a7:	68 22 19 02 c0       	push   0xc0021922
c000f7ac:	50                   	push   eax
c000f7ad:	e8 6e f8 ff ff       	call   c000f020 <findDataTable(unsigned char*, char*)>
c000f7b2:	83 c4 10             	add    esp,0x10
c000f7b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f7b9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f7be:	74 0c                	je     c000f7cc <ACPI::detectPCI()+0x50>
c000f7c0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7c5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7ca:	66 90                	xchg   ax,ax
c000f7cc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f7d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7d8:	8a 00                	mov    al,BYTE PTR [eax]
c000f7da:	0f b6 c0             	movzx  eax,al
c000f7dd:	83 f8 01             	cmp    eax,0x1
c000f7e0:	75 0e                	jne    c000f7f0 <ACPI::detectPCI()+0x74>
c000f7e2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7e7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7ec:	eb 2e                	jmp    c000f81c <ACPI::detectPCI()+0xa0>
c000f7ee:	66 90                	xchg   ax,ax
c000f7f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7f4:	8a 00                	mov    al,BYTE PTR [eax]
c000f7f6:	0f b6 c0             	movzx  eax,al
c000f7f9:	83 f8 02             	cmp    eax,0x2
c000f7fc:	75 1e                	jne    c000f81c <ACPI::detectPCI()+0xa0>
c000f7fe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f803:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f808:	85 c0                	test   eax,eax
c000f80a:	74 10                	je     c000f81c <ACPI::detectPCI()+0xa0>
c000f80c:	83 ec 0c             	sub    esp,0xc
c000f80f:	68 9c 18 02 c0       	push   0xc002189c
c000f814:	e8 94 19 00 00       	call   c00111ad <KePanic(char const*)>
c000f819:	83 c4 10             	add    esp,0x10
c000f81c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f820:	83 f0 01             	xor    eax,0x1
c000f823:	0f b6 c0             	movzx  eax,al
c000f826:	85 c0                	test   eax,eax
c000f828:	74 46                	je     c000f870 <ACPI::detectPCI()+0xf4>
c000f82a:	e8 01 09 ff ff       	call   c0000130 <manualPCIProbe>
c000f82f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f833:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f838:	75 0e                	jne    c000f848 <ACPI::detectPCI()+0xcc>
c000f83a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f83f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f844:	eb 2a                	jmp    c000f870 <ACPI::detectPCI()+0xf4>
c000f846:	66 90                	xchg   ax,ax
c000f848:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f84d:	75 21                	jne    c000f870 <ACPI::detectPCI()+0xf4>
c000f84f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f854:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f859:	85 c0                	test   eax,eax
c000f85b:	74 13                	je     c000f870 <ACPI::detectPCI()+0xf4>
c000f85d:	83 ec 0c             	sub    esp,0xc
c000f860:	68 9c 18 02 c0       	push   0xc002189c
c000f865:	e8 43 19 00 00       	call   c00111ad <KePanic(char const*)>
c000f86a:	83 c4 10             	add    esp,0x10
c000f86d:	8d 76 00             	lea    esi,[esi+0x0]
c000f870:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f875:	85 c0                	test   eax,eax
c000f877:	0f 84 87 00 00 00    	je     c000f904 <ACPI::detectPCI()+0x188>
c000f87d:	83 ec 0c             	sub    esp,0xc
c000f880:	68 27 19 02 c0       	push   0xc0021927
c000f885:	e8 4f 12 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c000f88a:	83 c4 10             	add    esp,0x10
c000f88d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f895:	83 ec 0c             	sub    esp,0xc
c000f898:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f89c:	e8 32 82 ff ff       	call   c0007ad3 <malloc>
c000f8a1:	83 c4 10             	add    esp,0x10
c000f8a4:	89 c3                	mov    ebx,eax
c000f8a6:	83 ec 0c             	sub    esp,0xc
c000f8a9:	53                   	push   ebx
c000f8aa:	e8 ef b2 00 00       	call   c001ab9e <PCI::PCI()>
c000f8af:	83 c4 10             	add    esp,0x10
c000f8b2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f8b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8ba:	83 ec 08             	sub    esp,0x8
c000f8bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8c1:	50                   	push   eax
c000f8c2:	e8 49 cd ff ff       	call   c000c610 <Device::addChild(Device*)>
c000f8c7:	83 c4 10             	add    esp,0x10
c000f8ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d0:	83 c0 08             	add    eax,0x8
c000f8d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f8da:	85 d2                	test   edx,edx
c000f8dc:	74 0a                	je     c000f8e8 <ACPI::detectPCI()+0x16c>
c000f8de:	ba 01 00 00 00       	mov    edx,0x1
c000f8e3:	eb 0b                	jmp    c000f8f0 <ACPI::detectPCI()+0x174>
c000f8e5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8e8:	ba 02 00 00 00       	mov    edx,0x2
c000f8ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f8f0:	6a 00                	push   0x0
c000f8f2:	6a 00                	push   0x0
c000f8f4:	52                   	push   edx
c000f8f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8f9:	ff d0                	call   eax
c000f8fb:	83 c4 10             	add    esp,0x10
c000f8fe:	e9 91 00 00 00       	jmp    c000f994 <ACPI::detectPCI()+0x218>
c000f903:	90                   	nop
c000f904:	83 ec 0c             	sub    esp,0xc
c000f907:	68 3f 19 02 c0       	push   0xc002193f
c000f90c:	e8 c8 11 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c000f911:	83 c4 10             	add    esp,0x10
c000f914:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f91b:	83 ec 0c             	sub    esp,0xc
c000f91e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f922:	e8 ac 81 ff ff       	call   c0007ad3 <malloc>
c000f927:	83 c4 10             	add    esp,0x10
c000f92a:	89 c3                	mov    ebx,eax
c000f92c:	83 ec 0c             	sub    esp,0xc
c000f92f:	53                   	push   ebx
c000f930:	e8 11 be 00 00       	call   c001b746 <IDE::IDE()>
c000f935:	83 c4 10             	add    esp,0x10
c000f938:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f93c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f940:	83 ec 08             	sub    esp,0x8
c000f943:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f947:	50                   	push   eax
c000f948:	e8 c3 cc ff ff       	call   c000c610 <Device::addChild(Device*)>
c000f94d:	83 c4 10             	add    esp,0x10
c000f950:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f954:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f95e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f962:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f96b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f96f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f978:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f97c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f97e:	83 c0 08             	add    eax,0x8
c000f981:	8b 00                	mov    eax,DWORD PTR [eax]
c000f983:	6a 00                	push   0x0
c000f985:	6a 00                	push   0x0
c000f987:	6a 00                	push   0x0
c000f989:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f98d:	ff d0                	call   eax
c000f98f:	83 c4 10             	add    esp,0x10
c000f992:	66 90                	xchg   ax,ax
c000f994:	90                   	nop
c000f995:	83 c4 28             	add    esp,0x28
c000f998:	5b                   	pop    ebx
c000f999:	c3                   	ret    
c000f99a:	66 90                	xchg   ax,ax

c000f99c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f99c:	83 ec 1c             	sub    esp,0x1c
c000f99f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9a3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f9a6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f9aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f9af:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f9b4:	83 ec 08             	sub    esp,0x8
c000f9b7:	52                   	push   edx
c000f9b8:	50                   	push   eax
c000f9b9:	e8 dc 77 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000f9be:	83 c4 10             	add    esp,0x10
c000f9c1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f9c5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f9ca:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f9cf:	83 ec 04             	sub    esp,0x4
c000f9d2:	6a 01                	push   0x1
c000f9d4:	52                   	push   edx
c000f9d5:	50                   	push   eax
c000f9d6:	e8 d7 78 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f9db:	83 c4 10             	add    esp,0x10
c000f9de:	90                   	nop
c000f9df:	83 c4 1c             	add    esp,0x1c
c000f9e2:	c3                   	ret    
c000f9e3:	90                   	nop

c000f9e4 <ACPI::sleep()>:
c000f9e4:	83 ec 0c             	sub    esp,0xc
c000f9e7:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000f9ec:	85 c0                	test   eax,eax
c000f9ee:	74 08                	je     c000f9f8 <ACPI::sleep()+0x14>
c000f9f0:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000f9f5:	ff d0                	call   eax
c000f9f7:	90                   	nop
c000f9f8:	90                   	nop
c000f9f9:	83 c4 0c             	add    esp,0xc
c000f9fc:	c3                   	ret    
c000f9fd:	90                   	nop
c000f9fe:	66 90                	xchg   ax,ax

c000fa00 <ACPI::open(int, int, void*)>:
c000fa00:	55                   	push   ebp
c000fa01:	89 e5                	mov    ebp,esp
c000fa03:	53                   	push   ebx
c000fa04:	81 ec 74 01 00 00    	sub    esp,0x174
c000fa0a:	83 ec 0c             	sub    esp,0xc
c000fa0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fa10:	e8 67 fd ff ff       	call   c000f77c <ACPI::detectPCI()>
c000fa15:	83 c4 10             	add    esp,0x10
c000fa18:	83 ec 0c             	sub    esp,0xc
c000fa1b:	68 c4 18 02 c0       	push   0xc00218c4
c000fa20:	e8 b4 10 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c000fa25:	83 c4 10             	add    esp,0x10
c000fa28:	b8 4c 05 00 00       	mov    eax,0x54c
c000fa2d:	8a 00                	mov    al,BYTE PTR [eax]
c000fa2f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fa32:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fa36:	83 f8 01             	cmp    eax,0x1
c000fa39:	75 15                	jne    c000fa50 <ACPI::open(int, int, void*)+0x50>
c000fa3b:	83 ec 0c             	sub    esp,0xc
c000fa3e:	68 55 12 02 c0       	push   0xc0021255
c000fa43:	e8 7a 4b 00 00       	call   c00145c2 <Thr::loadKernelSymbolTable(char const*)>
c000fa48:	83 c4 10             	add    esp,0x10
c000fa4b:	eb 33                	jmp    c000fa80 <ACPI::open(int, int, void*)+0x80>
c000fa4d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa50:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fa54:	3d bb 00 00 00       	cmp    eax,0xbb
c000fa59:	75 15                	jne    c000fa70 <ACPI::open(int, int, void*)+0x70>
c000fa5b:	83 ec 0c             	sub    esp,0xc
c000fa5e:	68 54 19 02 c0       	push   0xc0021954
c000fa63:	e8 5a 4b 00 00       	call   c00145c2 <Thr::loadKernelSymbolTable(char const*)>
c000fa68:	83 c4 10             	add    esp,0x10
c000fa6b:	eb 13                	jmp    c000fa80 <ACPI::open(int, int, void*)+0x80>
c000fa6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa70:	83 ec 0c             	sub    esp,0xc
c000fa73:	68 72 19 02 c0       	push   0xc0021972
c000fa78:	e8 30 17 00 00       	call   c00111ad <KePanic(char const*)>
c000fa7d:	83 c4 10             	add    esp,0x10
c000fa80:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fa84:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fa8b:	83 ec 0c             	sub    esp,0xc
c000fa8e:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fa91:	e8 3d 80 ff ff       	call   c0007ad3 <malloc>
c000fa96:	83 c4 10             	add    esp,0x10
c000fa99:	89 c3                	mov    ebx,eax
c000fa9b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000faa0:	83 ec 04             	sub    esp,0x4
c000faa3:	50                   	push   eax
c000faa4:	68 8c 19 02 c0       	push   0xc002198c
c000faa9:	53                   	push   ebx
c000faaa:	e8 51 bc ff ff       	call   c000b700 <File::File(char const*, Process*)>
c000faaf:	83 c4 10             	add    esp,0x10
c000fab2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fab5:	83 ec 08             	sub    esp,0x8
c000fab8:	6a 01                	push   0x1
c000faba:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fabd:	e8 fa bc ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c000fac2:	83 c4 10             	add    esp,0x10
c000fac5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fac8:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000facc:	75 12                	jne    c000fae0 <ACPI::open(int, int, void*)+0xe0>
c000face:	83 ec 0c             	sub    esp,0xc
c000fad1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fad4:	e8 41 bd ff ff       	call   c000b81a <File::close()>
c000fad9:	83 c4 10             	add    esp,0x10
c000fadc:	eb 06                	jmp    c000fae4 <ACPI::open(int, int, void*)+0xe4>
c000fade:	66 90                	xchg   ax,ax
c000fae0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fae4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fae8:	74 16                	je     c000fb00 <ACPI::open(int, int, void*)+0x100>
c000faea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000faed:	8b 00                	mov    eax,DWORD PTR [eax]
c000faef:	83 c0 08             	add    eax,0x8
c000faf2:	8b 00                	mov    eax,DWORD PTR [eax]
c000faf4:	83 ec 0c             	sub    esp,0xc
c000faf7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fafa:	ff d0                	call   eax
c000fafc:	83 c4 10             	add    esp,0x10
c000faff:	90                   	nop
c000fb00:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fb03:	83 f0 01             	xor    eax,0x1
c000fb06:	0f b6 c0             	movzx  eax,al
c000fb09:	85 c0                	test   eax,eax
c000fb0b:	74 3b                	je     c000fb48 <ACPI::open(int, int, void*)+0x148>
c000fb0d:	83 ec 0c             	sub    esp,0xc
c000fb10:	68 aa 19 02 c0       	push   0xc00219aa
c000fb15:	e8 bf 0f 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c000fb1a:	83 c4 10             	add    esp,0x10
c000fb1d:	83 ec 04             	sub    esp,0x4
c000fb20:	6a 0c                	push   0xc
c000fb22:	68 c5 19 02 c0       	push   0xc00219c5
c000fb27:	68 d6 19 02 c0       	push   0xc00219d6
c000fb2c:	e8 3d 3d 00 00       	call   c001386e <Reg::readIntWithDefault(char*, char*, int)>
c000fb31:	83 c4 10             	add    esp,0x10
c000fb34:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fb37:	83 ec 0c             	sub    esp,0xc
c000fb3a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fb3d:	e8 d8 9c ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fb42:	83 c4 10             	add    esp,0x10
c000fb45:	8d 76 00             	lea    esi,[esi+0x0]
c000fb48:	83 ec 0c             	sub    esp,0xc
c000fb4b:	68 55 05 02 c0       	push   0xc0020555
c000fb50:	e8 84 0f 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c000fb55:	83 c4 10             	add    esp,0x10
c000fb58:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb5b:	83 ec 08             	sub    esp,0x8
c000fb5e:	6a 13                	push   0x13
c000fb60:	50                   	push   eax
c000fb61:	e8 c2 cd ff ff       	call   c000c928 <getDevicesOfType(DeviceType)>
c000fb66:	83 c4 0c             	add    esp,0xc
c000fb69:	8d 76 00             	lea    esi,[esi+0x0]
c000fb6c:	83 ec 0c             	sub    esp,0xc
c000fb6f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb72:	50                   	push   eax
c000fb73:	e8 d8 fd 00 00       	call   c001f950 <LinkedList<Device>::isEmpty()>
c000fb78:	83 c4 10             	add    esp,0x10
c000fb7b:	83 f0 01             	xor    eax,0x1
c000fb7e:	0f b6 c0             	movzx  eax,al
c000fb81:	85 c0                	test   eax,eax
c000fb83:	0f 84 1f 01 00 00    	je     c000fca8 <ACPI::open(int, int, void*)+0x2a8>
c000fb89:	83 ec 0c             	sub    esp,0xc
c000fb8c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb8f:	50                   	push   eax
c000fb90:	e8 d7 fd 00 00       	call   c001f96c <LinkedList<Device>::getFirstElement()>
c000fb95:	83 c4 10             	add    esp,0x10
c000fb98:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fb9b:	83 ec 0c             	sub    esp,0xc
c000fb9e:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fba1:	50                   	push   eax
c000fba2:	e8 cd fd 00 00       	call   c001f974 <LinkedList<Device>::removeFirst()>
c000fba7:	83 c4 10             	add    esp,0x10
c000fbaa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fbad:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fbb0:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fbb3:	b8 24 00 00 00       	mov    eax,0x24
c000fbb8:	83 e0 fc             	and    eax,0xfffffffc
c000fbbb:	89 c3                	mov    ebx,eax
c000fbbd:	b8 00 00 00 00       	mov    eax,0x0
c000fbc2:	66 90                	xchg   ax,ax
c000fbc4:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fbcb:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fbd2:	83 c0 04             	add    eax,0x4
c000fbd5:	39 d8                	cmp    eax,ebx
c000fbd7:	72 eb                	jb     c000fbc4 <ACPI::open(int, int, void*)+0x1c4>
c000fbd9:	83 ec 08             	sub    esp,0x8
c000fbdc:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fbe2:	50                   	push   eax
c000fbe3:	83 ec 24             	sub    esp,0x24
c000fbe6:	89 e1                	mov    ecx,esp
c000fbe8:	b8 24 00 00 00       	mov    eax,0x24
c000fbed:	83 e0 fc             	and    eax,0xfffffffc
c000fbf0:	89 c3                	mov    ebx,eax
c000fbf2:	b8 00 00 00 00       	mov    eax,0x0
c000fbf7:	90                   	nop
c000fbf8:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fbff:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fc02:	83 c0 04             	add    eax,0x4
c000fc05:	39 d8                	cmp    eax,ebx
c000fc07:	72 ef                	jb     c000fbf8 <ACPI::open(int, int, void*)+0x1f8>
c000fc09:	e8 78 b4 00 00       	call   c001b086 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fc0e:	83 c4 30             	add    esp,0x30
c000fc11:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fc14:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fc18:	0f 84 4e ff ff ff    	je     c000fb6c <ACPI::open(int, int, void*)+0x16c>
c000fc1e:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fc25:	83 ec 0c             	sub    esp,0xc
c000fc28:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fc2b:	e8 a3 7e ff ff       	call   c0007ad3 <malloc>
c000fc30:	83 c4 10             	add    esp,0x10
c000fc33:	89 c3                	mov    ebx,eax
c000fc35:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fc3a:	83 ec 04             	sub    esp,0x4
c000fc3d:	50                   	push   eax
c000fc3e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fc41:	53                   	push   ebx
c000fc42:	e8 b9 ba ff ff       	call   c000b700 <File::File(char const*, Process*)>
c000fc47:	83 c4 10             	add    esp,0x10
c000fc4a:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fc4d:	83 ec 0c             	sub    esp,0xc
c000fc50:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fc53:	e8 28 be ff ff       	call   c000ba80 <File::exists()>
c000fc58:	83 c4 10             	add    esp,0x10
c000fc5b:	0f b6 c0             	movzx  eax,al
c000fc5e:	85 c0                	test   eax,eax
c000fc60:	74 22                	je     c000fc84 <ACPI::open(int, int, void*)+0x284>
c000fc62:	83 ec 08             	sub    esp,0x8
c000fc65:	6a 01                	push   0x1
c000fc67:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fc6a:	e8 d5 53 00 00       	call   c0015044 <Thr::loadDLL(char const*, bool)>
c000fc6f:	83 c4 10             	add    esp,0x10
c000fc72:	83 ec 08             	sub    esp,0x8
c000fc75:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fc78:	50                   	push   eax
c000fc79:	e8 06 56 00 00       	call   c0015284 <Thr::executeDLL(unsigned long, void*)>
c000fc7e:	83 c4 10             	add    esp,0x10
c000fc81:	8d 76 00             	lea    esi,[esi+0x0]
c000fc84:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fc88:	0f 84 de fe ff ff    	je     c000fb6c <ACPI::open(int, int, void*)+0x16c>
c000fc8e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fc91:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc93:	83 c0 08             	add    eax,0x8
c000fc96:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc98:	83 ec 0c             	sub    esp,0xc
c000fc9b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fc9e:	ff d0                	call   eax
c000fca0:	83 c4 10             	add    esp,0x10
c000fca3:	e9 c4 fe ff ff       	jmp    c000fb6c <ACPI::open(int, int, void*)+0x16c>
c000fca8:	83 ec 0c             	sub    esp,0xc
c000fcab:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fcae:	50                   	push   eax
c000fcaf:	e8 98 fc 00 00       	call   c001f94c <LinkedList<Device>::~LinkedList()>
c000fcb4:	83 c4 10             	add    esp,0x10
c000fcb7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fcbd:	83 ec 08             	sub    esp,0x8
c000fcc0:	6a 01                	push   0x1
c000fcc2:	68 dd 19 02 c0       	push   0xc00219dd
c000fcc7:	e8 78 53 00 00       	call   c0015044 <Thr::loadDLL(char const*, bool)>
c000fccc:	83 c4 10             	add    esp,0x10
c000fccf:	83 ec 08             	sub    esp,0x8
c000fcd2:	53                   	push   ebx
c000fcd3:	50                   	push   eax
c000fcd4:	e8 ab 55 00 00       	call   c0015284 <Thr::executeDLL(unsigned long, void*)>
c000fcd9:	83 c4 10             	add    esp,0x10
c000fcdc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fce1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fce7:	83 e0 04             	and    eax,0x4
c000fcea:	0f b6 c0             	movzx  eax,al
c000fced:	85 c0                	test   eax,eax
c000fcef:	0f 84 e3 00 00 00    	je     c000fdd8 <ACPI::open(int, int, void*)+0x3d8>
c000fcf5:	83 ec 0c             	sub    esp,0xc
c000fcf8:	68 fa 19 02 c0       	push   0xc00219fa
c000fcfd:	e8 d7 0d 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c000fd02:	83 c4 10             	add    esp,0x10
c000fd05:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fd0c:	83 ec 0c             	sub    esp,0xc
c000fd0f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fd12:	e8 bc 7d ff ff       	call   c0007ad3 <malloc>
c000fd17:	83 c4 10             	add    esp,0x10
c000fd1a:	89 c3                	mov    ebx,eax
c000fd1c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd21:	83 ec 04             	sub    esp,0x4
c000fd24:	50                   	push   eax
c000fd25:	68 17 1a 02 c0       	push   0xc0021a17
c000fd2a:	53                   	push   ebx
c000fd2b:	e8 d0 b9 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c000fd30:	83 c4 10             	add    esp,0x10
c000fd33:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fd36:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fd3a:	74 1c                	je     c000fd58 <ACPI::open(int, int, void*)+0x358>
c000fd3c:	83 ec 0c             	sub    esp,0xc
c000fd3f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fd42:	e8 39 bd ff ff       	call   c000ba80 <File::exists()>
c000fd47:	83 c4 10             	add    esp,0x10
c000fd4a:	0f b6 c0             	movzx  eax,al
c000fd4d:	85 c0                	test   eax,eax
c000fd4f:	74 07                	je     c000fd58 <ACPI::open(int, int, void*)+0x358>
c000fd51:	b0 01                	mov    al,0x1
c000fd53:	eb 07                	jmp    c000fd5c <ACPI::open(int, int, void*)+0x35c>
c000fd55:	8d 76 00             	lea    esi,[esi+0x0]
c000fd58:	b0 00                	mov    al,0x0
c000fd5a:	66 90                	xchg   ax,ax
c000fd5c:	0f b6 c0             	movzx  eax,al
c000fd5f:	85 c0                	test   eax,eax
c000fd61:	74 21                	je     c000fd84 <ACPI::open(int, int, void*)+0x384>
c000fd63:	83 ec 08             	sub    esp,0x8
c000fd66:	6a 01                	push   0x1
c000fd68:	68 17 1a 02 c0       	push   0xc0021a17
c000fd6d:	e8 d2 52 00 00       	call   c0015044 <Thr::loadDLL(char const*, bool)>
c000fd72:	83 c4 10             	add    esp,0x10
c000fd75:	83 ec 08             	sub    esp,0x8
c000fd78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd7b:	50                   	push   eax
c000fd7c:	e8 03 55 00 00       	call   c0015284 <Thr::executeDLL(unsigned long, void*)>
c000fd81:	83 c4 10             	add    esp,0x10
c000fd84:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fd88:	74 1e                	je     c000fda8 <ACPI::open(int, int, void*)+0x3a8>
c000fd8a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fd8e:	74 18                	je     c000fda8 <ACPI::open(int, int, void*)+0x3a8>
c000fd90:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000fd93:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd95:	83 c0 08             	add    eax,0x8
c000fd98:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd9a:	83 ec 0c             	sub    esp,0xc
c000fd9d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fda0:	ff d0                	call   eax
c000fda2:	83 c4 10             	add    esp,0x10
c000fda5:	8d 76 00             	lea    esi,[esi+0x0]
c000fda8:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fdad:	83 ec 08             	sub    esp,0x8
c000fdb0:	68 34 1a 02 c0       	push   0xc0021a34
c000fdb5:	50                   	push   eax
c000fdb6:	e8 65 f2 ff ff       	call   c000f020 <findDataTable(unsigned char*, char*)>
c000fdbb:	83 c4 10             	add    esp,0x10
c000fdbe:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000fdc1:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000fdc5:	74 11                	je     c000fdd8 <ACPI::open(int, int, void*)+0x3d8>
c000fdc7:	83 ec 08             	sub    esp,0x8
c000fdca:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000fdcd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fdd0:	e8 c7 fb ff ff       	call   c000f99c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fdd5:	83 c4 10             	add    esp,0x10
c000fdd8:	b8 00 00 00 00       	mov    eax,0x0
c000fddd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fde0:	c9                   	leave  
c000fde1:	c3                   	ret    

c000fde2 <CPU::close(int, int, void*)>:
c000fde2:	31 c0                	xor    eax,eax
c000fde4:	c3                   	ret    
c000fde5:	90                   	nop

c000fde6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fde6:	60                   	pusha  
c000fde7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fdeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fdf3:	9c                   	pushf  
c000fdf4:	fa                   	cli    
c000fdf5:	0f 09                	wbinvd 
c000fdf7:	0f 30                	wrmsr  
c000fdf9:	9d                   	popf   
c000fdfa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdfe:	89 02                	mov    DWORD PTR [edx],eax
c000fe00:	61                   	popa   
c000fe01:	c3                   	ret    

c000fe02 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fe02:	60                   	pusha  
c000fe03:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe07:	9c                   	pushf  
c000fe08:	fa                   	cli    
c000fe09:	0f 09                	wbinvd 
c000fe0b:	31 c0                	xor    eax,eax
c000fe0d:	31 d2                	xor    edx,edx
c000fe0f:	0f 32                	rdmsr  
c000fe11:	9d                   	popf   
c000fe12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe16:	89 02                	mov    DWORD PTR [edx],eax
c000fe18:	61                   	popa   
c000fe19:	c3                   	ret    

c000fe1a <CPU::AMD_K6_writeback(int, int, int)>:
c000fe1a:	56                   	push   esi
c000fe1b:	53                   	push   ebx
c000fe1c:	83 ec 10             	sub    esp,0x10
c000fe1f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fe24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe28:	75 5d                	jne    c000fe87 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe2a:	83 f8 08             	cmp    eax,0x8
c000fe2d:	75 09                	jne    c000fe38 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fe2f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000fe34:	7e 13                	jle    c000fe49 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fe36:	eb 30                	jmp    c000fe68 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fe38:	83 f8 06             	cmp    eax,0x6
c000fe3b:	7c 4a                	jl     c000fe87 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe3d:	83 f8 07             	cmp    eax,0x7
c000fe40:	7e 07                	jle    c000fe49 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fe42:	83 f8 09             	cmp    eax,0x9
c000fe45:	74 21                	je     c000fe68 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fe47:	eb 3e                	jmp    c000fe87 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe49:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000fe4f:	89 e6                	mov    esi,esp
c000fe51:	56                   	push   esi
c000fe52:	68 82 00 00 c0       	push   0xc0000082
c000fe57:	e8 a6 ff ff ff       	call   c000fe02 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fe5c:	c1 eb 15             	shr    ebx,0x15
c000fe5f:	56                   	push   esi
c000fe60:	83 e3 7e             	and    ebx,0x7e
c000fe63:	6a 00                	push   0x0
c000fe65:	53                   	push   ebx
c000fe66:	eb 12                	jmp    c000fe7a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000fe68:	89 e3                	mov    ebx,esp
c000fe6a:	53                   	push   ebx
c000fe6b:	68 82 00 00 c0       	push   0xc0000082
c000fe70:	e8 8d ff ff ff       	call   c000fe02 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fe75:	53                   	push   ebx
c000fe76:	6a 00                	push   0x0
c000fe78:	6a 00                	push   0x0
c000fe7a:	68 82 00 00 c0       	push   0xc0000082
c000fe7f:	e8 62 ff ff ff       	call   c000fde6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000fe84:	83 c4 18             	add    esp,0x18
c000fe87:	83 c4 10             	add    esp,0x10
c000fe8a:	5b                   	pop    ebx
c000fe8b:	5e                   	pop    esi
c000fe8c:	c3                   	ret    
c000fe8d:	90                   	nop

c000fe8e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000fe8e:	55                   	push   ebp
c000fe8f:	57                   	push   edi
c000fe90:	56                   	push   esi
c000fe91:	53                   	push   ebx
c000fe92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe96:	39 05 f8 2f 02 c0    	cmp    DWORD PTR ds:0xc0022ff8,eax
c000fe9c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000fea0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fea4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000fea8:	75 23                	jne    c000fecd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000feaa:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000feaf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000feb3:	89 06                	mov    DWORD PTR [esi],eax
c000feb5:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000feba:	89 07                	mov    DWORD PTR [edi],eax
c000febc:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000fec1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fec4:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c000fec9:	89 02                	mov    DWORD PTR [edx],eax
c000fecb:	eb 3f                	jmp    c000ff0c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000fecd:	31 c9                	xor    ecx,ecx
c000fecf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fed3:	0f a2                	cpuid  
c000fed5:	89 06                	mov    DWORD PTR [esi],eax
c000fed7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fedb:	89 1f                	mov    DWORD PTR [edi],ebx
c000fedd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000fee0:	89 10                	mov    DWORD PTR [eax],edx
c000fee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fee6:	a3 f8 2f 02 c0       	mov    ds:0xc0022ff8,eax
c000feeb:	8b 06                	mov    eax,DWORD PTR [esi]
c000feed:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c000fef2:	8b 07                	mov    eax,DWORD PTR [edi]
c000fef4:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c000fef9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fefc:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c000ff01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff05:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff07:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c000ff0c:	5b                   	pop    ebx
c000ff0d:	5e                   	pop    esi
c000ff0e:	5f                   	pop    edi
c000ff0f:	5d                   	pop    ebp
c000ff10:	c3                   	ret    
c000ff11:	90                   	nop

c000ff12 <CPU::cpuidCheckEDX(unsigned int)>:
c000ff12:	83 ec 10             	sub    esp,0x10
c000ff15:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff19:	50                   	push   eax
c000ff1a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff1e:	50                   	push   eax
c000ff1f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff23:	50                   	push   eax
c000ff24:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff28:	50                   	push   eax
c000ff29:	6a 01                	push   0x1
c000ff2b:	e8 5e ff ff ff       	call   c000fe8e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff34:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000ff38:	0f 95 c0             	setne  al
c000ff3b:	83 c4 24             	add    esp,0x24
c000ff3e:	c3                   	ret    
c000ff3f:	90                   	nop

c000ff40 <CPU::cpuidCheckECX(unsigned int)>:
c000ff40:	83 ec 10             	sub    esp,0x10
c000ff43:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff47:	50                   	push   eax
c000ff48:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff4c:	50                   	push   eax
c000ff4d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff51:	50                   	push   eax
c000ff52:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff56:	50                   	push   eax
c000ff57:	6a 01                	push   0x1
c000ff59:	e8 30 ff ff ff       	call   c000fe8e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff62:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ff66:	0f 95 c0             	setne  al
c000ff69:	83 c4 24             	add    esp,0x24
c000ff6c:	c3                   	ret    
c000ff6d:	90                   	nop

c000ff6e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000ff6e:	83 ec 10             	sub    esp,0x10
c000ff71:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff75:	50                   	push   eax
c000ff76:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff7a:	50                   	push   eax
c000ff7b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff7f:	50                   	push   eax
c000ff80:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff84:	50                   	push   eax
c000ff85:	6a 07                	push   0x7
c000ff87:	e8 02 ff ff ff       	call   c000fe8e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff90:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000ff94:	0f 95 c0             	setne  al
c000ff97:	83 c4 24             	add    esp,0x24
c000ff9a:	c3                   	ret    
c000ff9b:	90                   	nop

c000ff9c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000ff9c:	83 ec 10             	sub    esp,0x10
c000ff9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffa3:	50                   	push   eax
c000ffa4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffa8:	50                   	push   eax
c000ffa9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffad:	50                   	push   eax
c000ffae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffb2:	50                   	push   eax
c000ffb3:	6a 07                	push   0x7
c000ffb5:	e8 d4 fe ff ff       	call   c000fe8e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffbe:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ffc2:	0f 95 c0             	setne  al
c000ffc5:	83 c4 24             	add    esp,0x24
c000ffc8:	c3                   	ret    
c000ffc9:	90                   	nop

c000ffca <CPU::CPU()>:
c000ffca:	83 ec 0c             	sub    esp,0xc
c000ffcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd1:	83 ec 08             	sub    esp,0x8
c000ffd4:	68 59 1b 02 c0       	push   0xc0021b59
c000ffd9:	50                   	push   eax
c000ffda:	e8 c9 c7 ff ff       	call   c000c7a8 <Device::Device(char const*)>
c000ffdf:	83 c4 10             	add    esp,0x10
c000ffe2:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c000ffe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffeb:	89 10                	mov    DWORD PTR [eax],edx
c000ffed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000fffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffff:	05 78 01 00 00       	add    eax,0x178
c0010004:	83 ec 0c             	sub    esp,0xc
c0010007:	50                   	push   eax
c0010008:	e8 6f 73 ff ff       	call   c000737c <GDT::GDT()>
c001000d:	83 c4 10             	add    esp,0x10
c0010010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010014:	05 7c 09 00 00       	add    eax,0x97c
c0010019:	83 ec 0c             	sub    esp,0xc
c001001c:	50                   	push   eax
c001001d:	e8 aa 75 ff ff       	call   c00075cc <IDT::IDT()>
c0010022:	83 c4 10             	add    esp,0x10
c0010025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010029:	05 7c 11 00 00       	add    eax,0x117c
c001002e:	83 ec 0c             	sub    esp,0xc
c0010031:	50                   	push   eax
c0010032:	e8 f5 8e ff ff       	call   c0008f2c <TSS::TSS()>
c0010037:	83 c4 10             	add    esp,0x10
c001003a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001003e:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010049:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010053:	90                   	nop
c0010054:	83 c4 0c             	add    esp,0xc
c0010057:	c3                   	ret    

c0010058 <CPU::displayFeatures()>:
c0010058:	c3                   	ret    
c0010059:	90                   	nop

c001005a <CPU::detectFeatures()>:
c001005a:	55                   	push   ebp
c001005b:	57                   	push   edi
c001005c:	56                   	push   esi
c001005d:	53                   	push   ebx
c001005e:	83 ec 30             	sub    esp,0x30
c0010061:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010065:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001006f:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010075:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001007c:	6a 0d                	push   0xd
c001007e:	6a 00                	push   0x0
c0010080:	55                   	push   ebp
c0010081:	e8 6a 04 ff ff       	call   c00004f0 <memset>
c0010086:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001008b:	83 c4 10             	add    esp,0x10
c001008e:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010095:	0f 84 db 05 00 00    	je     c0010676 <CPU::detectFeatures()+0x61c>
c001009b:	83 ec 0c             	sub    esp,0xc
c001009e:	89 ef                	mov    edi,ebp
c00100a0:	6a 10                	push   0x10
c00100a2:	e8 6b fe ff ff       	call   c000ff12 <CPU::cpuidCheckEDX(unsigned int)>
c00100a7:	83 e0 01             	and    eax,0x1
c00100aa:	8d 14 00             	lea    edx,[eax+eax*1]
c00100ad:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00100b3:	83 e0 fd             	and    eax,0xfffffffd
c00100b6:	09 d0                	or     eax,edx
c00100b8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00100be:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00100c5:	e8 48 fe ff ff       	call   c000ff12 <CPU::cpuidCheckEDX(unsigned int)>
c00100ca:	83 e0 01             	and    eax,0x1
c00100cd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00100d4:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00100da:	83 e0 fb             	and    eax,0xfffffffb
c00100dd:	09 d0                	or     eax,edx
c00100df:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00100e5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00100ec:	e8 21 fe ff ff       	call   c000ff12 <CPU::cpuidCheckEDX(unsigned int)>
c00100f1:	83 e0 01             	and    eax,0x1
c00100f4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00100fb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010101:	83 e0 f7             	and    eax,0xfffffff7
c0010104:	09 d0                	or     eax,edx
c0010106:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001010c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010113:	e8 fa fd ff ff       	call   c000ff12 <CPU::cpuidCheckEDX(unsigned int)>
c0010118:	83 e0 01             	and    eax,0x1
c001011b:	c1 e0 04             	shl    eax,0x4
c001011e:	89 c2                	mov    edx,eax
c0010120:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010126:	83 e0 ef             	and    eax,0xffffffef
c0010129:	09 d0                	or     eax,edx
c001012b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010131:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010138:	e8 d5 fd ff ff       	call   c000ff12 <CPU::cpuidCheckEDX(unsigned int)>
c001013d:	83 e0 01             	and    eax,0x1
c0010140:	c1 e0 05             	shl    eax,0x5
c0010143:	89 c2                	mov    edx,eax
c0010145:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001014b:	83 e0 df             	and    eax,0xffffffdf
c001014e:	09 d0                	or     eax,edx
c0010150:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010156:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001015d:	e8 b0 fd ff ff       	call   c000ff12 <CPU::cpuidCheckEDX(unsigned int)>
c0010162:	83 e0 01             	and    eax,0x1
c0010165:	8d 14 00             	lea    edx,[eax+eax*1]
c0010168:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001016e:	83 e0 fd             	and    eax,0xfffffffd
c0010171:	09 d0                	or     eax,edx
c0010173:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010179:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010180:	e8 8d fd ff ff       	call   c000ff12 <CPU::cpuidCheckEDX(unsigned int)>
c0010185:	83 e0 01             	and    eax,0x1
c0010188:	c1 e0 06             	shl    eax,0x6
c001018b:	89 c2                	mov    edx,eax
c001018d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010193:	83 e0 bf             	and    eax,0xffffffbf
c0010196:	09 d0                	or     eax,edx
c0010198:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001019e:	58                   	pop    eax
c001019f:	8d 44 24 28          	lea    eax,[esp+0x28]
c00101a3:	50                   	push   eax
c00101a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00101a8:	50                   	push   eax
c00101a9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00101ad:	56                   	push   esi
c00101ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c00101b2:	50                   	push   eax
c00101b3:	6a 00                	push   0x0
c00101b5:	e8 d4 fc ff ff       	call   c000fe8e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00101ba:	b8 04 00 00 00       	mov    eax,0x4
c00101bf:	89 c1                	mov    ecx,eax
c00101c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101c3:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00101c9:	89 c1                	mov    ecx,eax
c00101cb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00101cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101d1:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00101d7:	89 c1                	mov    ecx,eax
c00101d9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00101dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101df:	83 c4 18             	add    esp,0x18
c00101e2:	68 68 1a 02 c0       	push   0xc0021a68
c00101e7:	55                   	push   ebp
c00101e8:	e8 93 05 ff ff       	call   c0000780 <strcmp>
c00101ed:	83 c4 10             	add    esp,0x10
c00101f0:	85 c0                	test   eax,eax
c00101f2:	75 0f                	jne    c0010203 <CPU::detectFeatures()+0x1a9>
c00101f4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00101fe:	e9 22 02 00 00       	jmp    c0010425 <CPU::detectFeatures()+0x3cb>
c0010203:	50                   	push   eax
c0010204:	50                   	push   eax
c0010205:	68 75 1a 02 c0       	push   0xc0021a75
c001020a:	55                   	push   ebp
c001020b:	e8 70 05 ff ff       	call   c0000780 <strcmp>
c0010210:	83 c4 10             	add    esp,0x10
c0010213:	85 c0                	test   eax,eax
c0010215:	74 dd                	je     c00101f4 <CPU::detectFeatures()+0x19a>
c0010217:	50                   	push   eax
c0010218:	50                   	push   eax
c0010219:	68 82 1a 02 c0       	push   0xc0021a82
c001021e:	55                   	push   ebp
c001021f:	e8 5c 05 ff ff       	call   c0000780 <strcmp>
c0010224:	83 c4 10             	add    esp,0x10
c0010227:	85 c0                	test   eax,eax
c0010229:	74 2a                	je     c0010255 <CPU::detectFeatures()+0x1fb>
c001022b:	50                   	push   eax
c001022c:	50                   	push   eax
c001022d:	68 8f 1a 02 c0       	push   0xc0021a8f
c0010232:	55                   	push   ebp
c0010233:	e8 48 05 ff ff       	call   c0000780 <strcmp>
c0010238:	83 c4 10             	add    esp,0x10
c001023b:	85 c0                	test   eax,eax
c001023d:	74 16                	je     c0010255 <CPU::detectFeatures()+0x1fb>
c001023f:	50                   	push   eax
c0010240:	50                   	push   eax
c0010241:	68 9c 1a 02 c0       	push   0xc0021a9c
c0010246:	55                   	push   ebp
c0010247:	e8 34 05 ff ff       	call   c0000780 <strcmp>
c001024c:	83 c4 10             	add    esp,0x10
c001024f:	85 c0                	test   eax,eax
c0010251:	74 48                	je     c001029b <CPU::detectFeatures()+0x241>
c0010253:	eb 0f                	jmp    c0010264 <CPU::detectFeatures()+0x20a>
c0010255:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001025f:	e9 c1 01 00 00       	jmp    c0010425 <CPU::detectFeatures()+0x3cb>
c0010264:	50                   	push   eax
c0010265:	50                   	push   eax
c0010266:	68 a9 1a 02 c0       	push   0xc0021aa9
c001026b:	55                   	push   ebp
c001026c:	e8 0f 05 ff ff       	call   c0000780 <strcmp>
c0010271:	83 c4 10             	add    esp,0x10
c0010274:	85 c0                	test   eax,eax
c0010276:	74 23                	je     c001029b <CPU::detectFeatures()+0x241>
c0010278:	57                   	push   edi
c0010279:	57                   	push   edi
c001027a:	68 b6 1a 02 c0       	push   0xc0021ab6
c001027f:	55                   	push   ebp
c0010280:	e8 fb 04 ff ff       	call   c0000780 <strcmp>
c0010285:	83 c4 10             	add    esp,0x10
c0010288:	85 c0                	test   eax,eax
c001028a:	75 1e                	jne    c00102aa <CPU::detectFeatures()+0x250>
c001028c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010296:	e9 8a 01 00 00       	jmp    c0010425 <CPU::detectFeatures()+0x3cb>
c001029b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00102a5:	e9 7b 01 00 00       	jmp    c0010425 <CPU::detectFeatures()+0x3cb>
c00102aa:	56                   	push   esi
c00102ab:	56                   	push   esi
c00102ac:	68 c3 1a 02 c0       	push   0xc0021ac3
c00102b1:	55                   	push   ebp
c00102b2:	e8 c9 04 ff ff       	call   c0000780 <strcmp>
c00102b7:	83 c4 10             	add    esp,0x10
c00102ba:	85 c0                	test   eax,eax
c00102bc:	75 0f                	jne    c00102cd <CPU::detectFeatures()+0x273>
c00102be:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00102c8:	e9 58 01 00 00       	jmp    c0010425 <CPU::detectFeatures()+0x3cb>
c00102cd:	51                   	push   ecx
c00102ce:	51                   	push   ecx
c00102cf:	68 82 1a 02 c0       	push   0xc0021a82
c00102d4:	55                   	push   ebp
c00102d5:	e8 a6 04 ff ff       	call   c0000780 <strcmp>
c00102da:	83 c4 10             	add    esp,0x10
c00102dd:	85 c0                	test   eax,eax
c00102df:	75 0f                	jne    c00102f0 <CPU::detectFeatures()+0x296>
c00102e1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00102eb:	e9 35 01 00 00       	jmp    c0010425 <CPU::detectFeatures()+0x3cb>
c00102f0:	52                   	push   edx
c00102f1:	52                   	push   edx
c00102f2:	68 d0 1a 02 c0       	push   0xc0021ad0
c00102f7:	55                   	push   ebp
c00102f8:	e8 83 04 ff ff       	call   c0000780 <strcmp>
c00102fd:	83 c4 10             	add    esp,0x10
c0010300:	85 c0                	test   eax,eax
c0010302:	75 0f                	jne    c0010313 <CPU::detectFeatures()+0x2b9>
c0010304:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001030e:	e9 12 01 00 00       	jmp    c0010425 <CPU::detectFeatures()+0x3cb>
c0010313:	50                   	push   eax
c0010314:	50                   	push   eax
c0010315:	68 dd 1a 02 c0       	push   0xc0021add
c001031a:	55                   	push   ebp
c001031b:	e8 60 04 ff ff       	call   c0000780 <strcmp>
c0010320:	83 c4 10             	add    esp,0x10
c0010323:	85 c0                	test   eax,eax
c0010325:	75 0f                	jne    c0010336 <CPU::detectFeatures()+0x2dc>
c0010327:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010331:	e9 ef 00 00 00       	jmp    c0010425 <CPU::detectFeatures()+0x3cb>
c0010336:	50                   	push   eax
c0010337:	50                   	push   eax
c0010338:	68 ea 1a 02 c0       	push   0xc0021aea
c001033d:	55                   	push   ebp
c001033e:	e8 3d 04 ff ff       	call   c0000780 <strcmp>
c0010343:	83 c4 10             	add    esp,0x10
c0010346:	85 c0                	test   eax,eax
c0010348:	75 0f                	jne    c0010359 <CPU::detectFeatures()+0x2ff>
c001034a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010354:	e9 cc 00 00 00       	jmp    c0010425 <CPU::detectFeatures()+0x3cb>
c0010359:	50                   	push   eax
c001035a:	50                   	push   eax
c001035b:	68 f7 1a 02 c0       	push   0xc0021af7
c0010360:	55                   	push   ebp
c0010361:	e8 1a 04 ff ff       	call   c0000780 <strcmp>
c0010366:	83 c4 10             	add    esp,0x10
c0010369:	85 c0                	test   eax,eax
c001036b:	75 0f                	jne    c001037c <CPU::detectFeatures()+0x322>
c001036d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010377:	e9 a9 00 00 00       	jmp    c0010425 <CPU::detectFeatures()+0x3cb>
c001037c:	50                   	push   eax
c001037d:	50                   	push   eax
c001037e:	68 04 1b 02 c0       	push   0xc0021b04
c0010383:	55                   	push   ebp
c0010384:	e8 f7 03 ff ff       	call   c0000780 <strcmp>
c0010389:	83 c4 10             	add    esp,0x10
c001038c:	85 c0                	test   eax,eax
c001038e:	75 0f                	jne    c001039f <CPU::detectFeatures()+0x345>
c0010390:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001039a:	e9 86 00 00 00       	jmp    c0010425 <CPU::detectFeatures()+0x3cb>
c001039f:	50                   	push   eax
c00103a0:	50                   	push   eax
c00103a1:	68 11 1b 02 c0       	push   0xc0021b11
c00103a6:	55                   	push   ebp
c00103a7:	e8 d4 03 ff ff       	call   c0000780 <strcmp>
c00103ac:	83 c4 10             	add    esp,0x10
c00103af:	85 c0                	test   eax,eax
c00103b1:	75 0c                	jne    c00103bf <CPU::detectFeatures()+0x365>
c00103b3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00103bd:	eb 66                	jmp    c0010425 <CPU::detectFeatures()+0x3cb>
c00103bf:	50                   	push   eax
c00103c0:	50                   	push   eax
c00103c1:	68 1e 1b 02 c0       	push   0xc0021b1e
c00103c6:	55                   	push   ebp
c00103c7:	e8 b4 03 ff ff       	call   c0000780 <strcmp>
c00103cc:	83 c4 10             	add    esp,0x10
c00103cf:	85 c0                	test   eax,eax
c00103d1:	75 0c                	jne    c00103df <CPU::detectFeatures()+0x385>
c00103d3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00103dd:	eb 46                	jmp    c0010425 <CPU::detectFeatures()+0x3cb>
c00103df:	57                   	push   edi
c00103e0:	57                   	push   edi
c00103e1:	68 2b 1b 02 c0       	push   0xc0021b2b
c00103e6:	55                   	push   ebp
c00103e7:	e8 94 03 ff ff       	call   c0000780 <strcmp>
c00103ec:	83 c4 10             	add    esp,0x10
c00103ef:	85 c0                	test   eax,eax
c00103f1:	74 e0                	je     c00103d3 <CPU::detectFeatures()+0x379>
c00103f3:	56                   	push   esi
c00103f4:	56                   	push   esi
c00103f5:	68 38 1b 02 c0       	push   0xc0021b38
c00103fa:	55                   	push   ebp
c00103fb:	e8 80 03 ff ff       	call   c0000780 <strcmp>
c0010400:	83 c4 10             	add    esp,0x10
c0010403:	85 c0                	test   eax,eax
c0010405:	74 cc                	je     c00103d3 <CPU::detectFeatures()+0x379>
c0010407:	51                   	push   ecx
c0010408:	51                   	push   ecx
c0010409:	68 45 1b 02 c0       	push   0xc0021b45
c001040e:	55                   	push   ebp
c001040f:	e8 6c 03 ff ff       	call   c0000780 <strcmp>
c0010414:	83 c4 10             	add    esp,0x10
c0010417:	85 c0                	test   eax,eax
c0010419:	74 b8                	je     c00103d3 <CPU::detectFeatures()+0x379>
c001041b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010425:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001042a:	0f 86 be 00 00 00    	jbe    c00104ee <CPU::detectFeatures()+0x494>
c0010430:	83 ec 0c             	sub    esp,0xc
c0010433:	68 80 00 00 00       	push   0x80
c0010438:	e8 31 fb ff ff       	call   c000ff6e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001043d:	83 e0 01             	and    eax,0x1
c0010440:	c1 e0 06             	shl    eax,0x6
c0010443:	89 c2                	mov    edx,eax
c0010445:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001044b:	83 e0 bf             	and    eax,0xffffffbf
c001044e:	09 d0                	or     eax,edx
c0010450:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010456:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001045d:	e8 0c fb ff ff       	call   c000ff6e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010462:	83 e0 01             	and    eax,0x1
c0010465:	c1 e0 04             	shl    eax,0x4
c0010468:	89 c2                	mov    edx,eax
c001046a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010470:	83 e0 ef             	and    eax,0xffffffef
c0010473:	09 d0                	or     eax,edx
c0010475:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001047b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010482:	e8 e7 fa ff ff       	call   c000ff6e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010487:	89 c2                	mov    edx,eax
c0010489:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001048f:	c1 e2 07             	shl    edx,0x7
c0010492:	83 e0 7f             	and    eax,0x7f
c0010495:	09 d0                	or     eax,edx
c0010497:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001049d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00104a4:	e8 f3 fa ff ff       	call   c000ff9c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00104a9:	83 e0 01             	and    eax,0x1
c00104ac:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00104b3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00104b9:	83 e0 f7             	and    eax,0xfffffff7
c00104bc:	09 d0                	or     eax,edx
c00104be:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00104c4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00104cb:	e8 cc fa ff ff       	call   c000ff9c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00104d0:	83 c4 10             	add    esp,0x10
c00104d3:	83 e0 01             	and    eax,0x1
c00104d6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104dd:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00104e3:	83 e0 fb             	and    eax,0xfffffffb
c00104e6:	09 d0                	or     eax,edx
c00104e8:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00104ee:	83 ec 0c             	sub    esp,0xc
c00104f1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104f5:	50                   	push   eax
c00104f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104fa:	50                   	push   eax
c00104fb:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00104ff:	57                   	push   edi
c0010500:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010504:	56                   	push   esi
c0010505:	6a 01                	push   0x1
c0010507:	e8 82 f9 ff ff       	call   c000fe8e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001050c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010510:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010516:	89 c1                	mov    ecx,eax
c0010518:	83 e1 0f             	and    ecx,0xf
c001051b:	83 e2 f0             	and    edx,0xfffffff0
c001051e:	09 ca                	or     edx,ecx
c0010520:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010526:	89 c2                	mov    edx,eax
c0010528:	c1 ea 04             	shr    edx,0x4
c001052b:	83 e2 0f             	and    edx,0xf
c001052e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010532:	89 d1                	mov    ecx,edx
c0010534:	83 c4 20             	add    esp,0x20
c0010537:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001053d:	c1 e1 06             	shl    ecx,0x6
c0010540:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010546:	09 ca                	or     edx,ecx
c0010548:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001054f:	89 c2                	mov    edx,eax
c0010551:	c1 ea 08             	shr    edx,0x8
c0010554:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001055a:	83 e2 0f             	and    edx,0xf
c001055d:	89 d5                	mov    ebp,edx
c001055f:	83 e5 03             	and    ebp,0x3
c0010562:	c1 e5 06             	shl    ebp,0x6
c0010565:	83 e1 3f             	and    ecx,0x3f
c0010568:	09 e9                	or     ecx,ebp
c001056a:	89 d5                	mov    ebp,edx
c001056c:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010572:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010578:	c1 ed 02             	shr    ebp,0x2
c001057b:	83 e1 c0             	and    ecx,0xffffffc0
c001057e:	09 e9                	or     ecx,ebp
c0010580:	89 c5                	mov    ebp,eax
c0010582:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010588:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001058e:	c1 ed 08             	shr    ebp,0x8
c0010591:	83 e5 30             	and    ebp,0x30
c0010594:	83 e1 cf             	and    ecx,0xffffffcf
c0010597:	09 e9                	or     ecx,ebp
c0010599:	83 fa 06             	cmp    edx,0x6
c001059c:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00105a2:	74 05                	je     c00105a9 <CPU::detectFeatures()+0x54f>
c00105a4:	83 fa 0f             	cmp    edx,0xf
c00105a7:	75 64                	jne    c001060d <CPU::detectFeatures()+0x5b3>
c00105a9:	89 c1                	mov    ecx,eax
c00105ab:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00105b1:	c1 e9 10             	shr    ecx,0x10
c00105b4:	c1 e1 04             	shl    ecx,0x4
c00105b7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00105bb:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00105c1:	0f b6 c9             	movzx  ecx,cl
c00105c4:	c1 e1 06             	shl    ecx,0x6
c00105c7:	09 e9                	or     ecx,ebp
c00105c9:	83 fa 0f             	cmp    edx,0xf
c00105cc:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00105d3:	75 38                	jne    c001060d <CPU::detectFeatures()+0x5b3>
c00105d5:	c1 e8 14             	shr    eax,0x14
c00105d8:	83 c0 0f             	add    eax,0xf
c00105db:	0f b6 c0             	movzx  eax,al
c00105de:	89 c2                	mov    edx,eax
c00105e0:	c1 e8 02             	shr    eax,0x2
c00105e3:	83 e2 03             	and    edx,0x3
c00105e6:	89 d1                	mov    ecx,edx
c00105e8:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00105ee:	c1 e1 06             	shl    ecx,0x6
c00105f1:	83 e2 3f             	and    edx,0x3f
c00105f4:	09 ca                	or     edx,ecx
c00105f6:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00105fc:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010602:	83 e2 c0             	and    edx,0xffffffc0
c0010605:	09 d0                	or     eax,edx
c0010607:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001060d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010613:	83 ec 0c             	sub    esp,0xc
c0010616:	83 c8 07             	or     eax,0x7
c0010619:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001061f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010623:	50                   	push   eax
c0010624:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010628:	55                   	push   ebp
c0010629:	57                   	push   edi
c001062a:	56                   	push   esi
c001062b:	68 00 00 00 80       	push   0x80000000
c0010630:	e8 59 f8 ff ff       	call   c000fe8e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010635:	83 c4 20             	add    esp,0x20
c0010638:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010640:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010644:	76 1e                	jbe    c0010664 <CPU::detectFeatures()+0x60a>
c0010646:	83 ec 0c             	sub    esp,0xc
c0010649:	50                   	push   eax
c001064a:	55                   	push   ebp
c001064b:	57                   	push   edi
c001064c:	56                   	push   esi
c001064d:	68 01 00 00 80       	push   0x80000001
c0010652:	e8 37 f8 ff ff       	call   c000fe8e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010657:	83 c4 20             	add    esp,0x20
c001065a:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010664:	52                   	push   edx
c0010665:	52                   	push   edx
c0010666:	68 51 1b 02 c0       	push   0xc0021b51
c001066b:	53                   	push   ebx
c001066c:	e8 29 c1 ff ff       	call   c000c79a <Device::setName(char const*)>
c0010671:	83 c4 10             	add    esp,0x10
c0010674:	eb 69                	jmp    c00106df <CPU::detectFeatures()+0x685>
c0010676:	50                   	push   eax
c0010677:	50                   	push   eax
c0010678:	68 b6 1a 02 c0       	push   0xc0021ab6
c001067d:	55                   	push   ebp
c001067e:	e8 cd ff fe ff       	call   c0000650 <strcpy>
c0010683:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001068d:	e8 31 fb fe ff       	call   c00001c3 <is486>
c0010692:	83 c4 10             	add    esp,0x10
c0010695:	85 c0                	test   eax,eax
c0010697:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001069d:	74 1f                	je     c00106be <CPU::detectFeatures()+0x664>
c001069f:	83 c8 07             	or     eax,0x7
c00106a2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106a8:	0f 20 c0             	mov    eax,cr0
c00106ab:	83 e0 14             	and    eax,0x14
c00106ae:	83 f8 04             	cmp    eax,0x4
c00106b1:	75 10                	jne    c00106c3 <CPU::detectFeatures()+0x669>
c00106b3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106b9:	83 e0 fd             	and    eax,0xfffffffd
c00106bc:	eb 1b                	jmp    c00106d9 <CPU::detectFeatures()+0x67f>
c00106be:	83 e0 f8             	and    eax,0xfffffff8
c00106c1:	eb df                	jmp    c00106a2 <CPU::detectFeatures()+0x648>
c00106c3:	e8 d6 fa fe ff       	call   c000019e <hasLegacyFPU>
c00106c8:	83 e0 01             	and    eax,0x1
c00106cb:	8d 14 00             	lea    edx,[eax+eax*1]
c00106ce:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106d4:	83 e0 fd             	and    eax,0xfffffffd
c00106d7:	09 d0                	or     eax,edx
c00106d9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00106df:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00106e6:	74 17                	je     c00106ff <CPU::detectFeatures()+0x6a5>
c00106e8:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00106ee:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00106f4:	83 c8 10             	or     eax,0x10
c00106f7:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00106fd:	eb 20                	jmp    c001071f <CPU::detectFeatures()+0x6c5>
c00106ff:	e8 9a fa fe ff       	call   c000019e <hasLegacyFPU>
c0010704:	83 e0 01             	and    eax,0x1
c0010707:	8d 14 00             	lea    edx,[eax+eax*1]
c001070a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010710:	83 e0 fd             	and    eax,0xfffffffd
c0010713:	09 d0                	or     eax,edx
c0010715:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001071b:	a8 02                	test   al,0x2
c001071d:	75 c9                	jne    c00106e8 <CPU::detectFeatures()+0x68e>
c001071f:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010726:	83 c4 2c             	add    esp,0x2c
c0010729:	5b                   	pop    ebx
c001072a:	5e                   	pop    esi
c001072b:	5f                   	pop    edi
c001072c:	5d                   	pop    ebp
c001072d:	c3                   	ret    

c001072e <CPU::setupSMEP()>:
c001072e:	0f 20 e0             	mov    eax,cr4
c0010731:	0d 00 00 10 00       	or     eax,0x100000
c0010736:	0f 22 e0             	mov    cr4,eax
c0010739:	c3                   	ret    

c001073a <CPU::setupUMIP()>:
c001073a:	0f 20 e0             	mov    eax,cr4
c001073d:	80 cc 08             	or     ah,0x8
c0010740:	0f 22 e0             	mov    cr4,eax
c0010743:	c3                   	ret    

c0010744 <CPU::setupTSC()>:
c0010744:	0f 20 e0             	mov    eax,cr4
c0010747:	83 c8 04             	or     eax,0x4
c001074a:	0f 22 e0             	mov    cr4,eax
c001074d:	c3                   	ret    

c001074e <CPU::setupLargePages()>:
c001074e:	0f 20 e0             	mov    eax,cr4
c0010751:	83 c8 10             	or     eax,0x10
c0010754:	0f 22 e0             	mov    cr4,eax
c0010757:	c3                   	ret    

c0010758 <CPU::setupPAT()>:
c0010758:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001075d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010764:	74 2c                	je     c0010792 <CPU::setupPAT()+0x3a>
c0010766:	53                   	push   ebx
c0010767:	83 ec 10             	sub    esp,0x10
c001076a:	68 77 02 00 00       	push   0x277
c001076f:	50                   	push   eax
c0010770:	e8 6d 69 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010775:	83 e2 f8             	and    edx,0xfffffff8
c0010778:	83 ca 01             	or     edx,0x1
c001077b:	52                   	push   edx
c001077c:	50                   	push   eax
c001077d:	68 77 02 00 00       	push   0x277
c0010782:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010788:	e8 81 69 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c001078d:	83 c4 28             	add    esp,0x28
c0010790:	5b                   	pop    ebx
c0010791:	c3                   	ret    
c0010792:	c3                   	ret    
c0010793:	90                   	nop

c0010794 <CPU::setupMTRR()>:
c0010794:	c3                   	ret    
c0010795:	90                   	nop

c0010796 <CPU::setupGlobalPages()>:
c0010796:	0f 20 e0             	mov    eax,cr4
c0010799:	0c 80                	or     al,0x80
c001079b:	0f 22 e0             	mov    cr4,eax
c001079e:	c3                   	ret    
c001079f:	90                   	nop

c00107a0 <CPU::allowUsermodeDataAccess()>:
c00107a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107a4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00107ab:	74 03                	je     c00107b0 <CPU::allowUsermodeDataAccess()+0x10>
c00107ad:	0f 01 cb             	stac   
c00107b0:	c3                   	ret    
c00107b1:	90                   	nop

c00107b2 <CPU::prohibitUsermodeDataAccess()>:
c00107b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107b6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00107bd:	74 03                	je     c00107c2 <CPU::prohibitUsermodeDataAccess()+0x10>
c00107bf:	0f 01 ca             	clac   
c00107c2:	c3                   	ret    
c00107c3:	90                   	nop

c00107c4 <CPU::setupSMAP()>:
c00107c4:	0f 20 e0             	mov    eax,cr4
c00107c7:	0d 00 00 20 00       	or     eax,0x200000
c00107cc:	0f 22 e0             	mov    cr4,eax
c00107cf:	eb e1                	jmp    c00107b2 <CPU::prohibitUsermodeDataAccess()>
c00107d1:	90                   	nop

c00107d2 <CPU::setupFeatures()>:
c00107d2:	53                   	push   ebx
c00107d3:	83 ec 08             	sub    esp,0x8
c00107d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107da:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00107e1:	74 18                	je     c00107fb <CPU::setupFeatures()+0x29>
c00107e3:	83 ec 0c             	sub    esp,0xc
c00107e6:	68 5d 1b 02 c0       	push   0xc0021b5d
c00107eb:	e8 1a a1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00107f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107f3:	e8 42 ff ff ff       	call   c001073a <CPU::setupUMIP()>
c00107f8:	83 c4 10             	add    esp,0x10
c00107fb:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010802:	74 18                	je     c001081c <CPU::setupFeatures()+0x4a>
c0010804:	83 ec 0c             	sub    esp,0xc
c0010807:	68 67 1b 02 c0       	push   0xc0021b67
c001080c:	e8 f9 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010811:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010814:	e8 2b ff ff ff       	call   c0010744 <CPU::setupTSC()>
c0010819:	83 c4 10             	add    esp,0x10
c001081c:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010823:	74 18                	je     c001083d <CPU::setupFeatures()+0x6b>
c0010825:	83 ec 0c             	sub    esp,0xc
c0010828:	68 70 1b 02 c0       	push   0xc0021b70
c001082d:	e8 d8 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010832:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010835:	e8 14 ff ff ff       	call   c001074e <CPU::setupLargePages()>
c001083a:	83 c4 10             	add    esp,0x10
c001083d:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010844:	74 18                	je     c001085e <CPU::setupFeatures()+0x8c>
c0010846:	83 ec 0c             	sub    esp,0xc
c0010849:	68 79 1b 02 c0       	push   0xc0021b79
c001084e:	e8 b7 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010853:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010856:	e8 3b ff ff ff       	call   c0010796 <CPU::setupGlobalPages()>
c001085b:	83 c4 10             	add    esp,0x10
c001085e:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010865:	74 18                	je     c001087f <CPU::setupFeatures()+0xad>
c0010867:	83 ec 0c             	sub    esp,0xc
c001086a:	68 8b 1b 02 c0       	push   0xc0021b8b
c001086f:	e8 96 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010874:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010877:	e8 dc fe ff ff       	call   c0010758 <CPU::setupPAT()>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010886:	74 11                	je     c0010899 <CPU::setupFeatures()+0xc7>
c0010888:	c7 44 24 10 94 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021b94
c0010890:	83 c4 08             	add    esp,0x8
c0010893:	5b                   	pop    ebx
c0010894:	e9 71 a0 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c0010899:	83 c4 08             	add    esp,0x8
c001089c:	5b                   	pop    ebx
c001089d:	c3                   	ret    

c001089e <CPU::open(int, int, void*)>:
c001089e:	55                   	push   ebp
c001089f:	57                   	push   edi
c00108a0:	56                   	push   esi
c00108a1:	53                   	push   ebx
c00108a2:	83 ec 18             	sub    esp,0x18
c00108a5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00108a9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00108ad:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00108b1:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00108b7:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00108bd:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c00108c3:	50                   	push   eax
c00108c4:	e8 15 6b ff ff       	call   c00073de <GDT::setup()>
c00108c9:	83 c4 0c             	add    esp,0xc
c00108cc:	6a 00                	push   0x0
c00108ce:	68 ef be ad de       	push   0xdeadbeef
c00108d3:	55                   	push   ebp
c00108d4:	e8 97 86 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c00108d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00108dc:	e8 6f 86 ff ff       	call   c0008f50 <TSS::flush()>
c00108e1:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00108e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00108ea:	e8 53 6d ff ff       	call   c0007642 <IDT::setup()>
c00108ef:	b8 00 04 00 00       	mov    eax,0x400
c00108f4:	0f 23 f8             	mov    db7,eax
c00108f7:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010901:	e8 dc 74 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010906:	83 c4 10             	add    esp,0x10
c0010909:	85 f6                	test   esi,esi
c001090b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010911:	89 38                	mov    DWORD PTR [eax],edi
c0010913:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010919:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001091c:	74 10                	je     c001092e <CPU::open(int, int, void*)+0x90>
c001091e:	50                   	push   eax
c001091f:	50                   	push   eax
c0010920:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010926:	56                   	push   esi
c0010927:	e8 60 8f ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c001092c:	eb 0d                	jmp    c001093b <CPU::open(int, int, void*)+0x9d>
c001092e:	83 ec 0c             	sub    esp,0xc
c0010931:	68 9e 1b 02 c0       	push   0xc0021b9e
c0010936:	e8 72 08 00 00       	call   c00111ad <KePanic(char const*)>
c001093b:	83 c4 10             	add    esp,0x10
c001093e:	83 ec 0c             	sub    esp,0xc
c0010941:	68 ac 1b 02 c0       	push   0xc0021bac
c0010946:	e8 8e 01 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c001094b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001094e:	e8 07 f7 ff ff       	call   c001005a <CPU::detectFeatures()>
c0010953:	c7 04 24 cf 1b 02 c0 	mov    DWORD PTR [esp],0xc0021bcf
c001095a:	e8 7a 01 00 00       	call   c0010ad9 <KeSetBootMessage(char const*)>
c001095f:	e8 0b 72 00 00       	call   c0017b6f <HalInitialise()>
c0010964:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010969:	83 e0 10             	and    eax,0x10
c001096c:	83 f8 01             	cmp    eax,0x1
c001096f:	19 c0                	sbb    eax,eax
c0010971:	83 e0 46             	and    eax,0x46
c0010974:	83 c0 1e             	add    eax,0x1e
c0010977:	89 04 24             	mov    DWORD PTR [esp],eax
c001097a:	e8 c2 d6 ff ff       	call   c000e041 <setupTimer(int)>
c001097f:	83 c4 10             	add    esp,0x10
c0010982:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010989:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001098f:	74 0c                	je     c001099d <CPU::open(int, int, void*)+0xff>
c0010991:	83 ec 0c             	sub    esp,0xc
c0010994:	53                   	push   ebx
c0010995:	e8 38 fe ff ff       	call   c00107d2 <CPU::setupFeatures()>
c001099a:	83 c4 10             	add    esp,0x10
c001099d:	83 c4 0c             	add    esp,0xc
c00109a0:	31 c0                	xor    eax,eax
c00109a2:	5b                   	pop    ebx
c00109a3:	5e                   	pop    esi
c00109a4:	5f                   	pop    edi
c00109a5:	5d                   	pop    ebp
c00109a6:	c3                   	ret    

c00109a7 <KeInitialiseAtexit()>:
c00109a7:	83 ec 10             	sub    esp,0x10
c00109aa:	6a 60                	push   0x60
c00109ac:	6a 00                	push   0x0
c00109ae:	68 20 8e 02 c0       	push   0xc0028e20
c00109b3:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c00109bd:	e8 2e fb fe ff       	call   c00004f0 <memset>
c00109c2:	83 c4 1c             	add    esp,0x1c
c00109c5:	c3                   	ret    

c00109c6 <KeRegisterAtexit(void (*)(void*), void*)>:
c00109c6:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c00109cb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00109cf:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c00109d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00109da:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c00109e1:	40                   	inc    eax
c00109e2:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c00109e7:	83 f8 17             	cmp    eax,0x17
c00109ea:	7e 0d                	jle    c00109f9 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c00109ec:	c7 44 24 04 10 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c10
c00109f4:	e9 b4 07 00 00       	jmp    c00111ad <KePanic(char const*)>
c00109f9:	c3                   	ret    

c00109fa <KeExecuteAtexit()>:
c00109fa:	53                   	push   ebx
c00109fb:	31 db                	xor    ebx,ebx
c00109fd:	83 ec 08             	sub    esp,0x8
c0010a00:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010a06:	7e 50                	jle    c0010a58 <KeExecuteAtexit()+0x5e>
c0010a08:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010a0f:	85 c0                	test   eax,eax
c0010a11:	74 42                	je     c0010a55 <KeExecuteAtexit()+0x5b>
c0010a13:	51                   	push   ecx
c0010a14:	50                   	push   eax
c0010a15:	53                   	push   ebx
c0010a16:	68 29 1c 02 c0       	push   0xc0021c29
c0010a1b:	e8 ea 9e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010a20:	58                   	pop    eax
c0010a21:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010a28:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010a2f:	c7 04 24 4b 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c4b
c0010a36:	e8 cf 9e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010a3b:	c7 04 24 ab 2d 02 c0 	mov    DWORD PTR [esp],0xc0022dab
c0010a42:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010a4d:	e8 b8 9e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010a52:	83 c4 10             	add    esp,0x10
c0010a55:	43                   	inc    ebx
c0010a56:	eb a8                	jmp    c0010a00 <KeExecuteAtexit()+0x6>
c0010a58:	83 c4 08             	add    esp,0x8
c0010a5b:	5b                   	pop    ebx
c0010a5c:	c3                   	ret    

c0010a5d <KeDisplaySplashScreen()>:
c0010a5d:	55                   	push   ebp
c0010a5e:	bd 05 00 00 00       	mov    ebp,0x5
c0010a63:	57                   	push   edi
c0010a64:	bf 0a 00 00 00       	mov    edi,0xa
c0010a69:	56                   	push   esi
c0010a6a:	31 f6                	xor    esi,esi
c0010a6c:	53                   	push   ebx
c0010a6d:	31 db                	xor    ebx,ebx
c0010a6f:	83 ec 0c             	sub    esp,0xc
c0010a72:	0f b6 96 00 30 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd000]
c0010a79:	85 d2                	test   edx,edx
c0010a7b:	89 d0                	mov    eax,edx
c0010a7d:	74 52                	je     c0010ad1 <KeDisplaySplashScreen()+0x74>
c0010a7f:	80 bb 36 30 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcfca],0xdb
c0010a86:	75 13                	jne    c0010a9b <KeDisplaySplashScreen()+0x3e>
c0010a88:	0f b6 8b 35 30 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcfcb]
c0010a8f:	83 e1 fe             	and    ecx,0xfffffffe
c0010a92:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010a98:	75 01                	jne    c0010a9b <KeDisplaySplashScreen()+0x3e>
c0010a9a:	47                   	inc    edi
c0010a9b:	83 fa 0d             	cmp    edx,0xd
c0010a9e:	74 28                	je     c0010ac8 <KeDisplaySplashScreen()+0x6b>
c0010aa0:	83 fa 0a             	cmp    edx,0xa
c0010aa3:	75 0a                	jne    c0010aaf <KeDisplaySplashScreen()+0x52>
c0010aa5:	45                   	inc    ebp
c0010aa6:	bf 0a 00 00 00       	mov    edi,0xa
c0010aab:	31 db                	xor    ebx,ebx
c0010aad:	eb 19                	jmp    c0010ac8 <KeDisplaySplashScreen()+0x6b>
c0010aaf:	83 ec 0c             	sub    esp,0xc
c0010ab2:	0f be c0             	movsx  eax,al
c0010ab5:	55                   	push   ebp
c0010ab6:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010ab9:	43                   	inc    ebx
c0010aba:	52                   	push   edx
c0010abb:	6a 00                	push   0x0
c0010abd:	6a 0e                	push   0xe
c0010abf:	50                   	push   eax
c0010ac0:	e8 27 7d 00 00       	call   c00187ec <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010ac5:	83 c4 20             	add    esp,0x20
c0010ac8:	46                   	inc    esi
c0010ac9:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010acf:	75 a1                	jne    c0010a72 <KeDisplaySplashScreen()+0x15>
c0010ad1:	83 c4 0c             	add    esp,0xc
c0010ad4:	5b                   	pop    ebx
c0010ad5:	5e                   	pop    esi
c0010ad6:	5f                   	pop    edi
c0010ad7:	5d                   	pop    ebp
c0010ad8:	c3                   	ret    

c0010ad9 <KeSetBootMessage(char const*)>:
c0010ad9:	57                   	push   edi
c0010ada:	56                   	push   esi
c0010adb:	53                   	push   ebx
c0010adc:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010ae2:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010ae9:	68 9e 00 00 00       	push   0x9e
c0010aee:	6a 00                	push   0x0
c0010af0:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010af4:	56                   	push   esi
c0010af5:	e8 f6 f9 fe ff       	call   c00004f0 <memset>
c0010afa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010afd:	e8 7e fa fe ff       	call   c0000580 <strlen>
c0010b02:	ba 50 00 00 00       	mov    edx,0x50
c0010b07:	83 c4 10             	add    esp,0x10
c0010b0a:	31 c9                	xor    ecx,ecx
c0010b0c:	29 c2                	sub    edx,eax
c0010b0e:	83 e2 fe             	and    edx,0xfffffffe
c0010b11:	01 f2                	add    edx,esi
c0010b13:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010b18:	84 c0                	test   al,al
c0010b1a:	74 0a                	je     c0010b26 <KeSetBootMessage(char const*)+0x4d>
c0010b1c:	80 cc 0f             	or     ah,0xf
c0010b1f:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010b23:	41                   	inc    ecx
c0010b24:	eb ed                	jmp    c0010b13 <KeSetBootMessage(char const*)+0x3a>
c0010b26:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010b2b:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010b30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b32:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010b38:	5b                   	pop    ebx
c0010b39:	5e                   	pop    esi
c0010b3a:	5f                   	pop    edi
c0010b3b:	c3                   	ret    

c0010b3c <Krnl::handlePowerButton()>:
c0010b3c:	83 ec 0c             	sub    esp,0xc
c0010b3f:	e8 c4 06 00 00       	call   c0011208 <KeHandlePowerButton()>
c0010b44:	90                   	nop
c0010b45:	83 c4 0c             	add    esp,0xc
c0010b48:	c3                   	ret    
c0010b49:	8d 76 00             	lea    esi,[esi+0x0]

c0010b4c <Krnl::handleSleepButton()>:
c0010b4c:	83 ec 0c             	sub    esp,0xc
c0010b4f:	e8 e9 06 00 00       	call   c001123d <KeHandleSleepButton()>
c0010b54:	90                   	nop
c0010b55:	83 c4 0c             	add    esp,0xc
c0010b58:	c3                   	ret    
c0010b59:	90                   	nop

c0010b5a <EnvVarContainer::getEnv(char const*)>:
c0010b5a:	57                   	push   edi
c0010b5b:	56                   	push   esi
c0010b5c:	53                   	push   ebx
c0010b5d:	31 db                	xor    ebx,ebx
c0010b5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b63:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010b65:	7e 2b                	jle    c0010b92 <EnvVarContainer::getEnv(char const*)+0x38>
c0010b67:	50                   	push   eax
c0010b68:	50                   	push   eax
c0010b69:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010b6c:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010b73:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010b76:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010b7a:	e8 01 fc fe ff       	call   c0000780 <strcmp>
c0010b7f:	83 c4 10             	add    esp,0x10
c0010b82:	85 c0                	test   eax,eax
c0010b84:	75 09                	jne    c0010b8f <EnvVarContainer::getEnv(char const*)+0x35>
c0010b86:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010b89:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010b8d:	eb 05                	jmp    c0010b94 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010b8f:	43                   	inc    ebx
c0010b90:	eb d1                	jmp    c0010b63 <EnvVarContainer::getEnv(char const*)+0x9>
c0010b92:	31 c0                	xor    eax,eax
c0010b94:	5b                   	pop    ebx
c0010b95:	5e                   	pop    esi
c0010b96:	5f                   	pop    edi
c0010b97:	c3                   	ret    

c0010b98 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010b98:	55                   	push   ebp
c0010b99:	57                   	push   edi
c0010b9a:	56                   	push   esi
c0010b9b:	53                   	push   ebx
c0010b9c:	83 ec 28             	sub    esp,0x28
c0010b9f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010ba3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010ba7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010bab:	56                   	push   esi
c0010bac:	e8 cf f9 fe ff       	call   c0000580 <strlen>
c0010bb1:	40                   	inc    eax
c0010bb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bb5:	e8 19 6f ff ff       	call   c0007ad3 <malloc>
c0010bba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bbd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010bc1:	e8 ba f9 fe ff       	call   c0000580 <strlen>
c0010bc6:	40                   	inc    eax
c0010bc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bca:	e8 04 6f ff ff       	call   c0007ad3 <malloc>
c0010bcf:	89 34 24             	mov    DWORD PTR [esp],esi
c0010bd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010bd6:	e8 a5 f9 fe ff       	call   c0000580 <strlen>
c0010bdb:	83 c4 0c             	add    esp,0xc
c0010bde:	40                   	inc    eax
c0010bdf:	50                   	push   eax
c0010be0:	6a 00                	push   0x0
c0010be2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010be6:	e8 05 f9 fe ff       	call   c00004f0 <memset>
c0010beb:	89 34 24             	mov    DWORD PTR [esp],esi
c0010bee:	e8 8d f9 fe ff       	call   c0000580 <strlen>
c0010bf3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010bf7:	8d 48 01             	lea    ecx,[eax+0x1]
c0010bfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bff:	89 de                	mov    esi,ebx
c0010c01:	e8 7a f9 fe ff       	call   c0000580 <strlen>
c0010c06:	83 c4 0c             	add    esp,0xc
c0010c09:	40                   	inc    eax
c0010c0a:	50                   	push   eax
c0010c0b:	6a 00                	push   0x0
c0010c0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c11:	e8 da f8 fe ff       	call   c00004f0 <memset>
c0010c16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c19:	e8 62 f9 fe ff       	call   c0000580 <strlen>
c0010c1e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010c22:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010c2a:	40                   	inc    eax
c0010c2b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010c2e:	c1 e0 03             	shl    eax,0x3
c0010c31:	5a                   	pop    edx
c0010c32:	59                   	pop    ecx
c0010c33:	50                   	push   eax
c0010c34:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010c37:	e8 83 6e ff ff       	call   c0007abf <realloc>
c0010c3c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010c3f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010c43:	b9 08 00 00 00       	mov    ecx,0x8
c0010c48:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010c4b:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010c4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c51:	83 c4 2c             	add    esp,0x2c
c0010c54:	5b                   	pop    ebx
c0010c55:	5e                   	pop    esi
c0010c56:	5f                   	pop    edi
c0010c57:	5d                   	pop    ebp
c0010c58:	c3                   	ret    
c0010c59:	90                   	nop

c0010c5a <EnvVarContainer::deleteEnv(char const*)>:
c0010c5a:	c3                   	ret    
c0010c5b:	90                   	nop

c0010c5c <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010c5c:	55                   	push   ebp
c0010c5d:	57                   	push   edi
c0010c5e:	56                   	push   esi
c0010c5f:	53                   	push   ebx
c0010c60:	81 ec 38 01 00 00    	sub    esp,0x138
c0010c66:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010c6d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010c74:	68 14 01 00 00       	push   0x114
c0010c79:	e8 55 6e ff ff       	call   c0007ad3 <malloc>
c0010c7e:	83 c4 0c             	add    esp,0xc
c0010c81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010c84:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010c8b:	89 c3                	mov    ebx,eax
c0010c8d:	50                   	push   eax
c0010c8e:	e8 6d aa ff ff       	call   c000b700 <File::File(char const*, Process*)>
c0010c93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c96:	e8 e5 ad ff ff       	call   c000ba80 <File::exists()>
c0010c9b:	83 c4 10             	add    esp,0x10
c0010c9e:	84 c0                	test   al,al
c0010ca0:	75 31                	jne    c0010cd3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010ca2:	50                   	push   eax
c0010ca3:	50                   	push   eax
c0010ca4:	6a 12                	push   0x12
c0010ca6:	53                   	push   ebx
c0010ca7:	e8 10 ab ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c0010cac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cae:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010cb1:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cb4:	e8 c7 f8 fe ff       	call   c0000580 <strlen>
c0010cb9:	5a                   	pop    edx
c0010cba:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010cbe:	52                   	push   edx
c0010cbf:	31 d2                	xor    edx,edx
c0010cc1:	56                   	push   esi
c0010cc2:	52                   	push   edx
c0010cc3:	50                   	push   eax
c0010cc4:	53                   	push   ebx
c0010cc5:	ff d7                	call   edi
c0010cc7:	83 c4 14             	add    esp,0x14
c0010cca:	53                   	push   ebx
c0010ccb:	e8 4a ab ff ff       	call   c000b81a <File::close()>
c0010cd0:	83 c4 10             	add    esp,0x10
c0010cd3:	56                   	push   esi
c0010cd4:	31 f6                	xor    esi,esi
c0010cd6:	68 00 01 00 00       	push   0x100
c0010cdb:	6a 00                	push   0x0
c0010cdd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010ce1:	50                   	push   eax
c0010ce2:	e8 09 f8 fe ff       	call   c00004f0 <memset>
c0010ce7:	5f                   	pop    edi
c0010ce8:	58                   	pop    eax
c0010ce9:	6a 01                	push   0x1
c0010ceb:	53                   	push   ebx
c0010cec:	e8 cb aa ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c0010cf1:	83 c4 10             	add    esp,0x10
c0010cf4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010cfc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010d04:	83 ec 0c             	sub    esp,0xc
c0010d07:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010d0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d0d:	52                   	push   edx
c0010d0e:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010d12:	51                   	push   ecx
c0010d13:	6a 00                	push   0x0
c0010d15:	6a 01                	push   0x1
c0010d17:	53                   	push   ebx
c0010d18:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010d1b:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010d20:	83 c4 20             	add    esp,0x20
c0010d23:	85 c0                	test   eax,eax
c0010d25:	89 c1                	mov    ecx,eax
c0010d27:	0f 84 36 01 00 00    	je     c0010e63 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010d2d:	83 f8 0d             	cmp    eax,0xd
c0010d30:	0f 84 22 01 00 00    	je     c0010e58 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010d36:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010d3b:	0f 84 f0 00 00 00    	je     c0010e31 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010d41:	83 f8 0a             	cmp    eax,0xa
c0010d44:	74 13                	je     c0010d59 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010d46:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010d4b:	74 0c                	je     c0010d59 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010d4d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010d53:	0f 8e f6 00 00 00    	jle    c0010e4f <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010d59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d5d:	83 ec 0c             	sub    esp,0xc
c0010d60:	8d 78 01             	lea    edi,[eax+0x1]
c0010d63:	57                   	push   edi
c0010d64:	e8 6a 6d ff ff       	call   c0007ad3 <malloc>
c0010d69:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010d6d:	8d 56 04             	lea    edx,[esi+0x4]
c0010d70:	89 14 24             	mov    DWORD PTR [esp],edx
c0010d73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010d77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010d7b:	e8 53 6d ff ff       	call   c0007ad3 <malloc>
c0010d80:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010d84:	83 c4 0c             	add    esp,0xc
c0010d87:	57                   	push   edi
c0010d88:	6a 00                	push   0x0
c0010d8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010d8e:	e8 5d f7 fe ff       	call   c00004f0 <memset>
c0010d93:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010d97:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010d9b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010d9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010da1:	83 c4 0c             	add    esp,0xc
c0010da4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010da8:	52                   	push   edx
c0010da9:	6a 00                	push   0x0
c0010dab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010daf:	e8 3c f7 fe ff       	call   c00004f0 <memset>
c0010db4:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010db8:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010dbc:	89 34 24             	mov    DWORD PTR [esp],esi
c0010dbf:	e8 bc f7 fe ff       	call   c0000580 <strlen>
c0010dc4:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010dc8:	89 c1                	mov    ecx,eax
c0010dca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dcc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010dcf:	83 c4 10             	add    esp,0x10
c0010dd2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010dd5:	40                   	inc    eax
c0010dd6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010dd9:	85 d2                	test   edx,edx
c0010ddb:	75 0c                	jne    c0010de9 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010ddd:	83 ec 0c             	sub    esp,0xc
c0010de0:	6a 08                	push   0x8
c0010de2:	e8 ec 6c ff ff       	call   c0007ad3 <malloc>
c0010de7:	eb 0c                	jmp    c0010df5 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010de9:	51                   	push   ecx
c0010dea:	51                   	push   ecx
c0010deb:	c1 e0 03             	shl    eax,0x3
c0010dee:	50                   	push   eax
c0010def:	52                   	push   edx
c0010df0:	e8 ca 6c ff ff       	call   c0007abf <realloc>
c0010df5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010df8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010dfb:	83 c4 10             	add    esp,0x10
c0010dfe:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010e01:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010e05:	b9 08 00 00 00       	mov    ecx,0x8
c0010e0a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010e0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e10:	50                   	push   eax
c0010e11:	31 f6                	xor    esi,esi
c0010e13:	68 00 01 00 00       	push   0x100
c0010e18:	6a 00                	push   0x0
c0010e1a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010e1e:	50                   	push   eax
c0010e1f:	e8 cc f6 fe ff       	call   c00004f0 <memset>
c0010e24:	83 c4 10             	add    esp,0x10
c0010e27:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e2f:	eb 27                	jmp    c0010e58 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e31:	83 f8 3d             	cmp    eax,0x3d
c0010e34:	74 1e                	je     c0010e54 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010e36:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e3c:	7f 07                	jg     c0010e45 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010e3e:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010e42:	46                   	inc    esi
c0010e43:	eb 13                	jmp    c0010e58 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e45:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010e4d:	eb 09                	jmp    c0010e58 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e4f:	83 f8 3d             	cmp    eax,0x3d
c0010e52:	75 ea                	jne    c0010e3e <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010e54:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010e58:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e5d:	0f 85 99 fe ff ff    	jne    c0010cfc <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010e63:	83 ec 0c             	sub    esp,0xc
c0010e66:	53                   	push   ebx
c0010e67:	e8 ae a9 ff ff       	call   c000b81a <File::close()>
c0010e6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e74:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010e7a:	5b                   	pop    ebx
c0010e7b:	5e                   	pop    esi
c0010e7c:	5f                   	pop    edi
c0010e7d:	5d                   	pop    ebp
c0010e7e:	c3                   	ret    
c0010e7f:	90                   	nop

c0010e80 <EnvVarContainer::__loadSystem()>:
c0010e80:	83 ec 10             	sub    esp,0x10
c0010e83:	68 60 31 02 c0       	push   0xc0023160
c0010e88:	68 50 1c 02 c0       	push   0xc0021c50
c0010e8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e91:	e8 c6 fd ff ff       	call   c0010c5c <EnvVarContainer::loadFrom(char const*, char const*)>
c0010e96:	83 c4 1c             	add    esp,0x1c
c0010e99:	c3                   	ret    

c0010e9a <EnvVarContainer::__loadUser()>:
c0010e9a:	c3                   	ret    
c0010e9b:	90                   	nop

c0010e9c <EnvVarContainer::EnvVarContainer(Process*)>:
c0010e9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ea0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010eaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010eae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010eb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010eb5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ebc:	90                   	nop
c0010ebd:	c3                   	ret    

c0010ebe <EnvVarContainer::~EnvVarContainer()>:
c0010ebe:	83 ec 0c             	sub    esp,0xc
c0010ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ec5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ec8:	85 c0                	test   eax,eax
c0010eca:	74 1d                	je     c0010ee9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ed0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ed2:	85 c0                	test   eax,eax
c0010ed4:	74 13                	je     c0010ee9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010edd:	83 ec 0c             	sub    esp,0xc
c0010ee0:	50                   	push   eax
c0010ee1:	e8 fd 6b ff ff       	call   c0007ae3 <free>
c0010ee6:	83 c4 10             	add    esp,0x10
c0010ee9:	90                   	nop
c0010eea:	83 c4 0c             	add    esp,0xc
c0010eed:	c3                   	ret    

c0010eee <KeGetEnv(Process*, char const*)>:
c0010eee:	53                   	push   ebx
c0010eef:	83 ec 08             	sub    esp,0x8
c0010ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ef6:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0010efc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010f00:	74 04                	je     c0010f06 <KeGetEnv(Process*, char const*)+0x18>
c0010f02:	85 c0                	test   eax,eax
c0010f04:	75 0b                	jne    c0010f11 <KeGetEnv(Process*, char const*)+0x23>
c0010f06:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0010f0b:	85 c0                	test   eax,eax
c0010f0d:	75 19                	jne    c0010f28 <KeGetEnv(Process*, char const*)+0x3a>
c0010f0f:	eb 27                	jmp    c0010f38 <KeGetEnv(Process*, char const*)+0x4a>
c0010f11:	52                   	push   edx
c0010f12:	52                   	push   edx
c0010f13:	53                   	push   ebx
c0010f14:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010f1a:	e8 3b fc ff ff       	call   c0010b5a <EnvVarContainer::getEnv(char const*)>
c0010f1f:	83 c4 10             	add    esp,0x10
c0010f22:	85 c0                	test   eax,eax
c0010f24:	75 28                	jne    c0010f4e <KeGetEnv(Process*, char const*)+0x60>
c0010f26:	eb de                	jmp    c0010f06 <KeGetEnv(Process*, char const*)+0x18>
c0010f28:	52                   	push   edx
c0010f29:	52                   	push   edx
c0010f2a:	53                   	push   ebx
c0010f2b:	50                   	push   eax
c0010f2c:	e8 29 fc ff ff       	call   c0010b5a <EnvVarContainer::getEnv(char const*)>
c0010f31:	83 c4 10             	add    esp,0x10
c0010f34:	85 c0                	test   eax,eax
c0010f36:	75 16                	jne    c0010f4e <KeGetEnv(Process*, char const*)+0x60>
c0010f38:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010f3c:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0010f41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010f45:	83 c4 08             	add    esp,0x8
c0010f48:	5b                   	pop    ebx
c0010f49:	e9 0c fc ff ff       	jmp    c0010b5a <EnvVarContainer::getEnv(char const*)>
c0010f4e:	83 c4 08             	add    esp,0x8
c0010f51:	5b                   	pop    ebx
c0010f52:	c3                   	ret    

c0010f53 <KeSetEnvSystem(char const*, char const*)>:
c0010f53:	83 ec 10             	sub    esp,0x10
c0010f56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f5e:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0010f64:	e8 2f fc ff ff       	call   c0010b98 <EnvVarContainer::setEnv(char const*, char const*)>
c0010f69:	83 c4 1c             	add    esp,0x1c
c0010f6c:	c3                   	ret    

c0010f6d <KeSetEnvUser(char const*, char const*)>:
c0010f6d:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0010f72:	85 c0                	test   eax,eax
c0010f74:	74 15                	je     c0010f8b <KeSetEnvUser(char const*, char const*)+0x1e>
c0010f76:	83 ec 10             	sub    esp,0x10
c0010f79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f81:	50                   	push   eax
c0010f82:	e8 11 fc ff ff       	call   c0010b98 <EnvVarContainer::setEnv(char const*, char const*)>
c0010f87:	83 c4 1c             	add    esp,0x1c
c0010f8a:	c3                   	ret    
c0010f8b:	c3                   	ret    

c0010f8c <KeSetEnvProcess(Process*, char const*, char const*)>:
c0010f8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f90:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010f96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010f9a:	e9 f9 fb ff ff       	jmp    c0010b98 <EnvVarContainer::setEnv(char const*, char const*)>

c0010f9f <KeDeleteEnvSystem(char const*)>:
c0010f9f:	c3                   	ret    

c0010fa0 <KeDeleteEnvUser(char const*)>:
c0010fa0:	c3                   	ret    

c0010fa1 <KeDeleteEnvProcess(Process*, char const*)>:
c0010fa1:	c3                   	ret    

c0010fa2 <KeNewProcessEnv(Process*)>:
c0010fa2:	83 ec 28             	sub    esp,0x28
c0010fa5:	6a 0c                	push   0xc
c0010fa7:	e8 27 6b ff ff       	call   c0007ad3 <malloc>
c0010fac:	5a                   	pop    edx
c0010fad:	59                   	pop    ecx
c0010fae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010fb2:	50                   	push   eax
c0010fb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fb7:	e8 e0 fe ff ff       	call   c0010e9c <EnvVarContainer::EnvVarContainer(Process*)>
c0010fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fc0:	83 c4 2c             	add    esp,0x2c
c0010fc3:	c3                   	ret    

c0010fc4 <KeCopyProcessEnv(Process*, Process*)>:
c0010fc4:	57                   	push   edi
c0010fc5:	56                   	push   esi
c0010fc6:	53                   	push   ebx
c0010fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fcb:	83 ec 0c             	sub    esp,0xc
c0010fce:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010fd4:	6a 0c                	push   0xc
c0010fd6:	e8 f8 6a ff ff       	call   c0007ad3 <malloc>
c0010fdb:	89 c3                	mov    ebx,eax
c0010fdd:	58                   	pop    eax
c0010fde:	5a                   	pop    edx
c0010fdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fe3:	53                   	push   ebx
c0010fe4:	e8 b3 fe ff ff       	call   c0010e9c <EnvVarContainer::EnvVarContainer(Process*)>
c0010fe9:	8b 07                	mov    eax,DWORD PTR [edi]
c0010feb:	89 03                	mov    DWORD PTR [ebx],eax
c0010fed:	c1 e0 03             	shl    eax,0x3
c0010ff0:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ff3:	e8 db 6a ff ff       	call   c0007ad3 <malloc>
c0010ff8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010ffb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010ffd:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011000:	89 c7                	mov    edi,eax
c0011002:	c1 e1 03             	shl    ecx,0x3
c0011005:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011007:	83 c4 10             	add    esp,0x10
c001100a:	89 d8                	mov    eax,ebx
c001100c:	5b                   	pop    ebx
c001100d:	5e                   	pop    esi
c001100e:	5f                   	pop    edi
c001100f:	c3                   	ret    

c0011010 <KeLoadSystemEnv()>:
c0011010:	53                   	push   ebx
c0011011:	83 ec 14             	sub    esp,0x14
c0011014:	6a 0c                	push   0xc
c0011016:	e8 b8 6a ff ff       	call   c0007ad3 <malloc>
c001101b:	89 c3                	mov    ebx,eax
c001101d:	58                   	pop    eax
c001101e:	5a                   	pop    edx
c001101f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011025:	53                   	push   ebx
c0011026:	e8 71 fe ff ff       	call   c0010e9c <EnvVarContainer::EnvVarContainer(Process*)>
c001102b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001102e:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011034:	e8 47 fe ff ff       	call   c0010e80 <EnvVarContainer::__loadSystem()>
c0011039:	83 c4 18             	add    esp,0x18
c001103c:	5b                   	pop    ebx
c001103d:	c3                   	ret    

c001103e <KeLoadUserEnv()>:
c001103e:	53                   	push   ebx
c001103f:	83 ec 14             	sub    esp,0x14
c0011042:	6a 0c                	push   0xc
c0011044:	e8 8a 6a ff ff       	call   c0007ad3 <malloc>
c0011049:	89 c3                	mov    ebx,eax
c001104b:	58                   	pop    eax
c001104c:	5a                   	pop    edx
c001104d:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011053:	53                   	push   ebx
c0011054:	e8 43 fe ff ff       	call   c0010e9c <EnvVarContainer::EnvVarContainer(Process*)>
c0011059:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c001105f:	83 c4 18             	add    esp,0x18
c0011062:	5b                   	pop    ebx
c0011063:	c3                   	ret    

c0011064 <KeFlushEnv()>:
c0011064:	c3                   	ret    

c0011065 <KeGetProcessTotalEnvCount(Process*)>:
c0011065:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011069:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c001106f:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011075:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001107a:	8b 00                	mov    eax,DWORD PTR [eax]
c001107c:	03 01                	add    eax,DWORD PTR [ecx]
c001107e:	85 d2                	test   edx,edx
c0011080:	74 02                	je     c0011084 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011082:	03 02                	add    eax,DWORD PTR [edx]
c0011084:	c3                   	ret    

c0011085 <KeGetProcessEnvPair(Process*, int)>:
c0011085:	57                   	push   edi
c0011086:	56                   	push   esi
c0011087:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c001108d:	53                   	push   ebx
c001108e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011092:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011096:	85 f6                	test   esi,esi
c0011098:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001109c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00110a2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00110a4:	75 16                	jne    c00110bc <KeGetProcessEnvPair(Process*, int)+0x37>
c00110a6:	39 c2                	cmp    edx,eax
c00110a8:	7c 16                	jl     c00110c0 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00110aa:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c00110b0:	8b 31                	mov    esi,DWORD PTR [ecx]
c00110b2:	01 c6                	add    esi,eax
c00110b4:	39 d6                	cmp    esi,edx
c00110b6:	7e 3c                	jle    c00110f4 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00110b8:	29 c2                	sub    edx,eax
c00110ba:	eb 04                	jmp    c00110c0 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00110bc:	39 c2                	cmp    edx,eax
c00110be:	7d 05                	jge    c00110c5 <KeGetProcessEnvPair(Process*, int)+0x40>
c00110c0:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00110c3:	eb 20                	jmp    c00110e5 <KeGetProcessEnvPair(Process*, int)+0x60>
c00110c5:	8b 3e                	mov    edi,DWORD PTR [esi]
c00110c7:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00110ca:	39 d1                	cmp    ecx,edx
c00110cc:	7e 04                	jle    c00110d2 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00110ce:	29 c2                	sub    edx,eax
c00110d0:	eb 10                	jmp    c00110e2 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00110d2:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c00110d8:	03 0e                	add    ecx,DWORD PTR [esi]
c00110da:	39 d1                	cmp    ecx,edx
c00110dc:	7e 16                	jle    c00110f4 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00110de:	29 c2                	sub    edx,eax
c00110e0:	29 fa                	sub    edx,edi
c00110e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00110e5:	8d 14 d0             	lea    edx,[eax+edx*8]
c00110e8:	8b 02                	mov    eax,DWORD PTR [edx]
c00110ea:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00110ed:	89 03                	mov    DWORD PTR [ebx],eax
c00110ef:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00110f2:	eb 1d                	jmp    c0011111 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00110f4:	83 ec 0c             	sub    esp,0xc
c00110f7:	68 72 1c 02 c0       	push   0xc0021c72
c00110fc:	e8 ac 00 00 00       	call   c00111ad <KePanic(char const*)>
c0011101:	83 c4 10             	add    esp,0x10
c0011104:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001110a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011111:	89 d8                	mov    eax,ebx
c0011113:	5b                   	pop    ebx
c0011114:	5e                   	pop    esi
c0011115:	5f                   	pop    edi
c0011116:	c2 04 00             	ret    0x4

c0011119 <CPU::current()>:
c0011119:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001111e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011124:	c3                   	ret    

c0011125 <operator new(unsigned long)>:
c0011125:	e9 a9 69 ff ff       	jmp    c0007ad3 <malloc>

c001112a <operator delete(void*)>:
c001112a:	e9 c4 69 ff ff       	jmp    c0007af3 <rfree>

c001112f <disableIRQs()>:
c001112f:	fa                   	cli    
c0011130:	c3                   	ret    

c0011131 <enableIRQs()>:
c0011131:	fb                   	sti    
c0011132:	c3                   	ret    

c0011133 <lockScheduler()>:
c0011133:	fa                   	cli    
c0011134:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001113a:	c3                   	ret    

c001113b <unlockScheduler()>:
c001113b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011140:	48                   	dec    eax
c0011141:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011146:	75 01                	jne    c0011149 <unlockScheduler()+0xe>
c0011148:	fb                   	sti    
c0011149:	c3                   	ret    

c001114a <lockStuff()>:
c001114a:	fa                   	cli    
c001114b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011151:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c0011157:	c3                   	ret    

c0011158 <unlockStuff()>:
c0011158:	83 ec 0c             	sub    esp,0xc
c001115b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0011160:	48                   	dec    eax
c0011161:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0011166:	75 18                	jne    c0011180 <unlockStuff()+0x28>
c0011168:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001116f:	74 0f                	je     c0011180 <unlockStuff()+0x28>
c0011171:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001117b:	e8 30 49 00 00       	call   c0015ab0 <schedule()>
c0011180:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011185:	48                   	dec    eax
c0011186:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001118b:	75 01                	jne    c001118e <unlockStuff()+0x36>
c001118d:	fb                   	sti    
c001118e:	83 c4 0c             	add    esp,0xc
c0011191:	c3                   	ret    

c0011192 <Virt::getAKernelVAS()>:
c0011192:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0011197:	c3                   	ret    

c0011198 <__not_memcpy>:
c0011198:	57                   	push   edi
c0011199:	56                   	push   esi
c001119a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001119e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00111a6:	89 c7                	mov    edi,eax
c00111a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111aa:	5e                   	pop    esi
c00111ab:	5f                   	pop    edi
c00111ac:	c3                   	ret    

c00111ad <KePanic(char const*)>:
c00111ad:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c00111b4:	e9 87 68 00 00       	jmp    c0017a40 <HalPanic(char const*)>

c00111b9 <KePowerThread(void*)>:
c00111b9:	83 ec 0c             	sub    esp,0xc
c00111bc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00111c1:	48                   	dec    eax
c00111c2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00111c7:	75 01                	jne    c00111ca <KePowerThread(void*)+0x11>
c00111c9:	fb                   	sti    
c00111ca:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00111d1:	83 ec 0c             	sub    esp,0xc
c00111d4:	6a 0a                	push   0xa
c00111d6:	e8 05 4c 00 00       	call   c0015de0 <sleep(unsigned int)>
c00111db:	83 c4 10             	add    esp,0x10
c00111de:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c00111e5:	eb e3                	jmp    c00111ca <KePowerThread(void*)+0x11>

c00111e7 <KeChangePowerSettings(PowerSettings)>:
c00111e7:	57                   	push   edi
c00111e8:	b9 09 00 00 00       	mov    ecx,0x9
c00111ed:	56                   	push   esi
c00111ee:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c00111f3:	fc                   	cld    
c00111f4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00111f8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00111fa:	5e                   	pop    esi
c00111fb:	5f                   	pop    edi
c00111fc:	c3                   	ret    

c00111fd <KeUserIOReceived()>:
c00111fd:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c0011207:	c3                   	ret    

c0011208 <KeHandlePowerButton()>:
c0011208:	83 ec 0c             	sub    esp,0xc
c001120b:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0011210:	83 f8 02             	cmp    eax,0x2
c0011213:	75 10                	jne    c0011225 <KeHandlePowerButton()+0x1d>
c0011215:	83 ec 0c             	sub    esp,0xc
c0011218:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001121e:	e8 27 5f ff ff       	call   c000714a <Computer::shutdown()>
c0011223:	eb 11                	jmp    c0011236 <KeHandlePowerButton()+0x2e>
c0011225:	48                   	dec    eax
c0011226:	75 11                	jne    c0011239 <KeHandlePowerButton()+0x31>
c0011228:	83 ec 0c             	sub    esp,0xc
c001122b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011231:	e8 44 5f ff ff       	call   c000717a <Computer::sleep()>
c0011236:	83 c4 10             	add    esp,0x10
c0011239:	83 c4 0c             	add    esp,0xc
c001123c:	c3                   	ret    

c001123d <KeHandleSleepButton()>:
c001123d:	83 ec 0c             	sub    esp,0xc
c0011240:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011245:	83 f8 02             	cmp    eax,0x2
c0011248:	75 10                	jne    c001125a <KeHandleSleepButton()+0x1d>
c001124a:	83 ec 0c             	sub    esp,0xc
c001124d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011253:	e8 f2 5e ff ff       	call   c000714a <Computer::shutdown()>
c0011258:	eb 11                	jmp    c001126b <KeHandleSleepButton()+0x2e>
c001125a:	48                   	dec    eax
c001125b:	75 11                	jne    c001126e <KeHandleSleepButton()+0x31>
c001125d:	83 ec 0c             	sub    esp,0xc
c0011260:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011266:	e8 0f 5f ff ff       	call   c000717a <Computer::sleep()>
c001126b:	83 c4 10             	add    esp,0x10
c001126e:	83 c4 0c             	add    esp,0xc
c0011271:	c3                   	ret    

c0011272 <KeSetupPowerManager()>:
c0011272:	83 ec 0c             	sub    esp,0xc
c0011275:	68 f0 00 00 00       	push   0xf0
c001127a:	6a 00                	push   0x0
c001127c:	68 b9 11 01 c0       	push   0xc00111b9
c0011281:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011287:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c0011291:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011298:	e8 c7 45 00 00       	call   c0015864 <Process::createThread(void (*)(void*), void*, int)>
c001129d:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c00112a7:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c00112b1:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c00112bb:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c00112c5:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c00112cf:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c00112d9:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c00112e3:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c00112ed:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c00112f7:	83 c4 1c             	add    esp,0x1c
c00112fa:	c3                   	ret    

c00112fb <KeRand()>:
c00112fb:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c0011305:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c001130f:	53                   	push   ebx
c0011310:	01 c1                	add    ecx,eax
c0011312:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011317:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c001131d:	01 ca                	add    edx,ecx
c001131f:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011324:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011329:	83 d2 00             	adc    edx,0x0
c001132c:	0f b7 da             	movzx  ebx,dx
c001132f:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c0011335:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0011339:	5b                   	pop    ebx
c001133a:	c3                   	ret    

c001133b <KeSeedRand(unsigned int)>:
c001133b:	53                   	push   ebx
c001133c:	83 ec 08             	sub    esp,0x8
c001133f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011343:	e8 17 6a 00 00       	call   c0017d5f <HalGetRand()>
c0011348:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c0011352:	31 d8                	xor    eax,ebx
c0011354:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011359:	e8 9d ff ff ff       	call   c00112fb <KeRand()>
c001135e:	83 c4 08             	add    esp,0x8
c0011361:	5b                   	pop    ebx
c0011362:	eb 97                	jmp    c00112fb <KeRand()>

c0011364 <KeInitRand()>:
c0011364:	83 ec 0c             	sub    esp,0xc
c0011367:	e8 e8 67 00 00       	call   c0017b54 <HalQueryPerformanceCounter()>
c001136c:	0f 20 da             	mov    edx,cr3
c001136f:	0f 22 da             	mov    cr3,edx
c0011372:	0f 20 da             	mov    edx,cr3
c0011375:	0f 22 da             	mov    cr3,edx
c0011378:	0f 20 da             	mov    edx,cr3
c001137b:	0f 22 da             	mov    cr3,edx
c001137e:	0f 20 da             	mov    edx,cr3
c0011381:	0f 22 da             	mov    cr3,edx
c0011384:	83 ec 0c             	sub    esp,0xc
c0011387:	35 03 8a 95 38       	xor    eax,0x38958a03
c001138c:	50                   	push   eax
c001138d:	e8 a9 ff ff ff       	call   c001133b <KeSeedRand(unsigned int)>
c0011392:	83 c4 1c             	add    esp,0x1c
c0011395:	c3                   	ret    
c0011396:	66 90                	xchg   ax,ax

c0011398 <KeResolveCompatibilitySymbol(char*)>:
c0011398:	83 ec 0c             	sub    esp,0xc
c001139b:	83 ec 08             	sub    esp,0x8
c001139e:	68 8c 1c 02 c0       	push   0xc0021c8c
c00113a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a7:	e8 d4 f3 fe ff       	call   c0000780 <strcmp>
c00113ac:	83 c4 10             	add    esp,0x10
c00113af:	85 c0                	test   eax,eax
c00113b1:	0f 94 c0             	sete   al
c00113b4:	0f b6 c0             	movzx  eax,al
c00113b7:	85 c0                	test   eax,eax
c00113b9:	74 0d                	je     c00113c8 <KeResolveCompatibilitySymbol(char*)+0x30>
c00113bb:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c00113c0:	e9 8b 01 00 00       	jmp    c0011550 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00113c5:	8d 76 00             	lea    esi,[esi+0x0]
c00113c8:	83 ec 08             	sub    esp,0x8
c00113cb:	68 95 1c 02 c0       	push   0xc0021c95
c00113d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113d4:	e8 a7 f3 fe ff       	call   c0000780 <strcmp>
c00113d9:	83 c4 10             	add    esp,0x10
c00113dc:	85 c0                	test   eax,eax
c00113de:	0f 94 c0             	sete   al
c00113e1:	0f b6 c0             	movzx  eax,al
c00113e4:	85 c0                	test   eax,eax
c00113e6:	74 0c                	je     c00113f4 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00113e8:	b8 70 f1 01 c0       	mov    eax,0xc001f170
c00113ed:	e9 5e 01 00 00       	jmp    c0011550 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00113f2:	66 90                	xchg   ax,ax
c00113f4:	83 ec 08             	sub    esp,0x8
c00113f7:	68 9f 1c 02 c0       	push   0xc0021c9f
c00113fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011400:	e8 7b f3 fe ff       	call   c0000780 <strcmp>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	85 c0                	test   eax,eax
c001140a:	0f 94 c0             	sete   al
c001140d:	0f b6 c0             	movzx  eax,al
c0011410:	85 c0                	test   eax,eax
c0011412:	74 0c                	je     c0011420 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011414:	b8 a4 ee 01 c0       	mov    eax,0xc001eea4
c0011419:	e9 32 01 00 00       	jmp    c0011550 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001141e:	66 90                	xchg   ax,ax
c0011420:	83 ec 08             	sub    esp,0x8
c0011423:	68 a8 1c 02 c0       	push   0xc0021ca8
c0011428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001142c:	e8 4f f3 fe ff       	call   c0000780 <strcmp>
c0011431:	83 c4 10             	add    esp,0x10
c0011434:	85 c0                	test   eax,eax
c0011436:	0f 94 c0             	sete   al
c0011439:	0f b6 c0             	movzx  eax,al
c001143c:	85 c0                	test   eax,eax
c001143e:	74 0c                	je     c001144c <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011440:	b8 ad 11 01 c0       	mov    eax,0xc00111ad
c0011445:	e9 06 01 00 00       	jmp    c0011550 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001144a:	66 90                	xchg   ax,ax
c001144c:	83 ec 08             	sub    esp,0x8
c001144f:	68 bb 1c 02 c0       	push   0xc0021cbb
c0011454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011458:	e8 23 f3 fe ff       	call   c0000780 <strcmp>
c001145d:	83 c4 10             	add    esp,0x10
c0011460:	85 c0                	test   eax,eax
c0011462:	0f 94 c0             	sete   al
c0011465:	0f b6 c0             	movzx  eax,al
c0011468:	85 c0                	test   eax,eax
c001146a:	74 0c                	je     c0011478 <KeResolveCompatibilitySymbol(char*)+0xe0>
c001146c:	b8 d9 0a 01 c0       	mov    eax,0xc0010ad9
c0011471:	e9 da 00 00 00       	jmp    c0011550 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011476:	66 90                	xchg   ax,ax
c0011478:	83 ec 08             	sub    esp,0x8
c001147b:	68 d8 1c 02 c0       	push   0xc0021cd8
c0011480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011484:	e8 f7 f2 fe ff       	call   c0000780 <strcmp>
c0011489:	83 c4 10             	add    esp,0x10
c001148c:	85 c0                	test   eax,eax
c001148e:	0f 94 c0             	sete   al
c0011491:	0f b6 c0             	movzx  eax,al
c0011494:	85 c0                	test   eax,eax
c0011496:	74 0c                	je     c00114a4 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011498:	b8 70 f2 01 c0       	mov    eax,0xc001f270
c001149d:	e9 ae 00 00 00       	jmp    c0011550 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114a2:	66 90                	xchg   ax,ax
c00114a4:	83 ec 08             	sub    esp,0x8
c00114a7:	68 e2 1c 02 c0       	push   0xc0021ce2
c00114ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114b0:	e8 cb f2 fe ff       	call   c0000780 <strcmp>
c00114b5:	83 c4 10             	add    esp,0x10
c00114b8:	85 c0                	test   eax,eax
c00114ba:	0f 94 c0             	sete   al
c00114bd:	0f b6 c0             	movzx  eax,al
c00114c0:	85 c0                	test   eax,eax
c00114c2:	74 0c                	je     c00114d0 <KeResolveCompatibilitySymbol(char*)+0x138>
c00114c4:	b8 f0 ef 01 c0       	mov    eax,0xc001eff0
c00114c9:	e9 82 00 00 00       	jmp    c0011550 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114ce:	66 90                	xchg   ax,ax
c00114d0:	83 ec 08             	sub    esp,0x8
c00114d3:	68 eb 1c 02 c0       	push   0xc0021ceb
c00114d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114dc:	e8 9f f2 fe ff       	call   c0000780 <strcmp>
c00114e1:	83 c4 10             	add    esp,0x10
c00114e4:	85 c0                	test   eax,eax
c00114e6:	0f 94 c0             	sete   al
c00114e9:	0f b6 c0             	movzx  eax,al
c00114ec:	85 c0                	test   eax,eax
c00114ee:	74 08                	je     c00114f8 <KeResolveCompatibilitySymbol(char*)+0x160>
c00114f0:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00114f5:	eb 59                	jmp    c0011550 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114f7:	90                   	nop
c00114f8:	83 ec 08             	sub    esp,0x8
c00114fb:	68 03 1d 02 c0       	push   0xc0021d03
c0011500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011504:	e8 77 f2 fe ff       	call   c0000780 <strcmp>
c0011509:	83 c4 10             	add    esp,0x10
c001150c:	85 c0                	test   eax,eax
c001150e:	0f 94 c0             	sete   al
c0011511:	0f b6 c0             	movzx  eax,al
c0011514:	85 c0                	test   eax,eax
c0011516:	74 08                	je     c0011520 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011518:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c001151d:	eb 31                	jmp    c0011550 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001151f:	90                   	nop
c0011520:	83 ec 08             	sub    esp,0x8
c0011523:	68 10 1d 02 c0       	push   0xc0021d10
c0011528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001152c:	e8 4f f2 fe ff       	call   c0000780 <strcmp>
c0011531:	83 c4 10             	add    esp,0x10
c0011534:	85 c0                	test   eax,eax
c0011536:	0f 94 c0             	sete   al
c0011539:	0f b6 c0             	movzx  eax,al
c001153c:	85 c0                	test   eax,eax
c001153e:	74 08                	je     c0011548 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011540:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011545:	eb 09                	jmp    c0011550 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011547:	90                   	nop
c0011548:	b8 00 00 00 00       	mov    eax,0x0
c001154d:	8d 76 00             	lea    esi,[esi+0x0]
c0011550:	83 c4 0c             	add    esp,0xc
c0011553:	c3                   	ret    

c0011554 <KiSigKill(int)>:
c0011554:	83 ec 0c             	sub    esp,0xc
c0011557:	6a 00                	push   0x0
c0011559:	6a 00                	push   0x0
c001155b:	6a ff                	push   0xffffffff
c001155d:	6a 01                	push   0x1
c001155f:	e8 ee 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011564:	83 c4 1c             	add    esp,0x1c
c0011567:	c3                   	ret    

c0011568 <KiDefaultSignalHandlerIgnore(int)>:
c0011568:	c3                   	ret    

c0011569 <KiDefaultSignalHandlerPause(int)>:
c0011569:	57                   	push   edi
c001156a:	b9 07 00 00 00       	mov    ecx,0x7
c001156f:	56                   	push   esi
c0011570:	be 59 1d 02 c0       	mov    esi,0xc0021d59
c0011575:	83 ec 24             	sub    esp,0x24
c0011578:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001157c:	fc                   	cld    
c001157d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001157f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011583:	50                   	push   eax
c0011584:	6a 00                	push   0x0
c0011586:	6a 00                	push   0x0
c0011588:	6a 27                	push   0x27
c001158a:	e8 c3 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001158f:	83 c4 34             	add    esp,0x34
c0011592:	5e                   	pop    esi
c0011593:	5f                   	pop    edi
c0011594:	c3                   	ret    

c0011595 <KiDefaultSignalHandlerResume(int)>:
c0011595:	57                   	push   edi
c0011596:	b9 1d 00 00 00       	mov    ecx,0x1d
c001159b:	56                   	push   esi
c001159c:	be 75 1d 02 c0       	mov    esi,0xc0021d75
c00115a1:	83 ec 24             	sub    esp,0x24
c00115a4:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00115a8:	fc                   	cld    
c00115a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115ab:	8d 44 24 03          	lea    eax,[esp+0x3]
c00115af:	50                   	push   eax
c00115b0:	6a 00                	push   0x0
c00115b2:	6a 00                	push   0x0
c00115b4:	6a 27                	push   0x27
c00115b6:	e8 97 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00115bb:	83 c4 34             	add    esp,0x34
c00115be:	5e                   	pop    esi
c00115bf:	5f                   	pop    edi
c00115c0:	c3                   	ret    

c00115c1 <KeDeinitSignals(SigHandlerBlock*)>:
c00115c1:	e9 1d 65 ff ff       	jmp    c0007ae3 <free>

c00115c6 <KeInitSignals()>:
c00115c6:	53                   	push   ebx
c00115c7:	83 ec 14             	sub    esp,0x14
c00115ca:	68 c8 00 00 00       	push   0xc8
c00115cf:	e8 ff 64 ff ff       	call   c0007ad3 <malloc>
c00115d4:	83 c4 0c             	add    esp,0xc
c00115d7:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00115e1:	89 c3                	mov    ebx,eax
c00115e3:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00115ed:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00115f3:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c00115f7:	6a 20                	push   0x20
c00115f9:	6a 00                	push   0x0
c00115fb:	50                   	push   eax
c00115fc:	e8 ef ee fe ff       	call   c00004f0 <memset>
c0011601:	83 c4 0c             	add    esp,0xc
c0011604:	6a 44                	push   0x44
c0011606:	6a 00                	push   0x0
c0011608:	53                   	push   ebx
c0011609:	e8 e2 ee fe ff       	call   c00004f0 <memset>
c001160e:	83 c4 18             	add    esp,0x18
c0011611:	89 d8                	mov    eax,ebx
c0011613:	5b                   	pop    ebx
c0011614:	c3                   	ret    

c0011615 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011615:	53                   	push   ebx
c0011616:	b8 01 00 00 00       	mov    eax,0x1
c001161b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001161f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011623:	83 f9 10             	cmp    ecx,0x10
c0011626:	7f 21                	jg     c0011649 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001162c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001162f:	89 03                	mov    DWORD PTR [ebx],eax
c0011631:	b8 01 00 00 00       	mov    eax,0x1
c0011636:	d3 e0                	shl    eax,cl
c0011638:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001163c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001163f:	31 c0                	xor    eax,eax
c0011641:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011649:	5b                   	pop    ebx
c001164a:	c3                   	ret    

c001164b <KeRaiseSignal(SigHandlerBlock*, int)>:
c001164b:	55                   	push   ebp
c001164c:	57                   	push   edi
c001164d:	bf 08 00 00 00       	mov    edi,0x8
c0011652:	56                   	push   esi
c0011653:	53                   	push   ebx
c0011654:	83 ec 18             	sub    esp,0x18
c0011657:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001165b:	68 92 1d 02 c0       	push   0xc0021d92
c0011660:	e8 a5 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	31 c9                	xor    ecx,ecx
c001166a:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011671:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011677:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001167b:	99                   	cdq    
c001167c:	f7 ff                	idiv   edi
c001167e:	8d 42 24             	lea    eax,[edx+0x24]
c0011681:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011685:	85 f6                	test   esi,esi
c0011687:	75 1a                	jne    c00116a3 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011689:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001168d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011691:	50                   	push   eax
c0011692:	50                   	push   eax
c0011693:	52                   	push   edx
c0011694:	68 a3 1d 02 c0       	push   0xc0021da3
c0011699:	e8 6c 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001169e:	83 c4 10             	add    esp,0x10
c00116a1:	eb 1b                	jmp    c00116be <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00116a3:	41                   	inc    ecx
c00116a4:	83 f9 08             	cmp    ecx,0x8
c00116a7:	75 ce                	jne    c0011677 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00116a9:	83 ec 0c             	sub    esp,0xc
c00116ac:	be 01 00 00 00       	mov    esi,0x1
c00116b1:	68 c4 1d 02 c0       	push   0xc0021dc4
c00116b6:	e8 4f 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00116bb:	83 c4 10             	add    esp,0x10
c00116be:	83 c4 0c             	add    esp,0xc
c00116c1:	89 f0                	mov    eax,esi
c00116c3:	5b                   	pop    ebx
c00116c4:	5e                   	pop    esi
c00116c5:	5f                   	pop    edi
c00116c6:	5d                   	pop    ebp
c00116c7:	c3                   	ret    

c00116c8 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00116c8:	55                   	push   ebp
c00116c9:	57                   	push   edi
c00116ca:	56                   	push   esi
c00116cb:	53                   	push   ebx
c00116cc:	51                   	push   ecx
c00116cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00116d1:	85 db                	test   ebx,ebx
c00116d3:	0f 84 bc 00 00 00    	je     c0011795 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00116d9:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00116e0:	0f 84 af 00 00 00    	je     c0011795 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00116e6:	31 c9                	xor    ecx,ecx
c00116e8:	bf 08 00 00 00       	mov    edi,0x8
c00116ed:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00116f3:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00116f6:	99                   	cdq    
c00116f7:	f7 ff                	idiv   edi
c00116f9:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011700:	85 ed                	test   ebp,ebp
c0011702:	0f 84 9e 00 00 00    	je     c00117a6 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011708:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001170e:	89 e9                	mov    ecx,ebp
c0011710:	bf 01 00 00 00       	mov    edi,0x1
c0011715:	d3 e7                	shl    edi,cl
c0011717:	31 c9                	xor    ecx,ecx
c0011719:	89 04 24             	mov    DWORD PTR [esp],eax
c001171c:	b8 01 00 00 00       	mov    eax,0x1
c0011721:	d3 e0                	shl    eax,cl
c0011723:	85 04 24             	test   DWORD PTR [esp],eax
c0011726:	74 06                	je     c001172e <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011728:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001172c:	75 67                	jne    c0011795 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001172e:	41                   	inc    ecx
c001172f:	83 f9 11             	cmp    ecx,0x11
c0011732:	75 e8                	jne    c001171c <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011734:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011737:	46                   	inc    esi
c0011738:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001173e:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011749:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011750:	09 f8                	or     eax,edi
c0011752:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011758:	31 c0                	xor    eax,eax
c001175a:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011762:	74 09                	je     c001176d <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011764:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001176b:	eb 06                	jmp    c0011773 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c001176d:	40                   	inc    eax
c001176e:	83 f8 08             	cmp    eax,0x8
c0011771:	75 e7                	jne    c001175a <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011773:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011777:	83 fd 09             	cmp    ebp,0x9
c001177a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001177d:	89 2a                	mov    DWORD PTR [edx],ebp
c001177f:	75 07                	jne    c0011788 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011781:	b8 54 15 01 c0       	mov    eax,0xc0011554
c0011786:	eb 31                	jmp    c00117b9 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011788:	83 f8 01             	cmp    eax,0x1
c001178b:	75 0c                	jne    c0011799 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c001178d:	f7 d7                	not    edi
c001178f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011795:	31 c0                	xor    eax,eax
c0011797:	eb 20                	jmp    c00117b9 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011799:	85 c0                	test   eax,eax
c001179b:	75 1c                	jne    c00117b9 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001179d:	8b 04 ad c0 31 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdce40]
c00117a4:	eb 13                	jmp    c00117b9 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117a6:	41                   	inc    ecx
c00117a7:	46                   	inc    esi
c00117a8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00117ae:	83 f9 08             	cmp    ecx,0x8
c00117b1:	0f 85 36 ff ff ff    	jne    c00116ed <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00117b7:	eb dc                	jmp    c0011795 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117b9:	5a                   	pop    edx
c00117ba:	5b                   	pop    ebx
c00117bb:	5e                   	pop    esi
c00117bc:	5f                   	pop    edi
c00117bd:	5d                   	pop    ebp
c00117be:	c3                   	ret    

c00117bf <KiCheckSignalZ>:
c00117bf:	83 ec 10             	sub    esp,0x10
c00117c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00117c6:	50                   	push   eax
c00117c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117cf:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00117d5:	e8 ee fe ff ff       	call   c00116c8 <KeCheckSignal(SigHandlerBlock*, int*)>
c00117da:	5a                   	pop    edx
c00117db:	31 d2                	xor    edx,edx
c00117dd:	59                   	pop    ecx
c00117de:	85 c0                	test   eax,eax
c00117e0:	74 19                	je     c00117fb <KiCheckSignalZ+0x3c>
c00117e2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00117e8:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00117eb:	89 02                	mov    DWORD PTR [edx],eax
c00117ed:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00117f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117f8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00117fb:	89 d0                	mov    eax,edx
c00117fd:	83 c4 10             	add    esp,0x10
c0011800:	c3                   	ret    

c0011801 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011801:	56                   	push   esi
c0011802:	53                   	push   ebx
c0011803:	bb 01 00 00 00       	mov    ebx,0x1
c0011808:	52                   	push   edx
c0011809:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001180d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011811:	d3 e3                	shl    ebx,cl
c0011813:	83 f9 10             	cmp    ecx,0x10
c0011816:	7f 08                	jg     c0011820 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011818:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001181e:	75 10                	jne    c0011830 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011820:	83 ec 0c             	sub    esp,0xc
c0011823:	68 d5 1d 02 c0       	push   0xc0021dd5
c0011828:	e8 80 f9 ff ff       	call   c00111ad <KePanic(char const*)>
c001182d:	83 c4 10             	add    esp,0x10
c0011830:	f7 d3                	not    ebx
c0011832:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011838:	58                   	pop    eax
c0011839:	5b                   	pop    ebx
c001183a:	5e                   	pop    esi
c001183b:	c3                   	ret    

c001183c <KiFinishSignalZ>:
c001183c:	53                   	push   ebx
c001183d:	83 ec 10             	sub    esp,0x10
c0011840:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011844:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011847:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001184c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001184f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011855:	e8 a7 ff ff ff       	call   c0011801 <KeCompleteSignal(SigHandlerBlock*, int)>
c001185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001186e:	83 c4 18             	add    esp,0x18
c0011871:	5b                   	pop    ebx
c0011872:	c3                   	ret    

c0011873 <SysSeekDir(regs*)>:
c0011873:	31 c0                	xor    eax,eax
c0011875:	31 d2                	xor    edx,edx
c0011877:	c3                   	ret    

c0011878 <SysTellDir(regs*)>:
c0011878:	31 c0                	xor    eax,eax
c001187a:	31 d2                	xor    edx,edx
c001187c:	c3                   	ret    

c001187d <SysVerify(regs*)>:
c001187d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011881:	31 d2                	xor    edx,edx
c0011883:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011886:	c3                   	ret    

c0011887 <SysGetArgc(regs*)>:
c0011887:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001188c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001188f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011895:	89 c2                	mov    edx,eax
c0011897:	c1 fa 1f             	sar    edx,0x1f
c001189a:	c3                   	ret    

c001189b <SysTTYName(regs*)>:
c001189b:	b8 01 00 00 00       	mov    eax,0x1
c00118a0:	31 d2                	xor    edx,edx
c00118a2:	c3                   	ret    

c00118a3 <SysFormatDisk(regs*)>:
c00118a3:	56                   	push   esi
c00118a4:	53                   	push   ebx
c00118a5:	83 ec 04             	sub    esp,0x4
c00118a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00118ac:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c00118b2:	eb 2a                	jmp    c00118de <SysFormatDisk(regs*)+0x3b>
c00118b4:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00118b7:	83 ec 0c             	sub    esp,0xc
c00118ba:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00118bd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00118bf:	51                   	push   ecx
c00118c0:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00118c3:	51                   	push   ecx
c00118c4:	50                   	push   eax
c00118c5:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00118cc:	50                   	push   eax
c00118cd:	53                   	push   ebx
c00118ce:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00118d1:	83 c4 20             	add    esp,0x20
c00118d4:	83 f8 08             	cmp    eax,0x8
c00118d7:	89 c1                	mov    ecx,eax
c00118d9:	75 14                	jne    c00118ef <SysFormatDisk(regs*)+0x4c>
c00118db:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00118de:	85 db                	test   ebx,ebx
c00118e0:	75 d2                	jne    c00118b4 <SysFormatDisk(regs*)+0x11>
c00118e2:	b8 03 00 00 00       	mov    eax,0x3
c00118e7:	31 d2                	xor    edx,edx
c00118e9:	83 c4 04             	add    esp,0x4
c00118ec:	5b                   	pop    ebx
c00118ed:	5e                   	pop    esi
c00118ee:	c3                   	ret    
c00118ef:	85 c0                	test   eax,eax
c00118f1:	74 13                	je     c0011906 <SysFormatDisk(regs*)+0x63>
c00118f3:	31 d2                	xor    edx,edx
c00118f5:	83 f9 09             	cmp    ecx,0x9
c00118f8:	b8 01 00 00 00       	mov    eax,0x1
c00118fd:	74 ea                	je     c00118e9 <SysFormatDisk(regs*)+0x46>
c00118ff:	b8 02 00 00 00       	mov    eax,0x2
c0011904:	eb e1                	jmp    c00118e7 <SysFormatDisk(regs*)+0x44>
c0011906:	31 c0                	xor    eax,eax
c0011908:	eb dd                	jmp    c00118e7 <SysFormatDisk(regs*)+0x44>

c001190a <SysSetDiskVolumeLabel(regs*)>:
c001190a:	56                   	push   esi
c001190b:	53                   	push   ebx
c001190c:	83 ec 04             	sub    esp,0x4
c001190f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011913:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011916:	83 f8 19             	cmp    eax,0x19
c0011919:	77 33                	ja     c001194e <SysSetDiskVolumeLabel(regs*)+0x44>
c001191b:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011922:	85 c9                	test   ecx,ecx
c0011924:	74 28                	je     c001194e <SysSetDiskVolumeLabel(regs*)+0x44>
c0011926:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011929:	85 db                	test   ebx,ebx
c001192b:	74 21                	je     c001194e <SysSetDiskVolumeLabel(regs*)+0x44>
c001192d:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011933:	85 d2                	test   edx,edx
c0011935:	74 17                	je     c001194e <SysSetDiskVolumeLabel(regs*)+0x44>
c0011937:	8b 32                	mov    esi,DWORD PTR [edx]
c0011939:	53                   	push   ebx
c001193a:	50                   	push   eax
c001193b:	51                   	push   ecx
c001193c:	52                   	push   edx
c001193d:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011940:	83 c4 10             	add    esp,0x10
c0011943:	83 c4 04             	add    esp,0x4
c0011946:	5b                   	pop    ebx
c0011947:	5e                   	pop    esi
c0011948:	89 c2                	mov    edx,eax
c001194a:	c1 fa 1f             	sar    edx,0x1f
c001194d:	c3                   	ret    
c001194e:	83 c4 04             	add    esp,0x4
c0011951:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011956:	5b                   	pop    ebx
c0011957:	ba ff ff ff ff       	mov    edx,0xffffffff
c001195c:	5e                   	pop    esi
c001195d:	c3                   	ret    

c001195e <SysGetDiskVolumeLabel(regs*)>:
c001195e:	57                   	push   edi
c001195f:	56                   	push   esi
c0011960:	53                   	push   ebx
c0011961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011965:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011968:	83 fa 19             	cmp    edx,0x19
c001196b:	77 3c                	ja     c00119a9 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001196d:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011974:	85 c9                	test   ecx,ecx
c0011976:	74 31                	je     c00119a9 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011978:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001197b:	85 db                	test   ebx,ebx
c001197d:	74 2a                	je     c00119a9 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001197f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011982:	85 f6                	test   esi,esi
c0011984:	74 23                	je     c00119a9 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011986:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001198c:	85 c0                	test   eax,eax
c001198e:	74 19                	je     c00119a9 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011990:	83 ec 0c             	sub    esp,0xc
c0011993:	8b 38                	mov    edi,DWORD PTR [eax]
c0011995:	56                   	push   esi
c0011996:	53                   	push   ebx
c0011997:	52                   	push   edx
c0011998:	51                   	push   ecx
c0011999:	50                   	push   eax
c001199a:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001199d:	83 c4 20             	add    esp,0x20
c00119a0:	5b                   	pop    ebx
c00119a1:	5e                   	pop    esi
c00119a2:	89 c2                	mov    edx,eax
c00119a4:	c1 fa 1f             	sar    edx,0x1f
c00119a7:	5f                   	pop    edi
c00119a8:	c3                   	ret    
c00119a9:	5b                   	pop    ebx
c00119aa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00119af:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119b4:	5e                   	pop    esi
c00119b5:	5f                   	pop    edi
c00119b6:	c3                   	ret    

c00119b7 <SysShutdown(regs*)>:
c00119b7:	57                   	push   edi
c00119b8:	56                   	push   esi
c00119b9:	83 ec 04             	sub    esp,0x4
c00119bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119c3:	85 c0                	test   eax,eax
c00119c5:	74 1e                	je     c00119e5 <SysShutdown(regs*)+0x2e>
c00119c7:	83 f8 01             	cmp    eax,0x1
c00119ca:	74 5f                	je     c0011a2b <SysShutdown(regs*)+0x74>
c00119cc:	83 f8 02             	cmp    eax,0x2
c00119cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00119d4:	bf ff ff ff ff       	mov    edi,0xffffffff
c00119d9:	74 32                	je     c0011a0d <SysShutdown(regs*)+0x56>
c00119db:	83 c4 04             	add    esp,0x4
c00119de:	89 f0                	mov    eax,esi
c00119e0:	5e                   	pop    esi
c00119e1:	89 fa                	mov    edx,edi
c00119e3:	5f                   	pop    edi
c00119e4:	c3                   	ret    
c00119e5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00119ea:	be ff ff ff ff       	mov    esi,0xffffffff
c00119ef:	bf ff ff ff ff       	mov    edi,0xffffffff
c00119f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00119f6:	6a 00                	push   0x0
c00119f8:	6a 00                	push   0x0
c00119fa:	6a 00                	push   0x0
c00119fc:	50                   	push   eax
c00119fd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011a00:	83 c4 10             	add    esp,0x10
c0011a03:	89 f0                	mov    eax,esi
c0011a05:	83 c4 04             	add    esp,0x4
c0011a08:	89 fa                	mov    edx,edi
c0011a0a:	5e                   	pop    esi
c0011a0b:	5f                   	pop    edi
c0011a0c:	c3                   	ret    
c0011a0d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011a12:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a14:	6a 00                	push   0x0
c0011a16:	6a 00                	push   0x0
c0011a18:	6a 01                	push   0x1
c0011a1a:	50                   	push   eax
c0011a1b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	89 f0                	mov    eax,esi
c0011a23:	83 c4 04             	add    esp,0x4
c0011a26:	89 fa                	mov    edx,edi
c0011a28:	5e                   	pop    esi
c0011a29:	5f                   	pop    edi
c0011a2a:	c3                   	ret    
c0011a2b:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011a30:	85 c0                	test   eax,eax
c0011a32:	74 02                	je     c0011a36 <SysShutdown(regs*)+0x7f>
c0011a34:	ff d0                	call   eax
c0011a36:	31 f6                	xor    esi,esi
c0011a38:	83 c4 04             	add    esp,0x4
c0011a3b:	89 f0                	mov    eax,esi
c0011a3d:	31 ff                	xor    edi,edi
c0011a3f:	5e                   	pop    esi
c0011a40:	89 fa                	mov    edx,edi
c0011a42:	5f                   	pop    edi
c0011a43:	c3                   	ret    

c0011a44 <SysRealpath(regs*)>:
c0011a44:	53                   	push   ebx
c0011a45:	83 ec 08             	sub    esp,0x8
c0011a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a4c:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011a4f:	85 c9                	test   ecx,ecx
c0011a51:	74 37                	je     c0011a8a <SysRealpath(regs*)+0x46>
c0011a53:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011a56:	31 d2                	xor    edx,edx
c0011a58:	b8 01 00 00 00       	mov    eax,0x1
c0011a5d:	85 db                	test   ebx,ebx
c0011a5f:	75 05                	jne    c0011a66 <SysRealpath(regs*)+0x22>
c0011a61:	83 c4 08             	add    esp,0x8
c0011a64:	5b                   	pop    ebx
c0011a65:	c3                   	ret    
c0011a66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a6b:	83 ec 04             	sub    esp,0x4
c0011a6e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a71:	05 0c 01 00 00       	add    eax,0x10c
c0011a76:	50                   	push   eax
c0011a77:	51                   	push   ecx
c0011a78:	53                   	push   ebx
c0011a79:	e8 a6 9a ff ff       	call   c000b524 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011a7e:	83 c4 10             	add    esp,0x10
c0011a81:	31 c0                	xor    eax,eax
c0011a83:	31 d2                	xor    edx,edx
c0011a85:	83 c4 08             	add    esp,0x8
c0011a88:	5b                   	pop    ebx
c0011a89:	c3                   	ret    
c0011a8a:	b8 01 00 00 00       	mov    eax,0x1
c0011a8f:	31 d2                	xor    edx,edx
c0011a91:	eb f2                	jmp    c0011a85 <SysRealpath(regs*)+0x41>

c0011a93 <SysReadDir(regs*)>:
c0011a93:	53                   	push   ebx
c0011a94:	83 ec 18             	sub    esp,0x18
c0011a97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a9b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011a9e:	83 f8 02             	cmp    eax,0x2
c0011aa1:	76 4f                	jbe    c0011af2 <SysReadDir(regs*)+0x5f>
c0011aa3:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011aaa:	77 52                	ja     c0011afe <SysReadDir(regs*)+0x6b>
c0011aac:	83 ec 0c             	sub    esp,0xc
c0011aaf:	50                   	push   eax
c0011ab0:	e8 e6 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ab5:	83 c4 10             	add    esp,0x10
c0011ab8:	85 c0                	test   eax,eax
c0011aba:	74 42                	je     c0011afe <SysReadDir(regs*)+0x6b>
c0011abc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ac4:	83 ec 0c             	sub    esp,0xc
c0011ac7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011acb:	8b 10                	mov    edx,DWORD PTR [eax]
c0011acd:	51                   	push   ecx
c0011ace:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011ad1:	51                   	push   ecx
c0011ad2:	6a 00                	push   0x0
c0011ad4:	68 10 01 00 00       	push   0x110
c0011ad9:	50                   	push   eax
c0011ada:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011add:	83 c4 20             	add    esp,0x20
c0011ae0:	85 c0                	test   eax,eax
c0011ae2:	89 c1                	mov    ecx,eax
c0011ae4:	74 27                	je     c0011b0d <SysReadDir(regs*)+0x7a>
c0011ae6:	31 d2                	xor    edx,edx
c0011ae8:	83 f9 07             	cmp    ecx,0x7
c0011aeb:	b8 02 00 00 00       	mov    eax,0x2
c0011af0:	75 16                	jne    c0011b08 <SysReadDir(regs*)+0x75>
c0011af2:	b8 01 00 00 00       	mov    eax,0x1
c0011af7:	31 d2                	xor    edx,edx
c0011af9:	83 c4 18             	add    esp,0x18
c0011afc:	5b                   	pop    ebx
c0011afd:	c3                   	ret    
c0011afe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b03:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b08:	83 c4 18             	add    esp,0x18
c0011b0b:	5b                   	pop    ebx
c0011b0c:	c3                   	ret    
c0011b0d:	31 c0                	xor    eax,eax
c0011b0f:	31 d2                	xor    edx,edx
c0011b11:	eb e6                	jmp    c0011af9 <SysReadDir(regs*)+0x66>

c0011b13 <SysIsATTY(regs*)>:
c0011b13:	83 ec 0c             	sub    esp,0xc
c0011b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b1a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b1d:	83 f8 02             	cmp    eax,0x2
c0011b20:	76 07                	jbe    c0011b29 <SysIsATTY(regs*)+0x16>
c0011b22:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b27:	75 26                	jne    c0011b4f <SysIsATTY(regs*)+0x3c>
c0011b29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b31:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011b37:	85 c0                	test   eax,eax
c0011b39:	74 24                	je     c0011b5f <SysIsATTY(regs*)+0x4c>
c0011b3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b3d:	83 ec 0c             	sub    esp,0xc
c0011b40:	50                   	push   eax
c0011b41:	ff 12                	call   DWORD PTR [edx]
c0011b43:	83 c4 10             	add    esp,0x10
c0011b46:	31 d2                	xor    edx,edx
c0011b48:	83 c4 0c             	add    esp,0xc
c0011b4b:	0f b6 c0             	movzx  eax,al
c0011b4e:	c3                   	ret    
c0011b4f:	83 ec 0c             	sub    esp,0xc
c0011b52:	50                   	push   eax
c0011b53:	e8 43 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011b58:	83 c4 10             	add    esp,0x10
c0011b5b:	85 c0                	test   eax,eax
c0011b5d:	75 dc                	jne    c0011b3b <SysIsATTY(regs*)+0x28>
c0011b5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b64:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b69:	83 c4 0c             	add    esp,0xc
c0011b6c:	c3                   	ret    

c0011b6d <SysSeek(regs*)>:
c0011b6d:	56                   	push   esi
c0011b6e:	53                   	push   ebx
c0011b6f:	83 ec 04             	sub    esp,0x4
c0011b72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b76:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011b79:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011b7c:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011b82:	77 33                	ja     c0011bb7 <SysSeek(regs*)+0x4a>
c0011b84:	83 ec 0c             	sub    esp,0xc
c0011b87:	51                   	push   ecx
c0011b88:	e8 0e 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011b8d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011b90:	83 c4 0c             	add    esp,0xc
c0011b93:	31 db                	xor    ebx,ebx
c0011b95:	53                   	push   ebx
c0011b96:	51                   	push   ecx
c0011b97:	50                   	push   eax
c0011b98:	e8 dd 9c ff ff       	call   c000b87a <File::seek(unsigned long long)>
c0011b9d:	83 c4 10             	add    esp,0x10
c0011ba0:	85 c0                	test   eax,eax
c0011ba2:	0f 95 c0             	setne  al
c0011ba5:	31 d2                	xor    edx,edx
c0011ba7:	0f b6 c0             	movzx  eax,al
c0011baa:	f7 d8                	neg    eax
c0011bac:	83 d2 00             	adc    edx,0x0
c0011baf:	83 c4 04             	add    esp,0x4
c0011bb2:	5b                   	pop    ebx
c0011bb3:	f7 da                	neg    edx
c0011bb5:	5e                   	pop    esi
c0011bb6:	c3                   	ret    
c0011bb7:	83 c4 04             	add    esp,0x4
c0011bba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bbf:	5b                   	pop    ebx
c0011bc0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bc5:	5e                   	pop    esi
c0011bc6:	c3                   	ret    

c0011bc7 <SysTell(regs*)>:
c0011bc7:	53                   	push   ebx
c0011bc8:	83 ec 08             	sub    esp,0x8
c0011bcb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011bcf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bd2:	83 f8 02             	cmp    eax,0x2
c0011bd5:	76 4e                	jbe    c0011c25 <SysTell(regs*)+0x5e>
c0011bd7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011bdc:	76 19                	jbe    c0011bf7 <SysTell(regs*)+0x30>
c0011bde:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011be1:	31 d2                	xor    edx,edx
c0011be3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011be9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bf0:	83 c4 08             	add    esp,0x8
c0011bf3:	31 c0                	xor    eax,eax
c0011bf5:	5b                   	pop    ebx
c0011bf6:	c3                   	ret    
c0011bf7:	83 ec 0c             	sub    esp,0xc
c0011bfa:	50                   	push   eax
c0011bfb:	e8 9b 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c00:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011c03:	5a                   	pop    edx
c0011c04:	59                   	pop    ecx
c0011c05:	53                   	push   ebx
c0011c06:	50                   	push   eax
c0011c07:	e8 1a 9d ff ff       	call   c000b926 <File::tell(unsigned long long*)>
c0011c0c:	83 c4 10             	add    esp,0x10
c0011c0f:	85 c0                	test   eax,eax
c0011c11:	0f 95 c0             	setne  al
c0011c14:	31 d2                	xor    edx,edx
c0011c16:	0f b6 c0             	movzx  eax,al
c0011c19:	f7 d8                	neg    eax
c0011c1b:	83 d2 00             	adc    edx,0x0
c0011c1e:	83 c4 08             	add    esp,0x8
c0011c21:	5b                   	pop    ebx
c0011c22:	f7 da                	neg    edx
c0011c24:	c3                   	ret    
c0011c25:	83 c4 08             	add    esp,0x8
c0011c28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c2d:	5b                   	pop    ebx
c0011c2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c33:	c3                   	ret    

c0011c34 <SysSize(regs*)>:
c0011c34:	53                   	push   ebx
c0011c35:	83 ec 18             	sub    esp,0x18
c0011c38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c3c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c3f:	83 f8 02             	cmp    eax,0x2
c0011c42:	76 54                	jbe    c0011c98 <SysSize(regs*)+0x64>
c0011c44:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c49:	76 19                	jbe    c0011c64 <SysSize(regs*)+0x30>
c0011c4b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c4e:	31 d2                	xor    edx,edx
c0011c50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c5d:	83 c4 18             	add    esp,0x18
c0011c60:	31 c0                	xor    eax,eax
c0011c62:	5b                   	pop    ebx
c0011c63:	c3                   	ret    
c0011c64:	83 ec 0c             	sub    esp,0xc
c0011c67:	50                   	push   eax
c0011c68:	e8 2e 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c6d:	83 c4 0c             	add    esp,0xc
c0011c70:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011c74:	52                   	push   edx
c0011c75:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c78:	52                   	push   edx
c0011c79:	50                   	push   eax
c0011c7a:	e8 3f 9e ff ff       	call   c000babe <File::stat(unsigned long long*, bool*)>
c0011c7f:	83 c4 10             	add    esp,0x10
c0011c82:	85 c0                	test   eax,eax
c0011c84:	0f 95 c0             	setne  al
c0011c87:	31 d2                	xor    edx,edx
c0011c89:	0f b6 c0             	movzx  eax,al
c0011c8c:	f7 d8                	neg    eax
c0011c8e:	83 d2 00             	adc    edx,0x0
c0011c91:	83 c4 18             	add    esp,0x18
c0011c94:	5b                   	pop    ebx
c0011c95:	f7 da                	neg    edx
c0011c97:	c3                   	ret    
c0011c98:	83 c4 18             	add    esp,0x18
c0011c9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ca0:	5b                   	pop    ebx
c0011ca1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ca6:	c3                   	ret    

c0011ca7 <SysSizeFromFilename(regs*)>:
c0011ca7:	57                   	push   edi
c0011ca8:	56                   	push   esi
c0011ca9:	53                   	push   ebx
c0011caa:	83 ec 10             	sub    esp,0x10
c0011cad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011cb1:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011cb4:	83 fb 02             	cmp    ebx,0x2
c0011cb7:	0f 86 83 00 00 00    	jbe    c0011d40 <SysSizeFromFilename(regs*)+0x99>
c0011cbd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011cc3:	76 1b                	jbe    c0011ce0 <SysSizeFromFilename(regs*)+0x39>
c0011cc5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011cc8:	31 d2                	xor    edx,edx
c0011cca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011cd0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cd7:	83 c4 10             	add    esp,0x10
c0011cda:	31 c0                	xor    eax,eax
c0011cdc:	5b                   	pop    ebx
c0011cdd:	5e                   	pop    esi
c0011cde:	5f                   	pop    edi
c0011cdf:	c3                   	ret    
c0011ce0:	83 ec 0c             	sub    esp,0xc
c0011ce3:	68 14 01 00 00       	push   0x114
c0011ce8:	e8 e6 5d ff ff       	call   c0007ad3 <malloc>
c0011ced:	83 c4 0c             	add    esp,0xc
c0011cf0:	89 c7                	mov    edi,eax
c0011cf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cf7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cfa:	50                   	push   eax
c0011cfb:	53                   	push   ebx
c0011cfc:	57                   	push   edi
c0011cfd:	e8 fe 99 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c0011d02:	83 c4 0c             	add    esp,0xc
c0011d05:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011d09:	50                   	push   eax
c0011d0a:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011d0d:	52                   	push   edx
c0011d0e:	57                   	push   edi
c0011d0f:	e8 aa 9d ff ff       	call   c000babe <File::stat(unsigned long long*, bool*)>
c0011d14:	83 c4 10             	add    esp,0x10
c0011d17:	85 ff                	test   edi,edi
c0011d19:	89 c3                	mov    ebx,eax
c0011d1b:	74 0c                	je     c0011d29 <SysSizeFromFilename(regs*)+0x82>
c0011d1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0011d1f:	83 ec 0c             	sub    esp,0xc
c0011d22:	57                   	push   edi
c0011d23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d26:	83 c4 10             	add    esp,0x10
c0011d29:	31 c0                	xor    eax,eax
c0011d2b:	85 db                	test   ebx,ebx
c0011d2d:	0f 95 c0             	setne  al
c0011d30:	31 d2                	xor    edx,edx
c0011d32:	f7 d8                	neg    eax
c0011d34:	83 d2 00             	adc    edx,0x0
c0011d37:	83 c4 10             	add    esp,0x10
c0011d3a:	5b                   	pop    ebx
c0011d3b:	f7 da                	neg    edx
c0011d3d:	5e                   	pop    esi
c0011d3e:	5f                   	pop    edi
c0011d3f:	c3                   	ret    
c0011d40:	83 c4 10             	add    esp,0x10
c0011d43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d48:	5b                   	pop    ebx
c0011d49:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d4e:	5e                   	pop    esi
c0011d4f:	5f                   	pop    edi
c0011d50:	c3                   	ret    

c0011d51 <SysClose(regs*)>:
c0011d51:	53                   	push   ebx
c0011d52:	83 ec 08             	sub    esp,0x8
c0011d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d59:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d5c:	83 f8 02             	cmp    eax,0x2
c0011d5f:	76 41                	jbe    c0011da2 <SysClose(regs*)+0x51>
c0011d61:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011d67:	83 fa 01             	cmp    edx,0x1
c0011d6a:	76 2d                	jbe    c0011d99 <SysClose(regs*)+0x48>
c0011d6c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d71:	77 2f                	ja     c0011da2 <SysClose(regs*)+0x51>
c0011d73:	83 ec 0c             	sub    esp,0xc
c0011d76:	50                   	push   eax
c0011d77:	e8 1f 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d7f:	89 c3                	mov    ebx,eax
c0011d81:	e8 94 9a ff ff       	call   c000b81a <File::close()>
c0011d86:	83 c4 10             	add    esp,0x10
c0011d89:	85 db                	test   ebx,ebx
c0011d8b:	74 0c                	je     c0011d99 <SysClose(regs*)+0x48>
c0011d8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d8f:	83 ec 0c             	sub    esp,0xc
c0011d92:	53                   	push   ebx
c0011d93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d96:	83 c4 10             	add    esp,0x10
c0011d99:	83 c4 08             	add    esp,0x8
c0011d9c:	31 c0                	xor    eax,eax
c0011d9e:	5b                   	pop    ebx
c0011d9f:	31 d2                	xor    edx,edx
c0011da1:	c3                   	ret    
c0011da2:	83 c4 08             	add    esp,0x8
c0011da5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011daa:	5b                   	pop    ebx
c0011dab:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011db0:	c3                   	ret    

c0011db1 <SysOpenDir(regs*)>:
c0011db1:	56                   	push   esi
c0011db2:	53                   	push   ebx
c0011db3:	83 ec 04             	sub    esp,0x4
c0011db6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011dba:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011dbd:	85 c9                	test   ecx,ecx
c0011dbf:	74 5d                	je     c0011e1e <SysOpenDir(regs*)+0x6d>
c0011dc1:	83 ec 0c             	sub    esp,0xc
c0011dc4:	68 14 01 00 00       	push   0x114
c0011dc9:	e8 05 5d ff ff       	call   c0007ad3 <malloc>
c0011dce:	83 c4 0c             	add    esp,0xc
c0011dd1:	89 c6                	mov    esi,eax
c0011dd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dd8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ddb:	50                   	push   eax
c0011ddc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011ddf:	52                   	push   edx
c0011de0:	56                   	push   esi
c0011de1:	e8 96 9e ff ff       	call   c000bc7c <Directory::Directory(char const*, Process*)>
c0011de6:	83 c4 10             	add    esp,0x10
c0011de9:	85 f6                	test   esi,esi
c0011deb:	74 31                	je     c0011e1e <SysOpenDir(regs*)+0x6d>
c0011ded:	83 ec 0c             	sub    esp,0xc
c0011df0:	56                   	push   esi
c0011df1:	e8 42 9f ff ff       	call   c000bd38 <Directory::open()>
c0011df6:	83 c4 10             	add    esp,0x10
c0011df9:	85 c0                	test   eax,eax
c0011dfb:	75 21                	jne    c0011e1e <SysOpenDir(regs*)+0x6d>
c0011dfd:	83 ec 0c             	sub    esp,0xc
c0011e00:	56                   	push   esi
c0011e01:	e8 98 73 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0011e06:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e09:	83 c4 10             	add    esp,0x10
c0011e0c:	89 02                	mov    DWORD PTR [edx],eax
c0011e0e:	c1 f8 1f             	sar    eax,0x1f
c0011e11:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e14:	83 c4 04             	add    esp,0x4
c0011e17:	31 c0                	xor    eax,eax
c0011e19:	5b                   	pop    ebx
c0011e1a:	31 d2                	xor    edx,edx
c0011e1c:	5e                   	pop    esi
c0011e1d:	c3                   	ret    
c0011e1e:	83 c4 04             	add    esp,0x4
c0011e21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e26:	5b                   	pop    ebx
c0011e27:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e2c:	5e                   	pop    esi
c0011e2d:	c3                   	ret    

c0011e2e <SysMakeDir(regs*)>:
c0011e2e:	56                   	push   esi
c0011e2f:	53                   	push   ebx
c0011e30:	83 ec 10             	sub    esp,0x10
c0011e33:	68 14 01 00 00       	push   0x114
c0011e38:	e8 96 5c ff ff       	call   c0007ad3 <malloc>
c0011e3d:	83 c4 0c             	add    esp,0xc
c0011e40:	89 c3                	mov    ebx,eax
c0011e42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e4a:	50                   	push   eax
c0011e4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e4f:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011e52:	52                   	push   edx
c0011e53:	53                   	push   ebx
c0011e54:	e8 23 9e ff ff       	call   c000bc7c <Directory::Directory(char const*, Process*)>
c0011e59:	83 c4 10             	add    esp,0x10
c0011e5c:	85 db                	test   ebx,ebx
c0011e5e:	74 2c                	je     c0011e8c <SysMakeDir(regs*)+0x5e>
c0011e60:	83 ec 0c             	sub    esp,0xc
c0011e63:	53                   	push   ebx
c0011e64:	e8 af a0 ff ff       	call   c000bf18 <Directory::create()>
c0011e69:	89 c6                	mov    esi,eax
c0011e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e73:	83 c4 10             	add    esp,0x10
c0011e76:	31 c0                	xor    eax,eax
c0011e78:	85 f6                	test   esi,esi
c0011e7a:	0f 95 c0             	setne  al
c0011e7d:	31 d2                	xor    edx,edx
c0011e7f:	f7 d8                	neg    eax
c0011e81:	83 d2 00             	adc    edx,0x0
c0011e84:	83 c4 04             	add    esp,0x4
c0011e87:	5b                   	pop    ebx
c0011e88:	f7 da                	neg    edx
c0011e8a:	5e                   	pop    esi
c0011e8b:	c3                   	ret    
c0011e8c:	83 c4 04             	add    esp,0x4
c0011e8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e94:	5b                   	pop    ebx
c0011e95:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e9a:	5e                   	pop    esi
c0011e9b:	c3                   	ret    

c0011e9c <SysCloseDir(regs*)>:
c0011e9c:	53                   	push   ebx
c0011e9d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ea2:	83 ec 08             	sub    esp,0x8
c0011ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ea9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011eac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011eb1:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011eb4:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011eba:	77 2a                	ja     c0011ee6 <SysCloseDir(regs*)+0x4a>
c0011ebc:	83 ec 0c             	sub    esp,0xc
c0011ebf:	51                   	push   ecx
c0011ec0:	e8 d6 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ec5:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ec8:	89 c3                	mov    ebx,eax
c0011eca:	e8 c5 9e ff ff       	call   c000bd94 <Directory::close()>
c0011ecf:	83 c4 10             	add    esp,0x10
c0011ed2:	85 db                	test   ebx,ebx
c0011ed4:	74 0c                	je     c0011ee2 <SysCloseDir(regs*)+0x46>
c0011ed6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ed8:	83 ec 0c             	sub    esp,0xc
c0011edb:	53                   	push   ebx
c0011edc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011edf:	83 c4 10             	add    esp,0x10
c0011ee2:	31 c0                	xor    eax,eax
c0011ee4:	31 d2                	xor    edx,edx
c0011ee6:	83 c4 08             	add    esp,0x8
c0011ee9:	5b                   	pop    ebx
c0011eea:	c3                   	ret    

c0011eeb <SysWait(regs*)>:
c0011eeb:	83 ec 10             	sub    esp,0x10
c0011eee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ef2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011ef5:	52                   	push   edx
c0011ef6:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011ef9:	51                   	push   ecx
c0011efa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011efd:	50                   	push   eax
c0011efe:	e8 e5 3d 00 00       	call   c0015ce8 <waitTask(int, int*, int)>
c0011f03:	83 c4 1c             	add    esp,0x1c
c0011f06:	89 c2                	mov    edx,eax
c0011f08:	c1 fa 1f             	sar    edx,0x1f
c0011f0b:	c3                   	ret    

c0011f0c <SysNotImpl(regs*)>:
c0011f0c:	83 ec 18             	sub    esp,0x18
c0011f0f:	68 e6 1d 02 c0       	push   0xc0021de6
c0011f14:	e8 94 f2 ff ff       	call   c00111ad <KePanic(char const*)>
c0011f19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f23:	83 c4 1c             	add    esp,0x1c
c0011f26:	c3                   	ret    

c0011f27 <SysPanic(regs*)>:
c0011f27:	83 ec 18             	sub    esp,0x18
c0011f2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f2e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011f31:	50                   	push   eax
c0011f32:	e8 76 f2 ff ff       	call   c00111ad <KePanic(char const*)>
c0011f37:	b8 01 00 00 00       	mov    eax,0x1
c0011f3c:	31 d2                	xor    edx,edx
c0011f3e:	83 c4 1c             	add    esp,0x1c
c0011f41:	c3                   	ret    

c0011f42 <SysRmdir(regs*)>:
c0011f42:	56                   	push   esi
c0011f43:	53                   	push   ebx
c0011f44:	83 ec 10             	sub    esp,0x10
c0011f47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f4b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011f4e:	68 14 01 00 00       	push   0x114
c0011f53:	e8 7b 5b ff ff       	call   c0007ad3 <malloc>
c0011f58:	83 c4 0c             	add    esp,0xc
c0011f5b:	89 c3                	mov    ebx,eax
c0011f5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f62:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f65:	50                   	push   eax
c0011f66:	56                   	push   esi
c0011f67:	53                   	push   ebx
c0011f68:	e8 93 97 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c0011f6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f70:	e8 15 9a ff ff       	call   c000b98a <File::unlink()>
c0011f75:	83 c4 10             	add    esp,0x10
c0011f78:	85 db                	test   ebx,ebx
c0011f7a:	89 c6                	mov    esi,eax
c0011f7c:	74 0c                	je     c0011f8a <SysRmdir(regs*)+0x48>
c0011f7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f80:	83 ec 0c             	sub    esp,0xc
c0011f83:	53                   	push   ebx
c0011f84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f87:	83 c4 10             	add    esp,0x10
c0011f8a:	31 c0                	xor    eax,eax
c0011f8c:	85 f6                	test   esi,esi
c0011f8e:	0f 95 c0             	setne  al
c0011f91:	31 d2                	xor    edx,edx
c0011f93:	f7 d8                	neg    eax
c0011f95:	83 d2 00             	adc    edx,0x0
c0011f98:	83 c4 04             	add    esp,0x4
c0011f9b:	5b                   	pop    ebx
c0011f9c:	f7 da                	neg    edx
c0011f9e:	5e                   	pop    esi
c0011f9f:	c3                   	ret    

c0011fa0 <SysUnlink(regs*)>:
c0011fa0:	56                   	push   esi
c0011fa1:	53                   	push   ebx
c0011fa2:	83 ec 10             	sub    esp,0x10
c0011fa5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fa9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011fac:	68 14 01 00 00       	push   0x114
c0011fb1:	e8 1d 5b ff ff       	call   c0007ad3 <malloc>
c0011fb6:	83 c4 0c             	add    esp,0xc
c0011fb9:	89 c3                	mov    ebx,eax
c0011fbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fc0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fc3:	50                   	push   eax
c0011fc4:	56                   	push   esi
c0011fc5:	53                   	push   ebx
c0011fc6:	e8 35 97 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c0011fcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fce:	e8 b7 99 ff ff       	call   c000b98a <File::unlink()>
c0011fd3:	83 c4 10             	add    esp,0x10
c0011fd6:	85 db                	test   ebx,ebx
c0011fd8:	89 c6                	mov    esi,eax
c0011fda:	74 0c                	je     c0011fe8 <SysUnlink(regs*)+0x48>
c0011fdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fde:	83 ec 0c             	sub    esp,0xc
c0011fe1:	53                   	push   ebx
c0011fe2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011fe5:	83 c4 10             	add    esp,0x10
c0011fe8:	31 c0                	xor    eax,eax
c0011fea:	85 f6                	test   esi,esi
c0011fec:	0f 95 c0             	setne  al
c0011fef:	31 d2                	xor    edx,edx
c0011ff1:	f7 d8                	neg    eax
c0011ff3:	83 d2 00             	adc    edx,0x0
c0011ff6:	83 c4 04             	add    esp,0x4
c0011ff9:	5b                   	pop    ebx
c0011ffa:	f7 da                	neg    edx
c0011ffc:	5e                   	pop    esi
c0011ffd:	c3                   	ret    

c0011ffe <SysGetArgv(regs*)>:
c0011ffe:	83 ec 0c             	sub    esp,0xc
c0012001:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012005:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012008:	85 c0                	test   eax,eax
c001200a:	78 2c                	js     c0012038 <SysGetArgv(regs*)+0x3a>
c001200c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012012:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012015:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001201b:	7d 1b                	jge    c0012038 <SysGetArgv(regs*)+0x3a>
c001201d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012024:	85 c0                	test   eax,eax
c0012026:	74 18                	je     c0012040 <SysGetArgv(regs*)+0x42>
c0012028:	83 ec 08             	sub    esp,0x8
c001202b:	50                   	push   eax
c001202c:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001202f:	50                   	push   eax
c0012030:	e8 1b e6 fe ff       	call   c0000650 <strcpy>
c0012035:	83 c4 10             	add    esp,0x10
c0012038:	31 c0                	xor    eax,eax
c001203a:	31 d2                	xor    edx,edx
c001203c:	83 c4 0c             	add    esp,0xc
c001203f:	c3                   	ret    
c0012040:	b8 01 00 00 00       	mov    eax,0x1
c0012045:	31 d2                	xor    edx,edx
c0012047:	83 c4 0c             	add    esp,0xc
c001204a:	c3                   	ret    

c001204b <SysUSleep(regs*)>:
c001204b:	83 ec 1c             	sub    esp,0x1c
c001204e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012052:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012055:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012058:	6a 00                	push   0x0
c001205a:	6a 64                	push   0x64
c001205c:	52                   	push   edx
c001205d:	50                   	push   eax
c001205e:	e8 0d d1 00 00       	call   c001f170 <__udivdi3>
c0012063:	83 c4 14             	add    esp,0x14
c0012066:	50                   	push   eax
c0012067:	e8 60 3d 00 00       	call   c0015dcc <milliTenthSleep(unsigned int)>
c001206c:	31 c0                	xor    eax,eax
c001206e:	31 d2                	xor    edx,edx
c0012070:	83 c4 1c             	add    esp,0x1c
c0012073:	c3                   	ret    

c0012074 <SysSpawn(regs*)>:
c0012074:	56                   	push   esi
c0012075:	53                   	push   ebx
c0012076:	83 ec 04             	sub    esp,0x4
c0012079:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001207d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012080:	85 f6                	test   esi,esi
c0012082:	75 0a                	jne    c001208e <SysSpawn(regs*)+0x1a>
c0012084:	83 c4 04             	add    esp,0x4
c0012087:	31 c0                	xor    eax,eax
c0012089:	5b                   	pop    ebx
c001208a:	31 d2                	xor    edx,edx
c001208c:	5e                   	pop    esi
c001208d:	c3                   	ret    
c001208e:	83 ec 0c             	sub    esp,0xc
c0012091:	68 24 07 00 00       	push   0x724
c0012096:	e8 38 5a ff ff       	call   c0007ad3 <malloc>
c001209b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001209e:	83 c4 10             	add    esp,0x10
c00120a1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120a4:	89 c6                	mov    esi,eax
c00120a6:	31 c0                	xor    eax,eax
c00120a8:	85 c9                	test   ecx,ecx
c00120aa:	75 08                	jne    c00120b4 <SysSpawn(regs*)+0x40>
c00120ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120b1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120b4:	52                   	push   edx
c00120b5:	50                   	push   eax
c00120b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120b9:	50                   	push   eax
c00120ba:	56                   	push   esi
c00120bb:	e8 74 33 00 00       	call   c0015434 <Process::Process(char const*, Process*, char**)>
c00120c0:	83 c4 10             	add    esp,0x10
c00120c3:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00120ca:	75 b8                	jne    c0012084 <SysSpawn(regs*)+0x10>
c00120cc:	83 ec 0c             	sub    esp,0xc
c00120cf:	56                   	push   esi
c00120d0:	e8 97 38 00 00       	call   c001596c <Process::createUserThread()>
c00120d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00120d7:	83 c4 10             	add    esp,0x10
c00120da:	83 c4 04             	add    esp,0x4
c00120dd:	5b                   	pop    ebx
c00120de:	89 c2                	mov    edx,eax
c00120e0:	c1 fa 1f             	sar    edx,0x1f
c00120e3:	5e                   	pop    esi
c00120e4:	c3                   	ret    

c00120e5 <SysGetEnv(regs*)>:
c00120e5:	57                   	push   edi
c00120e6:	56                   	push   esi
c00120e7:	53                   	push   ebx
c00120e8:	83 ec 1c             	sub    esp,0x1c
c00120eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120f0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00120f4:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00120f7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00120fa:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120fd:	51                   	push   ecx
c00120fe:	e8 62 ef ff ff       	call   c0011065 <KeGetProcessTotalEnvCount(Process*)>
c0012103:	83 c4 10             	add    esp,0x10
c0012106:	39 c7                	cmp    edi,eax
c0012108:	7c 12                	jl     c001211c <SysGetEnv(regs*)+0x37>
c001210a:	31 c0                	xor    eax,eax
c001210c:	31 d2                	xor    edx,edx
c001210e:	85 f6                	test   esi,esi
c0012110:	74 03                	je     c0012115 <SysGetEnv(regs*)+0x30>
c0012112:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	5b                   	pop    ebx
c0012119:	5e                   	pop    esi
c001211a:	5f                   	pop    edi
c001211b:	c3                   	ret    
c001211c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012120:	83 ec 04             	sub    esp,0x4
c0012123:	57                   	push   edi
c0012124:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001212a:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001212d:	57                   	push   edi
c001212e:	50                   	push   eax
c001212f:	e8 51 ef ff ff       	call   c0011085 <KeGetProcessEnvPair(Process*, int)>
c0012134:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012137:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001213b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001213f:	83 c4 0c             	add    esp,0xc
c0012142:	85 d2                	test   edx,edx
c0012144:	75 23                	jne    c0012169 <SysGetEnv(regs*)+0x84>
c0012146:	83 ec 0c             	sub    esp,0xc
c0012149:	50                   	push   eax
c001214a:	e8 31 e4 fe ff       	call   c0000580 <strlen>
c001214f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012152:	89 c3                	mov    ebx,eax
c0012154:	e8 27 e4 fe ff       	call   c0000580 <strlen>
c0012159:	83 c4 10             	add    esp,0x10
c001215c:	31 d2                	xor    edx,edx
c001215e:	83 c4 10             	add    esp,0x10
c0012161:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012165:	5b                   	pop    ebx
c0012166:	5e                   	pop    esi
c0012167:	5f                   	pop    edi
c0012168:	c3                   	ret    
c0012169:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001216c:	83 ec 08             	sub    esp,0x8
c001216f:	50                   	push   eax
c0012170:	56                   	push   esi
c0012171:	e8 da e4 fe ff       	call   c0000650 <strcpy>
c0012176:	58                   	pop    eax
c0012177:	5a                   	pop    edx
c0012178:	68 00 1e 02 c0       	push   0xc0021e00
c001217d:	56                   	push   esi
c001217e:	e8 ed e6 fe ff       	call   c0000870 <strcat>
c0012183:	59                   	pop    ecx
c0012184:	5b                   	pop    ebx
c0012185:	57                   	push   edi
c0012186:	56                   	push   esi
c0012187:	e8 e4 e6 fe ff       	call   c0000870 <strcat>
c001218c:	83 c4 10             	add    esp,0x10
c001218f:	31 c0                	xor    eax,eax
c0012191:	83 c4 10             	add    esp,0x10
c0012194:	31 d2                	xor    edx,edx
c0012196:	5b                   	pop    ebx
c0012197:	5e                   	pop    esi
c0012198:	5f                   	pop    edi
c0012199:	c3                   	ret    

c001219a <SysSetFatAttrib(regs*)>:
c001219a:	57                   	push   edi
c001219b:	56                   	push   esi
c001219c:	53                   	push   ebx
c001219d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00121a1:	83 ec 0c             	sub    esp,0xc
c00121a4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00121a7:	68 14 01 00 00       	push   0x114
c00121ac:	e8 22 59 ff ff       	call   c0007ad3 <malloc>
c00121b1:	83 c4 0c             	add    esp,0xc
c00121b4:	89 c3                	mov    ebx,eax
c00121b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121be:	50                   	push   eax
c00121bf:	57                   	push   edi
c00121c0:	53                   	push   ebx
c00121c1:	e8 3a 95 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c00121c6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00121c9:	83 c4 0c             	add    esp,0xc
c00121cc:	0f b6 d4             	movzx  edx,ah
c00121cf:	0f b6 c0             	movzx  eax,al
c00121d2:	52                   	push   edx
c00121d3:	50                   	push   eax
c00121d4:	53                   	push   ebx
c00121d5:	e8 4a 98 ff ff       	call   c000ba24 <File::chfatattr(unsigned char, unsigned char)>
c00121da:	83 c4 10             	add    esp,0x10
c00121dd:	85 db                	test   ebx,ebx
c00121df:	89 c6                	mov    esi,eax
c00121e1:	74 0c                	je     c00121ef <SysSetFatAttrib(regs*)+0x55>
c00121e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121e5:	83 ec 0c             	sub    esp,0xc
c00121e8:	53                   	push   ebx
c00121e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121ec:	83 c4 10             	add    esp,0x10
c00121ef:	5b                   	pop    ebx
c00121f0:	31 c0                	xor    eax,eax
c00121f2:	85 f6                	test   esi,esi
c00121f4:	0f 95 c0             	setne  al
c00121f7:	31 d2                	xor    edx,edx
c00121f9:	5e                   	pop    esi
c00121fa:	f7 d8                	neg    eax
c00121fc:	83 d2 00             	adc    edx,0x0
c00121ff:	f7 da                	neg    edx
c0012201:	5f                   	pop    edi
c0012202:	c3                   	ret    

c0012203 <SysPipe(regs*)>:
c0012203:	57                   	push   edi
c0012204:	56                   	push   esi
c0012205:	53                   	push   ebx
c0012206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001220a:	83 ec 0c             	sub    esp,0xc
c001220d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012210:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012213:	6a 20                	push   0x20
c0012215:	e8 b9 58 ff ff       	call   c0007ad3 <malloc>
c001221a:	89 c3                	mov    ebx,eax
c001221c:	58                   	pop    eax
c001221d:	5a                   	pop    edx
c001221e:	68 00 50 00 00       	push   0x5000
c0012223:	53                   	push   ebx
c0012224:	e8 15 62 ff ff       	call   c000843e <Pipe::Pipe(int)>
c0012229:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001222c:	e8 6d 6f ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012231:	89 07                	mov    DWORD PTR [edi],eax
c0012233:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012236:	e8 63 6f ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001223b:	83 c4 10             	add    esp,0x10
c001223e:	31 d2                	xor    edx,edx
c0012240:	89 06                	mov    DWORD PTR [esi],eax
c0012242:	31 c0                	xor    eax,eax
c0012244:	5b                   	pop    ebx
c0012245:	5e                   	pop    esi
c0012246:	5f                   	pop    edi
c0012247:	c3                   	ret    

c0012248 <SysGetUnixTime(regs*)>:
c0012248:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001224d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012253:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012257:	e9 02 9f ff ff       	jmp    c000c15e <Clock::timeInSecondsLocal()>

c001225c <string_ends_with(char const*, char const*)>:
c001225c:	57                   	push   edi
c001225d:	56                   	push   esi
c001225e:	53                   	push   ebx
c001225f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012263:	83 ec 0c             	sub    esp,0xc
c0012266:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001226a:	53                   	push   ebx
c001226b:	e8 10 e3 fe ff       	call   c0000580 <strlen>
c0012270:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012273:	89 c6                	mov    esi,eax
c0012275:	e8 06 e3 fe ff       	call   c0000580 <strlen>
c001227a:	83 c4 10             	add    esp,0x10
c001227d:	31 d2                	xor    edx,edx
c001227f:	39 c6                	cmp    esi,eax
c0012281:	7d 06                	jge    c0012289 <string_ends_with(char const*, char const*)+0x2d>
c0012283:	5b                   	pop    ebx
c0012284:	89 d0                	mov    eax,edx
c0012286:	5e                   	pop    esi
c0012287:	5f                   	pop    edi
c0012288:	c3                   	ret    
c0012289:	83 ec 08             	sub    esp,0x8
c001228c:	29 c6                	sub    esi,eax
c001228e:	57                   	push   edi
c001228f:	01 f3                	add    ebx,esi
c0012291:	53                   	push   ebx
c0012292:	e8 e9 e4 fe ff       	call   c0000780 <strcmp>
c0012297:	83 c4 10             	add    esp,0x10
c001229a:	31 d2                	xor    edx,edx
c001229c:	5b                   	pop    ebx
c001229d:	5e                   	pop    esi
c001229e:	85 c0                	test   eax,eax
c00122a0:	5f                   	pop    edi
c00122a1:	0f 94 c2             	sete   dl
c00122a4:	89 d0                	mov    eax,edx
c00122a6:	c3                   	ret    

c00122a7 <SysOpen(regs*)>:
c00122a7:	56                   	push   esi
c00122a8:	53                   	push   ebx
c00122a9:	81 ec 04 01 00 00    	sub    esp,0x104
c00122af:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00122b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122b9:	85 c0                	test   eax,eax
c00122bb:	0f 84 c5 01 00 00    	je     c0012486 <SysOpen(regs*)+0x1df>
c00122c1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00122c4:	85 c0                	test   eax,eax
c00122c6:	0f 84 ba 01 00 00    	je     c0012486 <SysOpen(regs*)+0x1df>
c00122cc:	83 ec 04             	sub    esp,0x4
c00122cf:	68 02 1e 02 c0       	push   0xc0021e02
c00122d4:	50                   	push   eax
c00122d5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00122d9:	56                   	push   esi
c00122da:	e8 45 92 ff ff       	call   c000b524 <Fs::standardiseFiles(char*, char const*, char const*)>
c00122df:	89 34 24             	mov    DWORD PTR [esp],esi
c00122e2:	e8 99 e2 fe ff       	call   c0000580 <strlen>
c00122e7:	83 c4 10             	add    esp,0x10
c00122ea:	83 e8 01             	sub    eax,0x1
c00122ed:	74 29                	je     c0012318 <SysOpen(regs*)+0x71>
c00122ef:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00122f3:	83 fa 2e             	cmp    edx,0x2e
c00122f6:	74 1c                	je     c0012314 <SysOpen(regs*)+0x6d>
c00122f8:	83 fa 3a             	cmp    edx,0x3a
c00122fb:	74 17                	je     c0012314 <SysOpen(regs*)+0x6d>
c00122fd:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012301:	83 e8 01             	sub    eax,0x1
c0012304:	74 12                	je     c0012318 <SysOpen(regs*)+0x71>
c0012306:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001230a:	83 fa 3a             	cmp    edx,0x3a
c001230d:	74 05                	je     c0012314 <SysOpen(regs*)+0x6d>
c001230f:	83 fa 2e             	cmp    edx,0x2e
c0012312:	75 e9                	jne    c00122fd <SysOpen(regs*)+0x56>
c0012314:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012318:	83 ec 08             	sub    esp,0x8
c001231b:	68 06 1e 02 c0       	push   0xc0021e06
c0012320:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012323:	50                   	push   eax
c0012324:	e8 33 ff ff ff       	call   c001225c <string_ends_with(char const*, char const*)>
c0012329:	83 c4 10             	add    esp,0x10
c001232c:	85 c0                	test   eax,eax
c001232e:	74 1d                	je     c001234d <SysOpen(regs*)+0xa6>
c0012330:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012333:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012339:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012340:	81 c4 04 01 00 00    	add    esp,0x104
c0012346:	31 c0                	xor    eax,eax
c0012348:	5b                   	pop    ebx
c0012349:	31 d2                	xor    edx,edx
c001234b:	5e                   	pop    esi
c001234c:	c3                   	ret    
c001234d:	83 ec 08             	sub    esp,0x8
c0012350:	68 0b 1e 02 c0       	push   0xc0021e0b
c0012355:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012358:	50                   	push   eax
c0012359:	e8 fe fe ff ff       	call   c001225c <string_ends_with(char const*, char const*)>
c001235e:	83 c4 10             	add    esp,0x10
c0012361:	85 c0                	test   eax,eax
c0012363:	75 cb                	jne    c0012330 <SysOpen(regs*)+0x89>
c0012365:	83 ec 08             	sub    esp,0x8
c0012368:	68 07 1e 02 c0       	push   0xc0021e07
c001236d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012370:	50                   	push   eax
c0012371:	e8 0a e4 fe ff       	call   c0000780 <strcmp>
c0012376:	83 c4 10             	add    esp,0x10
c0012379:	85 c0                	test   eax,eax
c001237b:	74 b3                	je     c0012330 <SysOpen(regs*)+0x89>
c001237d:	83 ec 08             	sub    esp,0x8
c0012380:	68 06 1e 02 c0       	push   0xc0021e06
c0012385:	56                   	push   esi
c0012386:	e8 d1 fe ff ff       	call   c001225c <string_ends_with(char const*, char const*)>
c001238b:	83 c4 10             	add    esp,0x10
c001238e:	85 c0                	test   eax,eax
c0012390:	75 9e                	jne    c0012330 <SysOpen(regs*)+0x89>
c0012392:	83 ec 08             	sub    esp,0x8
c0012395:	68 10 1e 02 c0       	push   0xc0021e10
c001239a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001239d:	50                   	push   eax
c001239e:	e8 b9 fe ff ff       	call   c001225c <string_ends_with(char const*, char const*)>
c00123a3:	83 c4 10             	add    esp,0x10
c00123a6:	85 c0                	test   eax,eax
c00123a8:	0f 85 eb 00 00 00    	jne    c0012499 <SysOpen(regs*)+0x1f2>
c00123ae:	83 ec 08             	sub    esp,0x8
c00123b1:	68 15 1e 02 c0       	push   0xc0021e15
c00123b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123b9:	50                   	push   eax
c00123ba:	e8 9d fe ff ff       	call   c001225c <string_ends_with(char const*, char const*)>
c00123bf:	83 c4 10             	add    esp,0x10
c00123c2:	85 c0                	test   eax,eax
c00123c4:	0f 85 cf 00 00 00    	jne    c0012499 <SysOpen(regs*)+0x1f2>
c00123ca:	83 ec 08             	sub    esp,0x8
c00123cd:	68 11 1e 02 c0       	push   0xc0021e11
c00123d2:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00123d5:	51                   	push   ecx
c00123d6:	e8 a5 e3 fe ff       	call   c0000780 <strcmp>
c00123db:	83 c4 10             	add    esp,0x10
c00123de:	85 c0                	test   eax,eax
c00123e0:	0f 84 b3 00 00 00    	je     c0012499 <SysOpen(regs*)+0x1f2>
c00123e6:	83 ec 08             	sub    esp,0x8
c00123e9:	68 10 1e 02 c0       	push   0xc0021e10
c00123ee:	56                   	push   esi
c00123ef:	e8 68 fe ff ff       	call   c001225c <string_ends_with(char const*, char const*)>
c00123f4:	83 c4 10             	add    esp,0x10
c00123f7:	85 c0                	test   eax,eax
c00123f9:	0f 85 9a 00 00 00    	jne    c0012499 <SysOpen(regs*)+0x1f2>
c00123ff:	83 ec 0c             	sub    esp,0xc
c0012402:	68 14 01 00 00       	push   0x114
c0012407:	e8 c7 56 ff ff       	call   c0007ad3 <malloc>
c001240c:	83 c4 0c             	add    esp,0xc
c001240f:	89 c6                	mov    esi,eax
c0012411:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012416:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012419:	50                   	push   eax
c001241a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001241d:	52                   	push   edx
c001241e:	56                   	push   esi
c001241f:	e8 dc 92 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c0012424:	83 c4 10             	add    esp,0x10
c0012427:	85 f6                	test   esi,esi
c0012429:	74 5b                	je     c0012486 <SysOpen(regs*)+0x1df>
c001242b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001242e:	0f b6 c2             	movzx  eax,dl
c0012431:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012434:	89 d0                	mov    eax,edx
c0012436:	83 e0 01             	and    eax,0x1
c0012439:	f6 c2 02             	test   dl,0x2
c001243c:	74 03                	je     c0012441 <SysOpen(regs*)+0x19a>
c001243e:	83 c8 02             	or     eax,0x2
c0012441:	f6 c2 04             	test   dl,0x4
c0012444:	74 03                	je     c0012449 <SysOpen(regs*)+0x1a2>
c0012446:	83 c8 04             	or     eax,0x4
c0012449:	f6 c2 08             	test   dl,0x8
c001244c:	74 03                	je     c0012451 <SysOpen(regs*)+0x1aa>
c001244e:	83 c8 0a             	or     eax,0xa
c0012451:	80 e2 10             	and    dl,0x10
c0012454:	74 03                	je     c0012459 <SysOpen(regs*)+0x1b2>
c0012456:	83 c8 12             	or     eax,0x12
c0012459:	83 ec 08             	sub    esp,0x8
c001245c:	50                   	push   eax
c001245d:	56                   	push   esi
c001245e:	e8 59 93 ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c0012463:	83 c4 10             	add    esp,0x10
c0012466:	85 c0                	test   eax,eax
c0012468:	75 1c                	jne    c0012486 <SysOpen(regs*)+0x1df>
c001246a:	83 ec 0c             	sub    esp,0xc
c001246d:	56                   	push   esi
c001246e:	e8 2b 6d ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012473:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012476:	83 c4 10             	add    esp,0x10
c0012479:	89 02                	mov    DWORD PTR [edx],eax
c001247b:	c1 f8 1f             	sar    eax,0x1f
c001247e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012481:	e9 ba fe ff ff       	jmp    c0012340 <SysOpen(regs*)+0x99>
c0012486:	81 c4 04 01 00 00    	add    esp,0x104
c001248c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012491:	5b                   	pop    ebx
c0012492:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012497:	5e                   	pop    esi
c0012498:	c3                   	ret    
c0012499:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001249c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00124a2:	e9 92 fe ff ff       	jmp    c0012339 <SysOpen(regs*)+0x92>

c00124a7 <KeSystemCall(regs*, void*)>:
c00124a7:	53                   	push   ebx
c00124a8:	83 ec 08             	sub    esp,0x8
c00124ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124af:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00124b2:	83 f8 3b             	cmp    eax,0x3b
c00124b5:	77 16                	ja     c00124cd <KeSystemCall(regs*, void*)+0x26>
c00124b7:	8b 14 85 20 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcde0]
c00124be:	85 d2                	test   edx,edx
c00124c0:	74 0b                	je     c00124cd <KeSystemCall(regs*, void*)+0x26>
c00124c2:	83 ec 0c             	sub    esp,0xc
c00124c5:	53                   	push   ebx
c00124c6:	ff d2                	call   edx
c00124c8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00124cb:	eb 0d                	jmp    c00124da <KeSystemCall(regs*, void*)+0x33>
c00124cd:	52                   	push   edx
c00124ce:	52                   	push   edx
c00124cf:	50                   	push   eax
c00124d0:	68 1a 1e 02 c0       	push   0xc0021e1a
c00124d5:	e8 30 84 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00124da:	83 c4 10             	add    esp,0x10
c00124dd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00124e2:	83 c4 08             	add    esp,0x8
c00124e5:	31 d2                	xor    edx,edx
c00124e7:	5b                   	pop    ebx
c00124e8:	c3                   	ret    
c00124e9:	66 90                	xchg   ax,ax
c00124eb:	90                   	nop

c00124ec <KeSwitchEndian16(unsigned short)>:
c00124ec:	83 ec 04             	sub    esp,0x4
c00124ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00124f3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00124f7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00124fb:	c1 f8 08             	sar    eax,0x8
c00124fe:	89 c2                	mov    edx,eax
c0012500:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012504:	c1 e0 08             	shl    eax,0x8
c0012507:	09 d0                	or     eax,edx
c0012509:	83 c4 04             	add    esp,0x4
c001250c:	c3                   	ret    
c001250d:	8d 76 00             	lea    esi,[esi+0x0]

c0012510 <KeSwitchEndian32(unsigned int)>:
c0012510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012514:	c1 e8 18             	shr    eax,0x18
c0012517:	89 c2                	mov    edx,eax
c0012519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001251d:	c1 e0 08             	shl    eax,0x8
c0012520:	25 00 00 ff 00       	and    eax,0xff0000
c0012525:	09 c2                	or     edx,eax
c0012527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001252b:	c1 e8 08             	shr    eax,0x8
c001252e:	25 00 ff 00 00       	and    eax,0xff00
c0012533:	09 c2                	or     edx,eax
c0012535:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012539:	c1 e0 18             	shl    eax,0x18
c001253c:	09 d0                	or     eax,edx
c001253e:	c3                   	ret    
c001253f:	90                   	nop

c0012540 <EthernetCRC32(unsigned char*, int)>:
c0012540:	83 ec 10             	sub    esp,0x10
c0012543:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012548:	75 0a                	jne    c0012554 <EthernetCRC32(unsigned char*, int)+0x14>
c001254a:	b8 00 00 00 00       	mov    eax,0x0
c001254f:	e9 8c 00 00 00       	jmp    c00125e0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012554:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012559:	7f 09                	jg     c0012564 <EthernetCRC32(unsigned char*, int)+0x24>
c001255b:	b8 00 00 00 00       	mov    eax,0x0
c0012560:	eb 7e                	jmp    c00125e0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012562:	66 90                	xchg   ax,ax
c0012564:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001256c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012578:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001257c:	7d 5a                	jge    c00125d8 <EthernetCRC32(unsigned char*, int)+0x98>
c001257e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012582:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012586:	01 d0                	add    eax,edx
c0012588:	8a 00                	mov    al,BYTE PTR [eax]
c001258a:	0f b6 c0             	movzx  eax,al
c001258d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012591:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012599:	8d 76 00             	lea    esi,[esi+0x0]
c001259c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00125a1:	7f 2d                	jg     c00125d0 <EthernetCRC32(unsigned char*, int)+0x90>
c00125a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125a7:	83 e0 01             	and    eax,0x1
c00125aa:	74 10                	je     c00125bc <EthernetCRC32(unsigned char*, int)+0x7c>
c00125ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125b0:	d1 e8                	shr    eax,1
c00125b2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00125b7:	eb 0b                	jmp    c00125c4 <EthernetCRC32(unsigned char*, int)+0x84>
c00125b9:	8d 76 00             	lea    esi,[esi+0x0]
c00125bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125c0:	d1 e8                	shr    eax,1
c00125c2:	66 90                	xchg   ax,ax
c00125c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00125c8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00125cd:	eb cd                	jmp    c001259c <EthernetCRC32(unsigned char*, int)+0x5c>
c00125cf:	90                   	nop
c00125d0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00125d5:	eb 9d                	jmp    c0012574 <EthernetCRC32(unsigned char*, int)+0x34>
c00125d7:	90                   	nop
c00125d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125dc:	f7 d0                	not    eax
c00125de:	66 90                	xchg   ax,ax
c00125e0:	83 c4 10             	add    esp,0x10
c00125e3:	c3                   	ret    

c00125e4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c00125e4:	83 ec 2c             	sub    esp,0x2c
c00125e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125eb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00125f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00125ff:	0f b7 c0             	movzx  eax,ax
c0012602:	3d 06 08 00 00       	cmp    eax,0x806
c0012607:	75 13                	jne    c001261c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012609:	83 ec 0c             	sub    esp,0xc
c001260c:	68 2e 1e 02 c0       	push   0xc0021e2e
c0012611:	e8 f4 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012616:	83 c4 10             	add    esp,0x10
c0012619:	eb 25                	jmp    c0012640 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001261b:	90                   	nop
c001261c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012620:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012623:	0f b7 c0             	movzx  eax,ax
c0012626:	3d 00 08 00 00       	cmp    eax,0x800
c001262b:	75 13                	jne    c0012640 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001262d:	83 ec 0c             	sub    esp,0xc
c0012630:	68 44 1e 02 c0       	push   0xc0021e44
c0012635:	e8 d0 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001263a:	83 c4 10             	add    esp,0x10
c001263d:	8d 76 00             	lea    esi,[esi+0x0]
c0012640:	90                   	nop
c0012641:	83 c4 2c             	add    esp,0x2c
c0012644:	c3                   	ret    

c0012645 <CmOpen(char const*)>:
c0012645:	57                   	push   edi
c0012646:	56                   	push   esi
c0012647:	53                   	push   ebx
c0012648:	83 ec 1c             	sub    esp,0x1c
c001264b:	6a 30                	push   0x30
c001264d:	e8 81 54 ff ff       	call   c0007ad3 <malloc>
c0012652:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012659:	89 c3                	mov    ebx,eax
c001265b:	e8 73 54 ff ff       	call   c0007ad3 <malloc>
c0012660:	83 c4 0c             	add    esp,0xc
c0012663:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0012669:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001266d:	89 c6                	mov    esi,eax
c001266f:	50                   	push   eax
c0012670:	e8 8b 90 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c0012675:	83 c4 0c             	add    esp,0xc
c0012678:	89 33                	mov    DWORD PTR [ebx],esi
c001267a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001267e:	50                   	push   eax
c001267f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012683:	50                   	push   eax
c0012684:	56                   	push   esi
c0012685:	e8 34 94 ff ff       	call   c000babe <File::stat(unsigned long long*, bool*)>
c001268a:	5a                   	pop    edx
c001268b:	59                   	pop    ecx
c001268c:	6a 01                	push   0x1
c001268e:	ff 33                	push   DWORD PTR [ebx]
c0012690:	e8 27 91 ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c0012695:	5e                   	pop    esi
c0012696:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001269a:	e8 34 54 ff ff       	call   c0007ad3 <malloc>
c001269f:	5a                   	pop    edx
c00126a0:	8d 74 24 10          	lea    esi,[esp+0x10]
c00126a4:	89 c7                	mov    edi,eax
c00126a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126a8:	8b 10                	mov    edx,DWORD PTR [eax]
c00126aa:	56                   	push   esi
c00126ab:	57                   	push   edi
c00126ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126b0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126b4:	50                   	push   eax
c00126b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00126b8:	83 c4 14             	add    esp,0x14
c00126bb:	ff 33                	push   DWORD PTR [ebx]
c00126bd:	e8 58 91 ff ff       	call   c000b81a <File::close()>
c00126c2:	59                   	pop    ecx
c00126c3:	58                   	pop    eax
c00126c4:	6a 13                	push   0x13
c00126c6:	ff 33                	push   DWORD PTR [ebx]
c00126c8:	e8 ef 90 ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c00126cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00126d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00126d4:	57                   	push   edi
c00126d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126dd:	50                   	push   eax
c00126de:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00126e1:	83 c4 14             	add    esp,0x14
c00126e4:	57                   	push   edi
c00126e5:	e8 f9 53 ff ff       	call   c0007ae3 <free>
c00126ea:	83 c4 10             	add    esp,0x10
c00126ed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00126f0:	75 10                	jne    c0012702 <CmOpen(char const*)+0xbd>
c00126f2:	83 ec 0c             	sub    esp,0xc
c00126f5:	68 59 1e 02 c0       	push   0xc0021e59
c00126fa:	e8 ae ea ff ff       	call   c00111ad <KePanic(char const*)>
c00126ff:	83 c4 10             	add    esp,0x10
c0012702:	50                   	push   eax
c0012703:	6a 00                	push   0x0
c0012705:	6a 00                	push   0x0
c0012707:	ff 33                	push   DWORD PTR [ebx]
c0012709:	8d 7b 05             	lea    edi,[ebx+0x5]
c001270c:	e8 69 91 ff ff       	call   c000b87a <File::seek(unsigned long long)>
c0012711:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012713:	8b 10                	mov    edx,DWORD PTR [eax]
c0012715:	89 34 24             	mov    DWORD PTR [esp],esi
c0012718:	57                   	push   edi
c0012719:	6a 00                	push   0x0
c001271b:	6a 2b                	push   0x2b
c001271d:	50                   	push   eax
c001271e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012721:	83 c4 1c             	add    esp,0x1c
c0012724:	6a 00                	push   0x0
c0012726:	6a 00                	push   0x0
c0012728:	ff 33                	push   DWORD PTR [ebx]
c001272a:	e8 4b 91 ff ff       	call   c000b87a <File::seek(unsigned long long)>
c001272f:	83 c4 0c             	add    esp,0xc
c0012732:	6a 08                	push   0x8
c0012734:	68 6a 1e 02 c0       	push   0xc0021e6a
c0012739:	57                   	push   edi
c001273a:	e8 41 dc fe ff       	call   c0000380 <memcmp>
c001273f:	83 c4 10             	add    esp,0x10
c0012742:	85 c0                	test   eax,eax
c0012744:	74 10                	je     c0012756 <CmOpen(char const*)+0x111>
c0012746:	83 ec 0c             	sub    esp,0xc
c0012749:	68 73 1e 02 c0       	push   0xc0021e73
c001274e:	e8 5a ea ff ff       	call   c00111ad <KePanic(char const*)>
c0012753:	83 c4 10             	add    esp,0x10
c0012756:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c001275a:	83 c4 10             	add    esp,0x10
c001275d:	89 d8                	mov    eax,ebx
c001275f:	5b                   	pop    ebx
c0012760:	5e                   	pop    esi
c0012761:	5f                   	pop    edi
c0012762:	c3                   	ret    

c0012763 <CmClose(Reghive_Tag*)>:
c0012763:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012767:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001276b:	74 0b                	je     c0012778 <CmClose(Reghive_Tag*)+0x15>
c001276d:	8b 00                	mov    eax,DWORD PTR [eax]
c001276f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012773:	e9 a2 90 ff ff       	jmp    c000b81a <File::close()>
c0012778:	c3                   	ret    

c0012779 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012779:	53                   	push   ebx
c001277a:	83 ec 18             	sub    esp,0x18
c001277d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012781:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012785:	74 29                	je     c00127b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012787:	50                   	push   eax
c0012788:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c001278d:	99                   	cdq    
c001278e:	52                   	push   edx
c001278f:	50                   	push   eax
c0012790:	ff 33                	push   DWORD PTR [ebx]
c0012792:	e8 e3 90 ff ff       	call   c000b87a <File::seek(unsigned long long)>
c0012797:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012799:	5a                   	pop    edx
c001279a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001279e:	8b 10                	mov    edx,DWORD PTR [eax]
c00127a0:	51                   	push   ecx
c00127a1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00127a5:	6a 00                	push   0x0
c00127a7:	6a 2b                	push   0x2b
c00127a9:	50                   	push   eax
c00127aa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127ad:	83 c4 20             	add    esp,0x20
c00127b0:	83 c4 18             	add    esp,0x18
c00127b3:	5b                   	pop    ebx
c00127b4:	c3                   	ret    

c00127b5 <CmGetString(Reghive_Tag*, int, char*)>:
c00127b5:	55                   	push   ebp
c00127b6:	57                   	push   edi
c00127b7:	56                   	push   esi
c00127b8:	53                   	push   ebx
c00127b9:	31 db                	xor    ebx,ebx
c00127bb:	83 ec 70             	sub    esp,0x70
c00127be:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00127c2:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00127c9:	50                   	push   eax
c00127ca:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00127d1:	55                   	push   ebp
c00127d2:	e8 a2 ff ff ff       	call   c0012779 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127d7:	83 c4 10             	add    esp,0x10
c00127da:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00127df:	c1 e0 08             	shl    eax,0x8
c00127e2:	89 c2                	mov    edx,eax
c00127e4:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00127e9:	09 d0                	or     eax,edx
c00127eb:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00127f0:	c1 e0 08             	shl    eax,0x8
c00127f3:	09 d0                	or     eax,edx
c00127f5:	74 25                	je     c001281c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00127f7:	52                   	push   edx
c00127f8:	8d 54 24 39          	lea    edx,[esp+0x39]
c00127fc:	52                   	push   edx
c00127fd:	6b fb 0d             	imul   edi,ebx,0xd
c0012800:	50                   	push   eax
c0012801:	55                   	push   ebp
c0012802:	e8 72 ff ff ff       	call   c0012779 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012807:	8d 74 24 49          	lea    esi,[esp+0x49]
c001280b:	b9 27 00 00 00       	mov    ecx,0x27
c0012810:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012817:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012819:	83 c4 10             	add    esp,0x10
c001281c:	83 c3 03             	add    ebx,0x3
c001281f:	83 fb 15             	cmp    ebx,0x15
c0012822:	75 b6                	jne    c00127da <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012824:	83 c4 6c             	add    esp,0x6c
c0012827:	5b                   	pop    ebx
c0012828:	5e                   	pop    esi
c0012829:	5f                   	pop    edi
c001282a:	5d                   	pop    ebp
c001282b:	c3                   	ret    

c001282c <CmEnterDirectory(Reghive_Tag*, int)>:
c001282c:	83 ec 40             	sub    esp,0x40
c001282f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012833:	50                   	push   eax
c0012834:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012838:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001283c:	e8 38 ff ff ff       	call   c0012779 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012841:	83 c4 10             	add    esp,0x10
c0012844:	83 c8 ff             	or     eax,0xffffffff
c0012847:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c001284c:	75 19                	jne    c0012867 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c001284e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012853:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012858:	c1 e0 08             	shl    eax,0x8
c001285b:	09 c2                	or     edx,eax
c001285d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012862:	c1 e0 10             	shl    eax,0x10
c0012865:	09 d0                	or     eax,edx
c0012867:	83 c4 3c             	add    esp,0x3c
c001286a:	c3                   	ret    

c001286b <CmGetNext(Reghive_Tag*, int)>:
c001286b:	83 ec 40             	sub    esp,0x40
c001286e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012872:	50                   	push   eax
c0012873:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012877:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001287b:	e8 f9 fe ff ff       	call   c0012779 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012880:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012885:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001288a:	c1 e0 08             	shl    eax,0x8
c001288d:	09 c2                	or     edx,eax
c001288f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012894:	83 c4 4c             	add    esp,0x4c
c0012897:	c1 e0 10             	shl    eax,0x10
c001289a:	09 d0                	or     eax,edx
c001289c:	c3                   	ret    

c001289d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c001289d:	53                   	push   ebx
c001289e:	83 ec 18             	sub    esp,0x18
c00128a1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00128a5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00128a9:	74 29                	je     c00128d4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00128ab:	50                   	push   eax
c00128ac:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00128b1:	99                   	cdq    
c00128b2:	52                   	push   edx
c00128b3:	50                   	push   eax
c00128b4:	ff 33                	push   DWORD PTR [ebx]
c00128b6:	e8 bf 8f ff ff       	call   c000b87a <File::seek(unsigned long long)>
c00128bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128bd:	5a                   	pop    edx
c00128be:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00128c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00128c4:	51                   	push   ecx
c00128c5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00128c9:	6a 00                	push   0x0
c00128cb:	6a 2b                	push   0x2b
c00128cd:	50                   	push   eax
c00128ce:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00128d1:	83 c4 20             	add    esp,0x20
c00128d4:	83 c4 18             	add    esp,0x18
c00128d7:	5b                   	pop    ebx
c00128d8:	c3                   	ret    

c00128d9 <CmFreeExtent(Reghive_Tag*, int)>:
c00128d9:	53                   	push   ebx
c00128da:	83 ec 3c             	sub    esp,0x3c
c00128dd:	6a 2b                	push   0x2b
c00128df:	6a 00                	push   0x0
c00128e1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00128e5:	53                   	push   ebx
c00128e6:	e8 05 dc fe ff       	call   c00004f0 <memset>
c00128eb:	83 c4 0c             	add    esp,0xc
c00128ee:	53                   	push   ebx
c00128ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128f7:	e8 a1 ff ff ff       	call   c001289d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00128fc:	83 c4 48             	add    esp,0x48
c00128ff:	5b                   	pop    ebx
c0012900:	c3                   	ret    

c0012901 <CmUpdateHeader(Reghive_Tag*)>:
c0012901:	83 ec 0c             	sub    esp,0xc
c0012904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012908:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001290c:	74 10                	je     c001291e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001290e:	52                   	push   edx
c001290f:	8d 50 05             	lea    edx,[eax+0x5]
c0012912:	52                   	push   edx
c0012913:	6a 00                	push   0x0
c0012915:	50                   	push   eax
c0012916:	e8 82 ff ff ff       	call   c001289d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001291b:	83 c4 10             	add    esp,0x10
c001291e:	83 c4 0c             	add    esp,0xc
c0012921:	c3                   	ret    

c0012922 <CmExpand(Reghive_Tag*, int)>:
c0012922:	55                   	push   ebp
c0012923:	57                   	push   edi
c0012924:	83 cf ff             	or     edi,0xffffffff
c0012927:	56                   	push   esi
c0012928:	53                   	push   ebx
c0012929:	83 ec 3c             	sub    esp,0x3c
c001292c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012930:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012934:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012938:	74 59                	je     c0012993 <CmExpand(Reghive_Tag*, int)+0x71>
c001293a:	50                   	push   eax
c001293b:	31 d2                	xor    edx,edx
c001293d:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012941:	31 ff                	xor    edi,edi
c0012943:	52                   	push   edx
c0012944:	50                   	push   eax
c0012945:	ff 33                	push   DWORD PTR [ebx]
c0012947:	e8 2e 8f ff ff       	call   c000b87a <File::seek(unsigned long long)>
c001294c:	83 c4 0c             	add    esp,0xc
c001294f:	6a 2b                	push   0x2b
c0012951:	6a 00                	push   0x0
c0012953:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012957:	55                   	push   ebp
c0012958:	e8 93 db fe ff       	call   c00004f0 <memset>
c001295d:	83 c4 10             	add    esp,0x10
c0012960:	39 f7                	cmp    edi,esi
c0012962:	7d 1b                	jge    c001297f <CmExpand(Reghive_Tag*, int)+0x5d>
c0012964:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012966:	83 ec 0c             	sub    esp,0xc
c0012969:	47                   	inc    edi
c001296a:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001296e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012970:	51                   	push   ecx
c0012971:	55                   	push   ebp
c0012972:	6a 00                	push   0x0
c0012974:	6a 2b                	push   0x2b
c0012976:	50                   	push   eax
c0012977:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001297a:	83 c4 20             	add    esp,0x20
c001297d:	eb e1                	jmp    c0012960 <CmExpand(Reghive_Tag*, int)+0x3e>
c001297f:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012982:	83 ec 0c             	sub    esp,0xc
c0012985:	01 fe                	add    esi,edi
c0012987:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c001298a:	53                   	push   ebx
c001298b:	e8 71 ff ff ff       	call   c0012901 <CmUpdateHeader(Reghive_Tag*)>
c0012990:	83 c4 10             	add    esp,0x10
c0012993:	83 c4 3c             	add    esp,0x3c
c0012996:	89 f8                	mov    eax,edi
c0012998:	5b                   	pop    ebx
c0012999:	5e                   	pop    esi
c001299a:	5f                   	pop    edi
c001299b:	5d                   	pop    ebp
c001299c:	c3                   	ret    

c001299d <CmFindUnusedExtent(Reghive_Tag*)>:
c001299d:	55                   	push   ebp
c001299e:	57                   	push   edi
c001299f:	56                   	push   esi
c00129a0:	53                   	push   ebx
c00129a1:	83 cb ff             	or     ebx,0xffffffff
c00129a4:	83 ec 1c             	sub    esp,0x1c
c00129a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00129ab:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00129af:	74 68                	je     c0012a19 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00129b1:	51                   	push   ecx
c00129b2:	be 2b 00 00 00       	mov    esi,0x2b
c00129b7:	6a 00                	push   0x0
c00129b9:	31 ff                	xor    edi,edi
c00129bb:	6a 00                	push   0x0
c00129bd:	31 db                	xor    ebx,ebx
c00129bf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00129c2:	e8 b3 8e ff ff       	call   c000b87a <File::seek(unsigned long long)>
c00129c7:	83 c4 10             	add    esp,0x10
c00129ca:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00129cd:	76 3b                	jbe    c0012a0a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00129cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129d2:	83 ec 0c             	sub    esp,0xc
c00129d5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00129d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00129db:	51                   	push   ecx
c00129dc:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c00129e0:	51                   	push   ecx
c00129e1:	6a 00                	push   0x0
c00129e3:	6a 01                	push   0x1
c00129e5:	50                   	push   eax
c00129e6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00129e9:	83 c4 20             	add    esp,0x20
c00129ec:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00129f1:	74 26                	je     c0012a19 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00129f3:	52                   	push   edx
c00129f4:	43                   	inc    ebx
c00129f5:	57                   	push   edi
c00129f6:	56                   	push   esi
c00129f7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00129fa:	e8 7b 8e ff ff       	call   c000b87a <File::seek(unsigned long long)>
c00129ff:	83 c6 2b             	add    esi,0x2b
c0012a02:	83 d7 00             	adc    edi,0x0
c0012a05:	83 c4 10             	add    esp,0x10
c0012a08:	eb c0                	jmp    c00129ca <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012a0a:	50                   	push   eax
c0012a0b:	50                   	push   eax
c0012a0c:	6a 40                	push   0x40
c0012a0e:	55                   	push   ebp
c0012a0f:	e8 0e ff ff ff       	call   c0012922 <CmExpand(Reghive_Tag*, int)>
c0012a14:	83 c4 10             	add    esp,0x10
c0012a17:	89 c3                	mov    ebx,eax
c0012a19:	83 c4 1c             	add    esp,0x1c
c0012a1c:	89 d8                	mov    eax,ebx
c0012a1e:	5b                   	pop    ebx
c0012a1f:	5e                   	pop    esi
c0012a20:	5f                   	pop    edi
c0012a21:	5d                   	pop    ebp
c0012a22:	c3                   	ret    

c0012a23 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012a23:	55                   	push   ebp
c0012a24:	57                   	push   edi
c0012a25:	56                   	push   esi
c0012a26:	53                   	push   ebx
c0012a27:	81 ec 88 00 00 00    	sub    esp,0x88
c0012a2d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012a34:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a3b:	e8 5d ff ff ff       	call   c001299d <CmFindUnusedExtent(Reghive_Tag*)>
c0012a40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a44:	83 c4 0c             	add    esp,0xc
c0012a47:	6a 2b                	push   0x2b
c0012a49:	6a 00                	push   0x0
c0012a4b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012a4f:	55                   	push   ebp
c0012a50:	e8 9b da fe ff       	call   c00004f0 <memset>
c0012a55:	83 c4 10             	add    esp,0x10
c0012a58:	85 db                	test   ebx,ebx
c0012a5a:	74 12                	je     c0012a6e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012a5c:	51                   	push   ecx
c0012a5d:	55                   	push   ebp
c0012a5e:	53                   	push   ebx
c0012a5f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a66:	e8 0e fd ff ff       	call   c0012779 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012a72:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012a79:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012a7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a80:	85 db                	test   ebx,ebx
c0012a82:	74 49                	je     c0012acd <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012a84:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012a89:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012a8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a92:	c1 e0 08             	shl    eax,0x8
c0012a95:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012a9b:	09 c8                	or     eax,ecx
c0012a9d:	74 11                	je     c0012ab0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012a9f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012aa3:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012aa7:	c1 e8 10             	shr    eax,0x10
c0012aaa:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012aae:	eb 0f                	jmp    c0012abf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012ab0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012ab5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012aba:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012abf:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012ac3:	c1 ea 08             	shr    edx,0x8
c0012ac6:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012acb:	eb 0f                	jmp    c0012adc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012acd:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012ad2:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012ad7:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012adc:	52                   	push   edx
c0012add:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012ae1:	50                   	push   eax
c0012ae2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ae6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012aed:	e8 ab fd ff ff       	call   c001289d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012af2:	83 c4 10             	add    esp,0x10
c0012af5:	85 db                	test   ebx,ebx
c0012af7:	74 12                	je     c0012b0b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012af9:	50                   	push   eax
c0012afa:	55                   	push   ebp
c0012afb:	53                   	push   ebx
c0012afc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b03:	e8 95 fd ff ff       	call   c001289d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b08:	83 c4 10             	add    esp,0x10
c0012b0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b0f:	83 c4 7c             	add    esp,0x7c
c0012b12:	5b                   	pop    ebx
c0012b13:	5e                   	pop    esi
c0012b14:	5f                   	pop    edi
c0012b15:	5d                   	pop    ebp
c0012b16:	c3                   	ret    

c0012b17 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012b17:	55                   	push   ebp
c0012b18:	57                   	push   edi
c0012b19:	56                   	push   esi
c0012b1a:	53                   	push   ebx
c0012b1b:	bb 27 00 00 00       	mov    ebx,0x27
c0012b20:	81 ec 88 00 00 00    	sub    esp,0x88
c0012b26:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012b2d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012b34:	e8 47 da fe ff       	call   c0000580 <strlen>
c0012b39:	8d 48 26             	lea    ecx,[eax+0x26]
c0012b3c:	89 c8                	mov    eax,ecx
c0012b3e:	99                   	cdq    
c0012b3f:	f7 fb                	idiv   ebx
c0012b41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b45:	83 c4 10             	add    esp,0x10
c0012b48:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012b4e:	7e 10                	jle    c0012b60 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012b50:	83 ec 0c             	sub    esp,0xc
c0012b53:	68 84 1e 02 c0       	push   0xc0021e84
c0012b58:	e8 50 e6 ff ff       	call   c00111ad <KePanic(char const*)>
c0012b5d:	83 c4 10             	add    esp,0x10
c0012b60:	53                   	push   ebx
c0012b61:	31 ed                	xor    ebp,ebp
c0012b63:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012b67:	53                   	push   ebx
c0012b68:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b6f:	57                   	push   edi
c0012b70:	e8 04 fc ff ff       	call   c0012779 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b75:	83 c4 10             	add    esp,0x10
c0012b78:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012b7c:	89 f0                	mov    eax,esi
c0012b7e:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012b82:	c1 e0 08             	shl    eax,0x8
c0012b85:	09 c6                	or     esi,eax
c0012b87:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012b8b:	c1 e6 08             	shl    esi,0x8
c0012b8e:	09 c6                	or     esi,eax
c0012b90:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012b94:	7e 72                	jle    c0012c08 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012b96:	85 f6                	test   esi,esi
c0012b98:	75 25                	jne    c0012bbf <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012b9a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012b9f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012ba3:	50                   	push   eax
c0012ba4:	6a 00                	push   0x0
c0012ba6:	6a 00                	push   0x0
c0012ba8:	57                   	push   edi
c0012ba9:	e8 75 fe ff ff       	call   c0012a23 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012bae:	83 c4 10             	add    esp,0x10
c0012bb1:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012bb4:	89 c6                	mov    esi,eax
c0012bb6:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012bb9:	c1 f8 10             	sar    eax,0x10
c0012bbc:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012bbf:	51                   	push   ecx
c0012bc0:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012bc4:	52                   	push   edx
c0012bc5:	56                   	push   esi
c0012bc6:	57                   	push   edi
c0012bc7:	e8 ad fb ff ff       	call   c0012779 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012bcc:	83 c4 0c             	add    esp,0xc
c0012bcf:	6a 27                	push   0x27
c0012bd1:	6a 00                	push   0x0
c0012bd3:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012bd7:	51                   	push   ecx
c0012bd8:	e8 13 d9 fe ff       	call   c00004f0 <memset>
c0012bdd:	6b c5 27             	imul   eax,ebp,0x27
c0012be0:	83 c4 0c             	add    esp,0xc
c0012be3:	6a 27                	push   0x27
c0012be5:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012bec:	50                   	push   eax
c0012bed:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012bf1:	51                   	push   ecx
c0012bf2:	e8 99 da fe ff       	call   c0000690 <strncpy>
c0012bf7:	83 c4 0c             	add    esp,0xc
c0012bfa:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012bfe:	52                   	push   edx
c0012bff:	56                   	push   esi
c0012c00:	57                   	push   edi
c0012c01:	e8 97 fc ff ff       	call   c001289d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c06:	eb 19                	jmp    c0012c21 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012c08:	85 f6                	test   esi,esi
c0012c0a:	74 18                	je     c0012c24 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012c0c:	52                   	push   edx
c0012c0d:	52                   	push   edx
c0012c0e:	56                   	push   esi
c0012c0f:	57                   	push   edi
c0012c10:	e8 c4 fc ff ff       	call   c00128d9 <CmFreeExtent(Reghive_Tag*, int)>
c0012c15:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012c19:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012c1d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012c21:	83 c4 10             	add    esp,0x10
c0012c24:	45                   	inc    ebp
c0012c25:	83 c3 03             	add    ebx,0x3
c0012c28:	83 fd 07             	cmp    ebp,0x7
c0012c2b:	0f 85 47 ff ff ff    	jne    c0012b78 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012c31:	50                   	push   eax
c0012c32:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012c36:	50                   	push   eax
c0012c37:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c3e:	57                   	push   edi
c0012c3f:	e8 59 fc ff ff       	call   c001289d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c44:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012c4a:	5b                   	pop    ebx
c0012c4b:	5e                   	pop    esi
c0012c4c:	5f                   	pop    edi
c0012c4d:	5d                   	pop    ebp
c0012c4e:	c3                   	ret    

c0012c4f <CmGetMatch(char*, char*, bool, bool*)>:
c0012c4f:	56                   	push   esi
c0012c50:	53                   	push   ebx
c0012c51:	50                   	push   eax
c0012c52:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012c57:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012c5b:	74 25                	je     c0012c82 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012c5d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012c60:	31 db                	xor    ebx,ebx
c0012c62:	50                   	push   eax
c0012c63:	50                   	push   eax
c0012c64:	8d 04 9d 20 33 02 c0 	lea    eax,[ebx*4-0x3ffdcce0]
c0012c6b:	50                   	push   eax
c0012c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c70:	e8 0b db fe ff       	call   c0000780 <strcmp>
c0012c75:	83 c4 10             	add    esp,0x10
c0012c78:	85 c0                	test   eax,eax
c0012c7a:	74 2e                	je     c0012caa <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012c7c:	43                   	inc    ebx
c0012c7d:	83 fb 3f             	cmp    ebx,0x3f
c0012c80:	75 e0                	jne    c0012c62 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012c82:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012c85:	31 db                	xor    ebx,ebx
c0012c87:	51                   	push   ecx
c0012c88:	51                   	push   ecx
c0012c89:	8d 04 9d 20 33 02 c0 	lea    eax,[ebx*4-0x3ffdcce0]
c0012c90:	50                   	push   eax
c0012c91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c95:	e8 e6 da fe ff       	call   c0000780 <strcmp>
c0012c9a:	83 c4 10             	add    esp,0x10
c0012c9d:	85 c0                	test   eax,eax
c0012c9f:	74 09                	je     c0012caa <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012ca1:	43                   	inc    ebx
c0012ca2:	83 fb 3f             	cmp    ebx,0x3f
c0012ca5:	75 e0                	jne    c0012c87 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012ca7:	83 cb ff             	or     ebx,0xffffffff
c0012caa:	5a                   	pop    edx
c0012cab:	89 d8                	mov    eax,ebx
c0012cad:	5b                   	pop    ebx
c0012cae:	5e                   	pop    esi
c0012caf:	c3                   	ret    

c0012cb0 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012cb0:	55                   	push   ebp
c0012cb1:	31 c0                	xor    eax,eax
c0012cb3:	57                   	push   edi
c0012cb4:	56                   	push   esi
c0012cb5:	53                   	push   ebx
c0012cb6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012cba:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012cbe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012cc2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012cc6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012cc8:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012ccb:	83 fd 1f             	cmp    ebp,0x1f
c0012cce:	7f 0b                	jg     c0012cdb <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012cd0:	0f b6 c2             	movzx  eax,dl
c0012cd3:	d3 e0                	shl    eax,cl
c0012cd5:	09 07                	or     DWORD PTR [edi],eax
c0012cd7:	b0 01                	mov    al,0x1
c0012cd9:	01 33                	add    DWORD PTR [ebx],esi
c0012cdb:	5b                   	pop    ebx
c0012cdc:	5e                   	pop    esi
c0012cdd:	5f                   	pop    edi
c0012cde:	5d                   	pop    ebp
c0012cdf:	c3                   	ret    

c0012ce0 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012ce0:	57                   	push   edi
c0012ce1:	56                   	push   esi
c0012ce2:	53                   	push   ebx
c0012ce3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012ce7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012ceb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012cef:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012cf3:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012cf5:	7c 17                	jl     c0012d0e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012cf7:	8b 17                	mov    edx,DWORD PTR [edi]
c0012cf9:	b8 01 00 00 00       	mov    eax,0x1
c0012cfe:	d3 e0                	shl    eax,cl
c0012d00:	48                   	dec    eax
c0012d01:	21 d0                	and    eax,edx
c0012d03:	d3 ea                	shr    edx,cl
c0012d05:	89 17                	mov    DWORD PTR [edi],edx
c0012d07:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012d09:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012d0c:	eb 05                	jmp    c0012d13 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012d0e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d11:	31 c0                	xor    eax,eax
c0012d13:	5b                   	pop    ebx
c0012d14:	5e                   	pop    esi
c0012d15:	5f                   	pop    edi
c0012d16:	c3                   	ret    

c0012d17 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012d17:	83 ec 40             	sub    esp,0x40
c0012d1a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012d1e:	50                   	push   eax
c0012d1f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d27:	e8 4d fa ff ff       	call   c0012779 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d2c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012d30:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012d34:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012d38:	89 10                	mov    DWORD PTR [eax],edx
c0012d3a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012d3d:	83 c4 4c             	add    esp,0x4c
c0012d40:	c3                   	ret    

c0012d41 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012d41:	55                   	push   ebp
c0012d42:	57                   	push   edi
c0012d43:	56                   	push   esi
c0012d44:	53                   	push   ebx
c0012d45:	83 ec 40             	sub    esp,0x40
c0012d48:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012d4c:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012d50:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012d54:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012d58:	53                   	push   ebx
c0012d59:	56                   	push   esi
c0012d5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012d5e:	e8 16 fa ff ff       	call   c0012779 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d63:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012d67:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012d6b:	83 c4 0c             	add    esp,0xc
c0012d6e:	53                   	push   ebx
c0012d6f:	56                   	push   esi
c0012d70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012d74:	e8 24 fb ff ff       	call   c001289d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d79:	83 c4 4c             	add    esp,0x4c
c0012d7c:	5b                   	pop    ebx
c0012d7d:	5e                   	pop    esi
c0012d7e:	5f                   	pop    edi
c0012d7f:	5d                   	pop    ebp
c0012d80:	c3                   	ret    

c0012d81 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012d81:	55                   	push   ebp
c0012d82:	57                   	push   edi
c0012d83:	56                   	push   esi
c0012d84:	31 f6                	xor    esi,esi
c0012d86:	53                   	push   ebx
c0012d87:	31 db                	xor    ebx,ebx
c0012d89:	83 ec 40             	sub    esp,0x40
c0012d8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012d94:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012d9c:	6a 12                	push   0x12
c0012d9e:	68 ee 00 00 00       	push   0xee
c0012da3:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012da7:	e8 44 d7 fe ff       	call   c00004f0 <memset>
c0012dac:	83 c4 10             	add    esp,0x10
c0012daf:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012db3:	6a 08                	push   0x8
c0012db5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012db9:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012dbd:	50                   	push   eax
c0012dbe:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012dc2:	55                   	push   ebp
c0012dc3:	57                   	push   edi
c0012dc4:	e8 e7 fe ff ff       	call   c0012cb0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012dc9:	83 c4 10             	add    esp,0x10
c0012dcc:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012dd0:	50                   	push   eax
c0012dd1:	6a 06                	push   0x6
c0012dd3:	55                   	push   ebp
c0012dd4:	57                   	push   edi
c0012dd5:	e8 06 ff ff ff       	call   c0012ce0 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012dda:	83 c4 10             	add    esp,0x10
c0012ddd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012de2:	74 07                	je     c0012deb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012de4:	46                   	inc    esi
c0012de5:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012de9:	eb e1                	jmp    c0012dcc <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012deb:	43                   	inc    ebx
c0012dec:	83 fb 12             	cmp    ebx,0x12
c0012def:	75 c2                	jne    c0012db3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012df1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012df5:	31 f6                	xor    esi,esi
c0012df7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012dfa:	50                   	push   eax
c0012dfb:	50                   	push   eax
c0012dfc:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012e01:	46                   	inc    esi
c0012e02:	8d 04 85 20 33 02 c0 	lea    eax,[eax*4-0x3ffdcce0]
c0012e09:	50                   	push   eax
c0012e0a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012e0e:	e8 5d da fe ff       	call   c0000870 <strcat>
c0012e13:	83 c4 10             	add    esp,0x10
c0012e16:	83 fe 18             	cmp    esi,0x18
c0012e19:	75 df                	jne    c0012dfa <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012e1b:	83 c4 3c             	add    esp,0x3c
c0012e1e:	31 c0                	xor    eax,eax
c0012e20:	5b                   	pop    ebx
c0012e21:	5e                   	pop    esi
c0012e22:	5f                   	pop    edi
c0012e23:	5d                   	pop    ebp
c0012e24:	c3                   	ret    

c0012e25 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012e25:	83 ec 40             	sub    esp,0x40
c0012e28:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e2c:	50                   	push   eax
c0012e2d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e31:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e35:	e8 3f f9 ff ff       	call   c0012779 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e3a:	58                   	pop    eax
c0012e3b:	5a                   	pop    edx
c0012e3c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012e40:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012e44:	50                   	push   eax
c0012e45:	e8 37 ff ff ff       	call   c0012d81 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012e4a:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012e4f:	83 c4 4c             	add    esp,0x4c
c0012e52:	c3                   	ret    

c0012e53 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012e53:	55                   	push   ebp
c0012e54:	57                   	push   edi
c0012e55:	56                   	push   esi
c0012e56:	53                   	push   ebx
c0012e57:	31 db                	xor    ebx,ebx
c0012e59:	83 ec 70             	sub    esp,0x70
c0012e5c:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012e63:	6a 30                	push   0x30
c0012e65:	6a 00                	push   0x0
c0012e67:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012e6b:	56                   	push   esi
c0012e6c:	e8 7f d6 fe ff       	call   c00004f0 <memset>
c0012e71:	83 c4 10             	add    esp,0x10
c0012e74:	83 ec 0c             	sub    esp,0xc
c0012e77:	57                   	push   edi
c0012e78:	e8 03 d7 fe ff       	call   c0000580 <strlen>
c0012e7d:	83 c4 10             	add    esp,0x10
c0012e80:	39 d8                	cmp    eax,ebx
c0012e82:	76 16                	jbe    c0012e9a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012e84:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012e88:	83 ec 0c             	sub    esp,0xc
c0012e8b:	50                   	push   eax
c0012e8c:	e8 cf da fe ff       	call   c0000960 <toupper>
c0012e91:	83 c4 10             	add    esp,0x10
c0012e94:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012e97:	43                   	inc    ebx
c0012e98:	eb da                	jmp    c0012e74 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012e9a:	52                   	push   edx
c0012e9b:	31 db                	xor    ebx,ebx
c0012e9d:	6a 18                	push   0x18
c0012e9f:	31 ff                	xor    edi,edi
c0012ea1:	6a 3f                	push   0x3f
c0012ea3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ea7:	50                   	push   eax
c0012ea8:	e8 43 d6 fe ff       	call   c00004f0 <memset>
c0012ead:	83 c4 10             	add    esp,0x10
c0012eb0:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012eb4:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012eb8:	84 c0                	test   al,al
c0012eba:	0f 84 af 00 00 00    	je     c0012f6f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012ec0:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012ec4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012ec7:	83 ec 0c             	sub    esp,0xc
c0012eca:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012ecf:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012ed3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012ed7:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0012edc:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012ee0:	56                   	push   esi
c0012ee1:	e8 9a d6 fe ff       	call   c0000580 <strlen>
c0012ee6:	83 c4 10             	add    esp,0x10
c0012ee9:	85 c0                	test   eax,eax
c0012eeb:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012eef:	74 0b                	je     c0012efc <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012ef1:	50                   	push   eax
c0012ef2:	6a 01                	push   0x1
c0012ef4:	56                   	push   esi
c0012ef5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012ef9:	50                   	push   eax
c0012efa:	eb 0a                	jmp    c0012f06 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012efc:	50                   	push   eax
c0012efd:	6a 00                	push   0x0
c0012eff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012f03:	50                   	push   eax
c0012f04:	6a 00                	push   0x0
c0012f06:	e8 44 fd ff ff       	call   c0012c4f <CmGetMatch(char*, char*, bool, bool*)>
c0012f0b:	83 c4 10             	add    esp,0x10
c0012f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0012f11:	75 1a                	jne    c0012f2d <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012f13:	83 ec 0c             	sub    esp,0xc
c0012f16:	68 99 1e 02 c0       	push   0xc0021e99
c0012f1b:	e8 8d e2 ff ff       	call   c00111ad <KePanic(char const*)>
c0012f20:	83 c4 10             	add    esp,0x10
c0012f23:	b8 02 00 00 00       	mov    eax,0x2
c0012f28:	e9 bb 00 00 00       	jmp    c0012fe8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012f2d:	83 ff 18             	cmp    edi,0x18
c0012f30:	75 1a                	jne    c0012f4c <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012f32:	83 ec 0c             	sub    esp,0xc
c0012f35:	68 ae 1e 02 c0       	push   0xc0021eae
c0012f3a:	e8 6e e2 ff ff       	call   c00111ad <KePanic(char const*)>
c0012f3f:	83 c4 10             	add    esp,0x10
c0012f42:	b8 01 00 00 00       	mov    eax,0x1
c0012f47:	e9 9c 00 00 00       	jmp    c0012fe8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012f4c:	47                   	inc    edi
c0012f4d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f52:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012f56:	0f 45 dd             	cmovne ebx,ebp
c0012f59:	83 ec 0c             	sub    esp,0xc
c0012f5c:	56                   	push   esi
c0012f5d:	e8 1e d6 fe ff       	call   c0000580 <strlen>
c0012f62:	83 c4 10             	add    esp,0x10
c0012f65:	85 c0                	test   eax,eax
c0012f67:	74 06                	je     c0012f6f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012f69:	43                   	inc    ebx
c0012f6a:	e9 41 ff ff ff       	jmp    c0012eb0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012f6f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012f77:	31 db                	xor    ebx,ebx
c0012f79:	31 ff                	xor    edi,edi
c0012f7b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012f83:	50                   	push   eax
c0012f84:	6a 12                	push   0x12
c0012f86:	68 ee 00 00 00       	push   0xee
c0012f8b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012f92:	e8 59 d5 fe ff       	call   c00004f0 <memset>
c0012f97:	83 c4 10             	add    esp,0x10
c0012f9a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012f9e:	83 fb 17             	cmp    ebx,0x17
c0012fa1:	7e 26                	jle    c0012fc9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012fa3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012fa7:	50                   	push   eax
c0012fa8:	6a 08                	push   0x8
c0012faa:	55                   	push   ebp
c0012fab:	56                   	push   esi
c0012fac:	e8 2f fd ff ff       	call   c0012ce0 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012fb1:	83 c4 10             	add    esp,0x10
c0012fb4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fb9:	74 26                	je     c0012fe1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0012fbb:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012fc2:	4b                   	dec    ebx
c0012fc3:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012fc6:	47                   	inc    edi
c0012fc7:	eb 1c                	jmp    c0012fe5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012fc9:	6a 06                	push   0x6
c0012fcb:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012fd0:	50                   	push   eax
c0012fd1:	55                   	push   ebp
c0012fd2:	56                   	push   esi
c0012fd3:	e8 d8 fc ff ff       	call   c0012cb0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012fd8:	83 c4 10             	add    esp,0x10
c0012fdb:	84 c0                	test   al,al
c0012fdd:	75 06                	jne    c0012fe5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012fdf:	eb c2                	jmp    c0012fa3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012fe1:	31 c0                	xor    eax,eax
c0012fe3:	eb 03                	jmp    c0012fe8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012fe5:	43                   	inc    ebx
c0012fe6:	eb b2                	jmp    c0012f9a <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012fe8:	83 c4 6c             	add    esp,0x6c
c0012feb:	5b                   	pop    ebx
c0012fec:	5e                   	pop    esi
c0012fed:	5f                   	pop    edi
c0012fee:	5d                   	pop    ebp
c0012fef:	c3                   	ret    

c0012ff0 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012ff0:	53                   	push   ebx
c0012ff1:	83 ec 3c             	sub    esp,0x3c
c0012ff4:	6a 2b                	push   0x2b
c0012ff6:	6a 00                	push   0x0
c0012ff8:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012ffc:	53                   	push   ebx
c0012ffd:	e8 ee d4 fe ff       	call   c00004f0 <memset>
c0013002:	58                   	pop    eax
c0013003:	5a                   	pop    edx
c0013004:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013008:	50                   	push   eax
c0013009:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001300d:	e8 41 fe ff ff       	call   c0012e53 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013012:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013017:	83 c4 0c             	add    esp,0xc
c001301a:	6a 15                	push   0x15
c001301c:	6a 00                	push   0x0
c001301e:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013022:	50                   	push   eax
c0013023:	e8 c8 d4 fe ff       	call   c00004f0 <memset>
c0013028:	53                   	push   ebx
c0013029:	6a 00                	push   0x0
c001302b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001302f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013033:	e8 eb f9 ff ff       	call   c0012a23 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013038:	83 c4 58             	add    esp,0x58
c001303b:	5b                   	pop    ebx
c001303c:	c3                   	ret    

c001303d <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001303d:	56                   	push   esi
c001303e:	53                   	push   ebx
c001303f:	83 ec 48             	sub    esp,0x48
c0013042:	6a 12                	push   0x12
c0013044:	68 ff 00 00 00       	push   0xff
c0013049:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001304d:	56                   	push   esi
c001304e:	e8 9d d4 fe ff       	call   c00004f0 <memset>
c0013053:	5a                   	pop    edx
c0013054:	59                   	pop    ecx
c0013055:	56                   	push   esi
c0013056:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001305a:	e8 f4 fd ff ff       	call   c0012e53 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001305f:	83 c4 10             	add    esp,0x10
c0013062:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013066:	85 db                	test   ebx,ebx
c0013068:	74 42                	je     c00130ac <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001306a:	50                   	push   eax
c001306b:	8d 44 24 19          	lea    eax,[esp+0x19]
c001306f:	50                   	push   eax
c0013070:	53                   	push   ebx
c0013071:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013075:	e8 ff f6 ff ff       	call   c0012779 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001307a:	83 c4 0c             	add    esp,0xc
c001307d:	6a 12                	push   0x12
c001307f:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013083:	50                   	push   eax
c0013084:	56                   	push   esi
c0013085:	e8 f6 d2 fe ff       	call   c0000380 <memcmp>
c001308a:	83 c4 10             	add    esp,0x10
c001308d:	85 c0                	test   eax,eax
c001308f:	74 1e                	je     c00130af <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013091:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013096:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001309b:	c1 e3 08             	shl    ebx,0x8
c001309e:	09 d8                	or     eax,ebx
c00130a0:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00130a5:	c1 e3 10             	shl    ebx,0x10
c00130a8:	09 c3                	or     ebx,eax
c00130aa:	eb ba                	jmp    c0013066 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00130ac:	83 cb ff             	or     ebx,0xffffffff
c00130af:	83 c4 44             	add    esp,0x44
c00130b2:	89 d8                	mov    eax,ebx
c00130b4:	5b                   	pop    ebx
c00130b5:	5e                   	pop    esi
c00130b6:	c3                   	ret    

c00130b7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00130b7:	57                   	push   edi
c00130b8:	56                   	push   esi
c00130b9:	53                   	push   ebx
c00130ba:	83 ec 34             	sub    esp,0x34
c00130bd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00130c1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00130c5:	6a 2b                	push   0x2b
c00130c7:	6a 00                	push   0x0
c00130c9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00130cd:	53                   	push   ebx
c00130ce:	e8 1d d4 fe ff       	call   c00004f0 <memset>
c00130d3:	58                   	pop    eax
c00130d4:	5a                   	pop    edx
c00130d5:	8d 44 24 11          	lea    eax,[esp+0x11]
c00130d9:	50                   	push   eax
c00130da:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00130de:	e8 70 fd ff ff       	call   c0012e53 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130e3:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00130e7:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00130eb:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00130ef:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00130f3:	53                   	push   ebx
c00130f4:	6a 00                	push   0x0
c00130f6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130fa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130fe:	e8 20 f9 ff ff       	call   c0012a23 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013103:	83 c4 50             	add    esp,0x50
c0013106:	5b                   	pop    ebx
c0013107:	5e                   	pop    esi
c0013108:	5f                   	pop    edi
c0013109:	c3                   	ret    

c001310a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001310a:	55                   	push   ebp
c001310b:	57                   	push   edi
c001310c:	56                   	push   esi
c001310d:	53                   	push   ebx
c001310e:	83 ec 40             	sub    esp,0x40
c0013111:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013115:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013119:	6a 2b                	push   0x2b
c001311b:	6a 00                	push   0x0
c001311d:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013121:	56                   	push   esi
c0013122:	e8 c9 d3 fe ff       	call   c00004f0 <memset>
c0013127:	5f                   	pop    edi
c0013128:	89 ef                	mov    edi,ebp
c001312a:	58                   	pop    eax
c001312b:	8d 44 24 11          	lea    eax,[esp+0x11]
c001312f:	50                   	push   eax
c0013130:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013134:	e8 1a fd ff ff       	call   c0012e53 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013139:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001313e:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013143:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013148:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001314d:	83 c4 10             	add    esp,0x10
c0013150:	85 ed                	test   ebp,ebp
c0013152:	74 14                	je     c0013168 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013154:	51                   	push   ecx
c0013155:	51                   	push   ecx
c0013156:	57                   	push   edi
c0013157:	53                   	push   ebx
c0013158:	e8 0e f7 ff ff       	call   c001286b <CmGetNext(Reghive_Tag*, int)>
c001315d:	83 c4 10             	add    esp,0x10
c0013160:	85 c0                	test   eax,eax
c0013162:	74 04                	je     c0013168 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013164:	89 c7                	mov    edi,eax
c0013166:	eb e8                	jmp    c0013150 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013168:	56                   	push   esi
c0013169:	6a 00                	push   0x0
c001316b:	57                   	push   edi
c001316c:	53                   	push   ebx
c001316d:	e8 b1 f8 ff ff       	call   c0012a23 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013172:	83 c4 0c             	add    esp,0xc
c0013175:	56                   	push   esi
c0013176:	50                   	push   eax
c0013177:	89 c7                	mov    edi,eax
c0013179:	53                   	push   ebx
c001317a:	e8 fa f5 ff ff       	call   c0012779 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001317f:	58                   	pop    eax
c0013180:	5a                   	pop    edx
c0013181:	6a 6c                	push   0x6c
c0013183:	6a 00                	push   0x0
c0013185:	6a 00                	push   0x0
c0013187:	68 bf 1e 02 c0       	push   0xc0021ebf
c001318c:	57                   	push   edi
c001318d:	53                   	push   ebx
c001318e:	e8 24 ff ff ff       	call   c00130b7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013193:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013197:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001319b:	c1 e8 10             	shr    eax,0x10
c001319e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00131a2:	83 c4 1c             	add    esp,0x1c
c00131a5:	56                   	push   esi
c00131a6:	57                   	push   edi
c00131a7:	53                   	push   ebx
c00131a8:	e8 f0 f6 ff ff       	call   c001289d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00131b2:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00131b7:	c1 e0 08             	shl    eax,0x8
c00131ba:	09 c2                	or     edx,eax
c00131bc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00131c1:	83 c4 4c             	add    esp,0x4c
c00131c4:	5b                   	pop    ebx
c00131c5:	5e                   	pop    esi
c00131c6:	c1 e0 10             	shl    eax,0x10
c00131c9:	09 d0                	or     eax,edx
c00131cb:	5f                   	pop    edi
c00131cc:	5d                   	pop    ebp
c00131cd:	c3                   	ret    

c00131ce <zStrtok(char*, char const*)>:
c00131ce:	55                   	push   ebp
c00131cf:	57                   	push   edi
c00131d0:	56                   	push   esi
c00131d1:	53                   	push   ebx
c00131d2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131da:	85 db                	test   ebx,ebx
c00131dc:	74 2f                	je     c001320d <zStrtok(char*, char const*)+0x3f>
c00131de:	85 c0                	test   eax,eax
c00131e0:	75 09                	jne    c00131eb <zStrtok(char*, char const*)+0x1d>
c00131e2:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c00131e7:	85 c0                	test   eax,eax
c00131e9:	74 50                	je     c001323b <zStrtok(char*, char const*)+0x6d>
c00131eb:	31 c9                	xor    ecx,ecx
c00131ed:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00131f1:	74 03                	je     c00131f6 <zStrtok(char*, char const*)+0x28>
c00131f3:	41                   	inc    ecx
c00131f4:	eb f7                	jmp    c00131ed <zStrtok(char*, char const*)+0x1f>
c00131f6:	31 d2                	xor    edx,edx
c00131f8:	39 ca                	cmp    edx,ecx
c00131fa:	74 15                	je     c0013211 <zStrtok(char*, char const*)+0x43>
c00131fc:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013200:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013203:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013206:	39 ee                	cmp    esi,ebp
c0013208:	74 13                	je     c001321d <zStrtok(char*, char const*)+0x4f>
c001320a:	42                   	inc    edx
c001320b:	eb eb                	jmp    c00131f8 <zStrtok(char*, char const*)+0x2a>
c001320d:	31 c0                	xor    eax,eax
c001320f:	eb 2a                	jmp    c001323b <zStrtok(char*, char const*)+0x6d>
c0013211:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c001321b:	eb 1e                	jmp    c001323b <zStrtok(char*, char const*)+0x6d>
c001321d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013220:	39 ce                	cmp    esi,ecx
c0013222:	75 0a                	jne    c001322e <zStrtok(char*, char const*)+0x60>
c0013224:	40                   	inc    eax
c0013225:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c001322a:	89 d8                	mov    eax,ebx
c001322c:	eb 0d                	jmp    c001323b <zStrtok(char*, char const*)+0x6d>
c001322e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013231:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013235:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c001323b:	5b                   	pop    ebx
c001323c:	5e                   	pop    esi
c001323d:	5f                   	pop    edi
c001323e:	5d                   	pop    ebp
c001323f:	c3                   	ret    

c0013240 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013240:	57                   	push   edi
c0013241:	56                   	push   esi
c0013242:	53                   	push   ebx
c0013243:	81 ec 08 01 00 00    	sub    esp,0x108
c0013249:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013250:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013257:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001325b:	53                   	push   ebx
c001325c:	e8 ef d3 fe ff       	call   c0000650 <strcpy>
c0013261:	59                   	pop    ecx
c0013262:	5e                   	pop    esi
c0013263:	68 23 22 02 c0       	push   0xc0022223
c0013268:	53                   	push   ebx
c0013269:	bb 01 00 00 00       	mov    ebx,0x1
c001326e:	e8 5b ff ff ff       	call   c00131ce <zStrtok(char*, char const*)>
c0013273:	83 c4 10             	add    esp,0x10
c0013276:	85 c0                	test   eax,eax
c0013278:	74 3b                	je     c00132b5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001327a:	52                   	push   edx
c001327b:	50                   	push   eax
c001327c:	6a 01                	push   0x1
c001327e:	57                   	push   edi
c001327f:	e8 b9 fd ff ff       	call   c001303d <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013284:	59                   	pop    ecx
c0013285:	5e                   	pop    esi
c0013286:	89 c3                	mov    ebx,eax
c0013288:	68 23 22 02 c0       	push   0xc0022223
c001328d:	6a 00                	push   0x0
c001328f:	e8 3a ff ff ff       	call   c00131ce <zStrtok(char*, char const*)>
c0013294:	83 c4 10             	add    esp,0x10
c0013297:	85 c0                	test   eax,eax
c0013299:	89 c6                	mov    esi,eax
c001329b:	74 18                	je     c00132b5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001329d:	52                   	push   edx
c001329e:	52                   	push   edx
c001329f:	53                   	push   ebx
c00132a0:	57                   	push   edi
c00132a1:	e8 86 f5 ff ff       	call   c001282c <CmEnterDirectory(Reghive_Tag*, int)>
c00132a6:	83 c4 10             	add    esp,0x10
c00132a9:	83 f8 ff             	cmp    eax,0xffffffff
c00132ac:	89 c3                	mov    ebx,eax
c00132ae:	74 05                	je     c00132b5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132b0:	50                   	push   eax
c00132b1:	56                   	push   esi
c00132b2:	53                   	push   ebx
c00132b3:	eb c9                	jmp    c001327e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00132b5:	81 c4 00 01 00 00    	add    esp,0x100
c00132bb:	89 d8                	mov    eax,ebx
c00132bd:	5b                   	pop    ebx
c00132be:	5e                   	pop    esi
c00132bf:	5f                   	pop    edi
c00132c0:	c3                   	ret    

c00132c1 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00132c1:	55                   	push   ebp
c00132c2:	57                   	push   edi
c00132c3:	56                   	push   esi
c00132c4:	53                   	push   ebx
c00132c5:	83 ec 5c             	sub    esp,0x5c
c00132c8:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00132cc:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00132d0:	85 db                	test   ebx,ebx
c00132d2:	0f 8e 84 00 00 00    	jle    c001335c <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00132d8:	57                   	push   edi
c00132d9:	31 ed                	xor    ebp,ebp
c00132db:	6a 32                	push   0x32
c00132dd:	6a 00                	push   0x0
c00132df:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00132e3:	57                   	push   edi
c00132e4:	e8 07 d2 fe ff       	call   c00004f0 <memset>
c00132e9:	83 c4 0c             	add    esp,0xc
c00132ec:	57                   	push   edi
c00132ed:	53                   	push   ebx
c00132ee:	56                   	push   esi
c00132ef:	e8 31 fb ff ff       	call   c0012e25 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00132f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132f8:	83 c4 10             	add    esp,0x10
c00132fb:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00132ff:	7d 13                	jge    c0013314 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013301:	83 ec 0c             	sub    esp,0xc
c0013304:	45                   	inc    ebp
c0013305:	68 c7 25 02 c0       	push   0xc00225c7
c001330a:	e8 fb 75 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001330f:	83 c4 10             	add    esp,0x10
c0013312:	eb e7                	jmp    c00132fb <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013314:	51                   	push   ecx
c0013315:	57                   	push   edi
c0013316:	53                   	push   ebx
c0013317:	68 c5 1e 02 c0       	push   0xc0021ec5
c001331c:	e8 e9 75 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013321:	83 c4 10             	add    esp,0x10
c0013324:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013329:	75 1e                	jne    c0013349 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001332b:	52                   	push   edx
c001332c:	52                   	push   edx
c001332d:	53                   	push   ebx
c001332e:	56                   	push   esi
c001332f:	e8 f8 f4 ff ff       	call   c001282c <CmEnterDirectory(Reghive_Tag*, int)>
c0013334:	83 c4 0c             	add    esp,0xc
c0013337:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001333b:	8d 51 04             	lea    edx,[ecx+0x4]
c001333e:	52                   	push   edx
c001333f:	50                   	push   eax
c0013340:	56                   	push   esi
c0013341:	e8 7b ff ff ff       	call   c00132c1 <CmDisplayTree(Reghive_Tag*, int, int)>
c0013346:	83 c4 10             	add    esp,0x10
c0013349:	50                   	push   eax
c001334a:	50                   	push   eax
c001334b:	53                   	push   ebx
c001334c:	56                   	push   esi
c001334d:	e8 19 f5 ff ff       	call   c001286b <CmGetNext(Reghive_Tag*, int)>
c0013352:	83 c4 10             	add    esp,0x10
c0013355:	89 c3                	mov    ebx,eax
c0013357:	e9 74 ff ff ff       	jmp    c00132d0 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c001335c:	83 c4 5c             	add    esp,0x5c
c001335f:	5b                   	pop    ebx
c0013360:	5e                   	pop    esi
c0013361:	5f                   	pop    edi
c0013362:	5d                   	pop    ebp
c0013363:	c3                   	ret    

c0013364 <CmSplitFinalSlashInPlace(char*)>:
c0013364:	53                   	push   ebx
c0013365:	83 ec 14             	sub    esp,0x14
c0013368:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001336c:	53                   	push   ebx
c001336d:	e8 0e d2 fe ff       	call   c0000580 <strlen>
c0013372:	83 c4 10             	add    esp,0x10
c0013375:	48                   	dec    eax
c0013376:	85 c0                	test   eax,eax
c0013378:	74 15                	je     c001338f <CmSplitFinalSlashInPlace(char*)+0x2b>
c001337a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001337e:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013381:	75 09                	jne    c001338c <CmSplitFinalSlashInPlace(char*)+0x28>
c0013383:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013386:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001338a:	eb 05                	jmp    c0013391 <CmSplitFinalSlashInPlace(char*)+0x2d>
c001338c:	48                   	dec    eax
c001338d:	eb e7                	jmp    c0013376 <CmSplitFinalSlashInPlace(char*)+0x12>
c001338f:	31 c0                	xor    eax,eax
c0013391:	83 c4 08             	add    esp,0x8
c0013394:	5b                   	pop    ebx
c0013395:	c3                   	ret    

c0013396 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013396:	55                   	push   ebp
c0013397:	57                   	push   edi
c0013398:	56                   	push   esi
c0013399:	53                   	push   ebx
c001339a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00133a0:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00133a7:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00133aa:	8d 43 01             	lea    eax,[ebx+0x1]
c00133ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133b1:	89 f0                	mov    eax,esi
c00133b3:	3c 40                	cmp    al,0x40
c00133b5:	75 1b                	jne    c00133d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00133b7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00133ba:	85 c0                	test   eax,eax
c00133bc:	74 08                	je     c00133c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00133be:	83 f8 3a             	cmp    eax,0x3a
c00133c1:	74 03                	je     c00133c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00133c3:	43                   	inc    ebx
c00133c4:	eb f1                	jmp    c00133b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00133c6:	85 c0                	test   eax,eax
c00133c8:	0f 84 45 01 00 00    	je     c0013513 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00133ce:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00133d1:	43                   	inc    ebx
c00133d2:	50                   	push   eax
c00133d3:	6a 40                	push   0x40
c00133d5:	6a 00                	push   0x0
c00133d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00133db:	50                   	push   eax
c00133dc:	e8 0f d1 fe ff       	call   c00004f0 <memset>
c00133e1:	89 f1                	mov    ecx,esi
c00133e3:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00133ea:	31 c0                	xor    eax,eax
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	0f be f1             	movsx  esi,cl
c00133f2:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00133f5:	85 d2                	test   edx,edx
c00133f7:	89 d1                	mov    ecx,edx
c00133f9:	0f 84 14 01 00 00    	je     c0013513 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00133ff:	3d c7 00 00 00       	cmp    eax,0xc7
c0013404:	0f 8f 09 01 00 00    	jg     c0013513 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001340a:	83 fa 0a             	cmp    edx,0xa
c001340d:	0f 85 f1 00 00 00    	jne    c0013504 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013413:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013418:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c001341d:	89 c8                	mov    eax,ecx
c001341f:	a8 df                	test   al,0xdf
c0013421:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013426:	83 f9 23             	cmp    ecx,0x23
c0013429:	0f 94 c2             	sete   dl
c001342c:	89 d5                	mov    ebp,edx
c001342e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013432:	09 ea                	or     edx,ebp
c0013434:	80 e2 01             	and    dl,0x1
c0013437:	75 47                	jne    c0013480 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013439:	83 e8 09             	sub    eax,0x9
c001343c:	3c 01                	cmp    al,0x1
c001343e:	76 40                	jbe    c0013480 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013440:	83 f9 5b             	cmp    ecx,0x5b
c0013443:	75 42                	jne    c0013487 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013445:	83 fe 40             	cmp    esi,0x40
c0013448:	75 36                	jne    c0013480 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001344a:	83 ec 0c             	sub    esp,0xc
c001344d:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013451:	55                   	push   ebp
c0013452:	e8 29 d1 fe ff       	call   c0000580 <strlen>
c0013457:	83 c4 10             	add    esp,0x10
c001345a:	83 f8 3f             	cmp    eax,0x3f
c001345d:	0f 87 b0 00 00 00    	ja     c0013513 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013463:	50                   	push   eax
c0013464:	50                   	push   eax
c0013465:	55                   	push   ebp
c0013466:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c001346a:	55                   	push   ebp
c001346b:	e8 e0 d1 fe ff       	call   c0000650 <strcpy>
c0013470:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013473:	e8 08 d1 fe ff       	call   c0000580 <strlen>
c0013478:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001347d:	83 c4 10             	add    esp,0x10
c0013480:	31 d2                	xor    edx,edx
c0013482:	e9 84 00 00 00       	jmp    c001350b <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013487:	83 fe 40             	cmp    esi,0x40
c001348a:	74 06                	je     c0013492 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c001348c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013490:	eb 19                	jmp    c00134ab <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013492:	51                   	push   ecx
c0013493:	51                   	push   ecx
c0013494:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013498:	8d 44 24 24          	lea    eax,[esp+0x24]
c001349c:	50                   	push   eax
c001349d:	e8 de d2 fe ff       	call   c0000780 <strcmp>
c00134a2:	83 c4 10             	add    esp,0x10
c00134a5:	85 c0                	test   eax,eax
c00134a7:	75 d7                	jne    c0013480 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00134a9:	eb e1                	jmp    c001348c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c00134ab:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00134ae:	85 c9                	test   ecx,ecx
c00134b0:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00134b5:	83 f9 3d             	cmp    ecx,0x3d
c00134b8:	0f 94 c0             	sete   al
c00134bb:	89 c5                	mov    ebp,eax
c00134bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134c1:	09 e8                	or     eax,ebp
c00134c3:	a8 01                	test   al,0x1
c00134c5:	89 c5                	mov    ebp,eax
c00134c7:	75 03                	jne    c00134cc <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c00134c9:	42                   	inc    edx
c00134ca:	eb df                	jmp    c00134ab <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00134cc:	85 c9                	test   ecx,ecx
c00134ce:	74 43                	je     c0013513 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00134d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00134d4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00134d7:	52                   	push   edx
c00134d8:	52                   	push   edx
c00134d9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00134dd:	50                   	push   eax
c00134de:	53                   	push   ebx
c00134df:	e8 9c d2 fe ff       	call   c0000780 <strcmp>
c00134e4:	83 c4 10             	add    esp,0x10
c00134e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00134eb:	85 c0                	test   eax,eax
c00134ed:	75 91                	jne    c0013480 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00134ef:	50                   	push   eax
c00134f0:	42                   	inc    edx
c00134f1:	50                   	push   eax
c00134f2:	52                   	push   edx
c00134f3:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00134fa:	e8 51 d1 fe ff       	call   c0000650 <strcpy>
c00134ff:	83 c4 10             	add    esp,0x10
c0013502:	eb 11                	jmp    c0013515 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013504:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013508:	8d 50 01             	lea    edx,[eax+0x1]
c001350b:	47                   	inc    edi
c001350c:	89 d0                	mov    eax,edx
c001350e:	e9 df fe ff ff       	jmp    c00133f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013513:	31 ed                	xor    ebp,ebp
c0013515:	81 c4 2c 01 00 00    	add    esp,0x12c
c001351b:	89 e8                	mov    eax,ebp
c001351d:	5b                   	pop    ebx
c001351e:	5e                   	pop    esi
c001351f:	5f                   	pop    edi
c0013520:	5d                   	pop    ebp
c0013521:	c3                   	ret    

c0013522 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013522:	57                   	push   edi
c0013523:	56                   	push   esi
c0013524:	53                   	push   ebx
c0013525:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001352b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013532:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013539:	53                   	push   ebx
c001353a:	e8 41 d0 fe ff       	call   c0000580 <strlen>
c001353f:	89 34 24             	mov    DWORD PTR [esp],esi
c0013542:	89 c7                	mov    edi,eax
c0013544:	e8 37 d0 fe ff       	call   c0000580 <strlen>
c0013549:	83 c4 10             	add    esp,0x10
c001354c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013550:	3d ff 00 00 00       	cmp    eax,0xff
c0013555:	0f 87 d3 00 00 00    	ja     c001362e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001355b:	57                   	push   edi
c001355c:	57                   	push   edi
c001355d:	56                   	push   esi
c001355e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013562:	56                   	push   esi
c0013563:	e8 e8 d0 fe ff       	call   c0000650 <strcpy>
c0013568:	58                   	pop    eax
c0013569:	5a                   	pop    edx
c001356a:	68 23 22 02 c0       	push   0xc0022223
c001356f:	56                   	push   esi
c0013570:	e8 fb d2 fe ff       	call   c0000870 <strcat>
c0013575:	59                   	pop    ecx
c0013576:	5f                   	pop    edi
c0013577:	53                   	push   ebx
c0013578:	56                   	push   esi
c0013579:	e8 f2 d2 fe ff       	call   c0000870 <strcat>
c001357e:	58                   	pop    eax
c001357f:	5a                   	pop    edx
c0013580:	68 cf 1e 02 c0       	push   0xc0021ecf
c0013585:	56                   	push   esi
c0013586:	e8 e5 d2 fe ff       	call   c0000870 <strcat>
c001358b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013592:	e8 3c 45 ff ff       	call   c0007ad3 <malloc>
c0013597:	83 c4 0c             	add    esp,0xc
c001359a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00135a0:	56                   	push   esi
c00135a1:	50                   	push   eax
c00135a2:	89 c3                	mov    ebx,eax
c00135a4:	e8 57 81 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c00135a9:	83 c4 10             	add    esp,0x10
c00135ac:	85 db                	test   ebx,ebx
c00135ae:	74 7e                	je     c001362e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00135b0:	51                   	push   ecx
c00135b1:	51                   	push   ecx
c00135b2:	6a 01                	push   0x1
c00135b4:	53                   	push   ebx
c00135b5:	e8 02 82 ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c00135ba:	83 c4 10             	add    esp,0x10
c00135bd:	85 c0                	test   eax,eax
c00135bf:	74 08                	je     c00135c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00135c1:	83 ec 0c             	sub    esp,0xc
c00135c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135c6:	53                   	push   ebx
c00135c7:	eb 5f                	jmp    c0013628 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00135c9:	52                   	push   edx
c00135ca:	8d 44 24 17          	lea    eax,[esp+0x17]
c00135ce:	50                   	push   eax
c00135cf:	8d 44 24 20          	lea    eax,[esp+0x20]
c00135d3:	50                   	push   eax
c00135d4:	53                   	push   ebx
c00135d5:	e8 e4 84 ff ff       	call   c000babe <File::stat(unsigned long long*, bool*)>
c00135da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00135de:	83 c4 10             	add    esp,0x10
c00135e1:	89 c1                	mov    ecx,eax
c00135e3:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00135e7:	74 31                	je     c001361a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00135e9:	83 ec 0c             	sub    esp,0xc
c00135ec:	50                   	push   eax
c00135ed:	e8 e1 44 ff ff       	call   c0007ad3 <malloc>
c00135f2:	89 c6                	mov    esi,eax
c00135f4:	58                   	pop    eax
c00135f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135f7:	8d 54 24 20          	lea    edx,[esp+0x20]
c00135fb:	52                   	push   edx
c00135fc:	56                   	push   esi
c00135fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013601:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013605:	53                   	push   ebx
c0013606:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013609:	83 c4 20             	add    esp,0x20
c001360c:	85 c0                	test   eax,eax
c001360e:	75 0a                	jne    c001361a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013614:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013618:	74 18                	je     c0013632 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001361a:	83 ec 0c             	sub    esp,0xc
c001361d:	53                   	push   ebx
c001361e:	e8 f7 81 ff ff       	call   c000b81a <File::close()>
c0013623:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013625:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013628:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001362b:	83 c4 10             	add    esp,0x10
c001362e:	31 c0                	xor    eax,eax
c0013630:	eb 3b                	jmp    c001366d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013632:	83 ec 0c             	sub    esp,0xc
c0013635:	53                   	push   ebx
c0013636:	e8 df 81 ff ff       	call   c000b81a <File::close()>
c001363b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001363d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013640:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013643:	83 c4 0c             	add    esp,0xc
c0013646:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001364d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013654:	56                   	push   esi
c0013655:	e8 3c fd ff ff       	call   c0013396 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001365a:	89 34 24             	mov    DWORD PTR [esp],esi
c001365d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013661:	e8 7d 44 ff ff       	call   c0007ae3 <free>
c0013666:	83 c4 10             	add    esp,0x10
c0013669:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001366d:	81 c4 20 01 00 00    	add    esp,0x120
c0013673:	5b                   	pop    ebx
c0013674:	5e                   	pop    esi
c0013675:	5f                   	pop    edi
c0013676:	c3                   	ret    

c0013677 <Reg::getLine(char*, char*, char*)>:
c0013677:	57                   	push   edi
c0013678:	56                   	push   esi
c0013679:	53                   	push   ebx
c001367a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001367e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013682:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013686:	57                   	push   edi
c0013687:	56                   	push   esi
c0013688:	53                   	push   ebx
c0013689:	68 d4 1e 02 c0       	push   0xc0021ed4
c001368e:	e8 8f fe ff ff       	call   c0013522 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013693:	83 c4 10             	add    esp,0x10
c0013696:	84 c0                	test   al,al
c0013698:	75 10                	jne    c00136aa <Reg::getLine(char*, char*, char*)+0x33>
c001369a:	57                   	push   edi
c001369b:	56                   	push   esi
c001369c:	53                   	push   ebx
c001369d:	68 f9 1e 02 c0       	push   0xc0021ef9
c00136a2:	e8 7b fe ff ff       	call   c0013522 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00136a7:	83 c4 10             	add    esp,0x10
c00136aa:	5b                   	pop    ebx
c00136ab:	5e                   	pop    esi
c00136ac:	5f                   	pop    edi
c00136ad:	c3                   	ret    

c00136ae <Reg::readInt(char*, char*, int*)>:
c00136ae:	55                   	push   ebp
c00136af:	57                   	push   edi
c00136b0:	56                   	push   esi
c00136b1:	53                   	push   ebx
c00136b2:	81 ec f0 00 00 00    	sub    esp,0xf0
c00136b8:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00136bc:	55                   	push   ebp
c00136bd:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00136c4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00136cb:	e8 a7 ff ff ff       	call   c0013677 <Reg::getLine(char*, char*, char*)>
c00136d0:	83 c4 10             	add    esp,0x10
c00136d3:	84 c0                	test   al,al
c00136d5:	0f 84 b6 00 00 00    	je     c0013791 <Reg::readInt(char*, char*, int*)+0xe3>
c00136db:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00136e0:	83 fa 2b             	cmp    edx,0x2b
c00136e3:	74 0c                	je     c00136f1 <Reg::readInt(char*, char*, int*)+0x43>
c00136e5:	83 fa 2d             	cmp    edx,0x2d
c00136e8:	75 0e                	jne    c00136f8 <Reg::readInt(char*, char*, int*)+0x4a>
c00136ea:	ba 01 00 00 00       	mov    edx,0x1
c00136ef:	eb 0b                	jmp    c00136fc <Reg::readInt(char*, char*, int*)+0x4e>
c00136f1:	ba 01 00 00 00       	mov    edx,0x1
c00136f6:	eb 02                	jmp    c00136fa <Reg::readInt(char*, char*, int*)+0x4c>
c00136f8:	31 d2                	xor    edx,edx
c00136fa:	31 c0                	xor    eax,eax
c00136fc:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013701:	be 0a 00 00 00       	mov    esi,0xa
c0013706:	75 21                	jne    c0013729 <Reg::readInt(char*, char*, int*)+0x7b>
c0013708:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c001370d:	83 f9 78             	cmp    ecx,0x78
c0013710:	75 0a                	jne    c001371c <Reg::readInt(char*, char*, int*)+0x6e>
c0013712:	83 c2 02             	add    edx,0x2
c0013715:	be 10 00 00 00       	mov    esi,0x10
c001371a:	eb 0d                	jmp    c0013729 <Reg::readInt(char*, char*, int*)+0x7b>
c001371c:	83 f9 62             	cmp    ecx,0x62
c001371f:	75 08                	jne    c0013729 <Reg::readInt(char*, char*, int*)+0x7b>
c0013721:	83 c2 02             	add    edx,0x2
c0013724:	be 02 00 00 00       	mov    esi,0x2
c0013729:	01 d5                	add    ebp,edx
c001372b:	31 d2                	xor    edx,edx
c001372d:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013731:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013735:	85 c9                	test   ecx,ecx
c0013737:	0f 94 c3             	sete   bl
c001373a:	83 f9 0d             	cmp    ecx,0xd
c001373d:	89 df                	mov    edi,ebx
c001373f:	0f 94 c3             	sete   bl
c0013742:	09 df                	or     edi,ebx
c0013744:	89 fb                	mov    ebx,edi
c0013746:	83 e7 01             	and    edi,0x1
c0013749:	75 35                	jne    c0013780 <Reg::readInt(char*, char*, int*)+0xd2>
c001374b:	0f af d6             	imul   edx,esi
c001374e:	83 fe 10             	cmp    esi,0x10
c0013751:	75 26                	jne    c0013779 <Reg::readInt(char*, char*, int*)+0xcb>
c0013753:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013757:	83 ef 41             	sub    edi,0x41
c001375a:	89 fb                	mov    ebx,edi
c001375c:	80 fb 05             	cmp    bl,0x5
c001375f:	77 06                	ja     c0013767 <Reg::readInt(char*, char*, int*)+0xb9>
c0013761:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013765:	eb 16                	jmp    c001377d <Reg::readInt(char*, char*, int*)+0xcf>
c0013767:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001376b:	83 eb 61             	sub    ebx,0x61
c001376e:	80 fb 05             	cmp    bl,0x5
c0013771:	77 06                	ja     c0013779 <Reg::readInt(char*, char*, int*)+0xcb>
c0013773:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013777:	eb 04                	jmp    c001377d <Reg::readInt(char*, char*, int*)+0xcf>
c0013779:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c001377d:	45                   	inc    ebp
c001377e:	eb ad                	jmp    c001372d <Reg::readInt(char*, char*, int*)+0x7f>
c0013780:	84 c0                	test   al,al
c0013782:	74 02                	je     c0013786 <Reg::readInt(char*, char*, int*)+0xd8>
c0013784:	f7 da                	neg    edx
c0013786:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001378d:	89 10                	mov    DWORD PTR [eax],edx
c001378f:	88 d8                	mov    al,bl
c0013791:	81 c4 ec 00 00 00    	add    esp,0xec
c0013797:	5b                   	pop    ebx
c0013798:	5e                   	pop    esi
c0013799:	5f                   	pop    edi
c001379a:	5d                   	pop    ebp
c001379b:	c3                   	ret    

c001379c <Reg::readString(char*, char*, char*, int)>:
c001379c:	57                   	push   edi
c001379d:	56                   	push   esi
c001379e:	53                   	push   ebx
c001379f:	81 ec d4 00 00 00    	sub    esp,0xd4
c00137a5:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00137a9:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00137b0:	57                   	push   edi
c00137b1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137b8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137bf:	e8 b3 fe ff ff       	call   c0013677 <Reg::getLine(char*, char*, char*)>
c00137c4:	83 c4 10             	add    esp,0x10
c00137c7:	84 c0                	test   al,al
c00137c9:	89 c6                	mov    esi,eax
c00137cb:	74 44                	je     c0013811 <Reg::readString(char*, char*, char*, int)+0x75>
c00137cd:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00137d4:	31 c0                	xor    eax,eax
c00137d6:	4a                   	dec    edx
c00137d7:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00137da:	84 c9                	test   cl,cl
c00137dc:	74 0f                	je     c00137ed <Reg::readString(char*, char*, char*, int)+0x51>
c00137de:	39 c2                	cmp    edx,eax
c00137e0:	7e 0b                	jle    c00137ed <Reg::readString(char*, char*, char*, int)+0x51>
c00137e2:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00137e5:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00137ea:	40                   	inc    eax
c00137eb:	eb ea                	jmp    c00137d7 <Reg::readString(char*, char*, char*, int)+0x3b>
c00137ed:	83 ec 0c             	sub    esp,0xc
c00137f0:	53                   	push   ebx
c00137f1:	e8 8a cd fe ff       	call   c0000580 <strlen>
c00137f6:	83 c4 10             	add    esp,0x10
c00137f9:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00137fe:	75 11                	jne    c0013811 <Reg::readString(char*, char*, char*, int)+0x75>
c0013800:	83 ec 0c             	sub    esp,0xc
c0013803:	53                   	push   ebx
c0013804:	e8 77 cd fe ff       	call   c0000580 <strlen>
c0013809:	83 c4 10             	add    esp,0x10
c001380c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013811:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013817:	89 f0                	mov    eax,esi
c0013819:	5b                   	pop    ebx
c001381a:	5e                   	pop    esi
c001381b:	5f                   	pop    edi
c001381c:	c3                   	ret    

c001381d <Reg::readBool(char*, char*, bool*)>:
c001381d:	83 ec 20             	sub    esp,0x20
c0013820:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013824:	50                   	push   eax
c0013825:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013829:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001382d:	e8 7c fe ff ff       	call   c00136ae <Reg::readInt(char*, char*, int*)>
c0013832:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013836:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001383b:	0f 95 02             	setne  BYTE PTR [edx]
c001383e:	83 c4 2c             	add    esp,0x2c
c0013841:	c3                   	ret    

c0013842 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013842:	53                   	push   ebx
c0013843:	83 ec 1c             	sub    esp,0x1c
c0013846:	8d 44 24 13          	lea    eax,[esp+0x13]
c001384a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001384e:	50                   	push   eax
c001384f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013853:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013857:	e8 c1 ff ff ff       	call   c001381d <Reg::readBool(char*, char*, bool*)>
c001385c:	83 c4 10             	add    esp,0x10
c001385f:	84 c0                	test   al,al
c0013861:	74 04                	je     c0013867 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013863:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013867:	83 c4 18             	add    esp,0x18
c001386a:	88 d8                	mov    al,bl
c001386c:	5b                   	pop    ebx
c001386d:	c3                   	ret    

c001386e <Reg::readIntWithDefault(char*, char*, int)>:
c001386e:	53                   	push   ebx
c001386f:	83 ec 1c             	sub    esp,0x1c
c0013872:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013876:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001387a:	50                   	push   eax
c001387b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001387f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013883:	e8 26 fe ff ff       	call   c00136ae <Reg::readInt(char*, char*, int*)>
c0013888:	83 c4 10             	add    esp,0x10
c001388b:	84 c0                	test   al,al
c001388d:	74 04                	je     c0013893 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001388f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013893:	83 c4 18             	add    esp,0x18
c0013896:	89 d8                	mov    eax,ebx
c0013898:	5b                   	pop    ebx
c0013899:	c3                   	ret    

c001389a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001389a:	57                   	push   edi
c001389b:	56                   	push   esi
c001389c:	53                   	push   ebx
c001389d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00138a1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00138a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00138a9:	56                   	push   esi
c00138aa:	57                   	push   edi
c00138ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138b3:	e8 e4 fe ff ff       	call   c001379c <Reg::readString(char*, char*, char*, int)>
c00138b8:	83 c4 10             	add    esp,0x10
c00138bb:	84 c0                	test   al,al
c00138bd:	75 16                	jne    c00138d5 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00138bf:	50                   	push   eax
c00138c0:	56                   	push   esi
c00138c1:	6a 00                	push   0x0
c00138c3:	57                   	push   edi
c00138c4:	e8 27 cc fe ff       	call   c00004f0 <memset>
c00138c9:	8d 4e ff             	lea    ecx,[esi-0x1]
c00138cc:	89 de                	mov    esi,ebx
c00138ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138d0:	83 c4 10             	add    esp,0x10
c00138d3:	89 df                	mov    edi,ebx
c00138d5:	5b                   	pop    ebx
c00138d6:	89 f8                	mov    eax,edi
c00138d8:	5e                   	pop    esi
c00138d9:	5f                   	pop    edi
c00138da:	c3                   	ret    

c00138db <SysEject(regs*)>:
c00138db:	83 ec 0c             	sub    esp,0xc
c00138de:	83 ca ff             	or     edx,0xffffffff
c00138e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00138e8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00138ed:	83 e9 41             	sub    ecx,0x41
c00138f0:	83 f9 19             	cmp    ecx,0x19
c00138f3:	77 18                	ja     c001390d <SysEject(regs*)+0x32>
c00138f5:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c00138fc:	85 c9                	test   ecx,ecx
c00138fe:	74 0d                	je     c001390d <SysEject(regs*)+0x32>
c0013900:	83 ec 0c             	sub    esp,0xc
c0013903:	51                   	push   ecx
c0013904:	e8 87 a0 ff ff       	call   c000d990 <LogicalDisk::eject()>
c0013909:	83 c4 10             	add    esp,0x10
c001390c:	99                   	cdq    
c001390d:	83 c4 0c             	add    esp,0xc
c0013910:	c3                   	ret    

c0013911 <SysExit(regs*)>:
c0013911:	83 ec 18             	sub    esp,0x18
c0013914:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013918:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001391b:	e8 10 2b 00 00       	call   c0016430 <terminateTask(int)>
c0013920:	83 c8 ff             	or     eax,0xffffffff
c0013923:	83 c4 1c             	add    esp,0x1c
c0013926:	89 c2                	mov    edx,eax
c0013928:	c3                   	ret    

c0013929 <SysGetCwd(regs*)>:
c0013929:	83 ec 10             	sub    esp,0x10
c001392c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013930:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013933:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013936:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001393b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001393e:	e8 8d 7b ff ff       	call   c000b4d0 <Fs::getcwd(Process*, char*, int)>
c0013943:	83 c4 1c             	add    esp,0x1c
c0013946:	99                   	cdq    
c0013947:	c3                   	ret    

c0013948 <SysGetPID(regs*)>:
c0013948:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001394d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013950:	8b 00                	mov    eax,DWORD PTR [eax]
c0013952:	99                   	cdq    
c0013953:	c3                   	ret    

c0013954 <SysGetRAMData(regs*)>:
c0013954:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c001395e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013964:	99                   	cdq    
c0013965:	f7 f9                	idiv   ecx
c0013967:	c1 e0 18             	shl    eax,0x18
c001396a:	09 c8                	or     eax,ecx
c001396c:	99                   	cdq    
c001396d:	c3                   	ret    

c001396e <SysGetVGAPtr(regs*)>:
c001396e:	55                   	push   ebp
c001396f:	57                   	push   edi
c0013970:	56                   	push   esi
c0013971:	53                   	push   ebx
c0013972:	83 ec 18             	sub    esp,0x18
c0013975:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013979:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001397c:	e8 7b 25 00 00       	call   c0015efc <Thr::processFromPID(int)>
c0013981:	83 c4 10             	add    esp,0x10
c0013984:	89 c1                	mov    ecx,eax
c0013986:	b8 01 00 00 00       	mov    eax,0x1
c001398b:	85 c9                	test   ecx,ecx
c001398d:	74 57                	je     c00139e6 <SysGetVGAPtr(regs*)+0x78>
c001398f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013993:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013999:	74 0c                	je     c00139a7 <SysGetVGAPtr(regs*)+0x39>
c001399b:	83 ec 0c             	sub    esp,0xc
c001399e:	55                   	push   ebp
c001399f:	e8 cb 4d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c00139a4:	83 c4 10             	add    esp,0x10
c00139a7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00139aa:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00139af:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00139b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00139b4:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00139b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139ba:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00139c0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139c3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00139c6:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00139cc:	50                   	push   eax
c00139cd:	50                   	push   eax
c00139ce:	68 14 1f 02 c0       	push   0xc0021f14
c00139d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139d6:	05 a8 0f 00 00       	add    eax,0xfa8
c00139db:	50                   	push   eax
c00139dc:	e8 6f cc fe ff       	call   c0000650 <strcpy>
c00139e1:	83 c4 10             	add    esp,0x10
c00139e4:	31 c0                	xor    eax,eax
c00139e6:	83 c4 0c             	add    esp,0xc
c00139e9:	31 d2                	xor    edx,edx
c00139eb:	5b                   	pop    ebx
c00139ec:	5e                   	pop    esi
c00139ed:	5f                   	pop    edi
c00139ee:	5d                   	pop    ebp
c00139ef:	c3                   	ret    

c00139f0 <SysKill(regs*)>:
c00139f0:	53                   	push   ebx
c00139f1:	83 ec 08             	sub    esp,0x8
c00139f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139f8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00139fc:	75 16                	jne    c0013a14 <SysKill(regs*)+0x24>
c00139fe:	83 ec 0c             	sub    esp,0xc
c0013a01:	68 1e 1f 02 c0       	push   0xc0021f1e
c0013a06:	e8 a2 d7 ff ff       	call   c00111ad <KePanic(char const*)>
c0013a0b:	83 c4 10             	add    esp,0x10
c0013a0e:	e9 89 00 00 00       	jmp    c0013a9c <SysKill(regs*)+0xac>
c0013a13:	90                   	nop
c0013a14:	83 ec 0c             	sub    esp,0xc
c0013a17:	68 e4 96 02 c0       	push   0xc00296e4
c0013a1c:	e8 3b bd 00 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a21:	8d 76 00             	lea    esi,[esi+0x0]
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	85 c0                	test   eax,eax
c0013a29:	74 19                	je     c0013a44 <SysKill(regs*)+0x54>
c0013a2b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a2e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a31:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a33:	74 33                	je     c0013a68 <SysKill(regs*)+0x78>
c0013a35:	52                   	push   edx
c0013a36:	52                   	push   edx
c0013a37:	50                   	push   eax
c0013a38:	68 e4 96 02 c0       	push   0xc00296e4
c0013a3d:	e8 3a c0 00 00       	call   c001fa7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013a42:	eb e0                	jmp    c0013a24 <SysKill(regs*)+0x34>
c0013a44:	83 ec 0c             	sub    esp,0xc
c0013a47:	68 d8 96 02 c0       	push   0xc00296d8
c0013a4c:	e8 0b bd 00 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a51:	8d 76 00             	lea    esi,[esi+0x0]
c0013a54:	83 c4 10             	add    esp,0x10
c0013a57:	85 c0                	test   eax,eax
c0013a59:	74 41                	je     c0013a9c <SysKill(regs*)+0xac>
c0013a5b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a5e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a61:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a63:	75 27                	jne    c0013a8c <SysKill(regs*)+0x9c>
c0013a65:	8d 76 00             	lea    esi,[esi+0x0]
c0013a68:	51                   	push   ecx
c0013a69:	51                   	push   ecx
c0013a6a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013a6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a75:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013a7b:	e8 cb db ff ff       	call   c001164b <KeRaiseSignal(SigHandlerBlock*, int)>
c0013a80:	83 c4 10             	add    esp,0x10
c0013a83:	31 c0                	xor    eax,eax
c0013a85:	31 d2                	xor    edx,edx
c0013a87:	eb 1b                	jmp    c0013aa4 <SysKill(regs*)+0xb4>
c0013a89:	8d 76 00             	lea    esi,[esi+0x0]
c0013a8c:	52                   	push   edx
c0013a8d:	52                   	push   edx
c0013a8e:	50                   	push   eax
c0013a8f:	68 d8 96 02 c0       	push   0xc00296d8
c0013a94:	e8 e3 bf 00 00       	call   c001fa7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013a99:	eb b9                	jmp    c0013a54 <SysKill(regs*)+0x64>
c0013a9b:	90                   	nop
c0013a9c:	83 c8 ff             	or     eax,0xffffffff
c0013a9f:	89 c2                	mov    edx,eax
c0013aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa4:	83 c4 08             	add    esp,0x8
c0013aa7:	5b                   	pop    ebx
c0013aa8:	c3                   	ret    

c0013aa9 <SysLoadDLL(regs*)>:
c0013aa9:	56                   	push   esi
c0013aaa:	31 d2                	xor    edx,edx
c0013aac:	53                   	push   ebx
c0013aad:	b8 01 00 00 00       	mov    eax,0x1
c0013ab2:	51                   	push   ecx
c0013ab3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ab7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013abb:	0f 84 8c 00 00 00    	je     c0013b4d <SysLoadDLL(regs*)+0xa4>
c0013ac1:	83 ec 0c             	sub    esp,0xc
c0013ac4:	68 14 01 00 00       	push   0x114
c0013ac9:	e8 05 40 ff ff       	call   c0007ad3 <malloc>
c0013ace:	83 c4 0c             	add    esp,0xc
c0013ad1:	89 c3                	mov    ebx,eax
c0013ad3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ad8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013adb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013ade:	53                   	push   ebx
c0013adf:	e8 1c 7c ff ff       	call   c000b700 <File::File(char const*, Process*)>
c0013ae4:	83 c4 10             	add    esp,0x10
c0013ae7:	31 d2                	xor    edx,edx
c0013ae9:	85 db                	test   ebx,ebx
c0013aeb:	b8 02 00 00 00       	mov    eax,0x2
c0013af0:	74 5b                	je     c0013b4d <SysLoadDLL(regs*)+0xa4>
c0013af2:	83 ec 0c             	sub    esp,0xc
c0013af5:	53                   	push   ebx
c0013af6:	e8 85 7f ff ff       	call   c000ba80 <File::exists()>
c0013afb:	83 c4 10             	add    esp,0x10
c0013afe:	84 c0                	test   al,al
c0013b00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b02:	75 11                	jne    c0013b15 <SysLoadDLL(regs*)+0x6c>
c0013b04:	83 ec 0c             	sub    esp,0xc
c0013b07:	53                   	push   ebx
c0013b08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b0b:	83 c4 10             	add    esp,0x10
c0013b0e:	b8 03 00 00 00       	mov    eax,0x3
c0013b13:	eb 36                	jmp    c0013b4b <SysLoadDLL(regs*)+0xa2>
c0013b15:	83 ec 0c             	sub    esp,0xc
c0013b18:	53                   	push   ebx
c0013b19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b1c:	58                   	pop    eax
c0013b1d:	5a                   	pop    edx
c0013b1e:	6a 00                	push   0x0
c0013b20:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b23:	e8 1c 15 00 00       	call   c0015044 <Thr::loadDLL(char const*, bool)>
c0013b28:	83 c4 10             	add    esp,0x10
c0013b2b:	31 d2                	xor    edx,edx
c0013b2d:	89 c1                	mov    ecx,eax
c0013b2f:	b8 04 00 00 00       	mov    eax,0x4
c0013b34:	85 c9                	test   ecx,ecx
c0013b36:	74 15                	je     c0013b4d <SysLoadDLL(regs*)+0xa4>
c0013b38:	53                   	push   ebx
c0013b39:	53                   	push   ebx
c0013b3a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013b40:	51                   	push   ecx
c0013b41:	e8 3e 17 00 00       	call   c0015284 <Thr::executeDLL(unsigned long, void*)>
c0013b46:	83 c4 10             	add    esp,0x10
c0013b49:	31 c0                	xor    eax,eax
c0013b4b:	31 d2                	xor    edx,edx
c0013b4d:	59                   	pop    ecx
c0013b4e:	5b                   	pop    ebx
c0013b4f:	5e                   	pop    esi
c0013b50:	c3                   	ret    

c0013b51 <SysRead(regs*)>:
c0013b51:	57                   	push   edi
c0013b52:	56                   	push   esi
c0013b53:	53                   	push   ebx
c0013b54:	83 ec 10             	sub    esp,0x10
c0013b57:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b5b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b5e:	83 f8 02             	cmp    eax,0x2
c0013b61:	77 10                	ja     c0013b73 <SysRead(regs*)+0x22>
c0013b63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b6b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013b71:	eb 0e                	jmp    c0013b81 <SysRead(regs*)+0x30>
c0013b73:	83 ec 0c             	sub    esp,0xc
c0013b76:	50                   	push   eax
c0013b77:	e8 1f 59 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013b7c:	83 c4 10             	add    esp,0x10
c0013b7f:	89 c1                	mov    ecx,eax
c0013b81:	83 c8 ff             	or     eax,0xffffffff
c0013b84:	85 c9                	test   ecx,ecx
c0013b86:	89 c2                	mov    edx,eax
c0013b88:	74 28                	je     c0013bb2 <SysRead(regs*)+0x61>
c0013b8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013b92:	83 ec 0c             	sub    esp,0xc
c0013b95:	31 ff                	xor    edi,edi
c0013b97:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b9b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b9d:	52                   	push   edx
c0013b9e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ba1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013ba4:	57                   	push   edi
c0013ba5:	56                   	push   esi
c0013ba6:	51                   	push   ecx
c0013ba7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013baa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013bae:	83 c4 20             	add    esp,0x20
c0013bb1:	99                   	cdq    
c0013bb2:	83 c4 10             	add    esp,0x10
c0013bb5:	5b                   	pop    ebx
c0013bb6:	5e                   	pop    esi
c0013bb7:	5f                   	pop    edi
c0013bb8:	c3                   	ret    

c0013bb9 <SysRegisterSignal(regs*)>:
c0013bb9:	83 ec 18             	sub    esp,0x18
c0013bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bc0:	6a 00                	push   0x0
c0013bc2:	6a 00                	push   0x0
c0013bc4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013bc7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013bca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bcf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bd2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013bd8:	e8 38 da ff ff       	call   c0011615 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013bdd:	83 c4 2c             	add    esp,0x2c
c0013be0:	99                   	cdq    
c0013be1:	c3                   	ret    

c0013be2 <SysRegistryGetTypeFromPath(regs*)>:
c0013be2:	57                   	push   edi
c0013be3:	56                   	push   esi
c0013be4:	53                   	push   ebx
c0013be5:	81 ec 38 01 00 00    	sub    esp,0x138
c0013beb:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013bf2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013bf5:	68 3f 1f 02 c0       	push   0xc0021f3f
c0013bfa:	e8 0b 6d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013bff:	5a                   	pop    edx
c0013c00:	59                   	pop    ecx
c0013c01:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c04:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c07:	e8 34 f6 ff ff       	call   c0013240 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013c0c:	5f                   	pop    edi
c0013c0d:	5a                   	pop    edx
c0013c0e:	89 c6                	mov    esi,eax
c0013c10:	50                   	push   eax
c0013c11:	68 5f 1f 02 c0       	push   0xc0021f5f
c0013c16:	e8 ef 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c1b:	83 c4 10             	add    esp,0x10
c0013c1e:	85 f6                	test   esi,esi
c0013c20:	74 28                	je     c0013c4a <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013c22:	50                   	push   eax
c0013c23:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013c27:	57                   	push   edi
c0013c28:	56                   	push   esi
c0013c29:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c2c:	e8 f4 f1 ff ff       	call   c0012e25 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013c31:	83 c4 0c             	add    esp,0xc
c0013c34:	57                   	push   edi
c0013c35:	50                   	push   eax
c0013c36:	89 c3                	mov    ebx,eax
c0013c38:	68 67 1f 02 c0       	push   0xc0021f67
c0013c3d:	e8 c8 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c42:	89 d8                	mov    eax,ebx
c0013c44:	83 c4 10             	add    esp,0x10
c0013c47:	99                   	cdq    
c0013c48:	eb 05                	jmp    c0013c4f <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013c4a:	83 c8 ff             	or     eax,0xffffffff
c0013c4d:	89 c2                	mov    edx,eax
c0013c4f:	81 c4 30 01 00 00    	add    esp,0x130
c0013c55:	5b                   	pop    ebx
c0013c56:	5e                   	pop    esi
c0013c57:	5f                   	pop    edi
c0013c58:	c3                   	ret    

c0013c59 <SysRegistryReadExtent(regs*)>:
c0013c59:	83 ec 1c             	sub    esp,0x1c
c0013c5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c60:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013c63:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013c66:	85 c0                	test   eax,eax
c0013c68:	79 1f                	jns    c0013c89 <SysRegistryReadExtent(regs*)+0x30>
c0013c6a:	52                   	push   edx
c0013c6b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013c70:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013c74:	52                   	push   edx
c0013c75:	50                   	push   eax
c0013c76:	51                   	push   ecx
c0013c77:	e8 9b f0 ff ff       	call   c0012d17 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013c7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c84:	83 c4 10             	add    esp,0x10
c0013c87:	eb 14                	jmp    c0013c9d <SysRegistryReadExtent(regs*)+0x44>
c0013c89:	83 ec 04             	sub    esp,0x4
c0013c8c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013c8f:	50                   	push   eax
c0013c90:	51                   	push   ecx
c0013c91:	e8 1f eb ff ff       	call   c00127b5 <CmGetString(Reghive_Tag*, int, char*)>
c0013c96:	83 c4 10             	add    esp,0x10
c0013c99:	31 c0                	xor    eax,eax
c0013c9b:	31 d2                	xor    edx,edx
c0013c9d:	83 c4 1c             	add    esp,0x1c
c0013ca0:	c3                   	ret    

c0013ca1 <SysRegistryPathToExtentLookup(regs*)>:
c0013ca1:	53                   	push   ebx
c0013ca2:	83 ec 10             	sub    esp,0x10
c0013ca5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ca9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cac:	68 7d 1f 02 c0       	push   0xc0021f7d
c0013cb1:	e8 54 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013cb6:	58                   	pop    eax
c0013cb7:	5a                   	pop    edx
c0013cb8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cbb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cbe:	e8 7d f5 ff ff       	call   c0013240 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013cc3:	83 c4 18             	add    esp,0x18
c0013cc6:	5b                   	pop    ebx
c0013cc7:	99                   	cdq    
c0013cc8:	c3                   	ret    

c0013cc9 <SysRegistryEnterDirectory(regs*)>:
c0013cc9:	53                   	push   ebx
c0013cca:	83 ec 10             	sub    esp,0x10
c0013ccd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cd1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013cd4:	68 a0 1f 02 c0       	push   0xc0021fa0
c0013cd9:	e8 2c 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013cde:	58                   	pop    eax
c0013cdf:	5a                   	pop    edx
c0013ce0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ce3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ce6:	e8 41 eb ff ff       	call   c001282c <CmEnterDirectory(Reghive_Tag*, int)>
c0013ceb:	83 c4 18             	add    esp,0x18
c0013cee:	5b                   	pop    ebx
c0013cef:	99                   	cdq    
c0013cf0:	c3                   	ret    

c0013cf1 <SysRegistryGetNext(regs*)>:
c0013cf1:	53                   	push   ebx
c0013cf2:	83 ec 10             	sub    esp,0x10
c0013cf5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cf9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013cfc:	68 be 1f 02 c0       	push   0xc0021fbe
c0013d01:	e8 04 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d06:	58                   	pop    eax
c0013d07:	5a                   	pop    edx
c0013d08:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d0b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d0e:	e8 58 eb ff ff       	call   c001286b <CmGetNext(Reghive_Tag*, int)>
c0013d13:	83 c4 18             	add    esp,0x18
c0013d16:	5b                   	pop    ebx
c0013d17:	99                   	cdq    
c0013d18:	c3                   	ret    

c0013d19 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013d19:	57                   	push   edi
c0013d1a:	56                   	push   esi
c0013d1b:	53                   	push   ebx
c0013d1c:	81 ec 34 01 00 00    	sub    esp,0x134
c0013d22:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013d29:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013d2d:	57                   	push   edi
c0013d2e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013d31:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013d34:	e8 ec f0 ff ff       	call   c0012e25 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013d39:	89 c3                	mov    ebx,eax
c0013d3b:	58                   	pop    eax
c0013d3c:	5a                   	pop    edx
c0013d3d:	57                   	push   edi
c0013d3e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013d41:	e8 0a c9 fe ff       	call   c0000650 <strcpy>
c0013d46:	81 c4 40 01 00 00    	add    esp,0x140
c0013d4c:	89 d8                	mov    eax,ebx
c0013d4e:	5b                   	pop    ebx
c0013d4f:	99                   	cdq    
c0013d50:	5e                   	pop    esi
c0013d51:	5f                   	pop    edi
c0013d52:	c3                   	ret    

c0013d53 <SysRegistryOpen(regs*)>:
c0013d53:	83 ec 18             	sub    esp,0x18
c0013d56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d5a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d5d:	e8 e3 e8 ff ff       	call   c0012645 <CmOpen(char const*)>
c0013d62:	83 c4 1c             	add    esp,0x1c
c0013d65:	99                   	cdq    
c0013d66:	c3                   	ret    

c0013d67 <SysRegistryClose(regs*)>:
c0013d67:	83 ec 18             	sub    esp,0x18
c0013d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d6e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d71:	e8 ed e9 ff ff       	call   c0012763 <CmClose(Reghive_Tag*)>
c0013d76:	31 c0                	xor    eax,eax
c0013d78:	31 d2                	xor    edx,edx
c0013d7a:	83 c4 1c             	add    esp,0x1c
c0013d7d:	c3                   	ret    

c0013d7e <SysSbrk(regs*)>:
c0013d7e:	56                   	push   esi
c0013d7f:	53                   	push   ebx
c0013d80:	50                   	push   eax
c0013d81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d8d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013d90:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013d96:	85 db                	test   ebx,ebx
c0013d98:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013d9b:	74 02                	je     c0013d9f <SysSbrk(regs*)+0x21>
c0013d9d:	79 06                	jns    c0013da5 <SysSbrk(regs*)+0x27>
c0013d9f:	89 f0                	mov    eax,esi
c0013da1:	31 d2                	xor    edx,edx
c0013da3:	eb 2a                	jmp    c0013dcf <SysSbrk(regs*)+0x51>
c0013da5:	83 c8 ff             	or     eax,0xffffffff
c0013da8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013dae:	89 c2                	mov    edx,eax
c0013db0:	77 1d                	ja     c0013dcf <SysSbrk(regs*)+0x51>
c0013db2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013db8:	50                   	push   eax
c0013db9:	68 07 0c 00 00       	push   0xc07
c0013dbe:	c1 ea 0c             	shr    edx,0xc
c0013dc1:	52                   	push   edx
c0013dc2:	51                   	push   ecx
c0013dc3:	e8 3e 60 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0013dc8:	89 f0                	mov    eax,esi
c0013dca:	31 d2                	xor    edx,edx
c0013dcc:	83 c4 10             	add    esp,0x10
c0013dcf:	59                   	pop    ecx
c0013dd0:	5b                   	pop    ebx
c0013dd1:	5e                   	pop    esi
c0013dd2:	c3                   	ret    

c0013dd3 <SysSetCwd(regs*)>:
c0013dd3:	83 ec 14             	sub    esp,0x14
c0013dd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dda:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ddd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013de2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013de5:	e8 35 7d ff ff       	call   c000bb1f <Fs::setcwd(Process*, char*)>
c0013dea:	83 c4 1c             	add    esp,0x1c
c0013ded:	99                   	cdq    
c0013dee:	c3                   	ret    

c0013def <SysSetTime(regs*)>:
c0013def:	55                   	push   ebp
c0013df0:	31 c9                	xor    ecx,ecx
c0013df2:	57                   	push   edi
c0013df3:	bd 0c 00 00 00       	mov    ebp,0xc
c0013df8:	56                   	push   esi
c0013df9:	53                   	push   ebx
c0013dfa:	31 db                	xor    ebx,ebx
c0013dfc:	83 ec 10             	sub    esp,0x10
c0013dff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e03:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013e06:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013e09:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013e0c:	89 c2                	mov    edx,eax
c0013e0e:	c1 e8 05             	shr    eax,0x5
c0013e11:	83 e2 1f             	and    edx,0x1f
c0013e14:	42                   	inc    edx
c0013e15:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013e1b:	c1 e7 10             	shl    edi,0x10
c0013e1e:	88 d1                	mov    cl,dl
c0013e20:	31 d2                	xor    edx,edx
c0013e22:	f7 f5                	div    ebp
c0013e24:	89 dd                	mov    ebp,ebx
c0013e26:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013e2c:	88 d5                	mov    ch,dl
c0013e2e:	31 d2                	xor    edx,edx
c0013e30:	0f b7 c1             	movzx  eax,cx
c0013e33:	09 f8                	or     eax,edi
c0013e35:	bf 3c 00 00 00       	mov    edi,0x3c
c0013e3a:	89 c1                	mov    ecx,eax
c0013e3c:	89 f0                	mov    eax,esi
c0013e3e:	f7 f7                	div    edi
c0013e40:	c1 e2 10             	shl    edx,0x10
c0013e43:	09 d5                	or     ebp,edx
c0013e45:	31 d2                	xor    edx,edx
c0013e47:	f7 f7                	div    edi
c0013e49:	89 eb                	mov    ebx,ebp
c0013e4b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013e50:	89 f0                	mov    eax,esi
c0013e52:	88 d7                	mov    bh,dl
c0013e54:	31 d2                	xor    edx,edx
c0013e56:	f7 f7                	div    edi
c0013e58:	bf 18 00 00 00       	mov    edi,0x18
c0013e5d:	31 d2                	xor    edx,edx
c0013e5f:	f7 f7                	div    edi
c0013e61:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013e66:	88 d3                	mov    bl,dl
c0013e68:	53                   	push   ebx
c0013e69:	51                   	push   ecx
c0013e6a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013e70:	e8 af 84 ff ff       	call   c000c324 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013e75:	83 c4 1c             	add    esp,0x1c
c0013e78:	31 d2                	xor    edx,edx
c0013e7a:	5b                   	pop    ebx
c0013e7b:	5e                   	pop    esi
c0013e7c:	83 f0 01             	xor    eax,0x1
c0013e7f:	5f                   	pop    edi
c0013e80:	0f b6 c0             	movzx  eax,al
c0013e83:	5d                   	pop    ebp
c0013e84:	c3                   	ret    

c0013e85 <SysTimezone(regs*)>:
c0013e85:	53                   	push   ebx
c0013e86:	83 ec 08             	sub    esp,0x8
c0013e89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e8d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013e91:	75 17                	jne    c0013eaa <SysTimezone(regs*)+0x25>
c0013e93:	83 ec 0c             	sub    esp,0xc
c0013e96:	68 d5 1f 02 c0       	push   0xc0021fd5
c0013e9b:	e8 6a 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013ea0:	83 c8 ff             	or     eax,0xffffffff
c0013ea3:	83 c4 10             	add    esp,0x10
c0013ea6:	89 c2                	mov    edx,eax
c0013ea8:	eb 20                	jmp    c0013eca <SysTimezone(regs*)+0x45>
c0013eaa:	83 ec 0c             	sub    esp,0xc
c0013ead:	68 ea 1f 02 c0       	push   0xc0021fea
c0013eb2:	e8 53 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013eb7:	58                   	pop    eax
c0013eb8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ebb:	e8 c8 81 ff ff       	call   c000c088 <User::loadClockSettings(int)>
c0013ec0:	83 c4 10             	add    esp,0x10
c0013ec3:	b8 01 00 00 00       	mov    eax,0x1
c0013ec8:	31 d2                	xor    edx,edx
c0013eca:	83 c4 08             	add    esp,0x8
c0013ecd:	5b                   	pop    ebx
c0013ece:	c3                   	ret    

c0013ecf <SysTruncate(regs*)>:
c0013ecf:	55                   	push   ebp
c0013ed0:	57                   	push   edi
c0013ed1:	31 ff                	xor    edi,edi
c0013ed3:	56                   	push   esi
c0013ed4:	53                   	push   ebx
c0013ed5:	83 ec 0c             	sub    esp,0xc
c0013ed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013edc:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013edf:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013ee3:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013ee6:	89 ce                	mov    esi,ecx
c0013ee8:	0f 84 9a 00 00 00    	je     c0013f88 <SysTruncate(regs*)+0xb9>
c0013eee:	83 ec 0c             	sub    esp,0xc
c0013ef1:	68 14 01 00 00       	push   0x114
c0013ef6:	e8 d8 3b ff ff       	call   c0007ad3 <malloc>
c0013efb:	83 c4 0c             	add    esp,0xc
c0013efe:	89 c3                	mov    ebx,eax
c0013f00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f05:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f08:	55                   	push   ebp
c0013f09:	53                   	push   ebx
c0013f0a:	e8 f1 77 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c0013f0f:	83 c4 10             	add    esp,0x10
c0013f12:	31 d2                	xor    edx,edx
c0013f14:	85 db                	test   ebx,ebx
c0013f16:	b8 03 00 00 00       	mov    eax,0x3
c0013f1b:	0f 84 a2 00 00 00    	je     c0013fc3 <SysTruncate(regs*)+0xf4>
c0013f21:	51                   	push   ecx
c0013f22:	51                   	push   ecx
c0013f23:	6a 02                	push   0x2
c0013f25:	53                   	push   ebx
c0013f26:	e8 91 78 ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c0013f2b:	83 c4 10             	add    esp,0x10
c0013f2e:	85 c0                	test   eax,eax
c0013f30:	74 13                	je     c0013f45 <SysTruncate(regs*)+0x76>
c0013f32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f34:	83 ec 0c             	sub    esp,0xc
c0013f37:	53                   	push   ebx
c0013f38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f3b:	83 c4 10             	add    esp,0x10
c0013f3e:	b8 04 00 00 00       	mov    eax,0x4
c0013f43:	eb 7c                	jmp    c0013fc1 <SysTruncate(regs*)+0xf2>
c0013f45:	52                   	push   edx
c0013f46:	57                   	push   edi
c0013f47:	56                   	push   esi
c0013f48:	53                   	push   ebx
c0013f49:	e8 82 79 ff ff       	call   c000b8d0 <File::truncate(unsigned long long)>
c0013f4e:	83 c4 10             	add    esp,0x10
c0013f51:	85 c0                	test   eax,eax
c0013f53:	74 1b                	je     c0013f70 <SysTruncate(regs*)+0xa1>
c0013f55:	83 ec 0c             	sub    esp,0xc
c0013f58:	53                   	push   ebx
c0013f59:	e8 bc 78 ff ff       	call   c000b81a <File::close()>
c0013f5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	b8 05 00 00 00       	mov    eax,0x5
c0013f6e:	eb 51                	jmp    c0013fc1 <SysTruncate(regs*)+0xf2>
c0013f70:	83 ec 0c             	sub    esp,0xc
c0013f73:	53                   	push   ebx
c0013f74:	e8 a1 78 ff ff       	call   c000b81a <File::close()>
c0013f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f81:	83 c4 10             	add    esp,0x10
c0013f84:	31 c0                	xor    eax,eax
c0013f86:	eb 39                	jmp    c0013fc1 <SysTruncate(regs*)+0xf2>
c0013f88:	31 d2                	xor    edx,edx
c0013f8a:	83 fd 02             	cmp    ebp,0x2
c0013f8d:	b8 01 00 00 00       	mov    eax,0x1
c0013f92:	7e 2f                	jle    c0013fc3 <SysTruncate(regs*)+0xf4>
c0013f94:	83 ec 0c             	sub    esp,0xc
c0013f97:	51                   	push   ecx
c0013f98:	e8 fe 54 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013f9d:	83 c4 10             	add    esp,0x10
c0013fa0:	31 d2                	xor    edx,edx
c0013fa2:	89 c1                	mov    ecx,eax
c0013fa4:	b8 02 00 00 00       	mov    eax,0x2
c0013fa9:	85 c9                	test   ecx,ecx
c0013fab:	74 16                	je     c0013fc3 <SysTruncate(regs*)+0xf4>
c0013fad:	50                   	push   eax
c0013fae:	57                   	push   edi
c0013faf:	56                   	push   esi
c0013fb0:	51                   	push   ecx
c0013fb1:	e8 1a 79 ff ff       	call   c000b8d0 <File::truncate(unsigned long long)>
c0013fb6:	83 c4 10             	add    esp,0x10
c0013fb9:	85 c0                	test   eax,eax
c0013fbb:	0f 95 c0             	setne  al
c0013fbe:	0f b6 c0             	movzx  eax,al
c0013fc1:	31 d2                	xor    edx,edx
c0013fc3:	83 c4 0c             	add    esp,0xc
c0013fc6:	5b                   	pop    ebx
c0013fc7:	5e                   	pop    esi
c0013fc8:	5f                   	pop    edi
c0013fc9:	5d                   	pop    ebp
c0013fca:	c3                   	ret    

c0013fcb <SysWrite(regs*)>:
c0013fcb:	57                   	push   edi
c0013fcc:	56                   	push   esi
c0013fcd:	53                   	push   ebx
c0013fce:	83 ec 10             	sub    esp,0x10
c0013fd1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013fd5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fd8:	83 f8 02             	cmp    eax,0x2
c0013fdb:	77 10                	ja     c0013fed <SysWrite(regs*)+0x22>
c0013fdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fe2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fe5:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013feb:	eb 0e                	jmp    c0013ffb <SysWrite(regs*)+0x30>
c0013fed:	83 ec 0c             	sub    esp,0xc
c0013ff0:	50                   	push   eax
c0013ff1:	e8 a5 54 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013ff6:	83 c4 10             	add    esp,0x10
c0013ff9:	89 c1                	mov    ecx,eax
c0013ffb:	83 c8 ff             	or     eax,0xffffffff
c0013ffe:	85 c9                	test   ecx,ecx
c0014000:	89 c2                	mov    edx,eax
c0014002:	74 28                	je     c001402c <SysWrite(regs*)+0x61>
c0014004:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001400c:	83 ec 0c             	sub    esp,0xc
c001400f:	31 ff                	xor    edi,edi
c0014011:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014015:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014017:	52                   	push   edx
c0014018:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001401b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001401e:	57                   	push   edi
c001401f:	56                   	push   esi
c0014020:	51                   	push   ecx
c0014021:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014024:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014028:	83 c4 20             	add    esp,0x20
c001402b:	99                   	cdq    
c001402c:	83 c4 10             	add    esp,0x10
c001402f:	5b                   	pop    ebx
c0014030:	5e                   	pop    esi
c0014031:	5f                   	pop    edi
c0014032:	c3                   	ret    

c0014033 <SysWsbe(regs*)>:
c0014033:	57                   	push   edi
c0014034:	b9 0b 00 00 00       	mov    ecx,0xb
c0014039:	56                   	push   esi
c001403a:	be 29 20 02 c0       	mov    esi,0xc0022029
c001403f:	53                   	push   ebx
c0014040:	83 ec 30             	sub    esp,0x30
c0014043:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014047:	fc                   	cld    
c0014048:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001404a:	83 ec 0c             	sub    esp,0xc
c001404d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014051:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014056:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014059:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001405f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014061:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014064:	57                   	push   edi
c0014065:	e8 16 c5 fe ff       	call   c0000580 <strlen>
c001406a:	5a                   	pop    edx
c001406b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001406f:	52                   	push   edx
c0014070:	31 d2                	xor    edx,edx
c0014072:	57                   	push   edi
c0014073:	52                   	push   edx
c0014074:	50                   	push   eax
c0014075:	56                   	push   esi
c0014076:	ff d3                	call   ebx
c0014078:	83 c4 14             	add    esp,0x14
c001407b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001407f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014082:	e8 a9 23 00 00       	call   c0016430 <terminateTask(int)>
c0014087:	83 c4 40             	add    esp,0x40
c001408a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001408f:	5b                   	pop    ebx
c0014090:	31 d2                	xor    edx,edx
c0014092:	5e                   	pop    esi
c0014093:	5f                   	pop    edi
c0014094:	c3                   	ret    

c0014095 <SysYield(regs*)>:
c0014095:	83 ec 0c             	sub    esp,0xc
c0014098:	fa                   	cli    
c0014099:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001409f:	e8 0c 1a 00 00       	call   c0015ab0 <schedule()>
c00140a4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00140a9:	48                   	dec    eax
c00140aa:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00140af:	75 01                	jne    c00140b2 <SysYield(regs*)+0x1d>
c00140b1:	fb                   	sti    
c00140b2:	31 c0                	xor    eax,eax
c00140b4:	31 d2                	xor    edx,edx
c00140b6:	83 c4 0c             	add    esp,0xc
c00140b9:	c3                   	ret    

c00140ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00140ba:	55                   	push   ebp
c00140bb:	57                   	push   edi
c00140bc:	56                   	push   esi
c00140bd:	53                   	push   ebx
c00140be:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00140c4:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00140cf:	74 3b                	je     c001410c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00140d1:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00140d9:	74 31                	je     c001410c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00140db:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00140e3:	75 27                	jne    c001410c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00140e5:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00140ec:	05 00 10 00 00       	add    eax,0x1000
c00140f1:	89 c2                	mov    edx,eax
c00140f3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00140f8:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00140ff:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014105:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001410c:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014113:	83 ec 0c             	sub    esp,0xc
c0014116:	6a 01                	push   0x1
c0014118:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001411e:	e8 d2 54 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0014123:	83 c4 10             	add    esp,0x10
c0014126:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001412c:	89 c3                	mov    ebx,eax
c001412e:	0f 86 26 01 00 00    	jbe    c001425a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0014134:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001413c:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014143:	c1 ee 0c             	shr    esi,0xc
c0014146:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001414a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014151:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014158:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001415c:	29 ef                	sub    edi,ebp
c001415e:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014162:	0f 83 f9 00 00 00    	jae    c0014261 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014168:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001416e:	b8 00 10 00 00       	mov    eax,0x1000
c0014173:	0f 47 f8             	cmova  edi,eax
c0014176:	83 ec 0c             	sub    esp,0xc
c0014179:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014180:	31 d2                	xor    edx,edx
c0014182:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014184:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014188:	50                   	push   eax
c0014189:	8d 74 24 30          	lea    esi,[esp+0x30]
c001418d:	56                   	push   esi
c001418e:	52                   	push   edx
c001418f:	57                   	push   edi
c0014190:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014197:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001419a:	83 c4 20             	add    esp,0x20
c001419d:	85 c0                	test   eax,eax
c001419f:	75 06                	jne    c00141a7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00141a1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00141a5:	74 13                	je     c00141ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00141a7:	83 ec 0c             	sub    esp,0xc
c00141aa:	53                   	push   ebx
c00141ab:	e8 59 57 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00141b0:	83 c4 10             	add    esp,0x10
c00141b3:	31 c0                	xor    eax,eax
c00141b5:	e9 7c 01 00 00       	jmp    c0014336 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00141ba:	fa                   	cli    
c00141bb:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00141c1:	e8 1c 3c ff ff       	call   c0007de2 <Phys::allocatePage()>
c00141c6:	6a 07                	push   0x7
c00141c8:	53                   	push   ebx
c00141c9:	50                   	push   eax
c00141ca:	89 c7                	mov    edi,eax
c00141cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141d4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141da:	e8 1f 5b ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00141df:	83 c4 0c             	add    esp,0xc
c00141e2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00141e9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141ef:	6a 00                	push   0x0
c00141f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141f9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141ff:	e8 60 59 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014204:	58                   	pop    eax
c0014205:	5a                   	pop    edx
c0014206:	68 07 0c 00 00       	push   0xc07
c001420b:	55                   	push   ebp
c001420c:	57                   	push   edi
c001420d:	89 df                	mov    edi,ebx
c001420f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014216:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001421c:	6a 00                	push   0x0
c001421e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014223:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014226:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001422c:	e8 31 5d ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014231:	b9 00 10 00 00       	mov    ecx,0x1000
c0014236:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014238:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001423d:	83 c4 20             	add    esp,0x20
c0014240:	48                   	dec    eax
c0014241:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014246:	85 c0                	test   eax,eax
c0014248:	75 01                	jne    c001424b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c001424a:	fb                   	sti    
c001424b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001424f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014255:	e9 f0 fe ff ff       	jmp    c001414a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001425a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014261:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014268:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001426e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014274:	0f 86 ae 00 00 00    	jbe    c0014328 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001427a:	fa                   	cli    
c001427b:	51                   	push   ecx
c001427c:	31 ff                	xor    edi,edi
c001427e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014285:	c1 ee 0c             	shr    esi,0xc
c0014288:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001428e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014294:	6a 00                	push   0x0
c0014296:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001429b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001429e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142a4:	e8 bb 58 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00142a9:	83 c4 10             	add    esp,0x10
c00142ac:	e8 31 3b ff ff       	call   c0007de2 <Phys::allocatePage()>
c00142b1:	47                   	inc    edi
c00142b2:	6a 07                	push   0x7
c00142b4:	53                   	push   ebx
c00142b5:	50                   	push   eax
c00142b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142ba:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00142c0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00142c3:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00142c9:	e8 30 5a ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00142ce:	58                   	pop    eax
c00142cf:	5a                   	pop    edx
c00142d0:	68 07 0c 00 00       	push   0xc07
c00142d5:	55                   	push   ebp
c00142d6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00142dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142e0:	50                   	push   eax
c00142e1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00142e8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142ee:	6a 00                	push   0x0
c00142f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142f8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142fe:	e8 5f 5c ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014303:	83 c4 1c             	add    esp,0x1c
c0014306:	68 00 10 00 00       	push   0x1000
c001430b:	6a 00                	push   0x0
c001430d:	53                   	push   ebx
c001430e:	e8 dd c1 fe ff       	call   c00004f0 <memset>
c0014313:	83 c4 10             	add    esp,0x10
c0014316:	39 fe                	cmp    esi,edi
c0014318:	77 92                	ja     c00142ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c001431a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001431f:	48                   	dec    eax
c0014320:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014325:	75 01                	jne    c0014328 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014327:	fb                   	sti    
c0014328:	83 ec 0c             	sub    esp,0xc
c001432b:	53                   	push   ebx
c001432c:	e8 d8 55 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014331:	83 c4 10             	add    esp,0x10
c0014334:	b0 01                	mov    al,0x1
c0014336:	81 c4 2c 10 00 00    	add    esp,0x102c
c001433c:	5b                   	pop    ebx
c001433d:	5e                   	pop    esi
c001433e:	5f                   	pop    edi
c001433f:	5d                   	pop    ebp
c0014340:	c3                   	ret    

c0014341 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014341:	55                   	push   ebp
c0014342:	57                   	push   edi
c0014343:	56                   	push   esi
c0014344:	53                   	push   ebx
c0014345:	83 ec 48             	sub    esp,0x48
c0014348:	68 14 01 00 00       	push   0x114
c001434d:	e8 81 37 ff ff       	call   c0007ad3 <malloc>
c0014352:	83 c4 0c             	add    esp,0xc
c0014355:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014359:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001435d:	89 c7                	mov    edi,eax
c001435f:	50                   	push   eax
c0014360:	e8 9b 73 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c0014365:	58                   	pop    eax
c0014366:	5a                   	pop    edx
c0014367:	6a 01                	push   0x1
c0014369:	57                   	push   edi
c001436a:	e8 4d 74 ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c001436f:	83 c4 10             	add    esp,0x10
c0014372:	85 c0                	test   eax,eax
c0014374:	0f 85 4c 01 00 00    	jne    c00144c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001437a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014382:	83 ec 0c             	sub    esp,0xc
c0014385:	6a 34                	push   0x34
c0014387:	e8 47 37 ff ff       	call   c0007ad3 <malloc>
c001438c:	89 c3                	mov    ebx,eax
c001438e:	58                   	pop    eax
c001438f:	8b 07                	mov    eax,DWORD PTR [edi]
c0014391:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014395:	56                   	push   esi
c0014396:	53                   	push   ebx
c0014397:	6a 00                	push   0x0
c0014399:	6a 34                	push   0x34
c001439b:	57                   	push   edi
c001439c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001439f:	83 c4 20             	add    esp,0x20
c00143a2:	85 c0                	test   eax,eax
c00143a4:	0f 85 1c 01 00 00    	jne    c00144c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143aa:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00143b0:	0f 85 10 01 00 00    	jne    c00144c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00143b9:	85 c0                	test   eax,eax
c00143bb:	0f 84 05 01 00 00    	je     c00144c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143c1:	31 d2                	xor    edx,edx
c00143c3:	55                   	push   ebp
c00143c4:	52                   	push   edx
c00143c5:	50                   	push   eax
c00143c6:	57                   	push   edi
c00143c7:	e8 ae 74 ff ff       	call   c000b87a <File::seek(unsigned long long)>
c00143cc:	83 c4 10             	add    esp,0x10
c00143cf:	85 c0                	test   eax,eax
c00143d1:	0f 85 ef 00 00 00    	jne    c00144c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143d7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00143da:	83 ec 0c             	sub    esp,0xc
c00143dd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00143e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00143e5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00143e9:	0f af c2             	imul   eax,edx
c00143ec:	50                   	push   eax
c00143ed:	e8 e1 36 ff ff       	call   c0007ad3 <malloc>
c00143f2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00143f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00143f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00143fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00143ff:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014403:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014407:	0f af c2             	imul   eax,edx
c001440a:	99                   	cdq    
c001440b:	52                   	push   edx
c001440c:	50                   	push   eax
c001440d:	57                   	push   edi
c001440e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014411:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014414:	83 c4 20             	add    esp,0x20
c0014417:	85 c0                	test   eax,eax
c0014419:	0f 84 a7 00 00 00    	je     c00144c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001441f:	31 d2                	xor    edx,edx
c0014421:	51                   	push   ecx
c0014422:	52                   	push   edx
c0014423:	50                   	push   eax
c0014424:	57                   	push   edi
c0014425:	e8 50 74 ff ff       	call   c000b87a <File::seek(unsigned long long)>
c001442a:	83 c4 10             	add    esp,0x10
c001442d:	85 c0                	test   eax,eax
c001442f:	0f 85 91 00 00 00    	jne    c00144c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014435:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014439:	83 ec 0c             	sub    esp,0xc
c001443c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014440:	0f af c2             	imul   eax,edx
c0014443:	50                   	push   eax
c0014444:	e8 8a 36 ff ff       	call   c0007ad3 <malloc>
c0014449:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001444b:	89 34 24             	mov    DWORD PTR [esp],esi
c001444e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014456:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001445a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001445e:	0f af c2             	imul   eax,edx
c0014461:	99                   	cdq    
c0014462:	52                   	push   edx
c0014463:	50                   	push   eax
c0014464:	57                   	push   edi
c0014465:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014468:	83 c4 20             	add    esp,0x20
c001446b:	31 c9                	xor    ecx,ecx
c001446d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014475:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014479:	0f b7 e9             	movzx  ebp,cx
c001447c:	0f 83 86 00 00 00    	jae    c0014508 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014482:	c1 e5 05             	shl    ebp,0x5
c0014485:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014489:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c001448d:	75 73                	jne    c0014502 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c001448f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014496:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014499:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001449d:	52                   	push   edx
c001449e:	31 d2                	xor    edx,edx
c00144a0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00144a3:	52                   	push   edx
c00144a4:	50                   	push   eax
c00144a5:	57                   	push   edi
c00144a6:	e8 cf 73 ff ff       	call   c000b87a <File::seek(unsigned long long)>
c00144ab:	83 c4 10             	add    esp,0x10
c00144ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00144b2:	85 c0                	test   eax,eax
c00144b4:	74 17                	je     c00144cd <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c00144b6:	83 ec 0c             	sub    esp,0xc
c00144b9:	68 55 20 02 c0       	push   0xc0022055
c00144be:	e8 47 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00144c3:	83 c4 10             	add    esp,0x10
c00144c6:	31 c0                	xor    eax,eax
c00144c8:	e9 8b 00 00 00       	jmp    c0014558 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c00144cd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00144d1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00144d4:	83 ec 0c             	sub    esp,0xc
c00144d7:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c00144da:	50                   	push   eax
c00144db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144df:	56                   	push   esi
c00144e0:	57                   	push   edi
c00144e1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00144e5:	e8 d0 fb ff ff       	call   c00140ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00144ea:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00144ee:	83 c4 20             	add    esp,0x20
c00144f1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00144f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00144f9:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c00144fe:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014502:	41                   	inc    ecx
c0014503:	e9 6d ff ff ff       	jmp    c0014475 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014508:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001450c:	83 ec 0c             	sub    esp,0xc
c001450f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014513:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014517:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c001451d:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014523:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014528:	05 00 10 00 00       	add    eax,0x1000
c001452d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014534:	e8 aa 35 ff ff       	call   c0007ae3 <free>
c0014539:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001453c:	e8 a2 35 ff ff       	call   c0007ae3 <free>
c0014541:	58                   	pop    eax
c0014542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014546:	e8 98 35 ff ff       	call   c0007ae3 <free>
c001454b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001454e:	e8 c7 72 ff ff       	call   c000b81a <File::close()>
c0014553:	83 c4 10             	add    esp,0x10
c0014556:	b0 01                	mov    al,0x1
c0014558:	83 c4 3c             	add    esp,0x3c
c001455b:	5b                   	pop    ebx
c001455c:	5e                   	pop    esi
c001455d:	5f                   	pop    edi
c001455e:	5d                   	pop    ebp
c001455f:	c3                   	ret    

c0014560 <Thr::runtimeReferenceHelper()>:
c0014560:	83 ec 18             	sub    esp,0x18
c0014563:	68 5d 20 02 c0       	push   0xc002205d
c0014568:	e8 9d 63 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001456d:	fa                   	cli    
c001456e:	83 c4 10             	add    esp,0x10
c0014571:	eb fe                	jmp    c0014571 <Thr::runtimeReferenceHelper()+0x11>

c0014573 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014573:	57                   	push   edi
c0014574:	56                   	push   esi
c0014575:	53                   	push   ebx
c0014576:	31 db                	xor    ebx,ebx
c0014578:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c001457e:	7e 3c                	jle    c00145bc <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014580:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c0014587:	31 ff                	xor    edi,edi
c0014589:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c0014590:	7e 27                	jle    c00145b9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014592:	50                   	push   eax
c0014593:	50                   	push   eax
c0014594:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014598:	8b 06                	mov    eax,DWORD PTR [esi]
c001459a:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c00145a1:	50                   	push   eax
c00145a2:	e8 d9 c1 fe ff       	call   c0000780 <strcmp>
c00145a7:	83 c4 10             	add    esp,0x10
c00145aa:	85 c0                	test   eax,eax
c00145ac:	75 05                	jne    c00145b3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00145ae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00145b1:	eb 0b                	jmp    c00145be <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00145b3:	83 c6 10             	add    esi,0x10
c00145b6:	47                   	inc    edi
c00145b7:	eb d0                	jmp    c0014589 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00145b9:	43                   	inc    ebx
c00145ba:	eb bc                	jmp    c0014578 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00145bc:	31 c0                	xor    eax,eax
c00145be:	5b                   	pop    ebx
c00145bf:	5e                   	pop    esi
c00145c0:	5f                   	pop    edi
c00145c1:	c3                   	ret    

c00145c2 <Thr::loadKernelSymbolTable(char const*)>:
c00145c2:	55                   	push   ebp
c00145c3:	57                   	push   edi
c00145c4:	56                   	push   esi
c00145c5:	53                   	push   ebx
c00145c6:	83 ec 68             	sub    esp,0x68
c00145c9:	68 14 01 00 00       	push   0x114
c00145ce:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c00145d4:	e8 fa 34 ff ff       	call   c0007ad3 <malloc>
c00145d9:	83 c4 0c             	add    esp,0xc
c00145dc:	56                   	push   esi
c00145dd:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00145e1:	89 c3                	mov    ebx,eax
c00145e3:	50                   	push   eax
c00145e4:	e8 17 71 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c00145e9:	5e                   	pop    esi
c00145ea:	5f                   	pop    edi
c00145eb:	6a 01                	push   0x1
c00145ed:	53                   	push   ebx
c00145ee:	e8 c9 71 ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c00145f3:	83 c4 10             	add    esp,0x10
c00145f6:	85 c0                	test   eax,eax
c00145f8:	74 0a                	je     c0014604 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00145fa:	83 ec 0c             	sub    esp,0xc
c00145fd:	68 7f 20 02 c0       	push   0xc002207f
c0014602:	eb 34                	jmp    c0014638 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014604:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001460c:	83 ec 0c             	sub    esp,0xc
c001460f:	6a 34                	push   0x34
c0014611:	e8 bd 34 ff ff       	call   c0007ad3 <malloc>
c0014616:	59                   	pop    ecx
c0014617:	8d 74 24 34          	lea    esi,[esp+0x34]
c001461b:	89 c7                	mov    edi,eax
c001461d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001461f:	56                   	push   esi
c0014620:	57                   	push   edi
c0014621:	6a 00                	push   0x0
c0014623:	6a 34                	push   0x34
c0014625:	53                   	push   ebx
c0014626:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014629:	83 c4 20             	add    esp,0x20
c001462c:	85 c0                	test   eax,eax
c001462e:	74 17                	je     c0014647 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014630:	83 ec 0c             	sub    esp,0xc
c0014633:	68 96 20 02 c0       	push   0xc0022096
c0014638:	e8 70 cb ff ff       	call   c00111ad <KePanic(char const*)>
c001463d:	83 c4 10             	add    esp,0x10
c0014640:	31 c0                	xor    eax,eax
c0014642:	e9 31 02 00 00       	jmp    c0014878 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014647:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001464d:	75 e1                	jne    c0014630 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001464f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014652:	85 c0                	test   eax,eax
c0014654:	74 da                	je     c0014630 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014656:	52                   	push   edx
c0014657:	31 d2                	xor    edx,edx
c0014659:	52                   	push   edx
c001465a:	50                   	push   eax
c001465b:	53                   	push   ebx
c001465c:	e8 19 72 ff ff       	call   c000b87a <File::seek(unsigned long long)>
c0014661:	83 c4 10             	add    esp,0x10
c0014664:	85 c0                	test   eax,eax
c0014666:	75 c8                	jne    c0014630 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014668:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001466c:	83 ec 0c             	sub    esp,0xc
c001466f:	31 ed                	xor    ebp,ebp
c0014671:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014675:	0f af c2             	imul   eax,edx
c0014678:	50                   	push   eax
c0014679:	e8 55 34 ff ff       	call   c0007ad3 <malloc>
c001467e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014680:	89 34 24             	mov    DWORD PTR [esp],esi
c0014683:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014687:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001468b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001468f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014693:	0f af c2             	imul   eax,edx
c0014696:	99                   	cdq    
c0014697:	52                   	push   edx
c0014698:	50                   	push   eax
c0014699:	53                   	push   ebx
c001469a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001469d:	83 c4 20             	add    esp,0x20
c00146a0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00146a8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00146b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00146b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146c0:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00146c4:	0f b7 f5             	movzx  esi,bp
c00146c7:	0f 83 a7 00 00 00    	jae    c0014774 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00146cd:	6b f6 28             	imul   esi,esi,0x28
c00146d0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00146d4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00146d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146db:	50                   	push   eax
c00146dc:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00146e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00146e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00146e6:	6b c0 28             	imul   eax,eax,0x28
c00146e9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00146ed:	89 d0                	mov    eax,edx
c00146ef:	31 d2                	xor    edx,edx
c00146f1:	52                   	push   edx
c00146f2:	50                   	push   eax
c00146f3:	53                   	push   ebx
c00146f4:	e8 81 71 ff ff       	call   c000b87a <File::seek(unsigned long long)>
c00146f9:	83 c4 0c             	add    esp,0xc
c00146fc:	6a 20                	push   0x20
c00146fe:	6a 00                	push   0x0
c0014700:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014704:	52                   	push   edx
c0014705:	e8 e6 bd fe ff       	call   c00004f0 <memset>
c001470a:	58                   	pop    eax
c001470b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001470d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014711:	51                   	push   ecx
c0014712:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014716:	52                   	push   edx
c0014717:	6a 00                	push   0x0
c0014719:	6a 1f                	push   0x1f
c001471b:	53                   	push   ebx
c001471c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001471f:	83 c4 18             	add    esp,0x18
c0014722:	68 ad 20 02 c0       	push   0xc00220ad
c0014727:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001472b:	52                   	push   edx
c001472c:	e8 4f c0 fe ff       	call   c0000780 <strcmp>
c0014731:	83 c4 10             	add    esp,0x10
c0014734:	85 c0                	test   eax,eax
c0014736:	75 0f                	jne    c0014747 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014738:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001473b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001473f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014743:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014747:	50                   	push   eax
c0014748:	50                   	push   eax
c0014749:	68 b5 20 02 c0       	push   0xc00220b5
c001474e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014752:	50                   	push   eax
c0014753:	e8 28 c0 fe ff       	call   c0000780 <strcmp>
c0014758:	83 c4 10             	add    esp,0x10
c001475b:	85 c0                	test   eax,eax
c001475d:	75 0f                	jne    c001476e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001475f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014762:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014766:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001476a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001476e:	45                   	inc    ebp
c001476f:	e9 4c ff ff ff       	jmp    c00146c0 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014774:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014779:	75 10                	jne    c001478b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001477b:	83 ec 0c             	sub    esp,0xc
c001477e:	68 bd 20 02 c0       	push   0xc00220bd
c0014783:	e8 25 ca ff ff       	call   c00111ad <KePanic(char const*)>
c0014788:	83 c4 10             	add    esp,0x10
c001478b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014790:	75 10                	jne    c00147a2 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014792:	83 ec 0c             	sub    esp,0xc
c0014795:	68 bd 20 02 c0       	push   0xc00220bd
c001479a:	e8 0e ca ff ff       	call   c00111ad <KePanic(char const*)>
c001479f:	83 c4 10             	add    esp,0x10
c00147a2:	50                   	push   eax
c00147a3:	31 d2                	xor    edx,edx
c00147a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a9:	52                   	push   edx
c00147aa:	50                   	push   eax
c00147ab:	53                   	push   ebx
c00147ac:	e8 c9 70 ff ff       	call   c000b87a <File::seek(unsigned long long)>
c00147b1:	5a                   	pop    edx
c00147b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147b6:	e8 18 33 ff ff       	call   c0007ad3 <malloc>
c00147bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147bf:	31 c9                	xor    ecx,ecx
c00147c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147c7:	5e                   	pop    esi
c00147c8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00147cc:	55                   	push   ebp
c00147cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147d1:	51                   	push   ecx
c00147d2:	52                   	push   edx
c00147d3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00147d7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00147db:	53                   	push   ebx
c00147dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147df:	83 c4 14             	add    esp,0x14
c00147e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00147e6:	e8 e8 32 ff ff       	call   c0007ad3 <malloc>
c00147eb:	89 c6                	mov    esi,eax
c00147ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00147f2:	56                   	push   esi
c00147f3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00147f7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00147fb:	51                   	push   ecx
c00147fc:	52                   	push   edx
c00147fd:	53                   	push   ebx
c00147fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014801:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014805:	83 c4 1c             	add    esp,0x1c
c0014808:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c001480e:	c1 e8 04             	shr    eax,0x4
c0014811:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c0014818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001481c:	31 d2                	xor    edx,edx
c001481e:	52                   	push   edx
c001481f:	50                   	push   eax
c0014820:	53                   	push   ebx
c0014821:	e8 54 70 ff ff       	call   c000b87a <File::seek(unsigned long long)>
c0014826:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014828:	31 d2                	xor    edx,edx
c001482a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001482d:	56                   	push   esi
c001482e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014832:	52                   	push   edx
c0014833:	50                   	push   eax
c0014834:	53                   	push   ebx
c0014835:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014838:	83 c4 14             	add    esp,0x14
c001483b:	53                   	push   ebx
c001483c:	e8 d9 6f ff ff       	call   c000b81a <File::close()>
c0014841:	5d                   	pop    ebp
c0014842:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014846:	e8 98 32 ff ff       	call   c0007ae3 <free>
c001484b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001484e:	e8 90 32 ff ff       	call   c0007ae3 <free>
c0014853:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014858:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001485c:	83 c4 10             	add    esp,0x10
c001485f:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014866:	8d 50 01             	lea    edx,[eax+0x1]
c0014869:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014870:	b0 01                	mov    al,0x1
c0014872:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014878:	83 c4 5c             	add    esp,0x5c
c001487b:	5b                   	pop    ebx
c001487c:	5e                   	pop    esi
c001487d:	5f                   	pop    edi
c001487e:	5d                   	pop    ebp
c001487f:	c3                   	ret    

c0014880 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014880:	55                   	push   ebp
c0014881:	57                   	push   edi
c0014882:	56                   	push   esi
c0014883:	53                   	push   ebx
c0014884:	81 ec 68 03 00 00    	sub    esp,0x368
c001488a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014891:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014897:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001489b:	68 14 01 00 00       	push   0x114
c00148a0:	e8 2e 32 ff ff       	call   c0007ad3 <malloc>
c00148a5:	83 c4 0c             	add    esp,0xc
c00148a8:	56                   	push   esi
c00148a9:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00148b0:	50                   	push   eax
c00148b1:	89 c3                	mov    ebx,eax
c00148b3:	e8 48 6e ff ff       	call   c000b700 <File::File(char const*, Process*)>
c00148b8:	5f                   	pop    edi
c00148b9:	5d                   	pop    ebp
c00148ba:	6a 01                	push   0x1
c00148bc:	53                   	push   ebx
c00148bd:	e8 fa 6e ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c00148c2:	83 c4 10             	add    esp,0x10
c00148c5:	85 c0                	test   eax,eax
c00148c7:	0f 85 b3 06 00 00    	jne    c0014f80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148cd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00148d5:	83 ec 0c             	sub    esp,0xc
c00148d8:	6a 34                	push   0x34
c00148da:	e8 f4 31 ff ff       	call   c0007ad3 <malloc>
c00148df:	5e                   	pop    esi
c00148e0:	8d 74 24 54          	lea    esi,[esp+0x54]
c00148e4:	89 c5                	mov    ebp,eax
c00148e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148e8:	56                   	push   esi
c00148e9:	55                   	push   ebp
c00148ea:	6a 00                	push   0x0
c00148ec:	6a 34                	push   0x34
c00148ee:	53                   	push   ebx
c00148ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148f2:	83 c4 20             	add    esp,0x20
c00148f5:	85 c0                	test   eax,eax
c00148f7:	0f 85 83 06 00 00    	jne    c0014f80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148fd:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014904:	0f 85 76 06 00 00    	jne    c0014f80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001490a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001490d:	85 c0                	test   eax,eax
c001490f:	0f 84 6b 06 00 00    	je     c0014f80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014915:	31 d2                	xor    edx,edx
c0014917:	51                   	push   ecx
c0014918:	52                   	push   edx
c0014919:	50                   	push   eax
c001491a:	53                   	push   ebx
c001491b:	e8 5a 6f ff ff       	call   c000b87a <File::seek(unsigned long long)>
c0014920:	83 c4 10             	add    esp,0x10
c0014923:	85 c0                	test   eax,eax
c0014925:	0f 85 55 06 00 00    	jne    c0014f80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001492b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001492e:	83 ec 0c             	sub    esp,0xc
c0014931:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014935:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014939:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001493d:	0f af c2             	imul   eax,edx
c0014940:	50                   	push   eax
c0014941:	e8 8d 31 ff ff       	call   c0007ad3 <malloc>
c0014946:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014948:	89 34 24             	mov    DWORD PTR [esp],esi
c001494b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001494f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014953:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014957:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001495b:	0f af c2             	imul   eax,edx
c001495e:	99                   	cdq    
c001495f:	52                   	push   edx
c0014960:	50                   	push   eax
c0014961:	53                   	push   ebx
c0014962:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014965:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014968:	83 c4 20             	add    esp,0x20
c001496b:	85 c0                	test   eax,eax
c001496d:	0f 84 0d 06 00 00    	je     c0014f80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014973:	52                   	push   edx
c0014974:	31 d2                	xor    edx,edx
c0014976:	52                   	push   edx
c0014977:	50                   	push   eax
c0014978:	53                   	push   ebx
c0014979:	e8 fc 6e ff ff       	call   c000b87a <File::seek(unsigned long long)>
c001497e:	83 c4 10             	add    esp,0x10
c0014981:	85 c0                	test   eax,eax
c0014983:	0f 85 f7 05 00 00    	jne    c0014f80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014989:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001498d:	83 ec 0c             	sub    esp,0xc
c0014990:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014994:	0f af c2             	imul   eax,edx
c0014997:	50                   	push   eax
c0014998:	e8 36 31 ff ff       	call   c0007ad3 <malloc>
c001499d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001499f:	89 34 24             	mov    DWORD PTR [esp],esi
c00149a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00149aa:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00149ae:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00149b2:	0f af c2             	imul   eax,edx
c00149b5:	99                   	cdq    
c00149b6:	52                   	push   edx
c00149b7:	50                   	push   eax
c00149b8:	53                   	push   ebx
c00149b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149bc:	83 c4 20             	add    esp,0x20
c00149bf:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00149c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00149c8:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c00149cc:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c00149d0:	73 78                	jae    c0014a4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c00149d2:	c1 e7 05             	shl    edi,0x5
c00149d5:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00149d9:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00149dc:	75 63                	jne    c0014a41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c00149de:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00149e1:	31 d2                	xor    edx,edx
c00149e3:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00149e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149ea:	50                   	push   eax
c00149eb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00149ee:	52                   	push   edx
c00149ef:	50                   	push   eax
c00149f0:	53                   	push   ebx
c00149f1:	e8 84 6e ff ff       	call   c000b87a <File::seek(unsigned long long)>
c00149f6:	83 c4 10             	add    esp,0x10
c00149f9:	85 c0                	test   eax,eax
c00149fb:	0f 85 7f 05 00 00    	jne    c0014f80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a01:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014a08:	83 ec 0c             	sub    esp,0xc
c0014a0b:	31 d2                	xor    edx,edx
c0014a0d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014a11:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014a13:	01 c6                	add    esi,eax
c0014a15:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a1c:	50                   	push   eax
c0014a1d:	56                   	push   esi
c0014a1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a22:	52                   	push   edx
c0014a23:	50                   	push   eax
c0014a24:	53                   	push   ebx
c0014a25:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a28:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014a2b:	83 c4 1c             	add    esp,0x1c
c0014a2e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014a31:	50                   	push   eax
c0014a32:	6a 00                	push   0x0
c0014a34:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014a38:	56                   	push   esi
c0014a39:	e8 b2 ba fe ff       	call   c00004f0 <memset>
c0014a3e:	83 c4 10             	add    esp,0x10
c0014a41:	66 ff 04 24          	inc    WORD PTR [esp]
c0014a45:	e9 7b ff ff ff       	jmp    c00149c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014a4a:	50                   	push   eax
c0014a4b:	68 00 01 00 00       	push   0x100
c0014a50:	6a 00                	push   0x0
c0014a52:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014a56:	50                   	push   eax
c0014a57:	e8 94 ba fe ff       	call   c00004f0 <memset>
c0014a5c:	83 c4 0c             	add    esp,0xc
c0014a5f:	68 00 01 00 00       	push   0x100
c0014a64:	6a 00                	push   0x0
c0014a66:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014a6d:	50                   	push   eax
c0014a6e:	e8 7d ba fe ff       	call   c00004f0 <memset>
c0014a73:	83 c4 10             	add    esp,0x10
c0014a76:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014a7d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a84:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014a8c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014a94:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014a9c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014aa4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014aa8:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014aac:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014ab1:	0f 83 16 01 00 00    	jae    c0014bcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014ab7:	6b ff 28             	imul   edi,edi,0x28
c0014aba:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014abe:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014ac1:	51                   	push   ecx
c0014ac2:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014ac6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014aca:	8b 07                	mov    eax,DWORD PTR [edi]
c0014acc:	6b d2 28             	imul   edx,edx,0x28
c0014acf:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014ad3:	31 d2                	xor    edx,edx
c0014ad5:	52                   	push   edx
c0014ad6:	50                   	push   eax
c0014ad7:	53                   	push   ebx
c0014ad8:	e8 9d 6d ff ff       	call   c000b87a <File::seek(unsigned long long)>
c0014add:	83 c4 0c             	add    esp,0xc
c0014ae0:	6a 20                	push   0x20
c0014ae2:	6a 00                	push   0x0
c0014ae4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014aeb:	51                   	push   ecx
c0014aec:	e8 ff b9 fe ff       	call   c00004f0 <memset>
c0014af1:	58                   	pop    eax
c0014af2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014af4:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014af8:	52                   	push   edx
c0014af9:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014b00:	51                   	push   ecx
c0014b01:	6a 00                	push   0x0
c0014b03:	6a 1f                	push   0x1f
c0014b05:	53                   	push   ebx
c0014b06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b09:	83 c4 1c             	add    esp,0x1c
c0014b0c:	6a 09                	push   0x9
c0014b0e:	68 d7 20 02 c0       	push   0xc00220d7
c0014b13:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b1a:	51                   	push   ecx
c0014b1b:	e8 60 b8 fe ff       	call   c0000380 <memcmp>
c0014b20:	83 c4 10             	add    esp,0x10
c0014b23:	85 c0                	test   eax,eax
c0014b25:	75 1a                	jne    c0014b41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014b27:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014b2a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014b2d:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014b31:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b34:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014b3b:	89 d0                	mov    eax,edx
c0014b3d:	40                   	inc    eax
c0014b3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b41:	52                   	push   edx
c0014b42:	6a 09                	push   0x9
c0014b44:	68 e1 20 02 c0       	push   0xc00220e1
c0014b49:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b50:	50                   	push   eax
c0014b51:	e8 2a b8 fe ff       	call   c0000380 <memcmp>
c0014b56:	83 c4 10             	add    esp,0x10
c0014b59:	85 c0                	test   eax,eax
c0014b5b:	75 1a                	jne    c0014b77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014b5d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014b60:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014b63:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014b67:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b6a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014b71:	89 c8                	mov    eax,ecx
c0014b73:	40                   	inc    eax
c0014b74:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b77:	50                   	push   eax
c0014b78:	50                   	push   eax
c0014b79:	68 ad 20 02 c0       	push   0xc00220ad
c0014b7e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b85:	50                   	push   eax
c0014b86:	e8 f5 bb fe ff       	call   c0000780 <strcmp>
c0014b8b:	83 c4 10             	add    esp,0x10
c0014b8e:	85 c0                	test   eax,eax
c0014b90:	75 0b                	jne    c0014b9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014b96:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b9d:	50                   	push   eax
c0014b9e:	50                   	push   eax
c0014b9f:	68 b5 20 02 c0       	push   0xc00220b5
c0014ba4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014bab:	50                   	push   eax
c0014bac:	e8 cf bb fe ff       	call   c0000780 <strcmp>
c0014bb1:	83 c4 10             	add    esp,0x10
c0014bb4:	85 c0                	test   eax,eax
c0014bb6:	75 0b                	jne    c0014bc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014bb8:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014bbc:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014bbf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014bc3:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014bc8:	e9 d7 fe ff ff       	jmp    c0014aa4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014bcd:	50                   	push   eax
c0014bce:	31 d2                	xor    edx,edx
c0014bd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bd4:	52                   	push   edx
c0014bd5:	50                   	push   eax
c0014bd6:	53                   	push   ebx
c0014bd7:	e8 9e 6c ff ff       	call   c000b87a <File::seek(unsigned long long)>
c0014bdc:	58                   	pop    eax
c0014bdd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014be1:	e8 ed 2e ff ff       	call   c0007ad3 <malloc>
c0014be6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014be8:	31 d2                	xor    edx,edx
c0014bea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014bee:	58                   	pop    eax
c0014bef:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014bf3:	56                   	push   esi
c0014bf4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bfc:	52                   	push   edx
c0014bfd:	50                   	push   eax
c0014bfe:	53                   	push   ebx
c0014bff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c02:	83 c4 14             	add    esp,0x14
c0014c05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c09:	e8 c5 2e ff ff       	call   c0007ad3 <malloc>
c0014c0e:	31 d2                	xor    edx,edx
c0014c10:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014c14:	83 c4 0c             	add    esp,0xc
c0014c17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c1b:	52                   	push   edx
c0014c1c:	50                   	push   eax
c0014c1d:	53                   	push   ebx
c0014c1e:	e8 57 6c ff ff       	call   c000b87a <File::seek(unsigned long long)>
c0014c23:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c25:	31 d2                	xor    edx,edx
c0014c27:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014c32:	52                   	push   edx
c0014c33:	50                   	push   eax
c0014c34:	53                   	push   ebx
c0014c35:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c38:	83 c4 20             	add    esp,0x20
c0014c3b:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014c40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014c4c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014c50:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014c53:	0f 84 2b 03 00 00    	je     c0014f84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014c59:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014c60:	31 d2                	xor    edx,edx
c0014c62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c66:	c1 e8 03             	shr    eax,0x3
c0014c69:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014c6d:	51                   	push   ecx
c0014c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c72:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014c76:	52                   	push   edx
c0014c77:	50                   	push   eax
c0014c78:	53                   	push   ebx
c0014c79:	e8 fc 6b ff ff       	call   c000b87a <File::seek(unsigned long long)>
c0014c7e:	5e                   	pop    esi
c0014c7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c83:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014c8a:	e8 44 2e ff ff       	call   c0007ad3 <malloc>
c0014c8f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c91:	31 d2                	xor    edx,edx
c0014c93:	89 c7                	mov    edi,eax
c0014c95:	58                   	pop    eax
c0014c96:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014c9a:	50                   	push   eax
c0014c9b:	57                   	push   edi
c0014c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ca0:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014ca7:	52                   	push   edx
c0014ca8:	50                   	push   eax
c0014ca9:	53                   	push   ebx
c0014caa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cad:	83 c4 20             	add    esp,0x20
c0014cb0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014cb8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014cbc:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014cc0:	0f 8d a5 02 00 00    	jge    c0014f6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014cc6:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014ccb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ccf:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014cd2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014cd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cda:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014cde:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ce2:	c1 e8 08             	shr    eax,0x8
c0014ce5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014ce9:	89 c2                	mov    edx,eax
c0014ceb:	c1 e2 04             	shl    edx,0x4
c0014cee:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014cf2:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014cf5:	85 f6                	test   esi,esi
c0014cf7:	0f 85 cf 00 00 00    	jne    c0014dcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014cfd:	83 ec 0c             	sub    esp,0xc
c0014d00:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d08:	03 02                	add    eax,DWORD PTR [edx]
c0014d0a:	50                   	push   eax
c0014d0b:	e8 63 f8 ff ff       	call   c0014573 <Thr::getAddressOfKernelSymbol(char const*)>
c0014d10:	83 c4 10             	add    esp,0x10
c0014d13:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014d17:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014d1c:	85 c0                	test   eax,eax
c0014d1e:	89 c6                	mov    esi,eax
c0014d20:	0f 85 a6 00 00 00    	jne    c0014dcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014d26:	83 ec 0c             	sub    esp,0xc
c0014d29:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d31:	03 02                	add    eax,DWORD PTR [edx]
c0014d33:	50                   	push   eax
c0014d34:	e8 5f c6 ff ff       	call   c0011398 <KeResolveCompatibilitySymbol(char*)>
c0014d39:	83 c4 10             	add    esp,0x10
c0014d3c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014d40:	85 c0                	test   eax,eax
c0014d42:	89 c6                	mov    esi,eax
c0014d44:	0f 85 82 00 00 00    	jne    c0014dcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014d4a:	50                   	push   eax
c0014d4b:	50                   	push   eax
c0014d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d50:	03 02                	add    eax,DWORD PTR [edx]
c0014d52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014d56:	50                   	push   eax
c0014d57:	68 eb 20 02 c0       	push   0xc00220eb
c0014d5c:	e8 a9 5b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014d61:	58                   	pop    eax
c0014d62:	5a                   	pop    edx
c0014d63:	68 05 21 02 c0       	push   0xc0022105
c0014d68:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d6f:	51                   	push   ecx
c0014d70:	e8 db b8 fe ff       	call   c0000650 <strcpy>
c0014d75:	59                   	pop    ecx
c0014d76:	58                   	pop    eax
c0014d77:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014d7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d7f:	03 02                	add    eax,DWORD PTR [edx]
c0014d81:	50                   	push   eax
c0014d82:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d89:	51                   	push   ecx
c0014d8a:	e8 e1 ba fe ff       	call   c0000870 <strcat>
c0014d8f:	58                   	pop    eax
c0014d90:	5a                   	pop    edx
c0014d91:	68 9b 21 02 c0       	push   0xc002219b
c0014d96:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d9d:	51                   	push   ecx
c0014d9e:	e8 cd ba fe ff       	call   c0000870 <strcat>
c0014da3:	83 c4 10             	add    esp,0x10
c0014da6:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014dab:	0f 84 77 01 00 00    	je     c0014f28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014db1:	83 ec 0c             	sub    esp,0xc
c0014db4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014dbb:	51                   	push   ecx
c0014dbc:	e8 ec c3 ff ff       	call   c00111ad <KePanic(char const*)>
c0014dc1:	83 c4 10             	add    esp,0x10
c0014dc4:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014dc8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014dcc:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014dd1:	83 f8 01             	cmp    eax,0x1
c0014dd4:	0f 85 9b 00 00 00    	jne    c0014e75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014dda:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014dde:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014de5:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014de9:	01 d0                	add    eax,edx
c0014deb:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014df3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014df7:	0f 94 c0             	sete   al
c0014dfa:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014e02:	0f 94 c1             	sete   cl
c0014e05:	09 c1                	or     ecx,eax
c0014e07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e0b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014e10:	0f b6 c9             	movzx  ecx,cl
c0014e13:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e15:	74 41                	je     c0014e58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014e17:	8d 14 06             	lea    edx,[esi+eax*1]
c0014e1a:	85 c9                	test   ecx,ecx
c0014e1c:	75 15                	jne    c0014e33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014e1e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014e22:	66 83 f8 0c          	cmp    ax,0xc
c0014e26:	76 05                	jbe    c0014e2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014e28:	b8 0c 00 00 00       	mov    eax,0xc
c0014e2d:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014e31:	76 37                	jbe    c0014e6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e33:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014e38:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014e3c:	0f 84 e6 00 00 00    	je     c0014f28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014e42:	83 ec 0c             	sub    esp,0xc
c0014e45:	68 1c 21 02 c0       	push   0xc002211c
c0014e4a:	e8 5e c3 ff ff       	call   c00111ad <KePanic(char const*)>
c0014e4f:	83 c4 10             	add    esp,0x10
c0014e52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e56:	eb 12                	jmp    c0014e6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e58:	01 c2                	add    edx,eax
c0014e5a:	85 c9                	test   ecx,ecx
c0014e5c:	75 0c                	jne    c0014e6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e5e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014e62:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014e66:	77 02                	ja     c0014e6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e68:	01 f2                	add    edx,esi
c0014e6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e6e:	89 10                	mov    DWORD PTR [eax],edx
c0014e70:	e9 ed 00 00 00       	jmp    c0014f62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014e75:	83 f8 02             	cmp    eax,0x2
c0014e78:	0f 85 81 00 00 00    	jne    c0014eff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014e7e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014e85:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014e89:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014e8d:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014e95:	74 21                	je     c0014eb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014e97:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014e9f:	74 17                	je     c0014eb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014ea1:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014ea5:	ba 0a 00 00 00       	mov    edx,0xa
c0014eaa:	83 f9 0e             	cmp    ecx,0xe
c0014ead:	77 03                	ja     c0014eb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014eaf:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014eb2:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014eb6:	76 1f                	jbe    c0014ed7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014eb8:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014ebd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ec1:	74 65                	je     c0014f28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014ec3:	83 ec 0c             	sub    esp,0xc
c0014ec6:	68 38 21 02 c0       	push   0xc0022138
c0014ecb:	e8 dd c2 ff ff       	call   c00111ad <KePanic(char const*)>
c0014ed0:	83 c4 10             	add    esp,0x10
c0014ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ed7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014edc:	8b 10                	mov    edx,DWORD PTR [eax]
c0014ede:	74 15                	je     c0014ef5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014ee0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014ee4:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014eeb:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014eef:	01 d1                	add    ecx,edx
c0014ef1:	01 ce                	add    esi,ecx
c0014ef3:	eb 06                	jmp    c0014efb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014ef5:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014ef9:	01 d6                	add    esi,edx
c0014efb:	89 30                	mov    DWORD PTR [eax],esi
c0014efd:	eb 63                	jmp    c0014f62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014eff:	56                   	push   esi
c0014f00:	56                   	push   esi
c0014f01:	50                   	push   eax
c0014f02:	68 54 21 02 c0       	push   0xc0022154
c0014f07:	e8 fe 59 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014f0c:	83 c4 10             	add    esp,0x10
c0014f0f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014f14:	74 12                	je     c0014f28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014f16:	83 ec 0c             	sub    esp,0xc
c0014f19:	68 5f 21 02 c0       	push   0xc002215f
c0014f1e:	e8 8a c2 ff ff       	call   c00111ad <KePanic(char const*)>
c0014f23:	83 c4 10             	add    esp,0x10
c0014f26:	eb 3a                	jmp    c0014f62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014f28:	83 ec 0c             	sub    esp,0xc
c0014f2b:	53                   	push   ebx
c0014f2c:	e8 e9 68 ff ff       	call   c000b81a <File::close()>
c0014f31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f39:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f3c:	e8 a2 2b ff ff       	call   c0007ae3 <free>
c0014f41:	59                   	pop    ecx
c0014f42:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f46:	e8 98 2b ff ff       	call   c0007ae3 <free>
c0014f4b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f4e:	e8 90 2b ff ff       	call   c0007ae3 <free>
c0014f53:	5b                   	pop    ebx
c0014f54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f58:	e8 86 2b ff ff       	call   c0007ae3 <free>
c0014f5d:	83 c4 10             	add    esp,0x10
c0014f60:	eb 1e                	jmp    c0014f80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f62:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014f66:	e9 4d fd ff ff       	jmp    c0014cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014f6b:	83 ec 0c             	sub    esp,0xc
c0014f6e:	57                   	push   edi
c0014f6f:	e8 6f 2b ff ff       	call   c0007ae3 <free>
c0014f74:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014f78:	83 c4 10             	add    esp,0x10
c0014f7b:	e9 cc fc ff ff       	jmp    c0014c4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014f80:	31 c0                	xor    eax,eax
c0014f82:	eb 32                	jmp    c0014fb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014f84:	83 ec 0c             	sub    esp,0xc
c0014f87:	53                   	push   ebx
c0014f88:	e8 8d 68 ff ff       	call   c000b81a <File::close()>
c0014f8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f95:	58                   	pop    eax
c0014f96:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f9a:	e8 44 2b ff ff       	call   c0007ae3 <free>
c0014f9f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014fa2:	e8 3c 2b ff ff       	call   c0007ae3 <free>
c0014fa7:	5a                   	pop    edx
c0014fa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fac:	e8 32 2b ff ff       	call   c0007ae3 <free>
c0014fb1:	83 c4 10             	add    esp,0x10
c0014fb4:	b0 01                	mov    al,0x1
c0014fb6:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014fbc:	5b                   	pop    ebx
c0014fbd:	5e                   	pop    esi
c0014fbe:	5f                   	pop    edi
c0014fbf:	5d                   	pop    ebp
c0014fc0:	c3                   	ret    

c0014fc1 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014fc1:	56                   	push   esi
c0014fc2:	31 d2                	xor    edx,edx
c0014fc4:	53                   	push   ebx
c0014fc5:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0014fcb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014fcf:	39 d3                	cmp    ebx,edx
c0014fd1:	7e 1b                	jle    c0014fee <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014fd3:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c0014fda:	39 c8                	cmp    eax,ecx
c0014fdc:	77 0d                	ja     c0014feb <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014fde:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c0014fe5:	01 c6                	add    esi,eax
c0014fe7:	39 ce                	cmp    esi,ecx
c0014fe9:	77 05                	ja     c0014ff0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014feb:	42                   	inc    edx
c0014fec:	eb e1                	jmp    c0014fcf <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014fee:	31 c0                	xor    eax,eax
c0014ff0:	5b                   	pop    ebx
c0014ff1:	5e                   	pop    esi
c0014ff2:	c3                   	ret    

c0014ff3 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014ff3:	53                   	push   ebx
c0014ff4:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0014ffa:	31 c0                	xor    eax,eax
c0014ffc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015000:	39 c3                	cmp    ebx,eax
c0015002:	7e 22                	jle    c0015026 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015004:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c001500b:	39 ca                	cmp    edx,ecx
c001500d:	77 14                	ja     c0015023 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001500f:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c0015016:	39 ca                	cmp    edx,ecx
c0015018:	76 09                	jbe    c0015023 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001501a:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c0015021:	eb 05                	jmp    c0015028 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015023:	40                   	inc    eax
c0015024:	eb da                	jmp    c0015000 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015026:	31 c0                	xor    eax,eax
c0015028:	5b                   	pop    ebx
c0015029:	c3                   	ret    

c001502a <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001502a:	53                   	push   ebx
c001502b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001502f:	53                   	push   ebx
c0015030:	e8 8c ff ff ff       	call   c0014fc1 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015035:	5a                   	pop    edx
c0015036:	31 d2                	xor    edx,edx
c0015038:	85 c0                	test   eax,eax
c001503a:	74 04                	je     c0015040 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001503c:	89 da                	mov    edx,ebx
c001503e:	29 c2                	sub    edx,eax
c0015040:	5b                   	pop    ebx
c0015041:	89 d0                	mov    eax,edx
c0015043:	c3                   	ret    

c0015044 <Thr::loadDLL(char const*, bool)>:
c0015044:	55                   	push   ebp
c0015045:	57                   	push   edi
c0015046:	56                   	push   esi
c0015047:	53                   	push   ebx
c0015048:	81 ec 34 01 00 00    	sub    esp,0x134
c001504e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015055:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001505c:	56                   	push   esi
c001505d:	68 77 21 02 c0       	push   0xc0022177
c0015062:	e8 a3 58 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015067:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001506e:	e8 60 2a ff ff       	call   c0007ad3 <malloc>
c0015073:	83 c4 0c             	add    esp,0xc
c0015076:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001507c:	56                   	push   esi
c001507d:	50                   	push   eax
c001507e:	89 c3                	mov    ebx,eax
c0015080:	e8 7b 66 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c0015085:	83 c4 10             	add    esp,0x10
c0015088:	85 db                	test   ebx,ebx
c001508a:	75 3c                	jne    c00150c8 <Thr::loadDLL(char const*, bool)+0x84>
c001508c:	89 e8                	mov    eax,ebp
c001508e:	84 c0                	test   al,al
c0015090:	0f 84 e1 01 00 00    	je     c0015277 <Thr::loadDLL(char const*, bool)+0x233>
c0015096:	50                   	push   eax
c0015097:	50                   	push   eax
c0015098:	68 88 21 02 c0       	push   0xc0022188
c001509d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00150a1:	57                   	push   edi
c00150a2:	e8 a9 b5 fe ff       	call   c0000650 <strcpy>
c00150a7:	58                   	pop    eax
c00150a8:	5a                   	pop    edx
c00150a9:	56                   	push   esi
c00150aa:	57                   	push   edi
c00150ab:	e8 c0 b7 fe ff       	call   c0000870 <strcat>
c00150b0:	59                   	pop    ecx
c00150b1:	58                   	pop    eax
c00150b2:	68 9b 21 02 c0       	push   0xc002219b
c00150b7:	57                   	push   edi
c00150b8:	e8 b3 b7 fe ff       	call   c0000870 <strcat>
c00150bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00150c0:	e8 e8 c0 ff ff       	call   c00111ad <KePanic(char const*)>
c00150c5:	83 c4 10             	add    esp,0x10
c00150c8:	50                   	push   eax
c00150c9:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00150cd:	50                   	push   eax
c00150ce:	8d 44 24 20          	lea    eax,[esp+0x20]
c00150d2:	50                   	push   eax
c00150d3:	53                   	push   ebx
c00150d4:	e8 e5 69 ff ff       	call   c000babe <File::stat(unsigned long long*, bool*)>
c00150d9:	83 c4 10             	add    esp,0x10
c00150dc:	85 db                	test   ebx,ebx
c00150de:	74 0c                	je     c00150ec <Thr::loadDLL(char const*, bool)+0xa8>
c00150e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150e2:	83 ec 0c             	sub    esp,0xc
c00150e5:	53                   	push   ebx
c00150e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150e9:	83 c4 10             	add    esp,0x10
c00150ec:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00150f1:	75 0a                	jne    c00150fd <Thr::loadDLL(char const*, bool)+0xb9>
c00150f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00150f7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00150fb:	75 3e                	jne    c001513b <Thr::loadDLL(char const*, bool)+0xf7>
c00150fd:	89 e8                	mov    eax,ebp
c00150ff:	31 db                	xor    ebx,ebx
c0015101:	84 c0                	test   al,al
c0015103:	0f 84 6e 01 00 00    	je     c0015277 <Thr::loadDLL(char const*, bool)+0x233>
c0015109:	50                   	push   eax
c001510a:	50                   	push   eax
c001510b:	68 88 21 02 c0       	push   0xc0022188
c0015110:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015114:	53                   	push   ebx
c0015115:	e8 36 b5 fe ff       	call   c0000650 <strcpy>
c001511a:	58                   	pop    eax
c001511b:	5a                   	pop    edx
c001511c:	56                   	push   esi
c001511d:	53                   	push   ebx
c001511e:	e8 4d b7 fe ff       	call   c0000870 <strcat>
c0015123:	59                   	pop    ecx
c0015124:	5f                   	pop    edi
c0015125:	68 9b 21 02 c0       	push   0xc002219b
c001512a:	53                   	push   ebx
c001512b:	e8 40 b7 fe ff       	call   c0000870 <strcat>
c0015130:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015133:	e8 75 c0 ff ff       	call   c00111ad <KePanic(char const*)>
c0015138:	83 c4 10             	add    esp,0x10
c001513b:	53                   	push   ebx
c001513c:	6a 03                	push   0x3
c001513e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015142:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015146:	05 ff 0f 00 00       	add    eax,0xfff
c001514b:	83 d2 00             	adc    edx,0x0
c001514e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015152:	50                   	push   eax
c0015153:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015159:	e8 a8 4c ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c001515e:	89 c3                	mov    ebx,eax
c0015160:	58                   	pop    eax
c0015161:	5a                   	pop    edx
c0015162:	53                   	push   ebx
c0015163:	68 f2 07 02 c0       	push   0xc00207f2
c0015168:	e8 9d 57 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001516d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015170:	e8 0b b4 fe ff       	call   c0000580 <strlen>
c0015175:	8b 3d 00 8f 02 c0    	mov    edi,DWORD PTR ds:0xc0028f00
c001517b:	40                   	inc    eax
c001517c:	89 04 24             	mov    DWORD PTR [esp],eax
c001517f:	e8 4f 29 ff ff       	call   c0007ad3 <malloc>
c0015184:	59                   	pop    ecx
c0015185:	89 04 bd 20 93 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6ce0],eax
c001518c:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015191:	5f                   	pop    edi
c0015192:	56                   	push   esi
c0015193:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c001519a:	e8 b1 b4 fe ff       	call   c0000650 <strcpy>
c001519f:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00151a4:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c00151ab:	8d 50 01             	lea    edx,[eax+0x1]
c00151ae:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c00151b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00151b8:	83 c4 0c             	add    esp,0xc
c00151bb:	6a 01                	push   0x1
c00151bd:	53                   	push   ebx
c00151be:	56                   	push   esi
c00151bf:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c00151c6:	e8 b5 f6 ff ff       	call   c0014880 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00151cb:	83 c4 10             	add    esp,0x10
c00151ce:	89 c7                	mov    edi,eax
c00151d0:	89 f8                	mov    eax,edi
c00151d2:	83 f0 01             	xor    eax,0x1
c00151d5:	84 c0                	test   al,al
c00151d7:	74 18                	je     c00151f1 <Thr::loadDLL(char const*, bool)+0x1ad>
c00151d9:	89 e8                	mov    eax,ebp
c00151db:	84 c0                	test   al,al
c00151dd:	74 12                	je     c00151f1 <Thr::loadDLL(char const*, bool)+0x1ad>
c00151df:	83 ec 0c             	sub    esp,0xc
c00151e2:	68 9d 21 02 c0       	push   0xc002219d
c00151e7:	e8 c1 bf ff ff       	call   c00111ad <KePanic(char const*)>
c00151ec:	83 c4 10             	add    esp,0x10
c00151ef:	eb 06                	jmp    c00151f7 <Thr::loadDLL(char const*, bool)+0x1b3>
c00151f1:	89 f8                	mov    eax,edi
c00151f3:	84 c0                	test   al,al
c00151f5:	75 10                	jne    c0015207 <Thr::loadDLL(char const*, bool)+0x1c3>
c00151f7:	83 ec 0c             	sub    esp,0xc
c00151fa:	68 bc 21 02 c0       	push   0xc00221bc
c00151ff:	e8 a9 bf ff ff       	call   c00111ad <KePanic(char const*)>
c0015204:	83 c4 10             	add    esp,0x10
c0015207:	31 f6                	xor    esi,esi
c0015209:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001520d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015211:	05 ff 0f 00 00       	add    eax,0xfff
c0015216:	83 d2 00             	adc    edx,0x0
c0015219:	0f ac d0 0c          	shrd   eax,edx,0xc
c001521d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015221:	c1 ea 0c             	shr    edx,0xc
c0015224:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015228:	ba 00 00 00 00       	mov    edx,0x0
c001522d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015231:	89 d0                	mov    eax,edx
c0015233:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015237:	73 32                	jae    c001526b <Thr::loadDLL(char const*, bool)+0x227>
c0015239:	50                   	push   eax
c001523a:	50                   	push   eax
c001523b:	89 f0                	mov    eax,esi
c001523d:	c1 e0 0c             	shl    eax,0xc
c0015240:	01 d8                	add    eax,ebx
c0015242:	50                   	push   eax
c0015243:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015249:	e8 9c 46 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c001524e:	83 c4 10             	add    esp,0x10
c0015251:	8b 00                	mov    eax,DWORD PTR [eax]
c0015253:	a8 60                	test   al,0x60
c0015255:	75 11                	jne    c0015268 <Thr::loadDLL(char const*, bool)+0x224>
c0015257:	83 ec 0c             	sub    esp,0xc
c001525a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001525f:	50                   	push   eax
c0015260:	e8 14 2b ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0015265:	83 c4 10             	add    esp,0x10
c0015268:	46                   	inc    esi
c0015269:	eb 9e                	jmp    c0015209 <Thr::loadDLL(char const*, bool)+0x1c5>
c001526b:	89 f8                	mov    eax,edi
c001526d:	84 c0                	test   al,al
c001526f:	b8 00 00 00 00       	mov    eax,0x0
c0015274:	0f 44 d8             	cmove  ebx,eax
c0015277:	81 c4 2c 01 00 00    	add    esp,0x12c
c001527d:	89 d8                	mov    eax,ebx
c001527f:	5b                   	pop    ebx
c0015280:	5e                   	pop    esi
c0015281:	5f                   	pop    edi
c0015282:	5d                   	pop    ebp
c0015283:	c3                   	ret    

c0015284 <Thr::executeDLL(unsigned long, void*)>:
c0015284:	56                   	push   esi
c0015285:	53                   	push   ebx
c0015286:	52                   	push   edx
c0015287:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001528b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001528f:	85 db                	test   ebx,ebx
c0015291:	75 10                	jne    c00152a3 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015293:	83 ec 0c             	sub    esp,0xc
c0015296:	68 d8 21 02 c0       	push   0xc00221d8
c001529b:	e8 0d bf ff ff       	call   c00111ad <KePanic(char const*)>
c00152a0:	83 c4 10             	add    esp,0x10
c00152a3:	50                   	push   eax
c00152a4:	50                   	push   eax
c00152a5:	53                   	push   ebx
c00152a6:	68 02 22 02 c0       	push   0xc0022202
c00152ab:	e8 5a 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00152b0:	89 d8                	mov    eax,ebx
c00152b2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00152b6:	83 c4 14             	add    esp,0x14
c00152b9:	5b                   	pop    ebx
c00152ba:	5e                   	pop    esi
c00152bb:	ff e0                	jmp    eax
c00152bd:	66 90                	xchg   ax,ax
c00152bf:	90                   	nop

c00152c0 <userModeEntryPoint(void*)>:
c00152c0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00152c5:	83 e8 01             	sub    eax,0x1
c00152c8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00152cd:	75 01                	jne    c00152d0 <userModeEntryPoint(void*)+0x10>
c00152cf:	fb                   	sti    
c00152d0:	fb                   	sti    
c00152d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152d9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00152df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152e3:	e9 57 af fe ff       	jmp    c000023f <goToUsermode>

c00152e8 <changeTSS>:
c00152e8:	83 ec 14             	sub    esp,0x14
c00152eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152f0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152f3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00152f8:	c1 e2 15             	shl    edx,0x15
c00152fb:	29 d0                	sub    eax,edx
c00152fd:	50                   	push   eax
c00152fe:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0015303:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015309:	05 7c 11 00 00       	add    eax,0x117c
c001530e:	50                   	push   eax
c001530f:	e8 28 3c ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c0015314:	83 c4 1c             	add    esp,0x1c
c0015317:	c3                   	ret    

c0015318 <switchToThread(ThreadControlBlock*)>:
c0015318:	57                   	push   edi
c0015319:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c001531f:	56                   	push   esi
c0015320:	53                   	push   ebx
c0015321:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015325:	85 c9                	test   ecx,ecx
c0015327:	0f 85 8b 00 00 00    	jne    c00153b8 <switchToThread(ThreadControlBlock*)+0xa0>
c001532d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015331:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015337:	74 7b                	je     c00153b4 <switchToThread(ThreadControlBlock*)+0x9c>
c0015339:	b8 00 04 00 00       	mov    eax,0x400
c001533e:	29 d0                	sub    eax,edx
c0015340:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015343:	d1 f8                	sar    eax,1
c0015345:	01 d0                	add    eax,edx
c0015347:	90                   	nop
c0015348:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001534b:	e8 04 28 00 00       	call   c0017b54 <HalQueryPerformanceCounter()>
c0015350:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c0015355:	89 c6                	mov    esi,eax
c0015357:	89 d7                	mov    edi,edx
c0015359:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c001535f:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c0015364:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c001536a:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c0015370:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c0015376:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001537c:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c0015382:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c0015388:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001538b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001538e:	01 c6                	add    esi,eax
c0015390:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015393:	11 d7                	adc    edi,edx
c0015395:	83 ec 0c             	sub    esp,0xc
c0015398:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001539b:	53                   	push   ebx
c001539c:	e8 d6 ae fe ff       	call   c0000277 <switchToThreadASM>
c00153a1:	0f 20 c0             	mov    eax,cr0
c00153a4:	83 c8 08             	or     eax,0x8
c00153a7:	0f 22 c0             	mov    cr0,eax
c00153aa:	83 c4 10             	add    esp,0x10
c00153ad:	5b                   	pop    ebx
c00153ae:	5e                   	pop    esi
c00153af:	5f                   	pop    edi
c00153b0:	c3                   	ret    
c00153b1:	8d 76 00             	lea    esi,[esi+0x0]
c00153b4:	31 c0                	xor    eax,eax
c00153b6:	eb 90                	jmp    c0015348 <switchToThread(ThreadControlBlock*)+0x30>
c00153b8:	5b                   	pop    ebx
c00153b9:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c00153c3:	5e                   	pop    esi
c00153c4:	5f                   	pop    edi
c00153c5:	c3                   	ret    
c00153c6:	66 90                	xchg   ax,ax

c00153c8 <Process::addArgs(char**)>:
c00153c8:	57                   	push   edi
c00153c9:	56                   	push   esi
c00153ca:	53                   	push   ebx
c00153cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00153cf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00153d3:	85 f6                	test   esi,esi
c00153d5:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00153df:	74 4f                	je     c0015430 <Process::addArgs(char**)+0x68>
c00153e1:	8b 06                	mov    eax,DWORD PTR [esi]
c00153e3:	85 c0                	test   eax,eax
c00153e5:	74 49                	je     c0015430 <Process::addArgs(char**)+0x68>
c00153e7:	31 db                	xor    ebx,ebx
c00153e9:	8d 76 00             	lea    esi,[esi+0x0]
c00153ec:	83 ec 0c             	sub    esp,0xc
c00153ef:	50                   	push   eax
c00153f0:	e8 8b b1 fe ff       	call   c0000580 <strlen>
c00153f5:	83 c0 01             	add    eax,0x1
c00153f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00153fb:	e8 d3 26 ff ff       	call   c0007ad3 <malloc>
c0015400:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015407:	5a                   	pop    edx
c0015408:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001540b:	83 c3 01             	add    ebx,0x1
c001540e:	59                   	pop    ecx
c001540f:	52                   	push   edx
c0015410:	50                   	push   eax
c0015411:	e8 3a b2 fe ff       	call   c0000650 <strcpy>
c0015416:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c001541c:	83 c4 10             	add    esp,0x10
c001541f:	83 c1 01             	add    ecx,0x1
c0015422:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015428:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001542b:	85 c0                	test   eax,eax
c001542d:	75 bd                	jne    c00153ec <Process::addArgs(char**)+0x24>
c001542f:	90                   	nop
c0015430:	5b                   	pop    ebx
c0015431:	5e                   	pop    esi
c0015432:	5f                   	pop    edi
c0015433:	c3                   	ret    

c0015434 <Process::Process(char const*, Process*, char**)>:
c0015434:	56                   	push   esi
c0015435:	53                   	push   ebx
c0015436:	83 ec 14             	sub    esp,0x14
c0015439:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001543d:	05 0c 02 00 00       	add    eax,0x20c
c0015442:	bb 07 00 00 00       	mov    ebx,0x7
c0015447:	89 c6                	mov    esi,eax
c0015449:	8d 76 00             	lea    esi,[esi+0x0]
c001544c:	85 db                	test   ebx,ebx
c001544e:	78 14                	js     c0015464 <Process::Process(char const*, Process*, char**)+0x30>
c0015450:	83 ec 0c             	sub    esp,0xc
c0015453:	56                   	push   esi
c0015454:	e8 2f a6 00 00       	call   c001fa88 <ThreadControlBlock::ThreadControlBlock()>
c0015459:	83 c4 10             	add    esp,0x10
c001545c:	83 c6 5f             	add    esi,0x5f
c001545f:	83 eb 01             	sub    ebx,0x1
c0015462:	eb e8                	jmp    c001544c <Process::Process(char const*, Process*, char**)+0x18>
c0015464:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015468:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001546f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015473:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001547a:	83 ec 0c             	sub    esp,0xc
c001547d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015481:	e8 1c bb ff ff       	call   c0010fa2 <KeNewProcessEnv(Process*)>
c0015486:	83 c4 10             	add    esp,0x10
c0015489:	89 c2                	mov    edx,eax
c001548b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001548f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015499:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00154a2:	a1 20 34 02 c0       	mov    eax,ds:0xc0023420
c00154a7:	8d 50 01             	lea    edx,[eax+0x1]
c00154aa:	89 15 20 34 02 c0    	mov    DWORD PTR ds:0xc0023420,edx
c00154b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154b4:	89 02                	mov    DWORD PTR [edx],eax
c00154b6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00154be:	83 ec 0c             	sub    esp,0xc
c00154c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154c5:	e8 09 26 ff ff       	call   c0007ad3 <malloc>
c00154ca:	83 c4 10             	add    esp,0x10
c00154cd:	89 c3                	mov    ebx,eax
c00154cf:	83 ec 08             	sub    esp,0x8
c00154d2:	6a 00                	push   0x0
c00154d4:	53                   	push   ebx
c00154d5:	e8 78 4b ff ff       	call   c000a052 <VAS::VAS(bool)>
c00154da:	83 c4 10             	add    esp,0x10
c00154dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154e1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00154e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154eb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00154f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00154fd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015503:	e8 be c0 ff ff       	call   c00115c6 <KeInitSignals()>
c0015508:	89 c2                	mov    edx,eax
c001550a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001550e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015518:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001551e:	85 c0                	test   eax,eax
c0015520:	74 42                	je     c0015564 <Process::Process(char const*, Process*, char**)+0x130>
c0015522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015526:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001552c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015536:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001553c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015540:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015546:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001554c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015550:	05 0c 01 00 00       	add    eax,0x10c
c0015555:	83 ec 08             	sub    esp,0x8
c0015558:	52                   	push   edx
c0015559:	50                   	push   eax
c001555a:	e8 f1 b0 fe ff       	call   c0000650 <strcpy>
c001555f:	83 c4 10             	add    esp,0x10
c0015562:	eb 64                	jmp    c00155c8 <Process::Process(char const*, Process*, char**)+0x194>
c0015564:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001556c:	83 ec 0c             	sub    esp,0xc
c001556f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015573:	e8 5b 25 ff ff       	call   c0007ad3 <malloc>
c0015578:	83 c4 10             	add    esp,0x10
c001557b:	89 c3                	mov    ebx,eax
c001557d:	83 ec 08             	sub    esp,0x8
c0015580:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015584:	53                   	push   ebx
c0015585:	e8 e2 36 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c001558a:	83 c4 10             	add    esp,0x10
c001558d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015591:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001559b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00155a1:	83 ec 0c             	sub    esp,0xc
c00155a4:	50                   	push   eax
c00155a5:	e8 70 2f ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00155aa:	83 c4 10             	add    esp,0x10
c00155ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155b1:	05 0c 01 00 00       	add    eax,0x10c
c00155b6:	83 ec 08             	sub    esp,0x8
c00155b9:	68 21 22 02 c0       	push   0xc0022221
c00155be:	50                   	push   eax
c00155bf:	e8 8c b0 fe ff       	call   c0000650 <strcpy>
c00155c4:	83 c4 10             	add    esp,0x10
c00155c7:	90                   	nop
c00155c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155cc:	83 c0 0c             	add    eax,0xc
c00155cf:	83 ec 08             	sub    esp,0x8
c00155d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155d6:	50                   	push   eax
c00155d7:	e8 74 b0 fe ff       	call   c0000650 <strcpy>
c00155dc:	83 c4 10             	add    esp,0x10
c00155df:	83 ec 08             	sub    esp,0x8
c00155e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00155e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155ea:	e8 d9 fd ff ff       	call   c00153c8 <Process::addArgs(char**)>
c00155ef:	83 c4 10             	add    esp,0x10
c00155f2:	83 ec 08             	sub    esp,0x8
c00155f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155fd:	e8 3f ed ff ff       	call   c0014341 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015602:	83 c4 10             	add    esp,0x10
c0015605:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015609:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001560d:	83 f0 01             	xor    eax,0x1
c0015610:	88 c2                	mov    dl,al
c0015612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015616:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001561c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015621:	83 ec 04             	sub    esp,0x4
c0015624:	50                   	push   eax
c0015625:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015629:	68 78 22 02 c0       	push   0xc0022278
c001562e:	e8 d7 52 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015633:	83 c4 10             	add    esp,0x10
c0015636:	90                   	nop
c0015637:	83 c4 14             	add    esp,0x14
c001563a:	5b                   	pop    ebx
c001563b:	5e                   	pop    esi
c001563c:	c3                   	ret    
c001563d:	90                   	nop
c001563e:	66 90                	xchg   ax,ax

c0015640 <Process::Process(bool, char const*, Process*, char**)>:
c0015640:	56                   	push   esi
c0015641:	53                   	push   ebx
c0015642:	83 ec 24             	sub    esp,0x24
c0015645:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015649:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001564d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015651:	05 0c 02 00 00       	add    eax,0x20c
c0015656:	bb 07 00 00 00       	mov    ebx,0x7
c001565b:	89 c6                	mov    esi,eax
c001565d:	8d 76 00             	lea    esi,[esi+0x0]
c0015660:	85 db                	test   ebx,ebx
c0015662:	78 14                	js     c0015678 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015664:	83 ec 0c             	sub    esp,0xc
c0015667:	56                   	push   esi
c0015668:	e8 1b a4 00 00       	call   c001fa88 <ThreadControlBlock::ThreadControlBlock()>
c001566d:	83 c4 10             	add    esp,0x10
c0015670:	83 c6 5f             	add    esi,0x5f
c0015673:	83 eb 01             	sub    ebx,0x1
c0015676:	eb e8                	jmp    c0015660 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015678:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001567c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015683:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015687:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001568e:	83 ec 0c             	sub    esp,0xc
c0015691:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015695:	e8 08 b9 ff ff       	call   c0010fa2 <KeNewProcessEnv(Process*)>
c001569a:	83 c4 10             	add    esp,0x10
c001569d:	89 c2                	mov    edx,eax
c001569f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156a3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00156a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156ad:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00156b6:	a1 20 34 02 c0       	mov    eax,ds:0xc0023420
c00156bb:	8d 50 01             	lea    edx,[eax+0x1]
c00156be:	89 15 20 34 02 c0    	mov    DWORD PTR ds:0xc0023420,edx
c00156c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00156c8:	89 02                	mov    DWORD PTR [edx],eax
c00156ca:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00156d2:	83 ec 0c             	sub    esp,0xc
c00156d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00156d9:	e8 f5 23 ff ff       	call   c0007ad3 <malloc>
c00156de:	83 c4 10             	add    esp,0x10
c00156e1:	89 c3                	mov    ebx,eax
c00156e3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00156e8:	83 ec 08             	sub    esp,0x8
c00156eb:	50                   	push   eax
c00156ec:	53                   	push   ebx
c00156ed:	e8 60 49 ff ff       	call   c000a052 <VAS::VAS(bool)>
c00156f2:	83 c4 10             	add    esp,0x10
c00156f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156f9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00156ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015703:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001570d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015711:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015715:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001571b:	e8 a6 be ff ff       	call   c00115c6 <KeInitSignals()>
c0015720:	89 c2                	mov    edx,eax
c0015722:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015726:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001572c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015730:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015736:	85 c0                	test   eax,eax
c0015738:	74 42                	je     c001577c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001573a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001573e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015744:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001574a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001574e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015754:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015758:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001575e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015764:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015768:	05 0c 01 00 00       	add    eax,0x10c
c001576d:	83 ec 08             	sub    esp,0x8
c0015770:	52                   	push   edx
c0015771:	50                   	push   eax
c0015772:	e8 d9 ae fe ff       	call   c0000650 <strcpy>
c0015777:	83 c4 10             	add    esp,0x10
c001577a:	eb 64                	jmp    c00157e0 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c001577c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015784:	83 ec 0c             	sub    esp,0xc
c0015787:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001578b:	e8 43 23 ff ff       	call   c0007ad3 <malloc>
c0015790:	83 c4 10             	add    esp,0x10
c0015793:	89 c3                	mov    ebx,eax
c0015795:	83 ec 08             	sub    esp,0x8
c0015798:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001579c:	53                   	push   ebx
c001579d:	e8 ca 34 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c00157a2:	83 c4 10             	add    esp,0x10
c00157a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157a9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00157af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00157b9:	83 ec 0c             	sub    esp,0xc
c00157bc:	50                   	push   eax
c00157bd:	e8 58 2d ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00157c2:	83 c4 10             	add    esp,0x10
c00157c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157c9:	05 0c 01 00 00       	add    eax,0x10c
c00157ce:	83 ec 08             	sub    esp,0x8
c00157d1:	68 21 22 02 c0       	push   0xc0022221
c00157d6:	50                   	push   eax
c00157d7:	e8 74 ae fe ff       	call   c0000650 <strcpy>
c00157dc:	83 c4 10             	add    esp,0x10
c00157df:	90                   	nop
c00157e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157e4:	83 c0 0c             	add    eax,0xc
c00157e7:	83 ec 08             	sub    esp,0x8
c00157ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00157ee:	50                   	push   eax
c00157ef:	e8 5c ae fe ff       	call   c0000650 <strcpy>
c00157f4:	83 c4 10             	add    esp,0x10
c00157f7:	83 ec 08             	sub    esp,0x8
c00157fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00157fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015802:	e8 c1 fb ff ff       	call   c00153c8 <Process::addArgs(char**)>
c0015807:	83 c4 10             	add    esp,0x10
c001580a:	90                   	nop
c001580b:	83 c4 24             	add    esp,0x24
c001580e:	5b                   	pop    ebx
c001580f:	5e                   	pop    esi
c0015810:	c3                   	ret    
c0015811:	8d 76 00             	lea    esi,[esi+0x0]

c0015814 <taskStartupFunction>:
c0015814:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015819:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001581c:	c3                   	ret    
c001581d:	90                   	nop
c001581e:	66 90                	xchg   ax,ax

c0015820 <Semaphore::Semaphore(int)>:
c0015820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015824:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015828:	89 10                	mov    DWORD PTR [eax],edx
c001582a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001582e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015835:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015839:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015844:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001584b:	90                   	nop
c001584c:	c3                   	ret    
c001584d:	90                   	nop
c001584e:	66 90                	xchg   ax,ax

c0015850 <Mutex::Mutex()>:
c0015850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015854:	6a 01                	push   0x1
c0015856:	50                   	push   eax
c0015857:	e8 c4 ff ff ff       	call   c0015820 <Semaphore::Semaphore(int)>
c001585c:	83 c4 08             	add    esp,0x8
c001585f:	90                   	nop
c0015860:	c3                   	ret    
c0015861:	90                   	nop
c0015862:	66 90                	xchg   ax,ax

c0015864 <Process::createThread(void (*)(void*), void*, int)>:
c0015864:	57                   	push   edi
c0015865:	31 c9                	xor    ecx,ecx
c0015867:	56                   	push   esi
c0015868:	53                   	push   ebx
c0015869:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001586d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015874:	89 f2                	mov    edx,esi
c0015876:	66 90                	xchg   ax,ax
c0015878:	0f b7 c2             	movzx  eax,dx
c001587b:	80 e2 01             	and    dl,0x1
c001587e:	74 14                	je     c0015894 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015880:	d1 f8                	sar    eax,1
c0015882:	83 c1 01             	add    ecx,0x1
c0015885:	83 f9 10             	cmp    ecx,0x10
c0015888:	89 c2                	mov    edx,eax
c001588a:	75 ec                	jne    c0015878 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001588c:	31 db                	xor    ebx,ebx
c001588e:	89 d8                	mov    eax,ebx
c0015890:	5b                   	pop    ebx
c0015891:	5e                   	pop    esi
c0015892:	5f                   	pop    edi
c0015893:	c3                   	ret    
c0015894:	b8 01 00 00 00       	mov    eax,0x1
c0015899:	d3 e0                	shl    eax,cl
c001589b:	09 c6                	or     esi,eax
c001589d:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00158a4:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00158a7:	c1 e0 05             	shl    eax,0x5
c00158aa:	29 c8                	sub    eax,ecx
c00158ac:	01 d8                	add    eax,ebx
c00158ae:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00158b5:	75 0d                	jne    c00158c4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00158b7:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00158c1:	8d 76 00             	lea    esi,[esi+0x0]
c00158c4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00158ca:	8d 34 49             	lea    esi,[ecx+ecx*2]
c00158cd:	83 ec 0c             	sub    esp,0xc
c00158d0:	c1 e6 05             	shl    esi,0x5
c00158d3:	29 ce                	sub    esi,ecx
c00158d5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00158d8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00158db:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00158e1:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c00158e7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00158ed:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c00158f4:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00158fa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00158fe:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015904:	89 ca                	mov    edx,ecx
c0015906:	f7 da                	neg    edx
c0015908:	c1 e2 15             	shl    edx,0x15
c001590b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015911:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015917:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001591b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015925:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001592b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001592f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015935:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001593f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015949:	68 00 01 00 00       	push   0x100
c001594e:	e8 80 21 ff ff       	call   c0007ad3 <malloc>
c0015953:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015956:	58                   	pop    eax
c0015957:	5a                   	pop    edx
c0015958:	53                   	push   ebx
c0015959:	68 e4 96 02 c0       	push   0xc00296e4
c001595e:	e8 bd 9e 00 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015963:	83 c4 10             	add    esp,0x10
c0015966:	89 d8                	mov    eax,ebx
c0015968:	5b                   	pop    ebx
c0015969:	5e                   	pop    esi
c001596a:	5f                   	pop    edi
c001596b:	c3                   	ret    

c001596c <Process::createUserThread()>:
c001596c:	83 ec 0c             	sub    esp,0xc
c001596f:	68 80 00 00 00       	push   0x80
c0015974:	6a 00                	push   0x0
c0015976:	68 c0 52 01 c0       	push   0xc00152c0
c001597b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001597f:	50                   	push   eax
c0015980:	e8 df fe ff ff       	call   c0015864 <Process::createThread(void (*)(void*), void*, int)>
c0015985:	83 c4 1c             	add    esp,0x1c
c0015988:	c3                   	ret    
c0015989:	8d 76 00             	lea    esi,[esi+0x0]

c001598c <setupMultitasking(void (*)())>:
c001598c:	56                   	push   esi
c001598d:	53                   	push   ebx
c001598e:	83 ec 04             	sub    esp,0x4
c0015991:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015995:	eb 11                	jmp    c00159a8 <setupMultitasking(void (*)())+0x1c>
c0015997:	90                   	nop
c0015998:	83 ec 0c             	sub    esp,0xc
c001599b:	68 e4 96 02 c0       	push   0xc00296e4
c00159a0:	e8 bf 9d 00 00       	call   c001f764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00159a5:	83 c4 10             	add    esp,0x10
c00159a8:	83 ec 0c             	sub    esp,0xc
c00159ab:	68 e4 96 02 c0       	push   0xc00296e4
c00159b0:	e8 8b 9d 00 00       	call   c001f740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00159b5:	83 c4 10             	add    esp,0x10
c00159b8:	84 c0                	test   al,al
c00159ba:	74 dc                	je     c0015998 <setupMultitasking(void (*)())+0xc>
c00159bc:	83 ec 0c             	sub    esp,0xc
c00159bf:	68 24 07 00 00       	push   0x724
c00159c4:	e8 0a 21 ff ff       	call   c0007ad3 <malloc>
c00159c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00159d0:	6a 00                	push   0x0
c00159d2:	68 25 22 02 c0       	push   0xc0022225
c00159d7:	6a 01                	push   0x1
c00159d9:	50                   	push   eax
c00159da:	89 c3                	mov    ebx,eax
c00159dc:	e8 5f fc ff ff       	call   c0015640 <Process::Process(bool, char const*, Process*, char**)>
c00159e1:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00159e7:	83 c4 14             	add    esp,0x14
c00159ea:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c00159f0:	50                   	push   eax
c00159f1:	e8 79 2d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c00159f6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00159fd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015a07:	83 c8 01             	or     eax,0x1
c0015a0a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015a11:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a17:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015a1a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015a24:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015a2a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015a34:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015a3a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015a44:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015a4e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015a54:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015a5a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015a64:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015a6e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015a75:	e8 59 20 ff ff       	call   c0007ad3 <malloc>
c0015a7a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015a80:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015a86:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015a8c:	5a                   	pop    edx
c0015a8d:	59                   	pop    ecx
c0015a8e:	68 21 22 02 c0       	push   0xc0022221
c0015a93:	50                   	push   eax
c0015a94:	e8 b7 ab fe ff       	call   c0000650 <strcpy>
c0015a99:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015aa0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015aa4:	83 c4 14             	add    esp,0x14
c0015aa7:	5b                   	pop    ebx
c0015aa8:	5e                   	pop    esi
c0015aa9:	e9 bb a7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015aae:	66 90                	xchg   ax,ax

c0015ab0 <schedule()>:
c0015ab0:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015ab6:	85 d2                	test   edx,edx
c0015ab8:	74 0e                	je     c0015ac8 <schedule()+0x18>
c0015aba:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015ac4:	c3                   	ret    
c0015ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ac8:	53                   	push   ebx
c0015ac9:	83 ec 14             	sub    esp,0x14
c0015acc:	68 e4 96 02 c0       	push   0xc00296e4
c0015ad1:	e8 6a 9c 00 00       	call   c001f740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ad6:	83 c4 10             	add    esp,0x10
c0015ad9:	84 c0                	test   al,al
c0015adb:	75 3f                	jne    c0015b1c <schedule()+0x6c>
c0015add:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ae2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015ae5:	83 fa 01             	cmp    edx,0x1
c0015ae8:	74 3a                	je     c0015b24 <schedule()+0x74>
c0015aea:	66 90                	xchg   ax,ax
c0015aec:	83 ec 0c             	sub    esp,0xc
c0015aef:	68 e4 96 02 c0       	push   0xc00296e4
c0015af4:	e8 63 9c 00 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015af9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015b00:	89 c3                	mov    ebx,eax
c0015b02:	e8 5d 9c 00 00       	call   c001f764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b07:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015b0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b11:	e8 02 f8 ff ff       	call   c0015318 <switchToThread(ThreadControlBlock*)>
c0015b16:	83 c4 10             	add    esp,0x10
c0015b19:	8d 76 00             	lea    esi,[esi+0x0]
c0015b1c:	83 c4 08             	add    esp,0x8
c0015b1f:	5b                   	pop    ebx
c0015b20:	c3                   	ret    
c0015b21:	8d 76 00             	lea    esi,[esi+0x0]
c0015b24:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015b2b:	83 ec 08             	sub    esp,0x8
c0015b2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b33:	50                   	push   eax
c0015b34:	68 e4 96 02 c0       	push   0xc00296e4
c0015b39:	e8 e2 9c 00 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b3e:	83 c4 10             	add    esp,0x10
c0015b41:	eb a9                	jmp    c0015aec <schedule()+0x3c>
c0015b43:	90                   	nop

c0015b44 <Semaphore::tryAcquire()>:
c0015b44:	53                   	push   ebx
c0015b45:	83 ec 08             	sub    esp,0x8
c0015b48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b4c:	fa                   	cli    
c0015b4d:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015b53:	8d 42 01             	lea    eax,[edx+0x1]
c0015b56:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015b5b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015b60:	8d 58 01             	lea    ebx,[eax+0x1]
c0015b63:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015b69:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015b6c:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015b6e:	7c 2c                	jl     c0015b9c <Semaphore::tryAcquire()+0x58>
c0015b70:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015b75:	85 c0                	test   eax,eax
c0015b77:	75 0b                	jne    c0015b84 <Semaphore::tryAcquire()+0x40>
c0015b79:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015b7e:	85 c0                	test   eax,eax
c0015b80:	75 5a                	jne    c0015bdc <Semaphore::tryAcquire()+0x98>
c0015b82:	66 90                	xchg   ax,ax
c0015b84:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015b8a:	31 c0                	xor    eax,eax
c0015b8c:	85 d2                	test   edx,edx
c0015b8e:	75 04                	jne    c0015b94 <Semaphore::tryAcquire()+0x50>
c0015b90:	fb                   	sti    
c0015b91:	8d 76 00             	lea    esi,[esi+0x0]
c0015b94:	83 c4 08             	add    esp,0x8
c0015b97:	5b                   	pop    ebx
c0015b98:	c3                   	ret    
c0015b99:	8d 76 00             	lea    esi,[esi+0x0]
c0015b9c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ba1:	83 c3 01             	add    ebx,0x1
c0015ba4:	85 c0                	test   eax,eax
c0015ba6:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015ba9:	75 21                	jne    c0015bcc <Semaphore::tryAcquire()+0x88>
c0015bab:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015bb1:	85 c9                	test   ecx,ecx
c0015bb3:	74 17                	je     c0015bcc <Semaphore::tryAcquire()+0x88>
c0015bb5:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015bbf:	e8 ec fe ff ff       	call   c0015ab0 <schedule()>
c0015bc4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015bc9:	8d 50 ff             	lea    edx,[eax-0x1]
c0015bcc:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015bd2:	85 d2                	test   edx,edx
c0015bd4:	b0 01                	mov    al,0x1
c0015bd6:	75 bc                	jne    c0015b94 <Semaphore::tryAcquire()+0x50>
c0015bd8:	eb b6                	jmp    c0015b90 <Semaphore::tryAcquire()+0x4c>
c0015bda:	66 90                	xchg   ax,ax
c0015bdc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015be6:	e8 c5 fe ff ff       	call   c0015ab0 <schedule()>
c0015beb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015bf0:	8d 50 ff             	lea    edx,[eax-0x1]
c0015bf3:	31 c0                	xor    eax,eax
c0015bf5:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015bfb:	85 d2                	test   edx,edx
c0015bfd:	75 95                	jne    c0015b94 <Semaphore::tryAcquire()+0x50>
c0015bff:	eb 8f                	jmp    c0015b90 <Semaphore::tryAcquire()+0x4c>
c0015c01:	90                   	nop
c0015c02:	66 90                	xchg   ax,ax

c0015c04 <Semaphore::assertLocked(char const*)>:
c0015c04:	83 ec 0c             	sub    esp,0xc
c0015c07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c0b:	fa                   	cli    
c0015c0c:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015c12:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015c17:	83 c1 01             	add    ecx,0x1
c0015c1a:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015c20:	8d 48 01             	lea    ecx,[eax+0x1]
c0015c23:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015c29:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015c2b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015c2e:	7c 28                	jl     c0015c58 <Semaphore::assertLocked(char const*)+0x54>
c0015c30:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015c35:	85 c0                	test   eax,eax
c0015c37:	75 0b                	jne    c0015c44 <Semaphore::assertLocked(char const*)+0x40>
c0015c39:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015c3e:	85 c0                	test   eax,eax
c0015c40:	75 32                	jne    c0015c74 <Semaphore::assertLocked(char const*)+0x70>
c0015c42:	66 90                	xchg   ax,ax
c0015c44:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c49:	83 e8 01             	sub    eax,0x1
c0015c4c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c51:	75 01                	jne    c0015c54 <Semaphore::assertLocked(char const*)+0x50>
c0015c53:	fb                   	sti    
c0015c54:	83 c4 0c             	add    esp,0xc
c0015c57:	c3                   	ret    
c0015c58:	83 ec 0c             	sub    esp,0xc
c0015c5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015c5f:	52                   	push   edx
c0015c60:	e8 48 b5 ff ff       	call   c00111ad <KePanic(char const*)>
c0015c65:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	83 e8 01             	sub    eax,0x1
c0015c70:	eb be                	jmp    c0015c30 <Semaphore::assertLocked(char const*)+0x2c>
c0015c72:	66 90                	xchg   ax,ax
c0015c74:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015c7e:	e8 2d fe ff ff       	call   c0015ab0 <schedule()>
c0015c83:	eb bf                	jmp    c0015c44 <Semaphore::assertLocked(char const*)+0x40>
c0015c85:	8d 76 00             	lea    esi,[esi+0x0]

c0015c88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015c88:	83 ec 0c             	sub    esp,0xc
c0015c8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c94:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015c97:	e8 14 fe ff ff       	call   c0015ab0 <schedule()>
c0015c9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ca1:	83 e8 01             	sub    eax,0x1
c0015ca4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ca9:	75 01                	jne    c0015cac <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015cab:	fb                   	sti    
c0015cac:	83 c4 0c             	add    esp,0xc
c0015caf:	c3                   	ret    

c0015cb0 <blockTask(TaskState)>:
c0015cb0:	83 ec 0c             	sub    esp,0xc
c0015cb3:	fa                   	cli    
c0015cb4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015cb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015cbd:	83 c0 01             	add    eax,0x1
c0015cc0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015cc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cca:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015ccd:	e8 de fd ff ff       	call   c0015ab0 <schedule()>
c0015cd2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015cd7:	83 e8 01             	sub    eax,0x1
c0015cda:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015cdf:	75 03                	jne    c0015ce4 <blockTask(TaskState)+0x34>
c0015ce1:	fb                   	sti    
c0015ce2:	66 90                	xchg   ax,ax
c0015ce4:	83 c4 0c             	add    esp,0xc
c0015ce7:	c3                   	ret    

c0015ce8 <waitTask(int, int*, int)>:
c0015ce8:	83 ec 18             	sub    esp,0x18
c0015ceb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cf0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015cf4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015cf7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015cfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d00:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015d03:	6a 07                	push   0x7
c0015d05:	e8 a6 ff ff ff       	call   c0015cb0 <blockTask(TaskState)>
c0015d0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d0f:	83 c4 10             	add    esp,0x10
c0015d12:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015d15:	85 d2                	test   edx,edx
c0015d17:	74 0b                	je     c0015d24 <waitTask(int, int*, int)+0x3c>
c0015d19:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015d1c:	89 02                	mov    DWORD PTR [edx],eax
c0015d1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d23:	90                   	nop
c0015d24:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015d27:	83 c4 0c             	add    esp,0xc
c0015d2a:	c3                   	ret    
c0015d2b:	90                   	nop

c0015d2c <milliTenthSleepUntil(unsigned int)>:
c0015d2c:	83 ec 0c             	sub    esp,0xc
c0015d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d33:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015d39:	76 05                	jbe    c0015d40 <milliTenthSleepUntil(unsigned int)+0x14>
c0015d3b:	90                   	nop
c0015d3c:	83 c4 0c             	add    esp,0xc
c0015d3f:	c3                   	ret    
c0015d40:	fa                   	cli    
c0015d41:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015d47:	83 ec 08             	sub    esp,0x8
c0015d4a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015d50:	83 c2 01             	add    edx,0x1
c0015d53:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d59:	83 c1 01             	add    ecx,0x1
c0015d5c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015d62:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015d68:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015d6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d70:	50                   	push   eax
c0015d71:	68 d8 96 02 c0       	push   0xc00296d8
c0015d76:	e8 a5 9a 00 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d7b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015d82:	e8 29 ff ff ff       	call   c0015cb0 <blockTask(TaskState)>
c0015d87:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015d8c:	83 c4 10             	add    esp,0x10
c0015d8f:	83 e8 01             	sub    eax,0x1
c0015d92:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015d97:	85 c0                	test   eax,eax
c0015d99:	75 09                	jne    c0015da4 <milliTenthSleepUntil(unsigned int)+0x78>
c0015d9b:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015da0:	85 c0                	test   eax,eax
c0015da2:	75 14                	jne    c0015db8 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015da4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015da9:	83 e8 01             	sub    eax,0x1
c0015dac:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015db1:	75 89                	jne    c0015d3c <milliTenthSleepUntil(unsigned int)+0x10>
c0015db3:	fb                   	sti    
c0015db4:	83 c4 0c             	add    esp,0xc
c0015db7:	c3                   	ret    
c0015db8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015dc2:	e8 e9 fc ff ff       	call   c0015ab0 <schedule()>
c0015dc7:	eb db                	jmp    c0015da4 <milliTenthSleepUntil(unsigned int)+0x78>
c0015dc9:	8d 76 00             	lea    esi,[esi+0x0]

c0015dcc <milliTenthSleep(unsigned int)>:
c0015dcc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015dd0:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015dd5:	01 c2                	add    edx,eax
c0015dd7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015ddb:	e9 4c ff ff ff       	jmp    c0015d2c <milliTenthSleepUntil(unsigned int)>

c0015de0 <sleep(unsigned int)>:
c0015de0:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015de8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015dec:	eb de                	jmp    c0015dcc <milliTenthSleep(unsigned int)>
c0015dee:	66 90                	xchg   ax,ax

c0015df0 <Semaphore::acquire()>:
c0015df0:	83 ec 0c             	sub    esp,0xc
c0015df3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015df7:	fa                   	cli    
c0015df8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015dfd:	83 c0 01             	add    eax,0x1
c0015e00:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e05:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e0a:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e0d:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015e13:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015e16:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015e18:	7d 2e                	jge    c0015e48 <Semaphore::acquire()+0x58>
c0015e1a:	83 c1 01             	add    ecx,0x1
c0015e1d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015e20:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015e25:	85 c0                	test   eax,eax
c0015e27:	75 0b                	jne    c0015e34 <Semaphore::acquire()+0x44>
c0015e29:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015e2e:	85 c0                	test   eax,eax
c0015e30:	75 66                	jne    c0015e98 <Semaphore::acquire()+0xa8>
c0015e32:	66 90                	xchg   ax,ax
c0015e34:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e39:	83 e8 01             	sub    eax,0x1
c0015e3c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e41:	75 01                	jne    c0015e44 <Semaphore::acquire()+0x54>
c0015e43:	fb                   	sti    
c0015e44:	83 c4 0c             	add    esp,0xc
c0015e47:	c3                   	ret    
c0015e48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e4d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015e54:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015e57:	85 c9                	test   ecx,ecx
c0015e59:	74 51                	je     c0015eac <Semaphore::acquire()+0xbc>
c0015e5b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015e5e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e64:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015e67:	90                   	nop
c0015e68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e6d:	83 ec 0c             	sub    esp,0xc
c0015e70:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015e73:	68 a4 22 02 c0       	push   0xc00222a4
c0015e78:	e8 8d 4a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015e7d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015e84:	e8 27 fe ff ff       	call   c0015cb0 <blockTask(TaskState)>
c0015e89:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e8e:	83 c4 10             	add    esp,0x10
c0015e91:	83 e8 01             	sub    eax,0x1
c0015e94:	eb 8a                	jmp    c0015e20 <Semaphore::acquire()+0x30>
c0015e96:	66 90                	xchg   ax,ax
c0015e98:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015ea2:	e8 09 fc ff ff       	call   c0015ab0 <schedule()>
c0015ea7:	eb 8b                	jmp    c0015e34 <Semaphore::acquire()+0x44>
c0015ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0015eac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015eb4:	eb b2                	jmp    c0015e68 <Semaphore::acquire()+0x78>
c0015eb6:	66 90                	xchg   ax,ax

c0015eb8 <taskReturned>:
c0015eb8:	83 ec 18             	sub    esp,0x18
c0015ebb:	68 c4 22 02 c0       	push   0xc00222c4
c0015ec0:	e8 e8 b2 ff ff       	call   c00111ad <KePanic(char const*)>
c0015ec5:	83 c4 10             	add    esp,0x10
c0015ec8:	83 ec 0c             	sub    esp,0xc
c0015ecb:	6a 02                	push   0x2
c0015ecd:	e8 de fd ff ff       	call   c0015cb0 <blockTask(TaskState)>
c0015ed2:	fa                   	cli    
c0015ed3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ed8:	83 c0 01             	add    eax,0x1
c0015edb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ee0:	e8 cb fb ff ff       	call   c0015ab0 <schedule()>
c0015ee5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015eea:	83 c4 10             	add    esp,0x10
c0015eed:	83 e8 01             	sub    eax,0x1
c0015ef0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ef5:	85 c0                	test   eax,eax
c0015ef7:	75 cf                	jne    c0015ec8 <taskReturned+0x10>
c0015ef9:	fb                   	sti    
c0015efa:	eb cc                	jmp    c0015ec8 <taskReturned+0x10>

c0015efc <Thr::processFromPID(int)>:
c0015efc:	57                   	push   edi
c0015efd:	56                   	push   esi
c0015efe:	53                   	push   ebx
c0015eff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f03:	fa                   	cli    
c0015f04:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015f0a:	83 ec 0c             	sub    esp,0xc
c0015f0d:	68 e4 96 02 c0       	push   0xc00296e4
c0015f12:	83 c1 01             	add    ecx,0x1
c0015f15:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015f1b:	e8 3c 98 00 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f20:	83 c4 10             	add    esp,0x10
c0015f23:	89 c7                	mov    edi,eax
c0015f25:	eb 15                	jmp    c0015f3c <Thr::processFromPID(int)+0x40>
c0015f27:	90                   	nop
c0015f28:	83 ec 0c             	sub    esp,0xc
c0015f2b:	68 e4 96 02 c0       	push   0xc00296e4
c0015f30:	e8 27 98 00 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f35:	83 c4 10             	add    esp,0x10
c0015f38:	39 f8                	cmp    eax,edi
c0015f3a:	74 50                	je     c0015f8c <Thr::processFromPID(int)+0x90>
c0015f3c:	83 ec 0c             	sub    esp,0xc
c0015f3f:	68 e4 96 02 c0       	push   0xc00296e4
c0015f44:	e8 13 98 00 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f49:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015f50:	89 c3                	mov    ebx,eax
c0015f52:	e8 0d 98 00 00       	call   c001f764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f57:	58                   	pop    eax
c0015f58:	5a                   	pop    edx
c0015f59:	53                   	push   ebx
c0015f5a:	68 e4 96 02 c0       	push   0xc00296e4
c0015f5f:	e8 bc 98 00 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f64:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f67:	83 c4 10             	add    esp,0x10
c0015f6a:	39 30                	cmp    DWORD PTR [eax],esi
c0015f6c:	75 ba                	jne    c0015f28 <Thr::processFromPID(int)+0x2c>
c0015f6e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f73:	83 e8 01             	sub    eax,0x1
c0015f76:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f7b:	74 0b                	je     c0015f88 <Thr::processFromPID(int)+0x8c>
c0015f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0015f80:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f83:	90                   	nop
c0015f84:	5b                   	pop    ebx
c0015f85:	5e                   	pop    esi
c0015f86:	5f                   	pop    edi
c0015f87:	c3                   	ret    
c0015f88:	fb                   	sti    
c0015f89:	eb f5                	jmp    c0015f80 <Thr::processFromPID(int)+0x84>
c0015f8b:	90                   	nop
c0015f8c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f91:	8d 50 ff             	lea    edx,[eax-0x1]
c0015f94:	31 c0                	xor    eax,eax
c0015f96:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015f9c:	85 d2                	test   edx,edx
c0015f9e:	75 e4                	jne    c0015f84 <Thr::processFromPID(int)+0x88>
c0015fa0:	fb                   	sti    
c0015fa1:	5b                   	pop    ebx
c0015fa2:	5e                   	pop    esi
c0015fa3:	5f                   	pop    edi
c0015fa4:	c3                   	ret    
c0015fa5:	8d 76 00             	lea    esi,[esi+0x0]

c0015fa8 <unblockTask(ThreadControlBlock*)>:
c0015fa8:	53                   	push   ebx
c0015fa9:	83 ec 08             	sub    esp,0x8
c0015fac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fb0:	fa                   	cli    
c0015fb1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fb6:	83 c0 01             	add    eax,0x1
c0015fb9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015fbe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015fc1:	85 c0                	test   eax,eax
c0015fc3:	74 67                	je     c001602c <unblockTask(ThreadControlBlock*)+0x84>
c0015fc5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015fc8:	83 f8 01             	cmp    eax,0x1
c0015fcb:	74 37                	je     c0016004 <unblockTask(ThreadControlBlock*)+0x5c>
c0015fcd:	83 ec 0c             	sub    esp,0xc
c0015fd0:	68 e4 96 02 c0       	push   0xc00296e4
c0015fd5:	e8 82 97 00 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fda:	83 c4 10             	add    esp,0x10
c0015fdd:	85 c0                	test   eax,eax
c0015fdf:	75 1b                	jne    c0015ffc <unblockTask(ThreadControlBlock*)+0x54>
c0015fe1:	eb 5d                	jmp    c0016040 <unblockTask(ThreadControlBlock*)+0x98>
c0015fe3:	90                   	nop
c0015fe4:	83 ec 08             	sub    esp,0x8
c0015fe7:	50                   	push   eax
c0015fe8:	68 e4 96 02 c0       	push   0xc00296e4
c0015fed:	e8 8a 9a 00 00       	call   c001fa7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015ff2:	83 c4 10             	add    esp,0x10
c0015ff5:	85 c0                	test   eax,eax
c0015ff7:	74 47                	je     c0016040 <unblockTask(ThreadControlBlock*)+0x98>
c0015ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0015ffc:	39 c3                	cmp    ebx,eax
c0015ffe:	75 e4                	jne    c0015fe4 <unblockTask(ThreadControlBlock*)+0x3c>
c0016000:	eb 12                	jmp    c0016014 <unblockTask(ThreadControlBlock*)+0x6c>
c0016002:	66 90                	xchg   ax,ax
c0016004:	83 ec 0c             	sub    esp,0xc
c0016007:	68 43 22 02 c0       	push   0xc0022243
c001600c:	e8 f9 48 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016011:	83 c4 10             	add    esp,0x10
c0016014:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016019:	83 e8 01             	sub    eax,0x1
c001601c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016021:	75 01                	jne    c0016024 <unblockTask(ThreadControlBlock*)+0x7c>
c0016023:	fb                   	sti    
c0016024:	83 c4 08             	add    esp,0x8
c0016027:	5b                   	pop    ebx
c0016028:	c3                   	ret    
c0016029:	8d 76 00             	lea    esi,[esi+0x0]
c001602c:	83 ec 0c             	sub    esp,0xc
c001602f:	68 2c 22 02 c0       	push   0xc002222c
c0016034:	e8 d1 48 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016039:	83 c4 10             	add    esp,0x10
c001603c:	eb d6                	jmp    c0016014 <unblockTask(ThreadControlBlock*)+0x6c>
c001603e:	66 90                	xchg   ax,ax
c0016040:	83 ec 08             	sub    esp,0x8
c0016043:	53                   	push   ebx
c0016044:	68 e4 96 02 c0       	push   0xc00296e4
c0016049:	e8 d2 97 00 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001604e:	83 c4 10             	add    esp,0x10
c0016051:	eb c1                	jmp    c0016014 <unblockTask(ThreadControlBlock*)+0x6c>
c0016053:	90                   	nop

c0016054 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016054:	55                   	push   ebp
c0016055:	57                   	push   edi
c0016056:	56                   	push   esi
c0016057:	53                   	push   ebx
c0016058:	83 ec 1c             	sub    esp,0x1c
c001605b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001605f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016062:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016068:	85 ed                	test   ebp,ebp
c001606a:	7e 28                	jle    c0016094 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001606c:	31 f6                	xor    esi,esi
c001606e:	66 90                	xchg   ax,ax
c0016070:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016077:	83 ec 0c             	sub    esp,0xc
c001607a:	83 c6 01             	add    esi,0x1
c001607d:	57                   	push   edi
c001607e:	e8 60 1a ff ff       	call   c0007ae3 <free>
c0016083:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016086:	83 c4 10             	add    esp,0x10
c0016089:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001608f:	7f df                	jg     c0016070 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016091:	8d 76 00             	lea    esi,[esi+0x0]
c0016094:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001609e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00160a3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00160a6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00160a9:	d3 c0                	rol    eax,cl
c00160ab:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00160b2:	21 c8                	and    eax,ecx
c00160b4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00160bb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00160be:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00160c6:	89 f7                	mov    edi,esi
c00160c8:	0f 85 72 01 00 00    	jne    c0016240 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00160ce:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00160d4:	85 ed                	test   ebp,ebp
c00160d6:	74 1c                	je     c00160f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00160d8:	83 ec 0c             	sub    esp,0xc
c00160db:	55                   	push   ebp
c00160dc:	e8 dd ad ff ff       	call   c0010ebe <EnvVarContainer::~EnvVarContainer()>
c00160e1:	59                   	pop    ecx
c00160e2:	5e                   	pop    esi
c00160e3:	6a 0c                	push   0xc
c00160e5:	55                   	push   ebp
c00160e6:	e8 21 47 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00160eb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00160ee:	83 c4 10             	add    esp,0x10
c00160f1:	89 f7                	mov    edi,esi
c00160f3:	90                   	nop
c00160f4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00160fa:	85 c0                	test   eax,eax
c00160fc:	0f 84 b2 00 00 00    	je     c00161b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016102:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016105:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016109:	31 c9                	xor    ecx,ecx
c001610b:	eb 17                	jmp    c0016124 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001610d:	8d 76 00             	lea    esi,[esi+0x0]
c0016110:	83 c1 01             	add    ecx,0x1
c0016113:	83 f9 10             	cmp    ecx,0x10
c0016116:	0f 84 98 00 00 00    	je     c00161b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001611c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016122:	66 90                	xchg   ax,ax
c0016124:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001612b:	d3 fa                	sar    edx,cl
c001612d:	80 e2 01             	and    dl,0x1
c0016130:	74 de                	je     c0016110 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016132:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016135:	c1 e2 05             	shl    edx,0x5
c0016138:	29 ca                	sub    edx,ecx
c001613a:	01 d0                	add    eax,edx
c001613c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016142:	83 fd 07             	cmp    ebp,0x7
c0016145:	75 c9                	jne    c0016110 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016147:	05 40 02 00 00       	add    eax,0x240
c001614c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001614f:	83 fd ff             	cmp    ebp,0xffffffff
c0016152:	0f 8c f0 00 00 00    	jl     c0016248 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016158:	0f 84 ae 01 00 00    	je     c001630c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001615e:	85 ed                	test   ebp,ebp
c0016160:	0f 84 92 01 00 00    	je     c00162f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016166:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016168:	75 a6                	jne    c0016110 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001616a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001616e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016174:	01 d0                	add    eax,edx
c0016176:	66 90                	xchg   ax,ax
c0016178:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001617c:	83 ec 0c             	sub    esp,0xc
c001617f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016185:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016188:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001618e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016195:	50                   	push   eax
c0016196:	e8 0d fe ff ff       	call   c0015fa8 <unblockTask(ThreadControlBlock*)>
c001619b:	83 c4 10             	add    esp,0x10
c001619e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00161a1:	89 f7                	mov    edi,esi
c00161a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161a7:	83 c1 01             	add    ecx,0x1
c00161aa:	83 f9 10             	cmp    ecx,0x10
c00161ad:	0f 85 69 ff ff ff    	jne    c001611c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00161b3:	90                   	nop
c00161b4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00161ba:	85 c0                	test   eax,eax
c00161bc:	74 62                	je     c0016220 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00161be:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00161c4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00161ca:	74 54                	je     c0016220 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00161cc:	83 ec 0c             	sub    esp,0xc
c00161cf:	68 e4 96 02 c0       	push   0xc00296e4
c00161d4:	e8 83 95 00 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161d9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00161e0:	89 c7                	mov    edi,eax
c00161e2:	e8 59 95 00 00       	call   c001f740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00161e7:	83 c4 10             	add    esp,0x10
c00161ea:	84 c0                	test   al,al
c00161ec:	0f 84 ce 00 00 00    	je     c00162c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00161f2:	66 90                	xchg   ax,ax
c00161f4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161f7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00161fd:	85 d2                	test   edx,edx
c00161ff:	74 0f                	je     c0016210 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016201:	8b 02                	mov    eax,DWORD PTR [edx]
c0016203:	83 ec 0c             	sub    esp,0xc
c0016206:	52                   	push   edx
c0016207:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001620a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001620d:	83 c4 10             	add    esp,0x10
c0016210:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001621a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001621d:	8d 76 00             	lea    esi,[esi+0x0]
c0016220:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016226:	85 db                	test   ebx,ebx
c0016228:	74 16                	je     c0016240 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001622a:	83 ec 0c             	sub    esp,0xc
c001622d:	53                   	push   ebx
c001622e:	e8 5d 39 ff ff       	call   c0009b90 <VAS::~VAS()>
c0016233:	58                   	pop    eax
c0016234:	5a                   	pop    edx
c0016235:	6a 14                	push   0x14
c0016237:	53                   	push   ebx
c0016238:	e8 cf 45 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001623d:	83 c4 10             	add    esp,0x10
c0016240:	83 c4 1c             	add    esp,0x1c
c0016243:	5b                   	pop    ebx
c0016244:	5e                   	pop    esi
c0016245:	5f                   	pop    edi
c0016246:	5d                   	pop    ebp
c0016247:	c3                   	ret    
c0016248:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001624c:	83 ec 0c             	sub    esp,0xc
c001624f:	68 f8 22 02 c0       	push   0xc00222f8
c0016254:	e8 54 af ff ff       	call   c00111ad <KePanic(char const*)>
c0016259:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001625c:	83 c4 10             	add    esp,0x10
c001625f:	89 f7                	mov    edi,esi
c0016261:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016265:	e9 a6 fe ff ff       	jmp    c0016110 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001626a:	66 90                	xchg   ax,ax
c001626c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016272:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016278:	75 1e                	jne    c0016298 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001627a:	83 ec 0c             	sub    esp,0xc
c001627d:	68 60 23 02 c0       	push   0xc0022360
c0016282:	e8 83 46 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016287:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001628e:	e8 1d fa ff ff       	call   c0015cb0 <blockTask(TaskState)>
c0016293:	83 c4 10             	add    esp,0x10
c0016296:	66 90                	xchg   ax,ax
c0016298:	83 ec 08             	sub    esp,0x8
c001629b:	56                   	push   esi
c001629c:	68 e4 96 02 c0       	push   0xc00296e4
c00162a1:	e8 7a 95 00 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00162a6:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00162ad:	e8 aa 94 00 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162b2:	83 c4 10             	add    esp,0x10
c00162b5:	39 f8                	cmp    eax,edi
c00162b7:	0f 84 37 ff ff ff    	je     c00161f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00162bd:	8d 76 00             	lea    esi,[esi+0x0]
c00162c0:	83 ec 0c             	sub    esp,0xc
c00162c3:	68 e4 96 02 c0       	push   0xc00296e4
c00162c8:	e8 8f 94 00 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162cd:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00162d4:	89 c6                	mov    esi,eax
c00162d6:	e8 89 94 00 00       	call   c001f764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00162db:	83 c4 10             	add    esp,0x10
c00162de:	39 f3                	cmp    ebx,esi
c00162e0:	74 b6                	je     c0016298 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00162e2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00162e5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162e8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00162ee:	75 a8                	jne    c0016298 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00162f0:	e9 77 ff ff ff       	jmp    c001626c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00162f5:	8d 76 00             	lea    esi,[esi+0x0]
c00162f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162fc:	83 ec 0c             	sub    esp,0xc
c00162ff:	68 2c 23 02 c0       	push   0xc002232c
c0016304:	e9 4b ff ff ff       	jmp    c0016254 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016309:	8d 76 00             	lea    esi,[esi+0x0]
c001630c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016310:	8b 36                	mov    esi,DWORD PTR [esi]
c0016312:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016315:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016318:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001631e:	01 d7                	add    edi,edx
c0016320:	89 f8                	mov    eax,edi
c0016322:	e9 51 fe ff ff       	jmp    c0016178 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016327:	90                   	nop

c0016328 <cleanerTaskFunction(void*)>:
c0016328:	53                   	push   ebx
c0016329:	83 ec 08             	sub    esp,0x8
c001632c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016331:	83 e8 01             	sub    eax,0x1
c0016334:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016339:	75 01                	jne    c001633c <cleanerTaskFunction(void*)+0x14>
c001633b:	fb                   	sti    
c001633c:	fa                   	cli    
c001633d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016342:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016349:	8d 50 01             	lea    edx,[eax+0x1]
c001634c:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016352:	0f 84 c4 00 00 00    	je     c001641c <cleanerTaskFunction(void*)+0xf4>
c0016358:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001635d:	85 c0                	test   eax,eax
c001635f:	75 03                	jne    c0016364 <cleanerTaskFunction(void*)+0x3c>
c0016361:	fb                   	sti    
c0016362:	66 90                	xchg   ax,ax
c0016364:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c001636b:	fa                   	cli    
c001636c:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016372:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016378:	83 c2 01             	add    edx,0x1
c001637b:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016381:	83 c1 01             	add    ecx,0x1
c0016384:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001638a:	fa                   	cli    
c001638b:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c0016391:	83 c3 01             	add    ebx,0x1
c0016394:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c001639a:	eb 28                	jmp    c00163c4 <cleanerTaskFunction(void*)+0x9c>
c001639c:	83 ec 0c             	sub    esp,0xc
c001639f:	68 cc 96 02 c0       	push   0xc00296cc
c00163a4:	e8 b3 93 00 00       	call   c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163a9:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c00163b0:	89 c3                	mov    ebx,eax
c00163b2:	e8 ad 93 00 00       	call   c001f764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00163b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163ba:	e8 95 fc ff ff       	call   c0016054 <cleanupTerminatedTask(ThreadControlBlock*)>
c00163bf:	83 c4 10             	add    esp,0x10
c00163c2:	66 90                	xchg   ax,ax
c00163c4:	83 ec 0c             	sub    esp,0xc
c00163c7:	68 cc 96 02 c0       	push   0xc00296cc
c00163cc:	e8 6f 93 00 00       	call   c001f740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163d1:	83 c4 10             	add    esp,0x10
c00163d4:	84 c0                	test   al,al
c00163d6:	74 c4                	je     c001639c <cleanerTaskFunction(void*)+0x74>
c00163d8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00163dd:	83 e8 01             	sub    eax,0x1
c00163e0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00163e5:	75 01                	jne    c00163e8 <cleanerTaskFunction(void*)+0xc0>
c00163e7:	fb                   	sti    
c00163e8:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00163ed:	83 e8 01             	sub    eax,0x1
c00163f0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00163f5:	0f 85 31 ff ff ff    	jne    c001632c <cleanerTaskFunction(void*)+0x4>
c00163fb:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016400:	85 c0                	test   eax,eax
c0016402:	0f 84 24 ff ff ff    	je     c001632c <cleanerTaskFunction(void*)+0x4>
c0016408:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016412:	e8 99 f6 ff ff       	call   c0015ab0 <schedule()>
c0016417:	e9 10 ff ff ff       	jmp    c001632c <cleanerTaskFunction(void*)+0x4>
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	6a 02                	push   0x2
c0016421:	e8 62 f8 ff ff       	call   c0015c88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016426:	83 c4 10             	add    esp,0x10
c0016429:	e9 36 ff ff ff       	jmp    c0016364 <cleanerTaskFunction(void*)+0x3c>
c001642e:	66 90                	xchg   ax,ax

c0016430 <terminateTask(int)>:
c0016430:	83 ec 14             	sub    esp,0x14
c0016433:	fa                   	cli    
c0016434:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001643a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016440:	83 c2 01             	add    edx,0x1
c0016443:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016449:	83 c1 01             	add    ecx,0x1
c001644c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016452:	fa                   	cli    
c0016453:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016458:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001645c:	83 c0 01             	add    eax,0x1
c001645f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016464:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016469:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001646c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016471:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016474:	50                   	push   eax
c0016475:	68 cc 96 02 c0       	push   0xc00296cc
c001647a:	e8 a1 93 00 00       	call   c001f820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001647f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016484:	83 c4 10             	add    esp,0x10
c0016487:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001648e:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c0016493:	85 c0                	test   eax,eax
c0016495:	74 65                	je     c00164fc <terminateTask(int)+0xcc>
c0016497:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c001649e:	83 ec 0c             	sub    esp,0xc
c00164a1:	50                   	push   eax
c00164a2:	e8 01 fb ff ff       	call   c0015fa8 <unblockTask(ThreadControlBlock*)>
c00164a7:	83 c4 10             	add    esp,0x10
c00164aa:	66 90                	xchg   ax,ax
c00164ac:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164b1:	83 e8 01             	sub    eax,0x1
c00164b4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00164b9:	75 01                	jne    c00164bc <terminateTask(int)+0x8c>
c00164bb:	fb                   	sti    
c00164bc:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00164c1:	83 e8 01             	sub    eax,0x1
c00164c4:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00164c9:	75 09                	jne    c00164d4 <terminateTask(int)+0xa4>
c00164cb:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c00164d2:	75 3c                	jne    c0016510 <terminateTask(int)+0xe0>
c00164d4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164d9:	83 e8 01             	sub    eax,0x1
c00164dc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00164e1:	75 01                	jne    c00164e4 <terminateTask(int)+0xb4>
c00164e3:	fb                   	sti    
c00164e4:	fa                   	cli    
c00164e5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164ea:	83 c0 01             	add    eax,0x1
c00164ed:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00164f2:	66 90                	xchg   ax,ax
c00164f4:	e8 b7 f5 ff ff       	call   c0015ab0 <schedule()>
c00164f9:	eb d9                	jmp    c00164d4 <terminateTask(int)+0xa4>
c00164fb:	90                   	nop
c00164fc:	83 ec 0c             	sub    esp,0xc
c00164ff:	68 5a 22 02 c0       	push   0xc002225a
c0016504:	e8 01 44 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016509:	83 c4 10             	add    esp,0x10
c001650c:	eb 9e                	jmp    c00164ac <terminateTask(int)+0x7c>
c001650e:	66 90                	xchg   ax,ax
c0016510:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001651a:	eb d8                	jmp    c00164f4 <terminateTask(int)+0xc4>

c001651c <Thr::terminateFromIRQ(int)>:
c001651c:	83 ec 18             	sub    esp,0x18
c001651f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016523:	50                   	push   eax
c0016524:	e8 07 ff ff ff       	call   c0016430 <terminateTask(int)>
c0016529:	90                   	nop
c001652a:	66 90                	xchg   ax,ax

c001652c <Semaphore::release()>:
c001652c:	83 ec 0c             	sub    esp,0xc
c001652f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016533:	fa                   	cli    
c0016534:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016539:	83 c0 01             	add    eax,0x1
c001653c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016541:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016546:	8d 48 01             	lea    ecx,[eax+0x1]
c0016549:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001654f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016552:	85 c9                	test   ecx,ecx
c0016554:	74 42                	je     c0016598 <Semaphore::release()+0x6c>
c0016556:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016559:	83 ec 0c             	sub    esp,0xc
c001655c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001655f:	51                   	push   ecx
c0016560:	e8 43 fa ff ff       	call   c0015fa8 <unblockTask(ThreadControlBlock*)>
c0016565:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001656a:	83 c4 10             	add    esp,0x10
c001656d:	83 e8 01             	sub    eax,0x1
c0016570:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016575:	85 c0                	test   eax,eax
c0016577:	75 0b                	jne    c0016584 <Semaphore::release()+0x58>
c0016579:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001657e:	85 c0                	test   eax,eax
c0016580:	75 22                	jne    c00165a4 <Semaphore::release()+0x78>
c0016582:	66 90                	xchg   ax,ax
c0016584:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016589:	83 e8 01             	sub    eax,0x1
c001658c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016591:	75 01                	jne    c0016594 <Semaphore::release()+0x68>
c0016593:	fb                   	sti    
c0016594:	83 c4 0c             	add    esp,0xc
c0016597:	c3                   	ret    
c0016598:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001659b:	83 e9 01             	sub    ecx,0x1
c001659e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00165a1:	eb cd                	jmp    c0016570 <Semaphore::release()+0x44>
c00165a3:	90                   	nop
c00165a4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00165ae:	e8 fd f4 ff ff       	call   c0015ab0 <schedule()>
c00165b3:	eb cf                	jmp    c0016584 <Semaphore::release()+0x58>
c00165b5:	8d 76 00             	lea    esi,[esi+0x0]

c00165b8 <__static_initialization_and_destruction_0(int, int)>:
c00165b8:	83 ec 0c             	sub    esp,0xc
c00165bb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00165c0:	0f 85 8e 00 00 00    	jne    c0016654 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00165c6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00165ce:	0f 85 80 00 00 00    	jne    c0016654 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00165d4:	83 ec 0c             	sub    esp,0xc
c00165d7:	68 e4 96 02 c0       	push   0xc00296e4
c00165dc:	e8 f3 94 00 00       	call   c001fad4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00165e1:	83 c4 10             	add    esp,0x10
c00165e4:	83 ec 04             	sub    esp,0x4
c00165e7:	68 30 2f 02 c0       	push   0xc0022f30
c00165ec:	68 e4 96 02 c0       	push   0xc00296e4
c00165f1:	68 84 fa 01 c0       	push   0xc001fa84
c00165f6:	e8 c1 41 ff ff       	call   c000a7bc <__cxa_atexit>
c00165fb:	83 c4 10             	add    esp,0x10
c00165fe:	83 ec 0c             	sub    esp,0xc
c0016601:	68 d8 96 02 c0       	push   0xc00296d8
c0016606:	e8 c9 94 00 00       	call   c001fad4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001660b:	83 c4 10             	add    esp,0x10
c001660e:	83 ec 04             	sub    esp,0x4
c0016611:	68 30 2f 02 c0       	push   0xc0022f30
c0016616:	68 d8 96 02 c0       	push   0xc00296d8
c001661b:	68 84 fa 01 c0       	push   0xc001fa84
c0016620:	e8 97 41 ff ff       	call   c000a7bc <__cxa_atexit>
c0016625:	83 c4 10             	add    esp,0x10
c0016628:	83 ec 0c             	sub    esp,0xc
c001662b:	68 cc 96 02 c0       	push   0xc00296cc
c0016630:	e8 9f 94 00 00       	call   c001fad4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016635:	83 c4 10             	add    esp,0x10
c0016638:	83 ec 04             	sub    esp,0x4
c001663b:	68 30 2f 02 c0       	push   0xc0022f30
c0016640:	68 cc 96 02 c0       	push   0xc00296cc
c0016645:	68 84 fa 01 c0       	push   0xc001fa84
c001664a:	e8 6d 41 ff ff       	call   c000a7bc <__cxa_atexit>
c001664f:	83 c4 10             	add    esp,0x10
c0016652:	66 90                	xchg   ax,ax
c0016654:	90                   	nop
c0016655:	83 c4 0c             	add    esp,0xc
c0016658:	c3                   	ret    
c0016659:	8d 76 00             	lea    esi,[esi+0x0]

c001665c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001665c:	83 ec 0c             	sub    esp,0xc
c001665f:	83 ec 08             	sub    esp,0x8
c0016662:	68 ff ff 00 00       	push   0xffff
c0016667:	6a 01                	push   0x1
c0016669:	e8 4a ff ff ff       	call   c00165b8 <__static_initialization_and_destruction_0(int, int)>
c001666e:	83 c4 10             	add    esp,0x10
c0016671:	83 c4 0c             	add    esp,0xc
c0016674:	c3                   	ret    

c0016675 <Vm::inbv(unsigned short)>:
c0016675:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016679:	66 81 fa fe fe       	cmp    dx,0xfefe
c001667e:	75 06                	jne    c0016686 <Vm::inbv(unsigned short)+0x11>
c0016680:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c0016685:	c3                   	ret    
c0016686:	ec                   	in     al,dx
c0016687:	c3                   	ret    

c0016688 <Vm::outbv(unsigned short, unsigned char)>:
c0016688:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001668c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016690:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016695:	75 25                	jne    c00166bc <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016697:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c001669d:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c00166a3:	8d 51 01             	lea    edx,[ecx+0x1]
c00166a6:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c00166ac:	83 fa 20             	cmp    edx,0x20
c00166af:	75 0c                	jne    c00166bd <Vm::outbv(unsigned short, unsigned char)+0x35>
c00166b1:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c00166bb:	c3                   	ret    
c00166bc:	ee                   	out    dx,al
c00166bd:	c3                   	ret    

c00166be <Vm::realToLinear(unsigned short, unsigned short)>:
c00166be:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00166c3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00166c8:	c1 e0 04             	shl    eax,0x4
c00166cb:	01 d0                	add    eax,edx
c00166cd:	c3                   	ret    

c00166ce <Vm::getSegment(unsigned int)>:
c00166ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166d2:	c1 e8 10             	shr    eax,0x10
c00166d5:	c3                   	ret    

c00166d6 <Vm::getOffset(unsigned int)>:
c00166d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166da:	c3                   	ret    

c00166db <Vm::mainloop2()>:
c00166db:	83 ec 18             	sub    esp,0x18
c00166de:	fa                   	cli    
c00166df:	6a 02                	push   0x2
c00166e1:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00166e7:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c00166ee:	e8 95 f5 ff ff       	call   c0015c88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00166f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166f8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00166fc:	52                   	push   edx
c00166fd:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016701:	52                   	push   edx
c0016702:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016706:	52                   	push   edx
c0016707:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001670b:	50                   	push   eax
c001670c:	e8 fe 9a fe ff       	call   c000020f <goToVM86>
c0016711:	83 c4 2c             	add    esp,0x2c
c0016714:	c3                   	ret    

c0016715 <Vm::mainVm8086Loop(void*)>:
c0016715:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001671a:	48                   	dec    eax
c001671b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016720:	75 01                	jne    c0016723 <Vm::mainVm8086Loop(void*)+0xe>
c0016722:	fb                   	sti    
c0016723:	eb b6                	jmp    c00166db <Vm::mainloop2()>

c0016725 <Vm::mainloop3(unsigned long)>:
c0016725:	83 ec 18             	sub    esp,0x18
c0016728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001672c:	fa                   	cli    
c001672d:	6a 02                	push   0x2
c001672f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016735:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c001673c:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016741:	e8 42 f5 ff ff       	call   c0015c88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016746:	83 c4 1c             	add    esp,0x1c
c0016749:	eb 90                	jmp    c00166db <Vm::mainloop2()>

c001674b <Vm::initialise8086()>:
c001674b:	83 ec 0c             	sub    esp,0xc
c001674e:	68 80 00 00 00       	push   0x80
c0016753:	6a 00                	push   0x0
c0016755:	68 15 67 01 c0       	push   0xc0016715
c001675a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016760:	e8 ff f0 ff ff       	call   c0015864 <Process::createThread(void (*)(void*), void*, int)>
c0016765:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001676c:	68 00 01 00 00       	push   0x100
c0016771:	6a 00                	push   0x0
c0016773:	6a 00                	push   0x0
c0016775:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c001677a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001677f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016785:	e8 7e 37 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001678a:	83 c4 2c             	add    esp,0x2c
c001678d:	c3                   	ret    

c001678e <Vm::finish8086()>:
c001678e:	53                   	push   ebx
c001678f:	83 ec 08             	sub    esp,0x8
c0016792:	fa                   	cli    
c0016793:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016799:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c00167a0:	75 15                	jne    c00167b7 <Vm::finish8086()+0x29>
c00167a2:	e8 09 f3 ff ff       	call   c0015ab0 <schedule()>
c00167a7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167ac:	48                   	dec    eax
c00167ad:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00167b2:	75 de                	jne    c0016792 <Vm::finish8086()+0x4>
c00167b4:	fb                   	sti    
c00167b5:	eb db                	jmp    c0016792 <Vm::finish8086()+0x4>
c00167b7:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c00167be:	83 ec 0c             	sub    esp,0xc
c00167c1:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c00167c7:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00167cd:	e8 d6 f7 ff ff       	call   c0015fa8 <unblockTask(ThreadControlBlock*)>
c00167d2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	8d 50 ff             	lea    edx,[eax-0x1]
c00167dd:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00167e3:	85 d2                	test   edx,edx
c00167e5:	75 01                	jne    c00167e8 <Vm::finish8086()+0x5a>
c00167e7:	fb                   	sti    
c00167e8:	83 c4 08             	add    esp,0x8
c00167eb:	89 d8                	mov    eax,ebx
c00167ed:	5b                   	pop    ebx
c00167ee:	c3                   	ret    

c00167ef <Vm::getOutput8086(unsigned char*)>:
c00167ef:	57                   	push   edi
c00167f0:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00167f6:	56                   	push   esi
c00167f7:	be 40 97 02 c0       	mov    esi,0xc0029740
c00167fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016800:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016802:	5e                   	pop    esi
c0016803:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c0016808:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016812:	5f                   	pop    edi
c0016813:	c3                   	ret    

c0016814 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016814:	55                   	push   ebp
c0016815:	57                   	push   edi
c0016816:	56                   	push   esi
c0016817:	53                   	push   ebx
c0016818:	83 ec 0c             	sub    esp,0xc
c001681b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001681f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016823:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016827:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001682b:	fa                   	cli    
c001682c:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016832:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016839:	75 15                	jne    c0016850 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001683b:	e8 70 f2 ff ff       	call   c0015ab0 <schedule()>
c0016840:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016845:	48                   	dec    eax
c0016846:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001684b:	75 de                	jne    c001682b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001684d:	fb                   	sti    
c001684e:	eb db                	jmp    c001682b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016850:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c001685a:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c001685f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016863:	0f b7 ff             	movzx  edi,di
c0016866:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001686a:	0f b7 f6             	movzx  esi,si
c001686d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016871:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016875:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016879:	50                   	push   eax
c001687a:	6a 20                	push   0x20
c001687c:	6a 00                	push   0x0
c001687e:	68 40 97 02 c0       	push   0xc0029740
c0016883:	e8 68 9c fe ff       	call   c00004f0 <memset>
c0016888:	5a                   	pop    edx
c0016889:	59                   	pop    ecx
c001688a:	57                   	push   edi
c001688b:	56                   	push   esi
c001688c:	e8 2d fe ff ff       	call   c00166be <Vm::realToLinear(unsigned short, unsigned short)>
c0016891:	83 c4 10             	add    esp,0x10
c0016894:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016898:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001689c:	89 c7                	mov    edi,eax
c001689e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168a0:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c00168a7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168ac:	48                   	dec    eax
c00168ad:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00168b2:	75 01                	jne    c00168b5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00168b4:	fb                   	sti    
c00168b5:	83 ec 0c             	sub    esp,0xc
c00168b8:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00168be:	e8 e5 f6 ff ff       	call   c0015fa8 <unblockTask(ThreadControlBlock*)>
c00168c3:	83 c4 1c             	add    esp,0x1c
c00168c6:	b0 01                	mov    al,0x1
c00168c8:	5b                   	pop    ebx
c00168c9:	5e                   	pop    esi
c00168ca:	5f                   	pop    edi
c00168cb:	5d                   	pop    ebp
c00168cc:	c3                   	ret    

c00168cd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00168cd:	55                   	push   ebp
c00168ce:	57                   	push   edi
c00168cf:	56                   	push   esi
c00168d0:	53                   	push   ebx
c00168d1:	83 ec 34             	sub    esp,0x34
c00168d4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00168d8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00168dc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00168e0:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c00168e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00168ec:	68 88 23 02 c0       	push   0xc0022388
c00168f1:	e8 14 40 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00168f6:	83 c4 10             	add    esp,0x10
c00168f9:	fa                   	cli    
c00168fa:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016900:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016906:	84 db                	test   bl,bl
c0016908:	75 15                	jne    c001691f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c001690a:	e8 a1 f1 ff ff       	call   c0015ab0 <schedule()>
c001690f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016914:	48                   	dec    eax
c0016915:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001691a:	75 dd                	jne    c00168f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001691c:	fb                   	sti    
c001691d:	eb da                	jmp    c00168f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001691f:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016929:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001692d:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016932:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016936:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001693a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001693e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016942:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016946:	50                   	push   eax
c0016947:	6a 20                	push   0x20
c0016949:	6a 00                	push   0x0
c001694b:	68 40 97 02 c0       	push   0xc0029740
c0016950:	e8 9b 9b fe ff       	call   c00004f0 <memset>
c0016955:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001695c:	e8 72 11 ff ff       	call   c0007ad3 <malloc>
c0016961:	83 c4 0c             	add    esp,0xc
c0016964:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001696a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001696e:	89 c5                	mov    ebp,eax
c0016970:	50                   	push   eax
c0016971:	e8 8a 4d ff ff       	call   c000b700 <File::File(char const*, Process*)>
c0016976:	83 c4 10             	add    esp,0x10
c0016979:	85 ed                	test   ebp,ebp
c001697b:	75 0a                	jne    c0016987 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c001697d:	83 ec 0c             	sub    esp,0xc
c0016980:	68 aa 23 02 c0       	push   0xc00223aa
c0016985:	eb 2b                	jmp    c00169b2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016987:	50                   	push   eax
c0016988:	8d 44 24 17          	lea    eax,[esp+0x17]
c001698c:	50                   	push   eax
c001698d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016991:	50                   	push   eax
c0016992:	55                   	push   ebp
c0016993:	e8 26 51 ff ff       	call   c000babe <File::stat(unsigned long long*, bool*)>
c0016998:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001699c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00169a0:	83 c4 10             	add    esp,0x10
c00169a3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00169a8:	74 27                	je     c00169d1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c00169aa:	83 ec 0c             	sub    esp,0xc
c00169ad:	68 be 23 02 c0       	push   0xc00223be
c00169b2:	e8 f6 a7 ff ff       	call   c00111ad <KePanic(char const*)>
c00169b7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169bc:	83 c4 10             	add    esp,0x10
c00169bf:	48                   	dec    eax
c00169c0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169c5:	85 c0                	test   eax,eax
c00169c7:	75 01                	jne    c00169ca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00169c9:	fb                   	sti    
c00169ca:	31 db                	xor    ebx,ebx
c00169cc:	e9 90 00 00 00       	jmp    c0016a61 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00169d1:	51                   	push   ecx
c00169d2:	51                   	push   ecx
c00169d3:	6a 01                	push   0x1
c00169d5:	55                   	push   ebp
c00169d6:	e8 e1 4d ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c00169db:	83 c4 10             	add    esp,0x10
c00169de:	85 c0                	test   eax,eax
c00169e0:	74 26                	je     c0016a08 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00169e2:	83 ec 0c             	sub    esp,0xc
c00169e5:	68 d7 23 02 c0       	push   0xc00223d7
c00169ea:	e8 be a7 ff ff       	call   c00111ad <KePanic(char const*)>
c00169ef:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169f4:	83 c4 10             	add    esp,0x10
c00169f7:	48                   	dec    eax
c00169f8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169fd:	85 c0                	test   eax,eax
c00169ff:	75 c9                	jne    c00169ca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016a01:	fb                   	sti    
c0016a02:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016a06:	eb 59                	jmp    c0016a61 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016a08:	50                   	push   eax
c0016a09:	0f b7 ff             	movzx  edi,di
c0016a0c:	50                   	push   eax
c0016a0d:	0f b7 f6             	movzx  esi,si
c0016a10:	57                   	push   edi
c0016a11:	56                   	push   esi
c0016a12:	e8 a7 fc ff ff       	call   c00166be <Vm::realToLinear(unsigned short, unsigned short)>
c0016a17:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016a1a:	5a                   	pop    edx
c0016a1b:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016a1f:	56                   	push   esi
c0016a20:	50                   	push   eax
c0016a21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a29:	55                   	push   ebp
c0016a2a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a2d:	83 c4 14             	add    esp,0x14
c0016a30:	55                   	push   ebp
c0016a31:	e8 e4 4d ff ff       	call   c000b81a <File::close()>
c0016a36:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a3b:	83 c4 10             	add    esp,0x10
c0016a3e:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016a45:	48                   	dec    eax
c0016a46:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a4b:	85 c0                	test   eax,eax
c0016a4d:	75 01                	jne    c0016a50 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016a4f:	fb                   	sti    
c0016a50:	83 ec 0c             	sub    esp,0xc
c0016a53:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016a59:	e8 4a f5 ff ff       	call   c0015fa8 <unblockTask(ThreadControlBlock*)>
c0016a5e:	83 c4 10             	add    esp,0x10
c0016a61:	83 c4 2c             	add    esp,0x2c
c0016a64:	88 d8                	mov    al,bl
c0016a66:	5b                   	pop    ebx
c0016a67:	5e                   	pop    esi
c0016a68:	5f                   	pop    edi
c0016a69:	5d                   	pop    ebp
c0016a6a:	c3                   	ret    

c0016a6b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016a6b:	57                   	push   edi
c0016a6c:	56                   	push   esi
c0016a6d:	53                   	push   ebx
c0016a6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a76:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016a7a:	83 e8 06             	sub    eax,0x6
c0016a7d:	0f b7 c0             	movzx  eax,ax
c0016a80:	50                   	push   eax
c0016a81:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016a86:	50                   	push   eax
c0016a87:	e8 32 fc ff ff       	call   c00166be <Vm::realToLinear(unsigned short, unsigned short)>
c0016a8c:	5a                   	pop    edx
c0016a8d:	59                   	pop    ecx
c0016a8e:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016a91:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016a94:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016a97:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016a9d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016aa0:	8d 51 02             	lea    edx,[ecx+0x2]
c0016aa3:	66 89 10             	mov    WORD PTR [eax],dx
c0016aa6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016aaa:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016aae:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016ab2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016ab5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016ab9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016abf:	89 f1                	mov    ecx,esi
c0016ac1:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016ac5:	89 f2                	mov    edx,esi
c0016ac7:	0f b6 d6             	movzx  edx,dh
c0016aca:	0f b6 f1             	movzx  esi,cl
c0016acd:	74 0a                	je     c0016ad9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016acf:	c1 e2 08             	shl    edx,0x8
c0016ad2:	09 f2                	or     edx,esi
c0016ad4:	80 ce 02             	or     dh,0x2
c0016ad7:	eb 08                	jmp    c0016ae1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016ad9:	c1 e2 08             	shl    edx,0x8
c0016adc:	09 f2                	or     edx,esi
c0016ade:	80 e6 fd             	and    dh,0xfd
c0016ae1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016ae5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aea:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016aee:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016af6:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016af9:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016b01:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016b04:	5b                   	pop    ebx
c0016b05:	5e                   	pop    esi
c0016b06:	5f                   	pop    edi
c0016b07:	c3                   	ret    

c0016b08 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016b08:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b0d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b12:	c1 e0 04             	shl    eax,0x4
c0016b15:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016b18:	c3                   	ret    

c0016b19 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016b19:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b1e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b23:	c1 e0 04             	shl    eax,0x4
c0016b26:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016b2a:	c3                   	ret    

c0016b2b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016b2b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b30:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b35:	c1 e0 04             	shl    eax,0x4
c0016b38:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016b3b:	c3                   	ret    

c0016b3c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016b3c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b41:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b46:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016b4a:	c1 e0 04             	shl    eax,0x4
c0016b4d:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016b50:	c3                   	ret    

c0016b51 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016b51:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b56:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b5b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b5f:	c1 e0 04             	shl    eax,0x4
c0016b62:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016b66:	c3                   	ret    

c0016b67 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016b67:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b6c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b75:	c1 e0 04             	shl    eax,0x4
c0016b78:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016b7b:	c3                   	ret    

c0016b7c <Vm::faultHandler(regs*)>:
c0016b7c:	55                   	push   ebp
c0016b7d:	57                   	push   edi
c0016b7e:	56                   	push   esi
c0016b7f:	53                   	push   ebx
c0016b80:	83 ec 2c             	sub    esp,0x2c
c0016b83:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016b87:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016b8a:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016b8e:	0f b7 f8             	movzx  edi,ax
c0016b91:	0f b7 c0             	movzx  eax,ax
c0016b94:	52                   	push   edx
c0016b95:	50                   	push   eax
c0016b96:	e8 23 fb ff ff       	call   c00166be <Vm::realToLinear(unsigned short, unsigned short)>
c0016b9b:	5a                   	pop    edx
c0016b9c:	59                   	pop    ecx
c0016b9d:	89 c1                	mov    ecx,eax
c0016b9f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ba2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ba6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016bab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016baf:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016bb2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016bb6:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016bbb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016bbf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bc3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016bc7:	e8 f2 fa ff ff       	call   c00166be <Vm::realToLinear(unsigned short, unsigned short)>
c0016bcc:	5e                   	pop    esi
c0016bcd:	be 06 00 00 00       	mov    esi,0x6
c0016bd2:	5d                   	pop    ebp
c0016bd3:	31 ed                	xor    ebp,ebp
c0016bd5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016bda:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016bdd:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016be3:	0f 84 74 02 00 00    	je     c0016e5d <Vm::faultHandler(regs*)+0x2e1>
c0016be9:	0f 87 94 00 00 00    	ja     c0016c83 <Vm::faultHandler(regs*)+0x107>
c0016bef:	83 fa 66             	cmp    edx,0x66
c0016bf2:	0f 84 e2 01 00 00    	je     c0016dda <Vm::faultHandler(regs*)+0x25e>
c0016bf8:	77 47                	ja     c0016c41 <Vm::faultHandler(regs*)+0xc5>
c0016bfa:	83 fa 36             	cmp    edx,0x36
c0016bfd:	0f 84 ca 01 00 00    	je     c0016dcd <Vm::faultHandler(regs*)+0x251>
c0016c03:	77 1a                	ja     c0016c1f <Vm::faultHandler(regs*)+0xa3>
c0016c05:	83 fa 26             	cmp    edx,0x26
c0016c08:	0f 84 98 01 00 00    	je     c0016da6 <Vm::faultHandler(regs*)+0x22a>
c0016c0e:	83 fa 2e             	cmp    edx,0x2e
c0016c11:	0f 85 27 06 00 00    	jne    c001723e <Vm::faultHandler(regs*)+0x6c2>
c0016c17:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c1a:	31 f6                	xor    esi,esi
c0016c1c:	41                   	inc    ecx
c0016c1d:	eb bb                	jmp    c0016bda <Vm::faultHandler(regs*)+0x5e>
c0016c1f:	83 fa 64             	cmp    edx,0x64
c0016c22:	0f 84 8b 01 00 00    	je     c0016db3 <Vm::faultHandler(regs*)+0x237>
c0016c28:	0f 87 92 01 00 00    	ja     c0016dc0 <Vm::faultHandler(regs*)+0x244>
c0016c2e:	83 fa 3e             	cmp    edx,0x3e
c0016c31:	0f 85 07 06 00 00    	jne    c001723e <Vm::faultHandler(regs*)+0x6c2>
c0016c37:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c3a:	be 01 00 00 00       	mov    esi,0x1
c0016c3f:	eb db                	jmp    c0016c1c <Vm::faultHandler(regs*)+0xa0>
c0016c41:	83 fa 6d             	cmp    edx,0x6d
c0016c44:	0f 84 34 03 00 00    	je     c0016f7e <Vm::faultHandler(regs*)+0x402>
c0016c4a:	77 17                	ja     c0016c63 <Vm::faultHandler(regs*)+0xe7>
c0016c4c:	83 fa 67             	cmp    edx,0x67
c0016c4f:	0f 84 92 01 00 00    	je     c0016de7 <Vm::faultHandler(regs*)+0x26b>
c0016c55:	83 fa 6c             	cmp    edx,0x6c
c0016c58:	0f 84 b1 02 00 00    	je     c0016f0f <Vm::faultHandler(regs*)+0x393>
c0016c5e:	e9 db 05 00 00       	jmp    c001723e <Vm::faultHandler(regs*)+0x6c2>
c0016c63:	83 fa 6f             	cmp    edx,0x6f
c0016c66:	0f 84 40 04 00 00    	je     c00170ac <Vm::faultHandler(regs*)+0x530>
c0016c6c:	0f 82 a2 03 00 00    	jb     c0017014 <Vm::faultHandler(regs*)+0x498>
c0016c72:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016c78:	0f 84 76 01 00 00    	je     c0016df4 <Vm::faultHandler(regs*)+0x278>
c0016c7e:	e9 bb 05 00 00       	jmp    c001723e <Vm::faultHandler(regs*)+0x6c2>
c0016c83:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016c89:	0f 84 57 05 00 00    	je     c00171e6 <Vm::faultHandler(regs*)+0x66a>
c0016c8f:	0f 87 a9 00 00 00    	ja     c0016d3e <Vm::faultHandler(regs*)+0x1c2>
c0016c95:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016c9b:	0f 84 d6 04 00 00    	je     c0017177 <Vm::faultHandler(regs*)+0x5fb>
c0016ca1:	77 78                	ja     c0016d1b <Vm::faultHandler(regs*)+0x19f>
c0016ca3:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016ca9:	0f 84 0e 02 00 00    	je     c0016ebd <Vm::faultHandler(regs*)+0x341>
c0016caf:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016cb5:	0f 85 83 05 00 00    	jne    c001723e <Vm::faultHandler(regs*)+0x6c2>
c0016cbb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016cbf:	89 d1                	mov    ecx,edx
c0016cc1:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016cc4:	c1 e1 08             	shl    ecx,0x8
c0016cc7:	09 ca                	or     edx,ecx
c0016cc9:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016ccc:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016cd0:	89 d1                	mov    ecx,edx
c0016cd2:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016cd6:	c1 e1 08             	shl    ecx,0x8
c0016cd9:	09 ca                	or     edx,ecx
c0016cdb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016cde:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016ce2:	89 d1                	mov    ecx,edx
c0016ce4:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016ce8:	c1 e1 08             	shl    ecx,0x8
c0016ceb:	09 ca                	or     edx,ecx
c0016ced:	81 ca 00 02 02 00    	or     edx,0x20200
c0016cf3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016cf6:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016cfa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d00:	d1 e8                	shr    eax,1
c0016d02:	83 e0 01             	and    eax,0x1
c0016d05:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016d08:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d0b:	83 c0 06             	add    eax,0x6
c0016d0e:	25 ff ff 00 00       	and    eax,0xffff
c0016d13:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016d16:	e9 1f 05 00 00       	jmp    c001723a <Vm::faultHandler(regs*)+0x6be>
c0016d1b:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016d21:	0f 84 95 04 00 00    	je     c00171bc <Vm::faultHandler(regs*)+0x640>
c0016d27:	0f 82 66 04 00 00    	jb     c0017193 <Vm::faultHandler(regs*)+0x617>
c0016d2d:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016d33:	0f 84 9a 04 00 00    	je     c00171d3 <Vm::faultHandler(regs*)+0x657>
c0016d39:	e9 00 05 00 00       	jmp    c001723e <Vm::faultHandler(regs*)+0x6c2>
c0016d3e:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016d44:	0f 84 dd 04 00 00    	je     c0017227 <Vm::faultHandler(regs*)+0x6ab>
c0016d4a:	77 2e                	ja     c0016d7a <Vm::faultHandler(regs*)+0x1fe>
c0016d4c:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016d52:	0f 84 aa 04 00 00    	je     c0017202 <Vm::faultHandler(regs*)+0x686>
c0016d58:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016d5e:	0f 85 da 04 00 00    	jne    c001723e <Vm::faultHandler(regs*)+0x6c2>
c0016d64:	50                   	push   eax
c0016d65:	50                   	push   eax
c0016d66:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016d6a:	50                   	push   eax
c0016d6b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016d6f:	50                   	push   eax
c0016d70:	e8 13 f9 ff ff       	call   c0016688 <Vm::outbv(unsigned short, unsigned char)>
c0016d75:	e9 a5 04 00 00       	jmp    c001721f <Vm::faultHandler(regs*)+0x6a3>
c0016d7a:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016d80:	0f 84 6d 01 00 00    	je     c0016ef3 <Vm::faultHandler(regs*)+0x377>
c0016d86:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016d8c:	0f 84 6f 01 00 00    	je     c0016f01 <Vm::faultHandler(regs*)+0x385>
c0016d92:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016d98:	0f 85 a0 04 00 00    	jne    c001723e <Vm::faultHandler(regs*)+0x6c2>
c0016d9e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016da1:	e9 76 fe ff ff       	jmp    c0016c1c <Vm::faultHandler(regs*)+0xa0>
c0016da6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016da9:	be 02 00 00 00       	mov    esi,0x2
c0016dae:	e9 69 fe ff ff       	jmp    c0016c1c <Vm::faultHandler(regs*)+0xa0>
c0016db3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016db6:	be 03 00 00 00       	mov    esi,0x3
c0016dbb:	e9 5c fe ff ff       	jmp    c0016c1c <Vm::faultHandler(regs*)+0xa0>
c0016dc0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dc3:	be 04 00 00 00       	mov    esi,0x4
c0016dc8:	e9 4f fe ff ff       	jmp    c0016c1c <Vm::faultHandler(regs*)+0xa0>
c0016dcd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dd0:	be 05 00 00 00       	mov    esi,0x5
c0016dd5:	e9 42 fe ff ff       	jmp    c0016c1c <Vm::faultHandler(regs*)+0xa0>
c0016dda:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ddd:	bd 01 00 00 00       	mov    ebp,0x1
c0016de2:	e9 35 fe ff ff       	jmp    c0016c1c <Vm::faultHandler(regs*)+0xa0>
c0016de7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dea:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016def:	e9 28 fe ff ff       	jmp    c0016c1c <Vm::faultHandler(regs*)+0xa0>
c0016df4:	83 e5 01             	and    ebp,0x1
c0016df7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016dfa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016dfe:	74 30                	je     c0016e30 <Vm::faultHandler(regs*)+0x2b4>
c0016e00:	83 e9 04             	sub    ecx,0x4
c0016e03:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e09:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016e0f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e12:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016e15:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e1b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e1f:	0f 84 12 04 00 00    	je     c0017237 <Vm::faultHandler(regs*)+0x6bb>
c0016e25:	80 ce 02             	or     dh,0x2
c0016e28:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016e2b:	e9 07 04 00 00       	jmp    c0017237 <Vm::faultHandler(regs*)+0x6bb>
c0016e30:	83 e9 02             	sub    ecx,0x2
c0016e33:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016e39:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e3c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e40:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e46:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e4a:	74 05                	je     c0016e51 <Vm::faultHandler(regs*)+0x2d5>
c0016e4c:	80 ce 02             	or     dh,0x2
c0016e4f:	eb 03                	jmp    c0016e54 <Vm::faultHandler(regs*)+0x2d8>
c0016e51:	80 e6 fd             	and    dh,0xfd
c0016e54:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e58:	e9 da 03 00 00       	jmp    c0017237 <Vm::faultHandler(regs*)+0x6bb>
c0016e5d:	83 e5 01             	and    ebp,0x1
c0016e60:	74 2a                	je     c0016e8c <Vm::faultHandler(regs*)+0x310>
c0016e62:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e64:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e6a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e70:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e73:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e75:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e7b:	c1 e8 09             	shr    eax,0x9
c0016e7e:	83 e0 01             	and    eax,0x1
c0016e81:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e84:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e87:	83 c0 04             	add    eax,0x4
c0016e8a:	eb 24                	jmp    c0016eb0 <Vm::faultHandler(regs*)+0x334>
c0016e8c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016e8f:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e95:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e98:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016e9b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ea1:	c1 e8 09             	shr    eax,0x9
c0016ea4:	83 e0 01             	and    eax,0x1
c0016ea7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016eaa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ead:	83 c0 02             	add    eax,0x2
c0016eb0:	25 ff ff 00 00       	and    eax,0xffff
c0016eb5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016eb8:	e9 7a 03 00 00       	jmp    c0017237 <Vm::faultHandler(regs*)+0x6bb>
c0016ebd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ec1:	3d ee 00 00 00       	cmp    eax,0xee
c0016ec6:	75 10                	jne    c0016ed8 <Vm::faultHandler(regs*)+0x35c>
c0016ec8:	83 ec 0c             	sub    esp,0xc
c0016ecb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016ece:	e8 52 f8 ff ff       	call   c0016725 <Vm::mainloop3(unsigned long)>
c0016ed3:	e9 4a 03 00 00       	jmp    c0017222 <Vm::faultHandler(regs*)+0x6a6>
c0016ed8:	83 ec 0c             	sub    esp,0xc
c0016edb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016edf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ee3:	51                   	push   ecx
c0016ee4:	50                   	push   eax
c0016ee5:	53                   	push   ebx
c0016ee6:	e8 80 fb ff ff       	call   c0016a6b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016eeb:	83 c4 20             	add    esp,0x20
c0016eee:	e9 47 03 00 00       	jmp    c001723a <Vm::faultHandler(regs*)+0x6be>
c0016ef3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ef8:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016efc:	e9 36 03 00 00       	jmp    c0017237 <Vm::faultHandler(regs*)+0x6bb>
c0016f01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f06:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016f0a:	e9 28 03 00 00       	jmp    c0017237 <Vm::faultHandler(regs*)+0x6bb>
c0016f0f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016f14:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016f17:	74 2b                	je     c0016f44 <Vm::faultHandler(regs*)+0x3c8>
c0016f19:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016f20:	76 22                	jbe    c0016f44 <Vm::faultHandler(regs*)+0x3c8>
c0016f22:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016f26:	50                   	push   eax
c0016f27:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016f2b:	50                   	push   eax
c0016f2c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016f30:	50                   	push   eax
c0016f31:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016f35:	50                   	push   eax
c0016f36:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f3a:	50                   	push   eax
c0016f3b:	6a 6c                	push   0x6c
c0016f3d:	6a 6c                	push   0x6c
c0016f3f:	e9 c0 01 00 00       	jmp    c0017104 <Vm::faultHandler(regs*)+0x588>
c0016f44:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016f48:	83 ec 0c             	sub    esp,0xc
c0016f4b:	0f b7 f6             	movzx  esi,si
c0016f4e:	50                   	push   eax
c0016f4f:	e8 21 f7 ff ff       	call   c0016675 <Vm::inbv(unsigned short)>
c0016f54:	83 c4 0c             	add    esp,0xc
c0016f57:	0f b6 c0             	movzx  eax,al
c0016f5a:	50                   	push   eax
c0016f5b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016f5f:	50                   	push   eax
c0016f60:	56                   	push   esi
c0016f61:	e8 d6 fb ff ff       	call   c0016b3c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016f66:	83 c4 10             	add    esp,0x10
c0016f69:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f6c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016f70:	74 03                	je     c0016f75 <Vm::faultHandler(regs*)+0x3f9>
c0016f72:	48                   	dec    eax
c0016f73:	eb 01                	jmp    c0016f76 <Vm::faultHandler(regs*)+0x3fa>
c0016f75:	40                   	inc    eax
c0016f76:	0f b7 c0             	movzx  eax,ax
c0016f79:	e9 8e 00 00 00       	jmp    c001700c <Vm::faultHandler(regs*)+0x490>
c0016f7e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016f83:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016f86:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f89:	74 29                	je     c0016fb4 <Vm::faultHandler(regs*)+0x438>
c0016f8b:	3d ff ff 00 00       	cmp    eax,0xffff
c0016f90:	76 22                	jbe    c0016fb4 <Vm::faultHandler(regs*)+0x438>
c0016f92:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016f96:	50                   	push   eax
c0016f97:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016f9b:	50                   	push   eax
c0016f9c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016fa0:	50                   	push   eax
c0016fa1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016fa5:	50                   	push   eax
c0016fa6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016faa:	50                   	push   eax
c0016fab:	6a 6d                	push   0x6d
c0016fad:	6a 6d                	push   0x6d
c0016faf:	e9 50 01 00 00       	jmp    c0017104 <Vm::faultHandler(regs*)+0x588>
c0016fb4:	83 e5 01             	and    ebp,0x1
c0016fb7:	0f b7 c8             	movzx  ecx,ax
c0016fba:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016fbd:	0f b7 f6             	movzx  esi,si
c0016fc0:	74 1e                	je     c0016fe0 <Vm::faultHandler(regs*)+0x464>
c0016fc2:	ed                   	in     eax,dx
c0016fc3:	55                   	push   ebp
c0016fc4:	50                   	push   eax
c0016fc5:	51                   	push   ecx
c0016fc6:	56                   	push   esi
c0016fc7:	e8 9b fb ff ff       	call   c0016b67 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016fcc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fcf:	83 c4 10             	add    esp,0x10
c0016fd2:	8d 50 04             	lea    edx,[eax+0x4]
c0016fd5:	83 e8 04             	sub    eax,0x4
c0016fd8:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016fde:	eb 20                	jmp    c0017000 <Vm::faultHandler(regs*)+0x484>
c0016fe0:	66 ed                	in     ax,dx
c0016fe2:	57                   	push   edi
c0016fe3:	0f b7 c0             	movzx  eax,ax
c0016fe6:	50                   	push   eax
c0016fe7:	51                   	push   ecx
c0016fe8:	56                   	push   esi
c0016fe9:	e8 63 fb ff ff       	call   c0016b51 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016fee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ff1:	83 c4 10             	add    esp,0x10
c0016ff4:	8d 50 02             	lea    edx,[eax+0x2]
c0016ff7:	83 e8 02             	sub    eax,0x2
c0016ffa:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017000:	25 ff ff 00 00       	and    eax,0xffff
c0017005:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017009:	0f 44 c2             	cmove  eax,edx
c001700c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001700f:	e9 23 02 00 00       	jmp    c0017237 <Vm::faultHandler(regs*)+0x6bb>
c0017014:	8d 46 ff             	lea    eax,[esi-0x1]
c0017017:	0f b6 f0             	movzx  esi,al
c001701a:	83 fe 05             	cmp    esi,0x5
c001701d:	77 23                	ja     c0017042 <Vm::faultHandler(regs*)+0x4c6>
c001701f:	ff 24 b5 4c 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddbb4]
c0017026:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001702b:	eb 15                	jmp    c0017042 <Vm::faultHandler(regs*)+0x4c6>
c001702d:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017031:	eb 0f                	jmp    c0017042 <Vm::faultHandler(regs*)+0x4c6>
c0017033:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017037:	eb 09                	jmp    c0017042 <Vm::faultHandler(regs*)+0x4c6>
c0017039:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001703d:	eb 03                	jmp    c0017042 <Vm::faultHandler(regs*)+0x4c6>
c001703f:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017042:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001704a:	74 29                	je     c0017075 <Vm::faultHandler(regs*)+0x4f9>
c001704c:	3d ff ff 00 00       	cmp    eax,0xffff
c0017051:	76 22                	jbe    c0017075 <Vm::faultHandler(regs*)+0x4f9>
c0017053:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017057:	50                   	push   eax
c0017058:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001705c:	50                   	push   eax
c001705d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017061:	50                   	push   eax
c0017062:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017066:	50                   	push   eax
c0017067:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001706b:	50                   	push   eax
c001706c:	6a 6e                	push   0x6e
c001706e:	6a 6e                	push   0x6e
c0017070:	e9 8f 00 00 00       	jmp    c0017104 <Vm::faultHandler(regs*)+0x588>
c0017075:	52                   	push   edx
c0017076:	0f b7 c0             	movzx  eax,ax
c0017079:	52                   	push   edx
c001707a:	50                   	push   eax
c001707b:	57                   	push   edi
c001707c:	e8 87 fa ff ff       	call   c0016b08 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017081:	59                   	pop    ecx
c0017082:	5e                   	pop    esi
c0017083:	0f b6 c0             	movzx  eax,al
c0017086:	50                   	push   eax
c0017087:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001708b:	50                   	push   eax
c001708c:	e8 f7 f5 ff ff       	call   c0016688 <Vm::outbv(unsigned short, unsigned char)>
c0017091:	83 c4 10             	add    esp,0x10
c0017094:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017097:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001709b:	74 03                	je     c00170a0 <Vm::faultHandler(regs*)+0x524>
c001709d:	48                   	dec    eax
c001709e:	eb 01                	jmp    c00170a1 <Vm::faultHandler(regs*)+0x525>
c00170a0:	40                   	inc    eax
c00170a1:	0f b7 c0             	movzx  eax,ax
c00170a4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00170a7:	e9 8b 01 00 00       	jmp    c0017237 <Vm::faultHandler(regs*)+0x6bb>
c00170ac:	8d 46 ff             	lea    eax,[esi-0x1]
c00170af:	0f b6 f0             	movzx  esi,al
c00170b2:	83 fe 05             	cmp    esi,0x5
c00170b5:	77 1e                	ja     c00170d5 <Vm::faultHandler(regs*)+0x559>
c00170b7:	ff 24 b5 64 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddb9c]
c00170be:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170c2:	eb 11                	jmp    c00170d5 <Vm::faultHandler(regs*)+0x559>
c00170c4:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00170c7:	eb 0c                	jmp    c00170d5 <Vm::faultHandler(regs*)+0x559>
c00170c9:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00170cc:	eb 07                	jmp    c00170d5 <Vm::faultHandler(regs*)+0x559>
c00170ce:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00170d1:	eb 02                	jmp    c00170d5 <Vm::faultHandler(regs*)+0x559>
c00170d3:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00170d5:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170da:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00170dd:	74 37                	je     c0017116 <Vm::faultHandler(regs*)+0x59a>
c00170df:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00170e5:	76 2f                	jbe    c0017116 <Vm::faultHandler(regs*)+0x59a>
c00170e7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00170eb:	50                   	push   eax
c00170ec:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170f0:	50                   	push   eax
c00170f1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00170f5:	50                   	push   eax
c00170f6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00170fa:	50                   	push   eax
c00170fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170ff:	50                   	push   eax
c0017100:	6a 6f                	push   0x6f
c0017102:	6a 6f                	push   0x6f
c0017104:	68 f0 23 02 c0       	push   0xc00223f0
c0017109:	e8 fc 37 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001710e:	83 c4 20             	add    esp,0x20
c0017111:	e9 86 01 00 00       	jmp    c001729c <Vm::faultHandler(regs*)+0x720>
c0017116:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017119:	0f b7 d7             	movzx  edx,di
c001711c:	0f b7 c6             	movzx  eax,si
c001711f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017122:	81 e1 00 04 00 00    	and    ecx,0x400
c0017128:	83 e5 01             	and    ebp,0x1
c001712b:	74 1c                	je     c0017149 <Vm::faultHandler(regs*)+0x5cd>
c001712d:	55                   	push   ebp
c001712e:	55                   	push   ebp
c001712f:	50                   	push   eax
c0017130:	52                   	push   edx
c0017131:	e8 f5 f9 ff ff       	call   c0016b2b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017136:	83 c4 10             	add    esp,0x10
c0017139:	89 fa                	mov    edx,edi
c001713b:	ef                   	out    dx,eax
c001713c:	8d 46 04             	lea    eax,[esi+0x4]
c001713f:	83 ee 04             	sub    esi,0x4
c0017142:	25 ff ff 00 00       	and    eax,0xffff
c0017147:	eb 1b                	jmp    c0017164 <Vm::faultHandler(regs*)+0x5e8>
c0017149:	55                   	push   ebp
c001714a:	55                   	push   ebp
c001714b:	50                   	push   eax
c001714c:	52                   	push   edx
c001714d:	e8 c7 f9 ff ff       	call   c0016b19 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017152:	83 c4 10             	add    esp,0x10
c0017155:	89 fa                	mov    edx,edi
c0017157:	66 ef                	out    dx,ax
c0017159:	8d 46 02             	lea    eax,[esi+0x2]
c001715c:	83 ee 02             	sub    esi,0x2
c001715f:	25 ff ff 00 00       	and    eax,0xffff
c0017164:	81 e6 ff ff 00 00    	and    esi,0xffff
c001716a:	85 c9                	test   ecx,ecx
c001716c:	0f 44 f0             	cmove  esi,eax
c001716f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017172:	e9 c0 00 00 00       	jmp    c0017237 <Vm::faultHandler(regs*)+0x6bb>
c0017177:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001717e:	83 ec 0c             	sub    esp,0xc
c0017181:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017185:	50                   	push   eax
c0017186:	e8 ea f4 ff ff       	call   c0016675 <Vm::inbv(unsigned short)>
c001718b:	0f b6 c0             	movzx  eax,al
c001718e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017191:	eb 3a                	jmp    c00171cd <Vm::faultHandler(regs*)+0x651>
c0017193:	83 e5 01             	and    ebp,0x1
c0017196:	74 07                	je     c001719f <Vm::faultHandler(regs*)+0x623>
c0017198:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001719c:	ed                   	in     eax,dx
c001719d:	eb 14                	jmp    c00171b3 <Vm::faultHandler(regs*)+0x637>
c001719f:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00171a2:	66 31 f6             	xor    si,si
c00171a5:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00171a8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171ac:	66 ed                	in     ax,dx
c00171ae:	0f b7 c0             	movzx  eax,ax
c00171b1:	09 f0                	or     eax,esi
c00171b3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00171b6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00171ba:	eb 7e                	jmp    c001723a <Vm::faultHandler(regs*)+0x6be>
c00171bc:	52                   	push   edx
c00171bd:	52                   	push   edx
c00171be:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00171c2:	50                   	push   eax
c00171c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171c7:	50                   	push   eax
c00171c8:	e8 bb f4 ff ff       	call   c0016688 <Vm::outbv(unsigned short, unsigned char)>
c00171cd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00171d1:	eb 4f                	jmp    c0017222 <Vm::faultHandler(regs*)+0x6a6>
c00171d3:	83 e5 01             	and    ebp,0x1
c00171d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00171d9:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171dd:	74 03                	je     c00171e2 <Vm::faultHandler(regs*)+0x666>
c00171df:	ef                   	out    dx,eax
c00171e0:	eb d4                	jmp    c00171b6 <Vm::faultHandler(regs*)+0x63a>
c00171e2:	66 ef                	out    dx,ax
c00171e4:	eb d0                	jmp    c00171b6 <Vm::faultHandler(regs*)+0x63a>
c00171e6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00171ea:	83 ec 0c             	sub    esp,0xc
c00171ed:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00171f4:	50                   	push   eax
c00171f5:	e8 7b f4 ff ff       	call   c0016675 <Vm::inbv(unsigned short)>
c00171fa:	0f b6 c0             	movzx  eax,al
c00171fd:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017200:	eb 1d                	jmp    c001721f <Vm::faultHandler(regs*)+0x6a3>
c0017202:	83 e5 01             	and    ebp,0x1
c0017205:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017208:	74 03                	je     c001720d <Vm::faultHandler(regs*)+0x691>
c001720a:	ed                   	in     eax,dx
c001720b:	eb 0d                	jmp    c001721a <Vm::faultHandler(regs*)+0x69e>
c001720d:	66 ed                	in     ax,dx
c001720f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017212:	0f b7 c0             	movzx  eax,ax
c0017215:	66 31 d2             	xor    dx,dx
c0017218:	09 d0                	or     eax,edx
c001721a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001721d:	eb 18                	jmp    c0017237 <Vm::faultHandler(regs*)+0x6bb>
c001721f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017222:	83 c4 10             	add    esp,0x10
c0017225:	eb 13                	jmp    c001723a <Vm::faultHandler(regs*)+0x6be>
c0017227:	83 e5 01             	and    ebp,0x1
c001722a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001722d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017230:	74 03                	je     c0017235 <Vm::faultHandler(regs*)+0x6b9>
c0017232:	ef                   	out    dx,eax
c0017233:	eb 02                	jmp    c0017237 <Vm::faultHandler(regs*)+0x6bb>
c0017235:	66 ef                	out    dx,ax
c0017237:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001723a:	b0 01                	mov    al,0x1
c001723c:	eb 60                	jmp    c001729e <Vm::faultHandler(regs*)+0x722>
c001723e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017242:	50                   	push   eax
c0017243:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017247:	50                   	push   eax
c0017248:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001724c:	50                   	push   eax
c001724d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017251:	50                   	push   eax
c0017252:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017256:	50                   	push   eax
c0017257:	52                   	push   edx
c0017258:	52                   	push   edx
c0017259:	68 1d 24 02 c0       	push   0xc002241d
c001725e:	e8 a7 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017263:	83 c4 20             	add    esp,0x20
c0017266:	83 ec 0c             	sub    esp,0xc
c0017269:	6a 60                	push   0x60
c001726b:	e8 05 f4 ff ff       	call   c0016675 <Vm::inbv(unsigned short)>
c0017270:	83 c4 10             	add    esp,0x10
c0017273:	0f b6 d0             	movzx  edx,al
c0017276:	83 fa 1c             	cmp    edx,0x1c
c0017279:	74 05                	je     c0017280 <Vm::faultHandler(regs*)+0x704>
c001727b:	83 fa 5a             	cmp    edx,0x5a
c001727e:	75 e6                	jne    c0017266 <Vm::faultHandler(regs*)+0x6ea>
c0017280:	0f b6 c0             	movzx  eax,al
c0017283:	83 f8 1c             	cmp    eax,0x1c
c0017286:	74 05                	je     c001728d <Vm::faultHandler(regs*)+0x711>
c0017288:	83 f8 5a             	cmp    eax,0x5a
c001728b:	75 0f                	jne    c001729c <Vm::faultHandler(regs*)+0x720>
c001728d:	83 ec 0c             	sub    esp,0xc
c0017290:	6a 60                	push   0x60
c0017292:	e8 de f3 ff ff       	call   c0016675 <Vm::inbv(unsigned short)>
c0017297:	83 c4 10             	add    esp,0x10
c001729a:	eb e4                	jmp    c0017280 <Vm::faultHandler(regs*)+0x704>
c001729c:	31 c0                	xor    eax,eax
c001729e:	83 c4 2c             	add    esp,0x2c
c00172a1:	5b                   	pop    ebx
c00172a2:	5e                   	pop    esi
c00172a3:	5f                   	pop    edi
c00172a4:	5d                   	pop    ebp
c00172a5:	c3                   	ret    

c00172a6 <noCopro(unsigned long)>:
c00172a6:	c3                   	ret    

c00172a7 <nmiHandler(regs*, void*)>:
c00172a7:	83 ec 0c             	sub    esp,0xc
c00172aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00172af:	83 ec 0c             	sub    esp,0xc
c00172b2:	50                   	push   eax
c00172b3:	e8 1e 00 ff ff       	call   c00072d6 <Computer::handleNMI()>
c00172b8:	83 c4 10             	add    esp,0x10
c00172bb:	90                   	nop
c00172bc:	83 c4 0c             	add    esp,0xc
c00172bf:	c3                   	ret    

c00172c0 <doubleFault(regs*, void*)>:
c00172c0:	55                   	push   ebp
c00172c1:	89 e5                	mov    ebp,esp
c00172c3:	83 ec 08             	sub    esp,0x8
c00172c6:	83 ec 0c             	sub    esp,0xc
c00172c9:	68 7c 24 02 c0       	push   0xc002247c
c00172ce:	e8 da 9e ff ff       	call   c00111ad <KePanic(char const*)>
c00172d3:	83 c4 10             	add    esp,0x10
c00172d6:	90                   	nop
c00172d7:	c9                   	leave  
c00172d8:	c3                   	ret    

c00172d9 <displayDebugInfo(regs*)>:
c00172d9:	83 ec 1c             	sub    esp,0x1c
c00172dc:	0f 20 c0             	mov    eax,cr0
c00172df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172e3:	0f 20 d0             	mov    eax,cr2
c00172e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172ea:	0f 20 d8             	mov    eax,cr3
c00172ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172f1:	0f 20 e0             	mov    eax,cr4
c00172f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00172f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172fb:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00172fe:	83 ec 08             	sub    esp,0x8
c0017301:	50                   	push   eax
c0017302:	68 98 24 02 c0       	push   0xc0022498
c0017307:	e8 fe 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001730c:	83 c4 10             	add    esp,0x10
c001730f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017313:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017316:	83 ec 08             	sub    esp,0x8
c0017319:	50                   	push   eax
c001731a:	68 89 24 02 c0       	push   0xc0022489
c001731f:	e8 e6 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017324:	83 c4 10             	add    esp,0x10
c0017327:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001732b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001732e:	83 ec 08             	sub    esp,0x8
c0017331:	50                   	push   eax
c0017332:	68 94 24 02 c0       	push   0xc0022494
c0017337:	e8 ce 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001733c:	83 c4 10             	add    esp,0x10
c001733f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017343:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017346:	83 ec 08             	sub    esp,0x8
c0017349:	50                   	push   eax
c001734a:	68 a3 24 02 c0       	push   0xc00224a3
c001734f:	e8 b6 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017354:	83 c4 10             	add    esp,0x10
c0017357:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001735b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001735e:	83 ec 08             	sub    esp,0x8
c0017361:	50                   	push   eax
c0017362:	68 ae 24 02 c0       	push   0xc00224ae
c0017367:	e8 9e 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001736c:	83 c4 10             	add    esp,0x10
c001736f:	83 ec 08             	sub    esp,0x8
c0017372:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017376:	68 b9 24 02 c0       	push   0xc00224b9
c001737b:	e8 8a 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017380:	83 c4 10             	add    esp,0x10
c0017383:	83 ec 08             	sub    esp,0x8
c0017386:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001738a:	68 c4 24 02 c0       	push   0xc00224c4
c001738f:	e8 76 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017394:	83 c4 10             	add    esp,0x10
c0017397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001739b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001739e:	c1 e0 05             	shl    eax,0x5
c00173a1:	8d 90 40 34 02 c0    	lea    edx,[eax-0x3ffdcbc0]
c00173a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173ab:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00173ae:	83 ec 04             	sub    esp,0x4
c00173b1:	52                   	push   edx
c00173b2:	50                   	push   eax
c00173b3:	68 cf 24 02 c0       	push   0xc00224cf
c00173b8:	e8 4d 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00173bd:	83 c4 10             	add    esp,0x10
c00173c0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00173c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173cb:	83 ec 0c             	sub    esp,0xc
c00173ce:	50                   	push   eax
c00173cf:	e8 9b 13 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c00173d4:	83 c4 10             	add    esp,0x10
c00173d7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00173dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173e2:	83 ec 08             	sub    esp,0x8
c00173e5:	68 de 24 02 c0       	push   0xc00224de
c00173ea:	50                   	push   eax
c00173eb:	e8 bc 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00173f0:	83 c4 10             	add    esp,0x10
c00173f3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00173f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017402:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017405:	83 ec 08             	sub    esp,0x8
c0017408:	52                   	push   edx
c0017409:	50                   	push   eax
c001740a:	e8 57 16 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001740f:	83 c4 10             	add    esp,0x10
c0017412:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017417:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001741d:	83 ec 08             	sub    esp,0x8
c0017420:	68 ec 24 02 c0       	push   0xc00224ec
c0017425:	50                   	push   eax
c0017426:	e8 81 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001742b:	83 c4 10             	add    esp,0x10
c001742e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017433:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017439:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001743e:	8b 12                	mov    edx,DWORD PTR [edx]
c0017440:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017443:	83 c2 0c             	add    edx,0xc
c0017446:	83 ec 08             	sub    esp,0x8
c0017449:	52                   	push   edx
c001744a:	50                   	push   eax
c001744b:	e8 5c 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017450:	83 c4 10             	add    esp,0x10
c0017453:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017458:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001745e:	83 ec 08             	sub    esp,0x8
c0017461:	68 f5 24 02 c0       	push   0xc00224f5
c0017466:	50                   	push   eax
c0017467:	e8 40 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001746c:	83 c4 10             	add    esp,0x10
c001746f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017474:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001747a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001747e:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017481:	83 ec 08             	sub    esp,0x8
c0017484:	52                   	push   edx
c0017485:	50                   	push   eax
c0017486:	e8 db 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001748b:	83 c4 10             	add    esp,0x10
c001748e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017493:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017499:	83 ec 08             	sub    esp,0x8
c001749c:	68 fd 24 02 c0       	push   0xc00224fd
c00174a1:	50                   	push   eax
c00174a2:	e8 05 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00174a7:	83 c4 10             	add    esp,0x10
c00174aa:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174b9:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00174bc:	83 ec 08             	sub    esp,0x8
c00174bf:	52                   	push   edx
c00174c0:	50                   	push   eax
c00174c1:	e8 a0 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00174c6:	83 c4 10             	add    esp,0x10
c00174c9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174ce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174d4:	83 ec 08             	sub    esp,0x8
c00174d7:	68 05 25 02 c0       	push   0xc0022505
c00174dc:	50                   	push   eax
c00174dd:	e8 ca 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00174e2:	83 c4 10             	add    esp,0x10
c00174e5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174f4:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00174f7:	83 ec 08             	sub    esp,0x8
c00174fa:	52                   	push   edx
c00174fb:	50                   	push   eax
c00174fc:	e8 65 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017501:	83 c4 10             	add    esp,0x10
c0017504:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017509:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001750f:	83 ec 08             	sub    esp,0x8
c0017512:	68 0d 25 02 c0       	push   0xc002250d
c0017517:	50                   	push   eax
c0017518:	e8 8f 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001751d:	83 c4 10             	add    esp,0x10
c0017520:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017525:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001752b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001752f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017532:	83 ec 08             	sub    esp,0x8
c0017535:	52                   	push   edx
c0017536:	50                   	push   eax
c0017537:	e8 2a 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001753c:	83 c4 10             	add    esp,0x10
c001753f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017544:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001754a:	83 ec 08             	sub    esp,0x8
c001754d:	68 15 25 02 c0       	push   0xc0022515
c0017552:	50                   	push   eax
c0017553:	e8 54 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017558:	83 c4 10             	add    esp,0x10
c001755b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017560:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017566:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001756a:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001756d:	83 ec 08             	sub    esp,0x8
c0017570:	52                   	push   edx
c0017571:	50                   	push   eax
c0017572:	e8 ef 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017577:	83 c4 10             	add    esp,0x10
c001757a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001757f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017585:	83 ec 08             	sub    esp,0x8
c0017588:	68 1d 25 02 c0       	push   0xc002251d
c001758d:	50                   	push   eax
c001758e:	e8 19 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017593:	83 c4 10             	add    esp,0x10
c0017596:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001759b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175a5:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175a8:	83 ec 08             	sub    esp,0x8
c00175ab:	52                   	push   edx
c00175ac:	50                   	push   eax
c00175ad:	e8 b4 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175b2:	83 c4 10             	add    esp,0x10
c00175b5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175c0:	83 ec 08             	sub    esp,0x8
c00175c3:	68 25 25 02 c0       	push   0xc0022525
c00175c8:	50                   	push   eax
c00175c9:	e8 de 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175ce:	83 c4 10             	add    esp,0x10
c00175d1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175d6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175dc:	83 ec 08             	sub    esp,0x8
c00175df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175e3:	50                   	push   eax
c00175e4:	e8 7d 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175e9:	83 c4 10             	add    esp,0x10
c00175ec:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175f7:	83 ec 08             	sub    esp,0x8
c00175fa:	68 2e 25 02 c0       	push   0xc002252e
c00175ff:	50                   	push   eax
c0017600:	e8 a7 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017605:	83 c4 10             	add    esp,0x10
c0017608:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001760d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017613:	83 ec 08             	sub    esp,0x8
c0017616:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001761a:	50                   	push   eax
c001761b:	e8 46 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017620:	83 c4 10             	add    esp,0x10
c0017623:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017628:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001762e:	83 ec 08             	sub    esp,0x8
c0017631:	68 36 25 02 c0       	push   0xc0022536
c0017636:	50                   	push   eax
c0017637:	e8 70 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001763c:	83 c4 10             	add    esp,0x10
c001763f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017644:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001764a:	83 ec 08             	sub    esp,0x8
c001764d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017651:	50                   	push   eax
c0017652:	e8 0f 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017657:	83 c4 10             	add    esp,0x10
c001765a:	fa                   	cli    
c001765b:	f4                   	hlt    
c001765c:	eb fe                	jmp    c001765c <displayDebugInfo(regs*)+0x383>

c001765e <HalSystemIdle()>:
c001765e:	56                   	push   esi
c001765f:	53                   	push   ebx
c0017660:	83 ec 14             	sub    esp,0x14
c0017663:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017668:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001766e:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017674:	83 e0 04             	and    eax,0x4
c0017677:	0f b6 c0             	movzx  eax,al
c001767a:	85 c0                	test   eax,eax
c001767c:	0f 95 c0             	setne  al
c001767f:	0f b6 c0             	movzx  eax,al
c0017682:	85 c0                	test   eax,eax
c0017684:	74 4c                	je     c00176d2 <HalSystemIdle()+0x74>
c0017686:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001768b:	83 ec 08             	sub    esp,0x8
c001768e:	68 e1 00 00 00       	push   0xe1
c0017693:	50                   	push   eax
c0017694:	e8 49 fa fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017699:	83 c4 10             	add    esp,0x10
c001769c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00176a4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00176a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176ad:	83 e2 02             	and    edx,0x2
c00176b0:	89 d3                	mov    ebx,edx
c00176b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176b6:	83 e2 00             	and    edx,0x0
c00176b9:	89 d6                	mov    esi,edx
c00176bb:	56                   	push   esi
c00176bc:	53                   	push   ebx
c00176bd:	68 e1 00 00 00       	push   0xe1
c00176c2:	50                   	push   eax
c00176c3:	e8 46 fa fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00176c8:	83 c4 10             	add    esp,0x10
c00176cb:	e8 c4 8a fe ff       	call   c0000194 <doTPAUSE>
c00176d0:	eb 01                	jmp    c00176d3 <HalSystemIdle()+0x75>
c00176d2:	f4                   	hlt    
c00176d3:	90                   	nop
c00176d4:	83 c4 14             	add    esp,0x14
c00176d7:	5b                   	pop    ebx
c00176d8:	5e                   	pop    esi
c00176d9:	c3                   	ret    

c00176da <displayProgramFault(char const*)>:
c00176da:	83 ec 0c             	sub    esp,0xc
c00176dd:	83 ec 0c             	sub    esp,0xc
c00176e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176e4:	e8 21 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00176e9:	83 c4 10             	add    esp,0x10
c00176ec:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00176f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00176f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00176f6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176fc:	85 c0                	test   eax,eax
c00176fe:	74 21                	je     c0017721 <displayProgramFault(char const*)+0x47>
c0017700:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017705:	8b 00                	mov    eax,DWORD PTR [eax]
c0017707:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001770a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017710:	6a 04                	push   0x4
c0017712:	6a 0f                	push   0xf
c0017714:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017718:	50                   	push   eax
c0017719:	e8 00 14 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c001771e:	83 c4 10             	add    esp,0x10
c0017721:	90                   	nop
c0017722:	83 c4 0c             	add    esp,0xc
c0017725:	c3                   	ret    

c0017726 <gpFault(regs*, void*)>:
c0017726:	83 ec 1c             	sub    esp,0x1c
c0017729:	c7 05 74 97 02 c0 7c 6b 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016b7c
c0017733:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017738:	85 c0                	test   eax,eax
c001773a:	74 1e                	je     c001775a <gpFault(regs*, void*)+0x34>
c001773c:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017741:	83 ec 0c             	sub    esp,0xc
c0017744:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017748:	ff d0                	call   eax
c001774a:	83 c4 10             	add    esp,0x10
c001774d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017751:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017756:	85 c0                	test   eax,eax
c0017758:	75 2e                	jne    c0017788 <gpFault(regs*, void*)+0x62>
c001775a:	83 ec 0c             	sub    esp,0xc
c001775d:	68 3e 25 02 c0       	push   0xc002253e
c0017762:	e8 73 ff ff ff       	call   c00176da <displayProgramFault(char const*)>
c0017767:	83 c4 10             	add    esp,0x10
c001776a:	83 ec 0c             	sub    esp,0xc
c001776d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017771:	e8 63 fb ff ff       	call   c00172d9 <displayDebugInfo(regs*)>
c0017776:	83 c4 10             	add    esp,0x10
c0017779:	83 ec 0c             	sub    esp,0xc
c001777c:	6a 00                	push   0x0
c001777e:	e8 99 ed ff ff       	call   c001651c <Thr::terminateFromIRQ(int)>
c0017783:	83 c4 10             	add    esp,0x10
c0017786:	eb 01                	jmp    c0017789 <gpFault(regs*, void*)+0x63>
c0017788:	90                   	nop
c0017789:	83 c4 1c             	add    esp,0x1c
c001778c:	c3                   	ret    

c001778d <pgFault(regs*, void*)>:
c001778d:	83 ec 1c             	sub    esp,0x1c
c0017790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017794:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017797:	0f 20 d0             	mov    eax,cr2
c001779a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001779e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177a2:	83 ec 04             	sub    esp,0x4
c00177a5:	52                   	push   edx
c00177a6:	50                   	push   eax
c00177a7:	68 1c 26 02 c0       	push   0xc002261c
c00177ac:	e8 59 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00177b1:	83 c4 10             	add    esp,0x10
c00177b4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00177b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00177bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177be:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00177c4:	0f 20 d2             	mov    edx,cr2
c00177c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00177cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177cf:	83 ec 08             	sub    esp,0x8
c00177d2:	52                   	push   edx
c00177d3:	50                   	push   eax
c00177d4:	e8 a1 2b ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c00177d9:	83 c4 10             	add    esp,0x10
c00177dc:	0f b6 c0             	movzx  eax,al
c00177df:	85 c0                	test   eax,eax
c00177e1:	75 2e                	jne    c0017811 <pgFault(regs*, void*)+0x84>
c00177e3:	83 ec 0c             	sub    esp,0xc
c00177e6:	68 57 25 02 c0       	push   0xc0022557
c00177eb:	e8 ea fe ff ff       	call   c00176da <displayProgramFault(char const*)>
c00177f0:	83 c4 10             	add    esp,0x10
c00177f3:	83 ec 0c             	sub    esp,0xc
c00177f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177fa:	e8 da fa ff ff       	call   c00172d9 <displayDebugInfo(regs*)>
c00177ff:	83 c4 10             	add    esp,0x10
c0017802:	83 ec 0c             	sub    esp,0xc
c0017805:	6a 00                	push   0x0
c0017807:	e8 10 ed ff ff       	call   c001651c <Thr::terminateFromIRQ(int)>
c001780c:	83 c4 10             	add    esp,0x10
c001780f:	eb 01                	jmp    c0017812 <pgFault(regs*, void*)+0x85>
c0017811:	90                   	nop
c0017812:	83 c4 1c             	add    esp,0x1c
c0017815:	c3                   	ret    

c0017816 <otherISRHandler(regs*, void*)>:
c0017816:	83 ec 0c             	sub    esp,0xc
c0017819:	83 ec 0c             	sub    esp,0xc
c001781c:	68 44 26 02 c0       	push   0xc0022644
c0017821:	e8 b4 fe ff ff       	call   c00176da <displayProgramFault(char const*)>
c0017826:	83 c4 10             	add    esp,0x10
c0017829:	83 ec 0c             	sub    esp,0xc
c001782c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017830:	e8 a4 fa ff ff       	call   c00172d9 <displayDebugInfo(regs*)>
c0017835:	83 c4 10             	add    esp,0x10
c0017838:	83 ec 0c             	sub    esp,0xc
c001783b:	6a 00                	push   0x0
c001783d:	e8 da ec ff ff       	call   c001651c <Thr::terminateFromIRQ(int)>
c0017842:	83 c4 10             	add    esp,0x10
c0017845:	90                   	nop
c0017846:	83 c4 0c             	add    esp,0xc
c0017849:	c3                   	ret    

c001784a <opcodeFault(regs*, void*)>:
c001784a:	55                   	push   ebp
c001784b:	89 e5                	mov    ebp,esp
c001784d:	83 ec 08             	sub    esp,0x8
c0017850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017853:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017856:	83 ec 08             	sub    esp,0x8
c0017859:	50                   	push   eax
c001785a:	68 62 25 02 c0       	push   0xc0022562
c001785f:	e8 a6 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017864:	83 c4 10             	add    esp,0x10
c0017867:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001786c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017872:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017878:	0f b6 c0             	movzx  eax,al
c001787b:	85 c0                	test   eax,eax
c001787d:	74 21                	je     c00178a0 <opcodeFault(regs*, void*)+0x56>
c001787f:	83 ec 0c             	sub    esp,0xc
c0017882:	68 6c 26 02 c0       	push   0xc002266c
c0017887:	e8 7e 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001788c:	83 c4 10             	add    esp,0x10
c001788f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017892:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017895:	8d 50 19             	lea    edx,[eax+0x19]
c0017898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001789b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001789e:	eb 2b                	jmp    c00178cb <opcodeFault(regs*, void*)+0x81>
c00178a0:	83 ec 0c             	sub    esp,0xc
c00178a3:	68 70 25 02 c0       	push   0xc0022570
c00178a8:	e8 2d fe ff ff       	call   c00176da <displayProgramFault(char const*)>
c00178ad:	83 c4 10             	add    esp,0x10
c00178b0:	83 ec 0c             	sub    esp,0xc
c00178b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00178b6:	e8 1e fa ff ff       	call   c00172d9 <displayDebugInfo(regs*)>
c00178bb:	83 c4 10             	add    esp,0x10
c00178be:	83 ec 0c             	sub    esp,0xc
c00178c1:	6a 00                	push   0x0
c00178c3:	e8 54 ec ff ff       	call   c001651c <Thr::terminateFromIRQ(int)>
c00178c8:	83 c4 10             	add    esp,0x10
c00178cb:	c9                   	leave  
c00178cc:	c3                   	ret    

c00178cd <i386SaveCoprocessor(void*)>:
c00178cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178d1:	83 c0 3f             	add    eax,0x3f
c00178d4:	83 e0 c0             	and    eax,0xffffffc0
c00178d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178db:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c00178e1 <i386LoadCoprocessor(void*)>:
c00178e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178e5:	83 c0 3f             	add    eax,0x3f
c00178e8:	83 e0 c0             	and    eax,0xffffffc0
c00178eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178ef:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c00178f5 <x87EmulHandler(regs*, void*)>:
c00178f5:	53                   	push   ebx
c00178f6:	83 ec 08             	sub    esp,0x8
c00178f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178fe:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017902:	74 10                	je     c0017914 <x87EmulHandler(regs*, void*)+0x1f>
c0017904:	83 ec 0c             	sub    esp,0xc
c0017907:	68 7d 25 02 c0       	push   0xc002257d
c001790c:	e8 9c 98 ff ff       	call   c00111ad <KePanic(char const*)>
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	0f 20 c0             	mov    eax,cr0
c0017917:	a8 08                	test   al,0x8
c0017919:	74 59                	je     c0017974 <x87EmulHandler(regs*, void*)+0x7f>
c001791b:	0f 06                	clts   
c001791d:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017922:	85 c0                	test   eax,eax
c0017924:	74 0e                	je     c0017934 <x87EmulHandler(regs*, void*)+0x3f>
c0017926:	83 ec 0c             	sub    esp,0xc
c0017929:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001792c:	e8 9c ff ff ff       	call   c00178cd <i386SaveCoprocessor(void*)>
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001793a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001793e:	75 12                	jne    c0017952 <x87EmulHandler(regs*, void*)+0x5d>
c0017940:	83 ec 0c             	sub    esp,0xc
c0017943:	68 40 02 00 00       	push   0x240
c0017948:	e8 86 01 ff ff       	call   c0007ad3 <malloc>
c001794d:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017950:	eb 10                	jmp    c0017962 <x87EmulHandler(regs*, void*)+0x6d>
c0017952:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017957:	83 ec 0c             	sub    esp,0xc
c001795a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001795d:	e8 7f ff ff ff       	call   c00178e1 <i386LoadCoprocessor(void*)>
c0017962:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017967:	83 c4 10             	add    esp,0x10
c001796a:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c001796f:	83 c4 08             	add    esp,0x8
c0017972:	5b                   	pop    ebx
c0017973:	c3                   	ret    
c0017974:	83 ec 0c             	sub    esp,0xc
c0017977:	68 91 25 02 c0       	push   0xc0022591
c001797c:	e8 89 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017981:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017989:	83 c4 18             	add    esp,0x18
c001798c:	5b                   	pop    ebx
c001798d:	e9 8a eb ff ff       	jmp    c001651c <Thr::terminateFromIRQ(int)>

c0017992 <HalInitialiseCoprocessor()>:
c0017992:	83 ec 10             	sub    esp,0x10
c0017995:	6a 00                	push   0x0
c0017997:	68 f5 78 01 c0       	push   0xc00178f5
c001799c:	6a 07                	push   0x7
c001799e:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c00179a8:	e8 99 51 ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00179ad:	e8 ae 70 00 00       	call   c001ea60 <avxDetect>
c00179b2:	83 c4 10             	add    esp,0x10
c00179b5:	85 c0                	test   eax,eax
c00179b7:	74 1c                	je     c00179d5 <HalInitialiseCoprocessor()+0x43>
c00179b9:	c7 05 70 97 02 c0 8a ea 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ea8a
c00179c3:	c7 05 6c 97 02 c0 9b ea 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ea9b
c00179cd:	83 c4 0c             	add    esp,0xc
c00179d0:	e9 d7 70 00 00       	jmp    c001eaac <avxInit>
c00179d5:	e8 16 74 00 00       	call   c001edf0 <absolutelyNoChanceInHell>
c00179da:	85 c0                	test   eax,eax
c00179dc:	74 1c                	je     c00179fa <HalInitialiseCoprocessor()+0x68>
c00179de:	c7 05 70 97 02 c0 08 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ee08
c00179e8:	c7 05 6c 97 02 c0 10 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ee10
c00179f2:	83 c4 0c             	add    esp,0xc
c00179f5:	e9 1e 74 00 00       	jmp    c001ee18 <sseInit>
c00179fa:	e8 37 74 00 00       	call   c001ee36 <x87Detect>
c00179ff:	85 c0                	test   eax,eax
c0017a01:	74 1c                	je     c0017a1f <HalInitialiseCoprocessor()+0x8d>
c0017a03:	c7 05 70 97 02 c0 51 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ee51
c0017a0d:	c7 05 6c 97 02 c0 58 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ee58
c0017a17:	83 c4 0c             	add    esp,0xc
c0017a1a:	e9 40 74 00 00       	jmp    c001ee5f <x87Init>
c0017a1f:	c7 05 70 97 02 c0 a6 72 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc00172a6
c0017a29:	c7 05 6c 97 02 c0 a6 72 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc00172a6
c0017a33:	0f 20 c0             	mov    eax,cr0
c0017a36:	83 c8 04             	or     eax,0x4
c0017a39:	0f 22 c0             	mov    cr0,eax
c0017a3c:	83 c4 0c             	add    esp,0xc
c0017a3f:	c3                   	ret    

c0017a40 <HalPanic(char const*)>:
c0017a40:	53                   	push   ebx
c0017a41:	83 ec 10             	sub    esp,0x10
c0017a44:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017a48:	fa                   	cli    
c0017a49:	53                   	push   ebx
c0017a4a:	68 a7 25 02 c0       	push   0xc00225a7
c0017a4f:	e8 b6 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017a54:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017a59:	83 c4 10             	add    esp,0x10
c0017a5c:	85 c0                	test   eax,eax
c0017a5e:	74 09                	je     c0017a69 <HalPanic(char const*)+0x29>
c0017a60:	83 ec 0c             	sub    esp,0xc
c0017a63:	53                   	push   ebx
c0017a64:	ff d0                	call   eax
c0017a66:	83 c4 10             	add    esp,0x10
c0017a69:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017a6e:	85 c0                	test   eax,eax
c0017a70:	0f 84 dc 00 00 00    	je     c0017b52 <HalPanic(char const*)+0x112>
c0017a76:	52                   	push   edx
c0017a77:	6a 01                	push   0x1
c0017a79:	6a 0f                	push   0xf
c0017a7b:	50                   	push   eax
c0017a7c:	e8 49 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017a81:	59                   	pop    ecx
c0017a82:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a88:	e8 2d 0d ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017a8d:	58                   	pop    eax
c0017a8e:	5a                   	pop    edx
c0017a8f:	68 a4 08 02 c0       	push   0xc00208a4
c0017a94:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a9a:	e8 63 0b ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017a9f:	83 c4 0c             	add    esp,0xc
c0017aa2:	6a 01                	push   0x1
c0017aa4:	6a 0f                	push   0xf
c0017aa6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017aac:	e8 19 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017ab1:	59                   	pop    ecx
c0017ab2:	58                   	pop    eax
c0017ab3:	68 c0 25 02 c0       	push   0xc00225c0
c0017ab8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017abe:	e8 e9 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ac3:	83 c4 0c             	add    esp,0xc
c0017ac6:	6a 0f                	push   0xf
c0017ac8:	6a 01                	push   0x1
c0017aca:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ad0:	e8 f5 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017ad5:	58                   	pop    eax
c0017ad6:	5a                   	pop    edx
c0017ad7:	68 c9 25 02 c0       	push   0xc00225c9
c0017adc:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ae2:	e8 c5 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ae7:	83 c4 0c             	add    esp,0xc
c0017aea:	6a 01                	push   0x1
c0017aec:	6a 0f                	push   0xf
c0017aee:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017af4:	e8 d1 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017af9:	59                   	pop    ecx
c0017afa:	58                   	pop    eax
c0017afb:	68 0d 26 02 c0       	push   0xc002260d
c0017b00:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b06:	e8 a1 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b0b:	58                   	pop    eax
c0017b0c:	5a                   	pop    edx
c0017b0d:	68 d6 25 02 c0       	push   0xc00225d6
c0017b12:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b18:	e8 8f 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b1d:	59                   	pop    ecx
c0017b1e:	58                   	pop    eax
c0017b1f:	68 10 26 02 c0       	push   0xc0022610
c0017b24:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b2a:	e8 7d 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b2f:	58                   	pop    eax
c0017b30:	5a                   	pop    edx
c0017b31:	53                   	push   ebx
c0017b32:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b38:	e8 6f 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b3d:	59                   	pop    ecx
c0017b3e:	5b                   	pop    ebx
c0017b3f:	68 0d 26 02 c0       	push   0xc002260d
c0017b44:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b4a:	e8 5d 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b4f:	83 c4 10             	add    esp,0x10
c0017b52:	eb fe                	jmp    c0017b52 <HalPanic(char const*)+0x112>

c0017b54 <HalQueryPerformanceCounter()>:
c0017b54:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b59:	31 d2                	xor    edx,edx
c0017b5b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017b61:	31 c0                	xor    eax,eax
c0017b63:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017b6a:	74 02                	je     c0017b6e <HalQueryPerformanceCounter()+0x1a>
c0017b6c:	0f 31                	rdtsc  
c0017b6e:	c3                   	ret    

c0017b6f <HalInitialise()>:
c0017b6f:	53                   	push   ebx
c0017b70:	83 ec 08             	sub    esp,0x8
c0017b73:	e8 05 52 ff ff       	call   c000cd7d <setupINTS()>
c0017b78:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b7d:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017b84:	75 0f                	jne    c0017b95 <HalInitialise()+0x26>
c0017b86:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017b8c:	83 e2 fe             	and    edx,0xfffffffe
c0017b8f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017b95:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017b9c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017ba2:	83 e2 fe             	and    edx,0xfffffffe
c0017ba5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017bab:	e8 a0 02 00 00       	call   c0017e50 <picOpen()>
c0017bb0:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017bb7:	74 0a                	je     c0017bc3 <HalInitialise()+0x54>
c0017bb9:	e8 e2 01 00 00       	call   c0017da0 <picDisable()>
c0017bbe:	e8 0d 68 00 00       	call   c001e3d0 <apicOpen()>
c0017bc3:	50                   	push   eax
c0017bc4:	bb 0f 00 00 00       	mov    ebx,0xf
c0017bc9:	6a 00                	push   0x0
c0017bcb:	68 16 78 01 c0       	push   0xc0017816
c0017bd0:	6a 00                	push   0x0
c0017bd2:	e8 6f 4f ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bd7:	83 c4 0c             	add    esp,0xc
c0017bda:	6a 00                	push   0x0
c0017bdc:	68 16 78 01 c0       	push   0xc0017816
c0017be1:	6a 01                	push   0x1
c0017be3:	e8 5e 4f ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017be8:	83 c4 0c             	add    esp,0xc
c0017beb:	6a 00                	push   0x0
c0017bed:	68 a7 72 01 c0       	push   0xc00172a7
c0017bf2:	6a 02                	push   0x2
c0017bf4:	e8 4d 4f ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bf9:	83 c4 0c             	add    esp,0xc
c0017bfc:	6a 00                	push   0x0
c0017bfe:	68 16 78 01 c0       	push   0xc0017816
c0017c03:	6a 03                	push   0x3
c0017c05:	e8 3c 4f ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c0a:	83 c4 0c             	add    esp,0xc
c0017c0d:	6a 00                	push   0x0
c0017c0f:	68 16 78 01 c0       	push   0xc0017816
c0017c14:	6a 04                	push   0x4
c0017c16:	e8 2b 4f ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c1b:	83 c4 0c             	add    esp,0xc
c0017c1e:	6a 00                	push   0x0
c0017c20:	68 16 78 01 c0       	push   0xc0017816
c0017c25:	6a 05                	push   0x5
c0017c27:	e8 1a 4f ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c2c:	83 c4 0c             	add    esp,0xc
c0017c2f:	6a 00                	push   0x0
c0017c31:	68 4a 78 01 c0       	push   0xc001784a
c0017c36:	6a 06                	push   0x6
c0017c38:	e8 09 4f ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c3d:	83 c4 0c             	add    esp,0xc
c0017c40:	6a 00                	push   0x0
c0017c42:	68 c0 72 01 c0       	push   0xc00172c0
c0017c47:	6a 08                	push   0x8
c0017c49:	e8 f8 4e ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c4e:	83 c4 0c             	add    esp,0xc
c0017c51:	6a 00                	push   0x0
c0017c53:	68 16 78 01 c0       	push   0xc0017816
c0017c58:	6a 09                	push   0x9
c0017c5a:	e8 e7 4e ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c5f:	83 c4 0c             	add    esp,0xc
c0017c62:	6a 00                	push   0x0
c0017c64:	68 16 78 01 c0       	push   0xc0017816
c0017c69:	6a 0a                	push   0xa
c0017c6b:	e8 d6 4e ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c70:	83 c4 0c             	add    esp,0xc
c0017c73:	6a 00                	push   0x0
c0017c75:	68 16 78 01 c0       	push   0xc0017816
c0017c7a:	6a 0b                	push   0xb
c0017c7c:	e8 c5 4e ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c81:	83 c4 0c             	add    esp,0xc
c0017c84:	6a 00                	push   0x0
c0017c86:	68 26 77 01 c0       	push   0xc0017726
c0017c8b:	6a 0d                	push   0xd
c0017c8d:	e8 b4 4e ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c92:	83 c4 0c             	add    esp,0xc
c0017c95:	6a 00                	push   0x0
c0017c97:	68 8d 77 01 c0       	push   0xc001778d
c0017c9c:	6a 0e                	push   0xe
c0017c9e:	e8 a3 4e ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ca3:	83 c4 10             	add    esp,0x10
c0017ca6:	50                   	push   eax
c0017ca7:	6a 00                	push   0x0
c0017ca9:	68 16 78 01 c0       	push   0xc0017816
c0017cae:	53                   	push   ebx
c0017caf:	43                   	inc    ebx
c0017cb0:	e8 91 4e ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cb5:	83 c4 10             	add    esp,0x10
c0017cb8:	83 fb 1e             	cmp    ebx,0x1e
c0017cbb:	75 e9                	jne    c0017ca6 <HalInitialise()+0x137>
c0017cbd:	50                   	push   eax
c0017cbe:	6a 00                	push   0x0
c0017cc0:	68 a7 24 01 c0       	push   0xc00124a7
c0017cc5:	6a 60                	push   0x60
c0017cc7:	e8 7a 4e ff ff       	call   c000cb46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ccc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017cd1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017cdb:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017ce2:	e8 ec fd fe ff       	call   c0007ad3 <malloc>
c0017ce7:	89 04 24             	mov    DWORD PTR [esp],eax
c0017cea:	89 c3                	mov    ebx,eax
c0017cec:	e8 37 09 00 00       	call   c0018628 <RTC::RTC()>
c0017cf1:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017cfb:	5a                   	pop    edx
c0017cfc:	59                   	pop    ecx
c0017cfd:	53                   	push   ebx
c0017cfe:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d04:	e8 07 49 ff ff       	call   c000c610 <Device::addChild(Device*)>
c0017d09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d0b:	6a 00                	push   0x0
c0017d0d:	6a 00                	push   0x0
c0017d0f:	6a 00                	push   0x0
c0017d11:	53                   	push   ebx
c0017d12:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d15:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d1a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017d20:	83 c4 28             	add    esp,0x28
c0017d23:	5b                   	pop    ebx
c0017d24:	c3                   	ret    

c0017d25 <HalMakeBeep(int)>:
c0017d25:	53                   	push   ebx
c0017d26:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017d2a:	85 db                	test   ebx,ebx
c0017d2c:	75 07                	jne    c0017d35 <HalMakeBeep(int)+0x10>
c0017d2e:	e4 61                	in     al,0x61
c0017d30:	83 e0 fc             	and    eax,0xfffffffc
c0017d33:	eb 26                	jmp    c0017d5b <HalMakeBeep(int)+0x36>
c0017d35:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017d3a:	99                   	cdq    
c0017d3b:	f7 fb                	idiv   ebx
c0017d3d:	89 c1                	mov    ecx,eax
c0017d3f:	b0 b6                	mov    al,0xb6
c0017d41:	e6 43                	out    0x43,al
c0017d43:	88 c8                	mov    al,cl
c0017d45:	e6 42                	out    0x42,al
c0017d47:	89 c8                	mov    eax,ecx
c0017d49:	c1 e8 08             	shr    eax,0x8
c0017d4c:	e6 42                	out    0x42,al
c0017d4e:	e4 61                	in     al,0x61
c0017d50:	89 c2                	mov    edx,eax
c0017d52:	83 ca 03             	or     edx,0x3
c0017d55:	38 d0                	cmp    al,dl
c0017d57:	74 04                	je     c0017d5d <HalMakeBeep(int)+0x38>
c0017d59:	88 d0                	mov    al,dl
c0017d5b:	e6 61                	out    0x61,al
c0017d5d:	5b                   	pop    ebx
c0017d5e:	c3                   	ret    

c0017d5f <HalGetRand()>:
c0017d5f:	31 c0                	xor    eax,eax
c0017d61:	c3                   	ret    

c0017d62 <HalEndOfInterrupt(int)>:
c0017d62:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017d69:	74 23                	je     c0017d8e <HalEndOfInterrupt(int)+0x2c>
c0017d6b:	83 ec 14             	sub    esp,0x14
c0017d6e:	6a 1b                	push   0x1b
c0017d70:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d76:	e8 67 f3 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017d7b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017d80:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017d8a:	83 c4 1c             	add    esp,0x1c
c0017d8d:	c3                   	ret    
c0017d8e:	e9 41 02 00 00       	jmp    c0017fd4 <picEOI(int)>

c0017d93 <HalRestart()>:
c0017d93:	c3                   	ret    

c0017d94 <HalShutdown()>:
c0017d94:	c3                   	ret    

c0017d95 <HalSleep()>:
c0017d95:	c3                   	ret    
c0017d96:	66 90                	xchg   ax,ax

c0017d98 <picIoWait()>:
c0017d98:	eb 00                	jmp    c0017d9a <picIoWait()+0x2>
c0017d9a:	eb 00                	jmp    c0017d9c <picIoWait()+0x4>
c0017d9c:	90                   	nop
c0017d9d:	c3                   	ret    
c0017d9e:	66 90                	xchg   ax,ax

c0017da0 <picDisable()>:
c0017da0:	83 ec 10             	sub    esp,0x10
c0017da3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017daa:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017daf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017db3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017db8:	ee                   	out    dx,al
c0017db9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017dc0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017dc5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017dc9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017dce:	ee                   	out    dx,al
c0017dcf:	90                   	nop
c0017dd0:	83 c4 10             	add    esp,0x10
c0017dd3:	c3                   	ret    

c0017dd4 <picGetIRQReg(int)>:
c0017dd4:	83 ec 10             	sub    esp,0x10
c0017dd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ddb:	0f b6 c0             	movzx  eax,al
c0017dde:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017de5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017de9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017ded:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017df2:	ee                   	out    dx,al
c0017df3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017df7:	0f b6 c0             	movzx  eax,al
c0017dfa:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017e01:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017e05:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017e09:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017e0e:	ee                   	out    dx,al
c0017e0f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017e16:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017e1b:	89 c2                	mov    edx,eax
c0017e1d:	ec                   	in     al,dx
c0017e1e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017e22:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e26:	0f b6 c0             	movzx  eax,al
c0017e29:	c1 e0 08             	shl    eax,0x8
c0017e2c:	89 c1                	mov    ecx,eax
c0017e2e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017e35:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017e3a:	89 c2                	mov    edx,eax
c0017e3c:	ec                   	in     al,dx
c0017e3d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017e41:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017e45:	0f b6 c0             	movzx  eax,al
c0017e48:	09 c8                	or     eax,ecx
c0017e4a:	83 c4 10             	add    esp,0x10
c0017e4d:	c3                   	ret    
c0017e4e:	66 90                	xchg   ax,ax

c0017e50 <picOpen()>:
c0017e50:	83 ec 50             	sub    esp,0x50
c0017e53:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017e5a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017e5f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017e63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e67:	ee                   	out    dx,al
c0017e68:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017e6f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017e74:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017e78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e7c:	ee                   	out    dx,al
c0017e7d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017e85:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017e8d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017e94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e98:	89 c2                	mov    edx,eax
c0017e9a:	ec                   	in     al,dx
c0017e9b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017e9f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017ea3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017ea7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017eae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017eb2:	89 c2                	mov    edx,eax
c0017eb4:	ec                   	in     al,dx
c0017eb5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017eb9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017ebd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017ec1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017ec8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017ecd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017ed1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ed5:	ee                   	out    dx,al
c0017ed6:	e8 bd fe ff ff       	call   c0017d98 <picIoWait()>
c0017edb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017ee2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017ee7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017eeb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017eef:	ee                   	out    dx,al
c0017ef0:	e8 a3 fe ff ff       	call   c0017d98 <picIoWait()>
c0017ef5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017ef9:	0f b6 c0             	movzx  eax,al
c0017efc:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017f03:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017f07:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017f0b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f0f:	ee                   	out    dx,al
c0017f10:	e8 83 fe ff ff       	call   c0017d98 <picIoWait()>
c0017f15:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017f19:	0f b6 c0             	movzx  eax,al
c0017f1c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017f23:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017f27:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017f2b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f2f:	ee                   	out    dx,al
c0017f30:	e8 63 fe ff ff       	call   c0017d98 <picIoWait()>
c0017f35:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017f3c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017f41:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017f45:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f49:	ee                   	out    dx,al
c0017f4a:	e8 49 fe ff ff       	call   c0017d98 <picIoWait()>
c0017f4f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017f56:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017f5b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017f5f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017f63:	ee                   	out    dx,al
c0017f64:	e8 2f fe ff ff       	call   c0017d98 <picIoWait()>
c0017f69:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017f70:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017f75:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017f79:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017f7d:	ee                   	out    dx,al
c0017f7e:	e8 15 fe ff ff       	call   c0017d98 <picIoWait()>
c0017f83:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017f8a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017f8f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017f93:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017f97:	ee                   	out    dx,al
c0017f98:	e8 fb fd ff ff       	call   c0017d98 <picIoWait()>
c0017f9d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017fa2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017fa9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017fad:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017fb1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017fb5:	ee                   	out    dx,al
c0017fb6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017fbb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017fc2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017fc6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017fca:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017fce:	ee                   	out    dx,al
c0017fcf:	90                   	nop
c0017fd0:	83 c4 50             	add    esp,0x50
c0017fd3:	c3                   	ret    

c0017fd4 <picEOI(int)>:
c0017fd4:	83 ec 10             	sub    esp,0x10
c0017fd7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017fdc:	75 1e                	jne    c0017ffc <picEOI(int)+0x28>
c0017fde:	6a 0b                	push   0xb
c0017fe0:	e8 ef fd ff ff       	call   c0017dd4 <picGetIRQReg(int)>
c0017fe5:	83 c4 04             	add    esp,0x4
c0017fe8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0017fed:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017ff2:	25 80 00 00 00       	and    eax,0x80
c0017ff7:	74 73                	je     c001806c <picEOI(int)+0x98>
c0017ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0017ffc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018001:	75 31                	jne    c0018034 <picEOI(int)+0x60>
c0018003:	6a 0b                	push   0xb
c0018005:	e8 ca fd ff ff       	call   c0017dd4 <picGetIRQReg(int)>
c001800a:	83 c4 04             	add    esp,0x4
c001800d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018012:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018016:	98                   	cwde   
c0018017:	85 c0                	test   eax,eax
c0018019:	78 19                	js     c0018034 <picEOI(int)+0x60>
c001801b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018022:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018027:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001802b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018030:	ee                   	out    dx,al
c0018031:	eb 3d                	jmp    c0018070 <picEOI(int)+0x9c>
c0018033:	90                   	nop
c0018034:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018039:	7e 19                	jle    c0018054 <picEOI(int)+0x80>
c001803b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018042:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018047:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001804b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018050:	ee                   	out    dx,al
c0018051:	8d 76 00             	lea    esi,[esi+0x0]
c0018054:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001805b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018060:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018064:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018069:	ee                   	out    dx,al
c001806a:	eb 04                	jmp    c0018070 <picEOI(int)+0x9c>
c001806c:	90                   	nop
c001806d:	8d 76 00             	lea    esi,[esi+0x0]
c0018070:	83 c4 10             	add    esp,0x10
c0018073:	c3                   	ret    

c0018074 <RTC::open(int, int, void*)>:
c0018074:	31 c0                	xor    eax,eax
c0018076:	c3                   	ret    
c0018077:	90                   	nop

c0018078 <RTC::close(int, int, void*)>:
c0018078:	31 c0                	xor    eax,eax
c001807a:	c3                   	ret    
c001807b:	90                   	nop

c001807c <RTC::timeInSecondsUTC()>:
c001807c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018080:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018086:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001808c:	c3                   	ret    
c001808d:	90                   	nop

c001808e <RTC::timeInDatetimeUTC()>:
c001808e:	53                   	push   ebx
c001808f:	83 ec 14             	sub    esp,0x14
c0018092:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018096:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001809a:	8b 10                	mov    edx,DWORD PTR [eax]
c001809c:	50                   	push   eax
c001809d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00180a0:	83 c4 0c             	add    esp,0xc
c00180a3:	52                   	push   edx
c00180a4:	50                   	push   eax
c00180a5:	53                   	push   ebx
c00180a6:	e8 d9 42 ff ff       	call   c000c384 <secondsToDatetime(unsigned long long)>
c00180ab:	89 d8                	mov    eax,ebx
c00180ad:	83 c4 14             	add    esp,0x14
c00180b0:	5b                   	pop    ebx
c00180b1:	c2 04 00             	ret    0x4

c00180b4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00180b4:	56                   	push   esi
c00180b5:	53                   	push   ebx
c00180b6:	83 ec 14             	sub    esp,0x14
c00180b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00180bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180bf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00180c2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00180c6:	52                   	push   edx
c00180c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180cf:	50                   	push   eax
c00180d0:	e8 af 42 ff ff       	call   c000c384 <secondsToDatetime(unsigned long long)>
c00180d5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00180d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180e1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00180e5:	89 f0                	mov    eax,esi
c00180e7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00180eb:	83 c4 20             	add    esp,0x20
c00180ee:	5b                   	pop    ebx
c00180ef:	5e                   	pop    esi
c00180f0:	ff e0                	jmp    eax

c00180f2 <RTC::~RTC()>:
c00180f2:	83 ec 0c             	sub    esp,0xc
c00180f5:	ba ac 26 02 c0       	mov    edx,0xc00226ac
c00180fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180fe:	89 10                	mov    DWORD PTR [eax],edx
c0018100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018104:	83 ec 0c             	sub    esp,0xc
c0018107:	50                   	push   eax
c0018108:	e8 03 40 ff ff       	call   c000c110 <Clock::~Clock()>
c001810d:	83 c4 10             	add    esp,0x10
c0018110:	90                   	nop
c0018111:	83 c4 0c             	add    esp,0xc
c0018114:	c3                   	ret    
c0018115:	90                   	nop

c0018116 <RTC::~RTC()>:
c0018116:	83 ec 0c             	sub    esp,0xc
c0018119:	83 ec 0c             	sub    esp,0xc
c001811c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018120:	e8 cd ff ff ff       	call   c00180f2 <RTC::~RTC()>
c0018125:	83 c4 10             	add    esp,0x10
c0018128:	83 ec 08             	sub    esp,0x8
c001812b:	68 60 01 00 00       	push   0x160
c0018130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018134:	e8 d3 26 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018139:	83 c4 10             	add    esp,0x10
c001813c:	83 c4 0c             	add    esp,0xc
c001813f:	c3                   	ret    

c0018140 <RTC::get_update_in_progress_flag()>:
c0018140:	83 ec 14             	sub    esp,0x14
c0018143:	6a 0a                	push   0xa
c0018145:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001814b:	e8 4a f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018150:	83 c4 1c             	add    esp,0x1c
c0018153:	0f b6 c0             	movzx  eax,al
c0018156:	c1 e8 07             	shr    eax,0x7
c0018159:	c3                   	ret    

c001815a <RTC::completeRTCRefresh()>:
c001815a:	55                   	push   ebp
c001815b:	57                   	push   edi
c001815c:	56                   	push   esi
c001815d:	53                   	push   ebx
c001815e:	83 ec 3c             	sub    esp,0x3c
c0018161:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018167:	83 ec 0c             	sub    esp,0xc
c001816a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001816e:	e8 cd ff ff ff       	call   c0018140 <RTC::get_update_in_progress_flag()>
c0018173:	83 c4 10             	add    esp,0x10
c0018176:	84 c0                	test   al,al
c0018178:	74 0e                	je     c0018188 <RTC::completeRTCRefresh()+0x2e>
c001817a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018180:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018186:	73 df                	jae    c0018167 <RTC::completeRTCRefresh()+0xd>
c0018188:	50                   	push   eax
c0018189:	50                   	push   eax
c001818a:	6a 00                	push   0x0
c001818c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018192:	e8 03 f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018197:	89 c7                	mov    edi,eax
c0018199:	58                   	pop    eax
c001819a:	5a                   	pop    edx
c001819b:	6a 02                	push   0x2
c001819d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181a3:	e8 f2 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181a8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00181ac:	59                   	pop    ecx
c00181ad:	5b                   	pop    ebx
c00181ae:	6a 04                	push   0x4
c00181b0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181b6:	e8 df ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181bb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00181bf:	5e                   	pop    esi
c00181c0:	5d                   	pop    ebp
c00181c1:	6a 07                	push   0x7
c00181c3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181c9:	e8 cc ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181ce:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00181d2:	58                   	pop    eax
c00181d3:	5a                   	pop    edx
c00181d4:	6a 08                	push   0x8
c00181d6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181dc:	e8 b9 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181e1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00181e5:	59                   	pop    ecx
c00181e6:	5b                   	pop    ebx
c00181e7:	6a 09                	push   0x9
c00181e9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181ef:	e8 a6 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181f4:	0f b6 c0             	movzx  eax,al
c00181f7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00181fb:	83 c4 10             	add    esp,0x10
c00181fe:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018204:	83 ec 0c             	sub    esp,0xc
c0018207:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001820b:	e8 30 ff ff ff       	call   c0018140 <RTC::get_update_in_progress_flag()>
c0018210:	83 c4 10             	add    esp,0x10
c0018213:	84 c0                	test   al,al
c0018215:	74 0e                	je     c0018225 <RTC::completeRTCRefresh()+0xcb>
c0018217:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001821d:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018223:	73 df                	jae    c0018204 <RTC::completeRTCRefresh()+0xaa>
c0018225:	51                   	push   ecx
c0018226:	51                   	push   ecx
c0018227:	6a 00                	push   0x0
c0018229:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001822f:	e8 66 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018234:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018238:	5b                   	pop    ebx
c0018239:	5e                   	pop    esi
c001823a:	6a 02                	push   0x2
c001823c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018242:	e8 53 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018247:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001824b:	5d                   	pop    ebp
c001824c:	58                   	pop    eax
c001824d:	6a 04                	push   0x4
c001824f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018255:	e8 40 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001825a:	88 c3                	mov    bl,al
c001825c:	58                   	pop    eax
c001825d:	5a                   	pop    edx
c001825e:	6a 07                	push   0x7
c0018260:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018266:	e8 2f ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001826b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001826f:	59                   	pop    ecx
c0018270:	5e                   	pop    esi
c0018271:	6a 08                	push   0x8
c0018273:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018279:	e8 1c ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001827e:	5d                   	pop    ebp
c001827f:	89 c6                	mov    esi,eax
c0018281:	58                   	pop    eax
c0018282:	6a 09                	push   0x9
c0018284:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001828a:	e8 0b ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001828f:	89 f9                	mov    ecx,edi
c0018291:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018295:	83 c4 10             	add    esp,0x10
c0018298:	0f b6 e8             	movzx  ebp,al
c001829b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00182a0:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00182a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00182a8:	74 27                	je     c00182d1 <RTC::completeRTCRefresh()+0x177>
c00182aa:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00182ae:	89 f0                	mov    eax,esi
c00182b0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00182b4:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00182b8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00182bc:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00182c0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00182c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00182c8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00182cc:	e9 2d ff ff ff       	jmp    c00181fe <RTC::completeRTCRefresh()+0xa4>
c00182d1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00182d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182da:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00182de:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c00182e2:	75 c6                	jne    c00182aa <RTC::completeRTCRefresh()+0x150>
c00182e4:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00182e9:	89 f1                	mov    ecx,esi
c00182eb:	0f b6 fb             	movzx  edi,bl
c00182ee:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00182f2:	0f b6 c9             	movzx  ecx,cl
c00182f5:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00182f9:	89 f1                	mov    ecx,esi
c00182fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00182ff:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018303:	0f 94 c2             	sete   dl
c0018306:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001830a:	0f 94 c0             	sete   al
c001830d:	21 d0                	and    eax,edx
c001830f:	31 d2                	xor    edx,edx
c0018311:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018315:	0f 94 c2             	sete   dl
c0018318:	85 c2                	test   edx,eax
c001831a:	74 8e                	je     c00182aa <RTC::completeRTCRefresh()+0x150>
c001831c:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018320:	75 88                	jne    c00182aa <RTC::completeRTCRefresh()+0x150>
c0018322:	52                   	push   edx
c0018323:	52                   	push   edx
c0018324:	6a 0b                	push   0xb
c0018326:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001832c:	e8 69 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018331:	83 c4 10             	add    esp,0x10
c0018334:	a8 04                	test   al,0x4
c0018336:	75 7a                	jne    c00183b2 <RTC::completeRTCRefresh()+0x258>
c0018338:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001833c:	c1 ef 04             	shr    edi,0x4
c001833f:	83 e6 0f             	and    esi,0xf
c0018342:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018346:	c1 ed 04             	shr    ebp,0x4
c0018349:	6b ed 0a             	imul   ebp,ebp,0xa
c001834c:	c1 ea 04             	shr    edx,0x4
c001834f:	6b d2 0a             	imul   edx,edx,0xa
c0018352:	83 e1 0f             	and    ecx,0xf
c0018355:	01 d1                	add    ecx,edx
c0018357:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001835b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001835f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018363:	c1 ea 04             	shr    edx,0x4
c0018366:	6b d2 0a             	imul   edx,edx,0xa
c0018369:	83 e1 0f             	and    ecx,0xf
c001836c:	01 d1                	add    ecx,edx
c001836e:	89 fa                	mov    edx,edi
c0018370:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018374:	83 e2 07             	and    edx,0x7
c0018377:	89 d9                	mov    ecx,ebx
c0018379:	6b d2 0a             	imul   edx,edx,0xa
c001837c:	83 e1 0f             	and    ecx,0xf
c001837f:	83 e3 80             	and    ebx,0xffffff80
c0018382:	01 d1                	add    ecx,edx
c0018384:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018388:	09 cb                	or     ebx,ecx
c001838a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001838e:	c1 ea 04             	shr    edx,0x4
c0018391:	6b d2 0a             	imul   edx,edx,0xa
c0018394:	83 e1 0f             	and    ecx,0xf
c0018397:	01 d1                	add    ecx,edx
c0018399:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001839d:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00183a1:	c1 ea 04             	shr    edx,0x4
c00183a4:	6b d2 0a             	imul   edx,edx,0xa
c00183a7:	01 d6                	add    esi,edx
c00183a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00183ad:	83 e2 0f             	and    edx,0xf
c00183b0:	01 d5                	add    ebp,edx
c00183b2:	a8 02                	test   al,0x2
c00183b4:	75 15                	jne    c00183cb <RTC::completeRTCRefresh()+0x271>
c00183b6:	f6 c3 80             	test   bl,0x80
c00183b9:	74 10                	je     c00183cb <RTC::completeRTCRefresh()+0x271>
c00183bb:	83 e3 7f             	and    ebx,0x7f
c00183be:	b9 18 00 00 00       	mov    ecx,0x18
c00183c3:	8d 43 0c             	lea    eax,[ebx+0xc]
c00183c6:	99                   	cdq    
c00183c7:	f7 f9                	idiv   ecx
c00183c9:	88 d3                	mov    bl,dl
c00183cb:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00183d1:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00183d7:	77 06                	ja     c00183df <RTC::completeRTCRefresh()+0x285>
c00183d9:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00183df:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00183e4:	31 c9                	xor    ecx,ecx
c00183e6:	31 d2                	xor    edx,edx
c00183e8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00183ec:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00183f0:	89 cd                	mov    ebp,ecx
c00183f2:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c00183f6:	c1 e7 10             	shl    edi,0x10
c00183f9:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00183ff:	c1 e0 10             	shl    eax,0x10
c0018402:	09 c5                	or     ebp,eax
c0018404:	89 e9                	mov    ecx,ebp
c0018406:	0f b7 c2             	movzx  eax,dx
c0018409:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001840d:	09 f8                	or     eax,edi
c001840f:	89 c2                	mov    edx,eax
c0018411:	50                   	push   eax
c0018412:	50                   	push   eax
c0018413:	88 d9                	mov    cl,bl
c0018415:	51                   	push   ecx
c0018416:	52                   	push   edx
c0018417:	e8 e3 3d ff ff       	call   c000c1ff <datetimeToSeconds(datetime_t)>
c001841c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018420:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018426:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001842c:	83 c4 4c             	add    esp,0x4c
c001842f:	5b                   	pop    ebx
c0018430:	5e                   	pop    esi
c0018431:	5f                   	pop    edi
c0018432:	5d                   	pop    ebp
c0018433:	c3                   	ret    

c0018434 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018434:	55                   	push   ebp
c0018435:	57                   	push   edi
c0018436:	56                   	push   esi
c0018437:	53                   	push   ebx
c0018438:	83 ec 30             	sub    esp,0x30
c001843b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001843f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018443:	6a 00                	push   0x0
c0018445:	6a 00                	push   0x0
c0018447:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001844d:	e8 60 ee fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018452:	83 c4 0c             	add    esp,0xc
c0018455:	6a 00                	push   0x0
c0018457:	6a 02                	push   0x2
c0018459:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001845f:	e8 4e ee fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018464:	89 f8                	mov    eax,edi
c0018466:	89 f9                	mov    ecx,edi
c0018468:	0f b6 c4             	movzx  eax,ah
c001846b:	31 d2                	xor    edx,edx
c001846d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018471:	c1 e9 10             	shr    ecx,0x10
c0018474:	89 f0                	mov    eax,esi
c0018476:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001847a:	89 f0                	mov    eax,esi
c001847c:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018480:	0f b6 c4             	movzx  eax,ah
c0018483:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018487:	89 f0                	mov    eax,esi
c0018489:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001848d:	c1 e8 10             	shr    eax,0x10
c0018490:	b9 64 00 00 00       	mov    ecx,0x64
c0018495:	f7 f1                	div    ecx
c0018497:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001849b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001849f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00184a3:	59                   	pop    ecx
c00184a4:	5b                   	pop    ebx
c00184a5:	89 fb                	mov    ebx,edi
c00184a7:	6a 0b                	push   0xb
c00184a9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184af:	e8 e6 ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00184b4:	83 c4 10             	add    esp,0x10
c00184b7:	a8 04                	test   al,0x4
c00184b9:	89 c5                	mov    ebp,eax
c00184bb:	75 6e                	jne    c001852b <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00184bd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00184c1:	31 d2                	xor    edx,edx
c00184c3:	0f b6 c1             	movzx  eax,cl
c00184c6:	b9 0a 00 00 00       	mov    ecx,0xa
c00184cb:	f7 f1                	div    ecx
c00184cd:	c1 e0 04             	shl    eax,0x4
c00184d0:	09 d0                	or     eax,edx
c00184d2:	31 d2                	xor    edx,edx
c00184d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00184d8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00184dd:	f7 f1                	div    ecx
c00184df:	c1 e0 04             	shl    eax,0x4
c00184e2:	09 d0                	or     eax,edx
c00184e4:	31 d2                	xor    edx,edx
c00184e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184ea:	0f b6 c3             	movzx  eax,bl
c00184ed:	f7 f1                	div    ecx
c00184ef:	c1 e0 04             	shl    eax,0x4
c00184f2:	09 d0                	or     eax,edx
c00184f4:	31 d2                	xor    edx,edx
c00184f6:	89 c3                	mov    ebx,eax
c00184f8:	89 f0                	mov    eax,esi
c00184fa:	0f b6 c0             	movzx  eax,al
c00184fd:	f7 f1                	div    ecx
c00184ff:	c1 e0 04             	shl    eax,0x4
c0018502:	09 d0                	or     eax,edx
c0018504:	31 d2                	xor    edx,edx
c0018506:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001850a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001850f:	f7 f1                	div    ecx
c0018511:	c1 e0 04             	shl    eax,0x4
c0018514:	09 d0                	or     eax,edx
c0018516:	31 d2                	xor    edx,edx
c0018518:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001851c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018520:	f7 f1                	div    ecx
c0018522:	c1 e0 04             	shl    eax,0x4
c0018525:	09 d0                	or     eax,edx
c0018527:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001852b:	83 e5 02             	and    ebp,0x2
c001852e:	75 1e                	jne    c001854e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018530:	0f b6 c3             	movzx  eax,bl
c0018533:	83 f8 0b             	cmp    eax,0xb
c0018536:	76 10                	jbe    c0018548 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018538:	8d 53 f4             	lea    edx,[ebx-0xc]
c001853b:	84 d2                	test   dl,dl
c001853d:	88 d3                	mov    bl,dl
c001853f:	75 02                	jne    c0018543 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018541:	b3 0c                	mov    bl,0xc
c0018543:	83 cb 80             	or     ebx,0xffffff80
c0018546:	eb 06                	jmp    c001854e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018548:	85 c0                	test   eax,eax
c001854a:	75 02                	jne    c001854e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001854c:	b3 0c                	mov    bl,0xc
c001854e:	50                   	push   eax
c001854f:	0f b6 db             	movzx  ebx,bl
c0018552:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018557:	52                   	push   edx
c0018558:	6a 00                	push   0x0
c001855a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018560:	e8 4d ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018565:	83 c4 0c             	add    esp,0xc
c0018568:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001856d:	50                   	push   eax
c001856e:	6a 02                	push   0x2
c0018570:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018576:	e8 37 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001857b:	83 c4 0c             	add    esp,0xc
c001857e:	53                   	push   ebx
c001857f:	6a 04                	push   0x4
c0018581:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018587:	e8 26 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001858c:	83 c4 0c             	add    esp,0xc
c001858f:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018594:	52                   	push   edx
c0018595:	6a 07                	push   0x7
c0018597:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001859d:	e8 10 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185a2:	83 c4 0c             	add    esp,0xc
c00185a5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00185aa:	50                   	push   eax
c00185ab:	6a 08                	push   0x8
c00185ad:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185b3:	e8 fa ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185b8:	83 c4 0c             	add    esp,0xc
c00185bb:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00185c0:	55                   	push   ebp
c00185c1:	6a 09                	push   0x9
c00185c3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185c9:	e8 e4 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185ce:	5a                   	pop    edx
c00185cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00185d3:	e8 82 fb ff ff       	call   c001815a <RTC::completeRTCRefresh()>
c00185d8:	83 c4 3c             	add    esp,0x3c
c00185db:	b0 01                	mov    al,0x1
c00185dd:	5b                   	pop    ebx
c00185de:	5e                   	pop    esi
c00185df:	5f                   	pop    edi
c00185e0:	5d                   	pop    ebp
c00185e1:	c3                   	ret    

c00185e2 <rtcIRQHandler(regs*, void*)>:
c00185e2:	53                   	push   ebx
c00185e3:	83 ec 10             	sub    esp,0x10
c00185e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00185ea:	6a 0c                	push   0xc
c00185ec:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185f2:	e8 a3 eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00185f7:	83 c4 10             	add    esp,0x10
c00185fa:	a8 80                	test   al,0x80
c00185fc:	74 24                	je     c0018622 <rtcIRQHandler(regs*, void*)+0x40>
c00185fe:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018605:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001860c:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c0018613:	75 0d                	jne    c0018622 <rtcIRQHandler(regs*, void*)+0x40>
c0018615:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018619:	83 c4 08             	add    esp,0x8
c001861c:	5b                   	pop    ebx
c001861d:	e9 38 fb ff ff       	jmp    c001815a <RTC::completeRTCRefresh()>
c0018622:	83 c4 08             	add    esp,0x8
c0018625:	5b                   	pop    ebx
c0018626:	c3                   	ret    
c0018627:	90                   	nop

c0018628 <RTC::RTC()>:
c0018628:	83 ec 1c             	sub    esp,0x1c
c001862b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001862f:	83 ec 08             	sub    esp,0x8
c0018632:	68 8f 26 02 c0       	push   0xc002268f
c0018637:	50                   	push   eax
c0018638:	e8 9d 3a ff ff       	call   c000c0da <Clock::Clock(char const*)>
c001863d:	83 c4 10             	add    esp,0x10
c0018640:	ba ac 26 02 c0       	mov    edx,0xc00226ac
c0018645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018649:	89 10                	mov    DWORD PTR [eax],edx
c001864b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001864f:	83 ec 0c             	sub    esp,0xc
c0018652:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018656:	6a 01                	push   0x1
c0018658:	68 e2 85 01 c0       	push   0xc00185e2
c001865d:	6a 08                	push   0x8
c001865f:	50                   	push   eax
c0018660:	e8 57 3f ff ff       	call   c000c5bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018665:	83 c4 20             	add    esp,0x20
c0018668:	89 c2                	mov    edx,eax
c001866a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001866e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018674:	fa                   	cli    
c0018675:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001867a:	83 c0 01             	add    eax,0x1
c001867d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018682:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018687:	83 ec 08             	sub    esp,0x8
c001868a:	6a 0b                	push   0xb
c001868c:	50                   	push   eax
c001868d:	e8 08 eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018692:	83 c4 10             	add    esp,0x10
c0018695:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018699:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001869e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00186a2:	83 ca 10             	or     edx,0x10
c00186a5:	0f b6 d2             	movzx  edx,dl
c00186a8:	83 ec 04             	sub    esp,0x4
c00186ab:	52                   	push   edx
c00186ac:	6a 0b                	push   0xb
c00186ae:	50                   	push   eax
c00186af:	e8 fe eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186b4:	83 c4 10             	add    esp,0x10
c00186b7:	83 ec 0c             	sub    esp,0xc
c00186ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186be:	e8 97 fa ff ff       	call   c001815a <RTC::completeRTCRefresh()>
c00186c3:	83 c4 10             	add    esp,0x10
c00186c6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00186cb:	83 e8 01             	sub    eax,0x1
c00186ce:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00186d3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00186d8:	85 c0                	test   eax,eax
c00186da:	75 01                	jne    c00186dd <RTC::RTC()+0xb5>
c00186dc:	fb                   	sti    
c00186dd:	90                   	nop
c00186de:	83 c4 1c             	add    esp,0x1c
c00186e1:	c3                   	ret    
c00186e2:	66 90                	xchg   ax,ax

c00186e4 <HalConsoleScroll(int, int)>:
c00186e4:	83 ec 10             	sub    esp,0x10
c00186e7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00186ef:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00186f7:	90                   	nop
c00186f8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00186fd:	0f 8f e1 00 00 00    	jg     c00187e4 <HalConsoleScroll(int, int)+0x100>
c0018703:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001870b:	90                   	nop
c001870c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018714:	0f 8f be 00 00 00    	jg     c00187d8 <HalConsoleScroll(int, int)+0xf4>
c001871a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001871e:	89 d0                	mov    eax,edx
c0018720:	c1 e0 02             	shl    eax,0x2
c0018723:	01 d0                	add    eax,edx
c0018725:	c1 e0 05             	shl    eax,0x5
c0018728:	89 c2                	mov    edx,eax
c001872a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001872e:	01 d0                	add    eax,edx
c0018730:	89 c2                	mov    edx,eax
c0018732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018736:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018739:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001873d:	89 d0                	mov    eax,edx
c001873f:	c1 e0 02             	shl    eax,0x2
c0018742:	01 d0                	add    eax,edx
c0018744:	c1 e0 05             	shl    eax,0x5
c0018747:	89 c2                	mov    edx,eax
c0018749:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001874d:	01 d0                	add    eax,edx
c001874f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018759:	01 d0                	add    eax,edx
c001875b:	8a 11                	mov    dl,BYTE PTR [ecx]
c001875d:	88 10                	mov    BYTE PTR [eax],dl
c001875f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018764:	75 66                	jne    c00187cc <HalConsoleScroll(int, int)+0xe8>
c0018766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001876a:	83 e0 01             	and    eax,0x1
c001876d:	74 39                	je     c00187a8 <HalConsoleScroll(int, int)+0xc4>
c001876f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018773:	83 e0 0f             	and    eax,0xf
c0018776:	88 c2                	mov    dl,al
c0018778:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001877c:	c1 e0 04             	shl    eax,0x4
c001877f:	09 d0                	or     eax,edx
c0018781:	88 c1                	mov    cl,al
c0018783:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018787:	89 d0                	mov    eax,edx
c0018789:	c1 e0 02             	shl    eax,0x2
c001878c:	01 d0                	add    eax,edx
c001878e:	c1 e0 05             	shl    eax,0x5
c0018791:	89 c2                	mov    edx,eax
c0018793:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018797:	01 d0                	add    eax,edx
c0018799:	89 c2                	mov    edx,eax
c001879b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001879f:	01 d0                	add    eax,edx
c00187a1:	88 ca                	mov    dl,cl
c00187a3:	88 10                	mov    BYTE PTR [eax],dl
c00187a5:	eb 25                	jmp    c00187cc <HalConsoleScroll(int, int)+0xe8>
c00187a7:	90                   	nop
c00187a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187ac:	89 d0                	mov    eax,edx
c00187ae:	c1 e0 02             	shl    eax,0x2
c00187b1:	01 d0                	add    eax,edx
c00187b3:	c1 e0 05             	shl    eax,0x5
c00187b6:	89 c2                	mov    edx,eax
c00187b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187bc:	01 d0                	add    eax,edx
c00187be:	89 c2                	mov    edx,eax
c00187c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187c4:	01 d0                	add    eax,edx
c00187c6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00187c9:	8d 76 00             	lea    esi,[esi+0x0]
c00187cc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00187d1:	e9 36 ff ff ff       	jmp    c001870c <HalConsoleScroll(int, int)+0x28>
c00187d6:	66 90                	xchg   ax,ax
c00187d8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00187dd:	e9 16 ff ff ff       	jmp    c00186f8 <HalConsoleScroll(int, int)+0x14>
c00187e2:	66 90                	xchg   ax,ax
c00187e4:	90                   	nop
c00187e5:	83 c4 10             	add    esp,0x10
c00187e8:	c3                   	ret    
c00187e9:	8d 76 00             	lea    esi,[esi+0x0]

c00187ec <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00187ec:	83 ec 14             	sub    esp,0x14
c00187ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187f3:	88 04 24             	mov    BYTE PTR [esp],al
c00187f6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00187f9:	0f b6 c0             	movzx  eax,al
c00187fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018800:	89 d1                	mov    ecx,edx
c0018802:	83 e1 0f             	and    ecx,0xf
c0018805:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018809:	c1 e2 04             	shl    edx,0x4
c001880c:	0f b6 d2             	movzx  edx,dl
c001880f:	09 ca                	or     edx,ecx
c0018811:	c1 e2 08             	shl    edx,0x8
c0018814:	09 d0                	or     eax,edx
c0018816:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001881b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018823:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018827:	89 d0                	mov    eax,edx
c0018829:	c1 e0 02             	shl    eax,0x2
c001882c:	01 d0                	add    eax,edx
c001882e:	c1 e0 04             	shl    eax,0x4
c0018831:	89 c2                	mov    edx,eax
c0018833:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018837:	01 d0                	add    eax,edx
c0018839:	d1 e0                	shl    eax,1
c001883b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001883f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018843:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018848:	66 89 10             	mov    WORD PTR [eax],dx
c001884b:	90                   	nop
c001884c:	83 c4 14             	add    esp,0x14
c001884f:	c3                   	ret    

c0018850 <HalConsoleCursorUpdate(int, int)>:
c0018850:	83 ec 20             	sub    esp,0x20
c0018853:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018857:	89 c2                	mov    edx,eax
c0018859:	c1 e2 02             	shl    edx,0x2
c001885c:	01 d0                	add    eax,edx
c001885e:	c1 e0 04             	shl    eax,0x4
c0018861:	89 c2                	mov    edx,eax
c0018863:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018867:	01 d0                	add    eax,edx
c0018869:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001886e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018875:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001887a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001887e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018882:	ee                   	out    dx,al
c0018883:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018888:	0f b6 c0             	movzx  eax,al
c001888b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018892:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018896:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001889a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001889e:	ee                   	out    dx,al
c001889f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00188a6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00188ab:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00188af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188b3:	ee                   	out    dx,al
c00188b4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00188b9:	c1 e8 08             	shr    eax,0x8
c00188bc:	0f b6 c0             	movzx  eax,al
c00188bf:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00188c6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00188ca:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00188ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188d2:	ee                   	out    dx,al
c00188d3:	90                   	nop
c00188d4:	83 c4 20             	add    esp,0x20
c00188d7:	c3                   	ret    

c00188d8 <FAT::getName()>:
c00188d8:	b8 e0 26 02 c0       	mov    eax,0xc00226e0
c00188dd:	c3                   	ret    
c00188de:	66 90                	xchg   ax,ax

c00188e0 <FAT::tell(void*, unsigned long long*)>:
c00188e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00188e5:	75 09                	jne    c00188f0 <FAT::tell(void*, unsigned long long*)+0x10>
c00188e7:	b8 04 00 00 00       	mov    eax,0x4
c00188ec:	c3                   	ret    
c00188ed:	8d 76 00             	lea    esi,[esi+0x0]
c00188f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00188f5:	75 09                	jne    c0018900 <FAT::tell(void*, unsigned long long*)+0x20>
c00188f7:	b8 04 00 00 00       	mov    eax,0x4
c00188fc:	c3                   	ret    
c00188fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018904:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018907:	ba 00 00 00 00       	mov    edx,0x0
c001890c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018910:	89 01                	mov    DWORD PTR [ecx],eax
c0018912:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018915:	b8 00 00 00 00       	mov    eax,0x0
c001891a:	c3                   	ret    
c001891b:	90                   	nop

c001891c <FAT::stat(void*, unsigned long long*)>:
c001891c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018921:	75 09                	jne    c001892c <FAT::stat(void*, unsigned long long*)+0x10>
c0018923:	b8 04 00 00 00       	mov    eax,0x4
c0018928:	c3                   	ret    
c0018929:	8d 76 00             	lea    esi,[esi+0x0]
c001892c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018931:	75 09                	jne    c001893c <FAT::stat(void*, unsigned long long*)+0x20>
c0018933:	b8 04 00 00 00       	mov    eax,0x4
c0018938:	c3                   	ret    
c0018939:	8d 76 00             	lea    esi,[esi+0x0]
c001893c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018940:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018943:	ba 00 00 00 00       	mov    edx,0x0
c0018948:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001894c:	89 01                	mov    DWORD PTR [ecx],eax
c001894e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018951:	b8 00 00 00 00       	mov    eax,0x0
c0018956:	c3                   	ret    
c0018957:	90                   	nop

c0018958 <FAT::~FAT()>:
c0018958:	83 ec 0c             	sub    esp,0xc
c001895b:	ba 2c 27 02 c0       	mov    edx,0xc002272c
c0018960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018964:	89 10                	mov    DWORD PTR [eax],edx
c0018966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001896a:	83 ec 0c             	sub    esp,0xc
c001896d:	50                   	push   eax
c001896e:	e8 2b 2b ff ff       	call   c000b49e <Filesystem::~Filesystem()>
c0018973:	83 c4 10             	add    esp,0x10
c0018976:	90                   	nop
c0018977:	83 c4 0c             	add    esp,0xc
c001897a:	c3                   	ret    
c001897b:	90                   	nop

c001897c <FAT::~FAT()>:
c001897c:	83 ec 0c             	sub    esp,0xc
c001897f:	83 ec 0c             	sub    esp,0xc
c0018982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018986:	e8 cd ff ff ff       	call   c0018958 <FAT::~FAT()>
c001898b:	83 c4 10             	add    esp,0x10
c001898e:	83 ec 08             	sub    esp,0x8
c0018991:	6a 08                	push   0x8
c0018993:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018997:	e8 70 1e ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001899c:	83 c4 10             	add    esp,0x10
c001899f:	83 c4 0c             	add    esp,0xc
c00189a2:	c3                   	ret    
c00189a3:	90                   	nop

c00189a4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00189a4:	83 ec 1c             	sub    esp,0x1c
c00189a7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00189ae:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00189b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189b7:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c00189be:	83 f8 ff             	cmp    eax,0xffffffff
c00189c1:	75 35                	jne    c00189f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00189c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00189c7:	88 c2                	mov    dl,al
c00189c9:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c00189ce:	01 d0                	add    eax,edx
c00189d0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00189d4:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c00189da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189de:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c00189e5:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c00189ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189ee:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c00189f5:	eb 19                	jmp    c0018a10 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00189f7:	90                   	nop
c00189f8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00189fc:	88 c2                	mov    dl,al
c00189fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a02:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018a09:	01 d0                	add    eax,edx
c0018a0b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a0f:	90                   	nop
c0018a10:	83 ec 04             	sub    esp,0x4
c0018a13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a1b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018a1f:	50                   	push   eax
c0018a20:	e8 ce c5 fe ff       	call   c0004ff3 <f_getlabel>
c0018a25:	83 c4 10             	add    esp,0x10
c0018a28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a31:	75 09                	jne    c0018a3c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018a33:	b8 00 00 00 00       	mov    eax,0x0
c0018a38:	eb 0a                	jmp    c0018a44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018a3a:	66 90                	xchg   ax,ax
c0018a3c:	b8 01 00 00 00       	mov    eax,0x1
c0018a41:	8d 76 00             	lea    esi,[esi+0x0]
c0018a44:	83 c4 1c             	add    esp,0x1c
c0018a47:	c3                   	ret    

c0018a48 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018a48:	53                   	push   ebx
c0018a49:	83 ec 58             	sub    esp,0x58
c0018a4c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018a54:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018a58:	b9 00 00 00 00       	mov    ecx,0x0
c0018a5d:	b8 3c 00 00 00       	mov    eax,0x3c
c0018a62:	83 e0 f8             	and    eax,0xfffffff8
c0018a65:	89 c3                	mov    ebx,eax
c0018a67:	b8 00 00 00 00       	mov    eax,0x0
c0018a6c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018a70:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018a74:	83 c0 08             	add    eax,0x8
c0018a77:	39 d8                	cmp    eax,ebx
c0018a79:	72 f1                	jb     c0018a6c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018a7b:	01 c2                	add    edx,eax
c0018a7d:	89 0a                	mov    DWORD PTR [edx],ecx
c0018a7f:	83 c2 04             	add    edx,0x4
c0018a82:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a86:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018a8d:	83 f8 ff             	cmp    eax,0xffffffff
c0018a90:	75 36                	jne    c0018ac8 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018a92:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a96:	88 c2                	mov    dl,al
c0018a98:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018a9d:	01 d0                	add    eax,edx
c0018a9f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018aa3:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018aa9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018aad:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018ab4:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ab9:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018abd:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018ac4:	eb 1a                	jmp    c0018ae0 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018ac6:	66 90                	xchg   ax,ax
c0018ac8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018acc:	88 c2                	mov    dl,al
c0018ace:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ad2:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ad9:	01 d0                	add    eax,edx
c0018adb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018adf:	90                   	nop
c0018ae0:	83 ec 08             	sub    esp,0x8
c0018ae3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018ae7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018aeb:	50                   	push   eax
c0018aec:	e8 7f 7d fe ff       	call   c0000870 <strcat>
c0018af1:	83 c4 10             	add    esp,0x10
c0018af4:	83 ec 0c             	sub    esp,0xc
c0018af7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018afb:	50                   	push   eax
c0018afc:	e8 46 c6 fe ff       	call   c0005147 <f_setlabel>
c0018b01:	83 c4 10             	add    esp,0x10
c0018b04:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b08:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018b0d:	75 09                	jne    c0018b18 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018b0f:	b8 00 00 00 00       	mov    eax,0x0
c0018b14:	eb 0a                	jmp    c0018b20 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018b16:	66 90                	xchg   ax,ax
c0018b18:	b8 01 00 00 00       	mov    eax,0x1
c0018b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b20:	83 c4 58             	add    esp,0x58
c0018b23:	5b                   	pop    ebx
c0018b24:	c3                   	ret    
c0018b25:	90                   	nop
c0018b26:	66 90                	xchg   ax,ax

c0018b28 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018b28:	83 ec 2c             	sub    esp,0x2c
c0018b2b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018b33:	83 ec 08             	sub    esp,0x8
c0018b36:	68 04 27 02 c0       	push   0xc0022704
c0018b3b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b3f:	e8 3c 7c fe ff       	call   c0000780 <strcmp>
c0018b44:	83 c4 10             	add    esp,0x10
c0018b47:	85 c0                	test   eax,eax
c0018b49:	0f 94 c0             	sete   al
c0018b4c:	0f b6 c0             	movzx  eax,al
c0018b4f:	85 c0                	test   eax,eax
c0018b51:	74 0d                	je     c0018b60 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018b53:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b5b:	e9 c0 00 00 00       	jmp    c0018c20 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b60:	83 ec 08             	sub    esp,0x8
c0018b63:	68 f6 26 02 c0       	push   0xc00226f6
c0018b68:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b6c:	e8 0f 7c fe ff       	call   c0000780 <strcmp>
c0018b71:	83 c4 10             	add    esp,0x10
c0018b74:	85 c0                	test   eax,eax
c0018b76:	0f 94 c0             	sete   al
c0018b79:	0f b6 c0             	movzx  eax,al
c0018b7c:	85 c0                	test   eax,eax
c0018b7e:	74 10                	je     c0018b90 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018b80:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b88:	e9 93 00 00 00       	jmp    c0018c20 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b90:	83 ec 08             	sub    esp,0x8
c0018b93:	68 fc 26 02 c0       	push   0xc00226fc
c0018b98:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b9c:	e8 df 7b fe ff       	call   c0000780 <strcmp>
c0018ba1:	83 c4 10             	add    esp,0x10
c0018ba4:	85 c0                	test   eax,eax
c0018ba6:	0f 94 c0             	sete   al
c0018ba9:	0f b6 c0             	movzx  eax,al
c0018bac:	85 c0                	test   eax,eax
c0018bae:	74 0c                	je     c0018bbc <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018bb0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018bb8:	eb 66                	jmp    c0018c20 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bba:	66 90                	xchg   ax,ax
c0018bbc:	83 ec 08             	sub    esp,0x8
c0018bbf:	68 5c ff 01 c0       	push   0xc001ff5c
c0018bc4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bc8:	e8 b3 7b fe ff       	call   c0000780 <strcmp>
c0018bcd:	83 c4 10             	add    esp,0x10
c0018bd0:	85 c0                	test   eax,eax
c0018bd2:	0f 94 c0             	sete   al
c0018bd5:	0f b6 c0             	movzx  eax,al
c0018bd8:	85 c0                	test   eax,eax
c0018bda:	74 0c                	je     c0018be8 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018bdc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018be4:	eb 3a                	jmp    c0018c20 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018be6:	66 90                	xchg   ax,ax
c0018be8:	83 ec 08             	sub    esp,0x8
c0018beb:	68 02 27 02 c0       	push   0xc0022702
c0018bf0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bf4:	e8 87 7b fe ff       	call   c0000780 <strcmp>
c0018bf9:	83 c4 10             	add    esp,0x10
c0018bfc:	85 c0                	test   eax,eax
c0018bfe:	0f 94 c0             	sete   al
c0018c01:	0f b6 c0             	movzx  eax,al
c0018c04:	85 c0                	test   eax,eax
c0018c06:	74 0c                	je     c0018c14 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018c08:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018c10:	eb 0e                	jmp    c0018c20 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c12:	66 90                	xchg   ax,ax
c0018c14:	b8 08 00 00 00       	mov    eax,0x8
c0018c19:	e9 ea 00 00 00       	jmp    c0018d08 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018c1e:	66 90                	xchg   ax,ax
c0018c20:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018c27:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018c2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c30:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c37:	83 f8 ff             	cmp    eax,0xffffffff
c0018c3a:	75 34                	jne    c0018c70 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018c3c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c40:	88 c2                	mov    dl,al
c0018c42:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c47:	01 d0                	add    eax,edx
c0018c49:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c4d:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018c53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c57:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018c5e:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c63:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018c67:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018c6e:	eb 18                	jmp    c0018c88 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018c70:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c74:	88 c2                	mov    dl,al
c0018c76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c7a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c81:	01 d0                	add    eax,edx
c0018c83:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c87:	90                   	nop
c0018c88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c8c:	88 04 24             	mov    BYTE PTR [esp],al
c0018c8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018c93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c97:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018c9f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018ca4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018cac:	83 ec 0c             	sub    esp,0xc
c0018caf:	68 00 20 00 00       	push   0x2000
c0018cb4:	e8 1a ee fe ff       	call   c0007ad3 <malloc>
c0018cb9:	83 c4 10             	add    esp,0x10
c0018cbc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018cc0:	68 00 20 00 00       	push   0x2000
c0018cc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018ccd:	50                   	push   eax
c0018cce:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018cd2:	50                   	push   eax
c0018cd3:	e8 6c c7 fe ff       	call   c0005444 <f_mkfs>
c0018cd8:	83 c4 10             	add    esp,0x10
c0018cdb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018cdf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018ce4:	75 0a                	jne    c0018cf0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018ce6:	b8 00 00 00 00       	mov    eax,0x0
c0018ceb:	eb 1b                	jmp    c0018d08 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018ced:	8d 76 00             	lea    esi,[esi+0x0]
c0018cf0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018cf5:	75 09                	jne    c0018d00 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018cf7:	b8 09 00 00 00       	mov    eax,0x9
c0018cfc:	eb 0a                	jmp    c0018d08 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018cfe:	66 90                	xchg   ax,ax
c0018d00:	b8 01 00 00 00       	mov    eax,0x1
c0018d05:	8d 76 00             	lea    esi,[esi+0x0]
c0018d08:	83 c4 2c             	add    esp,0x2c
c0018d0b:	c3                   	ret    

c0018d0c <FAT::tryMount(LogicalDisk*, int)>:
c0018d0c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018d12:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d17:	83 f8 14             	cmp    eax,0x14
c0018d1a:	75 18                	jne    c0018d34 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018d1c:	83 ec 0c             	sub    esp,0xc
c0018d1f:	68 08 27 02 c0       	push   0xc0022708
c0018d24:	e8 84 84 ff ff       	call   c00111ad <KePanic(char const*)>
c0018d29:	83 c4 10             	add    esp,0x10
c0018d2c:	b0 00                	mov    al,0x0
c0018d2e:	e9 ed 01 00 00       	jmp    c0018f20 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d33:	90                   	nop
c0018d34:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018d3b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018d41:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018d47:	3d 00 02 00 00       	cmp    eax,0x200
c0018d4c:	74 0a                	je     c0018d58 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018d4e:	b0 00                	mov    al,0x0
c0018d50:	e9 cb 01 00 00       	jmp    c0018f20 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d55:	8d 76 00             	lea    esi,[esi+0x0]
c0018d58:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018d60:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018d67:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d6e:	83 f8 ff             	cmp    eax,0xffffffff
c0018d71:	74 09                	je     c0018d7c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018d73:	b0 01                	mov    al,0x1
c0018d75:	e9 a6 01 00 00       	jmp    c0018f20 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d7a:	66 90                	xchg   ax,ax
c0018d7c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018d86:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018d8e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018d95:	88 c2                	mov    dl,al
c0018d97:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d9c:	01 d0                	add    eax,edx
c0018d9e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018da5:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018dab:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018db2:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018db9:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018dbe:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018dc5:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018dcc:	83 ec 0c             	sub    esp,0xc
c0018dcf:	68 34 02 00 00       	push   0x234
c0018dd4:	e8 fa ec fe ff       	call   c0007ad3 <malloc>
c0018dd9:	83 c4 10             	add    esp,0x10
c0018ddc:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018de3:	83 ec 04             	sub    esp,0x4
c0018de6:	6a 00                	push   0x0
c0018de8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018def:	50                   	push   eax
c0018df0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018df7:	e8 42 ae fe ff       	call   c0003c3e <f_mount>
c0018dfc:	83 c4 10             	add    esp,0x10
c0018dff:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018e06:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018e0e:	74 1c                	je     c0018e2c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018e10:	83 ec 0c             	sub    esp,0xc
c0018e13:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e1a:	e8 d4 ec fe ff       	call   c0007af3 <rfree>
c0018e1f:	83 c4 10             	add    esp,0x10
c0018e22:	b0 00                	mov    al,0x0
c0018e24:	e9 f7 00 00 00       	jmp    c0018f20 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e29:	8d 76 00             	lea    esi,[esi+0x0]
c0018e2c:	83 ec 04             	sub    esp,0x4
c0018e2f:	68 00 01 00 00       	push   0x100
c0018e34:	6a 00                	push   0x0
c0018e36:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e3d:	50                   	push   eax
c0018e3e:	e8 ad 76 fe ff       	call   c00004f0 <memset>
c0018e43:	83 c4 10             	add    esp,0x10
c0018e46:	83 ec 08             	sub    esp,0x8
c0018e49:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e50:	50                   	push   eax
c0018e51:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e58:	50                   	push   eax
c0018e59:	e8 12 7a fe ff       	call   c0000870 <strcat>
c0018e5e:	83 c4 10             	add    esp,0x10
c0018e61:	83 ec 08             	sub    esp,0x8
c0018e64:	68 16 27 02 c0       	push   0xc0022716
c0018e69:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e70:	50                   	push   eax
c0018e71:	e8 fa 79 fe ff       	call   c0000870 <strcat>
c0018e76:	83 c4 10             	add    esp,0x10
c0018e79:	83 ec 04             	sub    esp,0x4
c0018e7c:	6a 01                	push   0x1
c0018e7e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018e85:	50                   	push   eax
c0018e86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e8a:	50                   	push   eax
c0018e8b:	e8 10 ae fe ff       	call   c0003ca0 <f_open>
c0018e90:	83 c4 10             	add    esp,0x10
c0018e93:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018e9a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018ea1:	85 c0                	test   eax,eax
c0018ea3:	74 0b                	je     c0018eb0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018ea5:	78 31                	js     c0018ed8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018ea7:	83 e8 04             	sub    eax,0x4
c0018eaa:	83 f8 01             	cmp    eax,0x1
c0018ead:	77 29                	ja     c0018ed8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018eaf:	90                   	nop
c0018eb0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018eb8:	83 ec 0c             	sub    esp,0xc
c0018ebb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ebf:	50                   	push   eax
c0018ec0:	e8 8b b5 fe ff       	call   c0004450 <f_close>
c0018ec5:	83 c4 10             	add    esp,0x10
c0018ec8:	90                   	nop
c0018ec9:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018ed1:	85 c0                	test   eax,eax
c0018ed3:	74 43                	je     c0018f18 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018ed5:	eb 31                	jmp    c0018f08 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018ed7:	90                   	nop
c0018ed8:	83 ec 0c             	sub    esp,0xc
c0018edb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018ee2:	e8 0c ec fe ff       	call   c0007af3 <rfree>
c0018ee7:	83 c4 10             	add    esp,0x10
c0018eea:	83 ec 04             	sub    esp,0x4
c0018eed:	6a 00                	push   0x0
c0018eef:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018ef6:	50                   	push   eax
c0018ef7:	6a 00                	push   0x0
c0018ef9:	e8 40 ad fe ff       	call   c0003c3e <f_mount>
c0018efe:	83 c4 10             	add    esp,0x10
c0018f01:	b0 00                	mov    al,0x0
c0018f03:	eb 1b                	jmp    c0018f20 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f05:	8d 76 00             	lea    esi,[esi+0x0]
c0018f08:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f0d:	83 c0 01             	add    eax,0x1
c0018f10:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c0018f15:	8d 76 00             	lea    esi,[esi+0x0]
c0018f18:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018f1f:	90                   	nop
c0018f20:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018f26:	c3                   	ret    
c0018f27:	90                   	nop

c0018f28 <FAT::allocateSwapfile(char const*, int)>:
c0018f28:	55                   	push   ebp
c0018f29:	57                   	push   edi
c0018f2a:	56                   	push   esi
c0018f2b:	53                   	push   ebx
c0018f2c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018f32:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018f3d:	83 ec 0c             	sub    esp,0xc
c0018f40:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018f47:	e8 87 eb fe ff       	call   c0007ad3 <malloc>
c0018f4c:	83 c4 10             	add    esp,0x10
c0018f4f:	89 c7                	mov    edi,eax
c0018f51:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0018f56:	83 ec 04             	sub    esp,0x4
c0018f59:	50                   	push   eax
c0018f5a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018f61:	57                   	push   edi
c0018f62:	e8 99 27 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c0018f67:	83 c4 10             	add    esp,0x10
c0018f6a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018f71:	83 ec 04             	sub    esp,0x4
c0018f74:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018f78:	50                   	push   eax
c0018f79:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f7d:	50                   	push   eax
c0018f7e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f85:	e8 34 2b ff ff       	call   c000babe <File::stat(unsigned long long*, bool*)>
c0018f8a:	83 c4 10             	add    esp,0x10
c0018f8d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018f94:	c1 e0 14             	shl    eax,0x14
c0018f97:	89 c7                	mov    edi,eax
c0018f99:	89 c5                	mov    ebp,eax
c0018f9b:	c1 fd 1f             	sar    ebp,0x1f
c0018f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fa2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018fa6:	89 f9                	mov    ecx,edi
c0018fa8:	31 c1                	xor    ecx,eax
c0018faa:	89 cb                	mov    ebx,ecx
c0018fac:	89 e9                	mov    ecx,ebp
c0018fae:	31 d1                	xor    ecx,edx
c0018fb0:	89 ce                	mov    esi,ecx
c0018fb2:	89 f0                	mov    eax,esi
c0018fb4:	09 d8                	or     eax,ebx
c0018fb6:	0f 84 9c 00 00 00    	je     c0019058 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018fbc:	83 ec 0c             	sub    esp,0xc
c0018fbf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018fc6:	e8 bf 29 ff ff       	call   c000b98a <File::unlink()>
c0018fcb:	83 c4 10             	add    esp,0x10
c0018fce:	83 ec 08             	sub    esp,0x8
c0018fd1:	6a 12                	push   0x12
c0018fd3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018fda:	e8 dd 27 ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c0018fdf:	83 c4 10             	add    esp,0x10
c0018fe2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018fe9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018fef:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018ff6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018ffd:	c1 e0 14             	shl    eax,0x14
c0019000:	83 ec 04             	sub    esp,0x4
c0019003:	6a 01                	push   0x1
c0019005:	50                   	push   eax
c0019006:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001900d:	e8 c5 c2 fe ff       	call   c00052d7 <f_expand>
c0019012:	83 c4 10             	add    esp,0x10
c0019015:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001901c:	8b 00                	mov    eax,DWORD PTR [eax]
c001901e:	83 c0 10             	add    eax,0x10
c0019021:	8b 00                	mov    eax,DWORD PTR [eax]
c0019023:	83 ec 0c             	sub    esp,0xc
c0019026:	8d 54 24 24          	lea    edx,[esp+0x24]
c001902a:	52                   	push   edx
c001902b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001902f:	52                   	push   edx
c0019030:	6a 00                	push   0x0
c0019032:	68 00 04 00 00       	push   0x400
c0019037:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001903e:	ff d0                	call   eax
c0019040:	83 c4 20             	add    esp,0x20
c0019043:	83 ec 0c             	sub    esp,0xc
c0019046:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001904d:	e8 c8 27 ff ff       	call   c000b81a <File::close()>
c0019052:	83 c4 10             	add    esp,0x10
c0019055:	8d 76 00             	lea    esi,[esi+0x0]
c0019058:	83 ec 08             	sub    esp,0x8
c001905b:	6a 01                	push   0x1
c001905d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019064:	e8 53 27 ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c0019069:	83 c4 10             	add    esp,0x10
c001906c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019073:	8b 00                	mov    eax,DWORD PTR [eax]
c0019075:	83 c0 0c             	add    eax,0xc
c0019078:	8b 00                	mov    eax,DWORD PTR [eax]
c001907a:	83 ec 0c             	sub    esp,0xc
c001907d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019081:	52                   	push   edx
c0019082:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019086:	52                   	push   edx
c0019087:	6a 00                	push   0x0
c0019089:	6a 04                	push   0x4
c001908b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019092:	ff d0                	call   eax
c0019094:	83 c4 20             	add    esp,0x20
c0019097:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001909e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00190a4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00190ab:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00190b2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00190b5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00190bc:	83 ec 0c             	sub    esp,0xc
c00190bf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190c6:	e8 4f 27 ff ff       	call   c000b81a <File::close()>
c00190cb:	83 c4 10             	add    esp,0x10
c00190ce:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00190d5:	ba 00 00 00 00       	mov    edx,0x0
c00190da:	81 c4 3c 04 00 00    	add    esp,0x43c
c00190e0:	5b                   	pop    ebx
c00190e1:	5e                   	pop    esi
c00190e2:	5f                   	pop    edi
c00190e3:	5d                   	pop    ebp
c00190e4:	c3                   	ret    
c00190e5:	90                   	nop
c00190e6:	66 90                	xchg   ax,ax

c00190e8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00190e8:	57                   	push   edi
c00190e9:	56                   	push   esi
c00190ea:	53                   	push   ebx
c00190eb:	81 ec 50 02 00 00    	sub    esp,0x250
c00190f1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00190f9:	74 0d                	je     c0019108 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00190fb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019103:	75 0f                	jne    c0019114 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019105:	8d 76 00             	lea    esi,[esi+0x0]
c0019108:	b8 04 00 00 00       	mov    eax,0x4
c001910d:	e9 3a 01 00 00       	jmp    c001924c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019112:	66 90                	xchg   ax,ax
c0019114:	83 ec 08             	sub    esp,0x8
c0019117:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001911e:	50                   	push   eax
c001911f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019126:	e8 f1 b5 fe ff       	call   c000471c <f_readdir>
c001912b:	83 c4 10             	add    esp,0x10
c001912e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019135:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001913c:	83 ec 0c             	sub    esp,0xc
c001913f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019146:	83 c0 16             	add    eax,0x16
c0019149:	50                   	push   eax
c001914a:	e8 31 74 fe ff       	call   c0000580 <strlen>
c001914f:	83 c4 10             	add    esp,0x10
c0019152:	ba 00 00 00 00       	mov    edx,0x0
c0019157:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001915b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001915f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019166:	0f b6 c0             	movzx  eax,al
c0019169:	83 e0 10             	and    eax,0x10
c001916c:	74 0a                	je     c0019178 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001916e:	b8 02 00 00 00       	mov    eax,0x2
c0019173:	eb 0b                	jmp    c0019180 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019175:	8d 76 00             	lea    esi,[esi+0x0]
c0019178:	b8 01 00 00 00       	mov    eax,0x1
c001917d:	8d 76 00             	lea    esi,[esi+0x0]
c0019180:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019184:	83 ec 08             	sub    esp,0x8
c0019187:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001918e:	83 c0 16             	add    eax,0x16
c0019191:	50                   	push   eax
c0019192:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019196:	83 c0 10             	add    eax,0x10
c0019199:	50                   	push   eax
c001919a:	e8 b1 74 fe ff       	call   c0000650 <strcpy>
c001919f:	83 c4 10             	add    esp,0x10
c00191a2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00191a9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00191b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191b4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00191bb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00191c2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00191c9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00191d0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00191d7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00191de:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00191e5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00191ec:	89 c6                	mov    esi,eax
c00191ee:	89 d7                	mov    edi,edx
c00191f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00191f2:	89 c8                	mov    eax,ecx
c00191f4:	89 fa                	mov    edx,edi
c00191f6:	89 f3                	mov    ebx,esi
c00191f8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00191ff:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019206:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001920d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019214:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001921a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019221:	0f be c0             	movsx  eax,al
c0019224:	85 c0                	test   eax,eax
c0019226:	75 08                	jne    c0019230 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019228:	b8 07 00 00 00       	mov    eax,0x7
c001922d:	eb 1d                	jmp    c001924c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001922f:	90                   	nop
c0019230:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019237:	85 c0                	test   eax,eax
c0019239:	75 09                	jne    c0019244 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001923b:	b8 00 00 00 00       	mov    eax,0x0
c0019240:	eb 0a                	jmp    c001924c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019242:	66 90                	xchg   ax,ax
c0019244:	b8 01 00 00 00       	mov    eax,0x1
c0019249:	8d 76 00             	lea    esi,[esi+0x0]
c001924c:	81 c4 50 02 00 00    	add    esp,0x250
c0019252:	5b                   	pop    ebx
c0019253:	5e                   	pop    esi
c0019254:	5f                   	pop    edi
c0019255:	c3                   	ret    
c0019256:	66 90                	xchg   ax,ax

c0019258 <FAT::read(void*, unsigned long, void*, int*)>:
c0019258:	83 ec 1c             	sub    esp,0x1c
c001925b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019260:	74 0a                	je     c001926c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019262:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019267:	75 0b                	jne    c0019274 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019269:	8d 76 00             	lea    esi,[esi+0x0]
c001926c:	b8 04 00 00 00       	mov    eax,0x4
c0019271:	eb 41                	jmp    c00192b4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019273:	90                   	nop
c0019274:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019278:	50                   	push   eax
c0019279:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001927d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019285:	e8 d9 ac fe ff       	call   c0003f63 <f_read>
c001928a:	83 c4 10             	add    esp,0x10
c001928d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019291:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019295:	89 c2                	mov    edx,eax
c0019297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001929b:	89 10                	mov    DWORD PTR [eax],edx
c001929d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192a1:	85 c0                	test   eax,eax
c00192a3:	75 07                	jne    c00192ac <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00192a5:	b8 00 00 00 00       	mov    eax,0x0
c00192aa:	eb 08                	jmp    c00192b4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00192ac:	b8 01 00 00 00       	mov    eax,0x1
c00192b1:	8d 76 00             	lea    esi,[esi+0x0]
c00192b4:	83 c4 1c             	add    esp,0x1c
c00192b7:	c3                   	ret    

c00192b8 <FAT::write(void*, unsigned long, void*, int*)>:
c00192b8:	83 ec 1c             	sub    esp,0x1c
c00192bb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192c0:	74 0a                	je     c00192cc <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00192c2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00192c7:	75 0b                	jne    c00192d4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00192c9:	8d 76 00             	lea    esi,[esi+0x0]
c00192cc:	b8 04 00 00 00       	mov    eax,0x4
c00192d1:	eb 41                	jmp    c0019314 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00192d3:	90                   	nop
c00192d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192d8:	50                   	push   eax
c00192d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00192e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192e5:	e8 5a ae fe ff       	call   c0004144 <f_write>
c00192ea:	83 c4 10             	add    esp,0x10
c00192ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192f5:	89 c2                	mov    edx,eax
c00192f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00192fb:	89 10                	mov    DWORD PTR [eax],edx
c00192fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019301:	85 c0                	test   eax,eax
c0019303:	75 07                	jne    c001930c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019305:	b8 00 00 00 00       	mov    eax,0x0
c001930a:	eb 08                	jmp    c0019314 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001930c:	b8 01 00 00 00       	mov    eax,0x1
c0019311:	8d 76 00             	lea    esi,[esi+0x0]
c0019314:	83 c4 1c             	add    esp,0x1c
c0019317:	c3                   	ret    

c0019318 <FAT::close(void*)>:
c0019318:	83 ec 1c             	sub    esp,0x1c
c001931b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019320:	75 0a                	jne    c001932c <FAT::close(void*)+0x14>
c0019322:	b8 04 00 00 00       	mov    eax,0x4
c0019327:	eb 3f                	jmp    c0019368 <FAT::close(void*)+0x50>
c0019329:	8d 76 00             	lea    esi,[esi+0x0]
c001932c:	83 ec 0c             	sub    esp,0xc
c001932f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019333:	e8 18 b1 fe ff       	call   c0004450 <f_close>
c0019338:	83 c4 10             	add    esp,0x10
c001933b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001933f:	83 ec 0c             	sub    esp,0xc
c0019342:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019346:	e8 98 e7 fe ff       	call   c0007ae3 <free>
c001934b:	83 c4 10             	add    esp,0x10
c001934e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019352:	85 c0                	test   eax,eax
c0019354:	75 0a                	jne    c0019360 <FAT::close(void*)+0x48>
c0019356:	b8 00 00 00 00       	mov    eax,0x0
c001935b:	eb 0b                	jmp    c0019368 <FAT::close(void*)+0x50>
c001935d:	8d 76 00             	lea    esi,[esi+0x0]
c0019360:	b8 01 00 00 00       	mov    eax,0x1
c0019365:	8d 76 00             	lea    esi,[esi+0x0]
c0019368:	83 c4 1c             	add    esp,0x1c
c001936b:	c3                   	ret    

c001936c <FAT::closeDir(void*)>:
c001936c:	83 ec 1c             	sub    esp,0x1c
c001936f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019374:	75 0a                	jne    c0019380 <FAT::closeDir(void*)+0x14>
c0019376:	b8 04 00 00 00       	mov    eax,0x4
c001937b:	eb 3f                	jmp    c00193bc <FAT::closeDir(void*)+0x50>
c001937d:	8d 76 00             	lea    esi,[esi+0x0]
c0019380:	83 ec 0c             	sub    esp,0xc
c0019383:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019387:	e8 6e b3 fe ff       	call   c00046fa <f_closedir>
c001938c:	83 c4 10             	add    esp,0x10
c001938f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019393:	83 ec 0c             	sub    esp,0xc
c0019396:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001939a:	e8 44 e7 fe ff       	call   c0007ae3 <free>
c001939f:	83 c4 10             	add    esp,0x10
c00193a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193a6:	85 c0                	test   eax,eax
c00193a8:	75 0a                	jne    c00193b4 <FAT::closeDir(void*)+0x48>
c00193aa:	b8 00 00 00 00       	mov    eax,0x0
c00193af:	eb 0b                	jmp    c00193bc <FAT::closeDir(void*)+0x50>
c00193b1:	8d 76 00             	lea    esi,[esi+0x0]
c00193b4:	b8 01 00 00 00       	mov    eax,0x1
c00193b9:	8d 76 00             	lea    esi,[esi+0x0]
c00193bc:	83 c4 1c             	add    esp,0x1c
c00193bf:	c3                   	ret    

c00193c0 <FAT::truncate(void*, unsigned long long)>:
c00193c0:	83 ec 2c             	sub    esp,0x2c
c00193c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00193cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193d3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00193d8:	75 0a                	jne    c00193e4 <FAT::truncate(void*, unsigned long long)+0x24>
c00193da:	b8 04 00 00 00       	mov    eax,0x4
c00193df:	eb 47                	jmp    c0019428 <FAT::truncate(void*, unsigned long long)+0x68>
c00193e1:	8d 76 00             	lea    esi,[esi+0x0]
c00193e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00193e8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00193eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00193ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00193f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193fb:	83 ec 08             	sub    esp,0x8
c00193fe:	50                   	push   eax
c00193ff:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019403:	e8 77 b0 fe ff       	call   c000447f <f_lseek>
c0019408:	83 c4 10             	add    esp,0x10
c001940b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001940f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019413:	85 c0                	test   eax,eax
c0019415:	75 09                	jne    c0019420 <FAT::truncate(void*, unsigned long long)+0x60>
c0019417:	b8 00 00 00 00       	mov    eax,0x0
c001941c:	eb 0a                	jmp    c0019428 <FAT::truncate(void*, unsigned long long)+0x68>
c001941e:	66 90                	xchg   ax,ax
c0019420:	b8 01 00 00 00       	mov    eax,0x1
c0019425:	8d 76 00             	lea    esi,[esi+0x0]
c0019428:	83 c4 2c             	add    esp,0x2c
c001942b:	c3                   	ret    

c001942c <FAT::seek(void*, unsigned long long)>:
c001942c:	83 ec 2c             	sub    esp,0x2c
c001942f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019433:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019437:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001943b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001943f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019444:	75 0a                	jne    c0019450 <FAT::seek(void*, unsigned long long)+0x24>
c0019446:	b8 04 00 00 00       	mov    eax,0x4
c001944b:	eb 33                	jmp    c0019480 <FAT::seek(void*, unsigned long long)+0x54>
c001944d:	8d 76 00             	lea    esi,[esi+0x0]
c0019450:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019454:	83 ec 08             	sub    esp,0x8
c0019457:	50                   	push   eax
c0019458:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001945c:	e8 1e b0 fe ff       	call   c000447f <f_lseek>
c0019461:	83 c4 10             	add    esp,0x10
c0019464:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019468:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001946c:	85 c0                	test   eax,eax
c001946e:	75 08                	jne    c0019478 <FAT::seek(void*, unsigned long long)+0x4c>
c0019470:	b8 00 00 00 00       	mov    eax,0x0
c0019475:	eb 09                	jmp    c0019480 <FAT::seek(void*, unsigned long long)+0x54>
c0019477:	90                   	nop
c0019478:	b8 01 00 00 00       	mov    eax,0x1
c001947d:	8d 76 00             	lea    esi,[esi+0x0]
c0019480:	83 c4 2c             	add    esp,0x2c
c0019483:	c3                   	ret    

c0019484 <fatWrapperReadDisk>:
c0019484:	53                   	push   ebx
c0019485:	83 ec 18             	sub    esp,0x18
c0019488:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001948c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019490:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019495:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c001949c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00194a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194a4:	ba 00 00 00 00       	mov    edx,0x0
c00194a9:	83 ec 0c             	sub    esp,0xc
c00194ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194b0:	53                   	push   ebx
c00194b1:	52                   	push   edx
c00194b2:	50                   	push   eax
c00194b3:	51                   	push   ecx
c00194b4:	e8 41 45 ff ff       	call   c000d9fa <LogicalDisk::read(unsigned long long, int, void*)>
c00194b9:	83 c4 20             	add    esp,0x20
c00194bc:	83 c4 18             	add    esp,0x18
c00194bf:	5b                   	pop    ebx
c00194c0:	c3                   	ret    
c00194c1:	8d 76 00             	lea    esi,[esi+0x0]

c00194c4 <fatWrapperWriteDisk>:
c00194c4:	53                   	push   ebx
c00194c5:	83 ec 18             	sub    esp,0x18
c00194c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00194d5:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00194dc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00194e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194e4:	ba 00 00 00 00       	mov    edx,0x0
c00194e9:	83 ec 0c             	sub    esp,0xc
c00194ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194f0:	53                   	push   ebx
c00194f1:	52                   	push   edx
c00194f2:	50                   	push   eax
c00194f3:	51                   	push   ecx
c00194f4:	e8 6d 45 ff ff       	call   c000da66 <LogicalDisk::write(unsigned long long, int, void*)>
c00194f9:	83 c4 20             	add    esp,0x20
c00194fc:	83 c4 18             	add    esp,0x18
c00194ff:	5b                   	pop    ebx
c0019500:	c3                   	ret    
c0019501:	8d 76 00             	lea    esi,[esi+0x0]

c0019504 <fatWrapperIoctl>:
c0019504:	53                   	push   ebx
c0019505:	83 ec 28             	sub    esp,0x28
c0019508:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001950c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019510:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019514:	88 d0                	mov    al,dl
c0019516:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001951a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001951f:	83 f8 02             	cmp    eax,0x2
c0019522:	75 34                	jne    c0019558 <fatWrapperIoctl+0x54>
c0019524:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019528:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001952c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019531:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019538:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001953e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019544:	89 c2                	mov    edx,eax
c0019546:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001954a:	66 89 10             	mov    WORD PTR [eax],dx
c001954d:	b8 00 00 00 00       	mov    eax,0x0
c0019552:	e9 c5 00 00 00       	jmp    c001961c <fatWrapperIoctl+0x118>
c0019557:	90                   	nop
c0019558:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001955d:	83 f8 01             	cmp    eax,0x1
c0019560:	75 6a                	jne    c00195cc <fatWrapperIoctl+0xc8>
c0019562:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019566:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001956a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001956f:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019576:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001957c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019582:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019588:	89 c8                	mov    eax,ecx
c001958a:	89 da                	mov    edx,ebx
c001958c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019590:	c1 e0 0a             	shl    eax,0xa
c0019593:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019598:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c001959f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00195a5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00195ab:	89 cb                	mov    ebx,ecx
c00195ad:	c1 fb 1f             	sar    ebx,0x1f
c00195b0:	53                   	push   ebx
c00195b1:	51                   	push   ecx
c00195b2:	52                   	push   edx
c00195b3:	50                   	push   eax
c00195b4:	e8 b7 5b 00 00       	call   c001f170 <__udivdi3>
c00195b9:	83 c4 10             	add    esp,0x10
c00195bc:	89 c2                	mov    edx,eax
c00195be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195c2:	89 10                	mov    DWORD PTR [eax],edx
c00195c4:	b8 00 00 00 00       	mov    eax,0x0
c00195c9:	eb 51                	jmp    c001961c <fatWrapperIoctl+0x118>
c00195cb:	90                   	nop
c00195cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195d1:	85 c0                	test   eax,eax
c00195d3:	75 07                	jne    c00195dc <fatWrapperIoctl+0xd8>
c00195d5:	b8 00 00 00 00       	mov    eax,0x0
c00195da:	eb 40                	jmp    c001961c <fatWrapperIoctl+0x118>
c00195dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195e1:	83 f8 03             	cmp    eax,0x3
c00195e4:	75 1a                	jne    c0019600 <fatWrapperIoctl+0xfc>
c00195e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00195ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195f2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00195f8:	b8 00 00 00 00       	mov    eax,0x0
c00195fd:	eb 1d                	jmp    c001961c <fatWrapperIoctl+0x118>
c00195ff:	90                   	nop
c0019600:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019605:	83 f8 04             	cmp    eax,0x4
c0019608:	75 0a                	jne    c0019614 <fatWrapperIoctl+0x110>
c001960a:	b8 00 00 00 00       	mov    eax,0x0
c001960f:	eb 0b                	jmp    c001961c <fatWrapperIoctl+0x118>
c0019611:	8d 76 00             	lea    esi,[esi+0x0]
c0019614:	b8 04 00 00 00       	mov    eax,0x4
c0019619:	8d 76 00             	lea    esi,[esi+0x0]
c001961c:	83 c4 28             	add    esp,0x28
c001961f:	5b                   	pop    ebx
c0019620:	c3                   	ret    
c0019621:	90                   	nop
c0019622:	66 90                	xchg   ax,ax

c0019624 <FAT::FAT()>:
c0019624:	83 ec 1c             	sub    esp,0x1c
c0019627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001962b:	83 ec 0c             	sub    esp,0xc
c001962e:	50                   	push   eax
c001962f:	e8 46 1e ff ff       	call   c000b47a <Filesystem::Filesystem()>
c0019634:	83 c4 10             	add    esp,0x10
c0019637:	ba 2c 27 02 c0       	mov    edx,0xc002272c
c001963c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019640:	89 10                	mov    DWORD PTR [eax],edx
c0019642:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c001964c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019654:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019659:	7f 19                	jg     c0019674 <FAT::FAT()+0x50>
c001965b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001965f:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c001966a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001966f:	eb e3                	jmp    c0019654 <FAT::FAT()+0x30>
c0019671:	8d 76 00             	lea    esi,[esi+0x0]
c0019674:	90                   	nop
c0019675:	83 c4 1c             	add    esp,0x1c
c0019678:	c3                   	ret    
c0019679:	90                   	nop
c001967a:	66 90                	xchg   ax,ax

c001967c <FAT::fixFilepath(char*)>:
c001967c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019680:	8a 00                	mov    al,BYTE PTR [eax]
c0019682:	0f be c0             	movsx  eax,al
c0019685:	83 f8 40             	cmp    eax,0x40
c0019688:	7e 2e                	jle    c00196b8 <FAT::fixFilepath(char*)+0x3c>
c001968a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001968e:	8a 00                	mov    al,BYTE PTR [eax]
c0019690:	83 e8 41             	sub    eax,0x41
c0019693:	88 c2                	mov    dl,al
c0019695:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019699:	88 10                	mov    BYTE PTR [eax],dl
c001969b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001969f:	8a 00                	mov    al,BYTE PTR [eax]
c00196a1:	0f be c0             	movsx  eax,al
c00196a4:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c00196ab:	83 c0 30             	add    eax,0x30
c00196ae:	88 c2                	mov    dl,al
c00196b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196b4:	88 10                	mov    BYTE PTR [eax],dl
c00196b6:	66 90                	xchg   ax,ax
c00196b8:	90                   	nop
c00196b9:	c3                   	ret    
c00196ba:	66 90                	xchg   ax,ax

c00196bc <FAT::open(char const*, void**, FileOpenMode)>:
c00196bc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00196c2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00196ca:	74 0c                	je     c00196d8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00196cc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00196d4:	75 0e                	jne    c00196e4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00196d6:	66 90                	xchg   ax,ax
c00196d8:	b8 04 00 00 00       	mov    eax,0x4
c00196dd:	e9 46 01 00 00       	jmp    c0019828 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00196e2:	66 90                	xchg   ax,ax
c00196e4:	83 ec 08             	sub    esp,0x8
c00196e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00196ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196f2:	50                   	push   eax
c00196f3:	e8 58 6f fe ff       	call   c0000650 <strcpy>
c00196f8:	83 c4 10             	add    esp,0x10
c00196fb:	83 ec 08             	sub    esp,0x8
c00196fe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019702:	50                   	push   eax
c0019703:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001970a:	e8 6d ff ff ff       	call   c001967c <FAT::fixFilepath(char*)>
c001970f:	83 c4 10             	add    esp,0x10
c0019712:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001971a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019721:	83 e0 01             	and    eax,0x1
c0019724:	74 12                	je     c0019738 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019726:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001972d:	83 c8 01             	or     eax,0x1
c0019730:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019737:	90                   	nop
c0019738:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001973f:	83 e0 04             	and    eax,0x4
c0019742:	74 24                	je     c0019768 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019744:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001974b:	83 c8 30             	or     eax,0x30
c001974e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019755:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001975c:	83 c8 02             	or     eax,0x2
c001975f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019766:	66 90                	xchg   ax,ax
c0019768:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001976f:	83 e0 02             	and    eax,0x2
c0019772:	74 14                	je     c0019788 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019774:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001977b:	83 c8 02             	or     eax,0x2
c001977e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019785:	8d 76 00             	lea    esi,[esi+0x0]
c0019788:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001978f:	83 e0 08             	and    eax,0x8
c0019792:	74 14                	je     c00197a8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019794:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001979b:	83 c8 04             	or     eax,0x4
c001979e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197a5:	8d 76 00             	lea    esi,[esi+0x0]
c00197a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197af:	83 e0 10             	and    eax,0x10
c00197b2:	74 14                	je     c00197c8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c00197b4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197bb:	83 c8 08             	or     eax,0x8
c00197be:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197c5:	8d 76 00             	lea    esi,[esi+0x0]
c00197c8:	83 ec 0c             	sub    esp,0xc
c00197cb:	68 28 02 00 00       	push   0x228
c00197d0:	e8 fe e2 fe ff       	call   c0007ad3 <malloc>
c00197d5:	83 c4 10             	add    esp,0x10
c00197d8:	89 c2                	mov    edx,eax
c00197da:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197e1:	89 10                	mov    DWORD PTR [eax],edx
c00197e3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00197eb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00197f4:	83 ec 04             	sub    esp,0x4
c00197f7:	52                   	push   edx
c00197f8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00197fc:	52                   	push   edx
c00197fd:	50                   	push   eax
c00197fe:	e8 9d a4 fe ff       	call   c0003ca0 <f_open>
c0019803:	83 c4 10             	add    esp,0x10
c0019806:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001980d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019815:	74 09                	je     c0019820 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019817:	b8 01 00 00 00       	mov    eax,0x1
c001981c:	eb 0a                	jmp    c0019828 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001981e:	66 90                	xchg   ax,ax
c0019820:	b8 00 00 00 00       	mov    eax,0x0
c0019825:	8d 76 00             	lea    esi,[esi+0x0]
c0019828:	81 c4 1c 01 00 00    	add    esp,0x11c
c001982e:	c3                   	ret    
c001982f:	90                   	nop

c0019830 <FAT::openDir(char const*, void**)>:
c0019830:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019836:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001983e:	74 0c                	je     c001984c <FAT::openDir(char const*, void**)+0x1c>
c0019840:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019848:	75 0e                	jne    c0019858 <FAT::openDir(char const*, void**)+0x28>
c001984a:	66 90                	xchg   ax,ax
c001984c:	b8 04 00 00 00       	mov    eax,0x4
c0019851:	e9 82 00 00 00       	jmp    c00198d8 <FAT::openDir(char const*, void**)+0xa8>
c0019856:	66 90                	xchg   ax,ax
c0019858:	83 ec 08             	sub    esp,0x8
c001985b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019862:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019866:	50                   	push   eax
c0019867:	e8 e4 6d fe ff       	call   c0000650 <strcpy>
c001986c:	83 c4 10             	add    esp,0x10
c001986f:	83 ec 08             	sub    esp,0x8
c0019872:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019876:	50                   	push   eax
c0019877:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001987e:	e8 f9 fd ff ff       	call   c001967c <FAT::fixFilepath(char*)>
c0019883:	83 c4 10             	add    esp,0x10
c0019886:	83 ec 0c             	sub    esp,0xc
c0019889:	6a 30                	push   0x30
c001988b:	e8 43 e2 fe ff       	call   c0007ad3 <malloc>
c0019890:	83 c4 10             	add    esp,0x10
c0019893:	89 c2                	mov    edx,eax
c0019895:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001989c:	89 10                	mov    DWORD PTR [eax],edx
c001989e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00198a7:	83 ec 08             	sub    esp,0x8
c00198aa:	8d 54 24 14          	lea    edx,[esp+0x14]
c00198ae:	52                   	push   edx
c00198af:	50                   	push   eax
c00198b0:	e8 7a ad fe ff       	call   c000462f <f_opendir>
c00198b5:	83 c4 10             	add    esp,0x10
c00198b8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00198bf:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00198c7:	74 07                	je     c00198d0 <FAT::openDir(char const*, void**)+0xa0>
c00198c9:	b8 01 00 00 00       	mov    eax,0x1
c00198ce:	eb 08                	jmp    c00198d8 <FAT::openDir(char const*, void**)+0xa8>
c00198d0:	b8 00 00 00 00       	mov    eax,0x0
c00198d5:	8d 76 00             	lea    esi,[esi+0x0]
c00198d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198de:	c3                   	ret    
c00198df:	90                   	nop

c00198e0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00198e0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00198e6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00198ee:	75 0c                	jne    c00198fc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00198f0:	b8 04 00 00 00       	mov    eax,0x4
c00198f5:	e9 d6 00 00 00       	jmp    c00199d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00198fa:	66 90                	xchg   ax,ax
c00198fc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019904:	75 0a                	jne    c0019910 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019906:	b8 04 00 00 00       	mov    eax,0x4
c001990b:	e9 c0 00 00 00       	jmp    c00199d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019910:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019918:	75 0a                	jne    c0019924 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001991a:	b8 04 00 00 00       	mov    eax,0x4
c001991f:	e9 ac 00 00 00       	jmp    c00199d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019924:	83 ec 08             	sub    esp,0x8
c0019927:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001992e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019935:	50                   	push   eax
c0019936:	e8 15 6d fe ff       	call   c0000650 <strcpy>
c001993b:	83 c4 10             	add    esp,0x10
c001993e:	83 ec 08             	sub    esp,0x8
c0019941:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019948:	50                   	push   eax
c0019949:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019950:	e8 27 fd ff ff       	call   c001967c <FAT::fixFilepath(char*)>
c0019955:	83 c4 10             	add    esp,0x10
c0019958:	83 ec 08             	sub    esp,0x8
c001995b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001995f:	50                   	push   eax
c0019960:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019967:	50                   	push   eax
c0019968:	e8 41 ae fe ff       	call   c00047ae <f_stat>
c001996d:	83 c4 10             	add    esp,0x10
c0019970:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019977:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001997e:	85 c0                	test   eax,eax
c0019980:	74 0a                	je     c001998c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019982:	83 f8 04             	cmp    eax,0x4
c0019985:	74 39                	je     c00199c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019987:	eb 3f                	jmp    c00199c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019989:	8d 76 00             	lea    esi,[esi+0x0]
c001998c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019990:	0f b6 c0             	movzx  eax,al
c0019993:	83 e0 10             	and    eax,0x10
c0019996:	0f 95 c2             	setne  dl
c0019999:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00199a0:	88 10                	mov    BYTE PTR [eax],dl
c00199a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199a6:	ba 00 00 00 00       	mov    edx,0x0
c00199ab:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00199b2:	89 01                	mov    DWORD PTR [ecx],eax
c00199b4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00199b7:	b8 00 00 00 00       	mov    eax,0x0
c00199bc:	eb 12                	jmp    c00199d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199be:	66 90                	xchg   ax,ax
c00199c0:	b8 02 00 00 00       	mov    eax,0x2
c00199c5:	eb 09                	jmp    c00199d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199c7:	90                   	nop
c00199c8:	b8 01 00 00 00       	mov    eax,0x1
c00199cd:	8d 76 00             	lea    esi,[esi+0x0]
c00199d0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00199d6:	c3                   	ret    
c00199d7:	90                   	nop

c00199d8 <FAT::unlink(char const*)>:
c00199d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199e6:	75 08                	jne    c00199f0 <FAT::unlink(char const*)+0x18>
c00199e8:	b8 04 00 00 00       	mov    eax,0x4
c00199ed:	eb 61                	jmp    c0019a50 <FAT::unlink(char const*)+0x78>
c00199ef:	90                   	nop
c00199f0:	83 ec 08             	sub    esp,0x8
c00199f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199fe:	50                   	push   eax
c00199ff:	e8 4c 6c fe ff       	call   c0000650 <strcpy>
c0019a04:	83 c4 10             	add    esp,0x10
c0019a07:	83 ec 08             	sub    esp,0x8
c0019a0a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a0e:	50                   	push   eax
c0019a0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a16:	e8 61 fc ff ff       	call   c001967c <FAT::fixFilepath(char*)>
c0019a1b:	83 c4 10             	add    esp,0x10
c0019a1e:	83 ec 0c             	sub    esp,0xc
c0019a21:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a25:	50                   	push   eax
c0019a26:	e8 f5 af fe ff       	call   c0004a20 <f_unlink>
c0019a2b:	83 c4 10             	add    esp,0x10
c0019a2e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a35:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019a3c:	85 c0                	test   eax,eax
c0019a3e:	75 08                	jne    c0019a48 <FAT::unlink(char const*)+0x70>
c0019a40:	b8 00 00 00 00       	mov    eax,0x0
c0019a45:	eb 09                	jmp    c0019a50 <FAT::unlink(char const*)+0x78>
c0019a47:	90                   	nop
c0019a48:	b8 01 00 00 00       	mov    eax,0x1
c0019a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a50:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a56:	c3                   	ret    
c0019a57:	90                   	nop

c0019a58 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019a58:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019a5e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019a65:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019a6c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a70:	88 d0                	mov    al,dl
c0019a72:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a76:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019a7e:	75 0c                	jne    c0019a8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019a80:	b8 04 00 00 00       	mov    eax,0x4
c0019a85:	e9 7e 01 00 00       	jmp    c0019c08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019a8a:	66 90                	xchg   ax,ax
c0019a8c:	83 ec 08             	sub    esp,0x8
c0019a8f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019a9a:	50                   	push   eax
c0019a9b:	e8 b0 6b fe ff       	call   c0000650 <strcpy>
c0019aa0:	83 c4 10             	add    esp,0x10
c0019aa3:	83 ec 08             	sub    esp,0x8
c0019aa6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019aaa:	50                   	push   eax
c0019aab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019ab2:	e8 c5 fb ff ff       	call   c001967c <FAT::fixFilepath(char*)>
c0019ab7:	83 c4 10             	add    esp,0x10
c0019aba:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019ac2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019aca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019acf:	83 e0 01             	and    eax,0x1
c0019ad2:	74 14                	je     c0019ae8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019ad4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019adb:	83 c8 01             	or     eax,0x1
c0019ade:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ae8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019aed:	83 e0 02             	and    eax,0x2
c0019af0:	74 12                	je     c0019b04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019af2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019af9:	83 c8 20             	or     eax,0x20
c0019afc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b03:	90                   	nop
c0019b04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b09:	83 e0 04             	and    eax,0x4
c0019b0c:	74 12                	je     c0019b20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019b0e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b15:	83 c8 04             	or     eax,0x4
c0019b18:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b1f:	90                   	nop
c0019b20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b25:	83 e0 08             	and    eax,0x8
c0019b28:	74 12                	je     c0019b3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019b2a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b31:	83 c8 02             	or     eax,0x2
c0019b34:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b3b:	90                   	nop
c0019b3c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b41:	83 e0 01             	and    eax,0x1
c0019b44:	74 12                	je     c0019b58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019b46:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b4d:	83 c8 01             	or     eax,0x1
c0019b50:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b57:	90                   	nop
c0019b58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b5d:	83 e0 02             	and    eax,0x2
c0019b60:	74 12                	je     c0019b74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019b62:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b69:	83 c8 20             	or     eax,0x20
c0019b6c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b73:	90                   	nop
c0019b74:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b79:	83 e0 04             	and    eax,0x4
c0019b7c:	74 12                	je     c0019b90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019b7e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b85:	83 c8 04             	or     eax,0x4
c0019b88:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b8f:	90                   	nop
c0019b90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b95:	83 e0 08             	and    eax,0x8
c0019b98:	74 12                	je     c0019bac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019b9a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019ba1:	83 c8 02             	or     eax,0x2
c0019ba4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bab:	90                   	nop
c0019bac:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019bb3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019bba:	09 d0                	or     eax,edx
c0019bbc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bc3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019bcb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019bd3:	83 ec 04             	sub    esp,0x4
c0019bd6:	52                   	push   edx
c0019bd7:	50                   	push   eax
c0019bd8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019bdc:	50                   	push   eax
c0019bdd:	e8 b1 b2 fe ff       	call   c0004e93 <f_chmod>
c0019be2:	83 c4 10             	add    esp,0x10
c0019be5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019bec:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019bf3:	85 c0                	test   eax,eax
c0019bf5:	75 09                	jne    c0019c00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019bf7:	b8 00 00 00 00       	mov    eax,0x0
c0019bfc:	eb 0a                	jmp    c0019c08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019bfe:	66 90                	xchg   ax,ax
c0019c00:	b8 01 00 00 00       	mov    eax,0x1
c0019c05:	8d 76 00             	lea    esi,[esi+0x0]
c0019c08:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c0e:	c3                   	ret    
c0019c0f:	90                   	nop

c0019c10 <FAT::rename(char const*, char const*)>:
c0019c10:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019c16:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019c1e:	74 0c                	je     c0019c2c <FAT::rename(char const*, char const*)+0x1c>
c0019c20:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019c28:	75 0e                	jne    c0019c38 <FAT::rename(char const*, char const*)+0x28>
c0019c2a:	66 90                	xchg   ax,ax
c0019c2c:	b8 04 00 00 00       	mov    eax,0x4
c0019c31:	e9 9e 00 00 00       	jmp    c0019cd4 <FAT::rename(char const*, char const*)+0xc4>
c0019c36:	66 90                	xchg   ax,ax
c0019c38:	83 ec 08             	sub    esp,0x8
c0019c3b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c42:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c49:	50                   	push   eax
c0019c4a:	e8 01 6a fe ff       	call   c0000650 <strcpy>
c0019c4f:	83 c4 10             	add    esp,0x10
c0019c52:	83 ec 08             	sub    esp,0x8
c0019c55:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019c5c:	50                   	push   eax
c0019c5d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c64:	e8 13 fa ff ff       	call   c001967c <FAT::fixFilepath(char*)>
c0019c69:	83 c4 10             	add    esp,0x10
c0019c6c:	83 ec 08             	sub    esp,0x8
c0019c6f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019c76:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c7a:	50                   	push   eax
c0019c7b:	e8 d0 69 fe ff       	call   c0000650 <strcpy>
c0019c80:	83 c4 10             	add    esp,0x10
c0019c83:	83 ec 08             	sub    esp,0x8
c0019c86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c8a:	50                   	push   eax
c0019c8b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c92:	e8 e5 f9 ff ff       	call   c001967c <FAT::fixFilepath(char*)>
c0019c97:	83 c4 10             	add    esp,0x10
c0019c9a:	83 ec 08             	sub    esp,0x8
c0019c9d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ca1:	50                   	push   eax
c0019ca2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019ca9:	50                   	push   eax
c0019caa:	e8 2c b0 fe ff       	call   c0004cdb <f_rename>
c0019caf:	83 c4 10             	add    esp,0x10
c0019cb2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019cb9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019cc0:	85 c0                	test   eax,eax
c0019cc2:	75 08                	jne    c0019ccc <FAT::rename(char const*, char const*)+0xbc>
c0019cc4:	b8 00 00 00 00       	mov    eax,0x0
c0019cc9:	eb 09                	jmp    c0019cd4 <FAT::rename(char const*, char const*)+0xc4>
c0019ccb:	90                   	nop
c0019ccc:	b8 01 00 00 00       	mov    eax,0x1
c0019cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd4:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019cda:	c3                   	ret    
c0019cdb:	90                   	nop

c0019cdc <FAT::mkdir(char const*)>:
c0019cdc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ce2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019cea:	75 08                	jne    c0019cf4 <FAT::mkdir(char const*)+0x18>
c0019cec:	b8 04 00 00 00       	mov    eax,0x4
c0019cf1:	eb 61                	jmp    c0019d54 <FAT::mkdir(char const*)+0x78>
c0019cf3:	90                   	nop
c0019cf4:	83 ec 08             	sub    esp,0x8
c0019cf7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cfe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d02:	50                   	push   eax
c0019d03:	e8 48 69 fe ff       	call   c0000650 <strcpy>
c0019d08:	83 c4 10             	add    esp,0x10
c0019d0b:	83 ec 08             	sub    esp,0x8
c0019d0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d12:	50                   	push   eax
c0019d13:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d1a:	e8 5d f9 ff ff       	call   c001967c <FAT::fixFilepath(char*)>
c0019d1f:	83 c4 10             	add    esp,0x10
c0019d22:	83 ec 0c             	sub    esp,0xc
c0019d25:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d29:	50                   	push   eax
c0019d2a:	e8 11 ae fe ff       	call   c0004b40 <f_mkdir>
c0019d2f:	83 c4 10             	add    esp,0x10
c0019d32:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019d39:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019d40:	85 c0                	test   eax,eax
c0019d42:	75 08                	jne    c0019d4c <FAT::mkdir(char const*)+0x70>
c0019d44:	b8 00 00 00 00       	mov    eax,0x0
c0019d49:	eb 09                	jmp    c0019d54 <FAT::mkdir(char const*)+0x78>
c0019d4b:	90                   	nop
c0019d4c:	b8 01 00 00 00       	mov    eax,0x1
c0019d51:	8d 76 00             	lea    esi,[esi+0x0]
c0019d54:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d5a:	c3                   	ret    
c0019d5b:	90                   	nop

c0019d5c <FAT::exists(char const*)>:
c0019d5c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019d62:	83 ec 08             	sub    esp,0x8
c0019d65:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d6c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d70:	50                   	push   eax
c0019d71:	e8 da 68 fe ff       	call   c0000650 <strcpy>
c0019d76:	83 c4 10             	add    esp,0x10
c0019d79:	83 ec 08             	sub    esp,0x8
c0019d7c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019d80:	50                   	push   eax
c0019d81:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d88:	e8 ef f8 ff ff       	call   c001967c <FAT::fixFilepath(char*)>
c0019d8d:	83 c4 10             	add    esp,0x10
c0019d90:	83 ec 08             	sub    esp,0x8
c0019d93:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019d9a:	50                   	push   eax
c0019d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d9f:	50                   	push   eax
c0019da0:	e8 09 aa fe ff       	call   c00047ae <f_stat>
c0019da5:	83 c4 10             	add    esp,0x10
c0019da8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019daf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019db6:	85 c0                	test   eax,eax
c0019db8:	75 06                	jne    c0019dc0 <FAT::exists(char const*)+0x64>
c0019dba:	b0 01                	mov    al,0x1
c0019dbc:	eb 06                	jmp    c0019dc4 <FAT::exists(char const*)+0x68>
c0019dbe:	66 90                	xchg   ax,ax
c0019dc0:	b0 00                	mov    al,0x0
c0019dc2:	66 90                	xchg   ax,ax
c0019dc4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019dca:	c3                   	ret    
c0019dcb:	90                   	nop

c0019dcc <isoReadDiscSectorHelper>:
c0019dcc:	83 ec 2c             	sub    esp,0x2c
c0019dcf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019dd3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019dd7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019ddc:	83 e8 41             	sub    eax,0x41
c0019ddf:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019de6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019dea:	ba 00 00 00 00       	mov    edx,0x0
c0019def:	83 ec 0c             	sub    esp,0xc
c0019df2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019df6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019dfa:	52                   	push   edx
c0019dfb:	50                   	push   eax
c0019dfc:	51                   	push   ecx
c0019dfd:	e8 f8 3b ff ff       	call   c000d9fa <LogicalDisk::read(unsigned long long, int, void*)>
c0019e02:	83 c4 20             	add    esp,0x20
c0019e05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e09:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019e0e:	74 0c                	je     c0019e1c <isoReadDiscSectorHelper+0x50>
c0019e10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e14:	c1 e0 0b             	shl    eax,0xb
c0019e17:	eb 0b                	jmp    c0019e24 <isoReadDiscSectorHelper+0x58>
c0019e19:	8d 76 00             	lea    esi,[esi+0x0]
c0019e1c:	b8 00 00 00 00       	mov    eax,0x0
c0019e21:	8d 76 00             	lea    esi,[esi+0x0]
c0019e24:	83 c4 2c             	add    esp,0x2c
c0019e27:	c3                   	ret    

c0019e28 <iso_kprintf>:
c0019e28:	83 ec 0c             	sub    esp,0xc
c0019e2b:	83 ec 08             	sub    esp,0x8
c0019e2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e32:	68 da 24 02 c0       	push   0xc00224da
c0019e37:	e8 ce 0a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019e3c:	83 c4 10             	add    esp,0x10
c0019e3f:	90                   	nop
c0019e40:	83 c4 0c             	add    esp,0xc
c0019e43:	c3                   	ret    

c0019e44 <iso_kprintfd>:
c0019e44:	83 ec 0c             	sub    esp,0xc
c0019e47:	83 ec 08             	sub    esp,0x8
c0019e4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e4e:	68 3a 0d 02 c0       	push   0xc0020d3a
c0019e53:	e8 b2 0a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019e58:	83 c4 10             	add    esp,0x10
c0019e5b:	90                   	nop
c0019e5c:	83 c4 0c             	add    esp,0xc
c0019e5f:	c3                   	ret    

c0019e60 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019e60:	b8 08 00 00 00       	mov    eax,0x8
c0019e65:	c3                   	ret    

c0019e66 <ISO9660::truncate(void*, unsigned long long)>:
c0019e66:	b8 01 00 00 00       	mov    eax,0x1
c0019e6b:	c3                   	ret    

c0019e6c <ISO9660::getName()>:
c0019e6c:	b8 90 27 02 c0       	mov    eax,0xc0022790
c0019e71:	c3                   	ret    

c0019e72 <ISO9660::closeDir(void*)>:
c0019e72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e76:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e78:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019e7b:	90                   	nop

c0019e7c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019e7c:	b8 01 00 00 00       	mov    eax,0x1
c0019e81:	c3                   	ret    

c0019e82 <ISO9660::unlink(char const*)>:
c0019e82:	b8 01 00 00 00       	mov    eax,0x1
c0019e87:	c3                   	ret    

c0019e88 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019e88:	b8 03 00 00 00       	mov    eax,0x3
c0019e8d:	c3                   	ret    

c0019e8e <ISO9660::rename(char const*, char const*)>:
c0019e8e:	b8 01 00 00 00       	mov    eax,0x1
c0019e93:	c3                   	ret    

c0019e94 <ISO9660::mkdir(char const*)>:
c0019e94:	b8 01 00 00 00       	mov    eax,0x1
c0019e99:	c3                   	ret    

c0019e9a <ISO9660::~ISO9660()>:
c0019e9a:	83 ec 0c             	sub    esp,0xc
c0019e9d:	ba d0 28 02 c0       	mov    edx,0xc00228d0
c0019ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ea6:	89 10                	mov    DWORD PTR [eax],edx
c0019ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eac:	83 ec 0c             	sub    esp,0xc
c0019eaf:	50                   	push   eax
c0019eb0:	e8 e9 15 ff ff       	call   c000b49e <Filesystem::~Filesystem()>
c0019eb5:	83 c4 10             	add    esp,0x10
c0019eb8:	90                   	nop
c0019eb9:	83 c4 0c             	add    esp,0xc
c0019ebc:	c3                   	ret    
c0019ebd:	90                   	nop

c0019ebe <ISO9660::~ISO9660()>:
c0019ebe:	83 ec 0c             	sub    esp,0xc
c0019ec1:	83 ec 0c             	sub    esp,0xc
c0019ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ec8:	e8 cd ff ff ff       	call   c0019e9a <ISO9660::~ISO9660()>
c0019ecd:	83 c4 10             	add    esp,0x10
c0019ed0:	83 ec 08             	sub    esp,0x8
c0019ed3:	6a 08                	push   0x8
c0019ed5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ed9:	e8 2e 09 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0019ede:	83 c4 10             	add    esp,0x10
c0019ee1:	83 c4 0c             	add    esp,0xc
c0019ee4:	c3                   	ret    
c0019ee5:	90                   	nop

c0019ee6 <ISO9660::exists(char const*)>:
c0019ee6:	83 ec 18             	sub    esp,0x18
c0019ee9:	68 ab 27 02 c0       	push   0xc00227ab
c0019eee:	e8 ba 72 ff ff       	call   c00111ad <KePanic(char const*)>
c0019ef3:	31 c0                	xor    eax,eax
c0019ef5:	83 c4 1c             	add    esp,0x1c
c0019ef8:	c3                   	ret    
c0019ef9:	90                   	nop

c0019efa <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019efa:	56                   	push   esi
c0019efb:	53                   	push   ebx
c0019efc:	53                   	push   ebx
c0019efd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f01:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f05:	85 db                	test   ebx,ebx
c0019f07:	0f 84 ca 00 00 00    	je     c0019fd7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f0d:	85 f6                	test   esi,esi
c0019f0f:	0f 84 c2 00 00 00    	je     c0019fd7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f15:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019f1a:	b8 03 00 00 00       	mov    eax,0x3
c0019f1f:	0f 85 b7 00 00 00    	jne    c0019fdc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f25:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019f27:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c0019f2d:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c0019f34:	74 1b                	je     c0019f51 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019f36:	85 c0                	test   eax,eax
c0019f38:	74 10                	je     c0019f4a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019f3a:	83 ec 0c             	sub    esp,0xc
c0019f3d:	68 c9 27 02 c0       	push   0xc00227c9
c0019f42:	e8 66 72 ff ff       	call   c00111ad <KePanic(char const*)>
c0019f47:	83 c4 10             	add    esp,0x10
c0019f4a:	8a 03                	mov    al,BYTE PTR [ebx]
c0019f4c:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c0019f51:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f54:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c0019f5b:	85 c0                	test   eax,eax
c0019f5d:	74 09                	je     c0019f68 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019f5f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019f66:	74 48                	je     c0019fb0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019f68:	83 ec 0c             	sub    esp,0xc
c0019f6b:	68 d9 27 02 c0       	push   0xc00227d9
c0019f70:	e8 95 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f75:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f78:	83 c4 10             	add    esp,0x10
c0019f7b:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c0019f82:	85 c0                	test   eax,eax
c0019f84:	74 17                	je     c0019f9d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019f86:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019f8d:	83 ec 0c             	sub    esp,0xc
c0019f90:	68 f9 27 02 c0       	push   0xc00227f9
c0019f95:	e8 70 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f9a:	83 c4 10             	add    esp,0x10
c0019f9d:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c0019fa4:	83 ec 0c             	sub    esp,0xc
c0019fa7:	50                   	push   eax
c0019fa8:	e8 ba ca fe ff       	call   c0006a67 <init_percd>
c0019fad:	83 c4 10             	add    esp,0x10
c0019fb0:	51                   	push   ecx
c0019fb1:	83 c3 03             	add    ebx,0x3
c0019fb4:	51                   	push   ecx
c0019fb5:	6a 00                	push   0x0
c0019fb7:	53                   	push   ebx
c0019fb8:	e8 6d c5 fe ff       	call   c000652a <iso_open>
c0019fbd:	83 c4 10             	add    esp,0x10
c0019fc0:	89 c2                	mov    edx,eax
c0019fc2:	b8 01 00 00 00       	mov    eax,0x1
c0019fc7:	83 fa ff             	cmp    edx,0xffffffff
c0019fca:	74 10                	je     c0019fdc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019fcc:	83 c2 32             	add    edx,0x32
c0019fcf:	31 c0                	xor    eax,eax
c0019fd1:	01 d2                	add    edx,edx
c0019fd3:	89 16                	mov    DWORD PTR [esi],edx
c0019fd5:	eb 05                	jmp    c0019fdc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019fd7:	b8 04 00 00 00       	mov    eax,0x4
c0019fdc:	5a                   	pop    edx
c0019fdd:	5b                   	pop    ebx
c0019fde:	5e                   	pop    esi
c0019fdf:	c3                   	ret    

c0019fe0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019fe0:	53                   	push   ebx
c0019fe1:	83 ec 08             	sub    esp,0x8
c0019fe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019fe8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019fec:	85 c0                	test   eax,eax
c0019fee:	74 2d                	je     c001a01d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019ff0:	85 db                	test   ebx,ebx
c0019ff2:	74 29                	je     c001a01d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019ff4:	52                   	push   edx
c0019ff5:	b9 02 00 00 00       	mov    ecx,0x2
c0019ffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ffe:	99                   	cdq    
c0019fff:	f7 f9                	idiv   ecx
c001a001:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a005:	83 e8 32             	sub    eax,0x32
c001a008:	50                   	push   eax
c001a009:	e8 c4 c5 fe ff       	call   c00065d2 <iso_read>
c001a00e:	83 c4 10             	add    esp,0x10
c001a011:	89 03                	mov    DWORD PTR [ebx],eax
c001a013:	09 d0                	or     eax,edx
c001a015:	0f 94 c0             	sete   al
c001a018:	0f b6 c0             	movzx  eax,al
c001a01b:	eb 05                	jmp    c001a022 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a01d:	b8 04 00 00 00       	mov    eax,0x4
c001a022:	83 c4 08             	add    esp,0x8
c001a025:	5b                   	pop    ebx
c001a026:	c3                   	ret    
c001a027:	90                   	nop

c001a028 <ISO9660::seek(void*, unsigned long long)>:
c001a028:	57                   	push   edi
c001a029:	b8 04 00 00 00       	mov    eax,0x4
c001a02e:	56                   	push   esi
c001a02f:	51                   	push   ecx
c001a030:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a034:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a038:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a03c:	85 d2                	test   edx,edx
c001a03e:	74 26                	je     c001a066 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a040:	89 d0                	mov    eax,edx
c001a042:	b9 02 00 00 00       	mov    ecx,0x2
c001a047:	6a 00                	push   0x0
c001a049:	99                   	cdq    
c001a04a:	f7 f9                	idiv   ecx
c001a04c:	57                   	push   edi
c001a04d:	56                   	push   esi
c001a04e:	83 e8 32             	sub    eax,0x32
c001a051:	50                   	push   eax
c001a052:	e8 91 c6 fe ff       	call   c00066e8 <iso_seek>
c001a057:	83 c4 10             	add    esp,0x10
c001a05a:	31 f0                	xor    eax,esi
c001a05c:	31 fa                	xor    edx,edi
c001a05e:	09 d0                	or     eax,edx
c001a060:	0f 95 c0             	setne  al
c001a063:	0f b6 c0             	movzx  eax,al
c001a066:	5a                   	pop    edx
c001a067:	5e                   	pop    esi
c001a068:	5f                   	pop    edi
c001a069:	c3                   	ret    

c001a06a <ISO9660::tell(void*, unsigned long long*)>:
c001a06a:	53                   	push   ebx
c001a06b:	83 ec 08             	sub    esp,0x8
c001a06e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a072:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a076:	85 c0                	test   eax,eax
c001a078:	74 24                	je     c001a09e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a07a:	85 db                	test   ebx,ebx
c001a07c:	74 20                	je     c001a09e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a07e:	b9 02 00 00 00       	mov    ecx,0x2
c001a083:	99                   	cdq    
c001a084:	f7 f9                	idiv   ecx
c001a086:	83 ec 0c             	sub    esp,0xc
c001a089:	83 e8 32             	sub    eax,0x32
c001a08c:	50                   	push   eax
c001a08d:	e8 da c6 fe ff       	call   c000676c <iso_tell>
c001a092:	83 c4 10             	add    esp,0x10
c001a095:	89 03                	mov    DWORD PTR [ebx],eax
c001a097:	31 c0                	xor    eax,eax
c001a099:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a09c:	eb 05                	jmp    c001a0a3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a09e:	b8 04 00 00 00       	mov    eax,0x4
c001a0a3:	83 c4 08             	add    esp,0x8
c001a0a6:	5b                   	pop    ebx
c001a0a7:	c3                   	ret    

c001a0a8 <ISO9660::stat(void*, unsigned long long*)>:
c001a0a8:	56                   	push   esi
c001a0a9:	53                   	push   ebx
c001a0aa:	83 ec 10             	sub    esp,0x10
c001a0ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a0b1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a0b5:	68 1d 28 02 c0       	push   0xc002281d
c001a0ba:	e8 4b 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a0bf:	83 c4 10             	add    esp,0x10
c001a0c2:	85 db                	test   ebx,ebx
c001a0c4:	74 2a                	je     c001a0f0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a0c6:	85 f6                	test   esi,esi
c001a0c8:	74 26                	je     c001a0f0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a0ca:	89 d8                	mov    eax,ebx
c001a0cc:	b9 02 00 00 00       	mov    ecx,0x2
c001a0d1:	99                   	cdq    
c001a0d2:	83 ec 0c             	sub    esp,0xc
c001a0d5:	f7 f9                	idiv   ecx
c001a0d7:	83 e8 32             	sub    eax,0x32
c001a0da:	50                   	push   eax
c001a0db:	e8 bd c6 fe ff       	call   c000679d <iso_total>
c001a0e0:	83 c4 10             	add    esp,0x10
c001a0e3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a0ea:	89 06                	mov    DWORD PTR [esi],eax
c001a0ec:	31 c0                	xor    eax,eax
c001a0ee:	eb 05                	jmp    c001a0f5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a0f0:	b8 04 00 00 00       	mov    eax,0x4
c001a0f5:	5a                   	pop    edx
c001a0f6:	5b                   	pop    ebx
c001a0f7:	5e                   	pop    esi
c001a0f8:	c3                   	ret    
c001a0f9:	90                   	nop

c001a0fa <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a0fa:	55                   	push   ebp
c001a0fb:	57                   	push   edi
c001a0fc:	56                   	push   esi
c001a0fd:	53                   	push   ebx
c001a0fe:	83 ec 18             	sub    esp,0x18
c001a101:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a105:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a109:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a10d:	68 25 28 02 c0       	push   0xc0022825
c001a112:	e8 f3 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a117:	83 c4 10             	add    esp,0x10
c001a11a:	85 ff                	test   edi,edi
c001a11c:	0f 94 c0             	sete   al
c001a11f:	85 f6                	test   esi,esi
c001a121:	0f 94 c2             	sete   dl
c001a124:	09 d0                	or     eax,edx
c001a126:	a8 01                	test   al,0x1
c001a128:	0f 85 dd 00 00 00    	jne    c001a20b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a12e:	85 db                	test   ebx,ebx
c001a130:	0f 84 d5 00 00 00    	je     c001a20b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a136:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a139:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a13f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a146:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a14d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a14f:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a155:	74 1b                	je     c001a172 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a157:	85 c0                	test   eax,eax
c001a159:	74 10                	je     c001a16b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a15b:	83 ec 0c             	sub    esp,0xc
c001a15e:	68 c9 27 02 c0       	push   0xc00227c9
c001a163:	e8 45 70 ff ff       	call   c00111ad <KePanic(char const*)>
c001a168:	83 c4 10             	add    esp,0x10
c001a16b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a16d:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a172:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a175:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a17c:	85 c0                	test   eax,eax
c001a17e:	74 09                	je     c001a189 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a180:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a187:	74 51                	je     c001a1da <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a189:	83 ec 0c             	sub    esp,0xc
c001a18c:	68 2d 28 02 c0       	push   0xc002282d
c001a191:	e8 74 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a196:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a199:	83 c4 10             	add    esp,0x10
c001a19c:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a1a4:	74 21                	je     c001a1c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a1a6:	83 ec 0c             	sub    esp,0xc
c001a1a9:	68 4d 28 02 c0       	push   0xc002284d
c001a1ae:	e8 57 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a1b3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1b6:	83 c4 10             	add    esp,0x10
c001a1b9:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a1c0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a1c7:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a1ce:	83 ec 0c             	sub    esp,0xc
c001a1d1:	50                   	push   eax
c001a1d2:	e8 90 c8 fe ff       	call   c0006a67 <init_percd>
c001a1d7:	83 c4 10             	add    esp,0x10
c001a1da:	52                   	push   edx
c001a1db:	83 c3 03             	add    ebx,0x3
c001a1de:	52                   	push   edx
c001a1df:	6a 00                	push   0x0
c001a1e1:	53                   	push   ebx
c001a1e2:	e8 43 c3 fe ff       	call   c000652a <iso_open>
c001a1e7:	83 c4 10             	add    esp,0x10
c001a1ea:	83 f8 ff             	cmp    eax,0xffffffff
c001a1ed:	89 c5                	mov    ebp,eax
c001a1ef:	75 21                	jne    c001a212 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a1f1:	50                   	push   eax
c001a1f2:	50                   	push   eax
c001a1f3:	6a 01                	push   0x1
c001a1f5:	53                   	push   ebx
c001a1f6:	e8 2f c3 fe ff       	call   c000652a <iso_open>
c001a1fb:	83 c4 10             	add    esp,0x10
c001a1fe:	ba 02 00 00 00       	mov    edx,0x2
c001a203:	40                   	inc    eax
c001a204:	74 2b                	je     c001a231 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a206:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a209:	eb 24                	jmp    c001a22f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a20b:	ba 04 00 00 00       	mov    edx,0x4
c001a210:	eb 1f                	jmp    c001a231 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a212:	83 ec 0c             	sub    esp,0xc
c001a215:	50                   	push   eax
c001a216:	e8 82 c5 fe ff       	call   c000679d <iso_total>
c001a21b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a222:	89 07                	mov    DWORD PTR [edi],eax
c001a224:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a227:	e8 88 c3 fe ff       	call   c00065b4 <iso_close>
c001a22c:	83 c4 10             	add    esp,0x10
c001a22f:	31 d2                	xor    edx,edx
c001a231:	83 c4 0c             	add    esp,0xc
c001a234:	89 d0                	mov    eax,edx
c001a236:	5b                   	pop    ebx
c001a237:	5e                   	pop    esi
c001a238:	5f                   	pop    edi
c001a239:	5d                   	pop    ebp
c001a23a:	c3                   	ret    
c001a23b:	90                   	nop

c001a23c <ISO9660::close(void*)>:
c001a23c:	83 ec 0c             	sub    esp,0xc
c001a23f:	b8 04 00 00 00       	mov    eax,0x4
c001a244:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a248:	85 d2                	test   edx,edx
c001a24a:	74 1b                	je     c001a267 <ISO9660::close(void*)+0x2b>
c001a24c:	89 d0                	mov    eax,edx
c001a24e:	b9 02 00 00 00       	mov    ecx,0x2
c001a253:	99                   	cdq    
c001a254:	83 ec 0c             	sub    esp,0xc
c001a257:	f7 f9                	idiv   ecx
c001a259:	83 e8 32             	sub    eax,0x32
c001a25c:	50                   	push   eax
c001a25d:	e8 52 c3 fe ff       	call   c00065b4 <iso_close>
c001a262:	83 c4 10             	add    esp,0x10
c001a265:	31 c0                	xor    eax,eax
c001a267:	83 c4 0c             	add    esp,0xc
c001a26a:	c3                   	ret    
c001a26b:	90                   	nop

c001a26c <ISO9660::openDir(char const*, void**)>:
c001a26c:	56                   	push   esi
c001a26d:	53                   	push   ebx
c001a26e:	50                   	push   eax
c001a26f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a273:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a277:	85 db                	test   ebx,ebx
c001a279:	0f 84 bd 00 00 00    	je     c001a33c <ISO9660::openDir(char const*, void**)+0xd0>
c001a27f:	85 f6                	test   esi,esi
c001a281:	0f 84 b5 00 00 00    	je     c001a33c <ISO9660::openDir(char const*, void**)+0xd0>
c001a287:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a289:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a28f:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a296:	74 1b                	je     c001a2b3 <ISO9660::openDir(char const*, void**)+0x47>
c001a298:	85 c0                	test   eax,eax
c001a29a:	74 10                	je     c001a2ac <ISO9660::openDir(char const*, void**)+0x40>
c001a29c:	83 ec 0c             	sub    esp,0xc
c001a29f:	68 c9 27 02 c0       	push   0xc00227c9
c001a2a4:	e8 04 6f ff ff       	call   c00111ad <KePanic(char const*)>
c001a2a9:	83 c4 10             	add    esp,0x10
c001a2ac:	8a 03                	mov    al,BYTE PTR [ebx]
c001a2ae:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a2b3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2b6:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a2bd:	85 c0                	test   eax,eax
c001a2bf:	74 10                	je     c001a2d1 <ISO9660::openDir(char const*, void**)+0x65>
c001a2c1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a2c8:	74 1a                	je     c001a2e4 <ISO9660::openDir(char const*, void**)+0x78>
c001a2ca:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a2d1:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a2d8:	83 ec 0c             	sub    esp,0xc
c001a2db:	50                   	push   eax
c001a2dc:	e8 86 c7 fe ff       	call   c0006a67 <init_percd>
c001a2e1:	83 c4 10             	add    esp,0x10
c001a2e4:	50                   	push   eax
c001a2e5:	83 c3 03             	add    ebx,0x3
c001a2e8:	50                   	push   eax
c001a2e9:	6a 01                	push   0x1
c001a2eb:	53                   	push   ebx
c001a2ec:	e8 39 c2 fe ff       	call   c000652a <iso_open>
c001a2f1:	83 c4 10             	add    esp,0x10
c001a2f4:	83 f8 ff             	cmp    eax,0xffffffff
c001a2f7:	89 c3                	mov    ebx,eax
c001a2f9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a2fe:	75 1c                	jne    c001a31c <ISO9660::openDir(char const*, void**)+0xb0>
c001a300:	53                   	push   ebx
c001a301:	53                   	push   ebx
c001a302:	68 71 28 02 c0       	push   0xc0022871
c001a307:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a30d:	e8 9a e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a312:	83 c4 10             	add    esp,0x10
c001a315:	b8 01 00 00 00       	mov    eax,0x1
c001a31a:	eb 25                	jmp    c001a341 <ISO9660::openDir(char const*, void**)+0xd5>
c001a31c:	51                   	push   ecx
c001a31d:	01 db                	add    ebx,ebx
c001a31f:	51                   	push   ecx
c001a320:	83 c3 65             	add    ebx,0x65
c001a323:	68 84 28 02 c0       	push   0xc0022884
c001a328:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a32e:	e8 79 e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a333:	83 c4 10             	add    esp,0x10
c001a336:	31 c0                	xor    eax,eax
c001a338:	89 1e                	mov    DWORD PTR [esi],ebx
c001a33a:	eb 05                	jmp    c001a341 <ISO9660::openDir(char const*, void**)+0xd5>
c001a33c:	b8 04 00 00 00       	mov    eax,0x4
c001a341:	5a                   	pop    edx
c001a342:	5b                   	pop    ebx
c001a343:	5e                   	pop    esi
c001a344:	c3                   	ret    
c001a345:	90                   	nop

c001a346 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a346:	55                   	push   ebp
c001a347:	57                   	push   edi
c001a348:	56                   	push   esi
c001a349:	53                   	push   ebx
c001a34a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a350:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a357:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a35e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a365:	85 db                	test   ebx,ebx
c001a367:	0f 84 e4 00 00 00    	je     c001a451 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a36d:	85 ed                	test   ebp,ebp
c001a36f:	0f 84 dc 00 00 00    	je     c001a451 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a375:	83 ec 0c             	sub    esp,0xc
c001a378:	68 97 28 02 c0       	push   0xc0022897
c001a37d:	e8 88 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a382:	89 d8                	mov    eax,ebx
c001a384:	b9 02 00 00 00       	mov    ecx,0x2
c001a389:	99                   	cdq    
c001a38a:	f7 f9                	idiv   ecx
c001a38c:	83 e8 32             	sub    eax,0x32
c001a38f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a392:	e8 58 c4 fe ff       	call   c00067ef <iso_readdir>
c001a397:	83 c4 10             	add    esp,0x10
c001a39a:	85 c0                	test   eax,eax
c001a39c:	89 c3                	mov    ebx,eax
c001a39e:	75 38                	jne    c001a3d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a3a0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a3a5:	53                   	push   ebx
c001a3a6:	53                   	push   ebx
c001a3a7:	68 a2 28 02 c0       	push   0xc00228a2
c001a3ac:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a3b2:	e8 f5 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a3b7:	83 c4 0c             	add    esp,0xc
c001a3ba:	68 10 01 00 00       	push   0x110
c001a3bf:	6a 00                	push   0x0
c001a3c1:	57                   	push   edi
c001a3c2:	e8 29 61 fe ff       	call   c00004f0 <memset>
c001a3c7:	83 c4 10             	add    esp,0x10
c001a3ca:	b8 01 00 00 00       	mov    eax,0x1
c001a3cf:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a3d6:	eb 7e                	jmp    c001a456 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a3d8:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a3de:	8d 70 08             	lea    esi,[eax+0x8]
c001a3e1:	83 ec 0c             	sub    esp,0xc
c001a3e4:	56                   	push   esi
c001a3e5:	e8 96 61 fe ff       	call   c0000580 <strlen>
c001a3ea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a3f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3f6:	83 c4 10             	add    esp,0x10
c001a3f9:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a3fd:	75 0a                	jne    c001a409 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a3ff:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a402:	b8 02 00 00 00       	mov    eax,0x2
c001a407:	74 05                	je     c001a40e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a409:	b8 01 00 00 00       	mov    eax,0x1
c001a40e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a412:	50                   	push   eax
c001a413:	50                   	push   eax
c001a414:	56                   	push   esi
c001a415:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a419:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a41d:	50                   	push   eax
c001a41e:	e8 2d 62 fe ff       	call   c0000650 <strcpy>
c001a423:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a42a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a42c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a433:	5a                   	pop    edx
c001a434:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a439:	59                   	pop    ecx
c001a43a:	68 b5 28 02 c0       	push   0xc00228b5
c001a43f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a445:	e8 62 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a44a:	83 c4 10             	add    esp,0x10
c001a44d:	31 c0                	xor    eax,eax
c001a44f:	eb 05                	jmp    c001a456 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a451:	b8 04 00 00 00       	mov    eax,0x4
c001a456:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a45c:	5b                   	pop    ebx
c001a45d:	5e                   	pop    esi
c001a45e:	5f                   	pop    edi
c001a45f:	5d                   	pop    ebp
c001a460:	c3                   	ret    

c001a461 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a461:	57                   	push   edi
c001a462:	56                   	push   esi
c001a463:	53                   	push   ebx
c001a464:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a468:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a46c:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a472:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a476:	0f be cb             	movsx  ecx,bl
c001a479:	75 0b                	jne    c001a486 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a47b:	0f be 05 e0 36 02 c0 	movsx  eax,BYTE PTR ds:0xc00236e0
c001a482:	39 c8                	cmp    eax,ecx
c001a484:	74 47                	je     c001a4cd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a486:	83 ec 0c             	sub    esp,0xc
c001a489:	31 d2                	xor    edx,edx
c001a48b:	68 a0 98 02 c0       	push   0xc00298a0
c001a490:	6a 01                	push   0x1
c001a492:	52                   	push   edx
c001a493:	56                   	push   esi
c001a494:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a49b:	e8 5a 35 ff ff       	call   c000d9fa <LogicalDisk::read(unsigned long long, int, void*)>
c001a4a0:	83 c4 20             	add    esp,0x20
c001a4a3:	85 c0                	test   eax,eax
c001a4a5:	75 0e                	jne    c001a4b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a4a7:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a4ad:	88 1d e0 36 02 c0    	mov    BYTE PTR ds:0xc00236e0,bl
c001a4b3:	eb 18                	jmp    c001a4cd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a4b5:	50                   	push   eax
c001a4b6:	68 00 08 00 00       	push   0x800
c001a4bb:	6a 00                	push   0x0
c001a4bd:	57                   	push   edi
c001a4be:	e8 2d 60 fe ff       	call   c00004f0 <memset>
c001a4c3:	83 c4 10             	add    esp,0x10
c001a4c6:	b8 01 00 00 00       	mov    eax,0x1
c001a4cb:	eb 0e                	jmp    c001a4db <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a4cd:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a4d2:	b9 00 08 00 00       	mov    ecx,0x800
c001a4d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4d9:	31 c0                	xor    eax,eax
c001a4db:	5b                   	pop    ebx
c001a4dc:	5e                   	pop    esi
c001a4dd:	5f                   	pop    edi
c001a4de:	c3                   	ret    
c001a4df:	90                   	nop

c001a4e0 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a4e0:	53                   	push   ebx
c001a4e1:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a4e7:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a4f1:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a4f8:	8d 58 41             	lea    ebx,[eax+0x41]
c001a4fb:	0f be db             	movsx  ebx,bl
c001a4fe:	53                   	push   ebx
c001a4ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a503:	50                   	push   eax
c001a504:	6a 10                	push   0x10
c001a506:	e8 56 ff ff ff       	call   c001a461 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a50b:	83 c4 10             	add    esp,0x10
c001a50e:	31 d2                	xor    edx,edx
c001a510:	85 c0                	test   eax,eax
c001a512:	75 33                	jne    c001a547 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a514:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a519:	75 2c                	jne    c001a547 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a51b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a520:	75 25                	jne    c001a547 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a522:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a527:	75 1e                	jne    c001a547 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a529:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a52e:	75 17                	jne    c001a547 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a530:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a535:	75 10                	jne    c001a547 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a537:	83 ec 0c             	sub    esp,0xc
c001a53a:	53                   	push   ebx
c001a53b:	e8 27 c5 fe ff       	call   c0006a67 <init_percd>
c001a540:	83 c4 10             	add    esp,0x10
c001a543:	40                   	inc    eax
c001a544:	0f 95 c2             	setne  dl
c001a547:	81 c4 08 08 00 00    	add    esp,0x808
c001a54d:	88 d0                	mov    al,dl
c001a54f:	5b                   	pop    ebx
c001a550:	c3                   	ret    
c001a551:	90                   	nop

c001a552 <ISO9660::ISO9660()>:
c001a552:	83 ec 0c             	sub    esp,0xc
c001a555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a559:	83 ec 0c             	sub    esp,0xc
c001a55c:	50                   	push   eax
c001a55d:	e8 18 0f ff ff       	call   c000b47a <Filesystem::Filesystem()>
c001a562:	83 c4 10             	add    esp,0x10
c001a565:	ba d0 28 02 c0       	mov    edx,0xc00228d0
c001a56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a56e:	89 10                	mov    DWORD PTR [eax],edx
c001a570:	e8 04 c6 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a575:	90                   	nop
c001a576:	83 c4 0c             	add    esp,0xc
c001a579:	c3                   	ret    

c001a57a <SoundCard::beginPlayback()>:
c001a57a:	c7 44 24 04 34 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022934
c001a582:	e9 26 6c ff ff       	jmp    c00111ad <KePanic(char const*)>
c001a587:	90                   	nop

c001a588 <SoundCard::stopPlayback()>:
c001a588:	c7 44 24 04 34 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022934
c001a590:	e9 18 6c ff ff       	jmp    c00111ad <KePanic(char const*)>
c001a595:	90                   	nop

c001a596 <SoundCard::SoundCard(char const*)>:
c001a596:	83 ec 1c             	sub    esp,0x1c
c001a599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a59d:	83 ec 08             	sub    esp,0x8
c001a5a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a5a4:	50                   	push   eax
c001a5a5:	e8 fe 21 ff ff       	call   c000c7a8 <Device::Device(char const*)>
c001a5aa:	83 c4 10             	add    esp,0x10
c001a5ad:	ba 80 29 02 c0       	mov    edx,0xc0022980
c001a5b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5b6:	89 10                	mov    DWORD PTR [eax],edx
c001a5b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5bc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a5c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5c7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5d5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a5df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5e3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a5ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5f1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a5fb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a603:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a608:	7f 1a                	jg     c001a624 <SoundCard::SoundCard(char const*)+0x8e>
c001a60a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a60e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a612:	83 c2 54             	add    edx,0x54
c001a615:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a61d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a622:	eb df                	jmp    c001a603 <SoundCard::SoundCard(char const*)+0x6d>
c001a624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a628:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a62f:	90                   	nop
c001a630:	83 c4 1c             	add    esp,0x1c
c001a633:	c3                   	ret    

c001a634 <SoundCard::~SoundCard()>:
c001a634:	83 ec 0c             	sub    esp,0xc
c001a637:	ba 80 29 02 c0       	mov    edx,0xc0022980
c001a63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a640:	89 10                	mov    DWORD PTR [eax],edx
c001a642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a646:	83 ec 0c             	sub    esp,0xc
c001a649:	50                   	push   eax
c001a64a:	e8 c3 1e ff ff       	call   c000c512 <Device::~Device()>
c001a64f:	83 c4 10             	add    esp,0x10
c001a652:	90                   	nop
c001a653:	83 c4 0c             	add    esp,0xc
c001a656:	c3                   	ret    
c001a657:	90                   	nop

c001a658 <SoundCard::~SoundCard()>:
c001a658:	83 ec 0c             	sub    esp,0xc
c001a65b:	83 ec 0c             	sub    esp,0xc
c001a65e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a662:	e8 cd ff ff ff       	call   c001a634 <SoundCard::~SoundCard()>
c001a667:	83 c4 10             	add    esp,0x10
c001a66a:	83 ec 08             	sub    esp,0x8
c001a66d:	68 e8 01 00 00       	push   0x1e8
c001a672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a676:	e8 91 01 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a67b:	83 c4 10             	add    esp,0x10
c001a67e:	83 c4 0c             	add    esp,0xc
c001a681:	c3                   	ret    

c001a682 <SoundCard::configureRates(int, int, int)>:
c001a682:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a686:	31 c0                	xor    eax,eax
c001a688:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a68f:	75 20                	jne    c001a6b1 <SoundCard::configureRates(int, int, int)+0x2f>
c001a691:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a695:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a69b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a69f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6a9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a6af:	b0 01                	mov    al,0x1
c001a6b1:	c3                   	ret    

c001a6b2 <SoundCard::getSamples16(int, short*)>:
c001a6b2:	55                   	push   ebp
c001a6b3:	57                   	push   edi
c001a6b4:	31 ff                	xor    edi,edi
c001a6b6:	56                   	push   esi
c001a6b7:	53                   	push   ebx
c001a6b8:	31 db                	xor    ebx,ebx
c001a6ba:	83 ec 10             	sub    esp,0x10
c001a6bd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a6c1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a6c5:	8d 04 36             	lea    eax,[esi+esi*1]
c001a6c8:	50                   	push   eax
c001a6c9:	6a 00                	push   0x0
c001a6cb:	55                   	push   ebp
c001a6cc:	e8 1f 5e fe ff       	call   c00004f0 <memset>
c001a6d1:	83 c4 10             	add    esp,0x10
c001a6d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6d8:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a6df:	85 c0                	test   eax,eax
c001a6e1:	74 1a                	je     c001a6fd <SoundCard::getSamples16(int, short*)+0x4b>
c001a6e3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a6e7:	75 14                	jne    c001a6fd <SoundCard::getSamples16(int, short*)+0x4b>
c001a6e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a6ed:	55                   	push   ebp
c001a6ee:	56                   	push   esi
c001a6ef:	50                   	push   eax
c001a6f0:	e8 f3 02 00 00       	call   c001a9e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a6f5:	83 c4 10             	add    esp,0x10
c001a6f8:	39 c3                	cmp    ebx,eax
c001a6fa:	0f 4c d8             	cmovl  ebx,eax
c001a6fd:	47                   	inc    edi
c001a6fe:	83 ff 20             	cmp    edi,0x20
c001a701:	75 d1                	jne    c001a6d4 <SoundCard::getSamples16(int, short*)+0x22>
c001a703:	83 c4 0c             	add    esp,0xc
c001a706:	89 d8                	mov    eax,ebx
c001a708:	5b                   	pop    ebx
c001a709:	5e                   	pop    esi
c001a70a:	5f                   	pop    edi
c001a70b:	5d                   	pop    ebp
c001a70c:	c3                   	ret    
c001a70d:	90                   	nop

c001a70e <SoundCard::getSamples32(int, int*)>:
c001a70e:	55                   	push   ebp
c001a70f:	57                   	push   edi
c001a710:	31 ff                	xor    edi,edi
c001a712:	56                   	push   esi
c001a713:	31 f6                	xor    esi,esi
c001a715:	53                   	push   ebx
c001a716:	83 ec 10             	sub    esp,0x10
c001a719:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a71d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a721:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a725:	c1 e0 02             	shl    eax,0x2
c001a728:	50                   	push   eax
c001a729:	6a 00                	push   0x0
c001a72b:	55                   	push   ebp
c001a72c:	e8 bf 5d fe ff       	call   c00004f0 <memset>
c001a731:	83 c4 10             	add    esp,0x10
c001a734:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a73b:	85 c0                	test   eax,eax
c001a73d:	74 1a                	je     c001a759 <SoundCard::getSamples32(int, int*)+0x4b>
c001a73f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a743:	75 14                	jne    c001a759 <SoundCard::getSamples32(int, int*)+0x4b>
c001a745:	53                   	push   ebx
c001a746:	55                   	push   ebp
c001a747:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a74b:	50                   	push   eax
c001a74c:	e8 67 03 00 00       	call   c001aab8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a751:	83 c4 10             	add    esp,0x10
c001a754:	39 c6                	cmp    esi,eax
c001a756:	0f 4c f0             	cmovl  esi,eax
c001a759:	47                   	inc    edi
c001a75a:	83 ff 20             	cmp    edi,0x20
c001a75d:	75 d5                	jne    c001a734 <SoundCard::getSamples32(int, int*)+0x26>
c001a75f:	85 f6                	test   esi,esi
c001a761:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a768:	75 0f                	jne    c001a779 <SoundCard::getSamples32(int, int*)+0x6b>
c001a76a:	85 c0                	test   eax,eax
c001a76c:	74 1b                	je     c001a789 <SoundCard::getSamples32(int, int*)+0x7b>
c001a76e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a770:	83 ec 0c             	sub    esp,0xc
c001a773:	53                   	push   ebx
c001a774:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a777:	eb 0d                	jmp    c001a786 <SoundCard::getSamples32(int, int*)+0x78>
c001a779:	85 c0                	test   eax,eax
c001a77b:	75 0c                	jne    c001a789 <SoundCard::getSamples32(int, int*)+0x7b>
c001a77d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a77f:	83 ec 0c             	sub    esp,0xc
c001a782:	53                   	push   ebx
c001a783:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a786:	83 c4 10             	add    esp,0x10
c001a789:	83 c4 0c             	add    esp,0xc
c001a78c:	89 f0                	mov    eax,esi
c001a78e:	5b                   	pop    ebx
c001a78f:	5e                   	pop    esi
c001a790:	5f                   	pop    edi
c001a791:	5d                   	pop    ebp
c001a792:	c3                   	ret    
c001a793:	90                   	nop

c001a794 <SoundCard::addChannel(SoundPort*)>:
c001a794:	83 ec 0c             	sub    esp,0xc
c001a797:	31 c0                	xor    eax,eax
c001a799:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a79d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a7a5:	74 1b                	je     c001a7c2 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a7a7:	40                   	inc    eax
c001a7a8:	83 f8 20             	cmp    eax,0x20
c001a7ab:	75 f0                	jne    c001a79d <SoundCard::addChannel(SoundPort*)+0x9>
c001a7ad:	83 ec 0c             	sub    esp,0xc
c001a7b0:	68 59 29 02 c0       	push   0xc0022959
c001a7b5:	e8 f3 69 ff ff       	call   c00111ad <KePanic(char const*)>
c001a7ba:	83 c4 10             	add    esp,0x10
c001a7bd:	83 c8 ff             	or     eax,0xffffffff
c001a7c0:	eb 0b                	jmp    c001a7cd <SoundCard::addChannel(SoundPort*)+0x39>
c001a7c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a7c6:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a7cd:	83 c4 0c             	add    esp,0xc
c001a7d0:	c3                   	ret    
c001a7d1:	90                   	nop

c001a7d2 <SoundCard::removeChannel(int)>:
c001a7d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a7da:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a7e5:	c3                   	ret    
c001a7e6:	66 90                	xchg   ax,ax

c001a7e8 <SoundPort::SoundPort(int, int, int, int)>:
c001a7e8:	83 ec 0c             	sub    esp,0xc
c001a7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7ef:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7fa:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a802:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a806:	89 10                	mov    DWORD PTR [eax],edx
c001a808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a80c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a810:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a817:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a81b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a81e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a823:	75 13                	jne    c001a838 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a829:	8b 00                	mov    eax,DWORD PTR [eax]
c001a82b:	05 a0 0f 00 00       	add    eax,0xfa0
c001a830:	d1 e0                	shl    eax,1
c001a832:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a836:	66 90                	xchg   ax,ax
c001a838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a83c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a840:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a847:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a852:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a855:	c1 e0 02             	shl    eax,0x2
c001a858:	83 ec 0c             	sub    esp,0xc
c001a85b:	50                   	push   eax
c001a85c:	e8 72 d2 fe ff       	call   c0007ad3 <malloc>
c001a861:	83 c4 10             	add    esp,0x10
c001a864:	89 c2                	mov    edx,eax
c001a866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a86a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a86d:	90                   	nop
c001a86e:	83 c4 0c             	add    esp,0xc
c001a871:	c3                   	ret    
c001a872:	66 90                	xchg   ax,ax

c001a874 <SoundPort::~SoundPort()>:
c001a874:	83 ec 0c             	sub    esp,0xc
c001a877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a87b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a87e:	85 c0                	test   eax,eax
c001a880:	74 1e                	je     c001a8a0 <SoundPort::~SoundPort()+0x2c>
c001a882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a886:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a889:	83 ec 0c             	sub    esp,0xc
c001a88c:	50                   	push   eax
c001a88d:	e8 51 d2 fe ff       	call   c0007ae3 <free>
c001a892:	83 c4 10             	add    esp,0x10
c001a895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a899:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a8a0:	90                   	nop
c001a8a1:	83 c4 0c             	add    esp,0xc
c001a8a4:	c3                   	ret    
c001a8a5:	90                   	nop
c001a8a6:	66 90                	xchg   ax,ax

c001a8a8 <SoundPort::unpause()>:
c001a8a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8ac:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a8b0:	c3                   	ret    
c001a8b1:	90                   	nop
c001a8b2:	66 90                	xchg   ax,ax

c001a8b4 <SoundPort::pause()>:
c001a8b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8b8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a8bc:	c3                   	ret    
c001a8bd:	90                   	nop
c001a8be:	66 90                	xchg   ax,ax

c001a8c0 <SoundPort::getBufferUsed()>:
c001a8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a8c7:	c3                   	ret    

c001a8c8 <SoundPort::getBufferSize()>:
c001a8c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a8cf:	c3                   	ret    

c001a8d0 <SoundPort::buffer16(short*, int)>:
c001a8d0:	55                   	push   ebp
c001a8d1:	57                   	push   edi
c001a8d2:	56                   	push   esi
c001a8d3:	53                   	push   ebx
c001a8d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8d8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a8dc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a8df:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a8e2:	74 68                	je     c001a94c <SoundPort::buffer16(short*, int)+0x7c>
c001a8e4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a8e8:	85 c9                	test   ecx,ecx
c001a8ea:	7e 60                	jle    c001a94c <SoundPort::buffer16(short*, int)+0x7c>
c001a8ec:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a8f0:	8d 70 01             	lea    esi,[eax+0x1]
c001a8f3:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a8f6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a8f9:	c1 e1 0f             	shl    ecx,0xf
c001a8fc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a8ff:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a902:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a905:	74 4d                	je     c001a954 <SoundPort::buffer16(short*, int)+0x84>
c001a907:	31 f6                	xor    esi,esi
c001a909:	eb 21                	jmp    c001a92c <SoundPort::buffer16(short*, int)+0x5c>
c001a90b:	90                   	nop
c001a90c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a911:	8d 79 01             	lea    edi,[ecx+0x1]
c001a914:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a917:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a91a:	c1 e3 0f             	shl    ebx,0xf
c001a91d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a920:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a923:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a926:	74 1c                	je     c001a944 <SoundPort::buffer16(short*, int)+0x74>
c001a928:	89 c6                	mov    esi,eax
c001a92a:	66 90                	xchg   ax,ax
c001a92c:	8d 46 01             	lea    eax,[esi+0x1]
c001a92f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a933:	75 d7                	jne    c001a90c <SoundPort::buffer16(short*, int)+0x3c>
c001a935:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a939:	8d 76 00             	lea    esi,[esi+0x0]
c001a93c:	5b                   	pop    ebx
c001a93d:	5e                   	pop    esi
c001a93e:	5f                   	pop    edi
c001a93f:	5d                   	pop    ebp
c001a940:	c3                   	ret    
c001a941:	8d 76 00             	lea    esi,[esi+0x0]
c001a944:	5b                   	pop    ebx
c001a945:	8d 46 02             	lea    eax,[esi+0x2]
c001a948:	5e                   	pop    esi
c001a949:	5f                   	pop    edi
c001a94a:	5d                   	pop    ebp
c001a94b:	c3                   	ret    
c001a94c:	5b                   	pop    ebx
c001a94d:	31 c0                	xor    eax,eax
c001a94f:	5e                   	pop    esi
c001a950:	5f                   	pop    edi
c001a951:	5d                   	pop    ebp
c001a952:	c3                   	ret    
c001a953:	90                   	nop
c001a954:	b8 01 00 00 00       	mov    eax,0x1
c001a959:	eb e1                	jmp    c001a93c <SoundPort::buffer16(short*, int)+0x6c>
c001a95b:	90                   	nop

c001a95c <SoundPort::buffer32(int*, int)>:
c001a95c:	55                   	push   ebp
c001a95d:	57                   	push   edi
c001a95e:	56                   	push   esi
c001a95f:	53                   	push   ebx
c001a960:	83 ec 04             	sub    esp,0x4
c001a963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a96b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a96f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a972:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a975:	89 04 24             	mov    DWORD PTR [esp],eax
c001a978:	74 5a                	je     c001a9d4 <SoundPort::buffer32(int*, int)+0x78>
c001a97a:	85 c0                	test   eax,eax
c001a97c:	7e 56                	jle    c001a9d4 <SoundPort::buffer32(int*, int)+0x78>
c001a97e:	8d 71 01             	lea    esi,[ecx+0x1]
c001a981:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a984:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a987:	8b 37                	mov    esi,DWORD PTR [edi]
c001a989:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a98c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a98f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a992:	74 4c                	je     c001a9e0 <SoundPort::buffer32(int*, int)+0x84>
c001a994:	31 f6                	xor    esi,esi
c001a996:	eb 1c                	jmp    c001a9b4 <SoundPort::buffer32(int*, int)+0x58>
c001a998:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a99b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a99e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a9a1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a9a4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a9a8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9ab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9ae:	74 18                	je     c001a9c8 <SoundPort::buffer32(int*, int)+0x6c>
c001a9b0:	89 de                	mov    esi,ebx
c001a9b2:	66 90                	xchg   ax,ax
c001a9b4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a9b7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a9ba:	75 dc                	jne    c001a998 <SoundPort::buffer32(int*, int)+0x3c>
c001a9bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a9bf:	90                   	nop
c001a9c0:	83 c4 04             	add    esp,0x4
c001a9c3:	5b                   	pop    ebx
c001a9c4:	5e                   	pop    esi
c001a9c5:	5f                   	pop    edi
c001a9c6:	5d                   	pop    ebp
c001a9c7:	c3                   	ret    
c001a9c8:	8d 46 02             	lea    eax,[esi+0x2]
c001a9cb:	83 c4 04             	add    esp,0x4
c001a9ce:	5b                   	pop    ebx
c001a9cf:	5e                   	pop    esi
c001a9d0:	5f                   	pop    edi
c001a9d1:	5d                   	pop    ebp
c001a9d2:	c3                   	ret    
c001a9d3:	90                   	nop
c001a9d4:	83 c4 04             	add    esp,0x4
c001a9d7:	31 c0                	xor    eax,eax
c001a9d9:	5b                   	pop    ebx
c001a9da:	5e                   	pop    esi
c001a9db:	5f                   	pop    edi
c001a9dc:	5d                   	pop    ebp
c001a9dd:	c3                   	ret    
c001a9de:	66 90                	xchg   ax,ax
c001a9e0:	b8 01 00 00 00       	mov    eax,0x1
c001a9e5:	eb d9                	jmp    c001a9c0 <SoundPort::buffer32(int*, int)+0x64>
c001a9e7:	90                   	nop

c001a9e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a9e8:	55                   	push   ebp
c001a9e9:	57                   	push   edi
c001a9ea:	56                   	push   esi
c001a9eb:	53                   	push   ebx
c001a9ec:	83 ec 0c             	sub    esp,0xc
c001a9ef:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a9f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a9f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a9fb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a9ff:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001aa05:	39 03                	cmp    DWORD PTR [ebx],eax
c001aa07:	74 13                	je     c001aa1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001aa09:	83 ec 0c             	sub    esp,0xc
c001aa0c:	68 ac 29 02 c0       	push   0xc00229ac
c001aa11:	e8 97 67 ff ff       	call   c00111ad <KePanic(char const*)>
c001aa16:	83 c4 10             	add    esp,0x10
c001aa19:	8d 76 00             	lea    esi,[esi+0x0]
c001aa1c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001aa22:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aa25:	74 11                	je     c001aa38 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001aa27:	83 ec 0c             	sub    esp,0xc
c001aa2a:	68 eb 29 02 c0       	push   0xc00229eb
c001aa2f:	e8 79 67 ff ff       	call   c00111ad <KePanic(char const*)>
c001aa34:	83 c4 10             	add    esp,0x10
c001aa37:	90                   	nop
c001aa38:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001aa3e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aa41:	74 11                	je     c001aa54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001aa43:	83 ec 0c             	sub    esp,0xc
c001aa46:	68 eb 29 02 c0       	push   0xc00229eb
c001aa4b:	e8 5d 67 ff ff       	call   c00111ad <KePanic(char const*)>
c001aa50:	83 c4 10             	add    esp,0x10
c001aa53:	90                   	nop
c001aa54:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001aa57:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001aa5b:	85 f6                	test   esi,esi
c001aa5d:	7e 2d                	jle    c001aa8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001aa5f:	31 c0                	xor    eax,eax
c001aa61:	8d 76 00             	lea    esi,[esi+0x0]
c001aa64:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aa67:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001aa6a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001aa70:	85 c9                	test   ecx,ecx
c001aa72:	0f 49 d1             	cmovns edx,ecx
c001aa75:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001aa79:	c1 fa 0f             	sar    edx,0xf
c001aa7c:	01 d1                	add    ecx,edx
c001aa7e:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001aa82:	83 c0 01             	add    eax,0x1
c001aa85:	39 f0                	cmp    eax,esi
c001aa87:	75 db                	jne    c001aa64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001aa89:	8d 76 00             	lea    esi,[esi+0x0]
c001aa8c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aa8f:	83 ec 04             	sub    esp,0x4
c001aa92:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aa95:	29 f0                	sub    eax,esi
c001aa97:	c1 e0 02             	shl    eax,0x2
c001aa9a:	50                   	push   eax
c001aa9b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001aa9e:	50                   	push   eax
c001aa9f:	52                   	push   edx
c001aaa0:	e8 2b 59 fe ff       	call   c00003d0 <memmove>
c001aaa5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aaa8:	29 f0                	sub    eax,esi
c001aaaa:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001aaad:	83 c4 1c             	add    esp,0x1c
c001aab0:	89 f0                	mov    eax,esi
c001aab2:	5b                   	pop    ebx
c001aab3:	5e                   	pop    esi
c001aab4:	5f                   	pop    edi
c001aab5:	5d                   	pop    ebp
c001aab6:	c3                   	ret    
c001aab7:	90                   	nop

c001aab8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001aab8:	55                   	push   ebp
c001aab9:	57                   	push   edi
c001aaba:	56                   	push   esi
c001aabb:	53                   	push   ebx
c001aabc:	83 ec 0c             	sub    esp,0xc
c001aabf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aac3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aac7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001aacb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001aacf:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001aad5:	39 03                	cmp    DWORD PTR [ebx],eax
c001aad7:	74 13                	je     c001aaec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001aad9:	83 ec 0c             	sub    esp,0xc
c001aadc:	68 cc 29 02 c0       	push   0xc00229cc
c001aae1:	e8 c7 66 ff ff       	call   c00111ad <KePanic(char const*)>
c001aae6:	83 c4 10             	add    esp,0x10
c001aae9:	8d 76 00             	lea    esi,[esi+0x0]
c001aaec:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001aaf2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aaf5:	74 11                	je     c001ab08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001aaf7:	83 ec 0c             	sub    esp,0xc
c001aafa:	68 07 2a 02 c0       	push   0xc0022a07
c001aaff:	e8 a9 66 ff ff       	call   c00111ad <KePanic(char const*)>
c001ab04:	83 c4 10             	add    esp,0x10
c001ab07:	90                   	nop
c001ab08:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ab0e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ab11:	74 11                	je     c001ab24 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001ab13:	83 ec 0c             	sub    esp,0xc
c001ab16:	68 07 2a 02 c0       	push   0xc0022a07
c001ab1b:	e8 8d 66 ff ff       	call   c00111ad <KePanic(char const*)>
c001ab20:	83 c4 10             	add    esp,0x10
c001ab23:	90                   	nop
c001ab24:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001ab27:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001ab2b:	85 ff                	test   edi,edi
c001ab2d:	7e 21                	jle    c001ab50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001ab2f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ab36:	31 c0                	xor    eax,eax
c001ab38:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab3b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001ab3e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ab41:	01 d5                	add    ebp,edx
c001ab43:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001ab46:	83 c0 04             	add    eax,0x4
c001ab49:	39 c1                	cmp    ecx,eax
c001ab4b:	75 eb                	jne    c001ab38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab50:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ab53:	83 ec 04             	sub    esp,0x4
c001ab56:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab59:	29 f8                	sub    eax,edi
c001ab5b:	c1 e0 02             	shl    eax,0x2
c001ab5e:	50                   	push   eax
c001ab5f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ab62:	50                   	push   eax
c001ab63:	52                   	push   edx
c001ab64:	e8 67 58 fe ff       	call   c00003d0 <memmove>
c001ab69:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ab6c:	29 f8                	sub    eax,edi
c001ab6e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ab71:	83 c4 1c             	add    esp,0x1c
c001ab74:	89 f8                	mov    eax,edi
c001ab76:	5b                   	pop    ebx
c001ab77:	5e                   	pop    esi
c001ab78:	5f                   	pop    edi
c001ab79:	5d                   	pop    ebp
c001ab7a:	c3                   	ret    
c001ab7b:	90                   	nop

c001ab7c <PCI::open(int, int, void*)>:
c001ab7c:	83 ec 18             	sub    esp,0x18
c001ab7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab83:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab87:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ab8d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab8f:	50                   	push   eax
c001ab90:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ab93:	31 c0                	xor    eax,eax
c001ab95:	83 c4 1c             	add    esp,0x1c
c001ab98:	c3                   	ret    
c001ab99:	90                   	nop

c001ab9a <PCI::close(int, int, void*)>:
c001ab9a:	31 c0                	xor    eax,eax
c001ab9c:	c3                   	ret    
c001ab9d:	90                   	nop

c001ab9e <PCI::PCI()>:
c001ab9e:	83 ec 0c             	sub    esp,0xc
c001aba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba5:	83 ec 08             	sub    esp,0x8
c001aba8:	68 23 2a 02 c0       	push   0xc0022a23
c001abad:	50                   	push   eax
c001abae:	e8 b9 13 ff ff       	call   c000bf6c <Bus::Bus(char const*)>
c001abb3:	83 c4 10             	add    esp,0x10
c001abb6:	ba cc 2a 02 c0       	mov    edx,0xc0022acc
c001abbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abbf:	89 10                	mov    DWORD PTR [eax],edx
c001abc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001abcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd3:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001abd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abe2:	0f b6 d0             	movzx  edx,al
c001abe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001abf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abf4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abfa:	0f b6 d0             	movzx  edx,al
c001abfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac01:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ac06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac0a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac10:	8d 50 01             	lea    edx,[eax+0x1]
c001ac13:	88 d1                	mov    cl,dl
c001ac15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac19:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ac1f:	0f b6 d0             	movzx  edx,al
c001ac22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac26:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ac2a:	83 c9 c0             	or     ecx,0xffffffc0
c001ac2d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ac31:	90                   	nop
c001ac32:	83 c4 0c             	add    esp,0xc
c001ac35:	c3                   	ret    

c001ac36 <PCI::readBAR8(unsigned int, int)>:
c001ac36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac3e:	f6 c2 01             	test   dl,0x1
c001ac41:	74 07                	je     c001ac4a <PCI::readBAR8(unsigned int, int)+0x14>
c001ac43:	83 e2 fc             	and    edx,0xfffffffc
c001ac46:	01 c2                	add    edx,eax
c001ac48:	ec                   	in     al,dx
c001ac49:	c3                   	ret    
c001ac4a:	83 e2 f0             	and    edx,0xfffffff0
c001ac4d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ac50:	c3                   	ret    
c001ac51:	90                   	nop

c001ac52 <PCI::readBAR16(unsigned int, int)>:
c001ac52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac5a:	f6 c2 01             	test   dl,0x1
c001ac5d:	74 08                	je     c001ac67 <PCI::readBAR16(unsigned int, int)+0x15>
c001ac5f:	83 e2 fc             	and    edx,0xfffffffc
c001ac62:	01 c2                	add    edx,eax
c001ac64:	66 ed                	in     ax,dx
c001ac66:	c3                   	ret    
c001ac67:	83 e2 f0             	and    edx,0xfffffff0
c001ac6a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ac6e:	c3                   	ret    
c001ac6f:	90                   	nop

c001ac70 <PCI::readBAR32(unsigned int, int)>:
c001ac70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac78:	f6 c2 01             	test   dl,0x1
c001ac7b:	74 07                	je     c001ac84 <PCI::readBAR32(unsigned int, int)+0x14>
c001ac7d:	83 e2 fc             	and    edx,0xfffffffc
c001ac80:	01 c2                	add    edx,eax
c001ac82:	ed                   	in     eax,dx
c001ac83:	c3                   	ret    
c001ac84:	83 e2 f0             	and    edx,0xfffffff0
c001ac87:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ac8a:	c3                   	ret    
c001ac8b:	90                   	nop

c001ac8c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ac8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac98:	f6 c2 01             	test   dl,0x1
c001ac9b:	74 07                	je     c001aca4 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ac9d:	83 e2 fc             	and    edx,0xfffffffc
c001aca0:	01 ca                	add    edx,ecx
c001aca2:	ee                   	out    dx,al
c001aca3:	c3                   	ret    
c001aca4:	83 e2 f0             	and    edx,0xfffffff0
c001aca7:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001acaa:	c3                   	ret    
c001acab:	90                   	nop

c001acac <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001acac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acb8:	f6 c2 01             	test   dl,0x1
c001acbb:	74 08                	je     c001acc5 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001acbd:	83 e2 fc             	and    edx,0xfffffffc
c001acc0:	01 ca                	add    edx,ecx
c001acc2:	66 ef                	out    dx,ax
c001acc4:	c3                   	ret    
c001acc5:	83 e2 f0             	and    edx,0xfffffff0
c001acc8:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001accc:	c3                   	ret    
c001accd:	90                   	nop

c001acce <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001acce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acda:	f6 c2 01             	test   dl,0x1
c001acdd:	74 07                	je     c001ace6 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001acdf:	83 e2 fc             	and    edx,0xfffffffc
c001ace2:	01 ca                	add    edx,ecx
c001ace4:	ef                   	out    dx,eax
c001ace5:	c3                   	ret    
c001ace6:	83 e2 f0             	and    edx,0xfffffff0
c001ace9:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001acec:	c3                   	ret    
c001aced:	90                   	nop

c001acee <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001acee:	55                   	push   ebp
c001acef:	57                   	push   edi
c001acf0:	56                   	push   esi
c001acf1:	53                   	push   ebx
c001acf2:	83 ec 0c             	sub    esp,0xc
c001acf5:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001acfa:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001acfe:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ad02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ad06:	83 fe 07             	cmp    esi,0x7
c001ad09:	76 10                	jbe    c001ad1b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ad0b:	83 ec 0c             	sub    esp,0xc
c001ad0e:	68 2b 2a 02 c0       	push   0xc0022a2b
c001ad13:	e8 95 64 ff ff       	call   c00111ad <KePanic(char const*)>
c001ad18:	83 c4 10             	add    esp,0x10
c001ad1b:	0f b6 db             	movzx  ebx,bl
c001ad1e:	83 fb 0f             	cmp    ebx,0xf
c001ad21:	76 10                	jbe    c001ad33 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ad23:	83 ec 0c             	sub    esp,0xc
c001ad26:	68 5b 2a 02 c0       	push   0xc0022a5b
c001ad2b:	e8 7d 64 ff ff       	call   c00111ad <KePanic(char const*)>
c001ad30:	83 c4 10             	add    esp,0x10
c001ad33:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad36:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad3b:	83 c8 f0             	or     eax,0xfffffff0
c001ad3e:	ee                   	out    dx,al
c001ad3f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ad44:	89 e8                	mov    eax,ebp
c001ad46:	ee                   	out    dx,al
c001ad47:	89 f9                	mov    ecx,edi
c001ad49:	89 d8                	mov    eax,ebx
c001ad4b:	0f b6 d9             	movzx  ebx,cl
c001ad4e:	83 c4 0c             	add    esp,0xc
c001ad51:	c1 e0 08             	shl    eax,0x8
c001ad54:	83 e3 fc             	and    ebx,0xfffffffc
c001ad57:	09 d8                	or     eax,ebx
c001ad59:	5b                   	pop    ebx
c001ad5a:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ad5f:	5e                   	pop    esi
c001ad60:	5f                   	pop    edi
c001ad61:	5d                   	pop    ebp
c001ad62:	c3                   	ret    
c001ad63:	90                   	nop

c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad64:	57                   	push   edi
c001ad65:	56                   	push   esi
c001ad66:	53                   	push   ebx
c001ad67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad73:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ad77:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ad7d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad81:	83 ff 01             	cmp    edi,0x1
c001ad84:	75 3f                	jne    c001adc5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ad86:	89 de                	mov    esi,ebx
c001ad88:	0f b6 c0             	movzx  eax,al
c001ad8b:	c1 e0 10             	shl    eax,0x10
c001ad8e:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ad94:	0f b6 c9             	movzx  ecx,cl
c001ad97:	09 f0                	or     eax,esi
c001ad99:	c1 e1 08             	shl    ecx,0x8
c001ad9c:	0f b6 d2             	movzx  edx,dl
c001ad9f:	c1 e2 0b             	shl    edx,0xb
c001ada2:	09 c8                	or     eax,ecx
c001ada4:	09 d0                	or     eax,edx
c001ada6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001adab:	0d 00 00 00 80       	or     eax,0x80000000
c001adb0:	ef                   	out    dx,eax
c001adb1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001adb6:	ed                   	in     eax,dx
c001adb7:	83 e3 02             	and    ebx,0x2
c001adba:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001adc1:	d3 e8                	shr    eax,cl
c001adc3:	eb 44                	jmp    c001ae09 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001adc5:	83 ff 02             	cmp    edi,0x2
c001adc8:	75 2d                	jne    c001adf7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001adca:	83 ec 0c             	sub    esp,0xc
c001adcd:	0f b6 fb             	movzx  edi,bl
c001add0:	57                   	push   edi
c001add1:	0f b6 c9             	movzx  ecx,cl
c001add4:	51                   	push   ecx
c001add5:	0f b6 d2             	movzx  edx,dl
c001add8:	52                   	push   edx
c001add9:	0f b6 c0             	movzx  eax,al
c001addc:	50                   	push   eax
c001addd:	56                   	push   esi
c001adde:	e8 0b ff ff ff       	call   c001acee <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ade3:	89 c2                	mov    edx,eax
c001ade5:	ed                   	in     eax,dx
c001ade6:	83 e3 02             	and    ebx,0x2
c001ade9:	83 c4 20             	add    esp,0x20
c001adec:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001adf3:	d3 e8                	shr    eax,cl
c001adf5:	eb 12                	jmp    c001ae09 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001adf7:	83 ec 0c             	sub    esp,0xc
c001adfa:	68 8b 2a 02 c0       	push   0xc0022a8b
c001adff:	e8 a9 63 ff ff       	call   c00111ad <KePanic(char const*)>
c001ae04:	83 c4 10             	add    esp,0x10
c001ae07:	31 c0                	xor    eax,eax
c001ae09:	5b                   	pop    ebx
c001ae0a:	5e                   	pop    esi
c001ae0b:	5f                   	pop    edi
c001ae0c:	c3                   	ret    
c001ae0d:	90                   	nop

c001ae0e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ae0e:	83 ec 18             	sub    esp,0x18
c001ae11:	6a 00                	push   0x0
c001ae13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae18:	50                   	push   eax
c001ae19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae1e:	50                   	push   eax
c001ae1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae24:	50                   	push   eax
c001ae25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae29:	e8 36 ff ff ff       	call   c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae2e:	83 c4 2c             	add    esp,0x2c
c001ae31:	c3                   	ret    

c001ae32 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ae32:	83 ec 18             	sub    esp,0x18
c001ae35:	6a 0e                	push   0xe
c001ae37:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae3c:	50                   	push   eax
c001ae3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae42:	50                   	push   eax
c001ae43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae48:	50                   	push   eax
c001ae49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae4d:	e8 12 ff ff ff       	call   c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae52:	83 c4 2c             	add    esp,0x2c
c001ae55:	0f b6 c0             	movzx  eax,al
c001ae58:	c3                   	ret    
c001ae59:	90                   	nop

c001ae5a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ae5a:	55                   	push   ebp
c001ae5b:	57                   	push   edi
c001ae5c:	56                   	push   esi
c001ae5d:	53                   	push   ebx
c001ae5e:	83 ec 18             	sub    esp,0x18
c001ae61:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ae66:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ae6b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ae70:	6a 0a                	push   0xa
c001ae72:	56                   	push   esi
c001ae73:	55                   	push   ebp
c001ae74:	57                   	push   edi
c001ae75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae79:	e8 e6 fe ff ff       	call   c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae7e:	83 c4 14             	add    esp,0x14
c001ae81:	6a 0a                	push   0xa
c001ae83:	56                   	push   esi
c001ae84:	55                   	push   ebp
c001ae85:	57                   	push   edi
c001ae86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae8a:	89 c3                	mov    ebx,eax
c001ae8c:	0f b6 db             	movzx  ebx,bl
c001ae8f:	e8 d0 fe ff ff       	call   c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae94:	83 c4 2c             	add    esp,0x2c
c001ae97:	25 00 ff 00 00       	and    eax,0xff00
c001ae9c:	09 d8                	or     eax,ebx
c001ae9e:	5b                   	pop    ebx
c001ae9f:	5e                   	pop    esi
c001aea0:	5f                   	pop    edi
c001aea1:	5d                   	pop    ebp
c001aea2:	c3                   	ret    
c001aea3:	90                   	nop

c001aea4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001aea4:	83 ec 18             	sub    esp,0x18
c001aea7:	6a 08                	push   0x8
c001aea9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeae:	50                   	push   eax
c001aeaf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeb4:	50                   	push   eax
c001aeb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeba:	50                   	push   eax
c001aebb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aebf:	e8 a0 fe ff ff       	call   c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aec4:	83 c4 2c             	add    esp,0x2c
c001aec7:	0f b6 c4             	movzx  eax,ah
c001aeca:	c3                   	ret    
c001aecb:	90                   	nop

c001aecc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001aecc:	83 ec 18             	sub    esp,0x18
c001aecf:	6a 08                	push   0x8
c001aed1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aed6:	50                   	push   eax
c001aed7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aedc:	50                   	push   eax
c001aedd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aee2:	50                   	push   eax
c001aee3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aee7:	e8 78 fe ff ff       	call   c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aeec:	83 c4 2c             	add    esp,0x2c
c001aeef:	c3                   	ret    

c001aef0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001aef0:	83 ec 18             	sub    esp,0x18
c001aef3:	6a 3c                	push   0x3c
c001aef5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aefa:	50                   	push   eax
c001aefb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af00:	50                   	push   eax
c001af01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af06:	50                   	push   eax
c001af07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af0b:	e8 54 fe ff ff       	call   c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af10:	83 c4 2c             	add    esp,0x2c
c001af13:	c3                   	ret    

c001af14 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001af14:	83 ec 18             	sub    esp,0x18
c001af17:	6a 18                	push   0x18
c001af19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af1e:	50                   	push   eax
c001af1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af24:	50                   	push   eax
c001af25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af2a:	50                   	push   eax
c001af2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af2f:	e8 30 fe ff ff       	call   c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af34:	83 c4 2c             	add    esp,0x2c
c001af37:	0f b6 c4             	movzx  eax,ah
c001af3a:	c3                   	ret    
c001af3b:	90                   	nop

c001af3c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af3c:	55                   	push   ebp
c001af3d:	57                   	push   edi
c001af3e:	56                   	push   esi
c001af3f:	53                   	push   ebx
c001af40:	83 ec 28             	sub    esp,0x28
c001af43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001af47:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001af4c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001af51:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001af56:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001af5d:	8d 43 12             	lea    eax,[ebx+0x12]
c001af60:	83 c3 10             	add    ebx,0x10
c001af63:	0f b6 c0             	movzx  eax,al
c001af66:	0f b6 db             	movzx  ebx,bl
c001af69:	50                   	push   eax
c001af6a:	51                   	push   ecx
c001af6b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001af6f:	57                   	push   edi
c001af70:	55                   	push   ebp
c001af71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af75:	e8 ea fd ff ff       	call   c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af7a:	83 c4 14             	add    esp,0x14
c001af7d:	53                   	push   ebx
c001af7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af82:	51                   	push   ecx
c001af83:	89 c6                	mov    esi,eax
c001af85:	57                   	push   edi
c001af86:	55                   	push   ebp
c001af87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af8b:	c1 e6 10             	shl    esi,0x10
c001af8e:	e8 d1 fd ff ff       	call   c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af93:	83 c4 3c             	add    esp,0x3c
c001af96:	5b                   	pop    ebx
c001af97:	0f b7 c0             	movzx  eax,ax
c001af9a:	09 f0                	or     eax,esi
c001af9c:	5e                   	pop    esi
c001af9d:	5f                   	pop    edi
c001af9e:	5d                   	pop    ebp
c001af9f:	c3                   	ret    

c001afa0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001afa0:	55                   	push   ebp
c001afa1:	57                   	push   edi
c001afa2:	56                   	push   esi
c001afa3:	53                   	push   ebx
c001afa4:	83 ec 0c             	sub    esp,0xc
c001afa7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001afab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001afaf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afb3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001afb7:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001afbd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001afc1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001afc5:	83 f9 01             	cmp    ecx,0x1
c001afc8:	75 5d                	jne    c001b027 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001afca:	0f b6 c8             	movzx  ecx,al
c001afcd:	89 f0                	mov    eax,esi
c001afcf:	25 fc 00 00 00       	and    eax,0xfc
c001afd4:	0f b6 d2             	movzx  edx,dl
c001afd7:	c1 e1 10             	shl    ecx,0x10
c001afda:	c1 e2 0b             	shl    edx,0xb
c001afdd:	09 c1                	or     ecx,eax
c001afdf:	89 f8                	mov    eax,edi
c001afe1:	0f b6 f8             	movzx  edi,al
c001afe4:	c1 e7 08             	shl    edi,0x8
c001afe7:	09 f9                	or     ecx,edi
c001afe9:	09 d1                	or     ecx,edx
c001afeb:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aff0:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001aff6:	89 c8                	mov    eax,ecx
c001aff8:	ef                   	out    dx,eax
c001aff9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001affe:	ed                   	in     eax,dx
c001afff:	83 e6 02             	and    esi,0x2
c001b002:	0f b7 db             	movzx  ebx,bx
c001b005:	74 0a                	je     c001b011 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b007:	c1 e3 10             	shl    ebx,0x10
c001b00a:	0f b7 d0             	movzx  edx,ax
c001b00d:	09 d3                	or     ebx,edx
c001b00f:	eb 05                	jmp    c001b016 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b011:	66 31 c0             	xor    ax,ax
c001b014:	09 c3                	or     ebx,eax
c001b016:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b01b:	89 c8                	mov    eax,ecx
c001b01d:	ef                   	out    dx,eax
c001b01e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b023:	89 d8                	mov    eax,ebx
c001b025:	eb 41                	jmp    c001b068 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b027:	83 f9 02             	cmp    ecx,0x2
c001b02a:	75 45                	jne    c001b071 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b02c:	89 f1                	mov    ecx,esi
c001b02e:	83 ec 0c             	sub    esp,0xc
c001b031:	0f b6 f1             	movzx  esi,cl
c001b034:	89 f9                	mov    ecx,edi
c001b036:	56                   	push   esi
c001b037:	0f b6 f9             	movzx  edi,cl
c001b03a:	57                   	push   edi
c001b03b:	0f b6 d2             	movzx  edx,dl
c001b03e:	52                   	push   edx
c001b03f:	0f b6 c0             	movzx  eax,al
c001b042:	50                   	push   eax
c001b043:	55                   	push   ebp
c001b044:	e8 a5 fc ff ff       	call   c001acee <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b049:	89 c2                	mov    edx,eax
c001b04b:	ed                   	in     eax,dx
c001b04c:	83 c4 20             	add    esp,0x20
c001b04f:	f6 c2 02             	test   dl,0x2
c001b052:	0f b7 db             	movzx  ebx,bx
c001b055:	74 0c                	je     c001b063 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b057:	0f b7 c8             	movzx  ecx,ax
c001b05a:	89 d8                	mov    eax,ebx
c001b05c:	c1 e0 10             	shl    eax,0x10
c001b05f:	09 c8                	or     eax,ecx
c001b061:	eb 05                	jmp    c001b068 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b063:	66 31 c0             	xor    ax,ax
c001b066:	09 d8                	or     eax,ebx
c001b068:	ef                   	out    dx,eax
c001b069:	83 c4 0c             	add    esp,0xc
c001b06c:	5b                   	pop    ebx
c001b06d:	5e                   	pop    esi
c001b06e:	5f                   	pop    edi
c001b06f:	5d                   	pop    ebp
c001b070:	c3                   	ret    
c001b071:	c7 44 24 20 8b 2a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022a8b
c001b079:	83 c4 0c             	add    esp,0xc
c001b07c:	5b                   	pop    ebx
c001b07d:	5e                   	pop    esi
c001b07e:	5f                   	pop    edi
c001b07f:	5d                   	pop    ebp
c001b080:	e9 28 61 ff ff       	jmp    c00111ad <KePanic(char const*)>
c001b085:	90                   	nop

c001b086 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b086:	55                   	push   ebp
c001b087:	57                   	push   edi
c001b088:	56                   	push   esi
c001b089:	53                   	push   ebx
c001b08a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b090:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b097:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b09e:	0f 85 bd 00 00 00    	jne    c001b161 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b0a4:	83 ec 0c             	sub    esp,0xc
c001b0a7:	68 14 01 00 00       	push   0x114
c001b0ac:	e8 22 ca fe ff       	call   c0007ad3 <malloc>
c001b0b1:	83 c4 0c             	add    esp,0xc
c001b0b4:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b0ba:	68 91 2a 02 c0       	push   0xc0022a91
c001b0bf:	50                   	push   eax
c001b0c0:	89 c3                	mov    ebx,eax
c001b0c2:	e8 39 06 ff ff       	call   c000b700 <File::File(char const*, Process*)>
c001b0c7:	83 c4 10             	add    esp,0x10
c001b0ca:	85 db                	test   ebx,ebx
c001b0cc:	0f 84 6b 02 00 00    	je     c001b33d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b0d2:	57                   	push   edi
c001b0d3:	57                   	push   edi
c001b0d4:	6a 01                	push   0x1
c001b0d6:	53                   	push   ebx
c001b0d7:	e8 e0 06 ff ff       	call   c000b7bc <File::open(FileOpenMode)>
c001b0dc:	83 c4 10             	add    esp,0x10
c001b0df:	85 c0                	test   eax,eax
c001b0e1:	0f 85 56 02 00 00    	jne    c001b33d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b0e7:	52                   	push   edx
c001b0e8:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b0ec:	50                   	push   eax
c001b0ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b0f1:	50                   	push   eax
c001b0f2:	53                   	push   ebx
c001b0f3:	e8 c6 09 ff ff       	call   c000babe <File::stat(unsigned long long*, bool*)>
c001b0f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b0fc:	40                   	inc    eax
c001b0fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001b100:	e8 ce c9 fe ff       	call   c0007ad3 <malloc>
c001b105:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b109:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b10d:	59                   	pop    ecx
c001b10e:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b113:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b115:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b119:	51                   	push   ecx
c001b11a:	50                   	push   eax
c001b11b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b11f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b123:	53                   	push   ebx
c001b124:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b127:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b12b:	83 c4 20             	add    esp,0x20
c001b12e:	89 c8                	mov    eax,ecx
c001b130:	99                   	cdq    
c001b131:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b135:	0f 85 02 02 00 00    	jne    c001b33d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b13b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b13f:	0f 85 f8 01 00 00    	jne    c001b33d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b145:	83 ec 0c             	sub    esp,0xc
c001b148:	53                   	push   ebx
c001b149:	e8 cc 06 ff ff       	call   c000b81a <File::close()>
c001b14e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b152:	83 c4 10             	add    esp,0x10
c001b155:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b15c:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b161:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b169:	31 c9                	xor    ecx,ecx
c001b16b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b172:	8b 2d a4 a0 02 c0    	mov    ebp,DWORD PTR ds:0xc002a0a4
c001b178:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b17f:	8b 15 a8 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0a8
c001b185:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b18a:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b192:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b197:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b19f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b1a3:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b1ab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b1af:	39 cd                	cmp    ebp,ecx
c001b1b1:	0f 8e 86 01 00 00    	jle    c001b33d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b1b7:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b1ba:	d4 40                	aam    0x40
c001b1bc:	d5 39                	aad    0x39
c001b1be:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b1c2:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b1c6:	d4 40                	aam    0x40
c001b1c8:	d5 39                	aad    0x39
c001b1ca:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b1ce:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b1d2:	d4 40                	aam    0x40
c001b1d4:	d5 39                	aad    0x39
c001b1d6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b1da:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b1de:	d4 40                	aam    0x40
c001b1e0:	d5 39                	aad    0x39
c001b1e2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b1e6:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b1ea:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b1ee:	3c 56                	cmp    al,0x56
c001b1f0:	74 47                	je     c001b239 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b1f2:	d4 40                	aam    0x40
c001b1f4:	d5 39                	aad    0x39
c001b1f6:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b1f9:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b1fd:	0f b6 db             	movzx  ebx,bl
c001b200:	c1 e3 04             	shl    ebx,0x4
c001b203:	d4 40                	aam    0x40
c001b205:	d5 39                	aad    0x39
c001b207:	83 e8 30             	sub    eax,0x30
c001b20a:	0f b6 c0             	movzx  eax,al
c001b20d:	09 c3                	or     ebx,eax
c001b20f:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b213:	c1 e3 04             	shl    ebx,0x4
c001b216:	d4 40                	aam    0x40
c001b218:	d5 39                	aad    0x39
c001b21a:	83 e8 30             	sub    eax,0x30
c001b21d:	0f b6 c0             	movzx  eax,al
c001b220:	09 c3                	or     ebx,eax
c001b222:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b226:	c1 e3 04             	shl    ebx,0x4
c001b229:	d4 40                	aam    0x40
c001b22b:	d5 39                	aad    0x39
c001b22d:	83 e8 30             	sub    eax,0x30
c001b230:	0f b6 c0             	movzx  eax,al
c001b233:	09 c3                	or     ebx,eax
c001b235:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b239:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b23d:	80 fb 58             	cmp    bl,0x58
c001b240:	74 49                	je     c001b28b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b242:	88 d8                	mov    al,bl
c001b244:	d4 40                	aam    0x40
c001b246:	d5 39                	aad    0x39
c001b248:	83 e8 30             	sub    eax,0x30
c001b24b:	0f b6 f8             	movzx  edi,al
c001b24e:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b252:	c1 e7 04             	shl    edi,0x4
c001b255:	d4 40                	aam    0x40
c001b257:	d5 39                	aad    0x39
c001b259:	83 e8 30             	sub    eax,0x30
c001b25c:	0f b6 c0             	movzx  eax,al
c001b25f:	09 c7                	or     edi,eax
c001b261:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b265:	c1 e7 04             	shl    edi,0x4
c001b268:	d4 40                	aam    0x40
c001b26a:	d5 39                	aad    0x39
c001b26c:	83 e8 30             	sub    eax,0x30
c001b26f:	0f b6 c0             	movzx  eax,al
c001b272:	09 c7                	or     edi,eax
c001b274:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b278:	c1 e7 04             	shl    edi,0x4
c001b27b:	d4 40                	aam    0x40
c001b27d:	d5 39                	aad    0x39
c001b27f:	83 e8 30             	sub    eax,0x30
c001b282:	0f b6 c0             	movzx  eax,al
c001b285:	09 c7                	or     edi,eax
c001b287:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b28b:	8d 41 10             	lea    eax,[ecx+0x10]
c001b28e:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b292:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b296:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b29a:	83 f9 0a             	cmp    ecx,0xa
c001b29d:	74 07                	je     c001b2a6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b29f:	47                   	inc    edi
c001b2a0:	39 c5                	cmp    ebp,eax
c001b2a2:	75 16                	jne    c001b2ba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b2a4:	89 e8                	mov    eax,ebp
c001b2a6:	83 f9 0a             	cmp    ecx,0xa
c001b2a9:	0f 94 c1             	sete   cl
c001b2ac:	0f b6 c9             	movzx  ecx,cl
c001b2af:	01 c1                	add    ecx,eax
c001b2b1:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b2b6:	75 0f                	jne    c001b2c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b2b8:	eb 1c                	jmp    c001b2d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b2ba:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b2bd:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b2c1:	40                   	inc    eax
c001b2c2:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b2c5:	eb cb                	jmp    c001b292 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b2c7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b2cb:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b2d0:	0f 85 d9 fe ff ff    	jne    c001b1af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b2d6:	80 fb 58             	cmp    bl,0x58
c001b2d9:	74 10                	je     c001b2eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b2db:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b2e0:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b2e5:	0f 85 c4 fe ff ff    	jne    c001b1af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b2eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2ef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2f3:	83 e8 30             	sub    eax,0x30
c001b2f6:	c1 e0 04             	shl    eax,0x4
c001b2f9:	83 eb 30             	sub    ebx,0x30
c001b2fc:	09 d8                	or     eax,ebx
c001b2fe:	0f b6 c0             	movzx  eax,al
c001b301:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b305:	0f 85 a4 fe ff ff    	jne    c001b1af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b30b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b30f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b313:	83 e8 30             	sub    eax,0x30
c001b316:	c1 e0 04             	shl    eax,0x4
c001b319:	83 eb 30             	sub    ebx,0x30
c001b31c:	09 d8                	or     eax,ebx
c001b31e:	0f b6 c0             	movzx  eax,al
c001b321:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b325:	0f 85 84 fe ff ff    	jne    c001b1af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b32b:	50                   	push   eax
c001b32c:	50                   	push   eax
c001b32d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b331:	50                   	push   eax
c001b332:	56                   	push   esi
c001b333:	e8 18 53 fe ff       	call   c0000650 <strcpy>
c001b338:	83 c4 10             	add    esp,0x10
c001b33b:	eb 05                	jmp    c001b342 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b33d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b340:	31 f6                	xor    esi,esi
c001b342:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b348:	89 f0                	mov    eax,esi
c001b34a:	5b                   	pop    ebx
c001b34b:	5e                   	pop    esi
c001b34c:	5f                   	pop    edi
c001b34d:	5d                   	pop    ebp
c001b34e:	c3                   	ret    
c001b34f:	90                   	nop

c001b350 <PCI::checkBus(unsigned char)>:
c001b350:	56                   	push   esi
c001b351:	53                   	push   ebx
c001b352:	31 db                	xor    ebx,ebx
c001b354:	51                   	push   ecx
c001b355:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b35a:	52                   	push   edx
c001b35b:	53                   	push   ebx
c001b35c:	43                   	inc    ebx
c001b35d:	56                   	push   esi
c001b35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b362:	e8 0f 03 00 00       	call   c001b676 <PCI::checkDevice(unsigned char, unsigned char)>
c001b367:	83 c4 10             	add    esp,0x10
c001b36a:	83 fb 20             	cmp    ebx,0x20
c001b36d:	75 eb                	jne    c001b35a <PCI::checkBus(unsigned char)+0xa>
c001b36f:	58                   	pop    eax
c001b370:	5b                   	pop    ebx
c001b371:	5e                   	pop    esi
c001b372:	c3                   	ret    
c001b373:	90                   	nop

c001b374 <PCI::foundDevice(PCIDeviceInfo)>:
c001b374:	55                   	push   ebp
c001b375:	57                   	push   edi
c001b376:	56                   	push   esi
c001b377:	53                   	push   ebx
c001b378:	83 ec 1c             	sub    esp,0x1c
c001b37b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b380:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b384:	3d ff ff 00 00       	cmp    eax,0xffff
c001b389:	0f 84 63 01 00 00    	je     c001b4f2 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b38f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b394:	66 3d 06 04          	cmp    ax,0x406
c001b398:	75 2c                	jne    c001b3c6 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b39a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b39f:	50                   	push   eax
c001b3a0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b3a5:	50                   	push   eax
c001b3a6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b3ab:	50                   	push   eax
c001b3ac:	53                   	push   ebx
c001b3ad:	e8 62 fb ff ff       	call   c001af14 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b3b2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b3b6:	0f b6 c0             	movzx  eax,al
c001b3b9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b3bd:	83 c4 2c             	add    esp,0x2c
c001b3c0:	5b                   	pop    ebx
c001b3c1:	5e                   	pop    esi
c001b3c2:	5f                   	pop    edi
c001b3c3:	5d                   	pop    ebp
c001b3c4:	eb 8a                	jmp    c001b350 <PCI::checkBus(unsigned char)>
c001b3c6:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b3cb:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b3d1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b3d5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b3d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b3dd:	85 d2                	test   edx,edx
c001b3df:	74 34                	je     c001b415 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b3e1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b3e4:	85 c9                	test   ecx,ecx
c001b3e6:	74 29                	je     c001b411 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b3e8:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b3ee:	31 f5                	xor    ebp,esi
c001b3f0:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b3f6:	75 19                	jne    c001b411 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b3f8:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b3fe:	75 11                	jne    c001b411 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b400:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b407:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b40b:	0f 84 e1 00 00 00    	je     c001b4f2 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b411:	8b 12                	mov    edx,DWORD PTR [edx]
c001b413:	eb c8                	jmp    c001b3dd <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b415:	3d 01 06 00 00       	cmp    eax,0x601
c001b41a:	75 19                	jne    c001b435 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b41c:	83 ec 0c             	sub    esp,0xc
c001b41f:	68 64 01 00 00       	push   0x164
c001b424:	e8 aa c6 fe ff       	call   c0007ad3 <malloc>
c001b429:	89 04 24             	mov    DWORD PTR [esp],eax
c001b42c:	89 c5                	mov    ebp,eax
c001b42e:	e8 ab 0e 00 00       	call   c001c2de <SATABus::SATABus()>
c001b433:	eb 1e                	jmp    c001b453 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b435:	3d 01 01 00 00       	cmp    eax,0x101
c001b43a:	75 62                	jne    c001b49e <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b43c:	83 ec 0c             	sub    esp,0xc
c001b43f:	68 70 02 00 00       	push   0x270
c001b444:	e8 8a c6 fe ff       	call   c0007ad3 <malloc>
c001b449:	89 04 24             	mov    DWORD PTR [esp],eax
c001b44c:	89 c5                	mov    ebp,eax
c001b44e:	e8 f3 02 00 00       	call   c001b746 <IDE::IDE()>
c001b453:	58                   	pop    eax
c001b454:	5a                   	pop    edx
c001b455:	55                   	push   ebp
c001b456:	53                   	push   ebx
c001b457:	e8 b4 11 ff ff       	call   c000c610 <Device::addChild(Device*)>
c001b45c:	83 ec 1c             	sub    esp,0x1c
c001b45f:	b9 09 00 00 00       	mov    ecx,0x9
c001b464:	fc                   	cld    
c001b465:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b469:	89 e7                	mov    edi,esp
c001b46b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b46d:	55                   	push   ebp
c001b46e:	e8 e3 10 ff ff       	call   c000c556 <Device::preOpenPCI(PCIDeviceInfo)>
c001b473:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b476:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b47a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b482:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b48a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b492:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b495:	83 c4 4c             	add    esp,0x4c
c001b498:	5b                   	pop    ebx
c001b499:	5e                   	pop    esi
c001b49a:	5f                   	pop    edi
c001b49b:	5d                   	pop    ebp
c001b49c:	ff e0                	jmp    eax
c001b49e:	83 ec 0c             	sub    esp,0xc
c001b4a1:	68 58 01 00 00       	push   0x158
c001b4a6:	e8 28 c6 fe ff       	call   c0007ad3 <malloc>
c001b4ab:	5a                   	pop    edx
c001b4ac:	59                   	pop    ecx
c001b4ad:	68 aa 2a 02 c0       	push   0xc0022aaa
c001b4b2:	50                   	push   eax
c001b4b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b4b7:	e8 f2 13 ff ff       	call   c000c8ae <DriverlessDevice::DriverlessDevice(char const*)>
c001b4bc:	5e                   	pop    esi
c001b4bd:	5f                   	pop    edi
c001b4be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4c2:	50                   	push   eax
c001b4c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b4c7:	53                   	push   ebx
c001b4c8:	e8 43 11 ff ff       	call   c000c610 <Device::addChild(Device*)>
c001b4cd:	83 c4 10             	add    esp,0x10
c001b4d0:	b9 09 00 00 00       	mov    ecx,0x9
c001b4d5:	fc                   	cld    
c001b4d6:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b4da:	89 fe                	mov    esi,edi
c001b4dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4e2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b4e6:	83 c4 1c             	add    esp,0x1c
c001b4e9:	5b                   	pop    ebx
c001b4ea:	5e                   	pop    esi
c001b4eb:	5f                   	pop    edi
c001b4ec:	5d                   	pop    ebp
c001b4ed:	e9 64 10 ff ff       	jmp    c000c556 <Device::preOpenPCI(PCIDeviceInfo)>
c001b4f2:	83 c4 1c             	add    esp,0x1c
c001b4f5:	5b                   	pop    ebx
c001b4f6:	5e                   	pop    esi
c001b4f7:	5f                   	pop    edi
c001b4f8:	5d                   	pop    ebp
c001b4f9:	c3                   	ret    

c001b4fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b4fa:	55                   	push   ebp
c001b4fb:	57                   	push   edi
c001b4fc:	56                   	push   esi
c001b4fd:	53                   	push   ebx
c001b4fe:	83 ec 68             	sub    esp,0x68
c001b501:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b508:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b50c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b510:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b517:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b51c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b520:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b527:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b52c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b530:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b535:	6a 0c                	push   0xc
c001b537:	57                   	push   edi
c001b538:	53                   	push   ebx
c001b539:	56                   	push   esi
c001b53a:	55                   	push   ebp
c001b53b:	e8 24 f8 ff ff       	call   c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b540:	83 c4 20             	add    esp,0x20
c001b543:	57                   	push   edi
c001b544:	53                   	push   ebx
c001b545:	56                   	push   esi
c001b546:	55                   	push   ebp
c001b547:	e8 0e f9 ff ff       	call   c001ae5a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b54c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b551:	57                   	push   edi
c001b552:	53                   	push   ebx
c001b553:	56                   	push   esi
c001b554:	55                   	push   ebp
c001b555:	e8 96 f9 ff ff       	call   c001aef0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b55a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b55e:	83 c4 14             	add    esp,0x14
c001b561:	6a 3c                	push   0x3c
c001b563:	57                   	push   edi
c001b564:	53                   	push   ebx
c001b565:	56                   	push   esi
c001b566:	55                   	push   ebp
c001b567:	e8 f8 f7 ff ff       	call   c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b56c:	0f b6 c4             	movzx  eax,ah
c001b56f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b573:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b577:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b57b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b580:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b586:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b58c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b590:	83 c4 20             	add    esp,0x20
c001b593:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b598:	74 30                	je     c001b5ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b59a:	31 c0                	xor    eax,eax
c001b59c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b5a0:	7e 28                	jle    c001b5ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b5a2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b5aa:	39 cb                	cmp    ebx,ecx
c001b5ac:	75 19                	jne    c001b5c7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b5ae:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b5b6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b5ba:	75 0b                	jne    c001b5c7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b5bc:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b5c3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b5c7:	40                   	inc    eax
c001b5c8:	eb d2                	jmp    c001b59c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b5ca:	31 d2                	xor    edx,edx
c001b5cc:	83 ec 0c             	sub    esp,0xc
c001b5cf:	57                   	push   edi
c001b5d0:	53                   	push   ebx
c001b5d1:	56                   	push   esi
c001b5d2:	52                   	push   edx
c001b5d3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b5d7:	55                   	push   ebp
c001b5d8:	e8 5f f9 ff ff       	call   c001af3c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5dd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b5e1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b5e5:	42                   	inc    edx
c001b5e6:	83 c4 20             	add    esp,0x20
c001b5e9:	83 fa 06             	cmp    edx,0x6
c001b5ec:	75 de                	jne    c001b5cc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b5ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5f2:	83 ec 0c             	sub    esp,0xc
c001b5f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5f9:	c1 e2 08             	shl    edx,0x8
c001b5fc:	0f b6 c4             	movzx  eax,ah
c001b5ff:	09 d0                	or     eax,edx
c001b601:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b606:	6a 02                	push   0x2
c001b608:	57                   	push   edi
c001b609:	53                   	push   ebx
c001b60a:	56                   	push   esi
c001b60b:	55                   	push   ebp
c001b60c:	e8 53 f7 ff ff       	call   c001ad64 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b611:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b616:	83 c4 20             	add    esp,0x20
c001b619:	57                   	push   edi
c001b61a:	53                   	push   ebx
c001b61b:	56                   	push   esi
c001b61c:	55                   	push   ebp
c001b61d:	e8 82 f8 ff ff       	call   c001aea4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b622:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b626:	57                   	push   edi
c001b627:	53                   	push   ebx
c001b628:	56                   	push   esi
c001b629:	55                   	push   ebp
c001b62a:	e8 df f7 ff ff       	call   c001ae0e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b62f:	b9 09 00 00 00       	mov    ecx,0x9
c001b634:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b639:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b63d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b641:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b645:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b649:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b64d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b651:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b655:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b659:	83 ec 0c             	sub    esp,0xc
c001b65c:	fc                   	cld    
c001b65d:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b661:	89 e7                	mov    edi,esp
c001b663:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b665:	55                   	push   ebp
c001b666:	e8 09 fd ff ff       	call   c001b374 <PCI::foundDevice(PCIDeviceInfo)>
c001b66b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b671:	5b                   	pop    ebx
c001b672:	5e                   	pop    esi
c001b673:	5f                   	pop    edi
c001b674:	5d                   	pop    ebp
c001b675:	c3                   	ret    

c001b676 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b676:	55                   	push   ebp
c001b677:	57                   	push   edi
c001b678:	56                   	push   esi
c001b679:	53                   	push   ebx
c001b67a:	83 ec 0c             	sub    esp,0xc
c001b67d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b682:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b687:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b68b:	6a 00                	push   0x0
c001b68d:	56                   	push   esi
c001b68e:	57                   	push   edi
c001b68f:	55                   	push   ebp
c001b690:	e8 79 f7 ff ff       	call   c001ae0e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b695:	6a 00                	push   0x0
c001b697:	56                   	push   esi
c001b698:	57                   	push   edi
c001b699:	55                   	push   ebp
c001b69a:	e8 5b fe ff ff       	call   c001b4fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b69f:	83 c4 20             	add    esp,0x20
c001b6a2:	6a 00                	push   0x0
c001b6a4:	56                   	push   esi
c001b6a5:	57                   	push   edi
c001b6a6:	55                   	push   ebp
c001b6a7:	e8 86 f7 ff ff       	call   c001ae32 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b6ac:	83 c4 10             	add    esp,0x10
c001b6af:	a8 80                	test   al,0x80
c001b6b1:	74 2d                	je     c001b6e0 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b6b3:	bb 01 00 00 00       	mov    ebx,0x1
c001b6b8:	53                   	push   ebx
c001b6b9:	56                   	push   esi
c001b6ba:	57                   	push   edi
c001b6bb:	55                   	push   ebp
c001b6bc:	e8 4d f7 ff ff       	call   c001ae0e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6c1:	83 c4 10             	add    esp,0x10
c001b6c4:	0f b7 c0             	movzx  eax,ax
c001b6c7:	3d ff ff 00 00       	cmp    eax,0xffff
c001b6cc:	74 0c                	je     c001b6da <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b6ce:	53                   	push   ebx
c001b6cf:	56                   	push   esi
c001b6d0:	57                   	push   edi
c001b6d1:	55                   	push   ebp
c001b6d2:	e8 23 fe ff ff       	call   c001b4fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b6d7:	83 c4 10             	add    esp,0x10
c001b6da:	43                   	inc    ebx
c001b6db:	83 fb 08             	cmp    ebx,0x8
c001b6de:	75 d8                	jne    c001b6b8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b6e0:	83 c4 0c             	add    esp,0xc
c001b6e3:	5b                   	pop    ebx
c001b6e4:	5e                   	pop    esi
c001b6e5:	5f                   	pop    edi
c001b6e6:	5d                   	pop    ebp
c001b6e7:	c3                   	ret    

c001b6e8 <PCI::detect()>:
c001b6e8:	56                   	push   esi
c001b6e9:	53                   	push   ebx
c001b6ea:	53                   	push   ebx
c001b6eb:	31 db                	xor    ebx,ebx
c001b6ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6f1:	6a 00                	push   0x0
c001b6f3:	6a 00                	push   0x0
c001b6f5:	6a 00                	push   0x0
c001b6f7:	56                   	push   esi
c001b6f8:	e8 35 f7 ff ff       	call   c001ae32 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b6fd:	83 c4 10             	add    esp,0x10
c001b700:	a8 80                	test   al,0x80
c001b702:	75 21                	jne    c001b725 <PCI::detect()+0x3d>
c001b704:	51                   	push   ecx
c001b705:	51                   	push   ecx
c001b706:	6a 00                	push   0x0
c001b708:	56                   	push   esi
c001b709:	e8 42 fc ff ff       	call   c001b350 <PCI::checkBus(unsigned char)>
c001b70e:	83 c4 10             	add    esp,0x10
c001b711:	eb 2a                	jmp    c001b73d <PCI::detect()+0x55>
c001b713:	52                   	push   edx
c001b714:	52                   	push   edx
c001b715:	53                   	push   ebx
c001b716:	43                   	inc    ebx
c001b717:	56                   	push   esi
c001b718:	e8 33 fc ff ff       	call   c001b350 <PCI::checkBus(unsigned char)>
c001b71d:	83 c4 10             	add    esp,0x10
c001b720:	83 fb 08             	cmp    ebx,0x8
c001b723:	74 18                	je     c001b73d <PCI::detect()+0x55>
c001b725:	53                   	push   ebx
c001b726:	6a 00                	push   0x0
c001b728:	6a 00                	push   0x0
c001b72a:	56                   	push   esi
c001b72b:	e8 de f6 ff ff       	call   c001ae0e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b730:	83 c4 10             	add    esp,0x10
c001b733:	0f b7 c0             	movzx  eax,ax
c001b736:	3d ff ff 00 00       	cmp    eax,0xffff
c001b73b:	74 d6                	je     c001b713 <PCI::detect()+0x2b>
c001b73d:	58                   	pop    eax
c001b73e:	5b                   	pop    ebx
c001b73f:	5e                   	pop    esi
c001b740:	c3                   	ret    
c001b741:	90                   	nop

c001b742 <IDE::close(int, int, void*)>:
c001b742:	83 c8 ff             	or     eax,0xffffffff
c001b745:	c3                   	ret    

c001b746 <IDE::IDE()>:
c001b746:	83 ec 0c             	sub    esp,0xc
c001b749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b74d:	83 ec 08             	sub    esp,0x8
c001b750:	68 f0 2a 02 c0       	push   0xc0022af0
c001b755:	50                   	push   eax
c001b756:	e8 f9 11 ff ff       	call   c000c954 <HardDiskController::HardDiskController(char const*)>
c001b75b:	83 c4 10             	add    esp,0x10
c001b75e:	ba 80 2b 02 c0       	mov    edx,0xc0022b80
c001b763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b767:	89 10                	mov    DWORD PTR [eax],edx
c001b769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b76d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b774:	90                   	nop
c001b775:	83 c4 0c             	add    esp,0xc
c001b778:	c3                   	ret    
c001b779:	90                   	nop

c001b77a <IDE::prepareInterrupt(unsigned char)>:
c001b77a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b77f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b783:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b78b:	c3                   	ret    

c001b78c <selectDrive(unsigned char, unsigned char)>:
c001b78c:	c3                   	ret    
c001b78d:	90                   	nop

c001b78e <IDE::getBase(unsigned char)>:
c001b78e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b793:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b797:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b79f:	c3                   	ret    

c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b7a0:	55                   	push   ebp
c001b7a1:	57                   	push   edi
c001b7a2:	56                   	push   esi
c001b7a3:	53                   	push   ebx
c001b7a4:	83 ec 1c             	sub    esp,0x1c
c001b7a7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b7ab:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b7af:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b7b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b7b7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b7ba:	80 f9 03             	cmp    cl,0x3
c001b7bd:	77 4f                	ja     c001b80e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b7bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7c3:	0f b6 f2             	movzx  esi,dl
c001b7c6:	0f b6 db             	movzx  ebx,bl
c001b7c9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b7cc:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b7d1:	80 ca 80             	or     dl,0x80
c001b7d4:	52                   	push   edx
c001b7d5:	6a 0c                	push   0xc
c001b7d7:	56                   	push   esi
c001b7d8:	57                   	push   edi
c001b7d9:	e8 c2 ff ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7de:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b7e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7e7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b7eb:	ee                   	out    dx,al
c001b7ec:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b7f1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b7f5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b7f9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b801:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b805:	83 c4 2c             	add    esp,0x2c
c001b808:	5b                   	pop    ebx
c001b809:	5e                   	pop    esi
c001b80a:	5f                   	pop    edi
c001b80b:	5d                   	pop    ebp
c001b80c:	eb 92                	jmp    c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b80e:	0f b6 cb             	movzx  ecx,bl
c001b811:	83 f9 07             	cmp    ecx,0x7
c001b814:	77 12                	ja     c001b828 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b816:	0f b6 d2             	movzx  edx,dl
c001b819:	0f b6 db             	movzx  ebx,bl
c001b81c:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b824:	01 da                	add    edx,ebx
c001b826:	eb 2f                	jmp    c001b857 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b828:	83 f9 0d             	cmp    ecx,0xd
c001b82b:	77 13                	ja     c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b82d:	0f b6 d2             	movzx  edx,dl
c001b830:	0f b6 db             	movzx  ebx,bl
c001b833:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b83a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b83e:	eb 17                	jmp    c001b857 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b840:	83 f9 15             	cmp    ecx,0x15
c001b843:	77 13                	ja     c001b858 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b845:	0f b6 d2             	movzx  edx,dl
c001b848:	0f b6 db             	movzx  ebx,bl
c001b84b:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b853:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b857:	ee                   	out    dx,al
c001b858:	83 c4 1c             	add    esp,0x1c
c001b85b:	5b                   	pop    ebx
c001b85c:	5e                   	pop    esi
c001b85d:	5f                   	pop    edi
c001b85e:	5d                   	pop    ebp
c001b85f:	c3                   	ret    

c001b860 <IDE::read(unsigned char, unsigned char)>:
c001b860:	57                   	push   edi
c001b861:	56                   	push   esi
c001b862:	53                   	push   ebx
c001b863:	83 ec 10             	sub    esp,0x10
c001b866:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b86a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b86e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b872:	8d 42 f8             	lea    eax,[edx-0x8]
c001b875:	3c 03                	cmp    al,0x3
c001b877:	77 48                	ja     c001b8c1 <IDE::read(unsigned char, unsigned char)+0x61>
c001b879:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b87d:	0f b6 f1             	movzx  esi,cl
c001b880:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b883:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b888:	0c 80                	or     al,0x80
c001b88a:	50                   	push   eax
c001b88b:	6a 0c                	push   0xc
c001b88d:	56                   	push   esi
c001b88e:	53                   	push   ebx
c001b88f:	e8 0c ff ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b894:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b898:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b89d:	0f b6 d2             	movzx  edx,dl
c001b8a0:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b8a4:	ec                   	in     al,dx
c001b8a5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b8a9:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001b8ae:	52                   	push   edx
c001b8af:	6a 0c                	push   0xc
c001b8b1:	56                   	push   esi
c001b8b2:	53                   	push   ebx
c001b8b3:	e8 e8 fe ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8b8:	83 c4 20             	add    esp,0x20
c001b8bb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b8bf:	eb 4c                	jmp    c001b90d <IDE::read(unsigned char, unsigned char)+0xad>
c001b8c1:	0f b6 f2             	movzx  esi,dl
c001b8c4:	83 fe 07             	cmp    esi,0x7
c001b8c7:	77 12                	ja     c001b8db <IDE::read(unsigned char, unsigned char)+0x7b>
c001b8c9:	0f b6 c9             	movzx  ecx,cl
c001b8cc:	0f b6 d2             	movzx  edx,dl
c001b8cf:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001b8d7:	01 c2                	add    edx,eax
c001b8d9:	eb 31                	jmp    c001b90c <IDE::read(unsigned char, unsigned char)+0xac>
c001b8db:	83 fe 0d             	cmp    esi,0xd
c001b8de:	77 13                	ja     c001b8f3 <IDE::read(unsigned char, unsigned char)+0x93>
c001b8e0:	0f b6 c9             	movzx  ecx,cl
c001b8e3:	0f b6 d2             	movzx  edx,dl
c001b8e6:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001b8ed:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b8f1:	eb 19                	jmp    c001b90c <IDE::read(unsigned char, unsigned char)+0xac>
c001b8f3:	31 c0                	xor    eax,eax
c001b8f5:	83 fe 15             	cmp    esi,0x15
c001b8f8:	77 13                	ja     c001b90d <IDE::read(unsigned char, unsigned char)+0xad>
c001b8fa:	0f b6 c9             	movzx  ecx,cl
c001b8fd:	0f b6 d2             	movzx  edx,dl
c001b900:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001b908:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b90c:	ec                   	in     al,dx
c001b90d:	83 c4 10             	add    esp,0x10
c001b910:	5b                   	pop    ebx
c001b911:	5e                   	pop    esi
c001b912:	5f                   	pop    edi
c001b913:	c3                   	ret    

c001b914 <IDE::waitInterrupt(unsigned char)>:
c001b914:	55                   	push   ebp
c001b915:	57                   	push   edi
c001b916:	56                   	push   esi
c001b917:	53                   	push   ebx
c001b918:	31 db                	xor    ebx,ebx
c001b91a:	83 ec 0c             	sub    esp,0xc
c001b91d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b921:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b926:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b92e:	89 e8                	mov    eax,ebp
c001b930:	84 c0                	test   al,al
c001b932:	75 30                	jne    c001b964 <IDE::waitInterrupt(unsigned char)+0x50>
c001b934:	50                   	push   eax
c001b935:	6a 0c                	push   0xc
c001b937:	56                   	push   esi
c001b938:	57                   	push   edi
c001b939:	e8 22 ff ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001b93e:	83 c4 10             	add    esp,0x10
c001b941:	a8 01                	test   al,0x1
c001b943:	75 27                	jne    c001b96c <IDE::waitInterrupt(unsigned char)+0x58>
c001b945:	f6 c3 04             	test   bl,0x4
c001b948:	75 12                	jne    c001b95c <IDE::waitInterrupt(unsigned char)+0x48>
c001b94a:	83 fb 32             	cmp    ebx,0x32
c001b94d:	7e 0d                	jle    c001b95c <IDE::waitInterrupt(unsigned char)+0x48>
c001b94f:	83 ec 0c             	sub    esp,0xc
c001b952:	6a 64                	push   0x64
c001b954:	e8 73 a4 ff ff       	call   c0015dcc <milliTenthSleep(unsigned int)>
c001b959:	83 c4 10             	add    esp,0x10
c001b95c:	83 fb 3c             	cmp    ebx,0x3c
c001b95f:	74 0b                	je     c001b96c <IDE::waitInterrupt(unsigned char)+0x58>
c001b961:	43                   	inc    ebx
c001b962:	eb c2                	jmp    c001b926 <IDE::waitInterrupt(unsigned char)+0x12>
c001b964:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b96c:	83 c4 0c             	add    esp,0xc
c001b96f:	89 e8                	mov    eax,ebp
c001b971:	5b                   	pop    ebx
c001b972:	5e                   	pop    esi
c001b973:	5f                   	pop    edi
c001b974:	5d                   	pop    ebp
c001b975:	c3                   	ret    

c001b976 <ideChannel0IRQHandler(regs*, void*)>:
c001b976:	83 ec 10             	sub    esp,0x10
c001b979:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b97d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b984:	6a 07                	push   0x7
c001b986:	6a 00                	push   0x0
c001b988:	50                   	push   eax
c001b989:	e8 d2 fe ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001b98e:	83 c4 1c             	add    esp,0x1c
c001b991:	c3                   	ret    

c001b992 <ideChannel1IRQHandler(regs*, void*)>:
c001b992:	83 ec 10             	sub    esp,0x10
c001b995:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b999:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b9a0:	6a 07                	push   0x7
c001b9a2:	6a 01                	push   0x1
c001b9a4:	50                   	push   eax
c001b9a5:	e8 b6 fe ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001b9aa:	83 c4 1c             	add    esp,0x1c
c001b9ad:	c3                   	ret    

c001b9ae <IDE::enableIRQs(unsigned char, bool)>:
c001b9ae:	57                   	push   edi
c001b9af:	b8 02 00 00 00       	mov    eax,0x2
c001b9b4:	56                   	push   esi
c001b9b5:	53                   	push   ebx
c001b9b6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b9bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b9bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b9c3:	74 02                	je     c001b9c7 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b9c5:	31 c0                	xor    eax,eax
c001b9c7:	0f b6 db             	movzx  ebx,bl
c001b9ca:	bf 04 00 00 00       	mov    edi,0x4
c001b9cf:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b9d6:	50                   	push   eax
c001b9d7:	6a 0c                	push   0xc
c001b9d9:	53                   	push   ebx
c001b9da:	56                   	push   esi
c001b9db:	e8 c0 fd ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9e0:	83 c4 10             	add    esp,0x10
c001b9e3:	50                   	push   eax
c001b9e4:	6a 0c                	push   0xc
c001b9e6:	53                   	push   ebx
c001b9e7:	56                   	push   esi
c001b9e8:	e8 73 fe ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001b9ed:	83 c4 10             	add    esp,0x10
c001b9f0:	4f                   	dec    edi
c001b9f1:	75 f0                	jne    c001b9e3 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b9f3:	5b                   	pop    ebx
c001b9f4:	5e                   	pop    esi
c001b9f5:	5f                   	pop    edi
c001b9f6:	c3                   	ret    
c001b9f7:	90                   	nop

c001b9f8 <IDE::open(int, int, void*)>:
c001b9f8:	55                   	push   ebp
c001b9f9:	57                   	push   edi
c001b9fa:	56                   	push   esi
c001b9fb:	53                   	push   ebx
c001b9fc:	83 ec 1c             	sub    esp,0x1c
c001b9ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba03:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ba0a:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ba13:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ba1c:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ba23:	0f 85 da 02 00 00    	jne    c001bd03 <IDE::open(int, int, void*)+0x30b>
c001ba29:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ba2f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001ba33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba37:	83 e0 7f             	and    eax,0x7f
c001ba3a:	83 f8 05             	cmp    eax,0x5
c001ba3d:	74 05                	je     c001ba44 <IDE::open(int, int, void*)+0x4c>
c001ba3f:	83 f8 0f             	cmp    eax,0xf
c001ba42:	75 32                	jne    c001ba76 <IDE::open(int, int, void*)+0x7e>
c001ba44:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ba4a:	83 e0 fc             	and    eax,0xfffffffc
c001ba4d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ba54:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ba5a:	83 e0 fc             	and    eax,0xfffffffc
c001ba5d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ba64:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ba6a:	83 e0 fc             	and    eax,0xfffffffc
c001ba6d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ba74:	eb 14                	jmp    c001ba8a <IDE::open(int, int, void*)+0x92>
c001ba76:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ba80:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ba8a:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001ba91:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ba96:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ba9d:	89 fa                	mov    edx,edi
c001ba9f:	89 f1                	mov    ecx,esi
c001baa1:	c1 e1 10             	shl    ecx,0x10
c001baa4:	89 e8                	mov    eax,ebp
c001baa6:	c1 e0 0b             	shl    eax,0xb
c001baa9:	09 c1                	or     ecx,eax
c001baab:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bab2:	c1 e0 08             	shl    eax,0x8
c001bab5:	09 c1                	or     ecx,eax
c001bab7:	89 c8                	mov    eax,ecx
c001bab9:	0d 08 00 00 80       	or     eax,0x80000008
c001babe:	ef                   	out    dx,eax
c001babf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bac4:	ed                   	in     eax,dx
c001bac5:	c1 e8 10             	shr    eax,0x10
c001bac8:	3d ff ff 00 00       	cmp    eax,0xffff
c001bacd:	0f 84 f9 00 00 00    	je     c001bbcc <IDE::open(int, int, void*)+0x1d4>
c001bad3:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bad9:	89 fa                	mov    edx,edi
c001badb:	89 c8                	mov    eax,ecx
c001badd:	ef                   	out    dx,eax
c001bade:	b0 fe                	mov    al,0xfe
c001bae0:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bae5:	ee                   	out    dx,al
c001bae6:	89 c8                	mov    eax,ecx
c001bae8:	89 fa                	mov    edx,edi
c001baea:	ef                   	out    dx,eax
c001baeb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001baf0:	ed                   	in     eax,dx
c001baf1:	3c fe                	cmp    al,0xfe
c001baf3:	0f 85 a4 00 00 00    	jne    c001bb9d <IDE::open(int, int, void*)+0x1a5>
c001baf9:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001baff:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bb06:	74 30                	je     c001bb38 <IDE::open(int, int, void*)+0x140>
c001bb08:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bb0e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bb12:	83 ec 0c             	sub    esp,0xc
c001bb15:	40                   	inc    eax
c001bb16:	0f b6 c0             	movzx  eax,al
c001bb19:	50                   	push   eax
c001bb1a:	55                   	push   ebp
c001bb1b:	56                   	push   esi
c001bb1c:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bb22:	51                   	push   ecx
c001bb23:	e8 84 3a ff ff       	call   c000f5ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bb28:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bb2d:	83 c4 1c             	add    esp,0x1c
c001bb30:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bb36:	eb 0a                	jmp    c001bb42 <IDE::open(int, int, void*)+0x14a>
c001bb38:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bb42:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bb49:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001bb4e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb55:	89 ea                	mov    edx,ebp
c001bb57:	c1 e1 10             	shl    ecx,0x10
c001bb5a:	c1 e0 08             	shl    eax,0x8
c001bb5d:	09 c1                	or     ecx,eax
c001bb5f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bb66:	c1 e0 0b             	shl    eax,0xb
c001bb69:	09 c1                	or     ecx,eax
c001bb6b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bb71:	89 c8                	mov    eax,ecx
c001bb73:	ef                   	out    dx,eax
c001bb74:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001bb7a:	be fc 0c 00 00       	mov    esi,0xcfc
c001bb7f:	89 f2                	mov    edx,esi
c001bb81:	89 f8                	mov    eax,edi
c001bb83:	ee                   	out    dx,al
c001bb84:	89 c8                	mov    eax,ecx
c001bb86:	89 ea                	mov    edx,ebp
c001bb88:	ef                   	out    dx,eax
c001bb89:	89 f2                	mov    edx,esi
c001bb8b:	ed                   	in     eax,dx
c001bb8c:	0f b6 c0             	movzx  eax,al
c001bb8f:	39 f8                	cmp    eax,edi
c001bb91:	74 49                	je     c001bbdc <IDE::open(int, int, void*)+0x1e4>
c001bb93:	83 ec 0c             	sub    esp,0xc
c001bb96:	68 08 2b 02 c0       	push   0xc0022b08
c001bb9b:	eb 37                	jmp    c001bbd4 <IDE::open(int, int, void*)+0x1dc>
c001bb9d:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bba6:	75 1a                	jne    c001bbc2 <IDE::open(int, int, void*)+0x1ca>
c001bba8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bbad:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bbb2:	74 05                	je     c001bbb9 <IDE::open(int, int, void*)+0x1c1>
c001bbb4:	83 c0 80             	add    eax,0xffffff80
c001bbb7:	75 09                	jne    c001bbc2 <IDE::open(int, int, void*)+0x1ca>
c001bbb9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bbc0:	eb 1a                	jmp    c001bbdc <IDE::open(int, int, void*)+0x1e4>
c001bbc2:	83 ec 0c             	sub    esp,0xc
c001bbc5:	68 10 2b 02 c0       	push   0xc0022b10
c001bbca:	eb 08                	jmp    c001bbd4 <IDE::open(int, int, void*)+0x1dc>
c001bbcc:	83 ec 0c             	sub    esp,0xc
c001bbcf:	68 41 2b 02 c0       	push   0xc0022b41
c001bbd4:	e8 d4 55 ff ff       	call   c00111ad <KePanic(char const*)>
c001bbd9:	83 c4 10             	add    esp,0x10
c001bbdc:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bbe3:	74 1a                	je     c001bbff <IDE::open(int, int, void*)+0x207>
c001bbe5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bbeb:	83 e0 fc             	and    eax,0xfffffffc
c001bbee:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bbf5:	83 c0 08             	add    eax,0x8
c001bbf8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bbff:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bc05:	89 c2                	mov    edx,eax
c001bc07:	83 e2 0f             	and    edx,0xf
c001bc0a:	83 fa 08             	cmp    edx,0x8
c001bc0d:	75 0a                	jne    c001bc19 <IDE::open(int, int, void*)+0x221>
c001bc0f:	83 e8 02             	sub    eax,0x2
c001bc12:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bc19:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bc1f:	89 c2                	mov    edx,eax
c001bc21:	83 e2 0f             	and    edx,0xf
c001bc24:	83 fa 08             	cmp    edx,0x8
c001bc27:	75 0a                	jne    c001bc33 <IDE::open(int, int, void*)+0x23b>
c001bc29:	83 e8 02             	sub    eax,0x2
c001bc2c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bc33:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bc3a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bc41:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc44:	89 d0                	mov    eax,edx
c001bc46:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc4a:	8d 7a 01             	lea    edi,[edx+0x1]
c001bc4d:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bc51:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc55:	83 e1 3f             	and    ecx,0x3f
c001bc58:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc5c:	89 f9                	mov    ecx,edi
c001bc5e:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bc65:	8d 78 02             	lea    edi,[eax+0x2]
c001bc68:	0f b6 c9             	movzx  ecx,cl
c001bc6b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc6e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bc72:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc76:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bc7a:	83 e2 3f             	and    edx,0x3f
c001bc7d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bc81:	89 f9                	mov    ecx,edi
c001bc83:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bc89:	8d 78 03             	lea    edi,[eax+0x3]
c001bc8c:	0f b6 d1             	movzx  edx,cl
c001bc8f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc92:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bc96:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc9a:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc9e:	83 e1 3f             	and    ecx,0x3f
c001bca1:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bca5:	89 f9                	mov    ecx,edi
c001bca7:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bcad:	8d 78 04             	lea    edi,[eax+0x4]
c001bcb0:	0f b6 c9             	movzx  ecx,cl
c001bcb3:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bcb6:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bcba:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bcbe:	89 fa                	mov    edx,edi
c001bcc0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bcc6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bcca:	83 e2 3f             	and    edx,0x3f
c001bccd:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bcd1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bcd8:	66 85 f6             	test   si,si
c001bcdb:	74 65                	je     c001bd42 <IDE::open(int, int, void*)+0x34a>
c001bcdd:	89 f9                	mov    ecx,edi
c001bcdf:	83 c0 05             	add    eax,0x5
c001bce2:	0f b6 d1             	movzx  edx,cl
c001bce5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bce8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bcec:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bcf0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bcf6:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bcfa:	83 e0 3f             	and    eax,0x3f
c001bcfd:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bd01:	eb 3f                	jmp    c001bd42 <IDE::open(int, int, void*)+0x34a>
c001bd03:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bd0a:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bd10:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bd17:	05 06 02 00 00       	add    eax,0x206
c001bd1c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd23:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bd2a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bd31:	05 06 02 00 00       	add    eax,0x206
c001bd36:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd3d:	e9 bd fe ff ff       	jmp    c001bbff <IDE::open(int, int, void*)+0x207>
c001bd42:	50                   	push   eax
c001bd43:	50                   	push   eax
c001bd44:	6a 00                	push   0x0
c001bd46:	53                   	push   ebx
c001bd47:	e8 2e fa ff ff       	call   c001b77a <IDE::prepareInterrupt(unsigned char)>
c001bd4c:	5a                   	pop    edx
c001bd4d:	59                   	pop    ecx
c001bd4e:	6a 01                	push   0x1
c001bd50:	53                   	push   ebx
c001bd51:	e8 24 fa ff ff       	call   c001b77a <IDE::prepareInterrupt(unsigned char)>
c001bd56:	83 c4 0c             	add    esp,0xc
c001bd59:	6a 00                	push   0x0
c001bd5b:	6a 00                	push   0x0
c001bd5d:	53                   	push   ebx
c001bd5e:	e8 4b fc ff ff       	call   c001b9ae <IDE::enableIRQs(unsigned char, bool)>
c001bd63:	83 c4 0c             	add    esp,0xc
c001bd66:	6a 00                	push   0x0
c001bd68:	6a 01                	push   0x1
c001bd6a:	53                   	push   ebx
c001bd6b:	e8 3e fc ff ff       	call   c001b9ae <IDE::enableIRQs(unsigned char, bool)>
c001bd70:	83 c4 10             	add    esp,0x10
c001bd73:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bd7a:	74 34                	je     c001bdb0 <IDE::open(int, int, void*)+0x3b8>
c001bd7c:	83 ec 0c             	sub    esp,0xc
c001bd7f:	53                   	push   ebx
c001bd80:	6a 01                	push   0x1
c001bd82:	68 76 b9 01 c0       	push   0xc001b976
c001bd87:	6a 0e                	push   0xe
c001bd89:	53                   	push   ebx
c001bd8a:	e8 2d 08 ff ff       	call   c000c5bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd8f:	83 c4 14             	add    esp,0x14
c001bd92:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bd98:	53                   	push   ebx
c001bd99:	6a 01                	push   0x1
c001bd9b:	68 92 b9 01 c0       	push   0xc001b992
c001bda0:	6a 0f                	push   0xf
c001bda2:	53                   	push   ebx
c001bda3:	e8 14 08 ff ff       	call   c000c5bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bda8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bdae:	eb 38                	jmp    c001bde8 <IDE::open(int, int, void*)+0x3f0>
c001bdb0:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bdba:	83 ec 0c             	sub    esp,0xc
c001bdbd:	53                   	push   ebx
c001bdbe:	6a 00                	push   0x0
c001bdc0:	68 76 b9 01 c0       	push   0xc001b976
c001bdc5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bdcb:	53                   	push   ebx
c001bdcc:	e8 eb 07 ff ff       	call   c000c5bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdd1:	83 c4 14             	add    esp,0x14
c001bdd4:	53                   	push   ebx
c001bdd5:	6a 00                	push   0x0
c001bdd7:	68 92 b9 01 c0       	push   0xc001b992
c001bddc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bde2:	53                   	push   ebx
c001bde3:	e8 d4 07 ff ff       	call   c000c5bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bde8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdea:	83 c4 20             	add    esp,0x20
c001bded:	83 ec 0c             	sub    esp,0xc
c001bdf0:	53                   	push   ebx
c001bdf1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bdf4:	83 c4 0c             	add    esp,0xc
c001bdf7:	6a 07                	push   0x7
c001bdf9:	6a 00                	push   0x0
c001bdfb:	53                   	push   ebx
c001bdfc:	e8 5f fa ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001be01:	83 c4 0c             	add    esp,0xc
c001be04:	6a 07                	push   0x7
c001be06:	6a 01                	push   0x1
c001be08:	53                   	push   ebx
c001be09:	e8 52 fa ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001be0e:	83 c4 0c             	add    esp,0xc
c001be11:	6a 01                	push   0x1
c001be13:	6a 00                	push   0x0
c001be15:	53                   	push   ebx
c001be16:	e8 93 fb ff ff       	call   c001b9ae <IDE::enableIRQs(unsigned char, bool)>
c001be1b:	83 c4 0c             	add    esp,0xc
c001be1e:	6a 01                	push   0x1
c001be20:	6a 01                	push   0x1
c001be22:	53                   	push   ebx
c001be23:	e8 86 fb ff ff       	call   c001b9ae <IDE::enableIRQs(unsigned char, bool)>
c001be28:	83 c4 2c             	add    esp,0x2c
c001be2b:	31 c0                	xor    eax,eax
c001be2d:	5b                   	pop    ebx
c001be2e:	5e                   	pop    esi
c001be2f:	5f                   	pop    edi
c001be30:	5d                   	pop    ebp
c001be31:	c3                   	ret    

c001be32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001be32:	55                   	push   ebp
c001be33:	57                   	push   edi
c001be34:	56                   	push   esi
c001be35:	53                   	push   ebx
c001be36:	83 ec 1c             	sub    esp,0x1c
c001be39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001be3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be41:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be45:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001be49:	8d 42 f8             	lea    eax,[edx-0x8]
c001be4c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001be50:	3c 03                	cmp    al,0x3
c001be52:	77 5a                	ja     c001beae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001be54:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be58:	0f b6 db             	movzx  ebx,bl
c001be5b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001be5f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001be62:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be67:	0c 80                	or     al,0x80
c001be69:	50                   	push   eax
c001be6a:	6a 0c                	push   0xc
c001be6c:	53                   	push   ebx
c001be6d:	56                   	push   esi
c001be6e:	e8 2d f9 ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be77:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be80:	0f b6 d2             	movzx  edx,dl
c001be83:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be87:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001be89:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be8e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001be92:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be96:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be9e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bea2:	83 c4 2c             	add    esp,0x2c
c001bea5:	5b                   	pop    ebx
c001bea6:	5e                   	pop    esi
c001bea7:	5f                   	pop    edi
c001bea8:	5d                   	pop    ebp
c001bea9:	e9 f2 f8 ff ff       	jmp    c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001beae:	0f b6 c2             	movzx  eax,dl
c001beb1:	83 f8 07             	cmp    eax,0x7
c001beb4:	77 12                	ja     c001bec8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001beb6:	0f b6 db             	movzx  ebx,bl
c001beb9:	0f b6 c2             	movzx  eax,dl
c001bebc:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001bec4:	01 c2                	add    edx,eax
c001bec6:	eb 2f                	jmp    c001bef7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bec8:	83 f8 0d             	cmp    eax,0xd
c001becb:	77 13                	ja     c001bee0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001becd:	0f b6 db             	movzx  ebx,bl
c001bed0:	0f b6 d2             	movzx  edx,dl
c001bed3:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001beda:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bede:	eb 17                	jmp    c001bef7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bee0:	83 f8 15             	cmp    eax,0x15
c001bee3:	77 14                	ja     c001bef9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001bee5:	0f b6 db             	movzx  ebx,bl
c001bee8:	0f b6 d2             	movzx  edx,dl
c001beeb:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001bef3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bef7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bef9:	83 c4 1c             	add    esp,0x1c
c001befc:	5b                   	pop    ebx
c001befd:	5e                   	pop    esi
c001befe:	5f                   	pop    edi
c001beff:	5d                   	pop    ebp
c001bf00:	c3                   	ret    
c001bf01:	90                   	nop

c001bf02 <IDE::detect()>:
c001bf02:	55                   	push   ebp
c001bf03:	57                   	push   edi
c001bf04:	56                   	push   esi
c001bf05:	53                   	push   ebx
c001bf06:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bf0c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bf13:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bf1a:	0f 85 9e 02 00 00    	jne    c001c1be <IDE::detect()+0x2bc>
c001bf20:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bf27:	31 f6                	xor    esi,esi
c001bf29:	31 ff                	xor    edi,edi
c001bf2b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bf33:	89 f8                	mov    eax,edi
c001bf35:	c1 e0 06             	shl    eax,0x6
c001bf38:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bf40:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf44:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf4c:	c1 e0 04             	shl    eax,0x4
c001bf4f:	83 c8 a0             	or     eax,0xffffffa0
c001bf52:	0f b6 c0             	movzx  eax,al
c001bf55:	50                   	push   eax
c001bf56:	6a 06                	push   0x6
c001bf58:	56                   	push   esi
c001bf59:	53                   	push   ebx
c001bf5a:	e8 41 f8 ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf5f:	83 c4 0c             	add    esp,0xc
c001bf62:	6a 0c                	push   0xc
c001bf64:	56                   	push   esi
c001bf65:	53                   	push   ebx
c001bf66:	e8 f5 f8 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001bf6b:	83 c4 0c             	add    esp,0xc
c001bf6e:	6a 0c                	push   0xc
c001bf70:	56                   	push   esi
c001bf71:	53                   	push   ebx
c001bf72:	e8 e9 f8 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001bf77:	83 c4 0c             	add    esp,0xc
c001bf7a:	6a 0c                	push   0xc
c001bf7c:	56                   	push   esi
c001bf7d:	53                   	push   ebx
c001bf7e:	e8 dd f8 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001bf83:	83 c4 0c             	add    esp,0xc
c001bf86:	6a 0c                	push   0xc
c001bf88:	56                   	push   esi
c001bf89:	53                   	push   ebx
c001bf8a:	e8 d1 f8 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001bf8f:	68 ec 00 00 00       	push   0xec
c001bf94:	6a 07                	push   0x7
c001bf96:	56                   	push   esi
c001bf97:	53                   	push   ebx
c001bf98:	e8 03 f8 ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf9d:	83 c4 1c             	add    esp,0x1c
c001bfa0:	6a 0c                	push   0xc
c001bfa2:	56                   	push   esi
c001bfa3:	53                   	push   ebx
c001bfa4:	e8 b7 f8 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001bfa9:	83 c4 0c             	add    esp,0xc
c001bfac:	6a 0c                	push   0xc
c001bfae:	56                   	push   esi
c001bfaf:	53                   	push   ebx
c001bfb0:	e8 ab f8 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001bfb5:	83 c4 0c             	add    esp,0xc
c001bfb8:	6a 0c                	push   0xc
c001bfba:	56                   	push   esi
c001bfbb:	53                   	push   ebx
c001bfbc:	e8 9f f8 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001bfc1:	83 c4 0c             	add    esp,0xc
c001bfc4:	6a 0c                	push   0xc
c001bfc6:	56                   	push   esi
c001bfc7:	53                   	push   ebx
c001bfc8:	e8 93 f8 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001bfcd:	83 c4 0c             	add    esp,0xc
c001bfd0:	6a 0c                	push   0xc
c001bfd2:	56                   	push   esi
c001bfd3:	53                   	push   ebx
c001bfd4:	e8 87 f8 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001bfd9:	83 c4 10             	add    esp,0x10
c001bfdc:	84 c0                	test   al,al
c001bfde:	0f 84 61 01 00 00    	je     c001c145 <IDE::detect()+0x243>
c001bfe4:	31 ed                	xor    ebp,ebp
c001bfe6:	50                   	push   eax
c001bfe7:	6a 0c                	push   0xc
c001bfe9:	56                   	push   esi
c001bfea:	53                   	push   ebx
c001bfeb:	e8 70 f8 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001bff0:	83 c4 10             	add    esp,0x10
c001bff3:	a8 01                	test   al,0x1
c001bff5:	0f 85 6b 01 00 00    	jne    c001c166 <IDE::detect()+0x264>
c001bffb:	a8 80                	test   al,0x80
c001bffd:	75 04                	jne    c001c003 <IDE::detect()+0x101>
c001bfff:	a8 08                	test   al,0x8
c001c001:	75 23                	jne    c001c026 <IDE::detect()+0x124>
c001c003:	45                   	inc    ebp
c001c004:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c00a:	7e da                	jle    c001bfe6 <IDE::detect()+0xe4>
c001c00c:	83 ec 0c             	sub    esp,0xc
c001c00f:	6a 32                	push   0x32
c001c011:	e8 b6 9d ff ff       	call   c0015dcc <milliTenthSleep(unsigned int)>
c001c016:	83 c4 10             	add    esp,0x10
c001c019:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c01f:	75 c5                	jne    c001bfe6 <IDE::detect()+0xe4>
c001c021:	e9 40 01 00 00       	jmp    c001c166 <IDE::detect()+0x264>
c001c026:	31 c9                	xor    ecx,ecx
c001c028:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c02c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c030:	83 ec 0c             	sub    esp,0xc
c001c033:	68 80 00 00 00       	push   0x80
c001c038:	55                   	push   ebp
c001c039:	6a 00                	push   0x0
c001c03b:	56                   	push   esi
c001c03c:	53                   	push   ebx
c001c03d:	e8 f0 fd ff ff       	call   c001be32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c042:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c047:	89 f8                	mov    eax,edi
c001c049:	c1 e0 06             	shl    eax,0x6
c001c04c:	01 d8                	add    eax,ebx
c001c04e:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c055:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c05c:	89 d1                	mov    ecx,edx
c001c05e:	89 f2                	mov    edx,esi
c001c060:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c066:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c06a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c070:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c074:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c07b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c083:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c08a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c092:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c098:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c09f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c0a5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c0a9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c0ad:	83 c4 20             	add    esp,0x20
c001c0b0:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c0b3:	83 c5 02             	add    ebp,0x2
c001c0b6:	83 c0 02             	add    eax,0x2
c001c0b9:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c0bf:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c0c2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c0c8:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c0cc:	75 e2                	jne    c001c0b0 <IDE::detect()+0x1ae>
c001c0ce:	89 f8                	mov    eax,edi
c001c0d0:	c1 e0 06             	shl    eax,0x6
c001c0d3:	01 d8                	add    eax,ebx
c001c0d5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c0dc:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c0e3:	c1 ea 09             	shr    edx,0x9
c001c0e6:	83 e2 01             	and    edx,0x1
c001c0e9:	80 e1 01             	and    cl,0x1
c001c0ec:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c0f2:	75 22                	jne    c001c116 <IDE::detect()+0x214>
c001c0f4:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c0fb:	74 47                	je     c001c144 <IDE::detect()+0x242>
c001c0fd:	83 ec 0c             	sub    esp,0xc
c001c100:	68 7c 01 00 00       	push   0x17c
c001c105:	e8 c9 b9 fe ff       	call   c0007ad3 <malloc>
c001c10a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c10d:	89 c5                	mov    ebp,eax
c001c10f:	e8 16 05 00 00       	call   c001c62a <ATA::ATA()>
c001c114:	eb 17                	jmp    c001c12d <IDE::detect()+0x22b>
c001c116:	83 ec 0c             	sub    esp,0xc
c001c119:	68 84 01 00 00       	push   0x184
c001c11e:	e8 b0 b9 fe ff       	call   c0007ad3 <malloc>
c001c123:	89 04 24             	mov    DWORD PTR [esp],eax
c001c126:	89 c5                	mov    ebp,eax
c001c128:	e8 6f 0e 00 00       	call   c001cf9c <ATAPI::ATAPI()>
c001c12d:	5a                   	pop    edx
c001c12e:	59                   	pop    ecx
c001c12f:	55                   	push   ebp
c001c130:	53                   	push   ebx
c001c131:	e8 da 04 ff ff       	call   c000c610 <Device::addChild(Device*)>
c001c136:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c139:	53                   	push   ebx
c001c13a:	57                   	push   edi
c001c13b:	6a 00                	push   0x0
c001c13d:	55                   	push   ebp
c001c13e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c141:	83 c4 20             	add    esp,0x20
c001c144:	47                   	inc    edi
c001c145:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c14a:	74 0d                	je     c001c159 <IDE::detect()+0x257>
c001c14c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c154:	e9 da fd ff ff       	jmp    c001bf33 <IDE::detect()+0x31>
c001c159:	4e                   	dec    esi
c001c15a:	74 62                	je     c001c1be <IDE::detect()+0x2bc>
c001c15c:	be 01 00 00 00       	mov    esi,0x1
c001c161:	e9 c5 fd ff ff       	jmp    c001bf2b <IDE::detect()+0x29>
c001c166:	50                   	push   eax
c001c167:	6a 04                	push   0x4
c001c169:	56                   	push   esi
c001c16a:	53                   	push   ebx
c001c16b:	e8 f0 f6 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001c170:	83 c4 0c             	add    esp,0xc
c001c173:	6a 05                	push   0x5
c001c175:	56                   	push   esi
c001c176:	53                   	push   ebx
c001c177:	89 c5                	mov    ebp,eax
c001c179:	e8 e2 f6 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001c17e:	89 e9                	mov    ecx,ebp
c001c180:	83 c4 10             	add    esp,0x10
c001c183:	0f b6 e9             	movzx  ebp,cl
c001c186:	83 fd 14             	cmp    ebp,0x14
c001c189:	74 2d                	je     c001c1b8 <IDE::detect()+0x2b6>
c001c18b:	83 fd 69             	cmp    ebp,0x69
c001c18e:	75 b5                	jne    c001c145 <IDE::detect()+0x243>
c001c190:	3c 96                	cmp    al,0x96
c001c192:	75 b1                	jne    c001c145 <IDE::detect()+0x243>
c001c194:	68 a1 00 00 00       	push   0xa1
c001c199:	6a 07                	push   0x7
c001c19b:	56                   	push   esi
c001c19c:	53                   	push   ebx
c001c19d:	e8 fe f5 ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1a2:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c1a9:	e8 1e 9c ff ff       	call   c0015dcc <milliTenthSleep(unsigned int)>
c001c1ae:	83 c4 10             	add    esp,0x10
c001c1b1:	b1 01                	mov    cl,0x1
c001c1b3:	e9 70 fe ff ff       	jmp    c001c028 <IDE::detect()+0x126>
c001c1b8:	3c eb                	cmp    al,0xeb
c001c1ba:	75 cf                	jne    c001c18b <IDE::detect()+0x289>
c001c1bc:	eb d6                	jmp    c001c194 <IDE::detect()+0x292>
c001c1be:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c1c4:	5b                   	pop    ebx
c001c1c5:	5e                   	pop    esi
c001c1c6:	5f                   	pop    edi
c001c1c7:	5d                   	pop    ebp
c001c1c8:	c3                   	ret    
c001c1c9:	90                   	nop

c001c1ca <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c1ca:	55                   	push   ebp
c001c1cb:	57                   	push   edi
c001c1cc:	56                   	push   esi
c001c1cd:	53                   	push   ebx
c001c1ce:	83 ec 1c             	sub    esp,0x1c
c001c1d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c1d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c1d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c1dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c1e5:	88 c3                	mov    bl,al
c001c1e7:	25 ff 00 00 00       	and    eax,0xff
c001c1ec:	0f 84 88 00 00 00    	je     c001c27a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c1f2:	83 ec 0c             	sub    esp,0xc
c001c1f5:	89 c7                	mov    edi,eax
c001c1f7:	68 6b 2b 02 c0       	push   0xc0022b6b
c001c1fc:	e8 09 e7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c201:	83 c4 10             	add    esp,0x10
c001c204:	83 ff 01             	cmp    edi,0x1
c001c207:	74 6b                	je     c001c274 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c209:	83 ff 02             	cmp    edi,0x2
c001c20c:	75 58                	jne    c001c266 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c20e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c213:	50                   	push   eax
c001c214:	6a 01                	push   0x1
c001c216:	01 ff                	add    edi,edi
c001c218:	09 fe                	or     esi,edi
c001c21a:	89 f0                	mov    eax,esi
c001c21c:	0f b6 f0             	movzx  esi,al
c001c21f:	c1 e6 06             	shl    esi,0x6
c001c222:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c22a:	50                   	push   eax
c001c22b:	55                   	push   ebp
c001c22c:	e8 2f f6 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001c231:	83 c4 10             	add    esp,0x10
c001c234:	a8 01                	test   al,0x1
c001c236:	74 02                	je     c001c23a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c238:	b3 07                	mov    bl,0x7
c001c23a:	a8 02                	test   al,0x2
c001c23c:	74 02                	je     c001c240 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c23e:	b3 03                	mov    bl,0x3
c001c240:	a8 04                	test   al,0x4
c001c242:	74 02                	je     c001c246 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c244:	b3 14                	mov    bl,0x14
c001c246:	a8 08                	test   al,0x8
c001c248:	74 02                	je     c001c24c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c24a:	b3 03                	mov    bl,0x3
c001c24c:	a8 10                	test   al,0x10
c001c24e:	74 02                	je     c001c252 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c250:	b3 15                	mov    bl,0x15
c001c252:	a8 20                	test   al,0x20
c001c254:	74 02                	je     c001c258 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c256:	b3 03                	mov    bl,0x3
c001c258:	a8 40                	test   al,0x40
c001c25a:	74 02                	je     c001c25e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c25c:	b3 16                	mov    bl,0x16
c001c25e:	a8 80                	test   al,0x80
c001c260:	74 18                	je     c001c27a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c262:	b3 0d                	mov    bl,0xd
c001c264:	eb 14                	jmp    c001c27a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c266:	83 ff 03             	cmp    edi,0x3
c001c269:	74 0d                	je     c001c278 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c26b:	83 ff 04             	cmp    edi,0x4
c001c26e:	75 0a                	jne    c001c27a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c270:	b3 08                	mov    bl,0x8
c001c272:	eb 06                	jmp    c001c27a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c274:	b3 13                	mov    bl,0x13
c001c276:	eb 02                	jmp    c001c27a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c278:	b3 17                	mov    bl,0x17
c001c27a:	83 c4 1c             	add    esp,0x1c
c001c27d:	88 d8                	mov    al,bl
c001c27f:	5b                   	pop    ebx
c001c280:	5e                   	pop    esi
c001c281:	5f                   	pop    edi
c001c282:	5d                   	pop    ebp
c001c283:	c3                   	ret    

c001c284 <IDE::polling(unsigned char, unsigned int)>:
c001c284:	57                   	push   edi
c001c285:	56                   	push   esi
c001c286:	53                   	push   ebx
c001c287:	bb 04 00 00 00       	mov    ebx,0x4
c001c28c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c290:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c295:	52                   	push   edx
c001c296:	6a 0c                	push   0xc
c001c298:	56                   	push   esi
c001c299:	57                   	push   edi
c001c29a:	e8 c1 f5 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001c29f:	83 c4 10             	add    esp,0x10
c001c2a2:	4b                   	dec    ebx
c001c2a3:	75 f0                	jne    c001c295 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c2a5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c2aa:	50                   	push   eax
c001c2ab:	6a 0c                	push   0xc
c001c2ad:	56                   	push   esi
c001c2ae:	57                   	push   edi
c001c2af:	e8 ac f5 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001c2b4:	83 c4 10             	add    esp,0x10
c001c2b7:	a8 01                	test   al,0x1
c001c2b9:	75 17                	jne    c001c2d2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c2bb:	a8 20                	test   al,0x20
c001c2bd:	75 0f                	jne    c001c2ce <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c2bf:	4b                   	dec    ebx
c001c2c0:	74 10                	je     c001c2d2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c2c2:	a8 80                	test   al,0x80
c001c2c4:	75 e4                	jne    c001c2aa <IDE::polling(unsigned char, unsigned int)+0x26>
c001c2c6:	a8 08                	test   al,0x8
c001c2c8:	74 e0                	je     c001c2aa <IDE::polling(unsigned char, unsigned int)+0x26>
c001c2ca:	31 c0                	xor    eax,eax
c001c2cc:	eb 06                	jmp    c001c2d4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c2ce:	b0 01                	mov    al,0x1
c001c2d0:	eb 02                	jmp    c001c2d4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c2d2:	b0 02                	mov    al,0x2
c001c2d4:	5b                   	pop    ebx
c001c2d5:	5e                   	pop    esi
c001c2d6:	5f                   	pop    edi
c001c2d7:	c3                   	ret    

c001c2d8 <SATABus::close(int, int, void*)>:
c001c2d8:	31 c0                	xor    eax,eax
c001c2da:	c3                   	ret    
c001c2db:	90                   	nop

c001c2dc <SATABus::detect()>:
c001c2dc:	c3                   	ret    
c001c2dd:	90                   	nop

c001c2de <SATABus::SATABus()>:
c001c2de:	83 ec 0c             	sub    esp,0xc
c001c2e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e5:	83 ec 08             	sub    esp,0x8
c001c2e8:	68 a4 2b 02 c0       	push   0xc0022ba4
c001c2ed:	50                   	push   eax
c001c2ee:	e8 61 06 ff ff       	call   c000c954 <HardDiskController::HardDiskController(char const*)>
c001c2f3:	83 c4 10             	add    esp,0x10
c001c2f6:	ba d0 2b 02 c0       	mov    edx,0xc0022bd0
c001c2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ff:	89 10                	mov    DWORD PTR [eax],edx
c001c301:	83 ec 0c             	sub    esp,0xc
c001c304:	6a 50                	push   0x50
c001c306:	e8 a6 bb fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c30b:	83 c4 10             	add    esp,0x10
c001c30e:	89 c2                	mov    edx,eax
c001c310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c314:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c31a:	83 ec 0c             	sub    esp,0xc
c001c31d:	6a 50                	push   0x50
c001c31f:	e8 d1 d2 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c324:	83 c4 10             	add    esp,0x10
c001c327:	89 c2                	mov    edx,eax
c001c329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c32d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c333:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c338:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c33c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c342:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c346:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c34c:	83 ec 0c             	sub    esp,0xc
c001c34f:	6a 03                	push   0x3
c001c351:	6a 50                	push   0x50
c001c353:	51                   	push   ecx
c001c354:	52                   	push   edx
c001c355:	50                   	push   eax
c001c356:	e8 ad db fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c35b:	83 c4 20             	add    esp,0x20
c001c35e:	90                   	nop
c001c35f:	83 c4 0c             	add    esp,0xc
c001c362:	c3                   	ret    
c001c363:	90                   	nop

c001c364 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c364:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c368:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c36b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c36e:	09 c2                	or     edx,eax
c001c370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c374:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c37a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c37c:	31 c0                	xor    eax,eax
c001c37e:	c1 e9 08             	shr    ecx,0x8
c001c381:	83 e1 0f             	and    ecx,0xf
c001c384:	39 c8                	cmp    eax,ecx
c001c386:	74 0a                	je     c001c392 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c388:	f6 c2 01             	test   dl,0x1
c001c38b:	74 08                	je     c001c395 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c38d:	d1 ea                	shr    edx,1
c001c38f:	40                   	inc    eax
c001c390:	eb f2                	jmp    c001c384 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c392:	83 c8 ff             	or     eax,0xffffffff
c001c395:	c3                   	ret    

c001c396 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c396:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c39a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c39d:	89 c2                	mov    edx,eax
c001c39f:	c1 ea 08             	shr    edx,0x8
c001c3a2:	83 e2 0f             	and    edx,0xf
c001c3a5:	4a                   	dec    edx
c001c3a6:	75 32                	jne    c001c3da <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c3a8:	83 e0 0f             	and    eax,0xf
c001c3ab:	83 f8 03             	cmp    eax,0x3
c001c3ae:	75 2a                	jne    c001c3da <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c3b0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c3b3:	b8 02 00 00 00       	mov    eax,0x2
c001c3b8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c3be:	74 1c                	je     c001c3dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c3c0:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c3c6:	b8 04 00 00 00       	mov    eax,0x4
c001c3cb:	74 0f                	je     c001c3dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c3cd:	31 c0                	xor    eax,eax
c001c3cf:	83 fa 03             	cmp    edx,0x3
c001c3d2:	0f 94 c0             	sete   al
c001c3d5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c3d9:	c3                   	ret    
c001c3da:	31 c0                	xor    eax,eax
c001c3dc:	c3                   	ret    
c001c3dd:	90                   	nop

c001c3de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c3de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3e5:	0f ba e2 0f          	bt     edx,0xf
c001c3e9:	72 f7                	jb     c001c3e2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c3eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3ee:	83 ca 10             	or     edx,0x10
c001c3f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3f7:	83 ca 01             	or     edx,0x1
c001c3fa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3fd:	c3                   	ret    

c001c3fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c3fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c402:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c405:	83 e2 fe             	and    edx,0xfffffffe
c001c408:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c40b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c40e:	83 e2 ef             	and    edx,0xffffffef
c001c411:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c414:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c417:	0f ba e2 0e          	bt     edx,0xe
c001c41b:	72 f7                	jb     c001c414 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c41d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c420:	0f ba e2 0f          	bt     edx,0xf
c001c424:	72 ee                	jb     c001c414 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c426:	c3                   	ret    
c001c427:	90                   	nop

c001c428 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c428:	55                   	push   ebp
c001c429:	57                   	push   edi
c001c42a:	56                   	push   esi
c001c42b:	53                   	push   ebx
c001c42c:	83 ec 1c             	sub    esp,0x1c
c001c42f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c433:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c437:	53                   	push   ebx
c001c438:	57                   	push   edi
c001c439:	e8 c0 ff ff ff       	call   c001c3fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c43e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c442:	83 ec 0c             	sub    esp,0xc
c001c445:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c44b:	c1 e5 0a             	shl    ebp,0xa
c001c44e:	01 e8                	add    eax,ebp
c001c450:	89 03                	mov    DWORD PTR [ebx],eax
c001c452:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c454:	68 00 04 00 00       	push   0x400
c001c459:	6a 00                	push   0x0
c001c45b:	50                   	push   eax
c001c45c:	e8 8f 40 fe ff       	call   c00004f0 <memset>
c001c461:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c467:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c46b:	83 c4 1c             	add    esp,0x1c
c001c46e:	01 e8                	add    eax,ebp
c001c470:	89 03                	mov    DWORD PTR [ebx],eax
c001c472:	c1 e6 08             	shl    esi,0x8
c001c475:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c47c:	81 c6 00 80 00 00    	add    esi,0x8000
c001c482:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c488:	01 f0                	add    eax,esi
c001c48a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c48d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c490:	68 00 01 00 00       	push   0x100
c001c495:	6a 00                	push   0x0
c001c497:	50                   	push   eax
c001c498:	e8 53 40 fe ff       	call   c00004f0 <memset>
c001c49d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c4a3:	31 d2                	xor    edx,edx
c001c4a5:	01 f0                	add    eax,esi
c001c4a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c4aa:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c4b1:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c4b7:	01 ee                	add    esi,ebp
c001c4b9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c4bd:	83 c4 10             	add    esp,0x10
c001c4c0:	c1 e5 0d             	shl    ebp,0xd
c001c4c3:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c4c9:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c4cf:	83 c6 20             	add    esi,0x20
c001c4d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4d6:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c4dc:	01 e8                	add    eax,ebp
c001c4de:	01 d0                	add    eax,edx
c001c4e0:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c4e3:	52                   	push   edx
c001c4e4:	68 00 01 00 00       	push   0x100
c001c4e9:	6a 00                	push   0x0
c001c4eb:	50                   	push   eax
c001c4ec:	e8 ff 3f fe ff       	call   c00004f0 <memset>
c001c4f1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c4f7:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c4fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c502:	83 c4 10             	add    esp,0x10
c001c505:	01 e8                	add    eax,ebp
c001c507:	01 d0                	add    eax,edx
c001c509:	81 c2 00 01 00 00    	add    edx,0x100
c001c50f:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c512:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c518:	75 af                	jne    c001c4c9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c51a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c521:	50                   	push   eax
c001c522:	50                   	push   eax
c001c523:	53                   	push   ebx
c001c524:	57                   	push   edi
c001c525:	e8 b4 fe ff ff       	call   c001c3de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c52a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c531:	83 c4 2c             	add    esp,0x2c
c001c534:	5b                   	pop    ebx
c001c535:	5e                   	pop    esi
c001c536:	5f                   	pop    edi
c001c537:	5d                   	pop    ebp
c001c538:	c3                   	ret    
c001c539:	90                   	nop

c001c53a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c53a:	55                   	push   ebp
c001c53b:	57                   	push   edi
c001c53c:	56                   	push   esi
c001c53d:	53                   	push   ebx
c001c53e:	31 db                	xor    ebx,ebx
c001c540:	83 ec 0c             	sub    esp,0xc
c001c543:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c547:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c54b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c54e:	f7 c7 01 00 00 00    	test   edi,0x1
c001c554:	74 7a                	je     c001c5d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c556:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c55a:	89 d8                	mov    eax,ebx
c001c55c:	c1 e0 07             	shl    eax,0x7
c001c55f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c566:	55                   	push   ebp
c001c567:	56                   	push   esi
c001c568:	e8 29 fe ff ff       	call   c001c396 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c56d:	5a                   	pop    edx
c001c56e:	59                   	pop    ecx
c001c56f:	83 f8 01             	cmp    eax,0x1
c001c572:	75 21                	jne    c001c595 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c574:	50                   	push   eax
c001c575:	53                   	push   ebx
c001c576:	55                   	push   ebp
c001c577:	56                   	push   esi
c001c578:	e8 ab fe ff ff       	call   c001c428 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c57d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c584:	e8 4a b5 fe ff       	call   c0007ad3 <malloc>
c001c589:	89 04 24             	mov    DWORD PTR [esp],eax
c001c58c:	89 c5                	mov    ebp,eax
c001c58e:	e8 c1 10 00 00       	call   c001d654 <SATA::SATA()>
c001c593:	eb 24                	jmp    c001c5b9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c595:	83 f8 04             	cmp    eax,0x4
c001c598:	75 36                	jne    c001c5d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c59a:	51                   	push   ecx
c001c59b:	53                   	push   ebx
c001c59c:	55                   	push   ebp
c001c59d:	56                   	push   esi
c001c59e:	e8 85 fe ff ff       	call   c001c428 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c5a3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c5aa:	e8 24 b5 fe ff       	call   c0007ad3 <malloc>
c001c5af:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5b2:	89 c5                	mov    ebp,eax
c001c5b4:	e8 f5 17 00 00       	call   c001ddae <SATAPI::SATAPI()>
c001c5b9:	58                   	pop    eax
c001c5ba:	5a                   	pop    edx
c001c5bb:	55                   	push   ebp
c001c5bc:	56                   	push   esi
c001c5bd:	e8 4e 00 ff ff       	call   c000c610 <Device::addChild(Device*)>
c001c5c2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c5c5:	56                   	push   esi
c001c5c6:	6a 00                	push   0x0
c001c5c8:	53                   	push   ebx
c001c5c9:	55                   	push   ebp
c001c5ca:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c5cd:	83 c4 20             	add    esp,0x20
c001c5d0:	d1 ef                	shr    edi,1
c001c5d2:	43                   	inc    ebx
c001c5d3:	83 fb 20             	cmp    ebx,0x20
c001c5d6:	0f 85 72 ff ff ff    	jne    c001c54e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c5dc:	83 c4 0c             	add    esp,0xc
c001c5df:	5b                   	pop    ebx
c001c5e0:	5e                   	pop    esi
c001c5e1:	5f                   	pop    edi
c001c5e2:	5d                   	pop    ebp
c001c5e3:	c3                   	ret    

c001c5e4 <SATABus::open(int, int, void*)>:
c001c5e4:	83 ec 14             	sub    esp,0x14
c001c5e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5eb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c5f1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c5f7:	52                   	push   edx
c001c5f8:	50                   	push   eax
c001c5f9:	e8 3c ff ff ff       	call   c001c53a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c5fe:	31 c0                	xor    eax,eax
c001c600:	83 c4 1c             	add    esp,0x1c
c001c603:	c3                   	ret    

c001c604 <ATA::close(int, int, void*)>:
c001c604:	83 ec 0c             	sub    esp,0xc
c001c607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c611:	85 c0                	test   eax,eax
c001c613:	74 0c                	je     c001c621 <ATA::close(int, int, void*)+0x1d>
c001c615:	8b 10                	mov    edx,DWORD PTR [eax]
c001c617:	83 ec 0c             	sub    esp,0xc
c001c61a:	50                   	push   eax
c001c61b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	31 c0                	xor    eax,eax
c001c623:	83 c4 0c             	add    esp,0xc
c001c626:	c3                   	ret    
c001c627:	90                   	nop

c001c628 <ATA::powerSaving(PowerSavingLevel)>:
c001c628:	c3                   	ret    
c001c629:	90                   	nop

c001c62a <ATA::ATA()>:
c001c62a:	83 ec 0c             	sub    esp,0xc
c001c62d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c631:	83 ec 04             	sub    esp,0x4
c001c634:	68 00 02 00 00       	push   0x200
c001c639:	68 9d 2c 02 c0       	push   0xc0022c9d
c001c63e:	50                   	push   eax
c001c63f:	e8 9a 03 ff ff       	call   c000c9de <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c644:	83 c4 10             	add    esp,0x10
c001c647:	ba 10 2c 02 c0       	mov    edx,0xc0022c10
c001c64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c650:	89 10                	mov    DWORD PTR [eax],edx
c001c652:	90                   	nop
c001c653:	83 c4 0c             	add    esp,0xc
c001c656:	c3                   	ret    
c001c657:	90                   	nop

c001c658 <ATA::flush(bool)>:
c001c658:	53                   	push   ebx
c001c659:	83 ec 08             	sub    esp,0x8
c001c65c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c661:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c665:	83 f8 01             	cmp    eax,0x1
c001c668:	19 c0                	sbb    eax,eax
c001c66a:	83 e0 fd             	and    eax,0xfffffffd
c001c66d:	05 ea 00 00 00       	add    eax,0xea
c001c672:	50                   	push   eax
c001c673:	6a 07                	push   0x7
c001c675:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c67c:	50                   	push   eax
c001c67d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c683:	e8 18 f1 ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c688:	83 c4 0c             	add    esp,0xc
c001c68b:	6a 00                	push   0x0
c001c68d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c694:	50                   	push   eax
c001c695:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c69b:	e8 e4 fb ff ff       	call   c001c284 <IDE::polling(unsigned char, unsigned int)>
c001c6a0:	83 c4 18             	add    esp,0x18
c001c6a3:	5b                   	pop    ebx
c001c6a4:	c3                   	ret    
c001c6a5:	90                   	nop

c001c6a6 <ATA::readyForCommand()>:
c001c6a6:	56                   	push   esi
c001c6a7:	53                   	push   ebx
c001c6a8:	53                   	push   ebx
c001c6a9:	31 db                	xor    ebx,ebx
c001c6ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6af:	51                   	push   ecx
c001c6b0:	6a 0c                	push   0xc
c001c6b2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c6b9:	50                   	push   eax
c001c6ba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c6c0:	e8 9b f1 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001c6c5:	83 c4 10             	add    esp,0x10
c001c6c8:	a8 88                	test   al,0x88
c001c6ca:	74 1f                	je     c001c6eb <ATA::readyForCommand()+0x45>
c001c6cc:	43                   	inc    ebx
c001c6cd:	83 fb 63             	cmp    ebx,0x63
c001c6d0:	7e dd                	jle    c001c6af <ATA::readyForCommand()+0x9>
c001c6d2:	83 ec 0c             	sub    esp,0xc
c001c6d5:	6a 0a                	push   0xa
c001c6d7:	e8 f0 96 ff ff       	call   c0015dcc <milliTenthSleep(unsigned int)>
c001c6dc:	83 c4 10             	add    esp,0x10
c001c6df:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c6e5:	75 c8                	jne    c001c6af <ATA::readyForCommand()+0x9>
c001c6e7:	31 c0                	xor    eax,eax
c001c6e9:	eb 02                	jmp    c001c6ed <ATA::readyForCommand()+0x47>
c001c6eb:	b0 01                	mov    al,0x1
c001c6ed:	5a                   	pop    edx
c001c6ee:	5b                   	pop    ebx
c001c6ef:	5e                   	pop    esi
c001c6f0:	c3                   	ret    
c001c6f1:	90                   	nop

c001c6f2 <ATA::access(unsigned long long, int, void*, bool)>:
c001c6f2:	55                   	push   ebp
c001c6f3:	57                   	push   edi
c001c6f4:	56                   	push   esi
c001c6f5:	53                   	push   ebx
c001c6f6:	83 ec 2c             	sub    esp,0x2c
c001c6f9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c6fd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c701:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c705:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c709:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c70d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c711:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c715:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c71b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c71f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c725:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c729:	c1 e0 06             	shl    eax,0x6
c001c72c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c734:	74 5b                	je     c001c791 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c736:	89 fa                	mov    edx,edi
c001c738:	89 f0                	mov    eax,esi
c001c73a:	c1 ea 1c             	shr    edx,0x1c
c001c73d:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c741:	89 d1                	mov    ecx,edx
c001c743:	09 c1                	or     ecx,eax
c001c745:	74 25                	je     c001c76c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c747:	31 ed                	xor    ebp,ebp
c001c749:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c750:	89 fa                	mov    edx,edi
c001c752:	89 f0                	mov    eax,esi
c001c754:	0f ad d0             	shrd   eax,edx,cl
c001c757:	d3 ea                	shr    edx,cl
c001c759:	f6 c1 20             	test   cl,0x20
c001c75c:	74 02                	je     c001c760 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c75e:	89 d0                	mov    eax,edx
c001c760:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c764:	45                   	inc    ebp
c001c765:	83 fd 06             	cmp    ebp,0x6
c001c768:	75 df                	jne    c001c749 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c76a:	eb 71                	jmp    c001c7dd <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c76c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c771:	89 f0                	mov    eax,esi
c001c773:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c77a:	0f ac f8 10          	shrd   eax,edi,0x10
c001c77e:	bf 01 00 00 00       	mov    edi,0x1
c001c783:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c787:	c1 ee 18             	shr    esi,0x18
c001c78a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c78f:	eb 53                	jmp    c001c7e4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c791:	6a 00                	push   0x0
c001c793:	6a 3f                	push   0x3f
c001c795:	57                   	push   edi
c001c796:	56                   	push   esi
c001c797:	e8 d4 2a 00 00       	call   c001f270 <__umoddi3>
c001c79c:	83 c4 10             	add    esp,0x10
c001c79f:	40                   	inc    eax
c001c7a0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c7a4:	6a 00                	push   0x0
c001c7a6:	68 f0 03 00 00       	push   0x3f0
c001c7ab:	57                   	push   edi
c001c7ac:	56                   	push   esi
c001c7ad:	e8 be 29 00 00       	call   c001f170 <__udivdi3>
c001c7b2:	83 c4 10             	add    esp,0x10
c001c7b5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c7ba:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c7c1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c7c6:	6a 00                	push   0x0
c001c7c8:	6a 3f                	push   0x3f
c001c7ca:	57                   	push   edi
c001c7cb:	31 ff                	xor    edi,edi
c001c7cd:	56                   	push   esi
c001c7ce:	e8 9d 29 00 00       	call   c001f170 <__udivdi3>
c001c7d3:	83 c4 10             	add    esp,0x10
c001c7d6:	83 e0 0f             	and    eax,0xf
c001c7d9:	89 c6                	mov    esi,eax
c001c7db:	eb 07                	jmp    c001c7e4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c7dd:	31 f6                	xor    esi,esi
c001c7df:	bf 02 00 00 00       	mov    edi,0x2
c001c7e4:	50                   	push   eax
c001c7e5:	6a 00                	push   0x0
c001c7e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7ee:	50                   	push   eax
c001c7ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c7f3:	e8 b6 f1 ff ff       	call   c001b9ae <IDE::enableIRQs(unsigned char, bool)>
c001c7f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7fb:	e8 a6 fe ff ff       	call   c001c6a6 <ATA::readyForCommand()>
c001c800:	83 c4 10             	add    esp,0x10
c001c803:	84 c0                	test   al,al
c001c805:	75 0a                	jne    c001c811 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c807:	be 01 00 00 00       	mov    esi,0x1
c001c80c:	e9 9b 02 00 00       	jmp    c001caac <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c811:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c817:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c81d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c824:	c1 e0 04             	shl    eax,0x4
c001c827:	09 c6                	or     esi,eax
c001c829:	f7 c7 03 00 00 00    	test   edi,0x3
c001c82f:	75 05                	jne    c001c836 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c831:	83 ce a0             	or     esi,0xffffffa0
c001c834:	eb 03                	jmp    c001c839 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c836:	83 ce e0             	or     esi,0xffffffe0
c001c839:	89 f0                	mov    eax,esi
c001c83b:	0f b6 f0             	movzx  esi,al
c001c83e:	56                   	push   esi
c001c83f:	6a 06                	push   0x6
c001c841:	51                   	push   ecx
c001c842:	52                   	push   edx
c001c843:	e8 58 ef ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c848:	83 c4 10             	add    esp,0x10
c001c84b:	6a 00                	push   0x0
c001c84d:	6a 01                	push   0x1
c001c84f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c856:	50                   	push   eax
c001c857:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c85d:	e8 3e ef ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c862:	89 f8                	mov    eax,edi
c001c864:	83 c4 10             	add    esp,0x10
c001c867:	0f b6 f0             	movzx  esi,al
c001c86a:	83 fe 02             	cmp    esi,0x2
c001c86d:	75 6e                	jne    c001c8dd <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c86f:	6a 00                	push   0x0
c001c871:	6a 08                	push   0x8
c001c873:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c87a:	50                   	push   eax
c001c87b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c881:	e8 1a ef ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c886:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c88b:	50                   	push   eax
c001c88c:	6a 09                	push   0x9
c001c88e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c895:	50                   	push   eax
c001c896:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c89c:	e8 ff ee ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8a1:	83 c4 20             	add    esp,0x20
c001c8a4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c8a9:	50                   	push   eax
c001c8aa:	6a 0a                	push   0xa
c001c8ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8b3:	50                   	push   eax
c001c8b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8ba:	e8 e1 ee ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8bf:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c8c4:	50                   	push   eax
c001c8c5:	6a 0b                	push   0xb
c001c8c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8ce:	50                   	push   eax
c001c8cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8d5:	e8 c6 ee ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8da:	83 c4 20             	add    esp,0x20
c001c8dd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c8e2:	50                   	push   eax
c001c8e3:	6a 02                	push   0x2
c001c8e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8ec:	50                   	push   eax
c001c8ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8f3:	e8 a8 ee ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c8fd:	50                   	push   eax
c001c8fe:	6a 03                	push   0x3
c001c900:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c907:	50                   	push   eax
c001c908:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c90e:	e8 8d ee ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c913:	83 c4 20             	add    esp,0x20
c001c916:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c91b:	50                   	push   eax
c001c91c:	6a 04                	push   0x4
c001c91e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c925:	50                   	push   eax
c001c926:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c92c:	e8 6f ee ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c931:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c936:	50                   	push   eax
c001c937:	6a 05                	push   0x5
c001c939:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c940:	50                   	push   eax
c001c941:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c947:	e8 54 ee ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c94c:	83 c4 20             	add    esp,0x20
c001c94f:	83 fe 02             	cmp    esi,0x2
c001c952:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001c957:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001c95c:	85 c9                	test   ecx,ecx
c001c95e:	74 07                	je     c001c967 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c960:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c965:	75 47                	jne    c001c9ae <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001c967:	89 f8                	mov    eax,edi
c001c969:	0f b6 f8             	movzx  edi,al
c001c96c:	31 c0                	xor    eax,eax
c001c96e:	83 ff 02             	cmp    edi,0x2
c001c971:	0f 95 c0             	setne  al
c001c974:	89 c6                	mov    esi,eax
c001c976:	74 0c                	je     c001c984 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001c978:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c97d:	b8 30 00 00 00       	mov    eax,0x30
c001c982:	75 2f                	jne    c001c9b3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c984:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c988:	83 f2 01             	xor    edx,0x1
c001c98b:	85 c9                	test   ecx,ecx
c001c98d:	74 09                	je     c001c998 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001c98f:	84 d2                	test   dl,dl
c001c991:	b8 24 00 00 00       	mov    eax,0x24
c001c996:	75 1b                	jne    c001c9b3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c998:	85 f6                	test   esi,esi
c001c99a:	0f 84 67 fe ff ff    	je     c001c807 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c9a0:	84 d2                	test   dl,dl
c001c9a2:	b8 20 00 00 00       	mov    eax,0x20
c001c9a7:	75 0a                	jne    c001c9b3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c9a9:	e9 59 fe ff ff       	jmp    c001c807 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c9ae:	b8 34 00 00 00       	mov    eax,0x34
c001c9b3:	50                   	push   eax
c001c9b4:	6a 07                	push   0x7
c001c9b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9bd:	50                   	push   eax
c001c9be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9c4:	e8 d7 ed ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9c9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c9cd:	83 c4 10             	add    esp,0x10
c001c9d0:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001c9d5:	85 f6                	test   esi,esi
c001c9d7:	0f 84 b5 00 00 00    	je     c001ca92 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001c9dd:	50                   	push   eax
c001c9de:	6a 01                	push   0x1
c001c9e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9e7:	50                   	push   eax
c001c9e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9ee:	e8 91 f8 ff ff       	call   c001c284 <IDE::polling(unsigned char, unsigned int)>
c001c9f3:	83 c4 10             	add    esp,0x10
c001c9f6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c9fc:	0f b6 c0             	movzx  eax,al
c001c9ff:	85 c0                	test   eax,eax
c001ca01:	74 1f                	je     c001ca22 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001ca03:	50                   	push   eax
c001ca04:	89 c6                	mov    esi,eax
c001ca06:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ca0d:	0f b6 d2             	movzx  edx,dl
c001ca10:	50                   	push   eax
c001ca11:	52                   	push   edx
c001ca12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca18:	e8 ad f7 ff ff       	call   c001c1ca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ca1d:	e9 87 00 00 00       	jmp    c001caa9 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001ca22:	85 ed                	test   ebp,ebp
c001ca24:	74 3b                	je     c001ca61 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001ca26:	31 ff                	xor    edi,edi
c001ca28:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ca2c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001ca30:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001ca35:	50                   	push   eax
c001ca36:	50                   	push   eax
c001ca37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca3e:	50                   	push   eax
c001ca3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca45:	e8 44 ed ff ff       	call   c001b78e <IDE::getBase(unsigned char)>
c001ca4a:	89 c2                	mov    edx,eax
c001ca4c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001ca51:	66 ef                	out    dx,ax
c001ca53:	47                   	inc    edi
c001ca54:	83 c4 10             	add    esp,0x10
c001ca57:	81 ff 00 01 00 00    	cmp    edi,0x100
c001ca5d:	75 c9                	jne    c001ca28 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001ca5f:	eb 23                	jmp    c001ca84 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001ca61:	51                   	push   ecx
c001ca62:	0f b6 d2             	movzx  edx,dl
c001ca65:	51                   	push   ecx
c001ca66:	52                   	push   edx
c001ca67:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca6d:	e8 1c ed ff ff       	call   c001b78e <IDE::getBase(unsigned char)>
c001ca72:	b9 00 01 00 00       	mov    ecx,0x100
c001ca77:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ca7b:	89 c2                	mov    edx,eax
c001ca7d:	fc                   	cld    
c001ca7e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ca81:	83 c4 10             	add    esp,0x10
c001ca84:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ca8c:	4e                   	dec    esi
c001ca8d:	e9 43 ff ff ff       	jmp    c001c9d5 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001ca92:	31 f6                	xor    esi,esi
c001ca94:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca99:	74 11                	je     c001caac <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001ca9b:	50                   	push   eax
c001ca9c:	50                   	push   eax
c001ca9d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001caa2:	50                   	push   eax
c001caa3:	53                   	push   ebx
c001caa4:	e8 af fb ff ff       	call   c001c658 <ATA::flush(bool)>
c001caa9:	83 c4 10             	add    esp,0x10
c001caac:	83 c4 2c             	add    esp,0x2c
c001caaf:	89 f0                	mov    eax,esi
c001cab1:	5b                   	pop    ebx
c001cab2:	5e                   	pop    esi
c001cab3:	5f                   	pop    edi
c001cab4:	5d                   	pop    ebp
c001cab5:	c3                   	ret    

c001cab6 <ATA::detectCHS()>:
c001cab6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001caba:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cac0:	c1 e0 06             	shl    eax,0x6
c001cac3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cac9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cad3:	c7 44 24 04 f4 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022bf4
c001cadb:	e9 cd 46 ff ff       	jmp    c00111ad <KePanic(char const*)>

c001cae0 <ATA::open(int, int, void*)>:
c001cae0:	53                   	push   ebx
c001cae1:	83 ec 08             	sub    esp,0x8
c001cae4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001caf0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001caf6:	c1 e0 06             	shl    eax,0x6
c001caf9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001caff:	01 d0                	add    eax,edx
c001cb01:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cb08:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cb0e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cb15:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cb1f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cb26:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cb2c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cb33:	75 0c                	jne    c001cb41 <ATA::open(int, int, void*)+0x61>
c001cb35:	83 ec 0c             	sub    esp,0xc
c001cb38:	53                   	push   ebx
c001cb39:	e8 78 ff ff ff       	call   c001cab6 <ATA::detectCHS()>
c001cb3e:	83 c4 10             	add    esp,0x10
c001cb41:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cb47:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cb4d:	c1 e0 06             	shl    eax,0x6
c001cb50:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cb57:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cb61:	d1 e8                	shr    eax,1
c001cb63:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cb69:	6a 04                	push   0x4
c001cb6b:	6a 0c                	push   0xc
c001cb6d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb74:	50                   	push   eax
c001cb75:	52                   	push   edx
c001cb76:	e8 25 ec ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb7b:	90                   	nop
c001cb7c:	90                   	nop
c001cb7d:	6a 00                	push   0x0
c001cb7f:	6a 0c                	push   0xc
c001cb81:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb88:	50                   	push   eax
c001cb89:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb8f:	e8 0c ec ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb94:	83 c4 14             	add    esp,0x14
c001cb97:	53                   	push   ebx
c001cb98:	e8 a9 fe fe ff       	call   c000ca46 <PhysicalDisk::startCache()>
c001cb9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cba0:	e8 ed 10 ff ff       	call   c000dc92 <createPartitionsForDisk(PhysicalDisk*)>
c001cba5:	83 c4 18             	add    esp,0x18
c001cba8:	31 c0                	xor    eax,eax
c001cbaa:	5b                   	pop    ebx
c001cbab:	c3                   	ret    

c001cbac <combineCharAndColour(char, unsigned char)>:
c001cbac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbb1:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cbb7:	c1 e0 08             	shl    eax,0x8
c001cbba:	09 d0                	or     eax,edx
c001cbbc:	c3                   	ret    

c001cbbd <combineColours(unsigned char, unsigned char)>:
c001cbbd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbc2:	c1 e0 04             	shl    eax,0x4
c001cbc5:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cbc9:	c3                   	ret    

c001cbca <ATA::read(unsigned long long, int, void*)>:
c001cbca:	55                   	push   ebp
c001cbcb:	57                   	push   edi
c001cbcc:	56                   	push   esi
c001cbcd:	be 04 00 00 00       	mov    esi,0x4
c001cbd2:	53                   	push   ebx
c001cbd3:	83 ec 0c             	sub    esp,0xc
c001cbd6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cbda:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbde:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cbe2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cbe6:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cbe9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cbef:	0f 87 a1 01 00 00    	ja     c001cd96 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cbf5:	85 c9                	test   ecx,ecx
c001cbf7:	be 06 00 00 00       	mov    esi,0x6
c001cbfc:	0f 84 94 01 00 00    	je     c001cd96 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cc02:	55                   	push   ebp
c001cc03:	55                   	push   ebp
c001cc04:	6a 00                	push   0x0
c001cc06:	51                   	push   ecx
c001cc07:	53                   	push   ebx
c001cc08:	52                   	push   edx
c001cc09:	50                   	push   eax
c001cc0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc0e:	e8 df fa ff ff       	call   c001c6f2 <ATA::access(unsigned long long, int, void*, bool)>
c001cc13:	83 c4 20             	add    esp,0x20
c001cc16:	85 c0                	test   eax,eax
c001cc18:	89 c6                	mov    esi,eax
c001cc1a:	0f 85 71 01 00 00    	jne    c001cd91 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cc20:	50                   	push   eax
c001cc21:	bd 10 27 00 00       	mov    ebp,0x2710
c001cc26:	50                   	push   eax
c001cc27:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cc2d:	6a 0f                	push   0xf
c001cc2f:	6a 00                	push   0x0
c001cc31:	89 da                	mov    edx,ebx
c001cc33:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cc39:	e8 7f ff ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001cc3e:	59                   	pop    ecx
c001cc3f:	b9 0a 00 00 00       	mov    ecx,0xa
c001cc44:	5b                   	pop    ebx
c001cc45:	0f b6 d8             	movzx  ebx,al
c001cc48:	89 d0                	mov    eax,edx
c001cc4a:	53                   	push   ebx
c001cc4b:	99                   	cdq    
c001cc4c:	f7 fd                	idiv   ebp
c001cc4e:	99                   	cdq    
c001cc4f:	f7 f9                	idiv   ecx
c001cc51:	83 c2 30             	add    edx,0x30
c001cc54:	0f b6 d2             	movzx  edx,dl
c001cc57:	52                   	push   edx
c001cc58:	e8 4f ff ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001cc5d:	5f                   	pop    edi
c001cc5e:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc63:	5a                   	pop    edx
c001cc64:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cc6a:	53                   	push   ebx
c001cc6b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cc70:	99                   	cdq    
c001cc71:	f7 ff                	idiv   edi
c001cc73:	99                   	cdq    
c001cc74:	f7 f9                	idiv   ecx
c001cc76:	8d 42 30             	lea    eax,[edx+0x30]
c001cc79:	0f b6 c0             	movzx  eax,al
c001cc7c:	50                   	push   eax
c001cc7d:	e8 2a ff ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001cc82:	5f                   	pop    edi
c001cc83:	bf 64 00 00 00       	mov    edi,0x64
c001cc88:	5a                   	pop    edx
c001cc89:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cc8f:	53                   	push   ebx
c001cc90:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cc95:	99                   	cdq    
c001cc96:	f7 ff                	idiv   edi
c001cc98:	99                   	cdq    
c001cc99:	f7 f9                	idiv   ecx
c001cc9b:	8d 42 30             	lea    eax,[edx+0x30]
c001cc9e:	0f b6 c0             	movzx  eax,al
c001cca1:	50                   	push   eax
c001cca2:	e8 05 ff ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001cca7:	5a                   	pop    edx
c001cca8:	5a                   	pop    edx
c001cca9:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ccaf:	53                   	push   ebx
c001ccb0:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ccb5:	99                   	cdq    
c001ccb6:	f7 f9                	idiv   ecx
c001ccb8:	99                   	cdq    
c001ccb9:	f7 f9                	idiv   ecx
c001ccbb:	8d 42 30             	lea    eax,[edx+0x30]
c001ccbe:	0f b6 c0             	movzx  eax,al
c001ccc1:	50                   	push   eax
c001ccc2:	e8 e5 fe ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001ccc7:	5a                   	pop    edx
c001ccc8:	5a                   	pop    edx
c001ccc9:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cccf:	53                   	push   ebx
c001ccd0:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ccd5:	99                   	cdq    
c001ccd6:	f7 f9                	idiv   ecx
c001ccd8:	83 c2 30             	add    edx,0x30
c001ccdb:	0f b6 d2             	movzx  edx,dl
c001ccde:	52                   	push   edx
c001ccdf:	e8 c8 fe ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001cce4:	5a                   	pop    edx
c001cce5:	5a                   	pop    edx
c001cce6:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ccec:	53                   	push   ebx
c001cced:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ccf2:	99                   	cdq    
c001ccf3:	f7 fd                	idiv   ebp
c001ccf5:	99                   	cdq    
c001ccf6:	f7 f9                	idiv   ecx
c001ccf8:	8d 42 30             	lea    eax,[edx+0x30]
c001ccfb:	0f b6 c0             	movzx  eax,al
c001ccfe:	50                   	push   eax
c001ccff:	e8 a8 fe ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001cd04:	5d                   	pop    ebp
c001cd05:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cd0a:	5a                   	pop    edx
c001cd0b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cd11:	53                   	push   ebx
c001cd12:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd17:	99                   	cdq    
c001cd18:	f7 fd                	idiv   ebp
c001cd1a:	99                   	cdq    
c001cd1b:	f7 f9                	idiv   ecx
c001cd1d:	8d 42 30             	lea    eax,[edx+0x30]
c001cd20:	0f b6 c0             	movzx  eax,al
c001cd23:	50                   	push   eax
c001cd24:	e8 83 fe ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001cd29:	5d                   	pop    ebp
c001cd2a:	5a                   	pop    edx
c001cd2b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cd31:	53                   	push   ebx
c001cd32:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd37:	99                   	cdq    
c001cd38:	f7 ff                	idiv   edi
c001cd3a:	99                   	cdq    
c001cd3b:	f7 f9                	idiv   ecx
c001cd3d:	8d 42 30             	lea    eax,[edx+0x30]
c001cd40:	0f b6 c0             	movzx  eax,al
c001cd43:	50                   	push   eax
c001cd44:	e8 63 fe ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001cd49:	5f                   	pop    edi
c001cd4a:	5d                   	pop    ebp
c001cd4b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cd51:	53                   	push   ebx
c001cd52:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd57:	99                   	cdq    
c001cd58:	f7 f9                	idiv   ecx
c001cd5a:	99                   	cdq    
c001cd5b:	f7 f9                	idiv   ecx
c001cd5d:	8d 42 30             	lea    eax,[edx+0x30]
c001cd60:	0f b6 c0             	movzx  eax,al
c001cd63:	50                   	push   eax
c001cd64:	e8 43 fe ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001cd69:	5a                   	pop    edx
c001cd6a:	5f                   	pop    edi
c001cd6b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cd71:	53                   	push   ebx
c001cd72:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd77:	99                   	cdq    
c001cd78:	f7 f9                	idiv   ecx
c001cd7a:	83 c2 30             	add    edx,0x30
c001cd7d:	0f b6 d2             	movzx  edx,dl
c001cd80:	52                   	push   edx
c001cd81:	e8 26 fe ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001cd86:	83 c4 10             	add    esp,0x10
c001cd89:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cd8f:	eb 05                	jmp    c001cd96 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd91:	be 01 00 00 00       	mov    esi,0x1
c001cd96:	83 c4 0c             	add    esp,0xc
c001cd99:	89 f0                	mov    eax,esi
c001cd9b:	5b                   	pop    ebx
c001cd9c:	5e                   	pop    esi
c001cd9d:	5f                   	pop    edi
c001cd9e:	5d                   	pop    ebp
c001cd9f:	c3                   	ret    

c001cda0 <ATA::write(unsigned long long, int, void*)>:
c001cda0:	55                   	push   ebp
c001cda1:	57                   	push   edi
c001cda2:	56                   	push   esi
c001cda3:	be 04 00 00 00       	mov    esi,0x4
c001cda8:	53                   	push   ebx
c001cda9:	83 ec 0c             	sub    esp,0xc
c001cdac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cdb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdb4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cdb8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdbc:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cdbf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cdc5:	0f 87 9c 01 00 00    	ja     c001cf67 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cdcb:	85 c9                	test   ecx,ecx
c001cdcd:	be 06 00 00 00       	mov    esi,0x6
c001cdd2:	0f 84 8f 01 00 00    	je     c001cf67 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cdd8:	55                   	push   ebp
c001cdd9:	55                   	push   ebp
c001cdda:	6a 01                	push   0x1
c001cddc:	51                   	push   ecx
c001cddd:	53                   	push   ebx
c001cdde:	52                   	push   edx
c001cddf:	50                   	push   eax
c001cde0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cde4:	e8 09 f9 ff ff       	call   c001c6f2 <ATA::access(unsigned long long, int, void*, bool)>
c001cde9:	83 c4 20             	add    esp,0x20
c001cdec:	85 c0                	test   eax,eax
c001cdee:	89 c6                	mov    esi,eax
c001cdf0:	0f 85 6c 01 00 00    	jne    c001cf62 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cdf6:	50                   	push   eax
c001cdf7:	bd 10 27 00 00       	mov    ebp,0x2710
c001cdfc:	50                   	push   eax
c001cdfd:	6a 0f                	push   0xf
c001cdff:	6a 00                	push   0x0
c001ce01:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001ce07:	e8 b1 fd ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001ce0c:	5a                   	pop    edx
c001ce0d:	59                   	pop    ecx
c001ce0e:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce13:	0f b6 d8             	movzx  ebx,al
c001ce16:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce1b:	53                   	push   ebx
c001ce1c:	99                   	cdq    
c001ce1d:	f7 fd                	idiv   ebp
c001ce1f:	99                   	cdq    
c001ce20:	f7 f9                	idiv   ecx
c001ce22:	8d 42 30             	lea    eax,[edx+0x30]
c001ce25:	0f b6 c0             	movzx  eax,al
c001ce28:	50                   	push   eax
c001ce29:	e8 7e fd ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001ce2e:	5f                   	pop    edi
c001ce2f:	bf e8 03 00 00       	mov    edi,0x3e8
c001ce34:	5a                   	pop    edx
c001ce35:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce3b:	53                   	push   ebx
c001ce3c:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce41:	99                   	cdq    
c001ce42:	f7 ff                	idiv   edi
c001ce44:	99                   	cdq    
c001ce45:	f7 f9                	idiv   ecx
c001ce47:	8d 42 30             	lea    eax,[edx+0x30]
c001ce4a:	0f b6 c0             	movzx  eax,al
c001ce4d:	50                   	push   eax
c001ce4e:	e8 59 fd ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001ce53:	5f                   	pop    edi
c001ce54:	bf 64 00 00 00       	mov    edi,0x64
c001ce59:	5a                   	pop    edx
c001ce5a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce60:	53                   	push   ebx
c001ce61:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce66:	99                   	cdq    
c001ce67:	f7 ff                	idiv   edi
c001ce69:	99                   	cdq    
c001ce6a:	f7 f9                	idiv   ecx
c001ce6c:	8d 42 30             	lea    eax,[edx+0x30]
c001ce6f:	0f b6 c0             	movzx  eax,al
c001ce72:	50                   	push   eax
c001ce73:	e8 34 fd ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001ce78:	5a                   	pop    edx
c001ce79:	5a                   	pop    edx
c001ce7a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce80:	53                   	push   ebx
c001ce81:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce86:	99                   	cdq    
c001ce87:	f7 f9                	idiv   ecx
c001ce89:	99                   	cdq    
c001ce8a:	f7 f9                	idiv   ecx
c001ce8c:	8d 42 30             	lea    eax,[edx+0x30]
c001ce8f:	0f b6 c0             	movzx  eax,al
c001ce92:	50                   	push   eax
c001ce93:	e8 14 fd ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001ce98:	5a                   	pop    edx
c001ce99:	5a                   	pop    edx
c001ce9a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cea0:	53                   	push   ebx
c001cea1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cea6:	99                   	cdq    
c001cea7:	f7 f9                	idiv   ecx
c001cea9:	83 c2 30             	add    edx,0x30
c001ceac:	0f b6 d2             	movzx  edx,dl
c001ceaf:	52                   	push   edx
c001ceb0:	e8 f7 fc ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001ceb5:	5a                   	pop    edx
c001ceb6:	5a                   	pop    edx
c001ceb7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cebd:	53                   	push   ebx
c001cebe:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cec3:	99                   	cdq    
c001cec4:	f7 fd                	idiv   ebp
c001cec6:	99                   	cdq    
c001cec7:	f7 f9                	idiv   ecx
c001cec9:	8d 42 30             	lea    eax,[edx+0x30]
c001cecc:	0f b6 c0             	movzx  eax,al
c001cecf:	50                   	push   eax
c001ced0:	e8 d7 fc ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001ced5:	5d                   	pop    ebp
c001ced6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cedb:	5a                   	pop    edx
c001cedc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cee2:	53                   	push   ebx
c001cee3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cee8:	99                   	cdq    
c001cee9:	f7 fd                	idiv   ebp
c001ceeb:	99                   	cdq    
c001ceec:	f7 f9                	idiv   ecx
c001ceee:	8d 42 30             	lea    eax,[edx+0x30]
c001cef1:	0f b6 c0             	movzx  eax,al
c001cef4:	50                   	push   eax
c001cef5:	e8 b2 fc ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001cefa:	5d                   	pop    ebp
c001cefb:	5a                   	pop    edx
c001cefc:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf02:	53                   	push   ebx
c001cf03:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf08:	99                   	cdq    
c001cf09:	f7 ff                	idiv   edi
c001cf0b:	99                   	cdq    
c001cf0c:	f7 f9                	idiv   ecx
c001cf0e:	8d 42 30             	lea    eax,[edx+0x30]
c001cf11:	0f b6 c0             	movzx  eax,al
c001cf14:	50                   	push   eax
c001cf15:	e8 92 fc ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001cf1a:	5f                   	pop    edi
c001cf1b:	5d                   	pop    ebp
c001cf1c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf22:	53                   	push   ebx
c001cf23:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf28:	99                   	cdq    
c001cf29:	f7 f9                	idiv   ecx
c001cf2b:	99                   	cdq    
c001cf2c:	f7 f9                	idiv   ecx
c001cf2e:	8d 42 30             	lea    eax,[edx+0x30]
c001cf31:	0f b6 c0             	movzx  eax,al
c001cf34:	50                   	push   eax
c001cf35:	e8 72 fc ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001cf3a:	5a                   	pop    edx
c001cf3b:	5f                   	pop    edi
c001cf3c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf42:	53                   	push   ebx
c001cf43:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf48:	99                   	cdq    
c001cf49:	f7 f9                	idiv   ecx
c001cf4b:	83 c2 30             	add    edx,0x30
c001cf4e:	0f b6 d2             	movzx  edx,dl
c001cf51:	52                   	push   edx
c001cf52:	e8 55 fc ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001cf57:	83 c4 10             	add    esp,0x10
c001cf5a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf60:	eb 05                	jmp    c001cf67 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf62:	be 01 00 00 00       	mov    esi,0x1
c001cf67:	83 c4 0c             	add    esp,0xc
c001cf6a:	89 f0                	mov    eax,esi
c001cf6c:	5b                   	pop    ebx
c001cf6d:	5e                   	pop    esi
c001cf6e:	5f                   	pop    edi
c001cf6f:	5d                   	pop    ebp
c001cf70:	c3                   	ret    
c001cf71:	90                   	nop

c001cf72 <ATAPI::write(unsigned long long, int, void*)>:
c001cf72:	b8 03 00 00 00       	mov    eax,0x3
c001cf77:	c3                   	ret    

c001cf78 <ATAPI::close(int, int, void*)>:
c001cf78:	83 ec 0c             	sub    esp,0xc
c001cf7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf7f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf85:	85 c0                	test   eax,eax
c001cf87:	74 0c                	je     c001cf95 <ATAPI::close(int, int, void*)+0x1d>
c001cf89:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf8b:	83 ec 0c             	sub    esp,0xc
c001cf8e:	50                   	push   eax
c001cf8f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cf92:	83 c4 10             	add    esp,0x10
c001cf95:	31 c0                	xor    eax,eax
c001cf97:	83 c4 0c             	add    esp,0xc
c001cf9a:	c3                   	ret    
c001cf9b:	90                   	nop

c001cf9c <ATAPI::ATAPI()>:
c001cf9c:	83 ec 0c             	sub    esp,0xc
c001cf9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa3:	83 ec 04             	sub    esp,0x4
c001cfa6:	68 00 08 00 00       	push   0x800
c001cfab:	68 3d 2d 02 c0       	push   0xc0022d3d
c001cfb0:	50                   	push   eax
c001cfb1:	e8 28 fa fe ff       	call   c000c9de <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cfb6:	83 c4 10             	add    esp,0x10
c001cfb9:	ba 58 2c 02 c0       	mov    edx,0xc0022c58
c001cfbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc2:	89 10                	mov    DWORD PTR [eax],edx
c001cfc4:	90                   	nop
c001cfc5:	83 c4 0c             	add    esp,0xc
c001cfc8:	c3                   	ret    
c001cfc9:	90                   	nop

c001cfca <ATAPI::readyForCommand()>:
c001cfca:	56                   	push   esi
c001cfcb:	53                   	push   ebx
c001cfcc:	53                   	push   ebx
c001cfcd:	31 db                	xor    ebx,ebx
c001cfcf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cfd3:	51                   	push   ecx
c001cfd4:	6a 0c                	push   0xc
c001cfd6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cfdd:	50                   	push   eax
c001cfde:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cfe4:	e8 77 e8 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001cfe9:	83 c4 10             	add    esp,0x10
c001cfec:	a8 88                	test   al,0x88
c001cfee:	74 25                	je     c001d015 <ATAPI::readyForCommand()+0x4b>
c001cff0:	43                   	inc    ebx
c001cff1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001cff7:	7e da                	jle    c001cfd3 <ATAPI::readyForCommand()+0x9>
c001cff9:	83 ec 0c             	sub    esp,0xc
c001cffc:	68 5e 01 00 00       	push   0x15e
c001d001:	e8 c6 8d ff ff       	call   c0015dcc <milliTenthSleep(unsigned int)>
c001d006:	83 c4 10             	add    esp,0x10
c001d009:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d00f:	75 c2                	jne    c001cfd3 <ATAPI::readyForCommand()+0x9>
c001d011:	31 c0                	xor    eax,eax
c001d013:	eb 02                	jmp    c001d017 <ATAPI::readyForCommand()+0x4d>
c001d015:	b0 01                	mov    al,0x1
c001d017:	5a                   	pop    edx
c001d018:	5b                   	pop    ebx
c001d019:	5e                   	pop    esi
c001d01a:	c3                   	ret    
c001d01b:	90                   	nop

c001d01c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d01c:	55                   	push   ebp
c001d01d:	57                   	push   edi
c001d01e:	56                   	push   esi
c001d01f:	53                   	push   ebx
c001d020:	83 ec 20             	sub    esp,0x20
c001d023:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d027:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d02b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d02f:	6a 01                	push   0x1
c001d031:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d038:	50                   	push   eax
c001d039:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d03f:	e8 6a e9 ff ff       	call   c001b9ae <IDE::enableIRQs(unsigned char, bool)>
c001d044:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d04b:	59                   	pop    ecx
c001d04c:	5e                   	pop    esi
c001d04d:	50                   	push   eax
c001d04e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d054:	e8 21 e7 ff ff       	call   c001b77a <IDE::prepareInterrupt(unsigned char)>
c001d059:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d05c:	e8 69 ff ff ff       	call   c001cfca <ATAPI::readyForCommand()>
c001d061:	83 c4 10             	add    esp,0x10
c001d064:	84 c0                	test   al,al
c001d066:	75 0a                	jne    c001d072 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d068:	bb 01 00 00 00       	mov    ebx,0x1
c001d06d:	e9 5f 02 00 00       	jmp    c001d2d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d072:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d078:	c1 e0 04             	shl    eax,0x4
c001d07b:	0f b6 c0             	movzx  eax,al
c001d07e:	50                   	push   eax
c001d07f:	6a 06                	push   0x6
c001d081:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d088:	50                   	push   eax
c001d089:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d08f:	e8 0c e7 ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d094:	6a 00                	push   0x0
c001d096:	6a 01                	push   0x1
c001d098:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d09f:	50                   	push   eax
c001d0a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0a6:	e8 f5 e6 ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0ab:	83 c4 20             	add    esp,0x20
c001d0ae:	0f b6 c3             	movzx  eax,bl
c001d0b1:	50                   	push   eax
c001d0b2:	0f b6 df             	movzx  ebx,bh
c001d0b5:	6a 04                	push   0x4
c001d0b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0be:	50                   	push   eax
c001d0bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0c5:	e8 d6 e6 ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0ca:	53                   	push   ebx
c001d0cb:	6a 05                	push   0x5
c001d0cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0d4:	50                   	push   eax
c001d0d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0db:	e8 c0 e6 ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0e0:	83 c4 20             	add    esp,0x20
c001d0e3:	68 a0 00 00 00       	push   0xa0
c001d0e8:	6a 07                	push   0x7
c001d0ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0f1:	50                   	push   eax
c001d0f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0f8:	e8 a3 e6 ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0fd:	83 c4 0c             	add    esp,0xc
c001d100:	6a 01                	push   0x1
c001d102:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d109:	50                   	push   eax
c001d10a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d110:	e8 6f f1 ff ff       	call   c001c284 <IDE::polling(unsigned char, unsigned int)>
c001d115:	83 c4 10             	add    esp,0x10
c001d118:	0f b6 d8             	movzx  ebx,al
c001d11b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d121:	85 db                	test   ebx,ebx
c001d123:	74 20                	je     c001d145 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d125:	53                   	push   ebx
c001d126:	0f b6 c0             	movzx  eax,al
c001d129:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d130:	52                   	push   edx
c001d131:	50                   	push   eax
c001d132:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d138:	e8 8d f0 ff ff       	call   c001c1ca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d13d:	83 c4 10             	add    esp,0x10
c001d140:	e9 8c 01 00 00       	jmp    c001d2d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d145:	52                   	push   edx
c001d146:	0f b6 c0             	movzx  eax,al
c001d149:	52                   	push   edx
c001d14a:	50                   	push   eax
c001d14b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d151:	e8 38 e6 ff ff       	call   c001b78e <IDE::getBase(unsigned char)>
c001d156:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d15a:	b9 06 00 00 00       	mov    ecx,0x6
c001d15f:	89 c2                	mov    edx,eax
c001d161:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d164:	89 e8                	mov    eax,ebp
c001d166:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d16a:	83 c4 10             	add    esp,0x10
c001d16d:	0f b6 c0             	movzx  eax,al
c001d170:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d174:	85 db                	test   ebx,ebx
c001d176:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d17c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d183:	0f 84 eb 00 00 00    	je     c001d274 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d189:	55                   	push   ebp
c001d18a:	55                   	push   ebp
c001d18b:	52                   	push   edx
c001d18c:	50                   	push   eax
c001d18d:	e8 82 e7 ff ff       	call   c001b914 <IDE::waitInterrupt(unsigned char)>
c001d192:	83 c4 10             	add    esp,0x10
c001d195:	84 c0                	test   al,al
c001d197:	0f 84 cb fe ff ff    	je     c001d068 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d19d:	56                   	push   esi
c001d19e:	56                   	push   esi
c001d19f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1a6:	50                   	push   eax
c001d1a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1ad:	e8 c8 e5 ff ff       	call   c001b77a <IDE::prepareInterrupt(unsigned char)>
c001d1b2:	83 c4 0c             	add    esp,0xc
c001d1b5:	6a 04                	push   0x4
c001d1b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1be:	50                   	push   eax
c001d1bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1c5:	e8 96 e6 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001d1ca:	83 c4 0c             	add    esp,0xc
c001d1cd:	6a 05                	push   0x5
c001d1cf:	89 c6                	mov    esi,eax
c001d1d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1d8:	50                   	push   eax
c001d1d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1df:	e8 7c e6 ff ff       	call   c001b860 <IDE::read(unsigned char, unsigned char)>
c001d1e4:	83 c4 10             	add    esp,0x10
c001d1e7:	0f b6 e8             	movzx  ebp,al
c001d1ea:	89 f0                	mov    eax,esi
c001d1ec:	c1 e5 08             	shl    ebp,0x8
c001d1ef:	0f b6 f0             	movzx  esi,al
c001d1f2:	09 f5                	or     ebp,esi
c001d1f4:	31 f6                	xor    esi,esi
c001d1f6:	d1 fd                	sar    ebp,1
c001d1f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d1fd:	74 5c                	je     c001d25b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d1ff:	39 ee                	cmp    esi,ebp
c001d201:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d207:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d20e:	75 0d                	jne    c001d21d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d210:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d213:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d217:	4b                   	dec    ebx
c001d218:	e9 57 ff ff ff       	jmp    c001d174 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d21d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d221:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d225:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d22a:	51                   	push   ecx
c001d22b:	51                   	push   ecx
c001d22c:	52                   	push   edx
c001d22d:	50                   	push   eax
c001d22e:	e8 5b e5 ff ff       	call   c001b78e <IDE::getBase(unsigned char)>
c001d233:	89 c2                	mov    edx,eax
c001d235:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d23a:	66 ef                	out    dx,ax
c001d23c:	46                   	inc    esi
c001d23d:	83 c4 10             	add    esp,0x10
c001d240:	eb bd                	jmp    c001d1ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d242:	51                   	push   ecx
c001d243:	51                   	push   ecx
c001d244:	52                   	push   edx
c001d245:	50                   	push   eax
c001d246:	e8 43 e5 ff ff       	call   c001b78e <IDE::getBase(unsigned char)>
c001d24b:	89 c2                	mov    edx,eax
c001d24d:	66 ed                	in     ax,dx
c001d24f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d253:	83 c4 10             	add    esp,0x10
c001d256:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d25a:	46                   	inc    esi
c001d25b:	39 ee                	cmp    esi,ebp
c001d25d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d263:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d26a:	75 d6                	jne    c001d242 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d26c:	01 f6                	add    esi,esi
c001d26e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d272:	eb a3                	jmp    c001d217 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d274:	51                   	push   ecx
c001d275:	51                   	push   ecx
c001d276:	52                   	push   edx
c001d277:	50                   	push   eax
c001d278:	e8 97 e6 ff ff       	call   c001b914 <IDE::waitInterrupt(unsigned char)>
c001d27d:	83 c4 10             	add    esp,0x10
c001d280:	84 c0                	test   al,al
c001d282:	0f 84 e0 fd ff ff    	je     c001d068 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d288:	52                   	push   edx
c001d289:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d28e:	52                   	push   edx
c001d28f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d296:	50                   	push   eax
c001d297:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d29d:	e8 d8 e4 ff ff       	call   c001b77a <IDE::prepareInterrupt(unsigned char)>
c001d2a2:	83 c4 10             	add    esp,0x10
c001d2a5:	50                   	push   eax
c001d2a6:	50                   	push   eax
c001d2a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2ae:	50                   	push   eax
c001d2af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2b5:	e8 d4 e4 ff ff       	call   c001b78e <IDE::getBase(unsigned char)>
c001d2ba:	8d 50 07             	lea    edx,[eax+0x7]
c001d2bd:	ec                   	in     al,dx
c001d2be:	83 c4 10             	add    esp,0x10
c001d2c1:	a8 88                	test   al,0x88
c001d2c3:	74 0a                	je     c001d2cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d2c5:	4b                   	dec    ebx
c001d2c6:	75 dd                	jne    c001d2a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d2c8:	bb 02 00 00 00       	mov    ebx,0x2
c001d2cd:	eb 02                	jmp    c001d2d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d2cf:	31 db                	xor    ebx,ebx
c001d2d1:	83 c4 1c             	add    esp,0x1c
c001d2d4:	89 d8                	mov    eax,ebx
c001d2d6:	5b                   	pop    ebx
c001d2d7:	5e                   	pop    esi
c001d2d8:	5f                   	pop    edi
c001d2d9:	5d                   	pop    ebp
c001d2da:	c3                   	ret    
c001d2db:	90                   	nop

c001d2dc <ATAPI::diskRemoved()>:
c001d2dc:	53                   	push   ebx
c001d2dd:	83 ec 14             	sub    esp,0x14
c001d2e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d2e4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d2eb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d2f1:	e8 8a 06 ff ff       	call   c000d980 <LogicalDisk::unmount()>
c001d2f6:	58                   	pop    eax
c001d2f7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d2fd:	e8 62 10 ff ff       	call   c000e364 <VCache::writeWriteBuffer()>
c001d302:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d308:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d30c:	83 c4 18             	add    esp,0x18
c001d30f:	5b                   	pop    ebx
c001d310:	e9 3f 10 ff ff       	jmp    c000e354 <VCache::invalidateReadBuffer()>
c001d315:	90                   	nop

c001d316 <ATAPI::eject()>:
c001d316:	57                   	push   edi
c001d317:	b9 03 00 00 00       	mov    ecx,0x3
c001d31c:	53                   	push   ebx
c001d31d:	83 ec 14             	sub    esp,0x14
c001d320:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d324:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d328:	fc                   	cld    
c001d329:	31 c0                	xor    eax,eax
c001d32b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d32d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d332:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d337:	50                   	push   eax
c001d338:	50                   	push   eax
c001d339:	6a 00                	push   0x0
c001d33b:	6a 00                	push   0x0
c001d33d:	6a 00                	push   0x0
c001d33f:	6a 02                	push   0x2
c001d341:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d345:	50                   	push   eax
c001d346:	53                   	push   ebx
c001d347:	e8 d0 fc ff ff       	call   c001d01c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d34c:	83 c4 14             	add    esp,0x14
c001d34f:	53                   	push   ebx
c001d350:	e8 87 ff ff ff       	call   c001d2dc <ATAPI::diskRemoved()>
c001d355:	83 c4 24             	add    esp,0x24
c001d358:	31 c0                	xor    eax,eax
c001d35a:	5b                   	pop    ebx
c001d35b:	5f                   	pop    edi
c001d35c:	c3                   	ret    
c001d35d:	90                   	nop

c001d35e <ATAPI::diskInserted()>:
c001d35e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d362:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d369:	c3                   	ret    

c001d36a <ATAPI::detectMedia()>:
c001d36a:	56                   	push   esi
c001d36b:	53                   	push   ebx
c001d36c:	83 ec 28             	sub    esp,0x28
c001d36f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d373:	6a 0c                	push   0xc
c001d375:	6a 00                	push   0x0
c001d377:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d37b:	56                   	push   esi
c001d37c:	e8 6f 31 fe ff       	call   c00004f0 <memset>
c001d381:	58                   	pop    eax
c001d382:	5a                   	pop    edx
c001d383:	6a 00                	push   0x0
c001d385:	6a 00                	push   0x0
c001d387:	6a 00                	push   0x0
c001d389:	6a 00                	push   0x0
c001d38b:	56                   	push   esi
c001d38c:	53                   	push   ebx
c001d38d:	e8 8a fc ff ff       	call   c001d01c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d392:	83 c4 1c             	add    esp,0x1c
c001d395:	6a 0c                	push   0xc
c001d397:	6a 00                	push   0x0
c001d399:	56                   	push   esi
c001d39a:	e8 51 31 fe ff       	call   c00004f0 <memset>
c001d39f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d3a4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d3a9:	59                   	pop    ecx
c001d3aa:	58                   	pop    eax
c001d3ab:	6a 01                	push   0x1
c001d3ad:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d3b1:	50                   	push   eax
c001d3b2:	6a 00                	push   0x0
c001d3b4:	6a 12                	push   0x12
c001d3b6:	56                   	push   esi
c001d3b7:	53                   	push   ebx
c001d3b8:	e8 5f fc ff ff       	call   c001d01c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3bd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d3c1:	83 c4 20             	add    esp,0x20
c001d3c4:	83 e0 7f             	and    eax,0x7f
c001d3c7:	83 f8 70             	cmp    eax,0x70
c001d3ca:	74 15                	je     c001d3e1 <ATAPI::detectMedia()+0x77>
c001d3cc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3d3:	75 0c                	jne    c001d3e1 <ATAPI::detectMedia()+0x77>
c001d3d5:	83 ec 0c             	sub    esp,0xc
c001d3d8:	53                   	push   ebx
c001d3d9:	e8 80 ff ff ff       	call   c001d35e <ATAPI::diskInserted()>
c001d3de:	83 c4 10             	add    esp,0x10
c001d3e1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d3e5:	83 e0 0f             	and    eax,0xf
c001d3e8:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d3ed:	0f b6 c0             	movzx  eax,al
c001d3f0:	75 19                	jne    c001d40b <ATAPI::detectMedia()+0xa1>
c001d3f2:	83 f8 02             	cmp    eax,0x2
c001d3f5:	75 14                	jne    c001d40b <ATAPI::detectMedia()+0xa1>
c001d3f7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3fe:	74 24                	je     c001d424 <ATAPI::detectMedia()+0xba>
c001d400:	83 ec 0c             	sub    esp,0xc
c001d403:	53                   	push   ebx
c001d404:	e8 d3 fe ff ff       	call   c001d2dc <ATAPI::diskRemoved()>
c001d409:	eb 16                	jmp    c001d421 <ATAPI::detectMedia()+0xb7>
c001d40b:	85 c0                	test   eax,eax
c001d40d:	75 15                	jne    c001d424 <ATAPI::detectMedia()+0xba>
c001d40f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d416:	75 0c                	jne    c001d424 <ATAPI::detectMedia()+0xba>
c001d418:	83 ec 0c             	sub    esp,0xc
c001d41b:	53                   	push   ebx
c001d41c:	e8 3d ff ff ff       	call   c001d35e <ATAPI::diskInserted()>
c001d421:	83 c4 10             	add    esp,0x10
c001d424:	83 c4 24             	add    esp,0x24
c001d427:	5b                   	pop    ebx
c001d428:	5e                   	pop    esi
c001d429:	c3                   	ret    

c001d42a <ATAPI::open(int, int, void*)>:
c001d42a:	56                   	push   esi
c001d42b:	53                   	push   ebx
c001d42c:	50                   	push   eax
c001d42d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d431:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d435:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d439:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d43f:	c1 e0 06             	shl    eax,0x6
c001d442:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d448:	01 d0                	add    eax,edx
c001d44a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d451:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d457:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d45e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d468:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d46f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d475:	6a 04                	push   0x4
c001d477:	6a 0c                	push   0xc
c001d479:	51                   	push   ecx
c001d47a:	52                   	push   edx
c001d47b:	e8 20 e3 ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d480:	90                   	nop
c001d481:	90                   	nop
c001d482:	6a 00                	push   0x0
c001d484:	6a 0c                	push   0xc
c001d486:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d48d:	50                   	push   eax
c001d48e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d494:	e8 07 e3 ff ff       	call   c001b7a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d499:	83 c4 14             	add    esp,0x14
c001d49c:	68 78 01 00 00       	push   0x178
c001d4a1:	e8 2d a6 fe ff       	call   c0007ad3 <malloc>
c001d4a6:	83 c4 0c             	add    esp,0xc
c001d4a9:	6a 00                	push   0x0
c001d4ab:	68 ff ff ff 7f       	push   0x7fffffff
c001d4b0:	6a 00                	push   0x0
c001d4b2:	6a 00                	push   0x0
c001d4b4:	53                   	push   ebx
c001d4b5:	68 ef 2d 02 c0       	push   0xc0022def
c001d4ba:	89 c6                	mov    esi,eax
c001d4bc:	50                   	push   eax
c001d4bd:	e8 fc 02 ff ff       	call   c000d7be <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d4c2:	83 c4 14             	add    esp,0x14
c001d4c5:	56                   	push   esi
c001d4c6:	e8 b3 03 ff ff       	call   c000d87e <LogicalDisk::assignDriveLetter()>
c001d4cb:	5a                   	pop    edx
c001d4cc:	59                   	pop    ecx
c001d4cd:	0f be c0             	movsx  eax,al
c001d4d0:	50                   	push   eax
c001d4d1:	68 40 2c 02 c0       	push   0xc0022c40
c001d4d6:	e8 2f d4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d4db:	58                   	pop    eax
c001d4dc:	5a                   	pop    edx
c001d4dd:	56                   	push   esi
c001d4de:	53                   	push   ebx
c001d4df:	e8 2c f1 fe ff       	call   c000c610 <Device::addChild(Device*)>
c001d4e4:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d4ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4ed:	e8 54 f5 fe ff       	call   c000ca46 <PhysicalDisk::startCache()>
c001d4f2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d4f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4fc:	e8 69 fe ff ff       	call   c001d36a <ATAPI::detectMedia()>
c001d501:	83 c4 14             	add    esp,0x14
c001d504:	31 c0                	xor    eax,eax
c001d506:	5b                   	pop    ebx
c001d507:	5e                   	pop    esi
c001d508:	c3                   	ret    
c001d509:	90                   	nop

c001d50a <ATAPI::read(unsigned long long, int, void*)>:
c001d50a:	55                   	push   ebp
c001d50b:	57                   	push   edi
c001d50c:	56                   	push   esi
c001d50d:	53                   	push   ebx
c001d50e:	83 ec 1c             	sub    esp,0x1c
c001d511:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d515:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d519:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d51d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d524:	74 3c                	je     c001d562 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d526:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d52a:	b9 03 00 00 00       	mov    ecx,0x3
c001d52f:	fc                   	cld    
c001d530:	31 c0                	xor    eax,eax
c001d532:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d534:	89 e8                	mov    eax,ebp
c001d536:	0f ce                	bswap  esi
c001d538:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d53c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d541:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d545:	50                   	push   eax
c001d546:	50                   	push   eax
c001d547:	55                   	push   ebp
c001d548:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d54c:	c1 e5 0b             	shl    ebp,0xb
c001d54f:	6a 00                	push   0x0
c001d551:	55                   	push   ebp
c001d552:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d556:	50                   	push   eax
c001d557:	53                   	push   ebx
c001d558:	e8 bf fa ff ff       	call   c001d01c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d55d:	83 c4 20             	add    esp,0x20
c001d560:	eb 1a                	jmp    c001d57c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d562:	83 ec 0c             	sub    esp,0xc
c001d565:	53                   	push   ebx
c001d566:	e8 ff fd ff ff       	call   c001d36a <ATAPI::detectMedia()>
c001d56b:	83 c4 10             	add    esp,0x10
c001d56e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d575:	75 af                	jne    c001d526 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d577:	b8 02 00 00 00       	mov    eax,0x2
c001d57c:	83 c4 1c             	add    esp,0x1c
c001d57f:	5b                   	pop    ebx
c001d580:	5e                   	pop    esi
c001d581:	5f                   	pop    edi
c001d582:	5d                   	pop    ebp
c001d583:	c3                   	ret    

c001d584 <SATA::close(int, int, void*)>:
c001d584:	83 ec 0c             	sub    esp,0xc
c001d587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d58b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d591:	85 c0                	test   eax,eax
c001d593:	74 0c                	je     c001d5a1 <SATA::close(int, int, void*)+0x1d>
c001d595:	8b 10                	mov    edx,DWORD PTR [eax]
c001d597:	83 ec 0c             	sub    esp,0xc
c001d59a:	50                   	push   eax
c001d59b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d59e:	83 c4 10             	add    esp,0x10
c001d5a1:	31 c0                	xor    eax,eax
c001d5a3:	83 c4 0c             	add    esp,0xc
c001d5a6:	c3                   	ret    
c001d5a7:	90                   	nop

c001d5a8 <SATA::powerSaving(PowerSavingLevel)>:
c001d5a8:	c3                   	ret    
c001d5a9:	90                   	nop

c001d5aa <SATA::open(int, int, void*)>:
c001d5aa:	56                   	push   esi
c001d5ab:	53                   	push   ebx
c001d5ac:	50                   	push   eax
c001d5ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5b5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d5bf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d5c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5c9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d5d3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d5dd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d5e4:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d5ea:	e8 f3 a7 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d5ef:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d5f5:	89 c6                	mov    esi,eax
c001d5f7:	e8 e6 a7 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d5fc:	81 c6 00 10 00 00    	add    esi,0x1000
c001d602:	39 c6                	cmp    esi,eax
c001d604:	74 10                	je     c001d616 <SATA::open(int, int, void*)+0x6c>
c001d606:	83 ec 0c             	sub    esp,0xc
c001d609:	68 88 2c 02 c0       	push   0xc0022c88
c001d60e:	e8 9a 3b ff ff       	call   c00111ad <KePanic(char const*)>
c001d613:	83 c4 10             	add    esp,0x10
c001d616:	83 ec 0c             	sub    esp,0xc
c001d619:	6a 02                	push   0x2
c001d61b:	e8 d5 bf fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d620:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d626:	6a 03                	push   0x3
c001d628:	50                   	push   eax
c001d629:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d62f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d635:	e8 c4 c6 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d63a:	83 c4 14             	add    esp,0x14
c001d63d:	53                   	push   ebx
c001d63e:	e8 03 f4 fe ff       	call   c000ca46 <PhysicalDisk::startCache()>
c001d643:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d646:	e8 47 06 ff ff       	call   c000dc92 <createPartitionsForDisk(PhysicalDisk*)>
c001d64b:	83 c4 14             	add    esp,0x14
c001d64e:	31 c0                	xor    eax,eax
c001d650:	5b                   	pop    ebx
c001d651:	5e                   	pop    esi
c001d652:	c3                   	ret    
c001d653:	90                   	nop

c001d654 <SATA::SATA()>:
c001d654:	83 ec 0c             	sub    esp,0xc
c001d657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65b:	83 ec 04             	sub    esp,0x4
c001d65e:	68 00 02 00 00       	push   0x200
c001d663:	68 9c 2c 02 c0       	push   0xc0022c9c
c001d668:	50                   	push   eax
c001d669:	e8 70 f3 fe ff       	call   c000c9de <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d66e:	83 c4 10             	add    esp,0x10
c001d671:	ba 0c 2d 02 c0       	mov    edx,0xc0022d0c
c001d676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d67a:	89 10                	mov    DWORD PTR [eax],edx
c001d67c:	90                   	nop
c001d67d:	83 c4 0c             	add    esp,0xc
c001d680:	c3                   	ret    
c001d681:	90                   	nop

c001d682 <SATA::access(unsigned long long, int, void*, bool)>:
c001d682:	55                   	push   ebp
c001d683:	57                   	push   edi
c001d684:	56                   	push   esi
c001d685:	53                   	push   ebx
c001d686:	83 ec 2c             	sub    esp,0x2c
c001d689:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d68d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d692:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d696:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d69a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d69e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d6a2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d6a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6aa:	7e 10                	jle    c001d6bc <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d6ac:	83 ec 0c             	sub    esp,0xc
c001d6af:	68 ac 2c 02 c0       	push   0xc0022cac
c001d6b4:	e8 f4 3a ff ff       	call   c00111ad <KePanic(char const*)>
c001d6b9:	83 c4 10             	add    esp,0x10
c001d6bc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d6c2:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d6c8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d6ce:	89 e8                	mov    eax,ebp
c001d6d0:	c1 e0 07             	shl    eax,0x7
c001d6d3:	01 d0                	add    eax,edx
c001d6d5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d6df:	8d 45 02             	lea    eax,[ebp+0x2]
c001d6e2:	51                   	push   ecx
c001d6e3:	c1 e0 07             	shl    eax,0x7
c001d6e6:	51                   	push   ecx
c001d6e7:	01 d0                	add    eax,edx
c001d6e9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d6ed:	50                   	push   eax
c001d6ee:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d6f4:	e8 6b ec ff ff       	call   c001c364 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d6f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d6fd:	83 c4 10             	add    esp,0x10
c001d700:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d705:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d709:	0f 84 5b 01 00 00    	je     c001d86a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d70f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d713:	c1 e0 09             	shl    eax,0x9
c001d716:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d71b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d71f:	74 0e                	je     c001d72f <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d721:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d727:	89 c1                	mov    ecx,eax
c001d729:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d72d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d733:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d739:	8d 45 02             	lea    eax,[ebp+0x2]
c001d73c:	c1 e0 07             	shl    eax,0x7
c001d73f:	01 d0                	add    eax,edx
c001d741:	8b 00                	mov    eax,DWORD PTR [eax]
c001d743:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d749:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d74f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d753:	c1 e1 05             	shl    ecx,0x5
c001d756:	01 c8                	add    eax,ecx
c001d758:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d75c:	83 e1 01             	and    ecx,0x1
c001d75f:	89 ce                	mov    esi,ecx
c001d761:	8a 08                	mov    cl,BYTE PTR [eax]
c001d763:	c1 e6 06             	shl    esi,0x6
c001d766:	83 e1 bf             	and    ecx,0xffffffbf
c001d769:	09 f1                	or     ecx,esi
c001d76b:	88 08                	mov    BYTE PTR [eax],cl
c001d76d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d76f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d775:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d77b:	89 08                	mov    DWORD PTR [eax],ecx
c001d77d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d783:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d789:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d78f:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d792:	50                   	push   eax
c001d793:	68 90 00 00 00       	push   0x90
c001d798:	6a 00                	push   0x0
c001d79a:	56                   	push   esi
c001d79b:	e8 50 2d fe ff       	call   c00004f0 <memset>
c001d7a0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d7a6:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d7ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7b0:	83 c4 10             	add    esp,0x10
c001d7b3:	48                   	dec    eax
c001d7b4:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d7b9:	89 c1                	mov    ecx,eax
c001d7bb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d7c1:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d7c6:	09 c8                	or     eax,ecx
c001d7c8:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d7ce:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d7d4:	83 c8 80             	or     eax,0xffffff80
c001d7d7:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d7dd:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d7e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7e4:	25 00 7f 00 00       	and    eax,0x7f00
c001d7e9:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d7ee:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d7f3:	66 89 06             	mov    WORD PTR [esi],ax
c001d7f6:	b0 35                	mov    al,0x35
c001d7f8:	75 02                	jne    c001d7fc <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d7fa:	b0 25                	mov    al,0x25
c001d7fc:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d7ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d803:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d807:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d80b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d80f:	c1 e8 10             	shr    eax,0x10
c001d812:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d819:	c1 e8 18             	shr    eax,0x18
c001d81c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d81f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d823:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d826:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d82a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d82d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d831:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d835:	89 ee                	mov    esi,ebp
c001d837:	31 c0                	xor    eax,eax
c001d839:	c1 e6 07             	shl    esi,0x7
c001d83c:	01 d6                	add    esi,edx
c001d83e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d844:	80 e1 88             	and    cl,0x88
c001d847:	74 0a                	je     c001d853 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d849:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d84e:	74 0a                	je     c001d85a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d850:	40                   	inc    eax
c001d851:	eb eb                	jmp    c001d83e <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d853:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d858:	75 17                	jne    c001d871 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d85a:	83 ec 0c             	sub    esp,0xc
c001d85d:	68 e5 2c 02 c0       	push   0xc0022ce5
c001d862:	e8 a3 d0 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d867:	83 c4 10             	add    esp,0x10
c001d86a:	b8 01 00 00 00       	mov    eax,0x1
c001d86f:	eb 5b                	jmp    c001d8cc <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d871:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d875:	c1 e5 07             	shl    ebp,0x7
c001d878:	b8 01 00 00 00       	mov    eax,0x1
c001d87d:	01 ea                	add    edx,ebp
c001d87f:	d3 e0                	shl    eax,cl
c001d881:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d887:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d88d:	85 c8                	test   eax,ecx
c001d88f:	74 16                	je     c001d8a7 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d891:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d897:	0f ba e1 1e          	bt     ecx,0x1e
c001d89b:	73 ea                	jae    c001d887 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d89d:	83 ec 0c             	sub    esp,0xc
c001d8a0:	68 f3 2c 02 c0       	push   0xc0022cf3
c001d8a5:	eb bb                	jmp    c001d862 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d8a7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d8ad:	0f ba e0 1e          	bt     eax,0x1e
c001d8b1:	72 b7                	jb     c001d86a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d8b3:	31 c0                	xor    eax,eax
c001d8b5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d8ba:	75 10                	jne    c001d8cc <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d8bc:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d8c2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d8c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d8cc:	83 c4 2c             	add    esp,0x2c
c001d8cf:	5b                   	pop    ebx
c001d8d0:	5e                   	pop    esi
c001d8d1:	5f                   	pop    edi
c001d8d2:	5d                   	pop    ebp
c001d8d3:	c3                   	ret    

c001d8d4 <SATA::read(unsigned long long, int, void*)>:
c001d8d4:	55                   	push   ebp
c001d8d5:	57                   	push   edi
c001d8d6:	56                   	push   esi
c001d8d7:	be 04 00 00 00       	mov    esi,0x4
c001d8dc:	53                   	push   ebx
c001d8dd:	83 ec 0c             	sub    esp,0xc
c001d8e0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d8e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d8e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8ec:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d8f0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d8f3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d8f9:	0f 87 1a 02 00 00    	ja     c001db19 <SATA::read(unsigned long long, int, void*)+0x245>
c001d8ff:	85 c9                	test   ecx,ecx
c001d901:	be 06 00 00 00       	mov    esi,0x6
c001d906:	0f 84 0d 02 00 00    	je     c001db19 <SATA::read(unsigned long long, int, void*)+0x245>
c001d90c:	56                   	push   esi
c001d90d:	56                   	push   esi
c001d90e:	6a 00                	push   0x0
c001d910:	51                   	push   ecx
c001d911:	53                   	push   ebx
c001d912:	52                   	push   edx
c001d913:	50                   	push   eax
c001d914:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d918:	e8 65 fd ff ff       	call   c001d682 <SATA::access(unsigned long long, int, void*, bool)>
c001d91d:	83 c4 20             	add    esp,0x20
c001d920:	85 c0                	test   eax,eax
c001d922:	89 c6                	mov    esi,eax
c001d924:	0f 85 ea 01 00 00    	jne    c001db14 <SATA::read(unsigned long long, int, void*)+0x240>
c001d92a:	50                   	push   eax
c001d92b:	50                   	push   eax
c001d92c:	6a 0f                	push   0xf
c001d92e:	6a 00                	push   0x0
c001d930:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001d936:	bb 0a 00 00 00       	mov    ebx,0xa
c001d93b:	e8 7d f2 ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001d940:	5a                   	pop    edx
c001d941:	59                   	pop    ecx
c001d942:	b9 10 27 00 00       	mov    ecx,0x2710
c001d947:	0f b6 c0             	movzx  eax,al
c001d94a:	50                   	push   eax
c001d94b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d950:	99                   	cdq    
c001d951:	f7 f9                	idiv   ecx
c001d953:	99                   	cdq    
c001d954:	f7 fb                	idiv   ebx
c001d956:	8d 42 30             	lea    eax,[edx+0x30]
c001d959:	0f b6 c0             	movzx  eax,al
c001d95c:	50                   	push   eax
c001d95d:	e8 4a f2 ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001d962:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d968:	5f                   	pop    edi
c001d969:	5d                   	pop    ebp
c001d96a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d96f:	6a 0f                	push   0xf
c001d971:	6a 00                	push   0x0
c001d973:	e8 45 f2 ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001d978:	5a                   	pop    edx
c001d979:	59                   	pop    ecx
c001d97a:	0f b6 c0             	movzx  eax,al
c001d97d:	50                   	push   eax
c001d97e:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d983:	99                   	cdq    
c001d984:	f7 fd                	idiv   ebp
c001d986:	99                   	cdq    
c001d987:	f7 fb                	idiv   ebx
c001d989:	8d 42 30             	lea    eax,[edx+0x30]
c001d98c:	0f b6 c0             	movzx  eax,al
c001d98f:	50                   	push   eax
c001d990:	e8 17 f2 ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001d995:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d99b:	5f                   	pop    edi
c001d99c:	bf 64 00 00 00       	mov    edi,0x64
c001d9a1:	58                   	pop    eax
c001d9a2:	6a 0f                	push   0xf
c001d9a4:	6a 00                	push   0x0
c001d9a6:	e8 12 f2 ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001d9ab:	5a                   	pop    edx
c001d9ac:	59                   	pop    ecx
c001d9ad:	0f b6 c0             	movzx  eax,al
c001d9b0:	50                   	push   eax
c001d9b1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d9b6:	99                   	cdq    
c001d9b7:	f7 ff                	idiv   edi
c001d9b9:	99                   	cdq    
c001d9ba:	f7 fb                	idiv   ebx
c001d9bc:	8d 42 30             	lea    eax,[edx+0x30]
c001d9bf:	0f b6 c0             	movzx  eax,al
c001d9c2:	50                   	push   eax
c001d9c3:	e8 e4 f1 ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001d9c8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d9ce:	58                   	pop    eax
c001d9cf:	5a                   	pop    edx
c001d9d0:	6a 0f                	push   0xf
c001d9d2:	6a 00                	push   0x0
c001d9d4:	e8 e4 f1 ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001d9d9:	59                   	pop    ecx
c001d9da:	5a                   	pop    edx
c001d9db:	0f b6 c0             	movzx  eax,al
c001d9de:	50                   	push   eax
c001d9df:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d9e4:	99                   	cdq    
c001d9e5:	f7 fb                	idiv   ebx
c001d9e7:	99                   	cdq    
c001d9e8:	f7 fb                	idiv   ebx
c001d9ea:	8d 42 30             	lea    eax,[edx+0x30]
c001d9ed:	0f b6 c0             	movzx  eax,al
c001d9f0:	50                   	push   eax
c001d9f1:	e8 b6 f1 ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001d9f6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d9fc:	59                   	pop    ecx
c001d9fd:	58                   	pop    eax
c001d9fe:	6a 0f                	push   0xf
c001da00:	6a 00                	push   0x0
c001da02:	e8 b6 f1 ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001da07:	5a                   	pop    edx
c001da08:	59                   	pop    ecx
c001da09:	0f b6 c0             	movzx  eax,al
c001da0c:	50                   	push   eax
c001da0d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da12:	99                   	cdq    
c001da13:	f7 fb                	idiv   ebx
c001da15:	83 c2 30             	add    edx,0x30
c001da18:	0f b6 d2             	movzx  edx,dl
c001da1b:	52                   	push   edx
c001da1c:	e8 8b f1 ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001da21:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001da27:	58                   	pop    eax
c001da28:	5a                   	pop    edx
c001da29:	6a 0f                	push   0xf
c001da2b:	6a 00                	push   0x0
c001da2d:	e8 8b f1 ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001da32:	59                   	pop    ecx
c001da33:	b9 10 27 00 00       	mov    ecx,0x2710
c001da38:	5a                   	pop    edx
c001da39:	0f b6 c0             	movzx  eax,al
c001da3c:	50                   	push   eax
c001da3d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001da42:	99                   	cdq    
c001da43:	f7 f9                	idiv   ecx
c001da45:	99                   	cdq    
c001da46:	f7 fb                	idiv   ebx
c001da48:	8d 42 30             	lea    eax,[edx+0x30]
c001da4b:	0f b6 c0             	movzx  eax,al
c001da4e:	50                   	push   eax
c001da4f:	e8 58 f1 ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001da54:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001da5a:	59                   	pop    ecx
c001da5b:	58                   	pop    eax
c001da5c:	6a 0f                	push   0xf
c001da5e:	6a 00                	push   0x0
c001da60:	e8 58 f1 ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001da65:	5a                   	pop    edx
c001da66:	59                   	pop    ecx
c001da67:	0f b6 c0             	movzx  eax,al
c001da6a:	50                   	push   eax
c001da6b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001da70:	99                   	cdq    
c001da71:	f7 fd                	idiv   ebp
c001da73:	99                   	cdq    
c001da74:	f7 fb                	idiv   ebx
c001da76:	8d 42 30             	lea    eax,[edx+0x30]
c001da79:	0f b6 c0             	movzx  eax,al
c001da7c:	50                   	push   eax
c001da7d:	e8 2a f1 ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001da82:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001da88:	5d                   	pop    ebp
c001da89:	58                   	pop    eax
c001da8a:	6a 0f                	push   0xf
c001da8c:	6a 00                	push   0x0
c001da8e:	e8 2a f1 ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001da93:	5a                   	pop    edx
c001da94:	59                   	pop    ecx
c001da95:	0f b6 c0             	movzx  eax,al
c001da98:	50                   	push   eax
c001da99:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001da9e:	99                   	cdq    
c001da9f:	f7 ff                	idiv   edi
c001daa1:	99                   	cdq    
c001daa2:	f7 fb                	idiv   ebx
c001daa4:	8d 42 30             	lea    eax,[edx+0x30]
c001daa7:	0f b6 c0             	movzx  eax,al
c001daaa:	50                   	push   eax
c001daab:	e8 fc f0 ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001dab0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dab6:	5f                   	pop    edi
c001dab7:	5d                   	pop    ebp
c001dab8:	6a 0f                	push   0xf
c001daba:	6a 00                	push   0x0
c001dabc:	e8 fc f0 ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001dac1:	5a                   	pop    edx
c001dac2:	59                   	pop    ecx
c001dac3:	0f b6 c0             	movzx  eax,al
c001dac6:	50                   	push   eax
c001dac7:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dacc:	99                   	cdq    
c001dacd:	f7 fb                	idiv   ebx
c001dacf:	99                   	cdq    
c001dad0:	f7 fb                	idiv   ebx
c001dad2:	8d 42 30             	lea    eax,[edx+0x30]
c001dad5:	0f b6 c0             	movzx  eax,al
c001dad8:	50                   	push   eax
c001dad9:	e8 ce f0 ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001dade:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dae4:	5f                   	pop    edi
c001dae5:	5d                   	pop    ebp
c001dae6:	6a 0f                	push   0xf
c001dae8:	6a 00                	push   0x0
c001daea:	e8 ce f0 ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001daef:	5a                   	pop    edx
c001daf0:	59                   	pop    ecx
c001daf1:	0f b6 c0             	movzx  eax,al
c001daf4:	50                   	push   eax
c001daf5:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dafa:	99                   	cdq    
c001dafb:	f7 fb                	idiv   ebx
c001dafd:	83 c2 30             	add    edx,0x30
c001db00:	0f b6 d2             	movzx  edx,dl
c001db03:	52                   	push   edx
c001db04:	e8 a3 f0 ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001db09:	83 c4 10             	add    esp,0x10
c001db0c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001db12:	eb 05                	jmp    c001db19 <SATA::read(unsigned long long, int, void*)+0x245>
c001db14:	be 01 00 00 00       	mov    esi,0x1
c001db19:	83 c4 0c             	add    esp,0xc
c001db1c:	89 f0                	mov    eax,esi
c001db1e:	5b                   	pop    ebx
c001db1f:	5e                   	pop    esi
c001db20:	5f                   	pop    edi
c001db21:	5d                   	pop    ebp
c001db22:	c3                   	ret    
c001db23:	90                   	nop

c001db24 <SATA::write(unsigned long long, int, void*)>:
c001db24:	55                   	push   ebp
c001db25:	57                   	push   edi
c001db26:	56                   	push   esi
c001db27:	53                   	push   ebx
c001db28:	83 ec 0c             	sub    esp,0xc
c001db2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001db2f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001db33:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001db37:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db3b:	8d 70 ff             	lea    esi,[eax-0x1]
c001db3e:	b8 04 00 00 00       	mov    eax,0x4
c001db43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001db49:	0f 87 2c 02 00 00    	ja     c001dd7b <SATA::write(unsigned long long, int, void*)+0x257>
c001db4f:	85 db                	test   ebx,ebx
c001db51:	b8 06 00 00 00       	mov    eax,0x6
c001db56:	0f 84 1f 02 00 00    	je     c001dd7b <SATA::write(unsigned long long, int, void*)+0x257>
c001db5c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001db60:	c1 e6 09             	shl    esi,0x9
c001db63:	01 de                	add    esi,ebx
c001db65:	50                   	push   eax
c001db66:	89 d7                	mov    edi,edx
c001db68:	50                   	push   eax
c001db69:	83 c7 01             	add    edi,0x1
c001db6c:	6a 01                	push   0x1
c001db6e:	89 cd                	mov    ebp,ecx
c001db70:	53                   	push   ebx
c001db71:	83 d5 00             	adc    ebp,0x0
c001db74:	6a 01                	push   0x1
c001db76:	81 c3 00 02 00 00    	add    ebx,0x200
c001db7c:	51                   	push   ecx
c001db7d:	52                   	push   edx
c001db7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db82:	e8 fb fa ff ff       	call   c001d682 <SATA::access(unsigned long long, int, void*, bool)>
c001db87:	83 c4 20             	add    esp,0x20
c001db8a:	39 f3                	cmp    ebx,esi
c001db8c:	89 fa                	mov    edx,edi
c001db8e:	89 e9                	mov    ecx,ebp
c001db90:	75 d3                	jne    c001db65 <SATA::write(unsigned long long, int, void*)+0x41>
c001db92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001db96:	bd 10 27 00 00       	mov    ebp,0x2710
c001db9b:	bb 0a 00 00 00       	mov    ebx,0xa
c001dba0:	01 05 b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,eax
c001dba6:	50                   	push   eax
c001dba7:	50                   	push   eax
c001dba8:	6a 0f                	push   0xf
c001dbaa:	6a 00                	push   0x0
c001dbac:	e8 0c f0 ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001dbb1:	5a                   	pop    edx
c001dbb2:	59                   	pop    ecx
c001dbb3:	0f b6 c0             	movzx  eax,al
c001dbb6:	50                   	push   eax
c001dbb7:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbbc:	99                   	cdq    
c001dbbd:	f7 fd                	idiv   ebp
c001dbbf:	99                   	cdq    
c001dbc0:	f7 fb                	idiv   ebx
c001dbc2:	8d 42 30             	lea    eax,[edx+0x30]
c001dbc5:	0f b6 c0             	movzx  eax,al
c001dbc8:	50                   	push   eax
c001dbc9:	e8 de ef ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001dbce:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dbd4:	5e                   	pop    esi
c001dbd5:	5f                   	pop    edi
c001dbd6:	bf e8 03 00 00       	mov    edi,0x3e8
c001dbdb:	6a 0f                	push   0xf
c001dbdd:	6a 00                	push   0x0
c001dbdf:	e8 d9 ef ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001dbe4:	5a                   	pop    edx
c001dbe5:	59                   	pop    ecx
c001dbe6:	0f b6 c0             	movzx  eax,al
c001dbe9:	50                   	push   eax
c001dbea:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbef:	99                   	cdq    
c001dbf0:	f7 ff                	idiv   edi
c001dbf2:	99                   	cdq    
c001dbf3:	f7 fb                	idiv   ebx
c001dbf5:	8d 42 30             	lea    eax,[edx+0x30]
c001dbf8:	0f b6 c0             	movzx  eax,al
c001dbfb:	50                   	push   eax
c001dbfc:	e8 ab ef ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001dc01:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dc07:	5e                   	pop    esi
c001dc08:	be 64 00 00 00       	mov    esi,0x64
c001dc0d:	58                   	pop    eax
c001dc0e:	6a 0f                	push   0xf
c001dc10:	6a 00                	push   0x0
c001dc12:	e8 a6 ef ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001dc17:	5a                   	pop    edx
c001dc18:	59                   	pop    ecx
c001dc19:	0f b6 c0             	movzx  eax,al
c001dc1c:	50                   	push   eax
c001dc1d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc22:	99                   	cdq    
c001dc23:	f7 fe                	idiv   esi
c001dc25:	99                   	cdq    
c001dc26:	f7 fb                	idiv   ebx
c001dc28:	8d 42 30             	lea    eax,[edx+0x30]
c001dc2b:	0f b6 c0             	movzx  eax,al
c001dc2e:	50                   	push   eax
c001dc2f:	e8 78 ef ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001dc34:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dc3a:	58                   	pop    eax
c001dc3b:	5a                   	pop    edx
c001dc3c:	6a 0f                	push   0xf
c001dc3e:	6a 00                	push   0x0
c001dc40:	e8 78 ef ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001dc45:	59                   	pop    ecx
c001dc46:	5a                   	pop    edx
c001dc47:	0f b6 c0             	movzx  eax,al
c001dc4a:	50                   	push   eax
c001dc4b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc50:	99                   	cdq    
c001dc51:	f7 fb                	idiv   ebx
c001dc53:	99                   	cdq    
c001dc54:	f7 fb                	idiv   ebx
c001dc56:	8d 42 30             	lea    eax,[edx+0x30]
c001dc59:	0f b6 c0             	movzx  eax,al
c001dc5c:	50                   	push   eax
c001dc5d:	e8 4a ef ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001dc62:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc68:	59                   	pop    ecx
c001dc69:	58                   	pop    eax
c001dc6a:	6a 0f                	push   0xf
c001dc6c:	6a 00                	push   0x0
c001dc6e:	e8 4a ef ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001dc73:	5a                   	pop    edx
c001dc74:	59                   	pop    ecx
c001dc75:	0f b6 c0             	movzx  eax,al
c001dc78:	50                   	push   eax
c001dc79:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc7e:	99                   	cdq    
c001dc7f:	f7 fb                	idiv   ebx
c001dc81:	83 c2 30             	add    edx,0x30
c001dc84:	0f b6 d2             	movzx  edx,dl
c001dc87:	52                   	push   edx
c001dc88:	e8 1f ef ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001dc8d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dc93:	58                   	pop    eax
c001dc94:	5a                   	pop    edx
c001dc95:	6a 0f                	push   0xf
c001dc97:	6a 00                	push   0x0
c001dc99:	e8 1f ef ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001dc9e:	59                   	pop    ecx
c001dc9f:	5a                   	pop    edx
c001dca0:	0f b6 c0             	movzx  eax,al
c001dca3:	50                   	push   eax
c001dca4:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dca9:	99                   	cdq    
c001dcaa:	f7 fd                	idiv   ebp
c001dcac:	99                   	cdq    
c001dcad:	f7 fb                	idiv   ebx
c001dcaf:	8d 42 30             	lea    eax,[edx+0x30]
c001dcb2:	0f b6 c0             	movzx  eax,al
c001dcb5:	50                   	push   eax
c001dcb6:	e8 f1 ee ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001dcbb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dcc1:	59                   	pop    ecx
c001dcc2:	5d                   	pop    ebp
c001dcc3:	6a 0f                	push   0xf
c001dcc5:	6a 00                	push   0x0
c001dcc7:	e8 f1 ee ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001dccc:	5a                   	pop    edx
c001dccd:	59                   	pop    ecx
c001dcce:	0f b6 c0             	movzx  eax,al
c001dcd1:	50                   	push   eax
c001dcd2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcd7:	99                   	cdq    
c001dcd8:	f7 ff                	idiv   edi
c001dcda:	99                   	cdq    
c001dcdb:	f7 fb                	idiv   ebx
c001dcdd:	8d 42 30             	lea    eax,[edx+0x30]
c001dce0:	0f b6 c0             	movzx  eax,al
c001dce3:	50                   	push   eax
c001dce4:	e8 c3 ee ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001dce9:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dcef:	5f                   	pop    edi
c001dcf0:	5d                   	pop    ebp
c001dcf1:	6a 0f                	push   0xf
c001dcf3:	6a 00                	push   0x0
c001dcf5:	e8 c3 ee ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001dcfa:	5a                   	pop    edx
c001dcfb:	59                   	pop    ecx
c001dcfc:	0f b6 c0             	movzx  eax,al
c001dcff:	50                   	push   eax
c001dd00:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd05:	99                   	cdq    
c001dd06:	f7 fe                	idiv   esi
c001dd08:	99                   	cdq    
c001dd09:	f7 fb                	idiv   ebx
c001dd0b:	8d 42 30             	lea    eax,[edx+0x30]
c001dd0e:	0f b6 c0             	movzx  eax,al
c001dd11:	50                   	push   eax
c001dd12:	e8 95 ee ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001dd17:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dd1d:	5e                   	pop    esi
c001dd1e:	5f                   	pop    edi
c001dd1f:	6a 0f                	push   0xf
c001dd21:	6a 00                	push   0x0
c001dd23:	e8 95 ee ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001dd28:	5d                   	pop    ebp
c001dd29:	5a                   	pop    edx
c001dd2a:	0f b6 c0             	movzx  eax,al
c001dd2d:	50                   	push   eax
c001dd2e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd33:	99                   	cdq    
c001dd34:	f7 fb                	idiv   ebx
c001dd36:	99                   	cdq    
c001dd37:	f7 fb                	idiv   ebx
c001dd39:	8d 42 30             	lea    eax,[edx+0x30]
c001dd3c:	0f b6 c0             	movzx  eax,al
c001dd3f:	50                   	push   eax
c001dd40:	e8 67 ee ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001dd45:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dd4b:	59                   	pop    ecx
c001dd4c:	5e                   	pop    esi
c001dd4d:	6a 0f                	push   0xf
c001dd4f:	6a 00                	push   0x0
c001dd51:	e8 67 ee ff ff       	call   c001cbbd <combineColours(unsigned char, unsigned char)>
c001dd56:	5f                   	pop    edi
c001dd57:	5d                   	pop    ebp
c001dd58:	0f b6 c0             	movzx  eax,al
c001dd5b:	50                   	push   eax
c001dd5c:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd61:	99                   	cdq    
c001dd62:	f7 fb                	idiv   ebx
c001dd64:	83 c2 30             	add    edx,0x30
c001dd67:	0f b6 d2             	movzx  edx,dl
c001dd6a:	52                   	push   edx
c001dd6b:	e8 3c ee ff ff       	call   c001cbac <combineCharAndColour(char, unsigned char)>
c001dd70:	83 c4 10             	add    esp,0x10
c001dd73:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dd79:	31 c0                	xor    eax,eax
c001dd7b:	83 c4 0c             	add    esp,0xc
c001dd7e:	5b                   	pop    ebx
c001dd7f:	5e                   	pop    esi
c001dd80:	5f                   	pop    edi
c001dd81:	5d                   	pop    ebp
c001dd82:	c3                   	ret    
c001dd83:	90                   	nop

c001dd84 <SATAPI::write(unsigned long long, int, void*)>:
c001dd84:	b8 03 00 00 00       	mov    eax,0x3
c001dd89:	c3                   	ret    

c001dd8a <SATAPI::close(int, int, void*)>:
c001dd8a:	83 ec 0c             	sub    esp,0xc
c001dd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd91:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dd97:	85 c0                	test   eax,eax
c001dd99:	74 0c                	je     c001dda7 <SATAPI::close(int, int, void*)+0x1d>
c001dd9b:	8b 10                	mov    edx,DWORD PTR [eax]
c001dd9d:	83 ec 0c             	sub    esp,0xc
c001dda0:	50                   	push   eax
c001dda1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dda4:	83 c4 10             	add    esp,0x10
c001dda7:	31 c0                	xor    eax,eax
c001dda9:	83 c4 0c             	add    esp,0xc
c001ddac:	c3                   	ret    
c001ddad:	90                   	nop

c001ddae <SATAPI::SATAPI()>:
c001ddae:	83 ec 0c             	sub    esp,0xc
c001ddb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddb5:	83 ec 04             	sub    esp,0x4
c001ddb8:	68 00 08 00 00       	push   0x800
c001ddbd:	68 3c 2d 02 c0       	push   0xc0022d3c
c001ddc2:	50                   	push   eax
c001ddc3:	e8 16 ec fe ff       	call   c000c9de <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ddc8:	83 c4 10             	add    esp,0x10
c001ddcb:	ba 30 2e 02 c0       	mov    edx,0xc0022e30
c001ddd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd4:	89 10                	mov    DWORD PTR [eax],edx
c001ddd6:	90                   	nop
c001ddd7:	83 c4 0c             	add    esp,0xc
c001ddda:	c3                   	ret    
c001dddb:	90                   	nop

c001dddc <SATAPI::diskRemoved()>:
c001dddc:	c3                   	ret    
c001dddd:	90                   	nop

c001ddde <SATAPI::diskInserted()>:
c001ddde:	83 ec 18             	sub    esp,0x18
c001dde1:	68 48 2d 02 c0       	push   0xc0022d48
c001dde6:	e8 1f cb fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001ddeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddef:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ddf6:	83 c4 1c             	add    esp,0x1c
c001ddf9:	c3                   	ret    

c001ddfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ddfa:	55                   	push   ebp
c001ddfb:	57                   	push   edi
c001ddfc:	56                   	push   esi
c001ddfd:	53                   	push   ebx
c001ddfe:	83 ec 34             	sub    esp,0x34
c001de01:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001de05:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001de09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de0d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001de11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de15:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001de1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de25:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001de2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001de2f:	83 c0 02             	add    eax,0x2
c001de32:	c1 e0 07             	shl    eax,0x7
c001de35:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de41:	c1 e0 07             	shl    eax,0x7
c001de44:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de48:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001de4c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001de56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001de5a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001de60:	e8 ff e4 ff ff       	call   c001c364 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001de65:	83 c4 10             	add    esp,0x10
c001de68:	89 c2                	mov    edx,eax
c001de6a:	b8 01 00 00 00       	mov    eax,0x1
c001de6f:	83 fa ff             	cmp    edx,0xffffffff
c001de72:	0f 84 5f 02 00 00    	je     c001e0d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001de78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001de7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de80:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de86:	8b 00                	mov    eax,DWORD PTR [eax]
c001de88:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001de8e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001de94:	89 d1                	mov    ecx,edx
c001de96:	c1 e1 05             	shl    ecx,0x5
c001de99:	01 c8                	add    eax,ecx
c001de9b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de9d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001dea3:	81 c9 25 00 01 00    	or     ecx,0x10025
c001dea9:	89 08                	mov    DWORD PTR [eax],ecx
c001deab:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001deb1:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001deb7:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001debd:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001dec0:	50                   	push   eax
c001dec1:	68 90 00 00 00       	push   0x90
c001dec6:	6a 00                	push   0x0
c001dec8:	53                   	push   ebx
c001dec9:	e8 22 26 fe ff       	call   c00004f0 <memset>
c001dece:	8d 7b 40             	lea    edi,[ebx+0x40]
c001ded1:	b9 0c 00 00 00       	mov    ecx,0xc
c001ded6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001deda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dedc:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001dee2:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001dee6:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001deea:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001def0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001def4:	48                   	dec    eax
c001def5:	25 ff ff 3f 00       	and    eax,0x3fffff
c001defa:	89 c1                	mov    ecx,eax
c001defc:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001df02:	25 00 00 c0 ff       	and    eax,0xffc00000
c001df07:	09 c8                	or     eax,ecx
c001df09:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001df0f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001df15:	83 c8 80             	or     eax,0xffffff80
c001df18:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001df1e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001df21:	25 00 7f 00 00       	and    eax,0x7f00
c001df26:	0d 27 80 ff ff       	or     eax,0xffff8027
c001df2b:	66 89 03             	mov    WORD PTR [ebx],ax
c001df2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df32:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001df36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df3a:	c1 e8 10             	shr    eax,0x10
c001df3d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001df40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df44:	c1 e8 18             	shr    eax,0x18
c001df47:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001df4a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001df4e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001df51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df55:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001df58:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df5c:	83 c4 10             	add    esp,0x10
c001df5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df63:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001df67:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001df6b:	31 c0                	xor    eax,eax
c001df6d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001df73:	80 e1 88             	and    cl,0x88
c001df76:	74 0a                	je     c001df82 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001df78:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df7d:	74 0a                	je     c001df89 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001df7f:	40                   	inc    eax
c001df80:	eb eb                	jmp    c001df6d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001df82:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df87:	75 43                	jne    c001dfcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001df89:	83 ec 0c             	sub    esp,0xc
c001df8c:	68 60 2d 02 c0       	push   0xc0022d60
c001df91:	e8 74 c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001df96:	58                   	pop    eax
c001df97:	5a                   	pop    edx
c001df98:	68 75 2d 02 c0       	push   0xc0022d75
c001df9d:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001dfa3:	e8 04 ab fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001dfa8:	59                   	pop    ecx
c001dfa9:	5b                   	pop    ebx
c001dfaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfae:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dfb4:	e8 45 e4 ff ff       	call   c001c3fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001dfb9:	5e                   	pop    esi
c001dfba:	5f                   	pop    edi
c001dfbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfbf:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dfc5:	e8 14 e4 ff ff       	call   c001c3de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001dfca:	eb 48                	jmp    c001e014 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001dfcc:	b8 01 00 00 00       	mov    eax,0x1
c001dfd1:	88 d1                	mov    cl,dl
c001dfd3:	d3 e0                	shl    eax,cl
c001dfd5:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001dfda:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001dfe0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dfe4:	89 c7                	mov    edi,eax
c001dfe6:	c1 e3 07             	shl    ebx,0x7
c001dfe9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001dfed:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001dff3:	85 c7                	test   edi,eax
c001dff5:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001dffb:	0f 84 a3 00 00 00    	je     c001e0a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e001:	0f ba e0 1e          	bt     eax,0x1e
c001e005:	73 1a                	jae    c001e021 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e007:	83 ec 0c             	sub    esp,0xc
c001e00a:	68 87 2d 02 c0       	push   0xc0022d87
c001e00f:	e8 f6 c8 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e014:	83 c4 10             	add    esp,0x10
c001e017:	b8 01 00 00 00       	mov    eax,0x1
c001e01c:	e9 b6 00 00 00       	jmp    c001e0d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e021:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e027:	83 f8 0d             	cmp    eax,0xd
c001e02a:	77 0a                	ja     c001e036 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e02c:	83 ec 0c             	sub    esp,0xc
c001e02f:	68 c8 00 00 00       	push   0xc8
c001e034:	eb 28                	jmp    c001e05e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e036:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e03c:	83 f8 0d             	cmp    eax,0xd
c001e03f:	77 0a                	ja     c001e04b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e041:	83 ec 0c             	sub    esp,0xc
c001e044:	68 58 02 00 00       	push   0x258
c001e049:	eb 13                	jmp    c001e05e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e04b:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e051:	83 f8 06             	cmp    eax,0x6
c001e054:	77 10                	ja     c001e066 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e056:	83 ec 0c             	sub    esp,0xc
c001e059:	68 dc 05 00 00       	push   0x5dc
c001e05e:	e8 69 7d ff ff       	call   c0015dcc <milliTenthSleep(unsigned int)>
c001e063:	83 c4 10             	add    esp,0x10
c001e066:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e06a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e06d:	75 06                	jne    c001e075 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e06f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e073:	74 15                	je     c001e08a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e075:	83 fe 06             	cmp    esi,0x6
c001e078:	77 10                	ja     c001e08a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e07a:	83 ec 0c             	sub    esp,0xc
c001e07d:	68 c4 09 00 00       	push   0x9c4
c001e082:	e8 45 7d ff ff       	call   c0015dcc <milliTenthSleep(unsigned int)>
c001e087:	83 c4 10             	add    esp,0x10
c001e08a:	46                   	inc    esi
c001e08b:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e091:	0f 85 56 ff ff ff    	jne    c001dfed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e097:	83 ec 0c             	sub    esp,0xc
c001e09a:	68 9a 2d 02 c0       	push   0xc0022d9a
c001e09f:	e9 6b ff ff ff       	jmp    c001e00f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e0a4:	0f ba e0 1e          	bt     eax,0x1e
c001e0a8:	73 0d                	jae    c001e0b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e0aa:	83 ec 0c             	sub    esp,0xc
c001e0ad:	68 ae 2d 02 c0       	push   0xc0022dae
c001e0b2:	e9 58 ff ff ff       	jmp    c001e00f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e0b7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e0bc:	74 17                	je     c001e0d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e0be:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e0c3:	74 10                	je     c001e0d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e0c5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e0cb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e0cf:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e0d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e0d5:	31 c0                	xor    eax,eax
c001e0d7:	83 c4 2c             	add    esp,0x2c
c001e0da:	5b                   	pop    ebx
c001e0db:	5e                   	pop    esi
c001e0dc:	5f                   	pop    edi
c001e0dd:	5d                   	pop    ebp
c001e0de:	c3                   	ret    
c001e0df:	90                   	nop

c001e0e0 <SATAPI::eject()>:
c001e0e0:	57                   	push   edi
c001e0e1:	b9 03 00 00 00       	mov    ecx,0x3
c001e0e6:	83 ec 18             	sub    esp,0x18
c001e0e9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e0ed:	fc                   	cld    
c001e0ee:	31 c0                	xor    eax,eax
c001e0f0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e0f2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e0f7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e0fc:	50                   	push   eax
c001e0fd:	6a 00                	push   0x0
c001e0ff:	6a 00                	push   0x0
c001e101:	6a 00                	push   0x0
c001e103:	6a 00                	push   0x0
c001e105:	6a 02                	push   0x2
c001e107:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e10b:	50                   	push   eax
c001e10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e110:	e8 e5 fc ff ff       	call   c001ddfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e115:	83 c4 38             	add    esp,0x38
c001e118:	31 c0                	xor    eax,eax
c001e11a:	5f                   	pop    edi
c001e11b:	c3                   	ret    

c001e11c <SATAPI::detectMedia()>:
c001e11c:	53                   	push   ebx
c001e11d:	83 ec 14             	sub    esp,0x14
c001e120:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e124:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e12a:	e8 35 02 ff ff       	call   c000e364 <VCache::writeWriteBuffer()>
c001e12f:	59                   	pop    ecx
c001e130:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e136:	e8 19 02 ff ff       	call   c000e354 <VCache::invalidateReadBuffer()>
c001e13b:	c7 04 24 c3 2d 02 c0 	mov    DWORD PTR [esp],0xc0022dc3
c001e142:	e8 c3 c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e147:	83 c4 10             	add    esp,0x10
c001e14a:	31 c0                	xor    eax,eax
c001e14c:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e153:	85 d2                	test   edx,edx
c001e155:	74 0f                	je     c001e166 <SATAPI::detectMedia()+0x4a>
c001e157:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e15d:	75 07                	jne    c001e166 <SATAPI::detectMedia()+0x4a>
c001e15f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e166:	40                   	inc    eax
c001e167:	83 f8 1a             	cmp    eax,0x1a
c001e16a:	75 e0                	jne    c001e14c <SATAPI::detectMedia()+0x30>
c001e16c:	83 c4 08             	add    esp,0x8
c001e16f:	5b                   	pop    ebx
c001e170:	c3                   	ret    
c001e171:	90                   	nop

c001e172 <SATAPI::open(int, int, void*)>:
c001e172:	56                   	push   esi
c001e173:	53                   	push   ebx
c001e174:	51                   	push   ecx
c001e175:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e179:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e17d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e187:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e18d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e191:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e19b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e1a5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e1ac:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e1b2:	e8 2b 9c fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e1b7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e1bd:	89 c6                	mov    esi,eax
c001e1bf:	e8 1e 9c fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e1c4:	81 c6 00 10 00 00    	add    esi,0x1000
c001e1ca:	39 c6                	cmp    esi,eax
c001e1cc:	74 10                	je     c001e1de <SATAPI::open(int, int, void*)+0x6c>
c001e1ce:	83 ec 0c             	sub    esp,0xc
c001e1d1:	68 d8 2d 02 c0       	push   0xc0022dd8
c001e1d6:	e8 d2 2f ff ff       	call   c00111ad <KePanic(char const*)>
c001e1db:	83 c4 10             	add    esp,0x10
c001e1de:	83 ec 0c             	sub    esp,0xc
c001e1e1:	6a 02                	push   0x2
c001e1e3:	e8 0d b4 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e1e8:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e1ee:	6a 03                	push   0x3
c001e1f0:	50                   	push   eax
c001e1f1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e1f7:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e1fd:	e8 fc ba fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e202:	83 c4 14             	add    esp,0x14
c001e205:	68 78 01 00 00       	push   0x178
c001e20a:	e8 c4 98 fe ff       	call   c0007ad3 <malloc>
c001e20f:	83 c4 0c             	add    esp,0xc
c001e212:	6a 00                	push   0x0
c001e214:	68 ff ff ff 7f       	push   0x7fffffff
c001e219:	6a 00                	push   0x0
c001e21b:	6a 00                	push   0x0
c001e21d:	53                   	push   ebx
c001e21e:	68 ee 2d 02 c0       	push   0xc0022dee
c001e223:	89 c6                	mov    esi,eax
c001e225:	50                   	push   eax
c001e226:	e8 93 f5 fe ff       	call   c000d7be <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e22b:	83 c4 14             	add    esp,0x14
c001e22e:	56                   	push   esi
c001e22f:	e8 4a f6 fe ff       	call   c000d87e <LogicalDisk::assignDriveLetter()>
c001e234:	5a                   	pop    edx
c001e235:	59                   	pop    ecx
c001e236:	0f be c0             	movsx  eax,al
c001e239:	50                   	push   eax
c001e23a:	68 40 2c 02 c0       	push   0xc0022c40
c001e23f:	e8 c6 c6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e244:	58                   	pop    eax
c001e245:	5a                   	pop    edx
c001e246:	56                   	push   esi
c001e247:	53                   	push   ebx
c001e248:	e8 c3 e3 fe ff       	call   c000c610 <Device::addChild(Device*)>
c001e24d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e253:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e256:	e8 eb e7 fe ff       	call   c000ca46 <PhysicalDisk::startCache()>
c001e25b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e262:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e265:	e8 b2 fe ff ff       	call   c001e11c <SATAPI::detectMedia()>
c001e26a:	83 c4 14             	add    esp,0x14
c001e26d:	31 c0                	xor    eax,eax
c001e26f:	5b                   	pop    ebx
c001e270:	5e                   	pop    esi
c001e271:	c3                   	ret    

c001e272 <SATAPI::read(unsigned long long, int, void*)>:
c001e272:	55                   	push   ebp
c001e273:	57                   	push   edi
c001e274:	56                   	push   esi
c001e275:	53                   	push   ebx
c001e276:	83 ec 3c             	sub    esp,0x3c
c001e279:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e27d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e281:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e285:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e289:	83 fd 04             	cmp    ebp,0x4
c001e28c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e290:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e294:	7e 10                	jle    c001e2a6 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e296:	83 ec 0c             	sub    esp,0xc
c001e299:	68 fc 2d 02 c0       	push   0xc0022dfc
c001e29e:	e8 0a 2f ff ff       	call   c00111ad <KePanic(char const*)>
c001e2a3:	83 c4 10             	add    esp,0x10
c001e2a6:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e2ac:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e2b2:	51                   	push   ecx
c001e2b3:	50                   	push   eax
c001e2b4:	83 c0 02             	add    eax,0x2
c001e2b7:	c1 e0 07             	shl    eax,0x7
c001e2ba:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e2c0:	50                   	push   eax
c001e2c1:	52                   	push   edx
c001e2c2:	e8 61 e1 ff ff       	call   c001c428 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e2c7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e2cb:	b9 03 00 00 00       	mov    ecx,0x3
c001e2d0:	fc                   	cld    
c001e2d1:	31 c0                	xor    eax,eax
c001e2d3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2d5:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e2da:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e2df:	83 c4 0c             	add    esp,0xc
c001e2e2:	6a 00                	push   0x0
c001e2e4:	6a 00                	push   0x0
c001e2e6:	6a 00                	push   0x0
c001e2e8:	6a 00                	push   0x0
c001e2ea:	6a 02                	push   0x2
c001e2ec:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e2f0:	50                   	push   eax
c001e2f1:	53                   	push   ebx
c001e2f2:	e8 03 fb ff ff       	call   c001ddfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e2f7:	83 c4 20             	add    esp,0x20
c001e2fa:	85 c0                	test   eax,eax
c001e2fc:	89 c6                	mov    esi,eax
c001e2fe:	75 46                	jne    c001e346 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e300:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e304:	b9 03 00 00 00       	mov    ecx,0x3
c001e309:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e30b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e30f:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e314:	0f c8                	bswap  eax
c001e316:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e31a:	89 e8                	mov    eax,ebp
c001e31c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e320:	50                   	push   eax
c001e321:	55                   	push   ebp
c001e322:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e326:	c1 e5 0b             	shl    ebp,0xb
c001e329:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e32d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e331:	55                   	push   ebp
c001e332:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e336:	50                   	push   eax
c001e337:	53                   	push   ebx
c001e338:	e8 bd fa ff ff       	call   c001ddfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e33d:	83 c4 20             	add    esp,0x20
c001e340:	85 c0                	test   eax,eax
c001e342:	89 c6                	mov    esi,eax
c001e344:	74 0c                	je     c001e352 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e346:	83 ec 0c             	sub    esp,0xc
c001e349:	53                   	push   ebx
c001e34a:	e8 cd fd ff ff       	call   c001e11c <SATAPI::detectMedia()>
c001e34f:	83 c4 10             	add    esp,0x10
c001e352:	83 c4 3c             	add    esp,0x3c
c001e355:	89 f0                	mov    eax,esi
c001e357:	5b                   	pop    ebx
c001e358:	5e                   	pop    esi
c001e359:	5f                   	pop    edi
c001e35a:	5d                   	pop    ebp
c001e35b:	c3                   	ret    

c001e35c <IOAPIC::close(int, int, void*)>:
c001e35c:	b8 00 00 00 00       	mov    eax,0x0
c001e361:	c3                   	ret    

c001e362 <apicGetBase()>:
c001e362:	55                   	push   ebp
c001e363:	89 e5                	mov    ebp,esp
c001e365:	83 ec 18             	sub    esp,0x18
c001e368:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e36d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e373:	83 e0 08             	and    eax,0x8
c001e376:	0f b6 c0             	movzx  eax,al
c001e379:	85 c0                	test   eax,eax
c001e37b:	75 07                	jne    c001e384 <apicGetBase()+0x22>
c001e37d:	b8 00 00 00 00       	mov    eax,0x0
c001e382:	eb 21                	jmp    c001e3a5 <apicGetBase()+0x43>
c001e384:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e389:	83 ec 08             	sub    esp,0x8
c001e38c:	6a 1b                	push   0x1b
c001e38e:	50                   	push   eax
c001e38f:	e8 4e 8d fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e394:	83 c4 10             	add    esp,0x10
c001e397:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e39a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e39d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e3a0:	25 00 00 ff ff       	and    eax,0xffff0000
c001e3a5:	c9                   	leave  
c001e3a6:	c3                   	ret    
c001e3a7:	90                   	nop

c001e3a8 <IOAPIC::IOAPIC()>:
c001e3a8:	83 ec 0c             	sub    esp,0xc
c001e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3af:	83 ec 08             	sub    esp,0x8
c001e3b2:	68 60 2e 02 c0       	push   0xc0022e60
c001e3b7:	50                   	push   eax
c001e3b8:	e8 eb e3 fe ff       	call   c000c7a8 <Device::Device(char const*)>
c001e3bd:	83 c4 10             	add    esp,0x10
c001e3c0:	ba 70 2e 02 c0       	mov    edx,0xc0022e70
c001e3c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c9:	89 10                	mov    DWORD PTR [eax],edx
c001e3cb:	90                   	nop
c001e3cc:	83 c4 0c             	add    esp,0xc
c001e3cf:	c3                   	ret    

c001e3d0 <apicOpen()>:
c001e3d0:	55                   	push   ebp
c001e3d1:	89 e5                	mov    ebp,esp
c001e3d3:	53                   	push   ebx
c001e3d4:	83 ec 34             	sub    esp,0x34
c001e3d7:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e3dc:	83 f0 01             	xor    eax,0x1
c001e3df:	0f b6 c0             	movzx  eax,al
c001e3e2:	85 c0                	test   eax,eax
c001e3e4:	0f 84 a3 00 00 00    	je     c001e48d <apicOpen()+0xbd>
c001e3ea:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e3ee:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e3f3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e3f7:	0f b6 c0             	movzx  eax,al
c001e3fa:	39 c2                	cmp    edx,eax
c001e3fc:	0f 83 84 00 00 00    	jae    c001e486 <apicOpen()+0xb6>
c001e402:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e409:	83 ec 0c             	sub    esp,0xc
c001e40c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e40f:	e8 bf 96 fe ff       	call   c0007ad3 <malloc>
c001e414:	83 c4 10             	add    esp,0x10
c001e417:	89 c3                	mov    ebx,eax
c001e419:	83 ec 0c             	sub    esp,0xc
c001e41c:	53                   	push   ebx
c001e41d:	e8 86 ff ff ff       	call   c001e3a8 <IOAPIC::IOAPIC()>
c001e422:	83 c4 10             	add    esp,0x10
c001e425:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e428:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e42c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e42f:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e436:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e43b:	83 c0 01             	add    eax,0x1
c001e43e:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e443:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e448:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e44e:	83 ec 08             	sub    esp,0x8
c001e451:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e454:	50                   	push   eax
c001e455:	e8 b6 e1 fe ff       	call   c000c610 <Device::addChild(Device*)>
c001e45a:	83 c4 10             	add    esp,0x10
c001e45d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e460:	8b 00                	mov    eax,DWORD PTR [eax]
c001e462:	83 c0 08             	add    eax,0x8
c001e465:	8b 00                	mov    eax,DWORD PTR [eax]
c001e467:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e46b:	6a 00                	push   0x0
c001e46d:	6a 00                	push   0x0
c001e46f:	52                   	push   edx
c001e470:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e473:	ff d0                	call   eax
c001e475:	83 c4 10             	add    esp,0x10
c001e478:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e47b:	83 c0 01             	add    eax,0x1
c001e47e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e481:	e9 68 ff ff ff       	jmp    c001e3ee <apicOpen()+0x1e>
c001e486:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e48d:	e8 d0 fe ff ff       	call   c001e362 <apicGetBase()>
c001e492:	05 f0 00 00 00       	add    eax,0xf0
c001e497:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e49a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e49d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e49f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e4a2:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e4a9:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e4b0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e4b3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e4b6:	89 10                	mov    DWORD PTR [eax],edx
c001e4b8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e4bf:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e4c4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e4c7:	7d 7c                	jge    c001e545 <apicOpen()+0x175>
c001e4c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4cc:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e4d3:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e4d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4d9:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e4e0:	c1 e8 08             	shr    eax,0x8
c001e4e3:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e4e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4ea:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e4f1:	c1 e8 18             	shr    eax,0x18
c001e4f4:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e4f7:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e4fb:	3d ff 00 00 00       	cmp    eax,0xff
c001e500:	75 3a                	jne    c001e53c <apicOpen()+0x16c>
c001e502:	e8 5b fe ff ff       	call   c001e362 <apicGetBase()>
c001e507:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e50b:	83 fa 01             	cmp    edx,0x1
c001e50e:	75 07                	jne    c001e517 <apicOpen()+0x147>
c001e510:	ba 60 03 00 00       	mov    edx,0x360
c001e515:	eb 05                	jmp    c001e51c <apicOpen()+0x14c>
c001e517:	ba 50 03 00 00       	mov    edx,0x350
c001e51c:	01 d0                	add    eax,edx
c001e51e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e521:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e524:	8b 00                	mov    eax,DWORD PTR [eax]
c001e526:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e529:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e530:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e534:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e537:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e53a:	89 10                	mov    DWORD PTR [eax],edx
c001e53c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e540:	e9 7a ff ff ff       	jmp    c001e4bf <apicOpen()+0xef>
c001e545:	90                   	nop
c001e546:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e549:	c9                   	leave  
c001e54a:	c3                   	ret    
c001e54b:	90                   	nop

c001e54c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e54c:	55                   	push   ebp
c001e54d:	89 e5                	mov    ebp,esp
c001e54f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e552:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e558:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e55b:	72 1d                	jb     c001e57a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e55d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e560:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e569:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e56f:	01 d0                	add    eax,edx
c001e571:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e574:	73 04                	jae    c001e57a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e576:	b0 01                	mov    al,0x1
c001e578:	eb 02                	jmp    c001e57c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e57a:	b0 00                	mov    al,0x0
c001e57c:	5d                   	pop    ebp
c001e57d:	c3                   	ret    

c001e57e <IOAPIC::read(int)>:
c001e57e:	55                   	push   ebp
c001e57f:	89 e5                	mov    ebp,esp
c001e581:	83 ec 10             	sub    esp,0x10
c001e584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e587:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e58d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e590:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e593:	0f b6 d0             	movzx  edx,al
c001e596:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e599:	89 10                	mov    DWORD PTR [eax],edx
c001e59b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e59e:	83 c0 10             	add    eax,0x10
c001e5a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5a3:	c9                   	leave  
c001e5a4:	c3                   	ret    
c001e5a5:	90                   	nop

c001e5a6 <IOAPIC::open(int, int, void*)>:
c001e5a6:	55                   	push   ebp
c001e5a7:	89 e5                	mov    ebp,esp
c001e5a9:	57                   	push   edi
c001e5aa:	56                   	push   esi
c001e5ab:	53                   	push   ebx
c001e5ac:	83 ec 04             	sub    esp,0x4
c001e5af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e5b5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e5bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e5c4:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e5cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5ce:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e5d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5d7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e5dd:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e5e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5e7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e5ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5f0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e5f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5f9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e5ff:	0f b6 f0             	movzx  esi,al
c001e602:	89 d0                	mov    eax,edx
c001e604:	ba 00 00 00 00       	mov    edx,0x0
c001e609:	89 c7                	mov    edi,eax
c001e60b:	83 e7 ff             	and    edi,0xffffffff
c001e60e:	89 f9                	mov    ecx,edi
c001e610:	0f b6 da             	movzx  ebx,dl
c001e613:	89 c8                	mov    eax,ecx
c001e615:	89 da                	mov    edx,ebx
c001e617:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e61a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e61d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e621:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e625:	83 e0 00             	and    eax,0x0
c001e628:	09 d0                	or     eax,edx
c001e62a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e62e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e631:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e637:	8d 50 01             	lea    edx,[eax+0x1]
c001e63a:	88 d1                	mov    cl,dl
c001e63c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e63f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e645:	0f b6 d0             	movzx  edx,al
c001e648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e64b:	83 c2 08             	add    edx,0x8
c001e64e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e652:	0f b6 c9             	movzx  ecx,cl
c001e655:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e65b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e65f:	6a 01                	push   0x1
c001e661:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e664:	e8 15 ff ff ff       	call   c001e57e <IOAPIC::read(int)>
c001e669:	83 c4 08             	add    esp,0x8
c001e66c:	c1 f8 10             	sar    eax,0x10
c001e66f:	0f b6 c0             	movzx  eax,al
c001e672:	8d 50 01             	lea    edx,[eax+0x1]
c001e675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e678:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e67e:	b8 00 00 00 00       	mov    eax,0x0
c001e683:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e686:	5b                   	pop    ebx
c001e687:	5e                   	pop    esi
c001e688:	5f                   	pop    edi
c001e689:	5d                   	pop    ebp
c001e68a:	c3                   	ret    
c001e68b:	90                   	nop

c001e68c <IOAPIC::write(int, int)>:
c001e68c:	55                   	push   ebp
c001e68d:	89 e5                	mov    ebp,esp
c001e68f:	83 ec 10             	sub    esp,0x10
c001e692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e695:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e69b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e69e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6a1:	0f b6 d0             	movzx  edx,al
c001e6a4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6a7:	89 10                	mov    DWORD PTR [eax],edx
c001e6a9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6ac:	8d 50 10             	lea    edx,[eax+0x10]
c001e6af:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e6b2:	89 02                	mov    DWORD PTR [edx],eax
c001e6b4:	90                   	nop
c001e6b5:	c9                   	leave  
c001e6b6:	c3                   	ret    
c001e6b7:	90                   	nop

c001e6b8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e6b8:	55                   	push   ebp
c001e6b9:	89 e5                	mov    ebp,esp
c001e6bb:	53                   	push   ebx
c001e6bc:	83 ec 2c             	sub    esp,0x2c
c001e6bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6c2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e6c5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e6c8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e6cb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e6ce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e6d1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e6d4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e6d7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e6da:	88 d8                	mov    al,bl
c001e6dc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e6df:	88 c8                	mov    al,cl
c001e6e1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e6e4:	88 d0                	mov    al,dl
c001e6e6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e6e9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e6ed:	83 c0 08             	add    eax,0x8
c001e6f0:	d1 e0                	shl    eax,1
c001e6f2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e6f5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e6f9:	83 c0 08             	add    eax,0x8
c001e6fc:	d1 e0                	shl    eax,1
c001e6fe:	83 c0 01             	add    eax,0x1
c001e701:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e704:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e707:	50                   	push   eax
c001e708:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e70b:	e8 6e fe ff ff       	call   c001e57e <IOAPIC::read(int)>
c001e710:	83 c4 08             	add    esp,0x8
c001e713:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e716:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e71d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e720:	c1 e0 18             	shl    eax,0x18
c001e723:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e726:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e729:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e72c:	52                   	push   edx
c001e72d:	50                   	push   eax
c001e72e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e731:	e8 56 ff ff ff       	call   c001e68c <IOAPIC::write(int, int)>
c001e736:	83 c4 0c             	add    esp,0xc
c001e739:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e73c:	50                   	push   eax
c001e73d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e740:	e8 39 fe ff ff       	call   c001e57e <IOAPIC::read(int)>
c001e745:	83 c4 08             	add    esp,0x8
c001e748:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e74b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e752:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e759:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e760:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e764:	85 c0                	test   eax,eax
c001e766:	74 09                	je     c001e771 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e768:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e76f:	eb 07                	jmp    c001e778 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e771:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e778:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e77c:	85 c0                	test   eax,eax
c001e77e:	74 09                	je     c001e789 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e780:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e787:	eb 07                	jmp    c001e790 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e789:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e790:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e797:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e79b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e79e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e7a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e7a4:	52                   	push   edx
c001e7a5:	50                   	push   eax
c001e7a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7a9:	e8 de fe ff ff       	call   c001e68c <IOAPIC::write(int, int)>
c001e7ae:	83 c4 0c             	add    esp,0xc
c001e7b1:	90                   	nop
c001e7b2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e7b5:	c9                   	leave  
c001e7b6:	c3                   	ret    
c001e7b7:	90                   	nop

c001e7b8 <APICTimer::close(int, int, void*)>:
c001e7b8:	b8 00 00 00 00       	mov    eax,0x0
c001e7bd:	c3                   	ret    
c001e7be:	66 90                	xchg   ax,ax

c001e7c0 <apicTimerHandler(regs*, void*)>:
c001e7c0:	83 ec 0c             	sub    esp,0xc
c001e7c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7c7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e7c9:	b8 10 27 00 00       	mov    eax,0x2710
c001e7ce:	ba 00 00 00 00       	mov    edx,0x0
c001e7d3:	f7 f1                	div    ecx
c001e7d5:	83 ec 0c             	sub    esp,0xc
c001e7d8:	50                   	push   eax
c001e7d9:	e8 9e f8 fe ff       	call   c000e07c <timerHandler(unsigned int)>
c001e7de:	83 c4 10             	add    esp,0x10
c001e7e1:	90                   	nop
c001e7e2:	83 c4 0c             	add    esp,0xc
c001e7e5:	c3                   	ret    
c001e7e6:	66 90                	xchg   ax,ax

c001e7e8 <APICTimer::open(int, int, void*)>:
c001e7e8:	83 ec 0c             	sub    esp,0xc
c001e7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7ef:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7f1:	83 c0 24             	add    eax,0x24
c001e7f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7f6:	83 ec 08             	sub    esp,0x8
c001e7f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e801:	ff d0                	call   eax
c001e803:	83 c4 10             	add    esp,0x10
c001e806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e80a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e80e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e818:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e81c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e822:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e826:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e82c:	83 ec 0c             	sub    esp,0xc
c001e82f:	51                   	push   ecx
c001e830:	6a 01                	push   0x1
c001e832:	68 c0 e7 01 c0       	push   0xc001e7c0
c001e837:	52                   	push   edx
c001e838:	50                   	push   eax
c001e839:	e8 7e dd fe ff       	call   c000c5bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e83e:	83 c4 20             	add    esp,0x20
c001e841:	89 c2                	mov    edx,eax
c001e843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e847:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e84d:	b8 00 00 00 00       	mov    eax,0x0
c001e852:	83 c4 0c             	add    esp,0xc
c001e855:	c3                   	ret    
c001e856:	66 90                	xchg   ax,ax

c001e858 <APICTimer::write(int)>:
c001e858:	83 ec 0c             	sub    esp,0xc
c001e85b:	83 ec 0c             	sub    esp,0xc
c001e85e:	68 94 2e 02 c0       	push   0xc0022e94
c001e863:	e8 45 29 ff ff       	call   c00111ad <KePanic(char const*)>
c001e868:	83 c4 10             	add    esp,0x10
c001e86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e86f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e873:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e879:	90                   	nop
c001e87a:	83 c4 0c             	add    esp,0xc
c001e87d:	c3                   	ret    
c001e87e:	66 90                	xchg   ax,ax

c001e880 <APICTimer::APICTimer()>:
c001e880:	83 ec 0c             	sub    esp,0xc
c001e883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e887:	83 ec 08             	sub    esp,0x8
c001e88a:	68 a4 2e 02 c0       	push   0xc0022ea4
c001e88f:	50                   	push   eax
c001e890:	e8 1b f7 fe ff       	call   c000dfb0 <Timer::Timer(char const*)>
c001e895:	83 c4 10             	add    esp,0x10
c001e898:	ba b8 2e 02 c0       	mov    edx,0xc0022eb8
c001e89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8a1:	89 10                	mov    DWORD PTR [eax],edx
c001e8a3:	90                   	nop
c001e8a4:	83 c4 0c             	add    esp,0xc
c001e8a7:	c3                   	ret    

c001e8a8 <PIT::write(int)>:
c001e8a8:	83 ec 10             	sub    esp,0x10
c001e8ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e8b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e8bd:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001e8c2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e8c7:	89 c2                	mov    edx,eax
c001e8c9:	c1 fa 1f             	sar    edx,0x1f
c001e8cc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e8d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8d4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e8db:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e8e0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e8e4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e8e9:	ee                   	out    dx,al
c001e8ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8ee:	0f b6 c0             	movzx  eax,al
c001e8f1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e8f8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e8fc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e900:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e905:	ee                   	out    dx,al
c001e906:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e90a:	c1 f8 08             	sar    eax,0x8
c001e90d:	0f b6 c0             	movzx  eax,al
c001e910:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e917:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e91b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e91f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e924:	ee                   	out    dx,al
c001e925:	90                   	nop
c001e926:	83 c4 10             	add    esp,0x10
c001e929:	c3                   	ret    
c001e92a:	66 90                	xchg   ax,ax

c001e92c <pitHandler(regs*, void*)>:
c001e92c:	83 ec 0c             	sub    esp,0xc
c001e92f:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001e935:	b8 10 27 00 00       	mov    eax,0x2710
c001e93a:	89 c2                	mov    edx,eax
c001e93c:	c1 fa 1f             	sar    edx,0x1f
c001e93f:	f7 f9                	idiv   ecx
c001e941:	83 ec 0c             	sub    esp,0xc
c001e944:	50                   	push   eax
c001e945:	e8 32 f7 fe ff       	call   c000e07c <timerHandler(unsigned int)>
c001e94a:	83 c4 10             	add    esp,0x10
c001e94d:	90                   	nop
c001e94e:	83 c4 0c             	add    esp,0xc
c001e951:	c3                   	ret    
c001e952:	66 90                	xchg   ax,ax

c001e954 <PIT::open(int, int, void*)>:
c001e954:	83 ec 0c             	sub    esp,0xc
c001e957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e95d:	83 c0 24             	add    eax,0x24
c001e960:	8b 00                	mov    eax,DWORD PTR [eax]
c001e962:	83 ec 08             	sub    esp,0x8
c001e965:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e969:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e96d:	ff d0                	call   eax
c001e96f:	83 c4 10             	add    esp,0x10
c001e972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e976:	83 ec 0c             	sub    esp,0xc
c001e979:	6a 00                	push   0x0
c001e97b:	6a 01                	push   0x1
c001e97d:	68 2c e9 01 c0       	push   0xc001e92c
c001e982:	6a 00                	push   0x0
c001e984:	50                   	push   eax
c001e985:	e8 32 dc fe ff       	call   c000c5bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e98a:	83 c4 20             	add    esp,0x20
c001e98d:	89 c2                	mov    edx,eax
c001e98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e993:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e999:	b8 00 00 00 00       	mov    eax,0x0
c001e99e:	83 c4 0c             	add    esp,0xc
c001e9a1:	c3                   	ret    
c001e9a2:	66 90                	xchg   ax,ax

c001e9a4 <PIT::close(int, int, void*)>:
c001e9a4:	83 ec 0c             	sub    esp,0xc
c001e9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ab:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b9:	6a 01                	push   0x1
c001e9bb:	68 2c e9 01 c0       	push   0xc001e92c
c001e9c0:	6a 00                	push   0x0
c001e9c2:	50                   	push   eax
c001e9c3:	e8 2a dc fe ff       	call   c000c5f2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e9c8:	83 c4 10             	add    esp,0x10
c001e9cb:	b8 00 00 00 00       	mov    eax,0x0
c001e9d0:	83 c4 0c             	add    esp,0xc
c001e9d3:	c3                   	ret    

c001e9d4 <PIT::PIT()>:
c001e9d4:	83 ec 0c             	sub    esp,0xc
c001e9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9db:	83 ec 08             	sub    esp,0x8
c001e9de:	68 e0 2e 02 c0       	push   0xc0022ee0
c001e9e3:	50                   	push   eax
c001e9e4:	e8 c7 f5 fe ff       	call   c000dfb0 <Timer::Timer(char const*)>
c001e9e9:	83 c4 10             	add    esp,0x10
c001e9ec:	ba 08 2f 02 c0       	mov    edx,0xc0022f08
c001e9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f5:	89 10                	mov    DWORD PTR [eax],edx
c001e9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea01:	0f b6 d0             	movzx  edx,al
c001ea04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea08:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ea0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea19:	0f b6 d0             	movzx  edx,al
c001ea1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea20:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ea25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea29:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea2f:	8d 50 01             	lea    edx,[eax+0x1]
c001ea32:	88 d1                	mov    cl,dl
c001ea34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea38:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ea3e:	0f b6 d0             	movzx  edx,al
c001ea41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea45:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea49:	83 e1 3f             	and    ecx,0x3f
c001ea4c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea50:	90                   	nop
c001ea51:	83 c4 0c             	add    esp,0xc
c001ea54:	c3                   	ret    
c001ea55:	66 90                	xchg   ax,ax
c001ea57:	66 90                	xchg   ax,ax
c001ea59:	66 90                	xchg   ax,ax
c001ea5b:	66 90                	xchg   ax,ax
c001ea5d:	66 90                	xchg   ax,ax
c001ea5f:	90                   	nop

c001ea60 <avxDetect>:
c001ea60:	b8 01 00 00 00       	mov    eax,0x1
c001ea65:	0f a2                	cpuid  
c001ea67:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ea6d:	74 15                	je     c001ea84 <avxDetect.noAVX>
c001ea6f:	b8 01 00 00 00       	mov    eax,0x1
c001ea74:	0f a2                	cpuid  
c001ea76:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ea7c:	74 06                	je     c001ea84 <avxDetect.noAVX>
c001ea7e:	b8 01 00 00 00       	mov    eax,0x1
c001ea83:	c3                   	ret    

c001ea84 <avxDetect.noAVX>:
c001ea84:	b8 00 00 00 00       	mov    eax,0x0
c001ea89:	c3                   	ret    

c001ea8a <avxSave>:
c001ea8a:	53                   	push   ebx
c001ea8b:	52                   	push   edx
c001ea8c:	31 c0                	xor    eax,eax
c001ea8e:	48                   	dec    eax
c001ea8f:	89 c2                	mov    edx,eax
c001ea91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea95:	0f ae 23             	xsave  [ebx]
c001ea98:	5a                   	pop    edx
c001ea99:	5b                   	pop    ebx
c001ea9a:	c3                   	ret    

c001ea9b <avxLoad>:
c001ea9b:	53                   	push   ebx
c001ea9c:	52                   	push   edx
c001ea9d:	31 c0                	xor    eax,eax
c001ea9f:	48                   	dec    eax
c001eaa0:	89 c2                	mov    edx,eax
c001eaa2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eaa6:	0f ae 2b             	xrstor [ebx]
c001eaa9:	5a                   	pop    edx
c001eaaa:	5b                   	pop    ebx
c001eaab:	c3                   	ret    

c001eaac <avxInit>:
c001eaac:	e8 67 03 00 00       	call   c001ee18 <sseInit>
c001eab1:	50                   	push   eax
c001eab2:	51                   	push   ecx
c001eab3:	0f 20 e0             	mov    eax,cr4
c001eab6:	0d 00 00 04 00       	or     eax,0x40000
c001eabb:	0f 22 e0             	mov    cr4,eax
c001eabe:	31 c9                	xor    ecx,ecx
c001eac0:	0f 01 d0             	xgetbv 
c001eac3:	0d 07 00 00 00       	or     eax,0x7
c001eac8:	0f 01 d1             	xsetbv 
c001eacb:	59                   	pop    ecx
c001eacc:	58                   	pop    eax
c001eacd:	c3                   	ret    

c001eace <avxClose>:
c001eace:	c3                   	ret    

c001eacf <wouldSheSayYes>:
c001eacf:	c3                   	ret    
c001ead0:	49                   	dec    ecx
c001ead1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ead5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ead9:	75 20                	jne    c001eafb <isr0+0xb>
c001eadb:	4e                   	dec    esi
c001eadc:	79 61                	jns    c001eb3f <isr7+0x3>
c001eade:	68 2e 2e 2e 00       	push   0x2e2e2e
c001eae3:	66 90                	xchg   ax,ax
c001eae5:	66 90                	xchg   ax,ax
c001eae7:	66 90                	xchg   ax,ax
c001eae9:	66 90                	xchg   ax,ax
c001eaeb:	66 90                	xchg   ax,ax
c001eaed:	66 90                	xchg   ax,ax
c001eaef:	90                   	nop

c001eaf0 <isr0>:
c001eaf0:	fa                   	cli    
c001eaf1:	68 00 00 00 00       	push   0x0
c001eaf6:	68 00 00 00 00       	push   0x0
c001eafb:	e9 56 01 00 00       	jmp    c001ec56 <int_common_stub>

c001eb00 <isr1>:
c001eb00:	fa                   	cli    
c001eb01:	6a 00                	push   0x0
c001eb03:	6a 01                	push   0x1
c001eb05:	e9 4c 01 00 00       	jmp    c001ec56 <int_common_stub>

c001eb0a <isr2>:
c001eb0a:	fa                   	cli    
c001eb0b:	6a 00                	push   0x0
c001eb0d:	6a 02                	push   0x2
c001eb0f:	e9 42 01 00 00       	jmp    c001ec56 <int_common_stub>

c001eb14 <isr3>:
c001eb14:	fa                   	cli    
c001eb15:	6a 00                	push   0x0
c001eb17:	6a 03                	push   0x3
c001eb19:	e9 38 01 00 00       	jmp    c001ec56 <int_common_stub>

c001eb1e <isr4>:
c001eb1e:	fa                   	cli    
c001eb1f:	6a 00                	push   0x0
c001eb21:	6a 04                	push   0x4
c001eb23:	e9 2e 01 00 00       	jmp    c001ec56 <int_common_stub>

c001eb28 <isr5>:
c001eb28:	fa                   	cli    
c001eb29:	6a 00                	push   0x0
c001eb2b:	6a 05                	push   0x5
c001eb2d:	e9 24 01 00 00       	jmp    c001ec56 <int_common_stub>

c001eb32 <isr6>:
c001eb32:	fa                   	cli    
c001eb33:	6a 00                	push   0x0
c001eb35:	6a 06                	push   0x6
c001eb37:	e9 1a 01 00 00       	jmp    c001ec56 <int_common_stub>

c001eb3c <isr7>:
c001eb3c:	fa                   	cli    
c001eb3d:	6a 00                	push   0x0
c001eb3f:	6a 07                	push   0x7
c001eb41:	e9 10 01 00 00       	jmp    c001ec56 <int_common_stub>

c001eb46 <isr8>:
c001eb46:	fa                   	cli    
c001eb47:	6a 08                	push   0x8
c001eb49:	e9 08 01 00 00       	jmp    c001ec56 <int_common_stub>

c001eb4e <isr9>:
c001eb4e:	fa                   	cli    
c001eb4f:	6a 00                	push   0x0
c001eb51:	6a 09                	push   0x9
c001eb53:	e9 fe 00 00 00       	jmp    c001ec56 <int_common_stub>

c001eb58 <isr10>:
c001eb58:	fa                   	cli    
c001eb59:	6a 0a                	push   0xa
c001eb5b:	e9 f6 00 00 00       	jmp    c001ec56 <int_common_stub>

c001eb60 <isr11>:
c001eb60:	fa                   	cli    
c001eb61:	6a 0b                	push   0xb
c001eb63:	e9 ee 00 00 00       	jmp    c001ec56 <int_common_stub>

c001eb68 <isr12>:
c001eb68:	fa                   	cli    
c001eb69:	6a 0c                	push   0xc
c001eb6b:	e9 e6 00 00 00       	jmp    c001ec56 <int_common_stub>

c001eb70 <isr13>:
c001eb70:	fa                   	cli    
c001eb71:	6a 0d                	push   0xd
c001eb73:	53                   	push   ebx
c001eb74:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb78:	81 fb 46 ed 01 c0    	cmp    ebx,0xc001ed46
c001eb7e:	5b                   	pop    ebx
c001eb7f:	0f 84 c3 01 00 00    	je     c001ed48 <finishSignal2>
c001eb85:	e9 cc 00 00 00       	jmp    c001ec56 <int_common_stub>

c001eb8a <isr14>:
c001eb8a:	fa                   	cli    
c001eb8b:	6a 0e                	push   0xe
c001eb8d:	e9 c4 00 00 00       	jmp    c001ec56 <int_common_stub>

c001eb92 <isr15>:
c001eb92:	fa                   	cli    
c001eb93:	6a 00                	push   0x0
c001eb95:	6a 0f                	push   0xf
c001eb97:	e9 ba 00 00 00       	jmp    c001ec56 <int_common_stub>

c001eb9c <isr16>:
c001eb9c:	fa                   	cli    
c001eb9d:	6a 00                	push   0x0
c001eb9f:	6a 10                	push   0x10
c001eba1:	e9 b0 00 00 00       	jmp    c001ec56 <int_common_stub>

c001eba6 <isr17>:
c001eba6:	fa                   	cli    
c001eba7:	6a 00                	push   0x0
c001eba9:	6a 11                	push   0x11
c001ebab:	e9 a6 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ebb0 <isr18>:
c001ebb0:	fa                   	cli    
c001ebb1:	6a 00                	push   0x0
c001ebb3:	6a 12                	push   0x12
c001ebb5:	e9 9c 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ebba <irq3>:
c001ebba:	fa                   	cli    
c001ebbb:	6a 00                	push   0x0
c001ebbd:	6a 23                	push   0x23
c001ebbf:	e9 92 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ebc4 <irq4>:
c001ebc4:	fa                   	cli    
c001ebc5:	6a 00                	push   0x0
c001ebc7:	6a 24                	push   0x24
c001ebc9:	e9 88 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ebce <irq5>:
c001ebce:	fa                   	cli    
c001ebcf:	6a 00                	push   0x0
c001ebd1:	6a 25                	push   0x25
c001ebd3:	e9 7e 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ebd8 <irq6>:
c001ebd8:	fa                   	cli    
c001ebd9:	6a 00                	push   0x0
c001ebdb:	6a 26                	push   0x26
c001ebdd:	e9 74 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ebe2 <irq7>:
c001ebe2:	fa                   	cli    
c001ebe3:	6a 00                	push   0x0
c001ebe5:	6a 27                	push   0x27
c001ebe7:	e9 6a 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ebec <irq8>:
c001ebec:	fa                   	cli    
c001ebed:	6a 00                	push   0x0
c001ebef:	6a 28                	push   0x28
c001ebf1:	e9 60 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ebf6 <irq9>:
c001ebf6:	fa                   	cli    
c001ebf7:	6a 00                	push   0x0
c001ebf9:	6a 29                	push   0x29
c001ebfb:	e9 56 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ec00 <irq10>:
c001ec00:	fa                   	cli    
c001ec01:	6a 00                	push   0x0
c001ec03:	6a 2a                	push   0x2a
c001ec05:	e9 4c 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ec0a <irq11>:
c001ec0a:	fa                   	cli    
c001ec0b:	6a 00                	push   0x0
c001ec0d:	6a 2b                	push   0x2b
c001ec0f:	e9 42 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ec14 <irq12>:
c001ec14:	fa                   	cli    
c001ec15:	6a 00                	push   0x0
c001ec17:	6a 2c                	push   0x2c
c001ec19:	e9 38 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ec1e <irq13>:
c001ec1e:	fa                   	cli    
c001ec1f:	6a 00                	push   0x0
c001ec21:	6a 2d                	push   0x2d
c001ec23:	e9 2e 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ec28 <irq14>:
c001ec28:	fa                   	cli    
c001ec29:	6a 00                	push   0x0
c001ec2b:	6a 2e                	push   0x2e
c001ec2d:	e9 24 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ec32 <irq15>:
c001ec32:	fa                   	cli    
c001ec33:	6a 00                	push   0x0
c001ec35:	6a 2f                	push   0x2f
c001ec37:	e9 1a 00 00 00       	jmp    c001ec56 <int_common_stub>

c001ec3c <irq1>:
c001ec3c:	fa                   	cli    
c001ec3d:	6a 00                	push   0x0
c001ec3f:	6a 21                	push   0x21
c001ec41:	eb 13                	jmp    c001ec56 <int_common_stub>

c001ec43 <irq2>:
c001ec43:	fa                   	cli    
c001ec44:	6a 00                	push   0x0
c001ec46:	6a 22                	push   0x22
c001ec48:	eb 0c                	jmp    c001ec56 <int_common_stub>

c001ec4a <isr96>:
c001ec4a:	6a 00                	push   0x0
c001ec4c:	6a 60                	push   0x60
c001ec4e:	fb                   	sti    
c001ec4f:	eb 37                	jmp    c001ec88 <syscall_common_stub>

c001ec51 <irq0>:
c001ec51:	fa                   	cli    
c001ec52:	6a 00                	push   0x0
c001ec54:	6a 20                	push   0x20

c001ec56 <int_common_stub>:
c001ec56:	60                   	pusha  
c001ec57:	1e                   	push   ds
c001ec58:	06                   	push   es
c001ec59:	0f a0                	push   fs
c001ec5b:	0f a8                	push   gs
c001ec5d:	66 b8 10 00          	mov    ax,0x10
c001ec61:	66 8e d8             	mov    ds,ax
c001ec64:	66 8e c0             	mov    es,ax
c001ec67:	66 8e e0             	mov    fs,ax
c001ec6a:	66 8e e8             	mov    gs,ax
c001ec6d:	54                   	push   esp
c001ec6e:	fc                   	cld    
c001ec6f:	e8 48 de fe ff       	call   c000cabc <int_handler>
c001ec74:	81 c4 04 00 00 00    	add    esp,0x4
c001ec7a:	0f a9                	pop    gs
c001ec7c:	0f a1                	pop    fs
c001ec7e:	07                   	pop    es
c001ec7f:	1f                   	pop    ds
c001ec80:	61                   	popa   
c001ec81:	81 c4 08 00 00 00    	add    esp,0x8
c001ec87:	cf                   	iret   

c001ec88 <syscall_common_stub>:
c001ec88:	60                   	pusha  
c001ec89:	1e                   	push   ds
c001ec8a:	06                   	push   es
c001ec8b:	0f a0                	push   fs
c001ec8d:	0f a8                	push   gs
c001ec8f:	66 b8 10 00          	mov    ax,0x10
c001ec93:	66 8e d8             	mov    ds,ax
c001ec96:	66 8e c0             	mov    es,ax
c001ec99:	66 8e e0             	mov    fs,ax
c001ec9c:	66 8e e8             	mov    gs,ax
c001ec9f:	54                   	push   esp
c001eca0:	fc                   	cld    
c001eca1:	e8 16 de fe ff       	call   c000cabc <int_handler>
c001eca6:	81 c4 04 00 00 00    	add    esp,0x4
c001ecac:	0f a9                	pop    gs
c001ecae:	0f a1                	pop    fs
c001ecb0:	07                   	pop    es
c001ecb1:	1f                   	pop    ds
c001ecb2:	e8 08 2b ff ff       	call   c00117bf <KiCheckSignalZ>
c001ecb7:	3d 00 00 00 00       	cmp    eax,0x0
c001ecbc:	0f 84 c0 00 00 00    	je     c001ed82 <skipSignals>
c001ecc2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ecc7:	61                   	popa   
c001ecc8:	53                   	push   ebx
c001ecc9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001eccf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ecd2:	5b                   	pop    ebx
c001ecd3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ecd8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ecdb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ecde:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ece1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ece4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ece7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ecea:	81 c4 08 00 00 00    	add    esp,0x8
c001ecf0:	5e                   	pop    esi
c001ecf1:	5b                   	pop    ebx
c001ecf2:	59                   	pop    ecx
c001ecf3:	5a                   	pop    edx
c001ecf4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ecf7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ecfa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ecfd:	52                   	push   edx
c001ecfe:	51                   	push   ecx
c001ecff:	53                   	push   ebx
c001ed00:	56                   	push   esi
c001ed01:	81 ec 08 00 00 00    	sub    esp,0x8
c001ed07:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ed0a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ed0d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ed10:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ed13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ed16:	60                   	pusha  
c001ed17:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ed1d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ed20:	89 e3                	mov    ebx,esp
c001ed22:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ed25:	52                   	push   edx
c001ed26:	68 46 ed 01 c0       	push   0xc001ed46
c001ed2b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ed2e:	89 dc                	mov    esp,ebx
c001ed30:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ed33:	68 23 00 00 00       	push   0x23
c001ed38:	51                   	push   ecx
c001ed39:	68 02 02 00 00       	push   0x202
c001ed3e:	68 1b 00 00 00       	push   0x1b
c001ed43:	ff 36                	push   DWORD PTR [esi]
c001ed45:	cf                   	iret   

c001ed46 <finishSignal>:
c001ed46:	cd 0f                	int    0xf

c001ed48 <finishSignal2>:
c001ed48:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ed4e:	e8 e9 2a ff ff       	call   c001183c <KiFinishSignalZ>
c001ed53:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ed59:	68 23 00 00 00       	push   0x23
c001ed5e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ed61:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ed64:	68 1b 00 00 00       	push   0x1b
c001ed69:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ed6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed6f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ed72:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ed75:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ed78:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ed7b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ed7e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ed81:	cf                   	iret   

c001ed82 <skipSignals>:
c001ed82:	61                   	popa   
c001ed83:	81 c4 08 00 00 00    	add    esp,0x8
c001ed89:	cf                   	iret   
c001ed8a:	90                   	nop
c001ed8b:	90                   	nop

c001ed8c <irq16>:
c001ed8c:	fa                   	cli    
c001ed8d:	6a 00                	push   0x0
c001ed8f:	6a 30                	push   0x30
c001ed91:	e9 c0 fe ff ff       	jmp    c001ec56 <int_common_stub>

c001ed96 <irq17>:
c001ed96:	fa                   	cli    
c001ed97:	6a 00                	push   0x0
c001ed99:	6a 31                	push   0x31
c001ed9b:	e9 b6 fe ff ff       	jmp    c001ec56 <int_common_stub>

c001eda0 <irq18>:
c001eda0:	fa                   	cli    
c001eda1:	6a 00                	push   0x0
c001eda3:	6a 32                	push   0x32
c001eda5:	e9 ac fe ff ff       	jmp    c001ec56 <int_common_stub>

c001edaa <irq19>:
c001edaa:	fa                   	cli    
c001edab:	6a 00                	push   0x0
c001edad:	6a 33                	push   0x33
c001edaf:	e9 a2 fe ff ff       	jmp    c001ec56 <int_common_stub>

c001edb4 <irq20>:
c001edb4:	fa                   	cli    
c001edb5:	6a 00                	push   0x0
c001edb7:	6a 34                	push   0x34
c001edb9:	e9 98 fe ff ff       	jmp    c001ec56 <int_common_stub>

c001edbe <irq21>:
c001edbe:	fa                   	cli    
c001edbf:	6a 00                	push   0x0
c001edc1:	6a 35                	push   0x35
c001edc3:	e9 8e fe ff ff       	jmp    c001ec56 <int_common_stub>

c001edc8 <irq22>:
c001edc8:	fa                   	cli    
c001edc9:	6a 00                	push   0x0
c001edcb:	6a 36                	push   0x36
c001edcd:	e9 84 fe ff ff       	jmp    c001ec56 <int_common_stub>

c001edd2 <irq23>:
c001edd2:	fa                   	cli    
c001edd3:	6a 00                	push   0x0
c001edd5:	6a 37                	push   0x37
c001edd7:	e9 7a fe ff ff       	jmp    c001ec56 <int_common_stub>
c001eddc:	66 90                	xchg   ax,ax
c001edde:	66 90                	xchg   ax,ax

c001ede0 <i386GetRDRAND>:
c001ede0:	b9 64 00 00 00       	mov    ecx,0x64

c001ede5 <retry>:
c001ede5:	0f c7 f0             	rdrand eax
c001ede8:	72 05                	jb     c001edef <retry.done>
c001edea:	e2 f9                	loop   c001ede5 <retry>

c001edec <retry.fail>:
c001edec:	31 c0                	xor    eax,eax
c001edee:	c3                   	ret    

c001edef <retry.done>:
c001edef:	c3                   	ret    

c001edf0 <absolutelyNoChanceInHell>:
c001edf0:	b8 01 00 00 00       	mov    eax,0x1
c001edf5:	0f a2                	cpuid  
c001edf7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001edfd:	74 06                	je     c001ee05 <sseDetect.noSSE>
c001edff:	b8 01 00 00 00       	mov    eax,0x1
c001ee04:	c3                   	ret    

c001ee05 <sseDetect.noSSE>:
c001ee05:	31 c0                	xor    eax,eax
c001ee07:	c3                   	ret    

c001ee08 <sseSave>:
c001ee08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee0c:	0f ae 00             	fxsave [eax]
c001ee0f:	c3                   	ret    

c001ee10 <sseLoad>:
c001ee10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee14:	0f ae 08             	fxrstor [eax]
c001ee17:	c3                   	ret    

c001ee18 <sseInit>:
c001ee18:	e8 42 00 00 00       	call   c001ee5f <x87Init>
c001ee1d:	0f 20 e0             	mov    eax,cr4
c001ee20:	66 0d 00 06          	or     ax,0x600
c001ee24:	0f 22 e0             	mov    cr4,eax
c001ee27:	c3                   	ret    

c001ee28 <sseClose>:
c001ee28:	c3                   	ret    
c001ee29:	66 90                	xchg   ax,ax
c001ee2b:	66 90                	xchg   ax,ax
c001ee2d:	66 90                	xchg   ax,ax
c001ee2f:	90                   	nop

c001ee30 <value_37F>:
c001ee30:	7f 03                	jg     c001ee35 <value_37A+0x1>

c001ee32 <value_37E>:
c001ee32:	7e 03                	jle    c001ee37 <x87Detect+0x1>

c001ee34 <value_37A>:
c001ee34:	7a 03                	jp     c001ee39 <x87Detect+0x3>

c001ee36 <x87Detect>:
c001ee36:	b8 01 00 00 00       	mov    eax,0x1
c001ee3b:	0f a2                	cpuid  
c001ee3d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ee43:	74 06                	je     c001ee4b <x87Detect.nox87>
c001ee45:	b8 01 00 00 00       	mov    eax,0x1
c001ee4a:	c3                   	ret    

c001ee4b <x87Detect.nox87>:
c001ee4b:	b8 00 00 00 00       	mov    eax,0x0
c001ee50:	c3                   	ret    

c001ee51 <x87Save>:
c001ee51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee55:	dd 30                	fnsave [eax]
c001ee57:	c3                   	ret    

c001ee58 <x87Load>:
c001ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee5c:	dd 20                	frstor [eax]
c001ee5e:	c3                   	ret    

c001ee5f <x87Init>:
c001ee5f:	0f 20 c0             	mov    eax,cr0
c001ee62:	66 25 fb ff          	and    ax,0xfffb
c001ee66:	66 0d 22 00          	or     ax,0x22
c001ee6a:	0f 22 c0             	mov    cr0,eax
c001ee6d:	db e3                	fninit 
c001ee6f:	0f 06                	clts   
c001ee71:	d9 2d 34 ee 01 c0    	fldcw  WORD PTR ds:0xc001ee34
c001ee77:	c3                   	ret    

c001ee78 <x87Close>:
c001ee78:	c3                   	ret    
c001ee79:	66 90                	xchg   ax,ax
c001ee7b:	90                   	nop

c001ee7c <__do_global_ctors_aux>:
c001ee7c:	a1 30 fe 01 c0       	mov    eax,ds:0xc001fe30
c001ee81:	83 f8 ff             	cmp    eax,0xffffffff
c001ee84:	74 1a                	je     c001eea0 <__do_global_ctors_aux+0x24>
c001ee86:	55                   	push   ebp
c001ee87:	89 e5                	mov    ebp,esp
c001ee89:	53                   	push   ebx
c001ee8a:	52                   	push   edx
c001ee8b:	bb 30 fe 01 c0       	mov    ebx,0xc001fe30
c001ee90:	ff d0                	call   eax
c001ee92:	83 eb 04             	sub    ebx,0x4
c001ee95:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ee97:	83 f8 ff             	cmp    eax,0xffffffff
c001ee9a:	75 f4                	jne    c001ee90 <__do_global_ctors_aux+0x14>
c001ee9c:	58                   	pop    eax
c001ee9d:	5b                   	pop    ebx
c001ee9e:	5d                   	pop    ebp
c001ee9f:	c3                   	ret    
c001eea0:	c3                   	ret    
c001eea1:	66 90                	xchg   ax,ax
c001eea3:	90                   	nop

c001eea4 <__divdi3>:
c001eea4:	55                   	push   ebp
c001eea5:	57                   	push   edi
c001eea6:	56                   	push   esi
c001eea7:	53                   	push   ebx
c001eea8:	83 ec 1c             	sub    esp,0x1c
c001eeab:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001eeaf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eeb3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001eeb6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001eeba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eebe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eec2:	85 db                	test   ebx,ebx
c001eec4:	0f 88 8e 00 00 00    	js     c001ef58 <__divdi3+0xb4>
c001eeca:	89 dd                	mov    ebp,ebx
c001eecc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001eed4:	89 d3                	mov    ebx,edx
c001eed6:	85 d2                	test   edx,edx
c001eed8:	79 0d                	jns    c001eee7 <__divdi3+0x43>
c001eeda:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001eede:	f7 d8                	neg    eax
c001eee0:	83 d2 00             	adc    edx,0x0
c001eee3:	f7 da                	neg    edx
c001eee5:	89 d3                	mov    ebx,edx
c001eee7:	89 c7                	mov    edi,eax
c001eee9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eeec:	85 db                	test   ebx,ebx
c001eeee:	75 48                	jne    c001ef38 <__divdi3+0x94>
c001eef0:	39 ef                	cmp    edi,ebp
c001eef2:	76 24                	jbe    c001ef18 <__divdi3+0x74>
c001eef4:	89 ea                	mov    edx,ebp
c001eef6:	f7 f7                	div    edi
c001eef8:	89 c1                	mov    ecx,eax
c001eefa:	31 f6                	xor    esi,esi
c001eefc:	89 c8                	mov    eax,ecx
c001eefe:	89 f2                	mov    edx,esi
c001ef00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ef04:	85 c9                	test   ecx,ecx
c001ef06:	74 07                	je     c001ef0f <__divdi3+0x6b>
c001ef08:	f7 d8                	neg    eax
c001ef0a:	83 d2 00             	adc    edx,0x0
c001ef0d:	f7 da                	neg    edx
c001ef0f:	83 c4 1c             	add    esp,0x1c
c001ef12:	5b                   	pop    ebx
c001ef13:	5e                   	pop    esi
c001ef14:	5f                   	pop    edi
c001ef15:	5d                   	pop    ebp
c001ef16:	c3                   	ret    
c001ef17:	90                   	nop
c001ef18:	85 ff                	test   edi,edi
c001ef1a:	75 0b                	jne    c001ef27 <__divdi3+0x83>
c001ef1c:	b8 01 00 00 00       	mov    eax,0x1
c001ef21:	31 d2                	xor    edx,edx
c001ef23:	f7 f3                	div    ebx
c001ef25:	89 c7                	mov    edi,eax
c001ef27:	31 d2                	xor    edx,edx
c001ef29:	89 e8                	mov    eax,ebp
c001ef2b:	f7 f7                	div    edi
c001ef2d:	89 c6                	mov    esi,eax
c001ef2f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef32:	f7 f7                	div    edi
c001ef34:	89 c1                	mov    ecx,eax
c001ef36:	eb c4                	jmp    c001eefc <__divdi3+0x58>
c001ef38:	39 eb                	cmp    ebx,ebp
c001ef3a:	77 3c                	ja     c001ef78 <__divdi3+0xd4>
c001ef3c:	0f bd f3             	bsr    esi,ebx
c001ef3f:	83 f6 1f             	xor    esi,0x1f
c001ef42:	75 40                	jne    c001ef84 <__divdi3+0xe0>
c001ef44:	39 eb                	cmp    ebx,ebp
c001ef46:	72 09                	jb     c001ef51 <__divdi3+0xad>
c001ef48:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ef4b:	0f 87 97 00 00 00    	ja     c001efe8 <__divdi3+0x144>
c001ef51:	b9 01 00 00 00       	mov    ecx,0x1
c001ef56:	eb a4                	jmp    c001eefc <__divdi3+0x58>
c001ef58:	f7 d9                	neg    ecx
c001ef5a:	83 d3 00             	adc    ebx,0x0
c001ef5d:	f7 db                	neg    ebx
c001ef5f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef62:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef66:	89 dd                	mov    ebp,ebx
c001ef68:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ef70:	e9 5f ff ff ff       	jmp    c001eed4 <__divdi3+0x30>
c001ef75:	8d 76 00             	lea    esi,[esi+0x0]
c001ef78:	31 f6                	xor    esi,esi
c001ef7a:	31 c9                	xor    ecx,ecx
c001ef7c:	e9 7b ff ff ff       	jmp    c001eefc <__divdi3+0x58>
c001ef81:	8d 76 00             	lea    esi,[esi+0x0]
c001ef84:	b8 20 00 00 00       	mov    eax,0x20
c001ef89:	29 f0                	sub    eax,esi
c001ef8b:	89 f1                	mov    ecx,esi
c001ef8d:	d3 e3                	shl    ebx,cl
c001ef8f:	89 fa                	mov    edx,edi
c001ef91:	88 c1                	mov    cl,al
c001ef93:	d3 ea                	shr    edx,cl
c001ef95:	09 da                	or     edx,ebx
c001ef97:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ef9b:	89 f1                	mov    ecx,esi
c001ef9d:	d3 e7                	shl    edi,cl
c001ef9f:	89 eb                	mov    ebx,ebp
c001efa1:	88 c1                	mov    cl,al
c001efa3:	d3 eb                	shr    ebx,cl
c001efa5:	89 f1                	mov    ecx,esi
c001efa7:	d3 e5                	shl    ebp,cl
c001efa9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001efac:	88 c1                	mov    cl,al
c001efae:	d3 ea                	shr    edx,cl
c001efb0:	09 d5                	or     ebp,edx
c001efb2:	89 e8                	mov    eax,ebp
c001efb4:	89 da                	mov    edx,ebx
c001efb6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001efba:	89 d3                	mov    ebx,edx
c001efbc:	89 c5                	mov    ebp,eax
c001efbe:	f7 e7                	mul    edi
c001efc0:	39 d3                	cmp    ebx,edx
c001efc2:	72 18                	jb     c001efdc <__divdi3+0x138>
c001efc4:	74 0a                	je     c001efd0 <__divdi3+0x12c>
c001efc6:	89 e9                	mov    ecx,ebp
c001efc8:	31 f6                	xor    esi,esi
c001efca:	e9 2d ff ff ff       	jmp    c001eefc <__divdi3+0x58>
c001efcf:	90                   	nop
c001efd0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001efd3:	89 f1                	mov    ecx,esi
c001efd5:	d3 e7                	shl    edi,cl
c001efd7:	39 c7                	cmp    edi,eax
c001efd9:	73 eb                	jae    c001efc6 <__divdi3+0x122>
c001efdb:	90                   	nop
c001efdc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001efdf:	31 f6                	xor    esi,esi
c001efe1:	e9 16 ff ff ff       	jmp    c001eefc <__divdi3+0x58>
c001efe6:	66 90                	xchg   ax,ax
c001efe8:	31 c9                	xor    ecx,ecx
c001efea:	e9 0d ff ff ff       	jmp    c001eefc <__divdi3+0x58>
c001efef:	90                   	nop

c001eff0 <__moddi3>:
c001eff0:	55                   	push   ebp
c001eff1:	57                   	push   edi
c001eff2:	56                   	push   esi
c001eff3:	53                   	push   ebx
c001eff4:	83 ec 2c             	sub    esp,0x2c
c001eff7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001effb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001efff:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f003:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f007:	85 db                	test   ebx,ebx
c001f009:	0f 88 85 00 00 00    	js     c001f094 <__moddi3+0xa4>
c001f00f:	89 de                	mov    esi,ebx
c001f011:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f019:	89 d7                	mov    edi,edx
c001f01b:	85 d2                	test   edx,edx
c001f01d:	79 09                	jns    c001f028 <__moddi3+0x38>
c001f01f:	f7 d8                	neg    eax
c001f021:	83 d2 00             	adc    edx,0x0
c001f024:	f7 da                	neg    edx
c001f026:	89 d7                	mov    edi,edx
c001f028:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f02c:	89 cd                	mov    ebp,ecx
c001f02e:	85 ff                	test   edi,edi
c001f030:	75 52                	jne    c001f084 <__moddi3+0x94>
c001f032:	89 c3                	mov    ebx,eax
c001f034:	39 f0                	cmp    eax,esi
c001f036:	76 24                	jbe    c001f05c <__moddi3+0x6c>
c001f038:	89 c8                	mov    eax,ecx
c001f03a:	89 f2                	mov    edx,esi
c001f03c:	f7 f3                	div    ebx
c001f03e:	89 d6                	mov    esi,edx
c001f040:	89 f0                	mov    eax,esi
c001f042:	31 d2                	xor    edx,edx
c001f044:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f048:	85 c9                	test   ecx,ecx
c001f04a:	74 07                	je     c001f053 <__moddi3+0x63>
c001f04c:	f7 d8                	neg    eax
c001f04e:	83 d2 00             	adc    edx,0x0
c001f051:	f7 da                	neg    edx
c001f053:	83 c4 2c             	add    esp,0x2c
c001f056:	5b                   	pop    ebx
c001f057:	5e                   	pop    esi
c001f058:	5f                   	pop    edi
c001f059:	5d                   	pop    ebp
c001f05a:	c3                   	ret    
c001f05b:	90                   	nop
c001f05c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f060:	85 db                	test   ebx,ebx
c001f062:	75 0d                	jne    c001f071 <__moddi3+0x81>
c001f064:	b8 01 00 00 00       	mov    eax,0x1
c001f069:	31 d2                	xor    edx,edx
c001f06b:	f7 f7                	div    edi
c001f06d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f071:	89 f0                	mov    eax,esi
c001f073:	31 d2                	xor    edx,edx
c001f075:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f079:	f7 f7                	div    edi
c001f07b:	89 e8                	mov    eax,ebp
c001f07d:	f7 f7                	div    edi
c001f07f:	89 d6                	mov    esi,edx
c001f081:	eb bd                	jmp    c001f040 <__moddi3+0x50>
c001f083:	90                   	nop
c001f084:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f088:	39 f7                	cmp    edi,esi
c001f08a:	76 20                	jbe    c001f0ac <__moddi3+0xbc>
c001f08c:	89 c8                	mov    eax,ecx
c001f08e:	89 f2                	mov    edx,esi
c001f090:	eb b2                	jmp    c001f044 <__moddi3+0x54>
c001f092:	66 90                	xchg   ax,ax
c001f094:	f7 d9                	neg    ecx
c001f096:	83 d3 00             	adc    ebx,0x0
c001f099:	f7 db                	neg    ebx
c001f09b:	89 de                	mov    esi,ebx
c001f09d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f0a5:	e9 6f ff ff ff       	jmp    c001f019 <__moddi3+0x29>
c001f0aa:	66 90                	xchg   ax,ax
c001f0ac:	0f bd c7             	bsr    eax,edi
c001f0af:	83 f0 1f             	xor    eax,0x1f
c001f0b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f0b6:	75 24                	jne    c001f0dc <__moddi3+0xec>
c001f0b8:	39 f7                	cmp    edi,esi
c001f0ba:	72 06                	jb     c001f0c2 <__moddi3+0xd2>
c001f0bc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f0c0:	77 0c                	ja     c001f0ce <__moddi3+0xde>
c001f0c2:	89 e9                	mov    ecx,ebp
c001f0c4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f0c8:	19 fe                	sbb    esi,edi
c001f0ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f0ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f0d2:	89 f2                	mov    edx,esi
c001f0d4:	e9 6b ff ff ff       	jmp    c001f044 <__moddi3+0x54>
c001f0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001f0dc:	b8 20 00 00 00       	mov    eax,0x20
c001f0e1:	89 c2                	mov    edx,eax
c001f0e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f0e7:	29 da                	sub    edx,ebx
c001f0e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f0ed:	88 d9                	mov    cl,bl
c001f0ef:	d3 e7                	shl    edi,cl
c001f0f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0f5:	88 d1                	mov    cl,dl
c001f0f7:	d3 e8                	shr    eax,cl
c001f0f9:	09 c7                	or     edi,eax
c001f0fb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f0ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f103:	89 d8                	mov    eax,ebx
c001f105:	88 d9                	mov    cl,bl
c001f107:	d3 e7                	shl    edi,cl
c001f109:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f10d:	89 f3                	mov    ebx,esi
c001f10f:	88 d1                	mov    cl,dl
c001f111:	d3 eb                	shr    ebx,cl
c001f113:	89 c7                	mov    edi,eax
c001f115:	88 c1                	mov    cl,al
c001f117:	d3 e6                	shl    esi,cl
c001f119:	89 e8                	mov    eax,ebp
c001f11b:	88 d1                	mov    cl,dl
c001f11d:	d3 e8                	shr    eax,cl
c001f11f:	09 f0                	or     eax,esi
c001f121:	89 f9                	mov    ecx,edi
c001f123:	d3 e5                	shl    ebp,cl
c001f125:	89 da                	mov    edx,ebx
c001f127:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f12b:	89 d3                	mov    ebx,edx
c001f12d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f131:	89 c6                	mov    esi,eax
c001f133:	89 d1                	mov    ecx,edx
c001f135:	39 d3                	cmp    ebx,edx
c001f137:	72 27                	jb     c001f160 <__moddi3+0x170>
c001f139:	74 21                	je     c001f15c <__moddi3+0x16c>
c001f13b:	29 f5                	sub    ebp,esi
c001f13d:	19 cb                	sbb    ebx,ecx
c001f13f:	89 de                	mov    esi,ebx
c001f141:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f145:	d3 e6                	shl    esi,cl
c001f147:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f14b:	89 f9                	mov    ecx,edi
c001f14d:	d3 ed                	shr    ebp,cl
c001f14f:	09 ee                	or     esi,ebp
c001f151:	89 f0                	mov    eax,esi
c001f153:	d3 eb                	shr    ebx,cl
c001f155:	89 da                	mov    edx,ebx
c001f157:	e9 e8 fe ff ff       	jmp    c001f044 <__moddi3+0x54>
c001f15c:	39 c5                	cmp    ebp,eax
c001f15e:	73 db                	jae    c001f13b <__moddi3+0x14b>
c001f160:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f164:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f168:	89 d1                	mov    ecx,edx
c001f16a:	89 c6                	mov    esi,eax
c001f16c:	eb cd                	jmp    c001f13b <__moddi3+0x14b>
c001f16e:	66 90                	xchg   ax,ax

c001f170 <__udivdi3>:
c001f170:	55                   	push   ebp
c001f171:	57                   	push   edi
c001f172:	56                   	push   esi
c001f173:	53                   	push   ebx
c001f174:	83 ec 1c             	sub    esp,0x1c
c001f177:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f17b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f17f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f183:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f187:	85 d2                	test   edx,edx
c001f189:	75 41                	jne    c001f1cc <__udivdi3+0x5c>
c001f18b:	39 f7                	cmp    edi,esi
c001f18d:	76 15                	jbe    c001f1a4 <__udivdi3+0x34>
c001f18f:	89 e8                	mov    eax,ebp
c001f191:	89 f2                	mov    edx,esi
c001f193:	f7 f7                	div    edi
c001f195:	31 db                	xor    ebx,ebx
c001f197:	89 da                	mov    edx,ebx
c001f199:	83 c4 1c             	add    esp,0x1c
c001f19c:	5b                   	pop    ebx
c001f19d:	5e                   	pop    esi
c001f19e:	5f                   	pop    edi
c001f19f:	5d                   	pop    ebp
c001f1a0:	c3                   	ret    
c001f1a1:	8d 76 00             	lea    esi,[esi+0x0]
c001f1a4:	89 f9                	mov    ecx,edi
c001f1a6:	85 ff                	test   edi,edi
c001f1a8:	75 0b                	jne    c001f1b5 <__udivdi3+0x45>
c001f1aa:	b8 01 00 00 00       	mov    eax,0x1
c001f1af:	31 d2                	xor    edx,edx
c001f1b1:	f7 f7                	div    edi
c001f1b3:	89 c1                	mov    ecx,eax
c001f1b5:	31 d2                	xor    edx,edx
c001f1b7:	89 f0                	mov    eax,esi
c001f1b9:	f7 f1                	div    ecx
c001f1bb:	89 c3                	mov    ebx,eax
c001f1bd:	89 e8                	mov    eax,ebp
c001f1bf:	f7 f1                	div    ecx
c001f1c1:	89 da                	mov    edx,ebx
c001f1c3:	83 c4 1c             	add    esp,0x1c
c001f1c6:	5b                   	pop    ebx
c001f1c7:	5e                   	pop    esi
c001f1c8:	5f                   	pop    edi
c001f1c9:	5d                   	pop    ebp
c001f1ca:	c3                   	ret    
c001f1cb:	90                   	nop
c001f1cc:	39 f2                	cmp    edx,esi
c001f1ce:	77 1c                	ja     c001f1ec <__udivdi3+0x7c>
c001f1d0:	0f bd da             	bsr    ebx,edx
c001f1d3:	83 f3 1f             	xor    ebx,0x1f
c001f1d6:	75 24                	jne    c001f1fc <__udivdi3+0x8c>
c001f1d8:	39 f2                	cmp    edx,esi
c001f1da:	72 08                	jb     c001f1e4 <__udivdi3+0x74>
c001f1dc:	39 ef                	cmp    edi,ebp
c001f1de:	0f 87 84 00 00 00    	ja     c001f268 <__udivdi3+0xf8>
c001f1e4:	b8 01 00 00 00       	mov    eax,0x1
c001f1e9:	eb ac                	jmp    c001f197 <__udivdi3+0x27>
c001f1eb:	90                   	nop
c001f1ec:	31 db                	xor    ebx,ebx
c001f1ee:	31 c0                	xor    eax,eax
c001f1f0:	89 da                	mov    edx,ebx
c001f1f2:	83 c4 1c             	add    esp,0x1c
c001f1f5:	5b                   	pop    ebx
c001f1f6:	5e                   	pop    esi
c001f1f7:	5f                   	pop    edi
c001f1f8:	5d                   	pop    ebp
c001f1f9:	c3                   	ret    
c001f1fa:	66 90                	xchg   ax,ax
c001f1fc:	b8 20 00 00 00       	mov    eax,0x20
c001f201:	29 d8                	sub    eax,ebx
c001f203:	88 d9                	mov    cl,bl
c001f205:	d3 e2                	shl    edx,cl
c001f207:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f20b:	89 fa                	mov    edx,edi
c001f20d:	88 c1                	mov    cl,al
c001f20f:	d3 ea                	shr    edx,cl
c001f211:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f215:	09 d1                	or     ecx,edx
c001f217:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f21b:	88 d9                	mov    cl,bl
c001f21d:	d3 e7                	shl    edi,cl
c001f21f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f223:	89 f7                	mov    edi,esi
c001f225:	88 c1                	mov    cl,al
c001f227:	d3 ef                	shr    edi,cl
c001f229:	88 d9                	mov    cl,bl
c001f22b:	d3 e6                	shl    esi,cl
c001f22d:	89 ea                	mov    edx,ebp
c001f22f:	88 c1                	mov    cl,al
c001f231:	d3 ea                	shr    edx,cl
c001f233:	09 d6                	or     esi,edx
c001f235:	89 f0                	mov    eax,esi
c001f237:	89 fa                	mov    edx,edi
c001f239:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f23d:	89 d7                	mov    edi,edx
c001f23f:	89 c6                	mov    esi,eax
c001f241:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f245:	39 d7                	cmp    edi,edx
c001f247:	72 13                	jb     c001f25c <__udivdi3+0xec>
c001f249:	74 09                	je     c001f254 <__udivdi3+0xe4>
c001f24b:	89 f0                	mov    eax,esi
c001f24d:	31 db                	xor    ebx,ebx
c001f24f:	e9 43 ff ff ff       	jmp    c001f197 <__udivdi3+0x27>
c001f254:	88 d9                	mov    cl,bl
c001f256:	d3 e5                	shl    ebp,cl
c001f258:	39 c5                	cmp    ebp,eax
c001f25a:	73 ef                	jae    c001f24b <__udivdi3+0xdb>
c001f25c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f25f:	31 db                	xor    ebx,ebx
c001f261:	e9 31 ff ff ff       	jmp    c001f197 <__udivdi3+0x27>
c001f266:	66 90                	xchg   ax,ax
c001f268:	31 c0                	xor    eax,eax
c001f26a:	e9 28 ff ff ff       	jmp    c001f197 <__udivdi3+0x27>
c001f26f:	90                   	nop

c001f270 <__umoddi3>:
c001f270:	55                   	push   ebp
c001f271:	57                   	push   edi
c001f272:	56                   	push   esi
c001f273:	53                   	push   ebx
c001f274:	83 ec 1c             	sub    esp,0x1c
c001f277:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f27b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f27f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f283:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f287:	89 da                	mov    edx,ebx
c001f289:	85 c0                	test   eax,eax
c001f28b:	75 37                	jne    c001f2c4 <__umoddi3+0x54>
c001f28d:	39 df                	cmp    edi,ebx
c001f28f:	76 13                	jbe    c001f2a4 <__umoddi3+0x34>
c001f291:	89 f0                	mov    eax,esi
c001f293:	f7 f7                	div    edi
c001f295:	89 d0                	mov    eax,edx
c001f297:	31 d2                	xor    edx,edx
c001f299:	83 c4 1c             	add    esp,0x1c
c001f29c:	5b                   	pop    ebx
c001f29d:	5e                   	pop    esi
c001f29e:	5f                   	pop    edi
c001f29f:	5d                   	pop    ebp
c001f2a0:	c3                   	ret    
c001f2a1:	8d 76 00             	lea    esi,[esi+0x0]
c001f2a4:	89 fd                	mov    ebp,edi
c001f2a6:	85 ff                	test   edi,edi
c001f2a8:	75 0b                	jne    c001f2b5 <__umoddi3+0x45>
c001f2aa:	b8 01 00 00 00       	mov    eax,0x1
c001f2af:	31 d2                	xor    edx,edx
c001f2b1:	f7 f7                	div    edi
c001f2b3:	89 c5                	mov    ebp,eax
c001f2b5:	89 d8                	mov    eax,ebx
c001f2b7:	31 d2                	xor    edx,edx
c001f2b9:	f7 f5                	div    ebp
c001f2bb:	89 f0                	mov    eax,esi
c001f2bd:	f7 f5                	div    ebp
c001f2bf:	89 d0                	mov    eax,edx
c001f2c1:	eb d4                	jmp    c001f297 <__umoddi3+0x27>
c001f2c3:	90                   	nop
c001f2c4:	89 f1                	mov    ecx,esi
c001f2c6:	39 d8                	cmp    eax,ebx
c001f2c8:	76 0a                	jbe    c001f2d4 <__umoddi3+0x64>
c001f2ca:	89 f0                	mov    eax,esi
c001f2cc:	83 c4 1c             	add    esp,0x1c
c001f2cf:	5b                   	pop    ebx
c001f2d0:	5e                   	pop    esi
c001f2d1:	5f                   	pop    edi
c001f2d2:	5d                   	pop    ebp
c001f2d3:	c3                   	ret    
c001f2d4:	0f bd e8             	bsr    ebp,eax
c001f2d7:	83 f5 1f             	xor    ebp,0x1f
c001f2da:	75 1c                	jne    c001f2f8 <__umoddi3+0x88>
c001f2dc:	39 d8                	cmp    eax,ebx
c001f2de:	72 04                	jb     c001f2e4 <__umoddi3+0x74>
c001f2e0:	39 f7                	cmp    edi,esi
c001f2e2:	77 08                	ja     c001f2ec <__umoddi3+0x7c>
c001f2e4:	89 da                	mov    edx,ebx
c001f2e6:	29 fe                	sub    esi,edi
c001f2e8:	19 c2                	sbb    edx,eax
c001f2ea:	89 f1                	mov    ecx,esi
c001f2ec:	89 c8                	mov    eax,ecx
c001f2ee:	83 c4 1c             	add    esp,0x1c
c001f2f1:	5b                   	pop    ebx
c001f2f2:	5e                   	pop    esi
c001f2f3:	5f                   	pop    edi
c001f2f4:	5d                   	pop    ebp
c001f2f5:	c3                   	ret    
c001f2f6:	66 90                	xchg   ax,ax
c001f2f8:	ba 20 00 00 00       	mov    edx,0x20
c001f2fd:	29 ea                	sub    edx,ebp
c001f2ff:	89 e9                	mov    ecx,ebp
c001f301:	d3 e0                	shl    eax,cl
c001f303:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f307:	89 f8                	mov    eax,edi
c001f309:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f30d:	88 d1                	mov    cl,dl
c001f30f:	d3 e8                	shr    eax,cl
c001f311:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f315:	09 c1                	or     ecx,eax
c001f317:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f31b:	89 e9                	mov    ecx,ebp
c001f31d:	d3 e7                	shl    edi,cl
c001f31f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f323:	89 d8                	mov    eax,ebx
c001f325:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f329:	88 d1                	mov    cl,dl
c001f32b:	d3 e8                	shr    eax,cl
c001f32d:	89 c7                	mov    edi,eax
c001f32f:	89 e9                	mov    ecx,ebp
c001f331:	d3 e3                	shl    ebx,cl
c001f333:	89 f0                	mov    eax,esi
c001f335:	88 d1                	mov    cl,dl
c001f337:	d3 e8                	shr    eax,cl
c001f339:	09 d8                	or     eax,ebx
c001f33b:	89 e9                	mov    ecx,ebp
c001f33d:	d3 e6                	shl    esi,cl
c001f33f:	89 f3                	mov    ebx,esi
c001f341:	89 fa                	mov    edx,edi
c001f343:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f347:	89 d1                	mov    ecx,edx
c001f349:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f34d:	89 c6                	mov    esi,eax
c001f34f:	89 d7                	mov    edi,edx
c001f351:	39 d1                	cmp    ecx,edx
c001f353:	72 27                	jb     c001f37c <__umoddi3+0x10c>
c001f355:	74 21                	je     c001f378 <__umoddi3+0x108>
c001f357:	89 ca                	mov    edx,ecx
c001f359:	29 f3                	sub    ebx,esi
c001f35b:	19 fa                	sbb    edx,edi
c001f35d:	89 d0                	mov    eax,edx
c001f35f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f363:	d3 e0                	shl    eax,cl
c001f365:	89 e9                	mov    ecx,ebp
c001f367:	d3 eb                	shr    ebx,cl
c001f369:	09 d8                	or     eax,ebx
c001f36b:	d3 ea                	shr    edx,cl
c001f36d:	83 c4 1c             	add    esp,0x1c
c001f370:	5b                   	pop    ebx
c001f371:	5e                   	pop    esi
c001f372:	5f                   	pop    edi
c001f373:	5d                   	pop    ebp
c001f374:	c3                   	ret    
c001f375:	8d 76 00             	lea    esi,[esi+0x0]
c001f378:	39 c3                	cmp    ebx,eax
c001f37a:	73 db                	jae    c001f357 <__umoddi3+0xe7>
c001f37c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f380:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f384:	89 d7                	mov    edi,edx
c001f386:	89 c6                	mov    esi,eax
c001f388:	eb cd                	jmp    c001f357 <__umoddi3+0xe7>

Disassembly of section .init:

c001f38a <_init>:
c001f38a:	55                   	push   ebp
c001f38b:	89 e5                	mov    ebp,esp
c001f38d:	e8 62 0d fe ff       	call   c00000f4 <frame_dummy>
c001f392:	e8 e5 fa ff ff       	call   c001ee7c <__do_global_ctors_aux>
c001f397:	5d                   	pop    ebp
c001f398:	c3                   	ret    

Disassembly of section .fini:

c001f399 <_fini>:
c001f399:	55                   	push   ebp
c001f39a:	89 e5                	mov    ebp,esp
c001f39c:	e8 e3 0c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f3a1:	5d                   	pop    ebp
c001f3a2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f3a4 <Computer::~Computer()>:
c001f3a4:	83 ec 0c             	sub    esp,0xc
c001f3a7:	ba b4 06 02 c0       	mov    edx,0xc00206b4
c001f3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b0:	89 10                	mov    DWORD PTR [eax],edx
c001f3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b6:	83 ec 0c             	sub    esp,0xc
c001f3b9:	50                   	push   eax
c001f3ba:	e8 53 d1 fe ff       	call   c000c512 <Device::~Device()>
c001f3bf:	83 c4 10             	add    esp,0x10
c001f3c2:	90                   	nop
c001f3c3:	83 c4 0c             	add    esp,0xc
c001f3c6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f3c8 <Computer::~Computer()>:
c001f3c8:	83 ec 0c             	sub    esp,0xc
c001f3cb:	83 ec 0c             	sub    esp,0xc
c001f3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3d2:	e8 cd ff ff ff       	call   c001f3a4 <Computer::~Computer()>
c001f3d7:	83 c4 10             	add    esp,0x10
c001f3da:	83 ec 08             	sub    esp,0x8
c001f3dd:	68 70 01 00 00       	push   0x170
c001f3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3e6:	e8 21 b4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f3eb:	83 c4 10             	add    esp,0x10
c001f3ee:	83 c4 0c             	add    esp,0xc
c001f3f1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f3f2 <idleCommon()>:
c001f3f2:	83 ec 0c             	sub    esp,0xc
c001f3f5:	fa                   	cli    
c001f3f6:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f3fc:	e8 af 66 ff ff       	call   c0015ab0 <schedule()>
c001f401:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f406:	48                   	dec    eax
c001f407:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f40c:	75 01                	jne    c001f40f <idleCommon()+0x1d>
c001f40e:	fb                   	sti    
c001f40f:	83 c4 0c             	add    esp,0xc
c001f412:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f414 <LinkedList<UnixFile>::~LinkedList()>:
c001f414:	90                   	nop
c001f415:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f416 <LinkedList<UnixFile>::LinkedList()>:
c001f416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f41a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f424:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f42b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f42f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f43a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f444:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f44b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f44f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f456:	90                   	nop
c001f457:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f458 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f458:	83 ec 0c             	sub    esp,0xc
c001f45b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f460:	75 10                	jne    c001f472 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f462:	83 ec 0c             	sub    esp,0xc
c001f465:	68 c8 08 02 c0       	push   0xc00208c8
c001f46a:	e8 3e 1d ff ff       	call   c00111ad <KePanic(char const*)>
c001f46f:	83 c4 10             	add    esp,0x10
c001f472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f476:	8b 00                	mov    eax,DWORD PTR [eax]
c001f478:	85 c0                	test   eax,eax
c001f47a:	74 34                	je     c001f4b0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f480:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f483:	85 c0                	test   eax,eax
c001f485:	74 29                	je     c001f4b0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f48b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f48e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f492:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f499:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f49d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4ae:	eb 65                	jmp    c001f515 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4b6:	85 c0                	test   eax,eax
c001f4b8:	75 4b                	jne    c001f505 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4c1:	85 c0                	test   eax,eax
c001f4c3:	75 40                	jne    c001f505 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4cd:	89 10                	mov    DWORD PTR [eax],edx
c001f4cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4ef:	85 c0                	test   eax,eax
c001f4f1:	74 22                	je     c001f515 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4f3:	83 ec 0c             	sub    esp,0xc
c001f4f6:	68 ea 08 02 c0       	push   0xc00208ea
c001f4fb:	e8 ad 1c ff ff       	call   c00111ad <KePanic(char const*)>
c001f500:	83 c4 10             	add    esp,0x10
c001f503:	eb 10                	jmp    c001f515 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f505:	83 ec 0c             	sub    esp,0xc
c001f508:	68 f4 08 02 c0       	push   0xc00208f4
c001f50d:	e8 9b 1c ff ff       	call   c00111ad <KePanic(char const*)>
c001f512:	83 c4 10             	add    esp,0x10
c001f515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f519:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f51c:	8d 50 01             	lea    edx,[eax+0x1]
c001f51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f523:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f526:	90                   	nop
c001f527:	83 c4 0c             	add    esp,0xc
c001f52a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f52c <LinkedList<UnixFile>::getFirstElement()>:
c001f52c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f530:	8b 00                	mov    eax,DWORD PTR [eax]
c001f532:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f534 <LinkedList<UnixFile>::removeFirst()>:
c001f534:	83 ec 0c             	sub    esp,0xc
c001f537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f53b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f53d:	85 c0                	test   eax,eax
c001f53f:	75 12                	jne    c001f553 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f541:	83 ec 0c             	sub    esp,0xc
c001f544:	68 00 09 02 c0       	push   0xc0020900
c001f549:	e8 5f 1c ff ff       	call   c00111ad <KePanic(char const*)>
c001f54e:	83 c4 10             	add    esp,0x10
c001f551:	eb 7e                	jmp    c001f5d1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f557:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f55a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f55d:	85 c0                	test   eax,eax
c001f55f:	74 10                	je     c001f571 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f561:	83 ec 0c             	sub    esp,0xc
c001f564:	68 4b 09 02 c0       	push   0xc002094b
c001f569:	e8 3f 1c ff ff       	call   c00111ad <KePanic(char const*)>
c001f56e:	83 c4 10             	add    esp,0x10
c001f571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f575:	8b 00                	mov    eax,DWORD PTR [eax]
c001f577:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f57a:	85 c0                	test   eax,eax
c001f57c:	75 33                	jne    c001f5b1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f582:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f597:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f59a:	83 f8 01             	cmp    eax,0x1
c001f59d:	74 21                	je     c001f5c0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f59f:	83 ec 0c             	sub    esp,0xc
c001f5a2:	68 24 09 02 c0       	push   0xc0020924
c001f5a7:	e8 01 1c ff ff       	call   c00111ad <KePanic(char const*)>
c001f5ac:	83 c4 10             	add    esp,0x10
c001f5af:	eb 0f                	jmp    c001f5c0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f5b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5b7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f5ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5be:	89 10                	mov    DWORD PTR [eax],edx
c001f5c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5c7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f5ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5d1:	83 c4 0c             	add    esp,0xc
c001f5d4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f5d6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f5d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5dd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f5de <DriverlessDevice::~DriverlessDevice()>:
c001f5de:	ba 5c 14 02 c0       	mov    edx,0xc002145c
c001f5e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5e7:	89 10                	mov    DWORD PTR [eax],edx
c001f5e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5ed:	50                   	push   eax
c001f5ee:	e8 1f cf fe ff       	call   c000c512 <Device::~Device()>
c001f5f3:	83 c4 04             	add    esp,0x4
c001f5f6:	90                   	nop
c001f5f7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f5f8 <DriverlessDevice::~DriverlessDevice()>:
c001f5f8:	83 ec 0c             	sub    esp,0xc
c001f5fb:	83 ec 0c             	sub    esp,0xc
c001f5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f602:	e8 d7 ff ff ff       	call   c001f5de <DriverlessDevice::~DriverlessDevice()>
c001f607:	83 c4 10             	add    esp,0x10
c001f60a:	83 ec 08             	sub    esp,0x8
c001f60d:	68 58 01 00 00       	push   0x158
c001f612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f616:	e8 f1 b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f61b:	83 c4 10             	add    esp,0x10
c001f61e:	83 c4 0c             	add    esp,0xc
c001f621:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f622 <LinkedList<Device>::addElement(Device*)>:
c001f622:	83 ec 0c             	sub    esp,0xc
c001f625:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f62a:	75 10                	jne    c001f63c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f62c:	83 ec 0c             	sub    esp,0xc
c001f62f:	68 c8 08 02 c0       	push   0xc00208c8
c001f634:	e8 74 1b ff ff       	call   c00111ad <KePanic(char const*)>
c001f639:	83 c4 10             	add    esp,0x10
c001f63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f640:	8b 00                	mov    eax,DWORD PTR [eax]
c001f642:	85 c0                	test   eax,eax
c001f644:	74 3a                	je     c001f680 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f64d:	85 c0                	test   eax,eax
c001f64f:	74 2f                	je     c001f680 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f655:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f658:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f65c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f666:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f66a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f671:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f674:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f67e:	eb 68                	jmp    c001f6e8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f684:	8b 00                	mov    eax,DWORD PTR [eax]
c001f686:	85 c0                	test   eax,eax
c001f688:	75 4e                	jne    c001f6d8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f68e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f691:	85 c0                	test   eax,eax
c001f693:	75 43                	jne    c001f6d8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f699:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f69d:	89 10                	mov    DWORD PTR [eax],edx
c001f69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6b1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f6bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6c2:	85 c0                	test   eax,eax
c001f6c4:	74 22                	je     c001f6e8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f6c6:	83 ec 0c             	sub    esp,0xc
c001f6c9:	68 ea 08 02 c0       	push   0xc00208ea
c001f6ce:	e8 da 1a ff ff       	call   c00111ad <KePanic(char const*)>
c001f6d3:	83 c4 10             	add    esp,0x10
c001f6d6:	eb 10                	jmp    c001f6e8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f6d8:	83 ec 0c             	sub    esp,0xc
c001f6db:	68 f4 08 02 c0       	push   0xc00208f4
c001f6e0:	e8 c8 1a ff ff       	call   c00111ad <KePanic(char const*)>
c001f6e5:	83 c4 10             	add    esp,0x10
c001f6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6ef:	8d 50 01             	lea    edx,[eax+0x1]
c001f6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6f9:	90                   	nop
c001f6fa:	83 c4 0c             	add    esp,0xc
c001f6fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f6fe <LinkedList<Device>::LinkedList()>:
c001f6fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f702:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f70c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f713:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f717:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f71e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f722:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f72c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f733:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f737:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f73e:	90                   	nop
c001f73f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f740 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f744:	8b 00                	mov    eax,DWORD PTR [eax]
c001f746:	85 c0                	test   eax,eax
c001f748:	75 0e                	jne    c001f758 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f74a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f74e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f751:	85 c0                	test   eax,eax
c001f753:	75 03                	jne    c001f758 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f755:	b0 01                	mov    al,0x1
c001f757:	c3                   	ret    
c001f758:	b0 00                	mov    al,0x0
c001f75a:	90                   	nop
c001f75b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f75c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f75c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f760:	8b 00                	mov    eax,DWORD PTR [eax]
c001f762:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f764 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f764:	83 ec 0c             	sub    esp,0xc
c001f767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f76b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f76d:	85 c0                	test   eax,eax
c001f76f:	75 17                	jne    c001f788 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f771:	83 ec 0c             	sub    esp,0xc
c001f774:	68 00 09 02 c0       	push   0xc0020900
c001f779:	e8 2f 1a ff ff       	call   c00111ad <KePanic(char const*)>
c001f77e:	83 c4 10             	add    esp,0x10
c001f781:	e9 96 00 00 00       	jmp    c001f81c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f786:	66 90                	xchg   ax,ax
c001f788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f78f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f792:	85 c0                	test   eax,eax
c001f794:	0f 95 c0             	setne  al
c001f797:	0f b6 c0             	movzx  eax,al
c001f79a:	85 c0                	test   eax,eax
c001f79c:	74 12                	je     c001f7b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f79e:	83 ec 0c             	sub    esp,0xc
c001f7a1:	68 4b 09 02 c0       	push   0xc002094b
c001f7a6:	e8 02 1a ff ff       	call   c00111ad <KePanic(char const*)>
c001f7ab:	83 c4 10             	add    esp,0x10
c001f7ae:	66 90                	xchg   ax,ax
c001f7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f7b9:	85 c0                	test   eax,eax
c001f7bb:	0f 94 c0             	sete   al
c001f7be:	0f b6 c0             	movzx  eax,al
c001f7c1:	85 c0                	test   eax,eax
c001f7c3:	74 33                	je     c001f7f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f7c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7e1:	83 f8 01             	cmp    eax,0x1
c001f7e4:	74 22                	je     c001f808 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f7e6:	83 ec 0c             	sub    esp,0xc
c001f7e9:	68 24 09 02 c0       	push   0xc0020924
c001f7ee:	e8 ba 19 ff ff       	call   c00111ad <KePanic(char const*)>
c001f7f3:	83 c4 10             	add    esp,0x10
c001f7f6:	eb 10                	jmp    c001f808 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7fe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f805:	89 10                	mov    DWORD PTR [eax],edx
c001f807:	90                   	nop
c001f808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f80f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f816:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f819:	8d 76 00             	lea    esi,[esi+0x0]
c001f81c:	83 c4 0c             	add    esp,0xc
c001f81f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f820:	83 ec 0c             	sub    esp,0xc
c001f823:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f828:	75 12                	jne    c001f83c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f82a:	83 ec 0c             	sub    esp,0xc
c001f82d:	68 c8 08 02 c0       	push   0xc00208c8
c001f832:	e8 76 19 ff ff       	call   c00111ad <KePanic(char const*)>
c001f837:	83 c4 10             	add    esp,0x10
c001f83a:	66 90                	xchg   ax,ax
c001f83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f840:	8b 00                	mov    eax,DWORD PTR [eax]
c001f842:	85 c0                	test   eax,eax
c001f844:	74 36                	je     c001f87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f84d:	85 c0                	test   eax,eax
c001f84f:	74 2b                	je     c001f87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f855:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f858:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f85c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f863:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f867:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f86e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f871:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f878:	eb 6a                	jmp    c001f8e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f87a:	66 90                	xchg   ax,ax
c001f87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f880:	8b 00                	mov    eax,DWORD PTR [eax]
c001f882:	85 c0                	test   eax,eax
c001f884:	75 4e                	jne    c001f8d4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f88d:	85 c0                	test   eax,eax
c001f88f:	75 43                	jne    c001f8d4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f895:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f899:	89 10                	mov    DWORD PTR [eax],edx
c001f89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8a3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8ad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8bb:	85 c0                	test   eax,eax
c001f8bd:	74 25                	je     c001f8e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f8bf:	83 ec 0c             	sub    esp,0xc
c001f8c2:	68 ea 08 02 c0       	push   0xc00208ea
c001f8c7:	e8 e1 18 ff ff       	call   c00111ad <KePanic(char const*)>
c001f8cc:	83 c4 10             	add    esp,0x10
c001f8cf:	eb 13                	jmp    c001f8e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f8d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f8d4:	83 ec 0c             	sub    esp,0xc
c001f8d7:	68 f4 08 02 c0       	push   0xc00208f4
c001f8dc:	e8 cc 18 ff ff       	call   c00111ad <KePanic(char const*)>
c001f8e1:	83 c4 10             	add    esp,0x10
c001f8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8eb:	8d 50 01             	lea    edx,[eax+0x1]
c001f8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8f5:	90                   	nop
c001f8f6:	83 c4 0c             	add    esp,0xc
c001f8f9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f8fc <ACPI::~ACPI()>:
c001f8fc:	83 ec 0c             	sub    esp,0xc
c001f8ff:	ba 44 1a 02 c0       	mov    edx,0xc0021a44
c001f904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f908:	89 10                	mov    DWORD PTR [eax],edx
c001f90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90e:	83 ec 0c             	sub    esp,0xc
c001f911:	50                   	push   eax
c001f912:	e8 fb cb fe ff       	call   c000c512 <Device::~Device()>
c001f917:	83 c4 10             	add    esp,0x10
c001f91a:	90                   	nop
c001f91b:	83 c4 0c             	add    esp,0xc
c001f91e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f920 <ACPI::~ACPI()>:
c001f920:	83 ec 0c             	sub    esp,0xc
c001f923:	83 ec 0c             	sub    esp,0xc
c001f926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f92a:	e8 cd ff ff ff       	call   c001f8fc <ACPI::~ACPI()>
c001f92f:	83 c4 10             	add    esp,0x10
c001f932:	83 ec 08             	sub    esp,0x8
c001f935:	68 64 12 00 00       	push   0x1264
c001f93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f93e:	e8 c9 ae fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f943:	83 c4 10             	add    esp,0x10
c001f946:	83 c4 0c             	add    esp,0xc
c001f949:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f94c <LinkedList<Device>::~LinkedList()>:
c001f94c:	90                   	nop
c001f94d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f950 <LinkedList<Device>::isEmpty()>:
c001f950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f954:	8b 00                	mov    eax,DWORD PTR [eax]
c001f956:	85 c0                	test   eax,eax
c001f958:	75 0e                	jne    c001f968 <LinkedList<Device>::isEmpty()+0x18>
c001f95a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f95e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f961:	85 c0                	test   eax,eax
c001f963:	75 03                	jne    c001f968 <LinkedList<Device>::isEmpty()+0x18>
c001f965:	b0 01                	mov    al,0x1
c001f967:	c3                   	ret    
c001f968:	b0 00                	mov    al,0x0
c001f96a:	90                   	nop
c001f96b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f96c <LinkedList<Device>::getFirstElement()>:
c001f96c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f970:	8b 00                	mov    eax,DWORD PTR [eax]
c001f972:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f974 <LinkedList<Device>::removeFirst()>:
c001f974:	83 ec 0c             	sub    esp,0xc
c001f977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f97d:	85 c0                	test   eax,eax
c001f97f:	75 17                	jne    c001f998 <LinkedList<Device>::removeFirst()+0x24>
c001f981:	83 ec 0c             	sub    esp,0xc
c001f984:	68 00 09 02 c0       	push   0xc0020900
c001f989:	e8 1f 18 ff ff       	call   c00111ad <KePanic(char const*)>
c001f98e:	83 c4 10             	add    esp,0x10
c001f991:	e9 92 00 00 00       	jmp    c001fa28 <LinkedList<Device>::removeFirst()+0xb4>
c001f996:	66 90                	xchg   ax,ax
c001f998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f99f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f9a5:	85 c0                	test   eax,eax
c001f9a7:	74 13                	je     c001f9bc <LinkedList<Device>::removeFirst()+0x48>
c001f9a9:	83 ec 0c             	sub    esp,0xc
c001f9ac:	68 4b 09 02 c0       	push   0xc002094b
c001f9b1:	e8 f7 17 ff ff       	call   c00111ad <KePanic(char const*)>
c001f9b6:	83 c4 10             	add    esp,0x10
c001f9b9:	8d 76 00             	lea    esi,[esi+0x0]
c001f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9c2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f9c8:	85 c0                	test   eax,eax
c001f9ca:	75 34                	jne    c001fa00 <LinkedList<Device>::removeFirst()+0x8c>
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9e8:	83 f8 01             	cmp    eax,0x1
c001f9eb:	74 27                	je     c001fa14 <LinkedList<Device>::removeFirst()+0xa0>
c001f9ed:	83 ec 0c             	sub    esp,0xc
c001f9f0:	68 24 09 02 c0       	push   0xc0020924
c001f9f5:	e8 b3 17 ff ff       	call   c00111ad <KePanic(char const*)>
c001f9fa:	83 c4 10             	add    esp,0x10
c001f9fd:	eb 15                	jmp    c001fa14 <LinkedList<Device>::removeFirst()+0xa0>
c001f9ff:	90                   	nop
c001fa00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa06:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fa0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa10:	89 10                	mov    DWORD PTR [eax],edx
c001fa12:	66 90                	xchg   ax,ax
c001fa14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa1b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fa1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa25:	8d 76 00             	lea    esi,[esi+0x0]
c001fa28:	83 c4 0c             	add    esp,0xc
c001fa2b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fa2c <CPU::~CPU()>:
c001fa2c:	83 ec 0c             	sub    esp,0xc
c001fa2f:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c001fa34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa38:	89 10                	mov    DWORD PTR [eax],edx
c001fa3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3e:	83 ec 0c             	sub    esp,0xc
c001fa41:	50                   	push   eax
c001fa42:	e8 cb ca fe ff       	call   c000c512 <Device::~Device()>
c001fa47:	83 c4 10             	add    esp,0x10
c001fa4a:	90                   	nop
c001fa4b:	83 c4 0c             	add    esp,0xc
c001fa4e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fa50 <CPU::~CPU()>:
c001fa50:	83 ec 0c             	sub    esp,0xc
c001fa53:	83 ec 0c             	sub    esp,0xc
c001fa56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa5a:	e8 cd ff ff ff       	call   c001fa2c <CPU::~CPU()>
c001fa5f:	83 c4 10             	add    esp,0x10
c001fa62:	83 ec 08             	sub    esp,0x8
c001fa65:	68 94 11 00 00       	push   0x1194
c001fa6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa6e:	e8 99 ad fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fa73:	83 c4 10             	add    esp,0x10
c001fa76:	83 c4 0c             	add    esp,0xc
c001fa79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fa7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fa7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa80:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa83:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fa84 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fa84:	90                   	nop
c001fa85:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fa88 <ThreadControlBlock::ThreadControlBlock()>:
c001fa88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa8c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa97:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fa9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001faa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faad:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fabf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fac7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001facb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001facf:	90                   	nop
c001fad0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fad4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fae2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fae9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001faf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fafe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb02:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb0d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb14:	90                   	nop
c001fb15:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fb16 <PCI::~PCI()>:
c001fb16:	83 ec 0c             	sub    esp,0xc
c001fb19:	ba cc 2a 02 c0       	mov    edx,0xc0022acc
c001fb1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb22:	89 10                	mov    DWORD PTR [eax],edx
c001fb24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb28:	83 ec 0c             	sub    esp,0xc
c001fb2b:	50                   	push   eax
c001fb2c:	e8 73 c4 fe ff       	call   c000bfa4 <Bus::~Bus()>
c001fb31:	83 c4 10             	add    esp,0x10
c001fb34:	90                   	nop
c001fb35:	83 c4 0c             	add    esp,0xc
c001fb38:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fb3a <PCI::~PCI()>:
c001fb3a:	83 ec 0c             	sub    esp,0xc
c001fb3d:	83 ec 0c             	sub    esp,0xc
c001fb40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb44:	e8 cd ff ff ff       	call   c001fb16 <PCI::~PCI()>
c001fb49:	83 c4 10             	add    esp,0x10
c001fb4c:	83 ec 08             	sub    esp,0x8
c001fb4f:	68 5c 01 00 00       	push   0x15c
c001fb54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb58:	e8 af ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb5d:	83 c4 10             	add    esp,0x10
c001fb60:	83 c4 0c             	add    esp,0xc
c001fb63:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fb64 <IDE::~IDE()>:
c001fb64:	83 ec 0c             	sub    esp,0xc
c001fb67:	ba 80 2b 02 c0       	mov    edx,0xc0022b80
c001fb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb70:	89 10                	mov    DWORD PTR [eax],edx
c001fb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb76:	83 ec 0c             	sub    esp,0xc
c001fb79:	50                   	push   eax
c001fb7a:	e8 0d ce fe ff       	call   c000c98c <HardDiskController::~HardDiskController()>
c001fb7f:	83 c4 10             	add    esp,0x10
c001fb82:	90                   	nop
c001fb83:	83 c4 0c             	add    esp,0xc
c001fb86:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fb88 <IDE::~IDE()>:
c001fb88:	83 ec 0c             	sub    esp,0xc
c001fb8b:	83 ec 0c             	sub    esp,0xc
c001fb8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb92:	e8 cd ff ff ff       	call   c001fb64 <IDE::~IDE()>
c001fb97:	83 c4 10             	add    esp,0x10
c001fb9a:	83 ec 08             	sub    esp,0x8
c001fb9d:	68 70 02 00 00       	push   0x270
c001fba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fba6:	e8 61 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fbab:	83 c4 10             	add    esp,0x10
c001fbae:	83 c4 0c             	add    esp,0xc
c001fbb1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fbb2 <SATABus::~SATABus()>:
c001fbb2:	83 ec 0c             	sub    esp,0xc
c001fbb5:	ba d0 2b 02 c0       	mov    edx,0xc0022bd0
c001fbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbe:	89 10                	mov    DWORD PTR [eax],edx
c001fbc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc4:	83 ec 0c             	sub    esp,0xc
c001fbc7:	50                   	push   eax
c001fbc8:	e8 bf cd fe ff       	call   c000c98c <HardDiskController::~HardDiskController()>
c001fbcd:	83 c4 10             	add    esp,0x10
c001fbd0:	90                   	nop
c001fbd1:	83 c4 0c             	add    esp,0xc
c001fbd4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fbd6 <SATABus::~SATABus()>:
c001fbd6:	83 ec 0c             	sub    esp,0xc
c001fbd9:	83 ec 0c             	sub    esp,0xc
c001fbdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbe0:	e8 cd ff ff ff       	call   c001fbb2 <SATABus::~SATABus()>
c001fbe5:	83 c4 10             	add    esp,0x10
c001fbe8:	83 ec 08             	sub    esp,0x8
c001fbeb:	68 64 01 00 00       	push   0x164
c001fbf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbf4:	e8 13 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fbf9:	83 c4 10             	add    esp,0x10
c001fbfc:	83 c4 0c             	add    esp,0xc
c001fbff:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fc00 <ATA::~ATA()>:
c001fc00:	83 ec 0c             	sub    esp,0xc
c001fc03:	ba 10 2c 02 c0       	mov    edx,0xc0022c10
c001fc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0c:	89 10                	mov    DWORD PTR [eax],edx
c001fc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc12:	83 ec 0c             	sub    esp,0xc
c001fc15:	50                   	push   eax
c001fc16:	e8 53 ce fe ff       	call   c000ca6e <PhysicalDisk::~PhysicalDisk()>
c001fc1b:	83 c4 10             	add    esp,0x10
c001fc1e:	90                   	nop
c001fc1f:	83 c4 0c             	add    esp,0xc
c001fc22:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fc24 <ATA::~ATA()>:
c001fc24:	83 ec 0c             	sub    esp,0xc
c001fc27:	83 ec 0c             	sub    esp,0xc
c001fc2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc2e:	e8 cd ff ff ff       	call   c001fc00 <ATA::~ATA()>
c001fc33:	83 c4 10             	add    esp,0x10
c001fc36:	83 ec 08             	sub    esp,0x8
c001fc39:	68 7c 01 00 00       	push   0x17c
c001fc3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc42:	e8 c5 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc47:	83 c4 10             	add    esp,0x10
c001fc4a:	83 c4 0c             	add    esp,0xc
c001fc4d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fc4e <ATAPI::~ATAPI()>:
c001fc4e:	83 ec 0c             	sub    esp,0xc
c001fc51:	ba 58 2c 02 c0       	mov    edx,0xc0022c58
c001fc56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5a:	89 10                	mov    DWORD PTR [eax],edx
c001fc5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc60:	83 ec 0c             	sub    esp,0xc
c001fc63:	50                   	push   eax
c001fc64:	e8 05 ce fe ff       	call   c000ca6e <PhysicalDisk::~PhysicalDisk()>
c001fc69:	83 c4 10             	add    esp,0x10
c001fc6c:	90                   	nop
c001fc6d:	83 c4 0c             	add    esp,0xc
c001fc70:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fc72 <ATAPI::~ATAPI()>:
c001fc72:	83 ec 0c             	sub    esp,0xc
c001fc75:	83 ec 0c             	sub    esp,0xc
c001fc78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc7c:	e8 cd ff ff ff       	call   c001fc4e <ATAPI::~ATAPI()>
c001fc81:	83 c4 10             	add    esp,0x10
c001fc84:	83 ec 08             	sub    esp,0x8
c001fc87:	68 84 01 00 00       	push   0x184
c001fc8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc90:	e8 77 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc95:	83 c4 10             	add    esp,0x10
c001fc98:	83 c4 0c             	add    esp,0xc
c001fc9b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fc9c <SATA::~SATA()>:
c001fc9c:	83 ec 0c             	sub    esp,0xc
c001fc9f:	ba 0c 2d 02 c0       	mov    edx,0xc0022d0c
c001fca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca8:	89 10                	mov    DWORD PTR [eax],edx
c001fcaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcae:	83 ec 0c             	sub    esp,0xc
c001fcb1:	50                   	push   eax
c001fcb2:	e8 b7 cd fe ff       	call   c000ca6e <PhysicalDisk::~PhysicalDisk()>
c001fcb7:	83 c4 10             	add    esp,0x10
c001fcba:	90                   	nop
c001fcbb:	83 c4 0c             	add    esp,0xc
c001fcbe:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fcc0 <SATA::~SATA()>:
c001fcc0:	83 ec 0c             	sub    esp,0xc
c001fcc3:	83 ec 0c             	sub    esp,0xc
c001fcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcca:	e8 cd ff ff ff       	call   c001fc9c <SATA::~SATA()>
c001fccf:	83 c4 10             	add    esp,0x10
c001fcd2:	83 ec 08             	sub    esp,0x8
c001fcd5:	68 7c 01 00 00       	push   0x17c
c001fcda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcde:	e8 29 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fce3:	83 c4 10             	add    esp,0x10
c001fce6:	83 c4 0c             	add    esp,0xc
c001fce9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fcea <SATAPI::~SATAPI()>:
c001fcea:	83 ec 0c             	sub    esp,0xc
c001fced:	ba 30 2e 02 c0       	mov    edx,0xc0022e30
c001fcf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf6:	89 10                	mov    DWORD PTR [eax],edx
c001fcf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfc:	83 ec 0c             	sub    esp,0xc
c001fcff:	50                   	push   eax
c001fd00:	e8 69 cd fe ff       	call   c000ca6e <PhysicalDisk::~PhysicalDisk()>
c001fd05:	83 c4 10             	add    esp,0x10
c001fd08:	90                   	nop
c001fd09:	83 c4 0c             	add    esp,0xc
c001fd0c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fd0e <SATAPI::~SATAPI()>:
c001fd0e:	83 ec 0c             	sub    esp,0xc
c001fd11:	83 ec 0c             	sub    esp,0xc
c001fd14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd18:	e8 cd ff ff ff       	call   c001fcea <SATAPI::~SATAPI()>
c001fd1d:	83 c4 10             	add    esp,0x10
c001fd20:	83 ec 08             	sub    esp,0x8
c001fd23:	68 84 01 00 00       	push   0x184
c001fd28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd2c:	e8 db aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd31:	83 c4 10             	add    esp,0x10
c001fd34:	83 c4 0c             	add    esp,0xc
c001fd37:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fd38 <IOAPIC::~IOAPIC()>:
c001fd38:	83 ec 0c             	sub    esp,0xc
c001fd3b:	ba 70 2e 02 c0       	mov    edx,0xc0022e70
c001fd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd44:	89 10                	mov    DWORD PTR [eax],edx
c001fd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4a:	83 ec 0c             	sub    esp,0xc
c001fd4d:	50                   	push   eax
c001fd4e:	e8 bf c7 fe ff       	call   c000c512 <Device::~Device()>
c001fd53:	83 c4 10             	add    esp,0x10
c001fd56:	90                   	nop
c001fd57:	83 c4 0c             	add    esp,0xc
c001fd5a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fd5c <IOAPIC::~IOAPIC()>:
c001fd5c:	83 ec 0c             	sub    esp,0xc
c001fd5f:	83 ec 0c             	sub    esp,0xc
c001fd62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd66:	e8 cd ff ff ff       	call   c001fd38 <IOAPIC::~IOAPIC()>
c001fd6b:	83 c4 10             	add    esp,0x10
c001fd6e:	83 ec 08             	sub    esp,0x8
c001fd71:	68 68 01 00 00       	push   0x168
c001fd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd7a:	e8 8d aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd7f:	83 c4 10             	add    esp,0x10
c001fd82:	83 c4 0c             	add    esp,0xc
c001fd85:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fd88 <APICTimer::~APICTimer()>:
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	ba b8 2e 02 c0       	mov    edx,0xc0022eb8
c001fd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd94:	89 10                	mov    DWORD PTR [eax],edx
c001fd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9a:	83 ec 0c             	sub    esp,0xc
c001fd9d:	50                   	push   eax
c001fd9e:	e8 45 e2 fe ff       	call   c000dfe8 <Timer::~Timer()>
c001fda3:	83 c4 10             	add    esp,0x10
c001fda6:	90                   	nop
c001fda7:	83 c4 0c             	add    esp,0xc
c001fdaa:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fdac <APICTimer::~APICTimer()>:
c001fdac:	83 ec 0c             	sub    esp,0xc
c001fdaf:	83 ec 0c             	sub    esp,0xc
c001fdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb6:	e8 cd ff ff ff       	call   c001fd88 <APICTimer::~APICTimer()>
c001fdbb:	83 c4 10             	add    esp,0x10
c001fdbe:	83 ec 08             	sub    esp,0x8
c001fdc1:	68 60 01 00 00       	push   0x160
c001fdc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdca:	e8 3d aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fdcf:	83 c4 10             	add    esp,0x10
c001fdd2:	83 c4 0c             	add    esp,0xc
c001fdd5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fdd8 <PIT::~PIT()>:
c001fdd8:	83 ec 0c             	sub    esp,0xc
c001fddb:	ba 08 2f 02 c0       	mov    edx,0xc0022f08
c001fde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde4:	89 10                	mov    DWORD PTR [eax],edx
c001fde6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdea:	83 ec 0c             	sub    esp,0xc
c001fded:	50                   	push   eax
c001fdee:	e8 f5 e1 fe ff       	call   c000dfe8 <Timer::~Timer()>
c001fdf3:	83 c4 10             	add    esp,0x10
c001fdf6:	90                   	nop
c001fdf7:	83 c4 0c             	add    esp,0xc
c001fdfa:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fdfc <PIT::~PIT()>:
c001fdfc:	83 ec 0c             	sub    esp,0xc
c001fdff:	83 ec 0c             	sub    esp,0xc
c001fe02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe06:	e8 cd ff ff ff       	call   c001fdd8 <PIT::~PIT()>
c001fe0b:	83 c4 10             	add    esp,0x10
c001fe0e:	83 ec 08             	sub    esp,0x8
c001fe11:	68 5c 01 00 00       	push   0x15c
c001fe16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe1a:	e8 ed a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe1f:	83 c4 10             	add    esp,0x10
c001fe22:	83 c4 0c             	add    esp,0xc
c001fe25:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 1d 1d 02 c0       	mov    esi,0xc0021d1d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 39 1d 02 c0       	mov    esi,0xc0021d39
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
