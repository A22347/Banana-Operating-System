
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 11 7b 00 00       	call   c0007b31 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 43 02 c0       	mov    eax,0xc0024344
c0000025:	3d 44 43 02 c0       	cmp    eax,0xc0024344
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 43 02 c0       	push   0xc0024344
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 43 02 c0       	mov    eax,0xc0024344
c0000051:	2d 44 43 02 c0       	sub    eax,0xc0024344
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 43 02 c0       	push   0xc0024344
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb bc 04 02 c0       	mov    ebx,0xc00204bc
c0000097:	81 eb b8 04 02 c0    	sub    ebx,0xc00204b8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be b8 04 02 c0       	mov    esi,0xc00204b8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 43 02 c0       	push   0xc0024344
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 44 43 02 c0       	push   0xc0024344
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 bf 56 01 00       	call   c001596c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 00 a4 00 00       	call   c000a6c5 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 9d 56 01 00       	call   c001596c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 aa 5b 01 00       	call   c0015e98 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 45 62 01 00       	call   c001653c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 73 12 01 00       	jmp    c00115f2 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 c0 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfb40],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 c0 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb40],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 c0 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb40],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 c0 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb40],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 c0 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfb40],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 c0 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb40],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a7 6a 00 00       	call   c00079ac <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 02 6a 00 00       	call   c00079ac <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 ec 69 00 00       	call   c00079ac <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 ea 68 00 00       	call   c00079ac <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 c4 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa3c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 2e 7d 01 00       	jmp    c0019b08 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 58 7d 01 00       	jmp    c0019b48 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 79 7d 01 00       	jmp    c0019b88 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 20 07 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf8e0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 20 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf8e0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 58 2f 02 c0       	mov    edx,0xc0022f58
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba dc 05 02 c0       	mov    edx,0xc00205dc
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 e2 05 02 c0       	mov    eax,0xc00205e2
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf a0 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf960]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 eb 05 02 c0       	mov    eax,0xc00205eb
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 20 07 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf8e0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 70 06 02 c0       	mov    eax,0xc0020670
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 60 06 02 c0       	mov    ebx,0xc0020660
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 40 06 02 c0       	mov    eax,0xc0020640
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 50 06 02 c0       	mov    eax,0xc0020650
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba f2 05 02 c0       	mov    edx,0xc00205f2
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba fe 05 02 c0       	mov    edx,0xc00205fe
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 12 06 02 c0       	mov    edx,0xc0020612
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 74 1e 00 00       	call   c0007ad7 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 6c 1e 00 00       	call   c0007ae7 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 40 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020a40
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 40 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a40
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 40 08 02 c0       	mov    eax,0xc0020840
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 80 07 02 c0       	mov    eax,0xc0020780
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 40 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf8c0]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 40 0b 02 c0       	push   0xc0020b40
c0006147:	e8 60 43 01 00       	call   c001a4ac <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 4e 0b 02 c0       	push   0xc0020b4e
c000617f:	e8 28 43 01 00       	call   c001a4ac <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 91 42 01 00       	call   c001a450 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 5d 0b 02 c0       	push   0xc0020b5d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 60 0b 02 c0       	push   0xc0020b60
c000682f:	e8 78 3c 01 00       	call   c001a4ac <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 86 3c 01 00       	call   c001a4c8 <iso_kprintfd>
c0006842:	c7 04 24 65 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b65
c0006849:	e8 5e 3c 01 00       	call   c001a4ac <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 6e 3c 01 00       	call   c001a4c8 <iso_kprintfd>
c000685a:	c7 04 24 6b 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b6b
c0006861:	e8 46 3c 01 00       	call   c001a4ac <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 56 3c 01 00       	call   c001a4c8 <iso_kprintfd>
c0006872:	c7 04 24 71 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b71
c0006879:	e8 2e 3c 01 00       	call   c001a4ac <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 3e 3c 01 00       	call   c001a4c8 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 5d 0b 02 c0       	push   0xc0020b5d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 7a 0b 02 c0       	push   0xc0020b7a
c0006a52:	e8 55 3a 01 00       	call   c001a4ac <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 85 0b 02 c0       	push   0xc0020b85
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 8c 0b 02 c0       	push   0xc0020b8c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 93 0b 02 c0       	push   0xc0020b93
c0006b69:	e8 3e 39 01 00       	call   c001a4ac <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 9e 0b 02 c0       	push   0xc0020b9e
c0006b84:	e8 23 39 01 00       	call   c001a4ac <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 24 0f 00 00       	call   c0007ad7 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 13 0f 00 00       	call   c0007ad7 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fe 0e 00 00       	call   c0007ad7 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e5 0e 00 00       	call   c0007ad7 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 c3 0e 00 00       	call   c0007ae7 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b5 0e 00 00       	call   c0007ae7 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 9b 0e 00 00       	call   c0007ae7 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 86 0e 00 00       	call   c0007ae7 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	53                   	push   ebx
c0006c81:	83 ec 08             	sub    esp,0x8
c0006c84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c88:	e8 9d a1 00 00       	call   c0010e2a <KeExecuteAtexit()>
c0006c8d:	83 ec 0c             	sub    esp,0xc
c0006c90:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c96:	50                   	push   eax
c0006c97:	e8 70 5f 00 00       	call   c000cc0c <Device::closeAll()>
c0006c9c:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006ca6:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ca8:	51                   	push   ecx
c0006ca9:	68 0f 27 00 00       	push   0x270f
c0006cae:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0006cb2:	53                   	push   ebx
c0006cb3:	50                   	push   eax
c0006cb4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006cb7:	83 c4 14             	add    esp,0x14
c0006cba:	68 af 0b 02 c0       	push   0xc0020baf
c0006cbf:	e8 43 a9 00 00       	call   c0011607 <KePanic(char const*)>
c0006cc4:	83 c4 18             	add    esp,0x18
c0006cc7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006ccc:	5b                   	pop    ebx
c0006ccd:	c3                   	ret    

c0006cce <Krnl::firstTask()>:
c0006cce:	53                   	push   ebx
c0006ccf:	83 ec 14             	sub    esp,0x14
c0006cd2:	fb                   	sti    
c0006cd3:	68 c5 0b 02 c0       	push   0xc0020bc5
c0006cd8:	e8 2c a2 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c0006cdd:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce4:	e8 ee 0d 00 00       	call   c0007ad7 <malloc>
c0006ce9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cf0:	89 c3                	mov    ebx,eax
c0006cf2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cf7:	50                   	push   eax
c0006cf8:	68 de 0b 02 c0       	push   0xc0020bde
c0006cfd:	6a 01                	push   0x1
c0006cff:	53                   	push   ebx
c0006d00:	e8 bf ef 00 00       	call   c0015cc4 <Process::Process(bool, char const*, Process*, char**)>
c0006d05:	83 c4 20             	add    esp,0x20
c0006d08:	68 ff 00 00 00       	push   0xff
c0006d0d:	6a 00                	push   0x0
c0006d0f:	68 21 75 00 c0       	push   0xc0007521
c0006d14:	53                   	push   ebx
c0006d15:	e8 ce f1 00 00       	call   c0015ee8 <Process::createThread(void (*)(void*), void*, int)>
c0006d1a:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d20:	6a 7a                	push   0x7a
c0006d22:	6a 00                	push   0x0
c0006d24:	68 ac 69 01 c0       	push   0xc00169ac
c0006d29:	52                   	push   edx
c0006d2a:	e8 b9 f1 00 00       	call   c0015ee8 <Process::createThread(void (*)(void*), void*, int)>
c0006d2f:	83 c4 14             	add    esp,0x14
c0006d32:	68 dc 0c 02 c0       	push   0xc0020cdc
c0006d37:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d3c:	e8 c8 a1 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c0006d41:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d48:	e8 71 aa 00 00       	call   c00117be <KeInitRand()>
c0006d4d:	e8 7d 00 01 00       	call   c0016dcf <Vm::initialise8086()>
c0006d52:	e8 99 4a 00 00       	call   c000b7f0 <Fs::initVFS()>
c0006d57:	c7 04 24 eb 0b 02 c0 	mov    DWORD PTR [esp],0xc0020beb
c0006d5e:	e8 a6 a1 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c0006d63:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d68:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d70:	6a 00                	push   0x0
c0006d72:	6a 00                	push   0x0
c0006d74:	6a 00                	push   0x0
c0006d76:	50                   	push   eax
c0006d77:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d7a:	83 c4 14             	add    esp,0x14
c0006d7d:	68 dc 0c 02 c0       	push   0xc0020cdc
c0006d82:	e8 82 a1 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c0006d87:	e8 fe 41 00 00       	call   c000af8a <KeInitialiseSymlinks()>
c0006d8c:	e8 d9 a6 00 00       	call   c001146a <KeLoadSystemEnv()>
c0006d91:	e8 36 a9 00 00       	call   c00116cc <KeSetupPowerManager()>
c0006d96:	83 c4 0c             	add    esp,0xc
c0006d99:	6a 3a                	push   0x3a
c0006d9b:	68 05 0c 02 c0       	push   0xc0020c05
c0006da0:	68 0e 0c 02 c0       	push   0xc0020c0e
c0006da5:	e8 d8 d0 00 00       	call   c0013e82 <Reg::readIntWithDefault(char*, char*, int)>
c0006daa:	89 04 24             	mov    DWORD PTR [esp],eax
c0006dad:	e8 6a 56 00 00       	call   c000c41c <User::loadClockSettings(int)>
c0006db2:	c7 04 24 00 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d00
c0006db9:	e8 4b a1 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c0006dbe:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dc3:	59                   	pop    ecx
c0006dc4:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dca:	53                   	push   ebx
c0006dcb:	e8 f0 5c 00 00       	call   c000cac0 <Device::loadDriversForAll()>
c0006dd0:	c7 04 24 16 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c16
c0006dd7:	e8 2d a1 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c0006ddc:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006de2:	58                   	pop    eax
c0006de3:	5a                   	pop    edx
c0006de4:	6a 01                	push   0x1
c0006de6:	68 27 0c 02 c0       	push   0xc0020c27
c0006deb:	e8 db e8 00 00       	call   c00156cb <Thr::loadDLL(char const*, bool)>
c0006df0:	59                   	pop    ecx
c0006df1:	5a                   	pop    edx
c0006df2:	53                   	push   ebx
c0006df3:	50                   	push   eax
c0006df4:	e8 12 eb 00 00       	call   c001590b <Thr::executeDLL(unsigned long, void*)>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 ec 0c             	sub    esp,0xc
c0006dff:	6a 02                	push   0x2
c0006e01:	e8 2e f5 00 00       	call   c0016334 <blockTask(TaskState)>
c0006e06:	83 c4 10             	add    esp,0x10
c0006e09:	eb f1                	jmp    c0006dfc <Krnl::firstTask()+0x12e>
c0006e0b:	90                   	nop

c0006e0c <Computer::Computer()>:
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e13:	83 ec 08             	sub    esp,0x8
c0006e16:	68 43 0c 02 c0       	push   0xc0020c43
c0006e1b:	50                   	push   eax
c0006e1c:	e8 e5 5c 00 00       	call   c000cb06 <Device::Device(char const*)>
c0006e21:	83 c4 10             	add    esp,0x10
c0006e24:	ba 4c 0d 02 c0       	mov    edx,0xc0020d4c
c0006e29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2d:	89 10                	mov    DWORD PTR [eax],edx
c0006e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e33:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e41:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e55:	83 ca 04             	or     edx,0x4
c0006e58:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e68:	0f b6 d0             	movzx  edx,al
c0006e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6f:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e80:	0f b6 d0             	movzx  edx,al
c0006e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e87:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e90:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e96:	8d 50 01             	lea    edx,[eax+0x1]
c0006e99:	88 d1                	mov    cl,dl
c0006e9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea5:	0f b6 d0             	movzx  edx,al
c0006ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eac:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eb0:	83 e1 3f             	and    ecx,0x3f
c0006eb3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb7:	90                   	nop
c0006eb8:	83 c4 0c             	add    esp,0xc
c0006ebb:	c3                   	ret    

c0006ebc <Computer::setBootMessage(char const*)>:
c0006ebc:	c3                   	ret    
c0006ebd:	90                   	nop

c0006ebe <Computer::detectFeatures()>:
c0006ebe:	55                   	push   ebp
c0006ebf:	57                   	push   edi
c0006ec0:	56                   	push   esi
c0006ec1:	53                   	push   ebx
c0006ec2:	83 ec 1c             	sub    esp,0x1c
c0006ec5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecf:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006edb:	e8 19 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ee0:	31 d2                	xor    edx,edx
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006eea:	0f 95 c2             	setne  dl
c0006eed:	d1 e2                	shl    edx,1
c0006eef:	83 e0 fd             	and    eax,0xfffffffd
c0006ef2:	09 d0                	or     eax,edx
c0006ef4:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006efa:	a8 02                	test   al,0x2
c0006efc:	75 51                	jne    c0006f4f <Computer::detectFeatures()+0x91>
c0006efe:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f05:	74 0f                	je     c0006f16 <Computer::detectFeatures()+0x58>
c0006f07:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f0d:	83 e0 fb             	and    eax,0xfffffffb
c0006f10:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f16:	e8 9b 85 01 00       	call   c001f4b6 <x87Detect>
c0006f1b:	83 e0 01             	and    eax,0x1
c0006f1e:	c1 e0 04             	shl    eax,0x4
c0006f21:	89 c2                	mov    edx,eax
c0006f23:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f29:	83 e0 ef             	and    eax,0xffffffef
c0006f2c:	09 d0                	or     eax,edx
c0006f2e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f34:	a8 10                	test   al,0x10
c0006f36:	88 c2                	mov    dl,al
c0006f38:	0f 85 33 01 00 00    	jne    c0007071 <Computer::detectFeatures()+0x1b3>
c0006f3e:	80 e2 80             	and    dl,0x80
c0006f41:	0f 85 4c 01 00 00    	jne    c0007093 <Computer::detectFeatures()+0x1d5>
c0006f47:	83 c4 1c             	add    esp,0x1c
c0006f4a:	5b                   	pop    ebx
c0006f4b:	5e                   	pop    esi
c0006f4c:	5f                   	pop    edi
c0006f4d:	5d                   	pop    ebp
c0006f4e:	c3                   	ret    
c0006f4f:	83 ec 0c             	sub    esp,0xc
c0006f52:	6a 20                	push   0x20
c0006f54:	e8 e9 93 00 00       	call   c0010342 <CPU::cpuidCheckEDX(unsigned int)>
c0006f59:	83 e0 01             	and    eax,0x1
c0006f5c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f63:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f69:	83 e0 f7             	and    eax,0xfffffff7
c0006f6c:	09 d0                	or     eax,edx
c0006f6e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f74:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f7b:	e8 c2 93 00 00       	call   c0010342 <CPU::cpuidCheckEDX(unsigned int)>
c0006f80:	89 c2                	mov    edx,eax
c0006f82:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f88:	83 e2 01             	and    edx,0x1
c0006f8b:	83 e0 fe             	and    eax,0xfffffffe
c0006f8e:	09 d0                	or     eax,edx
c0006f90:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f96:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f9d:	e8 a0 93 00 00       	call   c0010342 <CPU::cpuidCheckEDX(unsigned int)>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006faa:	c1 e2 07             	shl    edx,0x7
c0006fad:	83 e0 7f             	and    eax,0x7f
c0006fb0:	09 d0                	or     eax,edx
c0006fb2:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb8:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbf:	e8 7e 93 00 00       	call   c0010342 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc4:	83 c4 10             	add    esp,0x10
c0006fc7:	83 e0 01             	and    eax,0x1
c0006fca:	c1 e0 05             	shl    eax,0x5
c0006fcd:	89 c2                	mov    edx,eax
c0006fcf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd5:	83 e0 df             	and    eax,0xffffffdf
c0006fd8:	09 d0                	or     eax,edx
c0006fda:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fe4:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fea:	0f 84 c9 00 00 00    	je     c00070b9 <Computer::detectFeatures()+0x1fb>
c0006ff0:	83 e0 fe             	and    eax,0xfffffffe
c0006ff3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fff:	89 c2                	mov    edx,eax
c0007001:	83 e2 09             	and    edx,0x9
c0007004:	83 fa 01             	cmp    edx,0x1
c0007007:	75 09                	jne    c0007012 <Computer::detectFeatures()+0x154>
c0007009:	83 e0 fe             	and    eax,0xfffffffe
c000700c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007012:	83 ec 0c             	sub    esp,0xc
c0007015:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007019:	50                   	push   eax
c000701a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701e:	55                   	push   ebp
c000701f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007023:	57                   	push   edi
c0007024:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007028:	56                   	push   esi
c0007029:	68 00 00 00 80       	push   0x80000000
c000702e:	e8 8b 92 00 00       	call   c00102be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007033:	83 c4 20             	add    esp,0x20
c0007036:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000703d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007041:	0f 86 b7 fe ff ff    	jbe    c0006efe <Computer::detectFeatures()+0x40>
c0007047:	83 ec 0c             	sub    esp,0xc
c000704a:	50                   	push   eax
c000704b:	55                   	push   ebp
c000704c:	57                   	push   edi
c000704d:	56                   	push   esi
c000704e:	68 01 00 00 80       	push   0x80000001
c0007053:	e8 66 92 00 00       	call   c00102be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007058:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007066:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000706c:	e9 8d fe ff ff       	jmp    c0006efe <Computer::detectFeatures()+0x40>
c0007071:	e8 fa 83 01 00       	call   c001f470 <absolutelyNoChanceInHell>
c0007076:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000707c:	83 e2 7f             	and    edx,0x7f
c000707f:	c1 e0 07             	shl    eax,0x7
c0007082:	09 c2                	or     edx,eax
c0007084:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000708a:	80 e2 80             	and    dl,0x80
c000708d:	0f 84 b4 fe ff ff    	je     c0006f47 <Computer::detectFeatures()+0x89>
c0007093:	e8 48 80 01 00       	call   c001f0e0 <avxDetect>
c0007098:	83 e0 01             	and    eax,0x1
c000709b:	c1 e0 05             	shl    eax,0x5
c000709e:	89 c2                	mov    edx,eax
c00070a0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a6:	83 e0 df             	and    eax,0xffffffdf
c00070a9:	09 d0                	or     eax,edx
c00070ab:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070b1:	83 c4 1c             	add    esp,0x1c
c00070b4:	5b                   	pop    ebx
c00070b5:	5e                   	pop    esi
c00070b6:	5f                   	pop    edi
c00070b7:	5d                   	pop    ebp
c00070b8:	c3                   	ret    
c00070b9:	83 ec 0c             	sub    esp,0xc
c00070bc:	68 00 02 00 00       	push   0x200
c00070c1:	e8 7c 92 00 00       	call   c0010342 <CPU::cpuidCheckEDX(unsigned int)>
c00070c6:	83 c4 10             	add    esp,0x10
c00070c9:	89 c2                	mov    edx,eax
c00070cb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070d1:	83 e2 01             	and    edx,0x1
c00070d4:	83 e0 fe             	and    eax,0xfffffffe
c00070d7:	09 d0                	or     eax,edx
c00070d9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070df:	e9 15 ff ff ff       	jmp    c0006ff9 <Computer::detectFeatures()+0x13b>

c00070e4 <Computer::displayFeatures()>:
c00070e4:	c3                   	ret    
c00070e5:	90                   	nop

c00070e6 <Computer::rdmsr(unsigned int)>:
c00070e6:	83 ec 0c             	sub    esp,0xc
c00070e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070ed:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f4:	74 0a                	je     c0007100 <Computer::rdmsr(unsigned int)+0x1a>
c00070f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070fa:	0f 32                	rdmsr  
c00070fc:	83 c4 0c             	add    esp,0xc
c00070ff:	c3                   	ret    
c0007100:	83 ec 0c             	sub    esp,0xc
c0007103:	68 4c 0c 02 c0       	push   0xc0020c4c
c0007108:	e8 fa a4 00 00       	call   c0011607 <KePanic(char const*)>
c000710d:	83 c4 10             	add    esp,0x10
c0007110:	eb e4                	jmp    c00070f6 <Computer::rdmsr(unsigned int)+0x10>

c0007112 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007112:	57                   	push   edi
c0007113:	56                   	push   esi
c0007114:	83 ec 04             	sub    esp,0x4
c0007117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000711b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007123:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000712a:	74 10                	je     c000713c <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c000712c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007130:	89 f0                	mov    eax,esi
c0007132:	89 fa                	mov    edx,edi
c0007134:	0f 30                	wrmsr  
c0007136:	83 c4 04             	add    esp,0x4
c0007139:	5e                   	pop    esi
c000713a:	5f                   	pop    edi
c000713b:	c3                   	ret    
c000713c:	83 ec 0c             	sub    esp,0xc
c000713f:	68 52 0c 02 c0       	push   0xc0020c52
c0007144:	e8 be a4 00 00       	call   c0011607 <KePanic(char const*)>
c0007149:	83 c4 10             	add    esp,0x10
c000714c:	eb de                	jmp    c000712c <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714e <Computer::shutdown()>:
c000714e:	83 ec 0c             	sub    esp,0xc
c0007151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007155:	8b 10                	mov    edx,DWORD PTR [eax]
c0007157:	6a 00                	push   0x0
c0007159:	6a 00                	push   0x0
c000715b:	6a 00                	push   0x0
c000715d:	50                   	push   eax
c000715e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007161:	83 c4 1c             	add    esp,0x1c
c0007164:	c3                   	ret    
c0007165:	90                   	nop

c0007166 <Computer::restart()>:
c0007166:	83 ec 0c             	sub    esp,0xc
c0007169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716d:	8b 10                	mov    edx,DWORD PTR [eax]
c000716f:	6a 00                	push   0x0
c0007171:	6a 00                	push   0x0
c0007173:	6a 01                	push   0x1
c0007175:	50                   	push   eax
c0007176:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007179:	83 c4 1c             	add    esp,0x1c
c000717c:	c3                   	ret    
c000717d:	90                   	nop

c000717e <Computer::sleep()>:
c000717e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007182:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007188:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718c:	e9 83 8c 00 00       	jmp    c000fe14 <ACPI::sleep()>
c0007191:	90                   	nop

c0007192 <Computer::nmiEnabled()>:
c0007192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007196:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000719c:	c3                   	ret    
c000719d:	90                   	nop

c000719e <Computer::readCMOS(unsigned char)>:
c000719e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00071a2:	31 d2                	xor    edx,edx
c00071a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a8:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071af:	75 02                	jne    c00071b3 <Computer::readCMOS(unsigned char)+0x15>
c00071b1:	b2 80                	mov    dl,0x80
c00071b3:	09 d0                	or     eax,edx
c00071b5:	e6 70                	out    0x70,al
c00071b7:	e4 71                	in     al,0x71
c00071b9:	c3                   	ret    

c00071ba <Computer::enableNMI(bool)>:
c00071ba:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071c2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071d0:	eb cc                	jmp    c000719e <Computer::readCMOS(unsigned char)>

c00071d2 <Computer::open(int, int, void*)>:
c00071d2:	56                   	push   esi
c00071d3:	53                   	push   ebx
c00071d4:	83 ec 10             	sub    esp,0x10
c00071d7:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071e2:	68 58 0c 02 c0       	push   0xc0020c58
c00071e7:	0f 94 05 a0 37 02 c0 	sete   BYTE PTR ds:0xc00237a0
c00071ee:	e8 16 9d 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c00071f3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071fa:	e8 d8 08 00 00       	call   c0007ad7 <malloc>
c00071ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0007202:	89 c6                	mov    esi,eax
c0007204:	e8 7f 87 00 00       	call   c000f988 <ACPI::ACPI()>
c0007209:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720f:	58                   	pop    eax
c0007210:	5a                   	pop    edx
c0007211:	56                   	push   esi
c0007212:	53                   	push   ebx
c0007213:	e8 8c 57 00 00       	call   c000c9a4 <Device::addChild(Device*)>
c0007218:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000721b:	e8 9e fc ff ff       	call   c0006ebe <Computer::detectFeatures()>
c0007220:	59                   	pop    ecx
c0007221:	5e                   	pop    esi
c0007222:	6a 01                	push   0x1
c0007224:	53                   	push   ebx
c0007225:	e8 90 ff ff ff       	call   c00071ba <Computer::enableNMI(bool)>
c000722a:	c7 04 24 70 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c70
c0007231:	e8 d3 9c 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c0007236:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000723d:	e8 95 08 00 00       	call   c0007ad7 <malloc>
c0007242:	89 04 24             	mov    DWORD PTR [esp],eax
c0007245:	89 c6                	mov    esi,eax
c0007247:	e8 ae 91 00 00       	call   c00103fa <CPU::CPU()>
c000724c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007252:	58                   	pop    eax
c0007253:	5a                   	pop    edx
c0007254:	56                   	push   esi
c0007255:	53                   	push   ebx
c0007256:	e8 49 57 00 00       	call   c000c9a4 <Device::addChild(Device*)>
c000725b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007261:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007265:	8b 10                	mov    edx,DWORD PTR [eax]
c0007267:	51                   	push   ecx
c0007268:	6a 00                	push   0x0
c000726a:	6a 00                	push   0x0
c000726c:	50                   	push   eax
c000726d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007270:	83 c4 14             	add    esp,0x14
c0007273:	68 20 0d 02 c0       	push   0xc0020d20
c0007278:	e8 8c 9c 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c000727d:	e8 94 0d 01 00       	call   c0018016 <HalInitialiseCoprocessor()>
c0007282:	c7 04 24 8a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c8a
c0007289:	e8 7b 9c 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c000728e:	c7 04 24 ce 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cce
c0007295:	e8 76 ed 00 00       	call   c0016010 <setupMultitasking(void (*)())>
c000729a:	83 c4 14             	add    esp,0x14
c000729d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00072a2:	5b                   	pop    ebx
c00072a3:	5e                   	pop    esi
c00072a4:	c3                   	ret    
c00072a5:	90                   	nop

c00072a6 <Computer::disableNMI()>:
c00072a6:	6a 00                	push   0x0
c00072a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072ac:	50                   	push   eax
c00072ad:	e8 08 ff ff ff       	call   c00071ba <Computer::enableNMI(bool)>
c00072b2:	5a                   	pop    edx
c00072b3:	59                   	pop    ecx
c00072b4:	c3                   	ret    
c00072b5:	90                   	nop

c00072b6 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b6:	53                   	push   ebx
c00072b7:	b2 80                	mov    dl,0x80
c00072b9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072cc:	74 02                	je     c00072d0 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ce:	31 d2                	xor    edx,edx
c00072d0:	09 d0                	or     eax,edx
c00072d2:	e6 70                	out    0x70,al
c00072d4:	88 c8                	mov    al,cl
c00072d6:	e6 71                	out    0x71,al
c00072d8:	5b                   	pop    ebx
c00072d9:	c3                   	ret    

c00072da <Computer::handleNMI()>:
c00072da:	56                   	push   esi
c00072db:	53                   	push   ebx
c00072dc:	83 ec 10             	sub    esp,0x10
c00072df:	e4 92                	in     al,0x92
c00072e1:	89 c6                	mov    esi,eax
c00072e3:	e4 61                	in     al,0x61
c00072e5:	68 a5 0c 02 c0       	push   0xc0020ca5
c00072ea:	88 c3                	mov    bl,al
c00072ec:	e8 1d 36 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00072f1:	83 c4 10             	add    esp,0x10
c00072f4:	83 e6 10             	and    esi,0x10
c00072f7:	75 10                	jne    c0007309 <Computer::handleNMI()+0x2f>
c00072f9:	f6 c3 40             	test   bl,0x40
c00072fc:	75 20                	jne    c000731e <Computer::handleNMI()+0x44>
c00072fe:	80 e3 80             	and    bl,0x80
c0007301:	75 30                	jne    c0007333 <Computer::handleNMI()+0x59>
c0007303:	83 c4 04             	add    esp,0x4
c0007306:	5b                   	pop    ebx
c0007307:	5e                   	pop    esi
c0007308:	c3                   	ret    
c0007309:	83 ec 0c             	sub    esp,0xc
c000730c:	68 b6 0c 02 c0       	push   0xc0020cb6
c0007311:	e8 f1 a2 00 00       	call   c0011607 <KePanic(char const*)>
c0007316:	83 c4 10             	add    esp,0x10
c0007319:	f6 c3 40             	test   bl,0x40
c000731c:	74 e0                	je     c00072fe <Computer::handleNMI()+0x24>
c000731e:	83 ec 0c             	sub    esp,0xc
c0007321:	68 c3 0c 02 c0       	push   0xc0020cc3
c0007326:	e8 dc a2 00 00       	call   c0011607 <KePanic(char const*)>
c000732b:	83 c4 10             	add    esp,0x10
c000732e:	80 e3 80             	and    bl,0x80
c0007331:	74 d0                	je     c0007303 <Computer::handleNMI()+0x29>
c0007333:	c7 44 24 10 cd 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ccd
c000733b:	83 c4 04             	add    esp,0x4
c000733e:	5b                   	pop    ebx
c000733f:	5e                   	pop    esi
c0007340:	e9 c2 a2 00 00       	jmp    c0011607 <KePanic(char const*)>
c0007345:	90                   	nop

c0007346 <GDTEntry::setBase(unsigned int)>:
c0007346:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000734a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734e:	89 c1                	mov    ecx,eax
c0007350:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007354:	c1 e9 10             	shr    ecx,0x10
c0007357:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000735a:	c1 e8 18             	shr    eax,0x18
c000735d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007360:	c3                   	ret    
c0007361:	90                   	nop

c0007362 <GDTEntry::setLimit(unsigned int)>:
c0007362:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007366:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000736a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000736d:	66 89 01             	mov    WORD PTR [ecx],ax
c0007370:	c1 e8 10             	shr    eax,0x10
c0007373:	83 e0 0f             	and    eax,0xf
c0007376:	83 e2 f0             	and    edx,0xfffffff0
c0007379:	09 d0                	or     eax,edx
c000737b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737e:	c3                   	ret    
c000737f:	90                   	nop

c0007380 <GDT::GDT()>:
c0007380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007384:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000738a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007394:	90                   	nop
c0007395:	c3                   	ret    

c0007396 <GDT::addEntry(GDTEntry)>:
c0007396:	53                   	push   ebx
c0007397:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000739b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00073a3:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a5:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a9:	8d 48 01             	lea    ecx,[eax+0x1]
c00073ac:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073b0:	c1 e0 03             	shl    eax,0x3
c00073b3:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b5:	5b                   	pop    ebx
c00073b6:	c3                   	ret    
c00073b7:	90                   	nop

c00073b8 <GDT::getNumberOfEntries()>:
c00073b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00073be:	c3                   	ret    
c00073bf:	90                   	nop

c00073c0 <GDT::flush()>:
c00073c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c6:	83 c0 04             	add    eax,0x4
c00073c9:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073ce:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d5:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073dc:	e9 79 8f ff ff       	jmp    c000035a <loadGDT>
c00073e1:	90                   	nop

c00073e2 <GDT::setup()>:
c00073e2:	57                   	push   edi
c00073e3:	56                   	push   esi
c00073e4:	53                   	push   ebx
c00073e5:	83 ec 30             	sub    esp,0x30
c00073e8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073ec:	6a 00                	push   0x0
c00073ee:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073f2:	56                   	push   esi
c00073f3:	e8 4e ff ff ff       	call   c0007346 <GDTEntry::setBase(unsigned int)>
c00073f8:	6a 00                	push   0x0
c00073fa:	56                   	push   esi
c00073fb:	e8 62 ff ff ff       	call   c0007362 <GDTEntry::setLimit(unsigned int)>
c0007400:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007408:	6a 00                	push   0x0
c000740a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740e:	56                   	push   esi
c000740f:	e8 32 ff ff ff       	call   c0007346 <GDTEntry::setBase(unsigned int)>
c0007414:	68 ff ff ff 00       	push   0xffffff
c0007419:	56                   	push   esi
c000741a:	e8 43 ff ff ff       	call   c0007362 <GDTEntry::setLimit(unsigned int)>
c000741f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007423:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007427:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000742c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007430:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007435:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007439:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000743d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007441:	89 f8                	mov    eax,edi
c0007443:	89 fa                	mov    edx,edi
c0007445:	80 e4 f7             	and    ah,0xf7
c0007448:	80 ce 60             	or     dh,0x60
c000744b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744f:	89 c7                	mov    edi,eax
c0007451:	80 cc 60             	or     ah,0x60
c0007454:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007458:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000745c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007460:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007464:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007468:	83 c4 20             	add    esp,0x20
c000746b:	6a 00                	push   0x0
c000746d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007471:	50                   	push   eax
c0007472:	e8 cf fe ff ff       	call   c0007346 <GDTEntry::setBase(unsigned int)>
c0007477:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000747b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007483:	83 e0 3f             	and    eax,0x3f
c0007486:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000748a:	6a 00                	push   0x0
c000748c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007490:	50                   	push   eax
c0007491:	e8 b0 fe ff ff       	call   c0007346 <GDTEntry::setBase(unsigned int)>
c0007496:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000749a:	83 e0 3f             	and    eax,0x3f
c000749d:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c00074a1:	83 c4 0c             	add    esp,0xc
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ac:	53                   	push   ebx
c00074ad:	e8 e4 fe ff ff       	call   c0007396 <GDT::addEntry(GDTEntry)>
c00074b2:	83 c4 0c             	add    esp,0xc
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074bd:	53                   	push   ebx
c00074be:	e8 d3 fe ff ff       	call   c0007396 <GDT::addEntry(GDTEntry)>
c00074c3:	83 c4 0c             	add    esp,0xc
c00074c6:	57                   	push   edi
c00074c7:	56                   	push   esi
c00074c8:	53                   	push   ebx
c00074c9:	e8 c8 fe ff ff       	call   c0007396 <GDT::addEntry(GDTEntry)>
c00074ce:	83 c4 0c             	add    esp,0xc
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d9:	53                   	push   ebx
c00074da:	e8 b7 fe ff ff       	call   c0007396 <GDT::addEntry(GDTEntry)>
c00074df:	83 c4 0c             	add    esp,0xc
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074ea:	53                   	push   ebx
c00074eb:	e8 a6 fe ff ff       	call   c0007396 <GDT::addEntry(GDTEntry)>
c00074f0:	83 c4 0c             	add    esp,0xc
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074fb:	53                   	push   ebx
c00074fc:	e8 95 fe ff ff       	call   c0007396 <GDT::addEntry(GDTEntry)>
c0007501:	83 c4 0c             	add    esp,0xc
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000750c:	53                   	push   ebx
c000750d:	e8 84 fe ff ff       	call   c0007396 <GDT::addEntry(GDTEntry)>
c0007512:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007515:	e8 a6 fe ff ff       	call   c00073c0 <GDT::flush()>
c000751a:	83 c4 40             	add    esp,0x40
c000751d:	5b                   	pop    ebx
c000751e:	5e                   	pop    esi
c000751f:	5f                   	pop    edi
c0007520:	c3                   	ret    

c0007521 <idleFunction(void*)>:
c0007521:	83 ec 0c             	sub    esp,0xc
c0007524:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007529:	48                   	dec    eax
c000752a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000752f:	75 01                	jne    c0007532 <idleFunction(void*)+0x11>
c0007531:	fb                   	sti    
c0007532:	e8 ab 07 01 00       	call   c0017ce2 <HalSystemIdle()>
c0007537:	e8 36 85 01 00       	call   c001fa72 <idleCommon()>
c000753c:	eb f4                	jmp    c0007532 <idleFunction(void*)+0x11>
c000753e:	66 90                	xchg   ax,ax

c0007540 <IDTEntry::IDTEntry(bool)>:
c0007540:	53                   	push   ebx
c0007541:	83 ec 04             	sub    esp,0x4
c0007544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007548:	88 04 24             	mov    BYTE PTR [esp],al
c000754b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007555:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007559:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000755d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007561:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007564:	83 e2 f0             	and    edx,0xfffffff0
c0007567:	83 ca 0e             	or     edx,0xe
c000756a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000756d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007571:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007574:	83 e2 ef             	and    edx,0xffffffef
c0007577:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000757a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757e:	85 c0                	test   eax,eax
c0007580:	74 06                	je     c0007588 <IDTEntry::IDTEntry(bool)+0x48>
c0007582:	b2 03                	mov    dl,0x3
c0007584:	eb 06                	jmp    c000758c <IDTEntry::IDTEntry(bool)+0x4c>
c0007586:	66 90                	xchg   ax,ax
c0007588:	b2 00                	mov    dl,0x0
c000758a:	66 90                	xchg   ax,ax
c000758c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007590:	83 e2 03             	and    edx,0x3
c0007593:	89 d3                	mov    ebx,edx
c0007595:	c1 e3 05             	shl    ebx,0x5
c0007598:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000759b:	83 e2 9f             	and    edx,0xffffff9f
c000759e:	88 d1                	mov    cl,dl
c00075a0:	88 da                	mov    dl,bl
c00075a2:	09 ca                	or     edx,ecx
c00075a4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075ab:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075ae:	83 ca 80             	or     edx,0xffffff80
c00075b1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b4:	90                   	nop
c00075b5:	83 c4 04             	add    esp,0x4
c00075b8:	5b                   	pop    ebx
c00075b9:	c3                   	ret    

c00075ba <IDTEntry::setOffset(unsigned int)>:
c00075ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075c2:	66 89 02             	mov    WORD PTR [edx],ax
c00075c5:	c1 e8 10             	shr    eax,0x10
c00075c8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075cc:	c3                   	ret    
c00075cd:	90                   	nop
c00075ce:	66 90                	xchg   ax,ax

c00075d0 <IDT::IDT()>:
c00075d0:	90                   	nop
c00075d1:	c3                   	ret    

c00075d2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d6:	83 c0 30             	add    eax,0x30
c00075d9:	c3                   	ret    

c00075da <IDT::addEntry(IDTEntry, int)>:
c00075da:	53                   	push   ebx
c00075db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075eb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ee:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075f2:	5b                   	pop    ebx
c00075f3:	c3                   	ret    

c00075f4 <IDT::addEntry(int, void (*)(), bool)>:
c00075f4:	53                   	push   ebx
c00075f5:	83 ec 10             	sub    esp,0x10
c00075f8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075fd:	50                   	push   eax
c00075fe:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007602:	53                   	push   ebx
c0007603:	e8 38 ff ff ff       	call   c0007540 <IDTEntry::IDTEntry(bool)>
c0007608:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000760c:	53                   	push   ebx
c000760d:	e8 a8 ff ff ff       	call   c00075ba <IDTEntry::setOffset(unsigned int)>
c0007612:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007622:	e8 b3 ff ff ff       	call   c00075da <IDT::addEntry(IDTEntry, int)>
c0007627:	83 c4 30             	add    esp,0x30
c000762a:	5b                   	pop    ebx
c000762b:	c3                   	ret    

c000762c <IDT::flush()>:
c000762c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007635:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007639:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000763e:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007645:	c3                   	ret    

c0007646 <IDT::setup()>:
c0007646:	57                   	push   edi
c0007647:	56                   	push   esi
c0007648:	53                   	push   ebx
c0007649:	83 ec 10             	sub    esp,0x10
c000764c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007650:	6a 00                	push   0x0
c0007652:	68 70 f1 01 c0       	push   0xc001f170
c0007657:	6a 00                	push   0x0
c0007659:	53                   	push   ebx
c000765a:	e8 95 ff ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c000765f:	6a 00                	push   0x0
c0007661:	68 80 f1 01 c0       	push   0xc001f180
c0007666:	6a 01                	push   0x1
c0007668:	53                   	push   ebx
c0007669:	e8 86 ff ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c000766e:	83 c4 20             	add    esp,0x20
c0007671:	6a 00                	push   0x0
c0007673:	68 8a f1 01 c0       	push   0xc001f18a
c0007678:	6a 02                	push   0x2
c000767a:	53                   	push   ebx
c000767b:	e8 74 ff ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007680:	6a 00                	push   0x0
c0007682:	68 94 f1 01 c0       	push   0xc001f194
c0007687:	6a 03                	push   0x3
c0007689:	53                   	push   ebx
c000768a:	e8 65 ff ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c000768f:	83 c4 20             	add    esp,0x20
c0007692:	6a 00                	push   0x0
c0007694:	68 9e f1 01 c0       	push   0xc001f19e
c0007699:	6a 04                	push   0x4
c000769b:	53                   	push   ebx
c000769c:	e8 53 ff ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00076a1:	6a 00                	push   0x0
c00076a3:	68 a8 f1 01 c0       	push   0xc001f1a8
c00076a8:	6a 05                	push   0x5
c00076aa:	53                   	push   ebx
c00076ab:	e8 44 ff ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00076b0:	83 c4 20             	add    esp,0x20
c00076b3:	6a 00                	push   0x0
c00076b5:	68 b2 f1 01 c0       	push   0xc001f1b2
c00076ba:	6a 06                	push   0x6
c00076bc:	53                   	push   ebx
c00076bd:	e8 32 ff ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00076c2:	6a 00                	push   0x0
c00076c4:	68 bc f1 01 c0       	push   0xc001f1bc
c00076c9:	6a 07                	push   0x7
c00076cb:	53                   	push   ebx
c00076cc:	e8 23 ff ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00076d1:	83 c4 20             	add    esp,0x20
c00076d4:	6a 00                	push   0x0
c00076d6:	68 c6 f1 01 c0       	push   0xc001f1c6
c00076db:	6a 08                	push   0x8
c00076dd:	53                   	push   ebx
c00076de:	e8 11 ff ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00076e3:	6a 00                	push   0x0
c00076e5:	68 ce f1 01 c0       	push   0xc001f1ce
c00076ea:	6a 09                	push   0x9
c00076ec:	53                   	push   ebx
c00076ed:	e8 02 ff ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00076f2:	83 c4 20             	add    esp,0x20
c00076f5:	6a 00                	push   0x0
c00076f7:	68 d8 f1 01 c0       	push   0xc001f1d8
c00076fc:	6a 0a                	push   0xa
c00076fe:	53                   	push   ebx
c00076ff:	e8 f0 fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007704:	6a 00                	push   0x0
c0007706:	68 e0 f1 01 c0       	push   0xc001f1e0
c000770b:	6a 0b                	push   0xb
c000770d:	53                   	push   ebx
c000770e:	e8 e1 fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007713:	83 c4 20             	add    esp,0x20
c0007716:	6a 00                	push   0x0
c0007718:	68 e8 f1 01 c0       	push   0xc001f1e8
c000771d:	6a 0c                	push   0xc
c000771f:	53                   	push   ebx
c0007720:	e8 cf fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007725:	6a 00                	push   0x0
c0007727:	68 f0 f1 01 c0       	push   0xc001f1f0
c000772c:	6a 0d                	push   0xd
c000772e:	53                   	push   ebx
c000772f:	e8 c0 fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007734:	83 c4 20             	add    esp,0x20
c0007737:	6a 00                	push   0x0
c0007739:	68 0a f2 01 c0       	push   0xc001f20a
c000773e:	6a 0e                	push   0xe
c0007740:	53                   	push   ebx
c0007741:	e8 ae fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007746:	6a 00                	push   0x0
c0007748:	68 12 f2 01 c0       	push   0xc001f212
c000774d:	6a 0f                	push   0xf
c000774f:	53                   	push   ebx
c0007750:	e8 9f fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007755:	83 c4 20             	add    esp,0x20
c0007758:	6a 00                	push   0x0
c000775a:	68 1c f2 01 c0       	push   0xc001f21c
c000775f:	6a 10                	push   0x10
c0007761:	53                   	push   ebx
c0007762:	e8 8d fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007767:	6a 00                	push   0x0
c0007769:	68 26 f2 01 c0       	push   0xc001f226
c000776e:	6a 11                	push   0x11
c0007770:	53                   	push   ebx
c0007771:	e8 7e fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007776:	83 c4 20             	add    esp,0x20
c0007779:	6a 00                	push   0x0
c000777b:	68 30 f2 01 c0       	push   0xc001f230
c0007780:	6a 12                	push   0x12
c0007782:	53                   	push   ebx
c0007783:	e8 6c fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007788:	6a 01                	push   0x1
c000778a:	68 ca f2 01 c0       	push   0xc001f2ca
c000778f:	6a 60                	push   0x60
c0007791:	53                   	push   ebx
c0007792:	e8 5d fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007797:	83 c4 20             	add    esp,0x20
c000779a:	6a 00                	push   0x0
c000779c:	68 d1 f2 01 c0       	push   0xc001f2d1
c00077a1:	6a 20                	push   0x20
c00077a3:	53                   	push   ebx
c00077a4:	e8 4b fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00077a9:	6a 00                	push   0x0
c00077ab:	68 bc f2 01 c0       	push   0xc001f2bc
c00077b0:	6a 21                	push   0x21
c00077b2:	53                   	push   ebx
c00077b3:	e8 3c fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00077b8:	83 c4 20             	add    esp,0x20
c00077bb:	6a 00                	push   0x0
c00077bd:	68 c3 f2 01 c0       	push   0xc001f2c3
c00077c2:	6a 22                	push   0x22
c00077c4:	53                   	push   ebx
c00077c5:	e8 2a fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00077ca:	6a 00                	push   0x0
c00077cc:	68 3a f2 01 c0       	push   0xc001f23a
c00077d1:	6a 23                	push   0x23
c00077d3:	53                   	push   ebx
c00077d4:	e8 1b fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00077d9:	83 c4 20             	add    esp,0x20
c00077dc:	6a 00                	push   0x0
c00077de:	68 44 f2 01 c0       	push   0xc001f244
c00077e3:	6a 24                	push   0x24
c00077e5:	53                   	push   ebx
c00077e6:	e8 09 fe ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00077eb:	6a 00                	push   0x0
c00077ed:	68 4e f2 01 c0       	push   0xc001f24e
c00077f2:	6a 25                	push   0x25
c00077f4:	53                   	push   ebx
c00077f5:	e8 fa fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00077fa:	83 c4 20             	add    esp,0x20
c00077fd:	6a 00                	push   0x0
c00077ff:	68 58 f2 01 c0       	push   0xc001f258
c0007804:	6a 26                	push   0x26
c0007806:	53                   	push   ebx
c0007807:	e8 e8 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c000780c:	6a 00                	push   0x0
c000780e:	68 62 f2 01 c0       	push   0xc001f262
c0007813:	6a 27                	push   0x27
c0007815:	53                   	push   ebx
c0007816:	e8 d9 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c000781b:	83 c4 20             	add    esp,0x20
c000781e:	6a 00                	push   0x0
c0007820:	68 6c f2 01 c0       	push   0xc001f26c
c0007825:	6a 28                	push   0x28
c0007827:	53                   	push   ebx
c0007828:	e8 c7 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c000782d:	6a 00                	push   0x0
c000782f:	68 76 f2 01 c0       	push   0xc001f276
c0007834:	6a 29                	push   0x29
c0007836:	53                   	push   ebx
c0007837:	e8 b8 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c000783c:	83 c4 20             	add    esp,0x20
c000783f:	6a 00                	push   0x0
c0007841:	68 80 f2 01 c0       	push   0xc001f280
c0007846:	6a 2a                	push   0x2a
c0007848:	53                   	push   ebx
c0007849:	e8 a6 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c000784e:	6a 00                	push   0x0
c0007850:	68 8a f2 01 c0       	push   0xc001f28a
c0007855:	6a 2b                	push   0x2b
c0007857:	53                   	push   ebx
c0007858:	e8 97 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c000785d:	83 c4 20             	add    esp,0x20
c0007860:	6a 00                	push   0x0
c0007862:	68 94 f2 01 c0       	push   0xc001f294
c0007867:	6a 2c                	push   0x2c
c0007869:	53                   	push   ebx
c000786a:	e8 85 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c000786f:	6a 00                	push   0x0
c0007871:	68 9e f2 01 c0       	push   0xc001f29e
c0007876:	6a 2d                	push   0x2d
c0007878:	53                   	push   ebx
c0007879:	e8 76 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c000787e:	83 c4 20             	add    esp,0x20
c0007881:	6a 00                	push   0x0
c0007883:	68 a8 f2 01 c0       	push   0xc001f2a8
c0007888:	6a 2e                	push   0x2e
c000788a:	53                   	push   ebx
c000788b:	e8 64 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007890:	6a 00                	push   0x0
c0007892:	68 b2 f2 01 c0       	push   0xc001f2b2
c0007897:	6a 2f                	push   0x2f
c0007899:	53                   	push   ebx
c000789a:	e8 55 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c000789f:	83 c4 20             	add    esp,0x20
c00078a2:	6a 00                	push   0x0
c00078a4:	68 0c f4 01 c0       	push   0xc001f40c
c00078a9:	6a 30                	push   0x30
c00078ab:	53                   	push   ebx
c00078ac:	e8 43 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00078b1:	6a 00                	push   0x0
c00078b3:	68 16 f4 01 c0       	push   0xc001f416
c00078b8:	6a 31                	push   0x31
c00078ba:	53                   	push   ebx
c00078bb:	e8 34 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00078c0:	83 c4 20             	add    esp,0x20
c00078c3:	6a 00                	push   0x0
c00078c5:	68 20 f4 01 c0       	push   0xc001f420
c00078ca:	6a 32                	push   0x32
c00078cc:	53                   	push   ebx
c00078cd:	e8 22 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00078d2:	6a 00                	push   0x0
c00078d4:	68 2a f4 01 c0       	push   0xc001f42a
c00078d9:	6a 33                	push   0x33
c00078db:	53                   	push   ebx
c00078dc:	e8 13 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00078e1:	83 c4 20             	add    esp,0x20
c00078e4:	6a 00                	push   0x0
c00078e6:	68 34 f4 01 c0       	push   0xc001f434
c00078eb:	6a 34                	push   0x34
c00078ed:	53                   	push   ebx
c00078ee:	e8 01 fd ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c00078f3:	6a 00                	push   0x0
c00078f5:	68 3e f4 01 c0       	push   0xc001f43e
c00078fa:	6a 35                	push   0x35
c00078fc:	53                   	push   ebx
c00078fd:	e8 f2 fc ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007902:	83 c4 20             	add    esp,0x20
c0007905:	6a 00                	push   0x0
c0007907:	68 48 f4 01 c0       	push   0xc001f448
c000790c:	6a 36                	push   0x36
c000790e:	53                   	push   ebx
c000790f:	e8 e0 fc ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007914:	6a 00                	push   0x0
c0007916:	68 52 f4 01 c0       	push   0xc001f452
c000791b:	6a 37                	push   0x37
c000791d:	53                   	push   ebx
c000791e:	e8 d1 fc ff ff       	call   c00075f4 <IDT::addEntry(int, void (*)(), bool)>
c0007923:	83 c4 1c             	add    esp,0x1c
c0007926:	6a 03                	push   0x3
c0007928:	6a 02                	push   0x2
c000792a:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007930:	e8 d5 24 00 00       	call   c0009e0a <VAS::allocatePages(int, int)>
c0007935:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000793c:	89 c6                	mov    esi,eax
c000793e:	e8 94 01 00 00       	call   c0007ad7 <malloc>
c0007943:	81 c6 00 20 00 00    	add    esi,0x2000
c0007949:	89 04 24             	mov    DWORD PTR [esp],eax
c000794c:	89 c7                	mov    edi,eax
c000794e:	e8 dd 15 00 00       	call   c0008f30 <TSS::TSS()>
c0007953:	83 c4 0c             	add    esp,0xc
c0007956:	68 c6 f1 01 c0       	push   0xc001f1c6
c000795b:	56                   	push   esi
c000795c:	57                   	push   edi
c000795d:	e8 12 16 00 00       	call   c0008f74 <TSS::setup(unsigned long, unsigned long)>
c0007962:	89 c6                	mov    esi,eax
c0007964:	58                   	pop    eax
c0007965:	5a                   	pop    edx
c0007966:	6a 00                	push   0x0
c0007968:	8d 44 24 14          	lea    eax,[esp+0x14]
c000796c:	50                   	push   eax
c000796d:	e8 ce fb ff ff       	call   c0007540 <IDTEntry::IDTEntry(bool)>
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000797b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007982:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007986:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000798c:	80 ce 05             	or     dh,0x5
c000798f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007993:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007996:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000799a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000799d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00079a0:	e8 87 fc ff ff       	call   c000762c <IDT::flush()>
c00079a5:	83 c4 20             	add    esp,0x20
c00079a8:	5b                   	pop    ebx
c00079a9:	5e                   	pop    esi
c00079aa:	5f                   	pop    edi
c00079ab:	c3                   	ret    

c00079ac <sbrk>:
c00079ac:	55                   	push   ebp
c00079ad:	57                   	push   edi
c00079ae:	56                   	push   esi
c00079af:	53                   	push   ebx
c00079b0:	83 ec 1c             	sub    esp,0x1c
c00079b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b7:	85 c0                	test   eax,eax
c00079b9:	74 66                	je     c0007a21 <sbrk+0x75>
c00079bb:	78 6b                	js     c0007a28 <sbrk+0x7c>
c00079bd:	8b 15 88 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023788
c00079c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c7:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079cd:	05 ff 0f 00 00       	add    eax,0xfff
c00079d2:	0f 49 e8             	cmovns ebp,eax
c00079d5:	c1 fd 0c             	sar    ebp,0xc
c00079d8:	bb 00 00 00 00       	mov    ebx,0x0
c00079dd:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079e3:	8b 3d 88 37 02 c0    	mov    edi,DWORD PTR ds:0xc0023788
c00079e9:	e8 f8 03 00 00       	call   c0007de6 <Phys::allocatePage()>
c00079ee:	68 01 04 00 00       	push   0x401
c00079f3:	57                   	push   edi
c00079f4:	50                   	push   eax
c00079f5:	56                   	push   esi
c00079f6:	e8 07 23 00 00       	call   c0009d02 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079fb:	81 05 88 37 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023788,0x1000
c0007a05:	83 c3 01             	add    ebx,0x1
c0007a08:	83 c4 10             	add    esp,0x10
c0007a0b:	39 dd                	cmp    ebp,ebx
c0007a0d:	75 ce                	jne    c00079dd <sbrk+0x31>
c0007a0f:	0f 20 d8             	mov    eax,cr3
c0007a12:	0f 22 d8             	mov    cr3,eax
c0007a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a19:	83 c4 1c             	add    esp,0x1c
c0007a1c:	5b                   	pop    ebx
c0007a1d:	5e                   	pop    esi
c0007a1e:	5f                   	pop    edi
c0007a1f:	5d                   	pop    ebp
c0007a20:	c3                   	ret    
c0007a21:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0007a26:	eb f1                	jmp    c0007a19 <sbrk+0x6d>
c0007a28:	83 ec 08             	sub    esp,0x8
c0007a2b:	50                   	push   eax
c0007a2c:	68 70 0d 02 c0       	push   0xc0020d70
c0007a31:	e8 d8 2e 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0007a36:	83 c4 10             	add    esp,0x10
c0007a39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3e:	eb d9                	jmp    c0007a19 <sbrk+0x6d>

c0007a40 <mmap>:
c0007a40:	83 ec 18             	sub    esp,0x18
c0007a43:	68 a0 0d 02 c0       	push   0xc0020da0
c0007a48:	e8 ba 9b 00 00       	call   c0011607 <KePanic(char const*)>
c0007a4d:	b8 00 00 00 00       	mov    eax,0x0
c0007a52:	83 c4 1c             	add    esp,0x1c
c0007a55:	c3                   	ret    

c0007a56 <munmap>:
c0007a56:	83 ec 18             	sub    esp,0x18
c0007a59:	68 a5 0d 02 c0       	push   0xc0020da5
c0007a5e:	e8 a4 9b 00 00       	call   c0011607 <KePanic(char const*)>
c0007a63:	b8 00 00 00 00       	mov    eax,0x0
c0007a68:	83 c4 1c             	add    esp,0x1c
c0007a6b:	c3                   	ret    

c0007a6c <liballoc_lock()>:
c0007a6c:	fa                   	cli    
c0007a6d:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a74:	b8 00 00 00 00       	mov    eax,0x0
c0007a79:	c3                   	ret    

c0007a7a <liballoc_unlock()>:
c0007a7a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a7f:	83 e8 01             	sub    eax,0x1
c0007a82:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a87:	75 01                	jne    c0007a8a <liballoc_unlock()+0x10>
c0007a89:	fb                   	sti    
c0007a8a:	b8 00 00 00 00       	mov    eax,0x0
c0007a8f:	c3                   	ret    

c0007a90 <liballoc_alloc(int)>:
c0007a90:	83 ec 10             	sub    esp,0x10
c0007a93:	6a 01                	push   0x1
c0007a95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a99:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a9f:	e8 66 23 00 00       	call   c0009e0a <VAS::allocatePages(int, int)>
c0007aa4:	83 c4 1c             	add    esp,0x1c
c0007aa7:	c3                   	ret    

c0007aa8 <liballoc_free(void*, int)>:
c0007aa8:	83 ec 14             	sub    esp,0x14
c0007aab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aaf:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ab5:	e8 90 1f 00 00       	call   c0009a4a <VAS::freeAllocatedPages(unsigned long)>
c0007aba:	b8 00 00 00 00       	mov    eax,0x0
c0007abf:	83 c4 1c             	add    esp,0x1c
c0007ac2:	c3                   	ret    

c0007ac3 <realloc>:
c0007ac3:	83 ec 14             	sub    esp,0x14
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ace:	e8 4e 9b ff ff       	call   c0001621 <dlrealloc>
c0007ad3:	83 c4 1c             	add    esp,0x1c
c0007ad6:	c3                   	ret    

c0007ad7 <malloc>:
c0007ad7:	83 ec 18             	sub    esp,0x18
c0007ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ade:	e8 01 96 ff ff       	call   c00010e4 <dlmalloc>
c0007ae3:	83 c4 1c             	add    esp,0x1c
c0007ae6:	c3                   	ret    

c0007ae7 <free>:
c0007ae7:	83 ec 18             	sub    esp,0x18
c0007aea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aee:	e8 93 92 ff ff       	call   c0000d86 <dlfree>
c0007af3:	83 c4 1c             	add    esp,0x1c
c0007af6:	c3                   	ret    

c0007af7 <rfree>:
c0007af7:	83 ec 18             	sub    esp,0x18
c0007afa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afe:	e8 83 92 ff ff       	call   c0000d86 <dlfree>
c0007b03:	83 c4 1c             	add    esp,0x1c
c0007b06:	c3                   	ret    

c0007b07 <calloc>:
c0007b07:	56                   	push   esi
c0007b08:	53                   	push   ebx
c0007b09:	83 ec 10             	sub    esp,0x10
c0007b0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b10:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b15:	53                   	push   ebx
c0007b16:	e8 bc ff ff ff       	call   c0007ad7 <malloc>
c0007b1b:	89 c6                	mov    esi,eax
c0007b1d:	83 c4 0c             	add    esp,0xc
c0007b20:	53                   	push   ebx
c0007b21:	6a 00                	push   0x0
c0007b23:	50                   	push   eax
c0007b24:	e8 c7 89 ff ff       	call   c00004f0 <memset>
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	83 c4 14             	add    esp,0x14
c0007b2e:	5b                   	pop    ebx
c0007b2f:	5e                   	pop    esi
c0007b30:	c3                   	ret    

c0007b31 <KeEntryPoint>:
c0007b31:	57                   	push   edi
c0007b32:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b37:	56                   	push   esi
c0007b38:	31 f6                	xor    esi,esi
c0007b3a:	53                   	push   ebx
c0007b3b:	89 fa                	mov    edx,edi
c0007b3d:	83 ec 2c             	sub    esp,0x2c
c0007b40:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b45:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b4a:	89 f0                	mov    eax,esi
c0007b4c:	ee                   	out    dx,al
c0007b4d:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b52:	b0 80                	mov    al,0x80
c0007b54:	89 da                	mov    edx,ebx
c0007b56:	ee                   	out    dx,al
c0007b57:	b1 03                	mov    cl,0x3
c0007b59:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5e:	88 c8                	mov    al,cl
c0007b60:	ee                   	out    dx,al
c0007b61:	89 f0                	mov    eax,esi
c0007b63:	89 fa                	mov    edx,edi
c0007b65:	ee                   	out    dx,al
c0007b66:	88 c8                	mov    al,cl
c0007b68:	89 da                	mov    edx,ebx
c0007b6a:	ee                   	out    dx,al
c0007b6b:	b0 c7                	mov    al,0xc7
c0007b6d:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b72:	ee                   	out    dx,al
c0007b73:	b0 0b                	mov    al,0xb
c0007b75:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b7a:	ee                   	out    dx,al
c0007b7b:	68 ac 0d 02 c0       	push   0xc0020dac
c0007b80:	e8 89 2d 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0007b85:	e8 03 93 00 00       	call   c0010e8d <KeDisplaySplashScreen()>
c0007b8a:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8f:	05 ff 0f 00 00       	add    eax,0xfff
c0007b94:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b99:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b9c:	e8 b3 03 00 00       	call   c0007f54 <Phys::physicalMemorySetup(unsigned int)>
c0007ba1:	e8 27 1c 00 00       	call   c00097cd <Virt::virtualMemorySetup()>
c0007ba6:	e8 2c 92 00 00       	call   c0010dd7 <KeInitialiseAtexit()>
c0007bab:	58                   	pop    eax
c0007bac:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bb0:	53                   	push   ebx
c0007bb1:	e8 14 1f 00 00       	call   c0009aca <VAS::VAS()>
c0007bb6:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bbc:	e8 49 7e 01 00       	call   c001fa0a <_init>
c0007bc1:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc8:	e8 0a ff ff ff       	call   c0007ad7 <malloc>
c0007bcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bd0:	89 c6                	mov    esi,eax
c0007bd2:	e8 35 f2 ff ff       	call   c0006e0c <Computer::Computer()>
c0007bd7:	53                   	push   ebx
c0007bd8:	6a 00                	push   0x0
c0007bda:	6a 00                	push   0x0
c0007bdc:	56                   	push   esi
c0007bdd:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007be3:	e8 ea f5 ff ff       	call   c00071d2 <Computer::open(int, int, void*)>
c0007be8:	83 c4 14             	add    esp,0x14
c0007beb:	53                   	push   ebx
c0007bec:	e8 a3 1f 00 00       	call   c0009b94 <VAS::~VAS()>
c0007bf1:	83 c4 30             	add    esp,0x30
c0007bf4:	5b                   	pop    ebx
c0007bf5:	5e                   	pop    esi
c0007bf6:	5f                   	pop    edi
c0007bf7:	c3                   	ret    

c0007bf8 <Phys::allocateDMA(unsigned long)>:
c0007bf8:	55                   	push   ebp
c0007bf9:	31 ed                	xor    ebp,ebp
c0007bfb:	57                   	push   edi
c0007bfc:	56                   	push   esi
c0007bfd:	31 f6                	xor    esi,esi
c0007bff:	53                   	push   ebx
c0007c00:	31 db                	xor    ebx,ebx
c0007c02:	83 ec 1c             	sub    esp,0x1c
c0007c05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c09:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0e:	c1 e8 0c             	shr    eax,0xc
c0007c11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c15:	31 c0                	xor    eax,eax
c0007c17:	eb 1b                	jmp    c0007c34 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c19:	8d 78 01             	lea    edi,[eax+0x1]
c0007c1c:	85 c0                	test   eax,eax
c0007c1e:	0f 44 eb             	cmove  ebp,ebx
c0007c21:	0f 44 f3             	cmove  esi,ebx
c0007c24:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c28:	74 37                	je     c0007c61 <Phys::allocateDMA(unsigned long)+0x69>
c0007c2a:	89 f8                	mov    eax,edi
c0007c2c:	83 c3 01             	add    ebx,0x1
c0007c2f:	83 fb 0f             	cmp    ebx,0xf
c0007c32:	7f 13                	jg     c0007c47 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c34:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c3b:	74 dc                	je     c0007c19 <Phys::allocateDMA(unsigned long)+0x21>
c0007c3d:	31 c0                	xor    eax,eax
c0007c3f:	83 c3 01             	add    ebx,0x1
c0007c42:	83 fb 0f             	cmp    ebx,0xf
c0007c45:	7e ed                	jle    c0007c34 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c47:	83 ec 0c             	sub    esp,0xc
c0007c4a:	68 c4 0d 02 c0       	push   0xc0020dc4
c0007c4f:	e8 b3 99 00 00       	call   c0011607 <KePanic(char const*)>
c0007c54:	83 c4 10             	add    esp,0x10
c0007c57:	31 c0                	xor    eax,eax
c0007c59:	83 c4 1c             	add    esp,0x1c
c0007c5c:	5b                   	pop    ebx
c0007c5d:	5e                   	pop    esi
c0007c5e:	5f                   	pop    edi
c0007c5f:	5d                   	pop    ebp
c0007c60:	c3                   	ret    
c0007c61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c65:	89 f2                	mov    edx,esi
c0007c67:	c1 fa 04             	sar    edx,0x4
c0007c6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6e:	01 f1                	add    ecx,esi
c0007c70:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c73:	83 e9 01             	sub    ecx,0x1
c0007c76:	0f 48 ca             	cmovs  ecx,edx
c0007c79:	c1 f9 04             	sar    ecx,0x4
c0007c7c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c80:	74 06                	je     c0007c88 <Phys::allocateDMA(unsigned long)+0x90>
c0007c82:	89 eb                	mov    ebx,ebp
c0007c84:	31 c0                	xor    eax,eax
c0007c86:	eb b7                	jmp    c0007c3f <Phys::allocateDMA(unsigned long)+0x47>
c0007c88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c8c:	85 d2                	test   edx,edx
c0007c8e:	74 17                	je     c0007ca7 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c90:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007c96:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007c9d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007ca0:	83 c2 01             	add    edx,0x1
c0007ca3:	39 d0                	cmp    eax,edx
c0007ca5:	75 f6                	jne    c0007c9d <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca7:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb5:	01 c2                	add    edx,eax
c0007cb7:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007cbd:	85 c9                	test   ecx,ecx
c0007cbf:	74 17                	je     c0007cd8 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cc1:	83 ec 0c             	sub    esp,0xc
c0007cc4:	68 c4 0d 02 c0       	push   0xc0020dc4
c0007cc9:	e8 39 99 00 00       	call   c0011607 <KePanic(char const*)>
c0007cce:	83 c4 10             	add    esp,0x10
c0007cd1:	89 f8                	mov    eax,edi
c0007cd3:	e9 54 ff ff ff       	jmp    c0007c2c <Phys::allocateDMA(unsigned long)+0x34>
c0007cd8:	c1 e6 0c             	shl    esi,0xc
c0007cdb:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007ce1:	e9 73 ff ff ff       	jmp    c0007c59 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce6 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cea:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cf0:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cf5:	c1 ea 0c             	shr    edx,0xc
c0007cf8:	29 d0                	sub    eax,edx
c0007cfa:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d03:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d08:	c1 e8 0c             	shr    eax,0xc
c0007d0b:	85 d2                	test   edx,edx
c0007d0d:	74 11                	je     c0007d20 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0f:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d14:	01 c2                	add    edx,eax
c0007d16:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d19:	83 c0 01             	add    eax,0x1
c0007d1c:	39 d0                	cmp    eax,edx
c0007d1e:	75 f6                	jne    c0007d16 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d20:	c3                   	ret    

c0007d21 <Phys::setPageState(unsigned long, bool)>:
c0007d21:	57                   	push   edi
c0007d22:	56                   	push   esi
c0007d23:	8b 35 8c 37 02 c0    	mov    esi,DWORD PTR ds:0xc002378c
c0007d29:	53                   	push   ebx
c0007d2a:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d37:	89 ca                	mov    edx,ecx
c0007d39:	83 e1 07             	and    ecx,0x7
c0007d3c:	c1 ea 03             	shr    edx,0x3
c0007d3f:	0f b6 c0             	movzx  eax,al
c0007d42:	d3 c3                	rol    ebx,cl
c0007d44:	01 d6                	add    esi,edx
c0007d46:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d49:	d3 e0                	shl    eax,cl
c0007d4b:	21 fb                	and    ebx,edi
c0007d4d:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4f:	8b 1d 8c 37 02 c0    	mov    ebx,DWORD PTR ds:0xc002378c
c0007d55:	01 da                	add    edx,ebx
c0007d57:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d59:	09 c8                	or     eax,ecx
c0007d5b:	88 02                	mov    BYTE PTR [edx],al
c0007d5d:	5b                   	pop    ebx
c0007d5e:	5e                   	pop    esi
c0007d5f:	5f                   	pop    edi
c0007d60:	c3                   	ret    

c0007d61 <Phys::getPageState(unsigned long)>:
c0007d61:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d65:	8b 15 8c 37 02 c0    	mov    edx,DWORD PTR ds:0xc002378c
c0007d6b:	89 c8                	mov    eax,ecx
c0007d6d:	83 e1 07             	and    ecx,0x7
c0007d70:	c1 e8 03             	shr    eax,0x3
c0007d73:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d77:	d3 f8                	sar    eax,cl
c0007d79:	83 e0 01             	and    eax,0x1
c0007d7c:	c3                   	ret    

c0007d7d <Phys::freePage(unsigned long)>:
c0007d7d:	53                   	push   ebx
c0007d7e:	83 ec 08             	sub    esp,0x8
c0007d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d85:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d8b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d91:	76 41                	jbe    c0007dd4 <Phys::freePage(unsigned long)+0x57>
c0007d93:	c1 e8 0c             	shr    eax,0xc
c0007d96:	50                   	push   eax
c0007d97:	89 c3                	mov    ebx,eax
c0007d99:	e8 c3 ff ff ff       	call   c0007d61 <Phys::getPageState(unsigned long)>
c0007d9e:	5a                   	pop    edx
c0007d9f:	84 c0                	test   al,al
c0007da1:	74 20                	je     c0007dc3 <Phys::freePage(unsigned long)+0x46>
c0007da3:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007da8:	83 ec 08             	sub    esp,0x8
c0007dab:	6a 00                	push   0x0
c0007dad:	53                   	push   ebx
c0007dae:	83 e8 01             	sub    eax,0x1
c0007db1:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007db6:	e8 66 ff ff ff       	call   c0007d21 <Phys::setPageState(unsigned long, bool)>
c0007dbb:	83 c4 10             	add    esp,0x10
c0007dbe:	83 c4 08             	add    esp,0x8
c0007dc1:	5b                   	pop    ebx
c0007dc2:	c3                   	ret    
c0007dc3:	c7 44 24 10 69 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e69
c0007dcb:	83 c4 08             	add    esp,0x8
c0007dce:	5b                   	pop    ebx
c0007dcf:	e9 33 98 00 00       	jmp    c0011607 <KePanic(char const*)>
c0007dd4:	68 00 10 00 00       	push   0x1000
c0007dd9:	50                   	push   eax
c0007dda:	e8 07 ff ff ff       	call   c0007ce6 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddf:	59                   	pop    ecx
c0007de0:	5b                   	pop    ebx
c0007de1:	83 c4 08             	add    esp,0x8
c0007de4:	5b                   	pop    ebx
c0007de5:	c3                   	ret    

c0007de6 <Phys::allocatePage()>:
c0007de6:	56                   	push   esi
c0007de7:	53                   	push   ebx
c0007de8:	83 ec 14             	sub    esp,0x14
c0007deb:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007df1:	89 f3                	mov    ebx,esi
c0007df3:	eb 0a                	jmp    c0007dff <Phys::allocatePage()+0x19>
c0007df5:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007dfb:	39 de                	cmp    esi,ebx
c0007dfd:	74 26                	je     c0007e25 <Phys::allocatePage()+0x3f>
c0007dff:	53                   	push   ebx
c0007e00:	e8 5c ff ff ff       	call   c0007d61 <Phys::getPageState(unsigned long)>
c0007e05:	5a                   	pop    edx
c0007e06:	84 c0                	test   al,al
c0007e08:	74 67                	je     c0007e71 <Phys::allocatePage()+0x8b>
c0007e0a:	83 c3 01             	add    ebx,0x1
c0007e0d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e13:	75 e0                	jne    c0007df5 <Phys::allocatePage()+0xf>
c0007e15:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e1f:	31 db                	xor    ebx,ebx
c0007e21:	39 de                	cmp    esi,ebx
c0007e23:	75 da                	jne    c0007dff <Phys::allocatePage()+0x19>
c0007e25:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e2a:	83 ec 0c             	sub    esp,0xc
c0007e2d:	83 f0 01             	xor    eax,0x1
c0007e30:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e3a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e3d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e43:	50                   	push   eax
c0007e44:	e8 79 27 00 00       	call   c000a5c2 <VAS::scanForEviction()>
c0007e49:	83 c4 10             	add    esp,0x10
c0007e4c:	85 c0                	test   eax,eax
c0007e4e:	75 48                	jne    c0007e98 <Phys::allocatePage()+0xb2>
c0007e50:	83 ec 0c             	sub    esp,0xc
c0007e53:	68 ec 0d 02 c0       	push   0xc0020dec
c0007e58:	e8 aa 97 00 00       	call   c0011607 <KePanic(char const*)>
c0007e5d:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e63:	83 c4 10             	add    esp,0x10
c0007e66:	53                   	push   ebx
c0007e67:	e8 f5 fe ff ff       	call   c0007d61 <Phys::getPageState(unsigned long)>
c0007e6c:	5a                   	pop    edx
c0007e6d:	84 c0                	test   al,al
c0007e6f:	75 99                	jne    c0007e0a <Phys::allocatePage()+0x24>
c0007e71:	6a 01                	push   0x1
c0007e73:	53                   	push   ebx
c0007e74:	e8 a8 fe ff ff       	call   c0007d21 <Phys::setPageState(unsigned long, bool)>
c0007e79:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e7f:	59                   	pop    ecx
c0007e80:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e85:	5b                   	pop    ebx
c0007e86:	83 c2 01             	add    edx,0x1
c0007e89:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e8f:	c1 e0 0c             	shl    eax,0xc
c0007e92:	83 c4 14             	add    esp,0x14
c0007e95:	5b                   	pop    ebx
c0007e96:	5e                   	pop    esi
c0007e97:	c3                   	ret    
c0007e98:	83 ec 08             	sub    esp,0x8
c0007e9b:	89 c2                	mov    edx,eax
c0007e9d:	6a 01                	push   0x1
c0007e9f:	c1 ea 0c             	shr    edx,0xc
c0007ea2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea6:	52                   	push   edx
c0007ea7:	e8 75 fe ff ff       	call   c0007d21 <Phys::setPageState(unsigned long, bool)>
c0007eac:	83 c4 10             	add    esp,0x10
c0007eaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eb3:	eb dd                	jmp    c0007e92 <Phys::allocatePage()+0xac>

c0007eb5 <Phys::allocateContiguousPages(int)>:
c0007eb5:	57                   	push   edi
c0007eb6:	56                   	push   esi
c0007eb7:	53                   	push   ebx
c0007eb8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ebc:	fa                   	cli    
c0007ebd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ec2:	31 db                	xor    ebx,ebx
c0007ec4:	83 c0 01             	add    eax,0x1
c0007ec7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ecc:	85 db                	test   ebx,ebx
c0007ece:	75 11                	jne    c0007ee1 <Phys::allocateContiguousPages(int)+0x2c>
c0007ed0:	e8 11 ff ff ff       	call   c0007de6 <Phys::allocatePage()>
c0007ed5:	83 fe 01             	cmp    esi,0x1
c0007ed8:	89 c7                	mov    edi,eax
c0007eda:	74 21                	je     c0007efd <Phys::allocateContiguousPages(int)+0x48>
c0007edc:	bb 01 00 00 00       	mov    ebx,0x1
c0007ee1:	e8 00 ff ff ff       	call   c0007de6 <Phys::allocatePage()>
c0007ee6:	89 da                	mov    edx,ebx
c0007ee8:	c1 e2 0c             	shl    edx,0xc
c0007eeb:	01 fa                	add    edx,edi
c0007eed:	39 c2                	cmp    edx,eax
c0007eef:	74 22                	je     c0007f13 <Phys::allocateContiguousPages(int)+0x5e>
c0007ef1:	83 fe 01             	cmp    esi,0x1
c0007ef4:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef9:	89 c7                	mov    edi,eax
c0007efb:	75 e4                	jne    c0007ee1 <Phys::allocateContiguousPages(int)+0x2c>
c0007efd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007f02:	83 e8 01             	sub    eax,0x1
c0007f05:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f0a:	75 01                	jne    c0007f0d <Phys::allocateContiguousPages(int)+0x58>
c0007f0c:	fb                   	sti    
c0007f0d:	5b                   	pop    ebx
c0007f0e:	89 f8                	mov    eax,edi
c0007f10:	5e                   	pop    esi
c0007f11:	5f                   	pop    edi
c0007f12:	c3                   	ret    
c0007f13:	83 c3 01             	add    ebx,0x1
c0007f16:	39 f3                	cmp    ebx,esi
c0007f18:	75 b2                	jne    c0007ecc <Phys::allocateContiguousPages(int)+0x17>
c0007f1a:	eb e1                	jmp    c0007efd <Phys::allocateContiguousPages(int)+0x48>

c0007f1c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f1c:	56                   	push   esi
c0007f1d:	53                   	push   ebx
c0007f1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f22:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f28:	73 06                	jae    c0007f30 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f2a:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f34:	c1 eb 0c             	shr    ebx,0xc
c0007f37:	c1 e8 0c             	shr    eax,0xc
c0007f3a:	39 d8                	cmp    eax,ebx
c0007f3c:	73 13                	jae    c0007f51 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3e:	6a 00                	push   0x0
c0007f40:	50                   	push   eax
c0007f41:	8d 70 01             	lea    esi,[eax+0x1]
c0007f44:	e8 d8 fd ff ff       	call   c0007d21 <Phys::setPageState(unsigned long, bool)>
c0007f49:	39 f3                	cmp    ebx,esi
c0007f4b:	89 f0                	mov    eax,esi
c0007f4d:	5a                   	pop    edx
c0007f4e:	59                   	pop    ecx
c0007f4f:	75 ed                	jne    c0007f3e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f51:	5b                   	pop    ebx
c0007f52:	5e                   	pop    esi
c0007f53:	c3                   	ret    

c0007f54 <Phys::physicalMemorySetup(unsigned int)>:
c0007f54:	55                   	push   ebp
c0007f55:	57                   	push   edi
c0007f56:	56                   	push   esi
c0007f57:	53                   	push   ebx
c0007f58:	31 db                	xor    ebx,ebx
c0007f5a:	83 ec 40             	sub    esp,0x40
c0007f5d:	6a 10                	push   0x10
c0007f5f:	6a 00                	push   0x0
c0007f61:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f66:	e8 85 85 ff ff       	call   c00004f0 <memset>
c0007f6b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f74:	05 00 10 00 00       	add    eax,0x1000
c0007f79:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f7d:	5a                   	pop    edx
c0007f7e:	59                   	pop    ecx
c0007f7f:	50                   	push   eax
c0007f80:	68 7f 0e 02 c0       	push   0xc0020e7f
c0007f85:	e8 84 29 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0007f8a:	83 c4 10             	add    esp,0x10
c0007f8d:	83 ec 08             	sub    esp,0x8
c0007f90:	6a 01                	push   0x1
c0007f92:	53                   	push   ebx
c0007f93:	83 c3 01             	add    ebx,0x1
c0007f96:	e8 86 fd ff ff       	call   c0007d21 <Phys::setPageState(unsigned long, bool)>
c0007f9b:	83 c4 10             	add    esp,0x10
c0007f9e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa4:	75 e7                	jne    c0007f8d <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa6:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fad:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb4:	c1 e0 08             	shl    eax,0x8
c0007fb7:	09 c2                	or     edx,eax
c0007fb9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fbd:	0f 84 43 01 00 00    	je     c0008106 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fc3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fcb:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fd0:	e9 82 00 00 00       	jmp    c0008057 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd5:	ba 00 00 08 00       	mov    edx,0x80000
c0007fda:	89 c1                	mov    ecx,eax
c0007fdc:	39 f2                	cmp    edx,esi
c0007fde:	19 f9                	sbb    ecx,edi
c0007fe0:	0f 82 c0 00 00 00    	jb     c00080a6 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fea:	89 c5                	mov    ebp,eax
c0007fec:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ff0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff4:	19 cd                	sbb    ebp,ecx
c0007ff6:	0f 83 af 00 00 00    	jae    c00080ab <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ffc:	89 d6                	mov    esi,edx
c0007ffe:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008003:	39 f2                	cmp    edx,esi
c0008005:	89 cf                	mov    edi,ecx
c0008007:	19 c8                	sbb    eax,ecx
c0008009:	73 07                	jae    c0008012 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c000800b:	be 00 00 0a 00       	mov    esi,0xa0000
c0008010:	31 ff                	xor    edi,edi
c0008012:	89 f2                	mov    edx,esi
c0008014:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008019:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801f:	89 f9                	mov    ecx,edi
c0008021:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008025:	83 d1 ff             	adc    ecx,0xffffffff
c0008028:	39 d0                	cmp    eax,edx
c000802a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802e:	b8 00 00 00 00       	mov    eax,0x0
c0008033:	19 c8                	sbb    eax,ecx
c0008035:	0f 82 9d 01 00 00    	jb     c00081d8 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000803b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803f:	83 c3 18             	add    ebx,0x18
c0008042:	83 c6 01             	add    esi,0x1
c0008045:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008049:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000804d:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0008051:	0f 84 bf 00 00 00    	je     c0008116 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008057:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008059:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000805c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805f:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008062:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008066:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008069:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000806d:	01 f0                	add    eax,esi
c000806f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008073:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008077:	55                   	push   ebp
c0008078:	11 fa                	adc    edx,edi
c000807a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008082:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008086:	50                   	push   eax
c0008087:	56                   	push   esi
c0008088:	68 1c 0e 02 c0       	push   0xc0020e1c
c000808d:	e8 7c 28 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0008092:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	09 f8                	or     eax,edi
c000809b:	75 79                	jne    c0008116 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000809d:	83 fd 01             	cmp    ebp,0x1
c00080a0:	0f 84 2f ff ff ff    	je     c0007fd5 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a6:	83 fd 01             	cmp    ebp,0x1
c00080a9:	75 90                	jne    c000803b <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080ab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080af:	31 d2                	xor    edx,edx
c00080b1:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b5:	89 c8                	mov    eax,ecx
c00080b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080bb:	19 d1                	sbb    ecx,edx
c00080bd:	0f 82 78 ff ff ff    	jb     c000803b <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080c3:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c8:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080cc:	b9 00 00 00 00       	mov    ecx,0x0
c00080d1:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d5:	0f 83 60 ff ff ff    	jae    c000803b <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080db:	39 c6                	cmp    esi,eax
c00080dd:	19 d7                	sbb    edi,edx
c00080df:	0f 83 ff 00 00 00    	jae    c00081e4 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080ed:	29 c7                	sub    edi,eax
c00080ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f7:	19 d5                	sbb    ebp,edx
c00080f9:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008101:	e9 de 00 00 00       	jmp    c00081e4 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008106:	83 ec 0c             	sub    esp,0xc
c0008109:	68 97 0e 02 c0       	push   0xc0020e97
c000810e:	e8 f4 94 00 00       	call   c0011607 <KePanic(char const*)>
c0008113:	83 c4 10             	add    esp,0x10
c0008116:	83 ec 08             	sub    esp,0x8
c0008119:	bb 60 00 00 00       	mov    ebx,0x60
c000811e:	6a 00                	push   0x0
c0008120:	6a 06                	push   0x6
c0008122:	e8 fa fb ff ff       	call   c0007d21 <Phys::setPageState(unsigned long, bool)>
c0008127:	58                   	pop    eax
c0008128:	5a                   	pop    edx
c0008129:	6a 00                	push   0x0
c000812b:	6a 07                	push   0x7
c000812d:	e8 ef fb ff ff       	call   c0007d21 <Phys::setPageState(unsigned long, bool)>
c0008132:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008138:	83 c4 10             	add    esp,0x10
c000813b:	83 c1 02             	add    ecx,0x2
c000813e:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	6a 00                	push   0x0
c0008149:	53                   	push   ebx
c000814a:	83 c3 01             	add    ebx,0x1
c000814d:	e8 cf fb ff ff       	call   c0007d21 <Phys::setPageState(unsigned long, bool)>
c0008152:	83 c4 10             	add    esp,0x10
c0008155:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000815b:	75 e7                	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000815d:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008162:	bb 40 01 00 00       	mov    ebx,0x140
c0008167:	83 c0 20             	add    eax,0x20
c000816a:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000816f:	eb 26                	jmp    c0008197 <Phys::physicalMemorySetup(unsigned int)+0x243>
c0008171:	83 ec 08             	sub    esp,0x8
c0008174:	6a 00                	push   0x0
c0008176:	53                   	push   ebx
c0008177:	83 c3 01             	add    ebx,0x1
c000817a:	e8 a2 fb ff ff       	call   c0007d21 <Phys::setPageState(unsigned long, bool)>
c000817f:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008184:	83 c4 10             	add    esp,0x10
c0008187:	83 c0 01             	add    eax,0x1
c000818a:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008190:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008195:	74 07                	je     c000819e <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008197:	3d ff 03 00 00       	cmp    eax,0x3ff
c000819c:	7e d3                	jle    c0008171 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819e:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081a3:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a8:	7f 26                	jg     c00081d0 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081aa:	83 ec 08             	sub    esp,0x8
c00081ad:	6a 00                	push   0x0
c00081af:	53                   	push   ebx
c00081b0:	83 c3 01             	add    ebx,0x1
c00081b3:	e8 69 fb ff ff       	call   c0007d21 <Phys::setPageState(unsigned long, bool)>
c00081b8:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081bd:	83 c4 10             	add    esp,0x10
c00081c0:	83 c0 01             	add    eax,0x1
c00081c3:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c9:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081ce:	75 d3                	jne    c00081a3 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081d0:	83 c4 3c             	add    esp,0x3c
c00081d3:	5b                   	pop    ebx
c00081d4:	5e                   	pop    esi
c00081d5:	5f                   	pop    edi
c00081d6:	5d                   	pop    ebp
c00081d7:	c3                   	ret    
c00081d8:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081dc:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e4:	83 ec 04             	sub    esp,0x4
c00081e7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081eb:	56                   	push   esi
c00081ec:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081f0:	57                   	push   edi
c00081f1:	68 40 0e 02 c0       	push   0xc0020e40
c00081f6:	e8 13 27 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00081fb:	5d                   	pop    ebp
c00081fc:	58                   	pop    eax
c00081fd:	56                   	push   esi
c00081fe:	57                   	push   edi
c00081ff:	e8 18 fd ff ff       	call   c0007f1c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008204:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008208:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000820c:	83 c4 0c             	add    esp,0xc
c000820f:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008215:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008219:	01 f0                	add    eax,esi
c000821b:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008220:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008227:	52                   	push   edx
c0008228:	50                   	push   eax
c0008229:	68 a5 0e 02 c0       	push   0xc0020ea5
c000822e:	e8 db 26 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0008233:	83 c4 10             	add    esp,0x10
c0008236:	e9 00 fe ff ff       	jmp    c000803b <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000823b:	90                   	nop

c000823c <Pipe::isAtty()>:
c000823c:	31 c0                	xor    eax,eax
c000823e:	c3                   	ret    
c000823f:	90                   	nop

c0008240 <Pipe::~Pipe()>:
c0008240:	83 ec 0c             	sub    esp,0xc
c0008243:	ba 04 0f 02 c0       	mov    edx,0xc0020f04
c0008248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824c:	89 10                	mov    DWORD PTR [eax],edx
c000824e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008252:	83 ec 0c             	sub    esp,0xc
c0008255:	50                   	push   eax
c0008256:	e8 35 11 00 00       	call   c0009390 <UnixFile::~UnixFile()>
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	90                   	nop
c000825f:	83 c4 0c             	add    esp,0xc
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <Pipe::~Pipe()>:
c0008264:	83 ec 0c             	sub    esp,0xc
c0008267:	83 ec 0c             	sub    esp,0xc
c000826a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826e:	e8 cd ff ff ff       	call   c0008240 <Pipe::~Pipe()>
c0008273:	83 c4 10             	add    esp,0x10
c0008276:	83 ec 08             	sub    esp,0x8
c0008279:	6a 20                	push   0x20
c000827b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827f:	e8 8c 25 00 00       	call   c000a810 <operator delete(void*, unsigned long)>
c0008284:	83 c4 10             	add    esp,0x10
c0008287:	83 c4 0c             	add    esp,0xc
c000828a:	c3                   	ret    
c000828b:	90                   	nop

c000828c <Pipe::write(unsigned long long, void*, int*)>:
c000828c:	55                   	push   ebp
c000828d:	57                   	push   edi
c000828e:	56                   	push   esi
c000828f:	53                   	push   ebx
c0008290:	83 ec 1c             	sub    esp,0x1c
c0008293:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008297:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000829b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00082a2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00082ac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082b0:	89 d8                	mov    eax,ebx
c00082b2:	89 d6                	mov    esi,edx
c00082b4:	89 d7                	mov    edi,edx
c00082b6:	c1 ff 1f             	sar    edi,0x1f
c00082b9:	03 34 24             	add    esi,DWORD PTR [esp]
c00082bc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082c0:	c1 f8 1f             	sar    eax,0x1f
c00082c3:	39 f3                	cmp    ebx,esi
c00082c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082cd:	19 f8                	sbb    eax,edi
c00082cf:	b8 01 00 00 00       	mov    eax,0x1
c00082d4:	72 72                	jb     c0008348 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082dd:	01 d0                	add    eax,edx
c00082df:	99                   	cdq    
c00082e0:	f7 fb                	idiv   ebx
c00082e2:	89 d8                	mov    eax,ebx
c00082e4:	29 d0                	sub    eax,edx
c00082e6:	89 d6                	mov    esi,edx
c00082e8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082eb:	89 c3                	mov    ebx,eax
c00082ed:	c1 fb 1f             	sar    ebx,0x1f
c00082f0:	39 c2                	cmp    edx,eax
c00082f2:	19 df                	sbb    edi,ebx
c00082f4:	bb 00 00 00 00       	mov    ebx,0x0
c00082f9:	72 04                	jb     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082fb:	89 d3                	mov    ebx,edx
c00082fd:	29 c3                	sub    ebx,eax
c00082ff:	89 d0                	mov    eax,edx
c0008301:	29 d8                	sub    eax,ebx
c0008303:	74 0d                	je     c0008312 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008305:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008308:	89 c1                	mov    ecx,eax
c000830a:	01 f7                	add    edi,esi
c000830c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008310:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008312:	85 db                	test   ebx,ebx
c0008314:	74 0d                	je     c0008323 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008316:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000831a:	89 d9                	mov    ecx,ebx
c000831c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831f:	89 c6                	mov    esi,eax
c0008321:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008323:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008326:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000832b:	75 10                	jne    c000833d <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000832d:	83 ec 0c             	sub    esp,0xc
c0008330:	68 c1 0e 02 c0       	push   0xc0020ec1
c0008335:	e8 cd 92 00 00       	call   c0011607 <KePanic(char const*)>
c000833a:	83 c4 10             	add    esp,0x10
c000833d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008341:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008344:	89 08                	mov    DWORD PTR [eax],ecx
c0008346:	31 c0                	xor    eax,eax
c0008348:	83 c4 1c             	add    esp,0x1c
c000834b:	5b                   	pop    ebx
c000834c:	5e                   	pop    esi
c000834d:	5f                   	pop    edi
c000834e:	5d                   	pop    ebp
c000834f:	c3                   	ret    

c0008350 <Pipe::read(unsigned long long, void*, int*)>:
c0008350:	55                   	push   ebp
c0008351:	57                   	push   edi
c0008352:	56                   	push   esi
c0008353:	53                   	push   ebx
c0008354:	83 ec 1c             	sub    esp,0x1c
c0008357:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000835b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008363:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008366:	89 c8                	mov    eax,ecx
c0008368:	99                   	cdq    
c0008369:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000836d:	74 24                	je     c0008393 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836f:	39 f9                	cmp    ecx,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	19 f1                	sbb    ecx,esi
c0008375:	73 1c                	jae    c0008393 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008377:	fa                   	cli    
c0008378:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000837e:	e8 b1 dd 00 00       	call   c0016134 <schedule()>
c0008383:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008388:	48                   	dec    eax
c0008389:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000838e:	75 d3                	jne    c0008363 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008390:	fb                   	sti    
c0008391:	eb d0                	jmp    c0008363 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008393:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008397:	39 f8                	cmp    eax,edi
c0008399:	89 d1                	mov    ecx,edx
c000839b:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839f:	19 f1                	sbb    ecx,esi
c00083a1:	73 08                	jae    c00083ab <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00083a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083ae:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083b1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b5:	29 f7                	sub    edi,esi
c00083b7:	89 f8                	mov    eax,edi
c00083b9:	99                   	cdq    
c00083ba:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083be:	89 d0                	mov    eax,edx
c00083c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c4:	19 c2                	sbb    edx,eax
c00083c6:	89 f8                	mov    eax,edi
c00083c8:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083cd:	89 ea                	mov    edx,ebp
c00083cf:	29 c2                	sub    edx,eax
c00083d1:	85 c0                	test   eax,eax
c00083d3:	74 0b                	je     c00083e0 <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d8:	89 c1                	mov    ecx,eax
c00083da:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083e0:	85 d2                	test   edx,edx
c00083e2:	74 0d                	je     c00083f1 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e4:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e8:	89 d1                	mov    ecx,edx
c00083ea:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ed:	89 c7                	mov    edi,eax
c00083ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083f1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f4:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f7:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083fa:	99                   	cdq    
c00083fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083ff:	89 f7                	mov    edi,esi
c0008401:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008405:	c1 ff 1f             	sar    edi,0x1f
c0008408:	57                   	push   edi
c0008409:	56                   	push   esi
c000840a:	52                   	push   edx
c000840b:	50                   	push   eax
c000840c:	e8 df 74 01 00       	call   c001f8f0 <__umoddi3>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008419:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000841c:	75 10                	jne    c000842e <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841e:	83 ec 0c             	sub    esp,0xc
c0008421:	68 de 0e 02 c0       	push   0xc0020ede
c0008426:	e8 dc 91 00 00       	call   c0011607 <KePanic(char const*)>
c000842b:	83 c4 10             	add    esp,0x10
c000842e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008432:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008436:	89 10                	mov    DWORD PTR [eax],edx
c0008438:	83 c4 1c             	add    esp,0x1c
c000843b:	31 c0                	xor    eax,eax
c000843d:	5b                   	pop    ebx
c000843e:	5e                   	pop    esi
c000843f:	5f                   	pop    edi
c0008440:	5d                   	pop    ebp
c0008441:	c3                   	ret    

c0008442 <Pipe::Pipe(int)>:
c0008442:	83 ec 0c             	sub    esp,0xc
c0008445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008449:	83 ec 08             	sub    esp,0x8
c000844c:	6a 00                	push   0x0
c000844e:	50                   	push   eax
c000844f:	e8 56 0d 00 00       	call   c00091aa <UnixFile::UnixFile(int)>
c0008454:	83 c4 10             	add    esp,0x10
c0008457:	ba 04 0f 02 c0       	mov    edx,0xc0020f04
c000845c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008460:	89 10                	mov    DWORD PTR [eax],edx
c0008462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008466:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000846a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000846d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008471:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008483:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008487:	83 ec 0c             	sub    esp,0xc
c000848a:	50                   	push   eax
c000848b:	e8 47 f6 ff ff       	call   c0007ad7 <malloc>
c0008490:	83 c4 10             	add    esp,0x10
c0008493:	89 c2                	mov    edx,eax
c0008495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008499:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a4:	90                   	nop
c00084a5:	83 c4 0c             	add    esp,0xc
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::isAtty()>:
c00084aa:	b0 01                	mov    al,0x1
c00084ac:	c3                   	ret    
c00084ad:	90                   	nop

c00084ae <VgaText::~VgaText()>:
c00084ae:	83 ec 0c             	sub    esp,0xc
c00084b1:	ba 4c 0f 02 c0       	mov    edx,0xc0020f4c
c00084b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084ba:	89 10                	mov    DWORD PTR [eax],edx
c00084bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084c0:	83 ec 0c             	sub    esp,0xc
c00084c3:	50                   	push   eax
c00084c4:	e8 c7 0e 00 00       	call   c0009390 <UnixFile::~UnixFile()>
c00084c9:	83 c4 10             	add    esp,0x10
c00084cc:	90                   	nop
c00084cd:	83 c4 0c             	add    esp,0xc
c00084d0:	c3                   	ret    
c00084d1:	90                   	nop

c00084d2 <VgaText::~VgaText()>:
c00084d2:	83 ec 0c             	sub    esp,0xc
c00084d5:	83 ec 0c             	sub    esp,0xc
c00084d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084dc:	e8 cd ff ff ff       	call   c00084ae <VgaText::~VgaText()>
c00084e1:	83 c4 10             	add    esp,0x10
c00084e4:	83 ec 08             	sub    esp,0x8
c00084e7:	68 84 01 00 00       	push   0x184
c00084ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f0:	e8 1b 23 00 00       	call   c000a810 <operator delete(void*, unsigned long)>
c00084f5:	83 c4 10             	add    esp,0x10
c00084f8:	83 c4 0c             	add    esp,0xc
c00084fb:	c3                   	ret    

c00084fc <VgaText::read(unsigned long long, void*, int*)>:
c00084fc:	83 ec 10             	sub    esp,0x10
c00084ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008503:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000850b:	e8 8a 53 00 00       	call   c000d89a <readKeyboard(VgaText*, char*, unsigned long)>
c0008510:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008514:	89 02                	mov    DWORD PTR [edx],eax
c0008516:	31 c0                	xor    eax,eax
c0008518:	83 c4 1c             	add    esp,0x1c
c000851b:	c3                   	ret    

c000851c <setTerminalScrollLock(bool)>:
c000851c:	c3                   	ret    

c000851d <doTerminalCycle()>:
c000851d:	c3                   	ret    

c000851e <addToTerminalCycle(VgaText*)>:
c000851e:	c3                   	ret    

c000851f <scrollTerminalScrollLock(int)>:
c000851f:	c3                   	ret    

c0008520 <VgaText::updateTitle()>:
c0008520:	c3                   	ret    
c0008521:	90                   	nop

c0008522 <VgaText::load()>:
c0008522:	c3                   	ret    
c0008523:	90                   	nop

c0008524 <VgaText::updateCursor()>:
c0008524:	83 ec 14             	sub    esp,0x14
c0008527:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000852b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008531:	e8 9e 09 01 00       	call   c0018ed4 <HalConsoleCursorUpdate(int, int)>
c0008536:	83 c4 1c             	add    esp,0x1c
c0008539:	c3                   	ret    

c000853a <VgaText::doANSI_SGR(int)>:
c000853a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008542:	85 d2                	test   edx,edx
c0008544:	75 0b                	jne    c0008551 <VgaText::doANSI_SGR(int)+0x17>
c0008546:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008549:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000854c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854f:	eb 59                	jmp    c00085aa <VgaText::doANSI_SGR(int)+0x70>
c0008551:	83 fa 07             	cmp    edx,0x7
c0008554:	75 0b                	jne    c0008561 <VgaText::doANSI_SGR(int)+0x27>
c0008556:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008559:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000855c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855f:	eb 49                	jmp    c00085aa <VgaText::doANSI_SGR(int)+0x70>
c0008561:	83 fa 1b             	cmp    edx,0x1b
c0008564:	74 e0                	je     c0008546 <VgaText::doANSI_SGR(int)+0xc>
c0008566:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008569:	83 f9 07             	cmp    ecx,0x7
c000856c:	77 09                	ja     c0008577 <VgaText::doANSI_SGR(int)+0x3d>
c000856e:	8b 14 8d c0 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc840]
c0008575:	eb 20                	jmp    c0008597 <VgaText::doANSI_SGR(int)+0x5d>
c0008577:	8d 4a d8             	lea    ecx,[edx-0x28]
c000857a:	83 f9 07             	cmp    ecx,0x7
c000857d:	77 09                	ja     c0008588 <VgaText::doANSI_SGR(int)+0x4e>
c000857f:	8b 14 8d c0 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc840]
c0008586:	eb 22                	jmp    c00085aa <VgaText::doANSI_SGR(int)+0x70>
c0008588:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000858b:	83 f9 07             	cmp    ecx,0x7
c000858e:	77 0b                	ja     c000859b <VgaText::doANSI_SGR(int)+0x61>
c0008590:	8b 14 95 78 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc988]
c0008597:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000859a:	c3                   	ret    
c000859b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859e:	83 f9 07             	cmp    ecx,0x7
c00085a1:	77 0a                	ja     c00085ad <VgaText::doANSI_SGR(int)+0x73>
c00085a3:	8b 14 95 50 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc9b0]
c00085aa:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085ad:	c3                   	ret    

c00085ae <VgaText::setDefaultBgColour(VgaColour)>:
c00085ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085bc:	c3                   	ret    
c00085bd:	90                   	nop

c00085be <VgaText::setDefaultFgColour(VgaColour)>:
c00085be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085cc:	c3                   	ret    
c00085cd:	90                   	nop

c00085ce <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ce:	53                   	push   ebx
c00085cf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085db:	51                   	push   ecx
c00085dc:	e8 cd ff ff ff       	call   c00085ae <VgaText::setDefaultBgColour(VgaColour)>
c00085e1:	58                   	pop    eax
c00085e2:	5a                   	pop    edx
c00085e3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085eb:	5b                   	pop    ebx
c00085ec:	eb d0                	jmp    c00085be <VgaText::setDefaultFgColour(VgaColour)>

c00085ee <VgaText::setTitleTextColour(VgaColour)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f6:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f9:	c3                   	ret    

c00085fa <VgaText::setTitleColour(VgaColour)>:
c00085fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008602:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008605:	c3                   	ret    

c0008606 <VgaText::setTitle(char*)>:
c0008606:	c3                   	ret    
c0008607:	90                   	nop

c0008608 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000860c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008611:	83 e0 0f             	and    eax,0xf
c0008614:	c1 e2 04             	shl    edx,0x4
c0008617:	09 d0                	or     eax,edx
c0008619:	c3                   	ret    

c000861a <VgaText::scrollScreen()>:
c000861a:	55                   	push   ebp
c000861b:	57                   	push   edi
c000861c:	56                   	push   esi
c000861d:	be 01 00 00 00       	mov    esi,0x1
c0008622:	53                   	push   ebx
c0008623:	83 ec 0c             	sub    esp,0xc
c0008626:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000862a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000862d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008633:	31 ff                	xor    edi,edi
c0008635:	01 e9                	add    ecx,ebp
c0008637:	8a 01                	mov    al,BYTE PTR [ecx]
c0008639:	83 fe 18             	cmp    esi,0x18
c000863c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008642:	75 20                	jne    c0008664 <VgaText::scrollScreen()+0x4a>
c0008644:	f7 c7 01 00 00 00    	test   edi,0x1
c000864a:	74 15                	je     c0008661 <VgaText::scrollScreen()+0x47>
c000864c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008650:	50                   	push   eax
c0008651:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008655:	50                   	push   eax
c0008656:	e8 ad ff ff ff       	call   c0008608 <VgaText::combineColours(unsigned char, unsigned char)>
c000865b:	5a                   	pop    edx
c000865c:	5a                   	pop    edx
c000865d:	88 01                	mov    BYTE PTR [ecx],al
c000865f:	eb 03                	jmp    c0008664 <VgaText::scrollScreen()+0x4a>
c0008661:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008664:	47                   	inc    edi
c0008665:	41                   	inc    ecx
c0008666:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000866c:	75 c9                	jne    c0008637 <VgaText::scrollScreen()+0x1d>
c000866e:	46                   	inc    esi
c000866f:	83 fe 19             	cmp    esi,0x19
c0008672:	75 b9                	jne    c000862d <VgaText::scrollScreen()+0x13>
c0008674:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c000867a:	75 1f                	jne    c000869b <VgaText::scrollScreen()+0x81>
c000867c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008680:	74 05                	je     c0008687 <VgaText::scrollScreen()+0x6d>
c0008682:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008685:	eb 14                	jmp    c000869b <VgaText::scrollScreen()+0x81>
c0008687:	50                   	push   eax
c0008688:	50                   	push   eax
c0008689:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000868d:	50                   	push   eax
c000868e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008692:	50                   	push   eax
c0008693:	e8 d0 06 01 00       	call   c0018d68 <HalConsoleScroll(int, int)>
c0008698:	83 c4 10             	add    esp,0x10
c000869b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869f:	83 c4 0c             	add    esp,0xc
c00086a2:	5b                   	pop    ebx
c00086a3:	5e                   	pop    esi
c00086a4:	5f                   	pop    edi
c00086a5:	5d                   	pop    ebp
c00086a6:	e9 79 fe ff ff       	jmp    c0008524 <VgaText::updateCursor()>
c00086ab:	90                   	nop

c00086ac <VgaText::combineCharAndColour(char, unsigned char)>:
c00086ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086b1:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b6:	c1 e0 08             	shl    eax,0x8
c00086b9:	09 d0                	or     eax,edx
c00086bb:	c3                   	ret    

c00086bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086bc:	55                   	push   ebp
c00086bd:	57                   	push   edi
c00086be:	56                   	push   esi
c00086bf:	53                   	push   ebx
c00086c0:	83 ec 1c             	sub    esp,0x1c
c00086c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086db:	0f b6 c3             	movzx  eax,bl
c00086de:	50                   	push   eax
c00086df:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e4:	50                   	push   eax
c00086e5:	e8 1e ff ff ff       	call   c0008608 <VgaText::combineColours(unsigned char, unsigned char)>
c00086ea:	5a                   	pop    edx
c00086eb:	59                   	pop    ecx
c00086ec:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086f1:	0f b6 c0             	movzx  eax,al
c00086f4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f8:	50                   	push   eax
c00086f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086fd:	e8 aa ff ff ff       	call   c00086ac <VgaText::combineCharAndColour(char, unsigned char)>
c0008702:	5a                   	pop    edx
c0008703:	6b d7 50             	imul   edx,edi,0x50
c0008706:	59                   	pop    ecx
c0008707:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000870a:	01 f2                	add    edx,esi
c000870c:	0f b7 d2             	movzx  edx,dx
c000870f:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008713:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008719:	75 28                	jne    c0008743 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c000871b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008723:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008727:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000872b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008733:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008737:	83 c4 1c             	add    esp,0x1c
c000873a:	5b                   	pop    ebx
c000873b:	5e                   	pop    esi
c000873c:	5f                   	pop    edi
c000873d:	5d                   	pop    ebp
c000873e:	e9 2d 07 01 00       	jmp    c0018e70 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008743:	83 c4 1c             	add    esp,0x1c
c0008746:	5b                   	pop    ebx
c0008747:	5e                   	pop    esi
c0008748:	5f                   	pop    edi
c0008749:	5d                   	pop    ebp
c000874a:	c3                   	ret    
c000874b:	90                   	nop

c000874c <VgaText::getCursorX()>:
c000874c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008750:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008753:	c3                   	ret    

c0008754 <VgaText::getCursorY()>:
c0008754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008758:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000875b:	c3                   	ret    

c000875c <VgaText::setCursor(int, int)>:
c000875c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008760:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008764:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008767:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000876b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876e:	e9 b1 fd ff ff       	jmp    c0008524 <VgaText::updateCursor()>

c0008773 <setActiveTerminal(VgaText*)>:
c0008773:	53                   	push   ebx
c0008774:	83 ec 08             	sub    esp,0x8
c0008777:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000877b:	85 db                	test   ebx,ebx
c000877d:	75 11                	jne    c0008790 <setActiveTerminal(VgaText*)+0x1d>
c000877f:	c7 44 24 10 18 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f18
c0008787:	83 c4 08             	add    esp,0x8
c000878a:	5b                   	pop    ebx
c000878b:	e9 77 8e 00 00       	jmp    c0011607 <KePanic(char const*)>
c0008790:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0008795:	85 c0                	test   eax,eax
c0008797:	74 0c                	je     c00087a5 <setActiveTerminal(VgaText*)+0x32>
c0008799:	83 ec 0c             	sub    esp,0xc
c000879c:	50                   	push   eax
c000879d:	e8 82 fd ff ff       	call   c0008524 <VgaText::updateCursor()>
c00087a2:	83 c4 10             	add    esp,0x10
c00087a5:	50                   	push   eax
c00087a6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a9:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087af:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087b2:	53                   	push   ebx
c00087b3:	e8 a4 ff ff ff       	call   c000875c <VgaText::setCursor(int, int)>
c00087b8:	83 c4 18             	add    esp,0x18
c00087bb:	5b                   	pop    ebx
c00087bc:	c3                   	ret    
c00087bd:	90                   	nop

c00087be <VgaText::clearScreen()>:
c00087be:	57                   	push   edi
c00087bf:	56                   	push   esi
c00087c0:	31 f6                	xor    esi,esi
c00087c2:	53                   	push   ebx
c00087c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c7:	52                   	push   edx
c00087c8:	6a 00                	push   0x0
c00087ca:	6a 00                	push   0x0
c00087cc:	53                   	push   ebx
c00087cd:	e8 8a ff ff ff       	call   c000875c <VgaText::setCursor(int, int)>
c00087d2:	83 c4 10             	add    esp,0x10
c00087d5:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087dc:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087df:	7e 20                	jle    c0008801 <VgaText::clearScreen()+0x43>
c00087e1:	31 ff                	xor    edi,edi
c00087e3:	50                   	push   eax
c00087e4:	50                   	push   eax
c00087e5:	56                   	push   esi
c00087e6:	57                   	push   edi
c00087e7:	47                   	inc    edi
c00087e8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087eb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ee:	6a 20                	push   0x20
c00087f0:	53                   	push   ebx
c00087f1:	e8 c6 fe ff ff       	call   c00086bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f6:	83 c4 20             	add    esp,0x20
c00087f9:	83 ff 50             	cmp    edi,0x50
c00087fc:	75 e5                	jne    c00087e3 <VgaText::clearScreen()+0x25>
c00087fe:	46                   	inc    esi
c00087ff:	eb db                	jmp    c00087dc <VgaText::clearScreen()+0x1e>
c0008801:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008808:	5b                   	pop    ebx
c0008809:	5e                   	pop    esi
c000880a:	5f                   	pop    edi
c000880b:	c3                   	ret    

c000880c <VgaText::setCursorX(int)>:
c000880c:	83 ec 10             	sub    esp,0x10
c000880f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008813:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000881a:	50                   	push   eax
c000881b:	e8 3c ff ff ff       	call   c000875c <VgaText::setCursor(int, int)>
c0008820:	83 c4 1c             	add    esp,0x1c
c0008823:	c3                   	ret    

c0008824 <VgaText::setCursorY(int)>:
c0008824:	83 ec 10             	sub    esp,0x10
c0008827:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000882b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008832:	50                   	push   eax
c0008833:	e8 24 ff ff ff       	call   c000875c <VgaText::setCursor(int, int)>
c0008838:	83 c4 1c             	add    esp,0x1c
c000883b:	c3                   	ret    

c000883c <VgaText::incrementCursor(bool)>:
c000883c:	56                   	push   esi
c000883d:	53                   	push   ebx
c000883e:	51                   	push   ecx
c000883f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008843:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008847:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000884a:	40                   	inc    eax
c000884b:	83 f8 50             	cmp    eax,0x50
c000884e:	74 05                	je     c0008855 <VgaText::incrementCursor(bool)+0x19>
c0008850:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008853:	eb 24                	jmp    c0008879 <VgaText::incrementCursor(bool)+0x3d>
c0008855:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000885c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885f:	8d 50 01             	lea    edx,[eax+0x1]
c0008862:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008865:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008868:	75 0f                	jne    c0008879 <VgaText::incrementCursor(bool)+0x3d>
c000886a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000886d:	83 ec 0c             	sub    esp,0xc
c0008870:	53                   	push   ebx
c0008871:	e8 a4 fd ff ff       	call   c000861a <VgaText::scrollScreen()>
c0008876:	83 c4 10             	add    esp,0x10
c0008879:	89 f0                	mov    eax,esi
c000887b:	84 c0                	test   al,al
c000887d:	74 0c                	je     c000888b <VgaText::incrementCursor(bool)+0x4f>
c000887f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008883:	5a                   	pop    edx
c0008884:	5b                   	pop    ebx
c0008885:	5e                   	pop    esi
c0008886:	e9 99 fc ff ff       	jmp    c0008524 <VgaText::updateCursor()>
c000888b:	58                   	pop    eax
c000888c:	5b                   	pop    ebx
c000888d:	5e                   	pop    esi
c000888e:	c3                   	ret    
c000888f:	90                   	nop

c0008890 <VgaText::decrementCursor(bool)>:
c0008890:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008894:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008898:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000889b:	85 c0                	test   eax,eax
c000889d:	74 04                	je     c00088a3 <VgaText::decrementCursor(bool)+0x13>
c000889f:	48                   	dec    eax
c00088a0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00088a3:	84 c9                	test   cl,cl
c00088a5:	74 09                	je     c00088b0 <VgaText::decrementCursor(bool)+0x20>
c00088a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088ab:	e9 74 fc ff ff       	jmp    c0008524 <VgaText::updateCursor()>
c00088b0:	c3                   	ret    
c00088b1:	90                   	nop

c00088b2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088b2:	53                   	push   ebx
c00088b3:	83 ec 08             	sub    esp,0x8
c00088b6:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088c3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c7:	83 f8 07             	cmp    eax,0x7
c00088ca:	75 21                	jne    c00088ed <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d4:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088dc:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e4:	83 c4 08             	add    esp,0x8
c00088e7:	5b                   	pop    ebx
c00088e8:	e9 d6 3a 00 00       	jmp    c000c3c3 <Krnl::beep(int, int, bool)>
c00088ed:	83 f8 0d             	cmp    eax,0xd
c00088f0:	75 09                	jne    c00088fb <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f9:	eb 2d                	jmp    c0008928 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088fb:	83 f8 0a             	cmp    eax,0xa
c00088fe:	75 31                	jne    c0008931 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0008900:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008907:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000890a:	8d 50 01             	lea    edx,[eax+0x1]
c000890d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008910:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008913:	75 0f                	jne    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008915:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	53                   	push   ebx
c000891c:	e8 f9 fc ff ff       	call   c000861a <VgaText::scrollScreen()>
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008928:	83 c4 08             	add    esp,0x8
c000892b:	5b                   	pop    ebx
c000892c:	e9 f3 fb ff ff       	jmp    c0008524 <VgaText::updateCursor()>
c0008931:	83 f8 08             	cmp    eax,0x8
c0008934:	75 25                	jne    c000895b <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008936:	50                   	push   eax
c0008937:	50                   	push   eax
c0008938:	6a 01                	push   0x1
c000893a:	53                   	push   ebx
c000893b:	e8 50 ff ff ff       	call   c0008890 <VgaText::decrementCursor(bool)>
c0008940:	5a                   	pop    edx
c0008941:	59                   	pop    ecx
c0008942:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008945:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008948:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000894b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894e:	6a 20                	push   0x20
c0008950:	53                   	push   ebx
c0008951:	e8 66 fd ff ff       	call   c00086bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008956:	83 c4 28             	add    esp,0x28
c0008959:	5b                   	pop    ebx
c000895a:	c3                   	ret    
c000895b:	83 ec 08             	sub    esp,0x8
c000895e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008961:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008964:	51                   	push   ecx
c0008965:	52                   	push   edx
c0008966:	50                   	push   eax
c0008967:	53                   	push   ebx
c0008968:	e8 4f fd ff ff       	call   c00086bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000896d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008971:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008979:	83 c4 28             	add    esp,0x28
c000897c:	5b                   	pop    ebx
c000897d:	e9 ba fe ff ff       	jmp    c000883c <VgaText::incrementCursor(bool)>

c0008982 <VgaText::putchar(char)>:
c0008982:	57                   	push   edi
c0008983:	56                   	push   esi
c0008984:	53                   	push   ebx
c0008985:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008989:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000898d:	0f be c2             	movsx  eax,dl
c0008990:	83 f8 5b             	cmp    eax,0x5b
c0008993:	75 18                	jne    c00089ad <VgaText::putchar(char)+0x2b>
c0008995:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008999:	74 20                	je     c00089bb <VgaText::putchar(char)+0x39>
c000899b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00089a1:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a8:	e9 b8 00 00 00       	jmp    c0008a65 <VgaText::putchar(char)+0xe3>
c00089ad:	83 f8 1b             	cmp    eax,0x1b
c00089b0:	75 09                	jne    c00089bb <VgaText::putchar(char)+0x39>
c00089b2:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b6:	e9 aa 00 00 00       	jmp    c0008a65 <VgaText::putchar(char)+0xe3>
c00089bb:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bf:	89 f9                	mov    ecx,edi
c00089c1:	84 c9                	test   cl,cl
c00089c3:	0f 84 8c 00 00 00    	je     c0008a55 <VgaText::putchar(char)+0xd3>
c00089c9:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089cc:	80 f9 3e             	cmp    cl,0x3e
c00089cf:	77 70                	ja     c0008a41 <VgaText::putchar(char)+0xbf>
c00089d1:	83 f8 6d             	cmp    eax,0x6d
c00089d4:	75 3f                	jne    c0008a15 <VgaText::putchar(char)+0x93>
c00089d6:	31 f6                	xor    esi,esi
c00089d8:	31 d2                	xor    edx,edx
c00089da:	31 c0                	xor    eax,eax
c00089dc:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089df:	7e 25                	jle    c0008a06 <VgaText::putchar(char)+0x84>
c00089e1:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e6:	83 fa 3b             	cmp    edx,0x3b
c00089e9:	75 0f                	jne    c00089fa <VgaText::putchar(char)+0x78>
c00089eb:	50                   	push   eax
c00089ec:	53                   	push   ebx
c00089ed:	e8 48 fb ff ff       	call   c000853a <VgaText::doANSI_SGR(int)>
c00089f2:	31 d2                	xor    edx,edx
c00089f4:	59                   	pop    ecx
c00089f5:	58                   	pop    eax
c00089f6:	31 c0                	xor    eax,eax
c00089f8:	eb 09                	jmp    c0008a03 <VgaText::putchar(char)+0x81>
c00089fa:	6b c0 0a             	imul   eax,eax,0xa
c00089fd:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008a01:	89 fa                	mov    edx,edi
c0008a03:	46                   	inc    esi
c0008a04:	eb d6                	jmp    c00089dc <VgaText::putchar(char)+0x5a>
c0008a06:	84 d2                	test   dl,dl
c0008a08:	74 2f                	je     c0008a39 <VgaText::putchar(char)+0xb7>
c0008a0a:	50                   	push   eax
c0008a0b:	53                   	push   ebx
c0008a0c:	e8 29 fb ff ff       	call   c000853a <VgaText::doANSI_SGR(int)>
c0008a11:	58                   	pop    eax
c0008a12:	5a                   	pop    edx
c0008a13:	eb 24                	jmp    c0008a39 <VgaText::putchar(char)+0xb7>
c0008a15:	83 f8 4a             	cmp    eax,0x4a
c0008a18:	75 1f                	jne    c0008a39 <VgaText::putchar(char)+0xb7>
c0008a1a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1e:	75 19                	jne    c0008a39 <VgaText::putchar(char)+0xb7>
c0008a20:	83 ec 0c             	sub    esp,0xc
c0008a23:	53                   	push   ebx
c0008a24:	e8 95 fd ff ff       	call   c00087be <VgaText::clearScreen()>
c0008a29:	83 c4 0c             	add    esp,0xc
c0008a2c:	6a 00                	push   0x0
c0008a2e:	6a 00                	push   0x0
c0008a30:	53                   	push   ebx
c0008a31:	e8 26 fd ff ff       	call   c000875c <VgaText::setCursor(int, int)>
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3f:	eb 24                	jmp    c0008a65 <VgaText::putchar(char)+0xe3>
c0008a41:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a44:	83 f8 0e             	cmp    eax,0xe
c0008a47:	7f 1c                	jg     c0008a65 <VgaText::putchar(char)+0xe3>
c0008a49:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a4c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4f:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a53:	eb 10                	jmp    c0008a65 <VgaText::putchar(char)+0xe3>
c0008a55:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a58:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a5b:	50                   	push   eax
c0008a5c:	53                   	push   ebx
c0008a5d:	e8 50 fe ff ff       	call   c00088b2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a62:	83 c4 10             	add    esp,0x10
c0008a65:	5b                   	pop    ebx
c0008a66:	5e                   	pop    esi
c0008a67:	5f                   	pop    edi
c0008a68:	c3                   	ret    
c0008a69:	90                   	nop

c0008a6a <VgaText::putx(unsigned int)>:
c0008a6a:	57                   	push   edi
c0008a6b:	b9 11 00 00 00       	mov    ecx,0x11
c0008a70:	56                   	push   esi
c0008a71:	be 26 0f 02 c0       	mov    esi,0xc0020f26
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 20             	sub    esp,0x20
c0008a7a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a82:	fc                   	cld    
c0008a83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a85:	be 08 00 00 00       	mov    esi,0x8
c0008a8a:	50                   	push   eax
c0008a8b:	50                   	push   eax
c0008a8c:	89 d8                	mov    eax,ebx
c0008a8e:	c1 e8 1c             	shr    eax,0x1c
c0008a91:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a96:	c1 e3 04             	shl    ebx,0x4
c0008a99:	50                   	push   eax
c0008a9a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9e:	e8 df fe ff ff       	call   c0008982 <VgaText::putchar(char)>
c0008aa3:	83 c4 10             	add    esp,0x10
c0008aa6:	4e                   	dec    esi
c0008aa7:	75 e1                	jne    c0008a8a <VgaText::putx(unsigned int)+0x20>
c0008aa9:	83 c4 20             	add    esp,0x20
c0008aac:	5b                   	pop    ebx
c0008aad:	5e                   	pop    esi
c0008aae:	5f                   	pop    edi
c0008aaf:	c3                   	ret    

c0008ab0 <VgaText::puts(char const*)>:
c0008ab0:	53                   	push   ebx
c0008ab1:	83 ec 08             	sub    esp,0x8
c0008ab4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008abb:	85 c0                	test   eax,eax
c0008abd:	74 12                	je     c0008ad1 <VgaText::puts(char const*)+0x21>
c0008abf:	51                   	push   ecx
c0008ac0:	43                   	inc    ebx
c0008ac1:	51                   	push   ecx
c0008ac2:	50                   	push   eax
c0008ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac7:	e8 b6 fe ff ff       	call   c0008982 <VgaText::putchar(char)>
c0008acc:	83 c4 10             	add    esp,0x10
c0008acf:	eb e7                	jmp    c0008ab8 <VgaText::puts(char const*)+0x8>
c0008ad1:	83 c4 08             	add    esp,0x8
c0008ad4:	5b                   	pop    ebx
c0008ad5:	c3                   	ret    

c0008ad6 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad6:	55                   	push   ebp
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	53                   	push   ebx
c0008ada:	83 ec 0c             	sub    esp,0xc
c0008add:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ae1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008af0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008af3:	39 eb                	cmp    ebx,ebp
c0008af5:	74 13                	je     c0008b0a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af7:	50                   	push   eax
c0008af8:	43                   	inc    ebx
c0008af9:	50                   	push   eax
c0008afa:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afe:	50                   	push   eax
c0008aff:	56                   	push   esi
c0008b00:	e8 7d fe ff ff       	call   c0008982 <VgaText::putchar(char)>
c0008b05:	83 c4 10             	add    esp,0x10
c0008b08:	eb e9                	jmp    c0008af3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b0a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b15:	89 38                	mov    DWORD PTR [eax],edi
c0008b17:	83 c4 0c             	add    esp,0xc
c0008b1a:	31 c0                	xor    eax,eax
c0008b1c:	5b                   	pop    ebx
c0008b1d:	5e                   	pop    esi
c0008b1e:	5f                   	pop    edi
c0008b1f:	5d                   	pop    ebp
c0008b20:	c3                   	ret    
c0008b21:	90                   	nop

c0008b22 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b22:	55                   	push   ebp
c0008b23:	57                   	push   edi
c0008b24:	56                   	push   esi
c0008b25:	53                   	push   ebx
c0008b26:	83 ec 0c             	sub    esp,0xc
c0008b29:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b2d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b32:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b39:	50                   	push   eax
c0008b3a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3f:	50                   	push   eax
c0008b40:	e8 c3 fa ff ff       	call   c0008608 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b45:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b49:	5a                   	pop    edx
c0008b4a:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b4d:	59                   	pop    ecx
c0008b4e:	0f b6 f8             	movzx  edi,al
c0008b51:	0f b7 db             	movzx  ebx,bx
c0008b54:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b58:	01 db                	add    ebx,ebx
c0008b5a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b5d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b60:	85 c0                	test   eax,eax
c0008b62:	0f 84 ef 00 00 00    	je     c0008c57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b68:	83 f8 0d             	cmp    eax,0xd
c0008b6b:	75 0c                	jne    c0008b79 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b6d:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b74:	e9 d8 00 00 00       	jmp    c0008c51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b79:	83 f8 0a             	cmp    eax,0xa
c0008b7c:	75 44                	jne    c0008bc2 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7e:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b85:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b88:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b8b:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b91:	75 0f                	jne    c0008ba2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b93:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b96:	83 ec 0c             	sub    esp,0xc
c0008b99:	55                   	push   ebp
c0008b9a:	e8 7b fa ff ff       	call   c000861a <VgaText::scrollScreen()>
c0008b9f:	83 c4 10             	add    esp,0x10
c0008ba2:	83 ec 0c             	sub    esp,0xc
c0008ba5:	55                   	push   ebp
c0008ba6:	e8 79 f9 ff ff       	call   c0008524 <VgaText::updateCursor()>
c0008bab:	83 c4 10             	add    esp,0x10
c0008bae:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bb2:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb5:	0f b7 db             	movzx  ebx,bx
c0008bb8:	01 db                	add    ebx,ebx
c0008bba:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bbd:	e9 8f 00 00 00       	jmp    c0008c51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bc2:	83 f8 08             	cmp    eax,0x8
c0008bc5:	75 34                	jne    c0008bfb <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc7:	51                   	push   ecx
c0008bc8:	51                   	push   ecx
c0008bc9:	6a 01                	push   0x1
c0008bcb:	55                   	push   ebp
c0008bcc:	e8 bf fc ff ff       	call   c0008890 <VgaText::decrementCursor(bool)>
c0008bd1:	5b                   	pop    ebx
c0008bd2:	58                   	pop    eax
c0008bd3:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd6:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd9:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bdc:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdf:	6a 20                	push   0x20
c0008be1:	55                   	push   ebp
c0008be2:	e8 d5 fa ff ff       	call   c00086bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be7:	83 c4 20             	add    esp,0x20
c0008bea:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bee:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bf1:	0f b7 db             	movzx  ebx,bx
c0008bf4:	01 db                	add    ebx,ebx
c0008bf6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf9:	eb 56                	jmp    c0008c51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bfb:	52                   	push   edx
c0008bfc:	52                   	push   edx
c0008bfd:	57                   	push   edi
c0008bfe:	50                   	push   eax
c0008bff:	e8 a8 fa ff ff       	call   c00086ac <VgaText::combineCharAndColour(char, unsigned char)>
c0008c04:	83 c4 10             	add    esp,0x10
c0008c07:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c0a:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c10:	75 1d                	jne    c0008c2f <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c18:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c23:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c26:	50                   	push   eax
c0008c27:	e8 44 02 01 00       	call   c0018e70 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c2c:	83 c4 20             	add    esp,0x20
c0008c2f:	50                   	push   eax
c0008c30:	83 c3 02             	add    ebx,0x2
c0008c33:	50                   	push   eax
c0008c34:	6a 00                	push   0x0
c0008c36:	55                   	push   ebp
c0008c37:	e8 00 fc ff ff       	call   c000883c <VgaText::incrementCursor(bool)>
c0008c3c:	83 c4 10             	add    esp,0x10
c0008c3f:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c43:	75 0c                	jne    c0008c51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c45:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c49:	0f b7 db             	movzx  ebx,bx
c0008c4c:	01 db                	add    ebx,ebx
c0008c4e:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c51:	46                   	inc    esi
c0008c52:	e9 06 ff ff ff       	jmp    c0008b5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c57:	83 ec 0c             	sub    esp,0xc
c0008c5a:	55                   	push   ebp
c0008c5b:	e8 c4 f8 ff ff       	call   c0008524 <VgaText::updateCursor()>
c0008c60:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c67:	83 c4 1c             	add    esp,0x1c
c0008c6a:	5b                   	pop    ebx
c0008c6b:	5e                   	pop    esi
c0008c6c:	5f                   	pop    edi
c0008c6d:	5d                   	pop    ebp
c0008c6e:	c3                   	ret    
c0008c6f:	90                   	nop

c0008c70 <VgaText::VgaText(char const*)>:
c0008c70:	56                   	push   esi
c0008c71:	53                   	push   ebx
c0008c72:	83 ec 04             	sub    esp,0x4
c0008c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c79:	83 ec 08             	sub    esp,0x8
c0008c7c:	6a 00                	push   0x0
c0008c7e:	50                   	push   eax
c0008c7f:	e8 26 05 00 00       	call   c00091aa <UnixFile::UnixFile(int)>
c0008c84:	83 c4 10             	add    esp,0x10
c0008c87:	ba 4c 0f 02 c0       	mov    edx,0xc0020f4c
c0008c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c90:	89 10                	mov    DWORD PTR [eax],edx
c0008c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c96:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cac:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cef:	83 ec 0c             	sub    esp,0xc
c0008cf2:	6a 01                	push   0x1
c0008cf4:	e8 00 09 00 00       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c0008cf9:	83 c4 10             	add    esp,0x10
c0008cfc:	89 c2                	mov    edx,eax
c0008cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d02:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d05:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d12:	89 c6                	mov    esi,eax
c0008d14:	e8 cd f0 ff ff       	call   c0007de6 <Phys::allocatePage()>
c0008d19:	68 05 0c 00 00       	push   0xc05
c0008d1e:	56                   	push   esi
c0008d1f:	50                   	push   eax
c0008d20:	53                   	push   ebx
c0008d21:	e8 dc 0f 00 00       	call   c0009d02 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d26:	83 c4 10             	add    esp,0x10
c0008d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d30:	83 ec 04             	sub    esp,0x4
c0008d33:	68 a0 0f 00 00       	push   0xfa0
c0008d38:	6a 00                	push   0x0
c0008d3a:	50                   	push   eax
c0008d3b:	e8 b0 77 ff ff       	call   c00004f0 <memset>
c0008d40:	83 c4 10             	add    esp,0x10
c0008d43:	83 ec 04             	sub    esp,0x4
c0008d46:	6a 00                	push   0x0
c0008d48:	6a 07                	push   0x7
c0008d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4e:	e8 7b f8 ff ff       	call   c00085ce <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d53:	83 c4 10             	add    esp,0x10
c0008d56:	83 ec 04             	sub    esp,0x4
c0008d59:	6a 00                	push   0x0
c0008d5b:	6a 00                	push   0x0
c0008d5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d61:	e8 f6 f9 ff ff       	call   c000875c <VgaText::setCursor(int, int)>
c0008d66:	83 c4 10             	add    esp,0x10
c0008d69:	83 ec 0c             	sub    esp,0xc
c0008d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d70:	e8 49 fa ff ff       	call   c00087be <VgaText::clearScreen()>
c0008d75:	83 c4 10             	add    esp,0x10
c0008d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d84:	05 82 00 00 00       	add    eax,0x82
c0008d89:	83 ec 04             	sub    esp,0x4
c0008d8c:	68 80 00 00 00       	push   0x80
c0008d91:	6a 00                	push   0x0
c0008d93:	50                   	push   eax
c0008d94:	e8 57 77 ff ff       	call   c00004f0 <memset>
c0008d99:	83 c4 10             	add    esp,0x10
c0008d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008da0:	05 02 01 00 00       	add    eax,0x102
c0008da5:	83 ec 04             	sub    esp,0x4
c0008da8:	68 80 00 00 00       	push   0x80
c0008dad:	6a 00                	push   0x0
c0008daf:	50                   	push   eax
c0008db0:	e8 3b 77 ff ff       	call   c00004f0 <memset>
c0008db5:	83 c4 10             	add    esp,0x10
c0008db8:	90                   	nop
c0008db9:	83 c4 04             	add    esp,0x4
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <VgaText::receiveKey(unsigned char)>:
c0008dc0:	55                   	push   ebp
c0008dc1:	57                   	push   edi
c0008dc2:	56                   	push   esi
c0008dc3:	53                   	push   ebx
c0008dc4:	83 ec 2c             	sub    esp,0x2c
c0008dc7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dcb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcf:	89 fd                	mov    ebp,edi
c0008dd1:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd7:	0f 84 48 01 00 00    	je     c0008f25 <VgaText::receiveKey(unsigned char)+0x165>
c0008ddd:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008de3:	83 fd 08             	cmp    ebp,0x8
c0008de6:	75 6a                	jne    c0008e52 <VgaText::receiveKey(unsigned char)+0x92>
c0008de8:	83 ec 0c             	sub    esp,0xc
c0008deb:	56                   	push   esi
c0008dec:	e8 8f 77 ff ff       	call   c0000580 <strlen>
c0008df1:	83 c4 10             	add    esp,0x10
c0008df4:	85 c0                	test   eax,eax
c0008df6:	0f 84 ef 00 00 00    	je     c0008eeb <VgaText::receiveKey(unsigned char)+0x12b>
c0008dfc:	50                   	push   eax
c0008dfd:	50                   	push   eax
c0008dfe:	6a 08                	push   0x8
c0008e00:	53                   	push   ebx
c0008e01:	e8 7c fb ff ff       	call   c0008982 <VgaText::putchar(char)>
c0008e06:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e09:	e8 72 77 ff ff       	call   c0000580 <strlen>
c0008e0e:	83 c4 10             	add    esp,0x10
c0008e11:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e19:	83 fa 1f             	cmp    edx,0x1f
c0008e1c:	89 d0                	mov    eax,edx
c0008e1e:	7f 1c                	jg     c0008e3c <VgaText::receiveKey(unsigned char)+0x7c>
c0008e20:	83 e8 08             	sub    eax,0x8
c0008e23:	3c 02                	cmp    al,0x2
c0008e25:	76 15                	jbe    c0008e3c <VgaText::receiveKey(unsigned char)+0x7c>
c0008e27:	83 fa 0d             	cmp    edx,0xd
c0008e2a:	74 10                	je     c0008e3c <VgaText::receiveKey(unsigned char)+0x7c>
c0008e2c:	57                   	push   edi
c0008e2d:	57                   	push   edi
c0008e2e:	68 37 0f 02 c0       	push   0xc0020f37
c0008e33:	53                   	push   ebx
c0008e34:	e8 77 fc ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0008e39:	83 c4 10             	add    esp,0x10
c0008e3c:	83 ec 0c             	sub    esp,0xc
c0008e3f:	56                   	push   esi
c0008e40:	e8 3b 77 ff ff       	call   c0000580 <strlen>
c0008e45:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4d:	e9 96 00 00 00       	jmp    c0008ee8 <VgaText::receiveKey(unsigned char)+0x128>
c0008e52:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e58:	83 ec 0c             	sub    esp,0xc
c0008e5b:	50                   	push   eax
c0008e5c:	e8 1f 77 ff ff       	call   c0000580 <strlen>
c0008e61:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e68:	e8 13 77 ff ff       	call   c0000580 <strlen>
c0008e6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e71:	83 c4 10             	add    esp,0x10
c0008e74:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e78:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7d:	0f 87 a2 00 00 00    	ja     c0008f25 <VgaText::receiveKey(unsigned char)+0x165>
c0008e83:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e86:	3c 1e                	cmp    al,0x1e
c0008e88:	77 35                	ja     c0008ebf <VgaText::receiveKey(unsigned char)+0xff>
c0008e8a:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e8d:	3c 01                	cmp    al,0x1
c0008e8f:	76 2e                	jbe    c0008ebf <VgaText::receiveKey(unsigned char)+0xff>
c0008e91:	83 fd 0d             	cmp    ebp,0xd
c0008e94:	74 29                	je     c0008ebf <VgaText::receiveKey(unsigned char)+0xff>
c0008e96:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e99:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e9c:	68 3d 0f 02 c0       	push   0xc0020f3d
c0008ea1:	53                   	push   ebx
c0008ea2:	e8 7b fc ff ff       	call   c0008b22 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea7:	8d 47 40             	lea    eax,[edi+0x40]
c0008eaa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ead:	0f b6 c0             	movzx  eax,al
c0008eb0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb3:	50                   	push   eax
c0008eb4:	53                   	push   ebx
c0008eb5:	e8 f8 f9 ff ff       	call   c00088b2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eba:	83 c4 20             	add    esp,0x20
c0008ebd:	eb 11                	jmp    c0008ed0 <VgaText::receiveKey(unsigned char)+0x110>
c0008ebf:	51                   	push   ecx
c0008ec0:	89 f8                	mov    eax,edi
c0008ec2:	51                   	push   ecx
c0008ec3:	0f be c0             	movsx  eax,al
c0008ec6:	50                   	push   eax
c0008ec7:	53                   	push   ebx
c0008ec8:	e8 b5 fa ff ff       	call   c0008982 <VgaText::putchar(char)>
c0008ecd:	83 c4 10             	add    esp,0x10
c0008ed0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed5:	89 f8                	mov    eax,edi
c0008ed7:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008edb:	52                   	push   edx
c0008edc:	52                   	push   edx
c0008edd:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ee1:	50                   	push   eax
c0008ee2:	56                   	push   esi
c0008ee3:	e8 88 79 ff ff       	call   c0000870 <strcat>
c0008ee8:	83 c4 10             	add    esp,0x10
c0008eeb:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ef2:	75 0f                	jne    c0008f03 <VgaText::receiveKey(unsigned char)+0x143>
c0008ef4:	83 fd 1c             	cmp    ebp,0x1c
c0008ef7:	77 2c                	ja     c0008f25 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef9:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efe:	0f a3 e8             	bt     eax,ebp
c0008f01:	73 22                	jae    c0008f25 <VgaText::receiveKey(unsigned char)+0x165>
c0008f03:	50                   	push   eax
c0008f04:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f0a:	50                   	push   eax
c0008f0b:	56                   	push   esi
c0008f0c:	53                   	push   ebx
c0008f0d:	e8 5e 79 ff ff       	call   c0000870 <strcat>
c0008f12:	83 c4 0c             	add    esp,0xc
c0008f15:	68 80 00 00 00       	push   0x80
c0008f1a:	6a 00                	push   0x0
c0008f1c:	56                   	push   esi
c0008f1d:	e8 ce 75 ff ff       	call   c00004f0 <memset>
c0008f22:	83 c4 10             	add    esp,0x10
c0008f25:	83 c4 2c             	add    esp,0x2c
c0008f28:	5b                   	pop    ebx
c0008f29:	5e                   	pop    esi
c0008f2a:	5f                   	pop    edi
c0008f2b:	5d                   	pop    ebp
c0008f2c:	c3                   	ret    
c0008f2d:	90                   	nop

c0008f2e <VgaText::doUpdate()>:
c0008f2e:	c3                   	ret    
c0008f2f:	90                   	nop

c0008f30 <TSS::TSS()>:
c0008f30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f34:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f3b:	90                   	nop
c0008f3c:	c3                   	ret    
c0008f3d:	90                   	nop
c0008f3e:	66 90                	xchg   ax,ax

c0008f40 <TSS::setESP(unsigned long)>:
c0008f40:	55                   	push   ebp
c0008f41:	89 e5                	mov    ebp,esp
c0008f43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f49:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f4c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4f:	90                   	nop
c0008f50:	5d                   	pop    ebp
c0008f51:	c3                   	ret    
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::flush()>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	83 ec 10             	sub    esp,0x10
c0008f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5f:	83 c8 03             	or     eax,0x3
c0008f62:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f66:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f6a:	66 89 d0             	mov    ax,dx
c0008f6d:	0f 00 d8             	ltr    ax
c0008f70:	90                   	nop
c0008f71:	c9                   	leave  
c0008f72:	c3                   	ret    
c0008f73:	90                   	nop

c0008f74 <TSS::setup(unsigned long, unsigned long)>:
c0008f74:	55                   	push   ebp
c0008f75:	89 e5                	mov    ebp,esp
c0008f77:	83 ec 18             	sub    esp,0x18
c0008f7a:	83 ec 0c             	sub    esp,0xc
c0008f7d:	6a 68                	push   0x68
c0008f7f:	e8 53 eb ff ff       	call   c0007ad7 <malloc>
c0008f84:	83 c4 10             	add    esp,0x10
c0008f87:	89 c2                	mov    edx,eax
c0008f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f95:	83 ec 04             	sub    esp,0x4
c0008f98:	6a 68                	push   0x68
c0008f9a:	6a 00                	push   0x0
c0008f9c:	50                   	push   eax
c0008f9d:	e8 4e 75 ff ff       	call   c00004f0 <memset>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fab:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcf:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdb:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fff:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009017:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000901a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009023:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009026:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009039:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903c:	0f 20 da             	mov    edx,cr3
c000903f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009042:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009045:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904e:	83 ec 08             	sub    esp,0x8
c0009051:	50                   	push   eax
c0009052:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009055:	50                   	push   eax
c0009056:	e8 eb e2 ff ff       	call   c0007346 <GDTEntry::setBase(unsigned int)>
c000905b:	83 c4 10             	add    esp,0x10
c000905e:	83 ec 08             	sub    esp,0x8
c0009061:	6a 68                	push   0x68
c0009063:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009066:	50                   	push   eax
c0009067:	e8 f6 e2 ff ff       	call   c0007362 <GDTEntry::setLimit(unsigned int)>
c000906c:	83 c4 10             	add    esp,0x10
c000906f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009073:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009076:	83 e0 0f             	and    eax,0xf
c0009079:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000907c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907f:	83 c8 40             	or     eax,0x40
c0009082:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009085:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000908a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009090:	05 78 01 00 00       	add    eax,0x178
c0009095:	83 ec 04             	sub    esp,0x4
c0009098:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000909b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909e:	50                   	push   eax
c000909f:	e8 f2 e2 ff ff       	call   c0007396 <GDT::addEntry(GDTEntry)>
c00090a4:	83 c4 10             	add    esp,0x10
c00090a7:	89 c2                	mov    edx,eax
c00090a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090ac:	89 10                	mov    DWORD PTR [eax],edx
c00090ae:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b9:	05 78 01 00 00       	add    eax,0x178
c00090be:	83 ec 0c             	sub    esp,0xc
c00090c1:	50                   	push   eax
c00090c2:	e8 f9 e2 ff ff       	call   c00073c0 <GDT::flush()>
c00090c7:	83 c4 10             	add    esp,0x10
c00090ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cf:	c9                   	leave  
c00090d0:	c3                   	ret    
c00090d1:	90                   	nop

c00090d2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090dd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090e2:	75 08                	jne    c00090ec <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090ea:	eb 38                	jmp    c0009124 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090ec:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090f1:	75 17                	jne    c000910a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009101:	8b 10                	mov    edx,DWORD PTR [eax]
c0009103:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009107:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000910a:	89 c1                	mov    ecx,eax
c000910c:	83 e1 fd             	and    ecx,0xfffffffd
c000910f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009115:	74 cd                	je     c00090e4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009117:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000911c:	83 e0 ef             	and    eax,0xffffffef
c000911f:	83 f8 08             	cmp    eax,0x8
c0009122:	76 c0                	jbe    c00090e4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009124:	31 c0                	xor    eax,eax
c0009126:	c3                   	ret    
c0009127:	90                   	nop

c0009128 <ReservedFilename::isAtty()>:
c0009128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000912c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912f:	31 c0                	xor    eax,eax
c0009131:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009137:	74 09                	je     c0009142 <ReservedFilename::isAtty()+0x1a>
c0009139:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913f:	0f 94 c0             	sete   al
c0009142:	c3                   	ret    
c0009143:	90                   	nop

c0009144 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009148:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000914c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009153:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009158:	75 08                	jne    c0009162 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000915a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009160:	eb 3d                	jmp    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009162:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009167:	75 17                	jne    c0009180 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009169:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009171:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009177:	8b 10                	mov    edx,DWORD PTR [eax]
c0009179:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000917d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009180:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009185:	75 04                	jne    c000918b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009187:	89 0a                	mov    DWORD PTR [edx],ecx
c0009189:	eb 14                	jmp    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000918b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009190:	74 c8                	je     c000915a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009192:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009197:	83 e0 ef             	and    eax,0xffffffef
c000919a:	83 f8 08             	cmp    eax,0x8
c000919d:	76 bb                	jbe    c000915a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919f:	31 c0                	xor    eax,eax
c00091a1:	c3                   	ret    

c00091a2 <UnixFile::getFileDescriptor()>:
c00091a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a9:	c3                   	ret    

c00091aa <UnixFile::UnixFile(int)>:
c00091aa:	53                   	push   ebx
c00091ab:	83 ec 28             	sub    esp,0x28
c00091ae:	ba 14 10 02 c0       	mov    edx,0xc0021014
c00091b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b7:	89 10                	mov    DWORD PTR [eax],edx
c00091b9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091c1:	0f 8f 90 01 00 00    	jg     c0009357 <UnixFile::UnixFile(int)+0x1ad>
c00091c7:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c00091cc:	8d 50 01             	lea    edx,[eax+0x1]
c00091cf:	89 15 00 38 02 c0    	mov    DWORD PTR ds:0xc0023800,edx
c00091d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091dc:	83 ec 08             	sub    esp,0x8
c00091df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091e3:	68 98 6f 02 c0       	push   0xc0026f98
c00091e8:	e8 eb 68 01 00       	call   c001fad8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c00091f5:	83 f0 01             	xor    eax,0x1
c00091f8:	0f b6 c0             	movzx  eax,al
c00091fb:	85 c0                	test   eax,eax
c00091fd:	0f 84 55 01 00 00    	je     c0009358 <UnixFile::UnixFile(int)+0x1ae>
c0009203:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000920a:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009212:	83 ec 0c             	sub    esp,0xc
c0009215:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009219:	e8 b9 e8 ff ff       	call   c0007ad7 <malloc>
c000921e:	83 c4 10             	add    esp,0x10
c0009221:	89 c3                	mov    ebx,eax
c0009223:	83 ec 08             	sub    esp,0x8
c0009226:	68 03 ff ff 0f       	push   0xfffff03
c000922b:	53                   	push   ebx
c000922c:	e8 2d 01 00 00       	call   c000935e <ReservedFilename::ReservedFilename(int)>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000923a:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009242:	83 ec 0c             	sub    esp,0xc
c0009245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009249:	e8 89 e8 ff ff       	call   c0007ad7 <malloc>
c000924e:	83 c4 10             	add    esp,0x10
c0009251:	89 c3                	mov    ebx,eax
c0009253:	83 ec 08             	sub    esp,0x8
c0009256:	68 01 ff ff 0f       	push   0xfffff01
c000925b:	53                   	push   ebx
c000925c:	e8 fd 00 00 00       	call   c000935e <ReservedFilename::ReservedFilename(int)>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000926a:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009272:	83 ec 0c             	sub    esp,0xc
c0009275:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009279:	e8 59 e8 ff ff       	call   c0007ad7 <malloc>
c000927e:	83 c4 10             	add    esp,0x10
c0009281:	89 c3                	mov    ebx,eax
c0009283:	83 ec 08             	sub    esp,0x8
c0009286:	68 00 ff ff 0f       	push   0xfffff00
c000928b:	53                   	push   ebx
c000928c:	e8 cd 00 00 00       	call   c000935e <ReservedFilename::ReservedFilename(int)>
c0009291:	83 c4 10             	add    esp,0x10
c0009294:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c000929a:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092a2:	83 ec 0c             	sub    esp,0xc
c00092a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a9:	e8 29 e8 ff ff       	call   c0007ad7 <malloc>
c00092ae:	83 c4 10             	add    esp,0x10
c00092b1:	89 c3                	mov    ebx,eax
c00092b3:	83 ec 08             	sub    esp,0x8
c00092b6:	68 02 ff ff 0f       	push   0xfffff02
c00092bb:	53                   	push   ebx
c00092bc:	e8 9d 00 00 00       	call   c000935e <ReservedFilename::ReservedFilename(int)>
c00092c1:	83 c4 10             	add    esp,0x10
c00092c4:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092ca:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092d2:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d7:	7f 7f                	jg     c0009358 <UnixFile::UnixFile(int)+0x1ae>
c00092d9:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092e1:	83 ec 0c             	sub    esp,0xc
c00092e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e8:	e8 ea e7 ff ff       	call   c0007ad7 <malloc>
c00092ed:	83 c4 10             	add    esp,0x10
c00092f0:	89 c3                	mov    ebx,eax
c00092f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f6:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092fb:	83 ec 08             	sub    esp,0x8
c00092fe:	50                   	push   eax
c00092ff:	53                   	push   ebx
c0009300:	e8 59 00 00 00       	call   c000935e <ReservedFilename::ReservedFilename(int)>
c0009305:	83 c4 10             	add    esp,0x10
c0009308:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930c:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009313:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000931b:	83 ec 0c             	sub    esp,0xc
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	e8 b0 e7 ff ff       	call   c0007ad7 <malloc>
c0009327:	83 c4 10             	add    esp,0x10
c000932a:	89 c3                	mov    ebx,eax
c000932c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009330:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009335:	83 ec 08             	sub    esp,0x8
c0009338:	50                   	push   eax
c0009339:	53                   	push   ebx
c000933a:	e8 1f 00 00 00       	call   c000935e <ReservedFilename::ReservedFilename(int)>
c000933f:	83 c4 10             	add    esp,0x10
c0009342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009346:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c000934d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009352:	e9 7b ff ff ff       	jmp    c00092d2 <UnixFile::UnixFile(int)+0x128>
c0009357:	90                   	nop
c0009358:	83 c4 28             	add    esp,0x28
c000935b:	5b                   	pop    ebx
c000935c:	c3                   	ret    
c000935d:	90                   	nop

c000935e <ReservedFilename::ReservedFilename(int)>:
c000935e:	83 ec 0c             	sub    esp,0xc
c0009361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009365:	83 ec 08             	sub    esp,0x8
c0009368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000936c:	50                   	push   eax
c000936d:	e8 38 fe ff ff       	call   c00091aa <UnixFile::UnixFile(int)>
c0009372:	83 c4 10             	add    esp,0x10
c0009375:	ba 30 10 02 c0       	mov    edx,0xc0021030
c000937a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937e:	89 10                	mov    DWORD PTR [eax],edx
c0009380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009384:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009388:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000938b:	90                   	nop
c000938c:	83 c4 0c             	add    esp,0xc
c000938f:	c3                   	ret    

c0009390 <UnixFile::~UnixFile()>:
c0009390:	83 ec 1c             	sub    esp,0x1c
c0009393:	ba 14 10 02 c0       	mov    edx,0xc0021014
c0009398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939c:	89 10                	mov    DWORD PTR [eax],edx
c000939e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093aa:	7f 76                	jg     c0009422 <UnixFile::~UnixFile()+0x92>
c00093ac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b4:	83 ec 0c             	sub    esp,0xc
c00093b7:	68 98 6f 02 c0       	push   0xc0026f98
c00093bc:	e8 eb 67 01 00       	call   c001fbac <LinkedList<UnixFile>::getFirstElement()>
c00093c1:	83 c4 10             	add    esp,0x10
c00093c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 6f 02 c0       	push   0xc0026f98
c00093d0:	e8 df 67 01 00       	call   c001fbb4 <LinkedList<UnixFile>::removeFirst()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093dc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093e0:	74 43                	je     c0009425 <UnixFile::~UnixFile()+0x95>
c00093e2:	83 ec 08             	sub    esp,0x8
c00093e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e9:	68 98 6f 02 c0       	push   0xc0026f98
c00093ee:	e8 e5 66 01 00       	call   c001fad8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093fa:	8d 50 01             	lea    edx,[eax+0x1]
c00093fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009401:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009406:	0f 94 c0             	sete   al
c0009409:	0f b6 c0             	movzx  eax,al
c000940c:	85 c0                	test   eax,eax
c000940e:	74 a4                	je     c00093b4 <UnixFile::~UnixFile()+0x24>
c0009410:	83 ec 0c             	sub    esp,0xc
c0009413:	68 ec 0f 02 c0       	push   0xc0020fec
c0009418:	e8 ea 81 00 00       	call   c0011607 <KePanic(char const*)>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	eb 92                	jmp    c00093b4 <UnixFile::~UnixFile()+0x24>
c0009422:	90                   	nop
c0009423:	eb 01                	jmp    c0009426 <UnixFile::~UnixFile()+0x96>
c0009425:	90                   	nop
c0009426:	90                   	nop
c0009427:	83 c4 1c             	add    esp,0x1c
c000942a:	c3                   	ret    
c000942b:	90                   	nop

c000942c <UnixFile::~UnixFile()>:
c000942c:	83 ec 0c             	sub    esp,0xc
c000942f:	83 ec 0c             	sub    esp,0xc
c0009432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009436:	e8 55 ff ff ff       	call   c0009390 <UnixFile::~UnixFile()>
c000943b:	83 c4 10             	add    esp,0x10
c000943e:	83 ec 08             	sub    esp,0x8
c0009441:	6a 0c                	push   0xc
c0009443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009447:	e8 c4 13 00 00       	call   c000a810 <operator delete(void*, unsigned long)>
c000944c:	83 c4 10             	add    esp,0x10
c000944f:	83 c4 0c             	add    esp,0xc
c0009452:	c3                   	ret    
c0009453:	90                   	nop

c0009454 <ReservedFilename::~ReservedFilename()>:
c0009454:	83 ec 0c             	sub    esp,0xc
c0009457:	ba 30 10 02 c0       	mov    edx,0xc0021030
c000945c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009460:	89 10                	mov    DWORD PTR [eax],edx
c0009462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009466:	83 ec 0c             	sub    esp,0xc
c0009469:	50                   	push   eax
c000946a:	e8 21 ff ff ff       	call   c0009390 <UnixFile::~UnixFile()>
c000946f:	83 c4 10             	add    esp,0x10
c0009472:	90                   	nop
c0009473:	83 c4 0c             	add    esp,0xc
c0009476:	c3                   	ret    
c0009477:	90                   	nop

c0009478 <ReservedFilename::~ReservedFilename()>:
c0009478:	83 ec 0c             	sub    esp,0xc
c000947b:	83 ec 0c             	sub    esp,0xc
c000947e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009482:	e8 cd ff ff ff       	call   c0009454 <ReservedFilename::~ReservedFilename()>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	83 ec 08             	sub    esp,0x8
c000948d:	6a 0c                	push   0xc
c000948f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009493:	e8 78 13 00 00       	call   c000a810 <operator delete(void*, unsigned long)>
c0009498:	83 c4 10             	add    esp,0x10
c000949b:	83 c4 0c             	add    esp,0xc
c000949e:	c3                   	ret    

c000949f <KeGetFileFromDescriptor(int)>:
c000949f:	53                   	push   ebx
c00094a0:	83 ec 08             	sub    esp,0x8
c00094a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094ad:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094b3:	7f 2c                	jg     c00094e1 <KeGetFileFromDescriptor(int)+0x42>
c00094b5:	83 ec 0c             	sub    esp,0xc
c00094b8:	68 98 6f 02 c0       	push   0xc0026f98
c00094bd:	e8 ea 66 01 00       	call   c001fbac <LinkedList<UnixFile>::getFirstElement()>
c00094c2:	83 c4 10             	add    esp,0x10
c00094c5:	85 c0                	test   eax,eax
c00094c7:	75 04                	jne    c00094cd <KeGetFileFromDescriptor(int)+0x2e>
c00094c9:	31 c0                	xor    eax,eax
c00094cb:	eb 6e                	jmp    c000953b <KeGetFileFromDescriptor(int)+0x9c>
c00094cd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094d0:	74 69                	je     c000953b <KeGetFileFromDescriptor(int)+0x9c>
c00094d2:	52                   	push   edx
c00094d3:	52                   	push   edx
c00094d4:	50                   	push   eax
c00094d5:	68 98 6f 02 c0       	push   0xc0026f98
c00094da:	e8 77 67 01 00       	call   c001fc56 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094df:	eb e1                	jmp    c00094c2 <KeGetFileFromDescriptor(int)+0x23>
c00094e1:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e7:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094ec:	74 4d                	je     c000953b <KeGetFileFromDescriptor(int)+0x9c>
c00094ee:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f4:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c00094f9:	74 40                	je     c000953b <KeGetFileFromDescriptor(int)+0x9c>
c00094fb:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009501:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009506:	74 33                	je     c000953b <KeGetFileFromDescriptor(int)+0x9c>
c0009508:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950e:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009513:	74 26                	je     c000953b <KeGetFileFromDescriptor(int)+0x9c>
c0009515:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000951b:	83 f8 08             	cmp    eax,0x8
c000951e:	77 09                	ja     c0009529 <KeGetFileFromDescriptor(int)+0x8a>
c0009520:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009527:	eb 12                	jmp    c000953b <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952f:	83 fb 08             	cmp    ebx,0x8
c0009532:	77 95                	ja     c00094c9 <KeGetFileFromDescriptor(int)+0x2a>
c0009534:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000953b:	83 c4 08             	add    esp,0x8
c000953e:	5b                   	pop    ebx
c000953f:	c3                   	ret    

c0009540 <__static_initialization_and_destruction_0(int, int)>:
c0009540:	83 ec 0c             	sub    esp,0xc
c0009543:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009548:	75 34                	jne    c000957e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000954a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009552:	75 2a                	jne    c000957e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	68 98 6f 02 c0       	push   0xc0026f98
c000955c:	e8 35 65 01 00       	call   c001fa96 <LinkedList<UnixFile>::LinkedList()>
c0009561:	83 c4 10             	add    esp,0x10
c0009564:	83 ec 04             	sub    esp,0x4
c0009567:	68 84 37 02 c0       	push   0xc0023784
c000956c:	68 98 6f 02 c0       	push   0xc0026f98
c0009571:	68 94 fa 01 c0       	push   0xc001fa94
c0009576:	e8 45 12 00 00       	call   c000a7c0 <__cxa_atexit>
c000957b:	83 c4 10             	add    esp,0x10
c000957e:	90                   	nop
c000957f:	83 c4 0c             	add    esp,0xc
c0009582:	c3                   	ret    

c0009583 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009583:	83 ec 0c             	sub    esp,0xc
c0009586:	83 ec 08             	sub    esp,0x8
c0009589:	68 ff ff 00 00       	push   0xffff
c000958e:	6a 01                	push   0x1
c0009590:	e8 ab ff ff ff       	call   c0009540 <__static_initialization_and_destruction_0(int, int)>
c0009595:	83 c4 10             	add    esp,0x10
c0009598:	83 c4 0c             	add    esp,0xc
c000959b:	c3                   	ret    

c000959c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000959c:	53                   	push   ebx
c000959d:	8b 15 08 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023808
c00095a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095ab:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095b1:	89 d8                	mov    eax,ebx
c00095b3:	d1 e8                	shr    eax,1
c00095b5:	01 d0                	add    eax,edx
c00095b7:	80 e3 01             	and    bl,0x1
c00095ba:	8a 10                	mov    dl,BYTE PTR [eax]
c00095bc:	75 09                	jne    c00095c7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095be:	83 e2 f0             	and    edx,0xfffffff0
c00095c1:	09 ca                	or     edx,ecx
c00095c3:	88 10                	mov    BYTE PTR [eax],dl
c00095c5:	5b                   	pop    ebx
c00095c6:	c3                   	ret    
c00095c7:	0f b6 c9             	movzx  ecx,cl
c00095ca:	83 e2 0f             	and    edx,0xf
c00095cd:	c1 e1 04             	shl    ecx,0x4
c00095d0:	09 ca                	or     edx,ecx
c00095d2:	88 10                	mov    BYTE PTR [eax],dl
c00095d4:	5b                   	pop    ebx
c00095d5:	c3                   	ret    

c00095d6 <Virt::getPageState(unsigned long)>:
c00095d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095da:	8b 0d 08 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023808
c00095e0:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e6:	89 d0                	mov    eax,edx
c00095e8:	d1 e8                	shr    eax,1
c00095ea:	80 e2 01             	and    dl,0x1
c00095ed:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095f0:	74 03                	je     c00095f5 <Virt::getPageState(unsigned long)+0x1f>
c00095f2:	c1 e8 04             	shr    eax,0x4
c00095f5:	83 e0 0f             	and    eax,0xf
c00095f8:	c3                   	ret    

c00095f9 <Virt::allocateKernelVirtualPages(int)>:
c00095f9:	55                   	push   ebp
c00095fa:	57                   	push   edi
c00095fb:	56                   	push   esi
c00095fc:	31 f6                	xor    esi,esi
c00095fe:	53                   	push   ebx
c00095ff:	31 db                	xor    ebx,ebx
c0009601:	83 ec 1c             	sub    esp,0x1c
c0009604:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009609:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000960d:	8b 2d 04 38 02 c0    	mov    ebp,DWORD PTR ds:0xc0023804
c0009613:	55                   	push   ebp
c0009614:	e8 bd ff ff ff       	call   c00095d6 <Virt::getPageState(unsigned long)>
c0009619:	5a                   	pop    edx
c000961a:	84 c0                	test   al,al
c000961c:	75 3d                	jne    c000965b <Virt::allocateKernelVirtualPages(int)+0x62>
c000961e:	85 db                	test   ebx,ebx
c0009620:	0f 44 f5             	cmove  esi,ebp
c0009623:	83 c3 01             	add    ebx,0x1
c0009626:	39 fb                	cmp    ebx,edi
c0009628:	74 5e                	je     c0009688 <Virt::allocateKernelVirtualPages(int)+0x8f>
c000962a:	83 c5 01             	add    ebp,0x1
c000962d:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009633:	76 33                	jbe    c0009668 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009635:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c000963a:	c7 05 04 38 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023804,0xc8000
c0009644:	75 2a                	jne    c0009670 <Virt::allocateKernelVirtualPages(int)+0x77>
c0009646:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000964b:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0009650:	55                   	push   ebp
c0009651:	e8 80 ff ff ff       	call   c00095d6 <Virt::getPageState(unsigned long)>
c0009656:	5a                   	pop    edx
c0009657:	84 c0                	test   al,al
c0009659:	74 c3                	je     c000961e <Virt::allocateKernelVirtualPages(int)+0x25>
c000965b:	83 c5 01             	add    ebp,0x1
c000965e:	31 db                	xor    ebx,ebx
c0009660:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009666:	77 cd                	ja     c0009635 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009668:	89 2d 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,ebp
c000966e:	eb a3                	jmp    c0009613 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009670:	83 ec 0c             	sub    esp,0xc
c0009673:	68 44 10 02 c0       	push   0xc0021044
c0009678:	e8 8a 7f 00 00       	call   c0011607 <KePanic(char const*)>
c000967d:	8b 2d 04 38 02 c0    	mov    ebp,DWORD PTR ds:0xc0023804
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	eb 8b                	jmp    c0009613 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009688:	89 35 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,esi
c000968e:	83 fb 01             	cmp    ebx,0x1
c0009691:	74 63                	je     c00096f6 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0009693:	85 ff                	test   edi,edi
c0009695:	74 41                	je     c00096d8 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009697:	89 f0                	mov    eax,esi
c0009699:	31 db                	xor    ebx,ebx
c000969b:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969e:	eb 16                	jmp    c00096b6 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00096a0:	6a 01                	push   0x1
c00096a2:	83 c3 01             	add    ebx,0x1
c00096a5:	50                   	push   eax
c00096a6:	e8 f1 fe ff ff       	call   c000959c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ab:	39 fb                	cmp    ebx,edi
c00096ad:	58                   	pop    eax
c00096ae:	5a                   	pop    edx
c00096af:	74 27                	je     c00096d8 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096b1:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c00096b6:	8d 50 01             	lea    edx,[eax+0x1]
c00096b9:	85 db                	test   ebx,ebx
c00096bb:	89 15 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,edx
c00096c1:	74 22                	je     c00096e5 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096c3:	39 dd                	cmp    ebp,ebx
c00096c5:	75 d9                	jne    c00096a0 <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c7:	6a 03                	push   0x3
c00096c9:	83 c3 01             	add    ebx,0x1
c00096cc:	50                   	push   eax
c00096cd:	e8 ca fe ff ff       	call   c000959c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096d2:	39 fb                	cmp    ebx,edi
c00096d4:	59                   	pop    ecx
c00096d5:	58                   	pop    eax
c00096d6:	75 d9                	jne    c00096b1 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d8:	83 c4 1c             	add    esp,0x1c
c00096db:	89 f0                	mov    eax,esi
c00096dd:	5b                   	pop    ebx
c00096de:	c1 e0 0c             	shl    eax,0xc
c00096e1:	5e                   	pop    esi
c00096e2:	5f                   	pop    edi
c00096e3:	5d                   	pop    ebp
c00096e4:	c3                   	ret    
c00096e5:	6a 02                	push   0x2
c00096e7:	bb 01 00 00 00       	mov    ebx,0x1
c00096ec:	50                   	push   eax
c00096ed:	e8 aa fe ff ff       	call   c000959c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096f2:	58                   	pop    eax
c00096f3:	5a                   	pop    edx
c00096f4:	eb bb                	jmp    c00096b1 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f6:	6a 04                	push   0x4
c00096f8:	56                   	push   esi
c00096f9:	8d 46 01             	lea    eax,[esi+0x1]
c00096fc:	a3 04 38 02 c0       	mov    ds:0xc0023804,eax
c0009701:	e8 96 fe ff ff       	call   c000959c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009706:	89 f0                	mov    eax,esi
c0009708:	59                   	pop    ecx
c0009709:	c1 e0 0c             	shl    eax,0xc
c000970c:	5b                   	pop    ebx
c000970d:	83 c4 1c             	add    esp,0x1c
c0009710:	5b                   	pop    ebx
c0009711:	5e                   	pop    esi
c0009712:	5f                   	pop    edi
c0009713:	5d                   	pop    ebp
c0009714:	c3                   	ret    

c0009715 <Virt::freeSwapfilePage(unsigned long)>:
c0009715:	53                   	push   ebx
c0009716:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c000971c:	b8 01 00 00 00       	mov    eax,0x1
c0009721:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009725:	d3 e0                	shl    eax,cl
c0009727:	89 cb                	mov    ebx,ecx
c0009729:	c1 eb 05             	shr    ebx,0x5
c000972c:	f7 d0                	not    eax
c000972e:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0009731:	21 c1                	and    ecx,eax
c0009733:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009736:	5b                   	pop    ebx
c0009737:	c3                   	ret    

c0009738 <Virt::swapIDToSector(unsigned long)>:
c0009738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000973c:	8b 15 0c 38 02 c0    	mov    edx,DWORD PTR ds:0xc002380c
c0009742:	8b 0d 14 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023814
c0009748:	0f af c2             	imul   eax,edx
c000974b:	01 c8                	add    eax,ecx
c000974d:	c3                   	ret    

c000974e <Virt::allocateSwapfilePage()>:
c000974e:	55                   	push   ebp
c000974f:	31 d2                	xor    edx,edx
c0009751:	57                   	push   edi
c0009752:	56                   	push   esi
c0009753:	53                   	push   ebx
c0009754:	83 ec 0c             	sub    esp,0xc
c0009757:	8b 1d 10 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023810
c000975d:	8b 0d 0c 38 02 c0    	mov    ecx,DWORD PTR ds:0xc002380c
c0009763:	89 d8                	mov    eax,ebx
c0009765:	f7 f1                	div    ecx
c0009767:	39 cb                	cmp    ebx,ecx
c0009769:	72 2f                	jb     c000979a <Virt::allocateSwapfilePage()+0x4c>
c000976b:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c0009771:	8b 16                	mov    edx,DWORD PTR [esi]
c0009773:	f6 c2 01             	test   dl,0x1
c0009776:	74 3e                	je     c00097b6 <Virt::allocateSwapfilePage()+0x68>
c0009778:	31 c9                	xor    ecx,ecx
c000977a:	bf 01 00 00 00       	mov    edi,0x1
c000977f:	eb 12                	jmp    c0009793 <Virt::allocateSwapfilePage()+0x45>
c0009781:	89 ca                	mov    edx,ecx
c0009783:	89 fd                	mov    ebp,edi
c0009785:	c1 ea 05             	shr    edx,0x5
c0009788:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000978b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000978d:	d3 e5                	shl    ebp,cl
c000978f:	85 ea                	test   edx,ebp
c0009791:	74 2c                	je     c00097bf <Virt::allocateSwapfilePage()+0x71>
c0009793:	83 c1 01             	add    ecx,0x1
c0009796:	39 c8                	cmp    eax,ecx
c0009798:	77 e7                	ja     c0009781 <Virt::allocateSwapfilePage()+0x33>
c000979a:	83 ec 0c             	sub    esp,0xc
c000979d:	68 d8 12 02 c0       	push   0xc00212d8
c00097a2:	e8 60 7e 00 00       	call   c0011607 <KePanic(char const*)>
c00097a7:	83 c4 10             	add    esp,0x10
c00097aa:	31 c9                	xor    ecx,ecx
c00097ac:	83 c4 0c             	add    esp,0xc
c00097af:	89 c8                	mov    eax,ecx
c00097b1:	5b                   	pop    ebx
c00097b2:	5e                   	pop    esi
c00097b3:	5f                   	pop    edi
c00097b4:	5d                   	pop    ebp
c00097b5:	c3                   	ret    
c00097b6:	89 f3                	mov    ebx,esi
c00097b8:	bd 01 00 00 00       	mov    ebp,0x1
c00097bd:	31 c9                	xor    ecx,ecx
c00097bf:	09 ea                	or     edx,ebp
c00097c1:	89 c8                	mov    eax,ecx
c00097c3:	89 13                	mov    DWORD PTR [ebx],edx
c00097c5:	83 c4 0c             	add    esp,0xc
c00097c8:	5b                   	pop    ebx
c00097c9:	5e                   	pop    esi
c00097ca:	5f                   	pop    edi
c00097cb:	5d                   	pop    ebp
c00097cc:	c3                   	ret    

c00097cd <Virt::virtualMemorySetup()>:
c00097cd:	53                   	push   ebx
c00097ce:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097d3:	6a 0f                	push   0xf
c00097d5:	53                   	push   ebx
c00097d6:	83 c3 01             	add    ebx,0x1
c00097d9:	e8 be fd ff ff       	call   c000959c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097de:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e4:	58                   	pop    eax
c00097e5:	5a                   	pop    edx
c00097e6:	75 eb                	jne    c00097d3 <Virt::virtualMemorySetup()+0x6>
c00097e8:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097ed:	6a 00                	push   0x0
c00097ef:	53                   	push   ebx
c00097f0:	83 c3 01             	add    ebx,0x1
c00097f3:	e8 a4 fd ff ff       	call   c000959c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fe:	59                   	pop    ecx
c00097ff:	58                   	pop    eax
c0009800:	75 eb                	jne    c00097ed <Virt::virtualMemorySetup()+0x20>
c0009802:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009807:	6a 0f                	push   0xf
c0009809:	53                   	push   ebx
c000980a:	83 c3 01             	add    ebx,0x1
c000980d:	e8 8a fd ff ff       	call   c000959c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009812:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009818:	58                   	pop    eax
c0009819:	5a                   	pop    edx
c000981a:	75 eb                	jne    c0009807 <Virt::virtualMemorySetup()+0x3a>
c000981c:	5b                   	pop    ebx
c000981d:	c3                   	ret    

c000981e <Virt::setupPageSwapping(int)>:
c000981e:	53                   	push   ebx
c000981f:	83 ec 0c             	sub    esp,0xc
c0009822:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009827:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000982b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009831:	8b 10                	mov    edx,DWORD PTR [eax]
c0009833:	53                   	push   ebx
c0009834:	68 ef 12 02 c0       	push   0xc00212ef
c0009839:	50                   	push   eax
c000983a:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000983d:	c1 e3 0b             	shl    ebx,0xb
c0009840:	89 1d 10 38 02 c0    	mov    DWORD PTR ds:0xc0023810,ebx
c0009846:	c1 eb 08             	shr    ebx,0x8
c0009849:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000984c:	c6 05 18 38 02 c0 43 	mov    BYTE PTR ds:0xc0023818,0x43
c0009853:	c7 05 0c 38 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002380c,0x8
c000985d:	a3 14 38 02 c0       	mov    ds:0xc0023814,eax
c0009862:	e8 70 e2 ff ff       	call   c0007ad7 <malloc>
c0009867:	31 d2                	xor    edx,edx
c0009869:	83 c4 0c             	add    esp,0xc
c000986c:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c0009871:	89 c1                	mov    ecx,eax
c0009873:	a1 10 38 02 c0       	mov    eax,ds:0xc0023810
c0009878:	f7 35 0c 38 02 c0    	div    DWORD PTR ds:0xc002380c
c000987e:	c1 e8 05             	shr    eax,0x5
c0009881:	50                   	push   eax
c0009882:	6a 00                	push   0x0
c0009884:	51                   	push   ecx
c0009885:	e8 66 6c ff ff       	call   c00004f0 <memset>
c000988a:	83 c4 18             	add    esp,0x18
c000988d:	5b                   	pop    ebx
c000988e:	c3                   	ret    
c000988f:	90                   	nop

c0009890 <VAS::setCPUSpecific(unsigned long)>:
c0009890:	c3                   	ret    
c0009891:	90                   	nop

c0009892 <VAS::VAS(VAS*)>:
c0009892:	83 ec 0c             	sub    esp,0xc
c0009895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009899:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098ab:	83 ec 0c             	sub    esp,0xc
c00098ae:	68 64 10 02 c0       	push   0xc0021064
c00098b3:	e8 4f 7d 00 00       	call   c0011607 <KePanic(char const*)>
c00098b8:	83 c4 10             	add    esp,0x10
c00098bb:	90                   	nop
c00098bc:	83 c4 0c             	add    esp,0xc
c00098bf:	c3                   	ret    

c00098c0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c4:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c9:	89 c2                	mov    edx,eax
c00098cb:	c1 ea 16             	shr    edx,0x16
c00098ce:	c1 e8 0a             	shr    eax,0xa
c00098d1:	83 f9 01             	cmp    ecx,0x1
c00098d4:	19 c9                	sbb    ecx,ecx
c00098d6:	25 fc 0f 00 00       	and    eax,0xffc
c00098db:	c1 e2 0c             	shl    edx,0xc
c00098de:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e4:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098eb:	01 d0                	add    eax,edx
c00098ed:	c3                   	ret    

c00098ee <VAS::getPageTableEntry(unsigned long)>:
c00098ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098f2:	89 ca                	mov    edx,ecx
c00098f4:	c1 ea 16             	shr    edx,0x16
c00098f7:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098fd:	c1 e9 0a             	shr    ecx,0xa
c0009900:	c1 e0 0c             	shl    eax,0xc
c0009903:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009909:	8d 04 08             	lea    eax,[eax+ecx*1]
c000990c:	c3                   	ret    

c000990d <Virt::freeKernelVirtualPages(unsigned long)>:
c000990d:	55                   	push   ebp
c000990e:	57                   	push   edi
c000990f:	bf 01 00 00 00       	mov    edi,0x1
c0009914:	56                   	push   esi
c0009915:	53                   	push   ebx
c0009916:	83 ec 1c             	sub    esp,0x1c
c0009919:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000991d:	c1 ee 0c             	shr    esi,0xc
c0009920:	eb 48                	jmp    c000996a <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009922:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009927:	83 ec 08             	sub    esp,0x8
c000992a:	55                   	push   ebp
c000992b:	50                   	push   eax
c000992c:	e8 bd ff ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c0009931:	83 c4 10             	add    esp,0x10
c0009934:	8b 10                	mov    edx,DWORD PTR [eax]
c0009936:	f6 c6 04             	test   dh,0x4
c0009939:	75 70                	jne    c00099ab <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000993b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009941:	83 fb 04             	cmp    ebx,0x4
c0009944:	0f 84 8a 00 00 00    	je     c00099d4 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000994a:	83 fb 02             	cmp    ebx,0x2
c000994d:	0f 84 9a 00 00 00    	je     c00099ed <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009953:	83 fb 03             	cmp    ebx,0x3
c0009956:	0f 84 be 00 00 00    	je     c0009a1a <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000995c:	83 fb 01             	cmp    ebx,0x1
c000995f:	0f 84 a2 00 00 00    	je     c0009a07 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009965:	83 c6 01             	add    esi,0x1
c0009968:	31 ff                	xor    edi,edi
c000996a:	56                   	push   esi
c000996b:	89 f5                	mov    ebp,esi
c000996d:	e8 64 fc ff ff       	call   c00095d6 <Virt::getPageState(unsigned long)>
c0009972:	c1 e5 0c             	shl    ebp,0xc
c0009975:	5a                   	pop    edx
c0009976:	0f b6 d8             	movzx  ebx,al
c0009979:	85 db                	test   ebx,ebx
c000997b:	75 a5                	jne    c0009922 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000997d:	83 ec 0c             	sub    esp,0xc
c0009980:	68 06 13 02 c0       	push   0xc0021306
c0009985:	e8 7d 7c 00 00       	call   c0011607 <KePanic(char const*)>
c000998a:	5a                   	pop    edx
c000998b:	59                   	pop    ecx
c000998c:	55                   	push   ebp
c000998d:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c0009993:	55                   	push   ebp
c0009994:	e8 55 ff ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c0009999:	83 c4 10             	add    esp,0x10
c000999c:	8b 10                	mov    edx,DWORD PTR [eax]
c000999e:	f6 c6 04             	test   dh,0x4
c00099a1:	75 08                	jne    c00099ab <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a9:	eb ba                	jmp    c0009965 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099af:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b5:	83 ec 0c             	sub    esp,0xc
c00099b8:	52                   	push   edx
c00099b9:	e8 bf e3 ff ff       	call   c0007d7d <Phys::freePage(unsigned long)>
c00099be:	83 c4 10             	add    esp,0x10
c00099c1:	83 fb 04             	cmp    ebx,0x4
c00099c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ce:	0f 85 76 ff ff ff    	jne    c000994a <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d4:	83 e7 01             	and    edi,0x1
c00099d7:	75 46                	jne    c0009a1f <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d9:	c7 44 24 30 88 10 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021088
c00099e1:	83 c4 1c             	add    esp,0x1c
c00099e4:	5b                   	pop    ebx
c00099e5:	5e                   	pop    esi
c00099e6:	5f                   	pop    edi
c00099e7:	5d                   	pop    ebp
c00099e8:	e9 1a 7c 00 00       	jmp    c0011607 <KePanic(char const*)>
c00099ed:	83 e7 01             	and    edi,0x1
c00099f0:	75 15                	jne    c0009a07 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099f2:	83 ec 0c             	sub    esp,0xc
c00099f5:	68 22 13 02 c0       	push   0xc0021322
c00099fa:	e8 08 7c 00 00       	call   c0011607 <KePanic(char const*)>
c00099ff:	83 c4 10             	add    esp,0x10
c0009a02:	e9 5e ff ff ff       	jmp    c0009965 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a07:	83 ec 08             	sub    esp,0x8
c0009a0a:	6a 00                	push   0x0
c0009a0c:	56                   	push   esi
c0009a0d:	e8 8a fb ff ff       	call   c000959c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a12:	83 c4 10             	add    esp,0x10
c0009a15:	e9 4b ff ff ff       	jmp    c0009965 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a1a:	83 e7 01             	and    edi,0x1
c0009a1d:	75 16                	jne    c0009a35 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1f:	83 ec 08             	sub    esp,0x8
c0009a22:	6a 00                	push   0x0
c0009a24:	56                   	push   esi
c0009a25:	e8 72 fb ff ff       	call   c000959c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	83 c4 1c             	add    esp,0x1c
c0009a30:	5b                   	pop    ebx
c0009a31:	5e                   	pop    esi
c0009a32:	5f                   	pop    edi
c0009a33:	5d                   	pop    ebp
c0009a34:	c3                   	ret    
c0009a35:	c7 44 24 30 3e 13 02 c0 	mov    DWORD PTR [esp+0x30],0xc002133e
c0009a3d:	83 c4 1c             	add    esp,0x1c
c0009a40:	5b                   	pop    ebx
c0009a41:	5e                   	pop    esi
c0009a42:	5f                   	pop    edi
c0009a43:	5d                   	pop    ebp
c0009a44:	e9 be 7b 00 00       	jmp    c0011607 <KePanic(char const*)>
c0009a49:	90                   	nop

c0009a4a <VAS::freeAllocatedPages(unsigned long)>:
c0009a4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a52:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a56:	74 09                	je     c0009a61 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a58:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a5c:	e9 ac fe ff ff       	jmp    c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c0009a61:	c7 44 24 04 ac 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc00210ac
c0009a69:	e9 a0 0e 00 00       	jmp    c000a90e <Dbg::kprintf(char const*, ...)>

c0009a6e <VAS::virtualToPhysical(unsigned long)>:
c0009a6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a72:	50                   	push   eax
c0009a73:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a77:	52                   	push   edx
c0009a78:	e8 71 fe ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c0009a7d:	59                   	pop    ecx
c0009a7e:	5a                   	pop    edx
c0009a7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a81:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a86:	c3                   	ret    
c0009a87:	90                   	nop

c0009a88 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a88:	55                   	push   ebp
c0009a89:	57                   	push   edi
c0009a8a:	56                   	push   esi
c0009a8b:	53                   	push   ebx
c0009a8c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a90:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a94:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a98:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a9c:	85 db                	test   ebx,ebx
c0009a9e:	7e 24                	jle    c0009ac4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009aa0:	c1 e3 0c             	shl    ebx,0xc
c0009aa3:	01 f3                	add    ebx,esi
c0009aa5:	56                   	push   esi
c0009aa6:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aac:	55                   	push   ebp
c0009aad:	e8 3c fe ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c0009ab2:	5a                   	pop    edx
c0009ab3:	59                   	pop    ecx
c0009ab4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009aba:	21 f9                	and    ecx,edi
c0009abc:	09 d1                	or     ecx,edx
c0009abe:	39 f3                	cmp    ebx,esi
c0009ac0:	89 08                	mov    DWORD PTR [eax],ecx
c0009ac2:	75 e1                	jne    c0009aa5 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac4:	5b                   	pop    ebx
c0009ac5:	5e                   	pop    esi
c0009ac6:	5f                   	pop    edi
c0009ac7:	5d                   	pop    ebp
c0009ac8:	c3                   	ret    
c0009ac9:	90                   	nop

c0009aca <VAS::VAS()>:
c0009aca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ace:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae4:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009ae9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aed:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009af1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af5:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009afc:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b03:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b08:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b0d:	29 c2                	sub    edx,eax
c0009b0f:	89 d0                	mov    eax,edx
c0009b11:	05 ff 0f 00 00       	add    eax,0xfff
c0009b16:	c1 e8 0c             	shr    eax,0xc
c0009b19:	89 c2                	mov    edx,eax
c0009b1b:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b20:	6a 04                	push   0x4
c0009b22:	6a ff                	push   0xffffffff
c0009b24:	52                   	push   edx
c0009b25:	50                   	push   eax
c0009b26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2a:	e8 59 ff ff ff       	call   c0009a88 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2f:	83 c4 14             	add    esp,0x14
c0009b32:	90                   	nop
c0009b33:	c3                   	ret    

c0009b34 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b34:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b39:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3f:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b46:	75 01                	jne    c0009b49 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b48:	c3                   	ret    
c0009b49:	68 80 00 00 00       	push   0x80
c0009b4e:	6a ff                	push   0xffffffff
c0009b50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b54:	50                   	push   eax
c0009b55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b59:	52                   	push   edx
c0009b5a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5e:	51                   	push   ecx
c0009b5f:	e8 24 ff ff ff       	call   c0009a88 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b64:	83 c4 14             	add    esp,0x14
c0009b67:	c3                   	ret    

c0009b68 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b6c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b73:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b76:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b7b:	83 f8 01             	cmp    eax,0x1
c0009b7e:	19 c0                	sbb    eax,eax
c0009b80:	83 ca 03             	or     edx,0x3
c0009b83:	83 e0 fc             	and    eax,0xfffffffc
c0009b86:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b8d:	0f 20 d8             	mov    eax,cr3
c0009b90:	0f 22 d8             	mov    cr3,eax
c0009b93:	c3                   	ret    

c0009b94 <VAS::~VAS()>:
c0009b94:	83 ec 2c             	sub    esp,0x2c
c0009b97:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9f:	fa                   	cli    
c0009ba0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ba5:	83 c0 01             	add    eax,0x1
c0009ba8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bad:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bbd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bc1:	6a 01                	push   0x1
c0009bc3:	50                   	push   eax
c0009bc4:	e8 9f ff ff ff       	call   c0009b68 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc9:	83 c4 0c             	add    esp,0xc
c0009bcc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bdc:	0f 8f d8 00 00 00    	jg     c0009cba <VAS::~VAS()+0x126>
c0009be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bed:	c1 e2 02             	shl    edx,0x2
c0009bf0:	01 d0                	add    eax,edx
c0009bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bfc:	83 e0 01             	and    eax,0x1
c0009bff:	0f 84 ab 00 00 00    	je     c0009cb0 <VAS::~VAS()+0x11c>
c0009c05:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c0d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c15:	7f 74                	jg     c0009c8b <VAS::~VAS()+0xf7>
c0009c17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c1b:	c1 e0 0a             	shl    eax,0xa
c0009c1e:	89 c2                	mov    edx,eax
c0009c20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c24:	01 d0                	add    eax,edx
c0009c26:	c1 e0 0c             	shl    eax,0xc
c0009c29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c2d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c32:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c34:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c37:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c41:	6a 01                	push   0x1
c0009c43:	50                   	push   eax
c0009c44:	e8 77 fc ff ff       	call   c00098c0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c49:	83 c4 0c             	add    esp,0xc
c0009c4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c54:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5e:	25 01 04 00 00       	and    eax,0x401
c0009c63:	3d 01 04 00 00       	cmp    eax,0x401
c0009c68:	75 1a                	jne    c0009c84 <VAS::~VAS()+0xf0>
c0009c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c73:	83 ec 0c             	sub    esp,0xc
c0009c76:	50                   	push   eax
c0009c77:	e8 01 e1 ff ff       	call   c0007d7d <Phys::freePage(unsigned long)>
c0009c7c:	83 c4 10             	add    esp,0x10
c0009c7f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c84:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c89:	eb 82                	jmp    c0009c0d <VAS::~VAS()+0x79>
c0009c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8f:	25 00 04 00 00       	and    eax,0x400
c0009c94:	74 1a                	je     c0009cb0 <VAS::~VAS()+0x11c>
c0009c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c9a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9f:	83 ec 0c             	sub    esp,0xc
c0009ca2:	50                   	push   eax
c0009ca3:	e8 d5 e0 ff ff       	call   c0007d7d <Phys::freePage(unsigned long)>
c0009ca8:	83 c4 10             	add    esp,0x10
c0009cab:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cb0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb5:	e9 1a ff ff ff       	jmp    c0009bd4 <VAS::~VAS()+0x40>
c0009cba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cbe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cc1:	83 ec 0c             	sub    esp,0xc
c0009cc4:	50                   	push   eax
c0009cc5:	e8 43 fc ff ff       	call   c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c0009cca:	83 c4 10             	add    esp,0x10
c0009ccd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cd1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd4:	83 ec 0c             	sub    esp,0xc
c0009cd7:	50                   	push   eax
c0009cd8:	e8 a0 e0 ff ff       	call   c0007d7d <Phys::freePage(unsigned long)>
c0009cdd:	83 c4 10             	add    esp,0x10
c0009ce0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009cea:	83 e8 01             	sub    eax,0x1
c0009ced:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009cf2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009cf7:	85 c0                	test   eax,eax
c0009cf9:	75 01                	jne    c0009cfc <VAS::~VAS()+0x168>
c0009cfb:	fb                   	sti    
c0009cfc:	90                   	nop
c0009cfd:	83 c4 2c             	add    esp,0x2c
c0009d00:	c3                   	ret    
c0009d01:	90                   	nop

c0009d02 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d02:	55                   	push   ebp
c0009d03:	57                   	push   edi
c0009d04:	56                   	push   esi
c0009d05:	53                   	push   ebx
c0009d06:	83 ec 1c             	sub    esp,0x1c
c0009d09:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d0d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d11:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d15:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d1b:	77 08                	ja     c0009d25 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d1d:	0f 20 d8             	mov    eax,cr3
c0009d20:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d23:	75 43                	jne    c0009d68 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d25:	89 d8                	mov    eax,ebx
c0009d27:	09 f8                	or     eax,edi
c0009d29:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2e:	75 53                	jne    c0009d83 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d33:	89 de                	mov    esi,ebx
c0009d35:	c1 ee 16             	shr    esi,0x16
c0009d38:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d43:	74 50                	je     c0009d95 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d45:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d49:	c1 eb 0a             	shr    ebx,0xa
c0009d4c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d52:	c1 e6 0c             	shl    esi,0xc
c0009d55:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d5b:	09 c7                	or     edi,eax
c0009d5d:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d60:	83 c4 1c             	add    esp,0x1c
c0009d63:	5b                   	pop    ebx
c0009d64:	5e                   	pop    esi
c0009d65:	5f                   	pop    edi
c0009d66:	5d                   	pop    ebp
c0009d67:	c3                   	ret    
c0009d68:	83 ec 0c             	sub    esp,0xc
c0009d6b:	68 d0 10 02 c0       	push   0xc00210d0
c0009d70:	e8 99 0b 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0009d75:	89 d8                	mov    eax,ebx
c0009d77:	83 c4 10             	add    esp,0x10
c0009d7a:	09 f8                	or     eax,edi
c0009d7c:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d81:	74 ad                	je     c0009d30 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d83:	83 ec 0c             	sub    esp,0xc
c0009d86:	68 38 11 02 c0       	push   0xc0021138
c0009d8b:	e8 77 78 00 00       	call   c0011607 <KePanic(char const*)>
c0009d90:	83 c4 10             	add    esp,0x10
c0009d93:	eb 9b                	jmp    c0009d30 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d99:	e8 48 e0 ff ff       	call   c0007de6 <Phys::allocatePage()>
c0009d9e:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009da4:	83 ec 0c             	sub    esp,0xc
c0009da7:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009daf:	6a 01                	push   0x1
c0009db1:	e8 43 f8 ff ff       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c0009db6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dbd:	6a 01                	push   0x1
c0009dbf:	50                   	push   eax
c0009dc0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc4:	52                   	push   edx
c0009dc5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc9:	51                   	push   ecx
c0009dca:	e8 3d 01 00 00       	call   c0009f0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcf:	83 c4 1c             	add    esp,0x1c
c0009dd2:	68 00 10 00 00       	push   0x1000
c0009dd7:	6a 00                	push   0x0
c0009dd9:	50                   	push   eax
c0009dda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dde:	e8 0d 67 ff ff       	call   c00004f0 <memset>
c0009de3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dea:	e8 1e fb ff ff       	call   c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c0009def:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009df3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df7:	83 c4 10             	add    esp,0x10
c0009dfa:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009dfd:	0d 07 04 00 00       	or     eax,0x407
c0009e02:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e05:	e9 3b ff ff ff       	jmp    c0009d45 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e0a <VAS::allocatePages(int, int)>:
c0009e0a:	55                   	push   ebp
c0009e0b:	57                   	push   edi
c0009e0c:	56                   	push   esi
c0009e0d:	53                   	push   ebx
c0009e0e:	83 ec 1c             	sub    esp,0x1c
c0009e11:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e15:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e19:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e1d:	75 75                	jne    c0009e94 <VAS::allocatePages(int, int)+0x8a>
c0009e1f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e26:	85 c0                	test   eax,eax
c0009e28:	74 49                	je     c0009e73 <VAS::allocatePages(int, int)+0x69>
c0009e2a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2e:	89 d5                	mov    ebp,edx
c0009e30:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e34:	c1 e5 0c             	shl    ebp,0xc
c0009e37:	01 dd                	add    ebp,ebx
c0009e39:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e3c:	81 cf 00 04 00 00    	or     edi,0x400
c0009e42:	85 d2                	test   edx,edx
c0009e44:	7e 1b                	jle    c0009e61 <VAS::allocatePages(int, int)+0x57>
c0009e46:	e8 9b df ff ff       	call   c0007de6 <Phys::allocatePage()>
c0009e4b:	57                   	push   edi
c0009e4c:	53                   	push   ebx
c0009e4d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e53:	50                   	push   eax
c0009e54:	56                   	push   esi
c0009e55:	e8 a8 fe ff ff       	call   c0009d02 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e5a:	83 c4 10             	add    esp,0x10
c0009e5d:	39 dd                	cmp    ebp,ebx
c0009e5f:	75 e5                	jne    c0009e46 <VAS::allocatePages(int, int)+0x3c>
c0009e61:	0f 20 d8             	mov    eax,cr3
c0009e64:	0f 22 d8             	mov    cr3,eax
c0009e67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e6b:	83 c4 1c             	add    esp,0x1c
c0009e6e:	5b                   	pop    ebx
c0009e6f:	5e                   	pop    esi
c0009e70:	5f                   	pop    edi
c0009e71:	5d                   	pop    ebp
c0009e72:	c3                   	ret    
c0009e73:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e77:	83 ec 0c             	sub    esp,0xc
c0009e7a:	68 5c 11 02 c0       	push   0xc002115c
c0009e7f:	e8 83 77 00 00       	call   c0011607 <KePanic(char const*)>
c0009e84:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e8b:	83 c4 10             	add    esp,0x10
c0009e8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e92:	eb 96                	jmp    c0009e2a <VAS::allocatePages(int, int)+0x20>
c0009e94:	83 ec 0c             	sub    esp,0xc
c0009e97:	52                   	push   edx
c0009e98:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e9c:	e8 58 f7 ff ff       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ead:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009eb1:	77 38                	ja     c0009eeb <VAS::allocatePages(int, int)+0xe1>
c0009eb3:	85 d2                	test   edx,edx
c0009eb5:	7e aa                	jle    c0009e61 <VAS::allocatePages(int, int)+0x57>
c0009eb7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ebb:	c1 e2 0c             	shl    edx,0xc
c0009ebe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ec2:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec8:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ecb:	e8 16 df ff ff       	call   c0007de6 <Phys::allocatePage()>
c0009ed0:	57                   	push   edi
c0009ed1:	53                   	push   ebx
c0009ed2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed8:	50                   	push   eax
c0009ed9:	56                   	push   esi
c0009eda:	e8 23 fe ff ff       	call   c0009d02 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edf:	83 c4 10             	add    esp,0x10
c0009ee2:	39 dd                	cmp    ebp,ebx
c0009ee4:	75 e5                	jne    c0009ecb <VAS::allocatePages(int, int)+0xc1>
c0009ee6:	e9 76 ff ff ff       	jmp    c0009e61 <VAS::allocatePages(int, int)+0x57>
c0009eeb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009ef0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef6:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009efd:	74 b4                	je     c0009eb3 <VAS::allocatePages(int, int)+0xa9>
c0009eff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f03:	80 cc 01             	or     ah,0x1
c0009f06:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f0a:	eb a7                	jmp    c0009eb3 <VAS::allocatePages(int, int)+0xa9>

c0009f0c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f0c:	55                   	push   ebp
c0009f0d:	57                   	push   edi
c0009f0e:	56                   	push   esi
c0009f0f:	53                   	push   ebx
c0009f10:	83 ec 1c             	sub    esp,0x1c
c0009f13:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f17:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f1b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f23:	85 db                	test   ebx,ebx
c0009f25:	7e 2c                	jle    c0009f53 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f27:	c1 e3 0c             	shl    ebx,0xc
c0009f2a:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f2d:	89 f3                	mov    ebx,esi
c0009f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f33:	55                   	push   ebp
c0009f34:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f38:	29 f2                	sub    edx,esi
c0009f3a:	01 da                	add    edx,ebx
c0009f3c:	52                   	push   edx
c0009f3d:	53                   	push   ebx
c0009f3e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f44:	57                   	push   edi
c0009f45:	e8 b8 fd ff ff       	call   c0009d02 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f4a:	83 c4 10             	add    esp,0x10
c0009f4d:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f51:	75 e0                	jne    c0009f33 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f53:	0f 20 d8             	mov    eax,cr3
c0009f56:	0f 22 d8             	mov    cr3,eax
c0009f59:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f5d:	83 c4 1c             	add    esp,0x1c
c0009f60:	5b                   	pop    ebx
c0009f61:	5e                   	pop    esi
c0009f62:	5f                   	pop    edi
c0009f63:	5d                   	pop    ebp
c0009f64:	c3                   	ret    
c0009f65:	90                   	nop

c0009f66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f66:	55                   	push   ebp
c0009f67:	57                   	push   edi
c0009f68:	56                   	push   esi
c0009f69:	53                   	push   ebx
c0009f6a:	83 ec 1c             	sub    esp,0x1c
c0009f6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f71:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f75:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f7d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f81:	09 d8                	or     eax,ebx
c0009f83:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f88:	75 4b                	jne    c0009fd5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f8a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f8d:	89 de                	mov    esi,ebx
c0009f8f:	c1 ee 16             	shr    esi,0x16
c0009f92:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f99:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f9d:	74 48                	je     c0009fe7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9f:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa4:	c1 eb 0a             	shr    ebx,0xa
c0009fa7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fab:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009faf:	83 ff 01             	cmp    edi,0x1
c0009fb2:	19 c0                	sbb    eax,eax
c0009fb4:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fba:	c1 e6 0c             	shl    esi,0xc
c0009fbd:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fc2:	01 f3                	add    ebx,esi
c0009fc4:	09 ca                	or     edx,ecx
c0009fc6:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fcd:	83 c4 1c             	add    esp,0x1c
c0009fd0:	5b                   	pop    ebx
c0009fd1:	5e                   	pop    esi
c0009fd2:	5f                   	pop    edi
c0009fd3:	5d                   	pop    ebp
c0009fd4:	c3                   	ret    
c0009fd5:	83 ec 0c             	sub    esp,0xc
c0009fd8:	68 88 11 02 c0       	push   0xc0021188
c0009fdd:	e8 25 76 00 00       	call   c0011607 <KePanic(char const*)>
c0009fe2:	83 c4 10             	add    esp,0x10
c0009fe5:	eb a3                	jmp    c0009f8a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe7:	e8 fa dd ff ff       	call   c0007de6 <Phys::allocatePage()>
c0009fec:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009ff2:	83 ec 0c             	sub    esp,0xc
c0009ff5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ffd:	6a 01                	push   0x1
c0009fff:	e8 f5 f5 ff ff       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c000a004:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a00b:	6a 01                	push   0x1
c000a00d:	50                   	push   eax
c000a00e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a012:	50                   	push   eax
c000a013:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a017:	51                   	push   ecx
c000a018:	e8 ef fe ff ff       	call   c0009f0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a01d:	83 c4 1c             	add    esp,0x1c
c000a020:	68 00 10 00 00       	push   0x1000
c000a025:	6a 00                	push   0x0
c000a027:	50                   	push   eax
c000a028:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a02c:	e8 bf 64 ff ff       	call   c00004f0 <memset>
c000a031:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a035:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a038:	e8 d0 f8 ff ff       	call   c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c000a03d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a041:	83 c4 10             	add    esp,0x10
c000a044:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a047:	81 ca 07 04 00 00    	or     edx,0x407
c000a04d:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a050:	e9 4a ff ff ff       	jmp    c0009f9f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a055:	90                   	nop

c000a056 <VAS::VAS(bool)>:
c000a056:	53                   	push   ebx
c000a057:	83 ec 28             	sub    esp,0x28
c000a05a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a062:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a066:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a06d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a071:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a078:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a07c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a080:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a083:	e8 5e dd ff ff       	call   c0007de6 <Phys::allocatePage()>
c000a088:	89 c2                	mov    edx,eax
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a091:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a097:	83 ec 0c             	sub    esp,0xc
c000a09a:	6a 01                	push   0x1
c000a09c:	e8 58 f5 ff ff       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	89 c2                	mov    edx,eax
c000a0a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0aa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0ad:	83 ec 0c             	sub    esp,0xc
c000a0b0:	6a 03                	push   0x3
c000a0b2:	6a 01                	push   0x1
c000a0b4:	52                   	push   edx
c000a0b5:	50                   	push   eax
c000a0b6:	53                   	push   ebx
c000a0b7:	e8 50 fe ff ff       	call   c0009f0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0bc:	83 c4 20             	add    esp,0x20
c000a0bf:	89 c2                	mov    edx,eax
c000a0c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0d0:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d8:	7f 1d                	jg     c000a0f7 <VAS::VAS(bool)+0xa1>
c000a0da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0de:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e5:	c1 e2 02             	shl    edx,0x2
c000a0e8:	01 d0                	add    eax,edx
c000a0ea:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0f0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f5:	eb d9                	jmp    c000a0d0 <VAS::VAS(bool)+0x7a>
c000a0f7:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0ff:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a107:	7f 7e                	jg     c000a187 <VAS::VAS(bool)+0x131>
c000a109:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a10d:	2d 00 02 00 00       	sub    eax,0x200
c000a112:	c1 e0 0c             	shl    eax,0xc
c000a115:	83 c8 05             	or     eax,0x5
c000a118:	89 c2                	mov    edx,eax
c000a11a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a11f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a125:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a12b:	83 e0 10             	and    eax,0x10
c000a12e:	0f b6 c0             	movzx  eax,al
c000a131:	85 c0                	test   eax,eax
c000a133:	74 07                	je     c000a13c <VAS::VAS(bool)+0xe6>
c000a135:	b8 00 01 00 00       	mov    eax,0x100
c000a13a:	eb 05                	jmp    c000a141 <VAS::VAS(bool)+0xeb>
c000a13c:	b8 00 00 00 00       	mov    eax,0x0
c000a141:	09 d0                	or     eax,edx
c000a143:	89 c1                	mov    ecx,eax
c000a145:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a149:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a14c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a150:	c1 e2 02             	shl    edx,0x2
c000a153:	01 d0                	add    eax,edx
c000a155:	89 ca                	mov    edx,ecx
c000a157:	89 10                	mov    DWORD PTR [eax],edx
c000a159:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a15d:	2d 40 03 00 00       	sub    eax,0x340
c000a162:	83 f8 7f             	cmp    eax,0x7f
c000a165:	77 16                	ja     c000a17d <VAS::VAS(bool)+0x127>
c000a167:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a16b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a172:	c1 e2 02             	shl    edx,0x2
c000a175:	01 d0                	add    eax,edx
c000a177:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a17d:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a182:	e9 78 ff ff ff       	jmp    c000a0ff <VAS::VAS(bool)+0xa9>
c000a187:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a18c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a192:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a198:	83 e0 10             	and    eax,0x10
c000a19b:	0f b6 c0             	movzx  eax,al
c000a19e:	85 c0                	test   eax,eax
c000a1a0:	74 07                	je     c000a1a9 <VAS::VAS(bool)+0x153>
c000a1a2:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a7:	eb 05                	jmp    c000a1ae <VAS::VAS(bool)+0x158>
c000a1a9:	b8 03 40 00 00       	mov    eax,0x4003
c000a1ae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1b2:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b5:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1bb:	89 02                	mov    DWORD PTR [edx],eax
c000a1bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cf:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d5:	83 e0 10             	and    eax,0x10
c000a1d8:	0f b6 c0             	movzx  eax,al
c000a1db:	85 c0                	test   eax,eax
c000a1dd:	74 07                	je     c000a1e6 <VAS::VAS(bool)+0x190>
c000a1df:	b8 00 01 00 00       	mov    eax,0x100
c000a1e4:	eb 05                	jmp    c000a1eb <VAS::VAS(bool)+0x195>
c000a1e6:	b8 00 00 00 00       	mov    eax,0x0
c000a1eb:	09 c2                	or     edx,eax
c000a1ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f4:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f9:	83 ca 03             	or     edx,0x3
c000a1fc:	89 10                	mov    DWORD PTR [eax],edx
c000a1fe:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a203:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a209:	83 ec 0c             	sub    esp,0xc
c000a20c:	50                   	push   eax
c000a20d:	e8 f0 29 00 00       	call   c000cc02 <Device::getName()>
c000a212:	83 c4 10             	add    esp,0x10
c000a215:	83 ec 08             	sub    esp,0x8
c000a218:	68 58 13 02 c0       	push   0xc0021358
c000a21d:	50                   	push   eax
c000a21e:	e8 5d 65 ff ff       	call   c0000780 <strcmp>
c000a223:	83 c4 10             	add    esp,0x10
c000a226:	85 c0                	test   eax,eax
c000a228:	0f 94 c0             	sete   al
c000a22b:	0f b6 c0             	movzx  eax,al
c000a22e:	85 c0                	test   eax,eax
c000a230:	74 68                	je     c000a29a <VAS::VAS(bool)+0x244>
c000a232:	fa                   	cli    
c000a233:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a238:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23e:	05 7c 09 00 00       	add    eax,0x97c
c000a243:	83 ec 0c             	sub    esp,0xc
c000a246:	50                   	push   eax
c000a247:	e8 86 d3 ff ff       	call   c00075d2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a24c:	83 c4 10             	add    esp,0x10
c000a24f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a254:	89 c3                	mov    ebx,eax
c000a256:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a25b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a261:	05 7c 09 00 00       	add    eax,0x97c
c000a266:	83 ec 0c             	sub    esp,0xc
c000a269:	50                   	push   eax
c000a26a:	e8 63 d3 ff ff       	call   c00075d2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26f:	83 c4 10             	add    esp,0x10
c000a272:	83 ec 08             	sub    esp,0x8
c000a275:	50                   	push   eax
c000a276:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a27a:	e8 6f f6 ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c000a27f:	83 c4 10             	add    esp,0x10
c000a282:	8b 00                	mov    eax,DWORD PTR [eax]
c000a284:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a289:	6a 11                	push   0x11
c000a28b:	53                   	push   ebx
c000a28c:	50                   	push   eax
c000a28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a291:	e8 6c fa ff ff       	call   c0009d02 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	fb                   	sti    
c000a29a:	90                   	nop
c000a29b:	83 c4 28             	add    esp,0x28
c000a29e:	5b                   	pop    ebx
c000a29f:	c3                   	ret    

c000a2a0 <VAS::evict(unsigned long)>:
c000a2a0:	55                   	push   ebp
c000a2a1:	57                   	push   edi
c000a2a2:	56                   	push   esi
c000a2a3:	53                   	push   ebx
c000a2a4:	83 ec 1c             	sub    esp,0x1c
c000a2a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2ab:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2b3:	e8 96 f4 ff ff       	call   c000974e <Virt::allocateSwapfilePage()>
c000a2b8:	89 c7                	mov    edi,eax
c000a2ba:	a1 0c 38 02 c0       	mov    eax,ds:0xc002380c
c000a2bf:	85 c0                	test   eax,eax
c000a2c1:	7e 40                	jle    c000a303 <VAS::evict(unsigned long)+0x63>
c000a2c3:	89 ee                	mov    esi,ebp
c000a2c5:	31 db                	xor    ebx,ebx
c000a2c7:	83 ec 0c             	sub    esp,0xc
c000a2ca:	57                   	push   edi
c000a2cb:	e8 68 f4 ff ff       	call   c0009738 <Virt::swapIDToSector(unsigned long)>
c000a2d0:	31 d2                	xor    edx,edx
c000a2d2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d5:	81 c6 00 02 00 00    	add    esi,0x200
c000a2db:	6a 01                	push   0x1
c000a2dd:	52                   	push   edx
c000a2de:	01 d8                	add    eax,ebx
c000a2e0:	83 c3 01             	add    ebx,0x1
c000a2e3:	50                   	push   eax
c000a2e4:	0f be 05 18 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023818
c000a2eb:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a2f2:	50                   	push   eax
c000a2f3:	e8 16 3b 00 00       	call   c000de0e <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f8:	83 c4 20             	add    esp,0x20
c000a2fb:	39 1d 0c 38 02 c0    	cmp    DWORD PTR ds:0xc002380c,ebx
c000a301:	7f c4                	jg     c000a2c7 <VAS::evict(unsigned long)+0x27>
c000a303:	c1 e7 0c             	shl    edi,0xc
c000a306:	83 ec 08             	sub    esp,0x8
c000a309:	55                   	push   ebp
c000a30a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30e:	50                   	push   eax
c000a30f:	e8 da f5 ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c000a314:	8b 10                	mov    edx,DWORD PTR [eax]
c000a316:	89 d3                	mov    ebx,edx
c000a318:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31e:	09 d7                	or     edi,edx
c000a320:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a326:	89 38                	mov    DWORD PTR [eax],edi
c000a328:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a32b:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a331:	83 c2 01             	add    edx,0x1
c000a334:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a33a:	e8 3e da ff ff       	call   c0007d7d <Phys::freePage(unsigned long)>
c000a33f:	0f 20 d8             	mov    eax,cr3
c000a342:	0f 22 d8             	mov    cr3,eax
c000a345:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a34b:	51                   	push   ecx
c000a34c:	55                   	push   ebp
c000a34d:	53                   	push   ebx
c000a34e:	68 ac 11 02 c0       	push   0xc00211ac
c000a353:	e8 b6 05 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000a358:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a35d:	c7 44 24 50 66 13 02 c0 	mov    DWORD PTR [esp+0x50],0xc0021366
c000a365:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a369:	8d 50 01             	lea    edx,[eax+0x1]
c000a36c:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a372:	83 c4 3c             	add    esp,0x3c
c000a375:	5b                   	pop    ebx
c000a376:	5e                   	pop    esi
c000a377:	5f                   	pop    edi
c000a378:	5d                   	pop    ebp
c000a379:	e9 90 05 00 00       	jmp    c000a90e <Dbg::kprintf(char const*, ...)>

c000a37e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37e:	55                   	push   ebp
c000a37f:	57                   	push   edi
c000a380:	56                   	push   esi
c000a381:	53                   	push   ebx
c000a382:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a388:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38f:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a395:	77 78                	ja     c000a40f <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a397:	83 ec 08             	sub    esp,0x8
c000a39a:	53                   	push   ebx
c000a39b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a1:	68 89 13 02 c0       	push   0xc0021389
c000a3a6:	e8 63 05 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000a3ab:	58                   	pop    eax
c000a3ac:	5a                   	pop    edx
c000a3ad:	53                   	push   ebx
c000a3ae:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b5:	51                   	push   ecx
c000a3b6:	e8 33 f5 ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c000a3bb:	83 c4 10             	add    esp,0x10
c000a3be:	85 c0                	test   eax,eax
c000a3c0:	89 c5                	mov    ebp,eax
c000a3c2:	0f 95 c0             	setne  al
c000a3c5:	85 db                	test   ebx,ebx
c000a3c7:	0f 95 c2             	setne  dl
c000a3ca:	21 d0                	and    eax,edx
c000a3cc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3d0:	a8 01                	test   al,0x1
c000a3d2:	75 0f                	jne    c000a3e3 <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3de:	5b                   	pop    ebx
c000a3df:	5e                   	pop    esi
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	c3                   	ret    
c000a3e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e6:	f6 c4 02             	test   ah,0x2
c000a3e9:	75 39                	jne    c000a424 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3eb:	89 c2                	mov    edx,eax
c000a3ed:	81 e2 01 04 00 00    	and    edx,0x401
c000a3f3:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f9:	74 73                	je     c000a46e <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3fb:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a400:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a404:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a40a:	5b                   	pop    ebx
c000a40b:	5e                   	pop    esi
c000a40c:	5f                   	pop    edi
c000a40d:	5d                   	pop    ebp
c000a40e:	c3                   	ret    
c000a40f:	83 ec 0c             	sub    esp,0xc
c000a412:	68 77 13 02 c0       	push   0xc0021377
c000a417:	e8 eb 71 00 00       	call   c0011607 <KePanic(char const*)>
c000a41c:	83 c4 10             	add    esp,0x10
c000a41f:	e9 73 ff ff ff       	jmp    c000a397 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a424:	83 ec 0c             	sub    esp,0xc
c000a427:	89 de                	mov    esi,ebx
c000a429:	68 dc 11 02 c0       	push   0xc00211dc
c000a42e:	e8 db 04 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000a433:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a437:	e8 aa d9 ff ff       	call   c0007de6 <Phys::allocatePage()>
c000a43c:	ba 00 10 00 00       	mov    edx,0x1000
c000a441:	89 d1                	mov    ecx,edx
c000a443:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a445:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a448:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44e:	09 c8                	or     eax,ecx
c000a450:	83 c8 02             	or     eax,0x2
c000a453:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a456:	0f 20 d8             	mov    eax,cr3
c000a459:	0f 22 d8             	mov    cr3,eax
c000a45c:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a460:	89 df                	mov    edi,ebx
c000a462:	89 d1                	mov    ecx,edx
c000a464:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a466:	83 c4 10             	add    esp,0x10
c000a469:	e9 66 ff ff ff       	jmp    c000a3d4 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46e:	c1 e8 0c             	shr    eax,0xc
c000a471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a475:	e8 6c d9 ff ff       	call   c0007de6 <Phys::allocatePage()>
c000a47a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a47d:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a483:	09 c2                	or     edx,eax
c000a485:	81 ca 01 08 00 00    	or     edx,0x801
c000a48b:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48e:	a1 0c 38 02 c0       	mov    eax,ds:0xc002380c
c000a493:	85 c0                	test   eax,eax
c000a495:	7e 44                	jle    c000a4db <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a497:	89 df                	mov    edi,ebx
c000a499:	31 f6                	xor    esi,esi
c000a49b:	83 ec 0c             	sub    esp,0xc
c000a49e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4a2:	51                   	push   ecx
c000a4a3:	e8 90 f2 ff ff       	call   c0009738 <Virt::swapIDToSector(unsigned long)>
c000a4a8:	31 d2                	xor    edx,edx
c000a4aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4ad:	81 c7 00 02 00 00    	add    edi,0x200
c000a4b3:	6a 01                	push   0x1
c000a4b5:	52                   	push   edx
c000a4b6:	01 f0                	add    eax,esi
c000a4b8:	83 c6 01             	add    esi,0x1
c000a4bb:	50                   	push   eax
c000a4bc:	0f be 05 18 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023818
c000a4c3:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a4ca:	55                   	push   ebp
c000a4cb:	e8 d2 38 00 00       	call   c000dda2 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4d0:	83 c4 20             	add    esp,0x20
c000a4d3:	39 35 0c 38 02 c0    	cmp    DWORD PTR ds:0xc002380c,esi
c000a4d9:	7f c0                	jg     c000a49b <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4db:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4e0:	83 ec 04             	sub    esp,0x4
c000a4e3:	83 e8 01             	sub    eax,0x1
c000a4e6:	50                   	push   eax
c000a4e7:	53                   	push   ebx
c000a4e8:	68 9c 13 02 c0       	push   0xc002139c
c000a4ed:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4f2:	e8 17 04 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000a4f7:	58                   	pop    eax
c000a4f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4fc:	52                   	push   edx
c000a4fd:	e8 13 f2 ff ff       	call   c0009715 <Virt::freeSwapfilePage(unsigned long)>
c000a502:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a507:	83 c4 10             	add    esp,0x10
c000a50a:	83 e8 01             	sub    eax,0x1
c000a50d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a512:	85 c0                	test   eax,eax
c000a514:	75 01                	jne    c000a517 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a516:	fb                   	sti    
c000a517:	0f 20 d8             	mov    eax,cr3
c000a51a:	0f 22 d8             	mov    cr3,eax
c000a51d:	e9 b2 fe ff ff       	jmp    c000a3d4 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a522 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a522:	55                   	push   ebp
c000a523:	57                   	push   edi
c000a524:	56                   	push   esi
c000a525:	53                   	push   ebx
c000a526:	83 ec 28             	sub    esp,0x28
c000a529:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a52d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a531:	50                   	push   eax
c000a532:	e8 c2 f0 ff ff       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c000a537:	83 c4 0c             	add    esp,0xc
c000a53a:	6a 07                	push   0x7
c000a53c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a540:	52                   	push   edx
c000a541:	89 c5                	mov    ebp,eax
c000a543:	53                   	push   ebx
c000a544:	e8 c1 f8 ff ff       	call   c0009e0a <VAS::allocatePages(int, int)>
c000a549:	83 c4 10             	add    esp,0x10
c000a54c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a550:	89 c7                	mov    edi,eax
c000a552:	85 c9                	test   ecx,ecx
c000a554:	74 2f                	je     c000a585 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a556:	31 f6                	xor    esi,esi
c000a558:	e8 89 d8 ff ff       	call   c0007de6 <Phys::allocatePage()>
c000a55d:	83 c6 01             	add    esi,0x1
c000a560:	6a 03                	push   0x3
c000a562:	55                   	push   ebp
c000a563:	50                   	push   eax
c000a564:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a568:	53                   	push   ebx
c000a569:	e8 94 f7 ff ff       	call   c0009d02 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56e:	6a 07                	push   0x7
c000a570:	57                   	push   edi
c000a571:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a575:	50                   	push   eax
c000a576:	53                   	push   ebx
c000a577:	e8 86 f7 ff ff       	call   c0009d02 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a57c:	83 c4 20             	add    esp,0x20
c000a57f:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a583:	75 d3                	jne    c000a558 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a585:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a589:	89 28                	mov    DWORD PTR [eax],ebp
c000a58b:	83 c4 1c             	add    esp,0x1c
c000a58e:	89 f8                	mov    eax,edi
c000a590:	5b                   	pop    ebx
c000a591:	5e                   	pop    esi
c000a592:	5f                   	pop    edi
c000a593:	5d                   	pop    ebp
c000a594:	c3                   	ret    
c000a595:	90                   	nop

c000a596 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a596:	53                   	push   ebx
c000a597:	83 ec 14             	sub    esp,0x14
c000a59a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59e:	68 fc 11 02 c0       	push   0xc00211fc
c000a5a3:	e8 66 03 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000a5a8:	c7 04 24 5c 12 02 c0 	mov    DWORD PTR [esp],0xc002125c
c000a5af:	e8 5a 03 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000a5b4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b8:	83 c4 18             	add    esp,0x18
c000a5bb:	5b                   	pop    ebx
c000a5bc:	e9 4c f3 ff ff       	jmp    c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c1:	90                   	nop

c000a5c2 <VAS::scanForEviction()>:
c000a5c2:	57                   	push   edi
c000a5c3:	56                   	push   esi
c000a5c4:	31 f6                	xor    esi,esi
c000a5c6:	53                   	push   ebx
c000a5c7:	83 ec 10             	sub    esp,0x10
c000a5ca:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ce:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d7:	75 0e                	jne    c000a5e7 <VAS::scanForEviction()+0x25>
c000a5d9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5dc:	89 da                	mov    edx,ebx
c000a5de:	c1 ea 16             	shr    edx,0x16
c000a5e1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e5:	74 57                	je     c000a63e <VAS::scanForEviction()+0x7c>
c000a5e7:	53                   	push   ebx
c000a5e8:	57                   	push   edi
c000a5e9:	e8 00 f3 ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c000a5ee:	5a                   	pop    edx
c000a5ef:	59                   	pop    ecx
c000a5f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f2:	89 d1                	mov    ecx,edx
c000a5f4:	c1 e9 0c             	shr    ecx,0xc
c000a5f7:	74 10                	je     c000a609 <VAS::scanForEviction()+0x47>
c000a5f9:	89 d1                	mov    ecx,edx
c000a5fb:	81 e1 01 08 00 00    	and    ecx,0x801
c000a601:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a607:	74 40                	je     c000a649 <VAS::scanForEviction()+0x87>
c000a609:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60f:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a615:	76 2d                	jbe    c000a644 <VAS::scanForEviction()+0x82>
c000a617:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61e:	83 c6 01             	add    esi,0x1
c000a621:	83 fe 03             	cmp    esi,0x3
c000a624:	74 32                	je     c000a658 <VAS::scanForEviction()+0x96>
c000a626:	31 db                	xor    ebx,ebx
c000a628:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62e:	75 b7                	jne    c000a5e7 <VAS::scanForEviction()+0x25>
c000a630:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a633:	89 da                	mov    edx,ebx
c000a635:	c1 ea 16             	shr    edx,0x16
c000a638:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a63c:	75 a9                	jne    c000a5e7 <VAS::scanForEviction()+0x25>
c000a63e:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a644:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a647:	eb 88                	jmp    c000a5d1 <VAS::scanForEviction()+0xf>
c000a649:	f6 c2 20             	test   dl,0x20
c000a64c:	74 13                	je     c000a661 <VAS::scanForEviction()+0x9f>
c000a64e:	83 e2 df             	and    edx,0xffffffdf
c000a651:	89 10                	mov    DWORD PTR [eax],edx
c000a653:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a656:	eb b1                	jmp    c000a609 <VAS::scanForEviction()+0x47>
c000a658:	83 c4 10             	add    esp,0x10
c000a65b:	31 c0                	xor    eax,eax
c000a65d:	5b                   	pop    ebx
c000a65e:	5e                   	pop    esi
c000a65f:	5f                   	pop    edi
c000a660:	c3                   	ret    
c000a661:	89 d0                	mov    eax,edx
c000a663:	83 ec 08             	sub    esp,0x8
c000a666:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a66b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66f:	53                   	push   ebx
c000a670:	68 b1 13 02 c0       	push   0xc00213b1
c000a675:	e8 94 02 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000a67a:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a67d:	58                   	pop    eax
c000a67e:	5a                   	pop    edx
c000a67f:	51                   	push   ecx
c000a680:	57                   	push   edi
c000a681:	e8 1a fc ff ff       	call   c000a2a0 <VAS::evict(unsigned long)>
c000a686:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a689:	5b                   	pop    ebx
c000a68a:	5e                   	pop    esi
c000a68b:	50                   	push   eax
c000a68c:	68 c5 13 02 c0       	push   0xc00213c5
c000a691:	e8 78 02 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000a696:	58                   	pop    eax
c000a697:	5a                   	pop    edx
c000a698:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a69c:	50                   	push   eax
c000a69d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a1:	68 d8 13 02 c0       	push   0xc00213d8
c000a6a6:	e8 63 02 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000a6ab:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6ae:	83 c4 10             	add    esp,0x10
c000a6b1:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b7:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6be:	83 c4 10             	add    esp,0x10
c000a6c1:	5b                   	pop    ebx
c000a6c2:	5e                   	pop    esi
c000a6c3:	5f                   	pop    edi
c000a6c4:	c3                   	ret    

c000a6c5 <mapVASFirstTime>:
c000a6c5:	55                   	push   ebp
c000a6c6:	57                   	push   edi
c000a6c7:	56                   	push   esi
c000a6c8:	53                   	push   ebx
c000a6c9:	83 ec 0c             	sub    esp,0xc
c000a6cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d4:	83 fa 01             	cmp    edx,0x1
c000a6d7:	0f 84 cb 00 00 00    	je     c000a7a8 <mapVASFirstTime+0xe3>
c000a6dd:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e0:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e5:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6ea:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6ed:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6f3:	c1 e5 15             	shl    ebp,0x15
c000a6f6:	29 eb                	sub    ebx,ebp
c000a6f8:	29 ef                	sub    edi,ebp
c000a6fa:	e8 e7 d6 ff ff       	call   c0007de6 <Phys::allocatePage()>
c000a6ff:	83 ec 0c             	sub    esp,0xc
c000a702:	68 03 04 00 00       	push   0x403
c000a707:	6a 01                	push   0x1
c000a709:	53                   	push   ebx
c000a70a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a710:	50                   	push   eax
c000a711:	56                   	push   esi
c000a712:	e8 f5 f7 ff ff       	call   c0009f0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a717:	83 c4 20             	add    esp,0x20
c000a71a:	39 fb                	cmp    ebx,edi
c000a71c:	75 dc                	jne    c000a6fa <mapVASFirstTime+0x35>
c000a71e:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a723:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a728:	29 eb                	sub    ebx,ebp
c000a72a:	29 ef                	sub    edi,ebp
c000a72c:	e8 b5 d6 ff ff       	call   c0007de6 <Phys::allocatePage()>
c000a731:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a735:	83 fa 01             	cmp    edx,0x1
c000a738:	19 d2                	sbb    edx,edx
c000a73a:	83 ec 0c             	sub    esp,0xc
c000a73d:	83 e2 04             	and    edx,0x4
c000a740:	81 c2 03 04 00 00    	add    edx,0x403
c000a746:	52                   	push   edx
c000a747:	6a 01                	push   0x1
c000a749:	53                   	push   ebx
c000a74a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a750:	50                   	push   eax
c000a751:	56                   	push   esi
c000a752:	e8 b5 f7 ff ff       	call   c0009f0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a757:	83 c4 20             	add    esp,0x20
c000a75a:	39 df                	cmp    edi,ebx
c000a75c:	75 ce                	jne    c000a72c <mapVASFirstTime+0x67>
c000a75e:	83 ec 0c             	sub    esp,0xc
c000a761:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a766:	6a 04                	push   0x4
c000a768:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a76e:	6a ff                	push   0xffffffff
c000a770:	c1 eb 0c             	shr    ebx,0xc
c000a773:	53                   	push   ebx
c000a774:	68 00 50 02 c0       	push   0xc0025000
c000a779:	56                   	push   esi
c000a77a:	e8 09 f3 ff ff       	call   c0009a88 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77f:	83 c4 14             	add    esp,0x14
c000a782:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a787:	6a 04                	push   0x4
c000a789:	6a ff                	push   0xffffffff
c000a78b:	53                   	push   ebx
c000a78c:	68 00 50 02 c0       	push   0xc0025000
c000a791:	50                   	push   eax
c000a792:	e8 f1 f2 ff ff       	call   c0009a88 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a797:	0f 20 d8             	mov    eax,cr3
c000a79a:	0f 22 d8             	mov    cr3,eax
c000a79d:	83 c4 20             	add    esp,0x20
c000a7a0:	83 c4 0c             	add    esp,0xc
c000a7a3:	5b                   	pop    ebx
c000a7a4:	5e                   	pop    esi
c000a7a5:	5f                   	pop    edi
c000a7a6:	5d                   	pop    ebp
c000a7a7:	c3                   	ret    
c000a7a8:	83 ec 0c             	sub    esp,0xc
c000a7ab:	68 e5 13 02 c0       	push   0xc00213e5
c000a7b0:	e8 59 01 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000a7b5:	83 c4 10             	add    esp,0x10
c000a7b8:	83 c4 0c             	add    esp,0xc
c000a7bb:	5b                   	pop    ebx
c000a7bc:	5e                   	pop    esi
c000a7bd:	5f                   	pop    edi
c000a7be:	5d                   	pop    ebp
c000a7bf:	c3                   	ret    

c000a7c0 <__cxa_atexit>:
c000a7c0:	31 c0                	xor    eax,eax
c000a7c2:	c3                   	ret    

c000a7c3 <__cxa_finalize>:
c000a7c3:	c3                   	ret    

c000a7c4 <__stack_chk_fail>:
c000a7c4:	55                   	push   ebp
c000a7c5:	89 e5                	mov    ebp,esp
c000a7c7:	83 ec 10             	sub    esp,0x10
c000a7ca:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7cd:	68 fe 13 02 c0       	push   0xc00213fe
c000a7d2:	e8 37 01 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000a7d7:	58                   	pop    eax
c000a7d8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7db:	5a                   	pop    edx
c000a7dc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7df:	68 fe 13 02 c0       	push   0xc00213fe
c000a7e4:	e8 25 01 00 00       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000a7e9:	c7 04 24 06 14 02 c0 	mov    DWORD PTR [esp],0xc0021406
c000a7f0:	e8 12 6e 00 00       	call   c0011607 <KePanic(char const*)>
c000a7f5:	83 c4 10             	add    esp,0x10
c000a7f8:	c9                   	leave  
c000a7f9:	c3                   	ret    

c000a7fa <__cxa_pure_virtual>:
c000a7fa:	83 ec 18             	sub    esp,0x18
c000a7fd:	68 1e 14 02 c0       	push   0xc002141e
c000a802:	e8 00 6e 00 00       	call   c0011607 <KePanic(char const*)>
c000a807:	83 c4 1c             	add    esp,0x1c
c000a80a:	c3                   	ret    

c000a80b <operator new[](unsigned long)>:
c000a80b:	e9 c7 d2 ff ff       	jmp    c0007ad7 <malloc>

c000a810 <operator delete(void*, unsigned long)>:
c000a810:	e9 e2 d2 ff ff       	jmp    c0007af7 <rfree>

c000a815 <operator delete[](void*)>:
c000a815:	e9 dd d2 ff ff       	jmp    c0007af7 <rfree>

c000a81a <operator delete[](void*, unsigned long)>:
c000a81a:	e9 d8 d2 ff ff       	jmp    c0007af7 <rfree>

c000a81f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81f:	55                   	push   ebp
c000a820:	57                   	push   edi
c000a821:	56                   	push   esi
c000a822:	53                   	push   ebx
c000a823:	83 ec 20             	sub    esp,0x20
c000a826:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a82a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a832:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a836:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a842:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a84a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a852:	89 f7                	mov    edi,esi
c000a854:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a859:	89 eb                	mov    ebx,ebp
c000a85b:	eb 02                	jmp    c000a85f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a85d:	89 c7                	mov    edi,eax
c000a85f:	31 d2                	xor    edx,edx
c000a861:	89 f8                	mov    eax,edi
c000a863:	f7 f1                	div    ecx
c000a865:	83 c3 01             	add    ebx,0x1
c000a868:	39 cf                	cmp    edi,ecx
c000a86a:	73 f1                	jae    c000a85d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a86c:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86f:	eb 02                	jmp    c000a873 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a871:	89 c6                	mov    esi,eax
c000a873:	31 d2                	xor    edx,edx
c000a875:	89 f0                	mov    eax,esi
c000a877:	f7 f1                	div    ecx
c000a879:	83 eb 01             	sub    ebx,0x1
c000a87c:	39 ce                	cmp    esi,ecx
c000a87e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a882:	88 13                	mov    BYTE PTR [ebx],dl
c000a884:	73 eb                	jae    c000a871 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a886:	83 c4 20             	add    esp,0x20
c000a889:	89 e8                	mov    eax,ebp
c000a88b:	5b                   	pop    ebx
c000a88c:	5e                   	pop    esi
c000a88d:	5f                   	pop    edi
c000a88e:	5d                   	pop    ebp
c000a88f:	c3                   	ret    

c000a890 <Dbg::logc(char)>:
c000a890:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a897:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a89b:	75 12                	jne    c000a8af <Dbg::logc(char)+0x1f>
c000a89d:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8a2:	ec                   	in     al,dx
c000a8a3:	a8 20                	test   al,0x20
c000a8a5:	74 fb                	je     c000a8a2 <Dbg::logc(char)+0x12>
c000a8a7:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8ac:	88 c8                	mov    al,cl
c000a8ae:	ee                   	out    dx,al
c000a8af:	c3                   	ret    

c000a8b0 <Dbg::logs(char*)>:
c000a8b0:	53                   	push   ebx
c000a8b1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b8:	85 c0                	test   eax,eax
c000a8ba:	74 11                	je     c000a8cd <Dbg::logs(char*)+0x1d>
c000a8bc:	50                   	push   eax
c000a8bd:	83 c3 01             	add    ebx,0x1
c000a8c0:	e8 cb ff ff ff       	call   c000a890 <Dbg::logc(char)>
c000a8c5:	58                   	pop    eax
c000a8c6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c9:	85 c0                	test   eax,eax
c000a8cb:	75 ef                	jne    c000a8bc <Dbg::logs(char*)+0xc>
c000a8cd:	5b                   	pop    ebx
c000a8ce:	c3                   	ret    

c000a8cf <Dbg::logWriteInt(unsigned int)>:
c000a8cf:	83 ec 10             	sub    esp,0x10
c000a8d2:	6a 0a                	push   0xa
c000a8d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d8:	50                   	push   eax
c000a8d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8dd:	50                   	push   eax
c000a8de:	e8 3c ff ff ff       	call   c000a81f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8e3:	50                   	push   eax
c000a8e4:	e8 c7 ff ff ff       	call   c000a8b0 <Dbg::logs(char*)>
c000a8e9:	83 c4 20             	add    esp,0x20
c000a8ec:	c3                   	ret    

c000a8ed <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8ed:	83 ec 10             	sub    esp,0x10
c000a8f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f4:	50                   	push   eax
c000a8f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f9:	50                   	push   eax
c000a8fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fe:	52                   	push   edx
c000a8ff:	e8 1b ff ff ff       	call   c000a81f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a904:	50                   	push   eax
c000a905:	e8 a6 ff ff ff       	call   c000a8b0 <Dbg::logs(char*)>
c000a90a:	83 c4 20             	add    esp,0x20
c000a90d:	c3                   	ret    

c000a90e <Dbg::kprintf(char const*, ...)>:
c000a90e:	55                   	push   ebp
c000a90f:	57                   	push   edi
c000a910:	56                   	push   esi
c000a911:	53                   	push   ebx
c000a912:	83 ec 0c             	sub    esp,0xc
c000a915:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a91c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a920:	74 08                	je     c000a92a <Dbg::kprintf(char const*, ...)+0x1c>
c000a922:	83 c4 0c             	add    esp,0xc
c000a925:	5b                   	pop    ebx
c000a926:	5e                   	pop    esi
c000a927:	5f                   	pop    edi
c000a928:	5d                   	pop    ebp
c000a929:	c3                   	ret    
c000a92a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92e:	31 ff                	xor    edi,edi
c000a930:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a934:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a937:	85 c0                	test   eax,eax
c000a939:	74 e7                	je     c000a922 <Dbg::kprintf(char const*, ...)+0x14>
c000a93b:	8d 77 01             	lea    esi,[edi+0x1]
c000a93e:	83 f8 25             	cmp    eax,0x25
c000a941:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a944:	75 47                	jne    c000a98d <Dbg::kprintf(char const*, ...)+0x7f>
c000a946:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a949:	83 c7 02             	add    edi,0x2
c000a94c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94f:	83 e8 25             	sub    eax,0x25
c000a952:	0f b6 c0             	movzx  eax,al
c000a955:	83 f8 53             	cmp    eax,0x53
c000a958:	0f 87 ce 00 00 00    	ja     c000aa2c <Dbg::kprintf(char const*, ...)+0x11e>
c000a95e:	ff 24 85 34 14 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdebcc]
c000a965:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a969:	89 c8                	mov    eax,ecx
c000a96b:	83 c1 04             	add    ecx,0x4
c000a96e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a972:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a974:	55                   	push   ebp
c000a975:	e8 55 ff ff ff       	call   c000a8cf <Dbg::logWriteInt(unsigned int)>
c000a97a:	58                   	pop    eax
c000a97b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97e:	85 c0                	test   eax,eax
c000a980:	74 a0                	je     c000a922 <Dbg::kprintf(char const*, ...)+0x14>
c000a982:	8d 77 01             	lea    esi,[edi+0x1]
c000a985:	83 f8 25             	cmp    eax,0x25
c000a988:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a98b:	74 b9                	je     c000a946 <Dbg::kprintf(char const*, ...)+0x38>
c000a98d:	50                   	push   eax
c000a98e:	89 f7                	mov    edi,esi
c000a990:	e8 fb fe ff ff       	call   c000a890 <Dbg::logc(char)>
c000a995:	89 ee                	mov    esi,ebp
c000a997:	58                   	pop    eax
c000a998:	eb e1                	jmp    c000a97b <Dbg::kprintf(char const*, ...)+0x6d>
c000a99a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99e:	89 c8                	mov    eax,ecx
c000a9a0:	83 c1 04             	add    ecx,0x4
c000a9a3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a9:	50                   	push   eax
c000a9aa:	e8 01 ff ff ff       	call   c000a8b0 <Dbg::logs(char*)>
c000a9af:	58                   	pop    eax
c000a9b0:	eb c9                	jmp    c000a97b <Dbg::kprintf(char const*, ...)+0x6d>
c000a9b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b6:	89 d0                	mov    eax,edx
c000a9b8:	83 c2 04             	add    edx,0x4
c000a9bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9c1:	50                   	push   eax
c000a9c2:	e8 08 ff ff ff       	call   c000a8cf <Dbg::logWriteInt(unsigned int)>
c000a9c7:	58                   	pop    eax
c000a9c8:	eb b1                	jmp    c000a97b <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ce:	89 d0                	mov    eax,edx
c000a9d0:	83 c2 04             	add    edx,0x4
c000a9d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d7:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9da:	50                   	push   eax
c000a9db:	e8 b0 fe ff ff       	call   c000a890 <Dbg::logc(char)>
c000a9e0:	58                   	pop    eax
c000a9e1:	eb 98                	jmp    c000a97b <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e7:	89 c8                	mov    eax,ecx
c000a9e9:	83 c1 04             	add    ecx,0x4
c000a9ec:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9f0:	6a 10                	push   0x10
c000a9f2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f4:	51                   	push   ecx
c000a9f5:	e8 f3 fe ff ff       	call   c000a8ed <Dbg::logWriteIntBase(unsigned int, int)>
c000a9fa:	5d                   	pop    ebp
c000a9fb:	58                   	pop    eax
c000a9fc:	e9 7a ff ff ff       	jmp    c000a97b <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 08             	add    edx,0x8
c000aa0a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0e:	6a 10                	push   0x10
c000aa10:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa12:	50                   	push   eax
c000aa13:	e8 d5 fe ff ff       	call   c000a8ed <Dbg::logWriteIntBase(unsigned int, int)>
c000aa18:	58                   	pop    eax
c000aa19:	5a                   	pop    edx
c000aa1a:	e9 5c ff ff ff       	jmp    c000a97b <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1f:	6a 25                	push   0x25
c000aa21:	e8 6a fe ff ff       	call   c000a890 <Dbg::logc(char)>
c000aa26:	5a                   	pop    edx
c000aa27:	e9 4f ff ff ff       	jmp    c000a97b <Dbg::kprintf(char const*, ...)+0x6d>
c000aa2c:	6a 25                	push   0x25
c000aa2e:	e8 5d fe ff ff       	call   c000a890 <Dbg::logc(char)>
c000aa33:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa37:	50                   	push   eax
c000aa38:	e8 53 fe ff ff       	call   c000a890 <Dbg::logc(char)>
c000aa3d:	5a                   	pop    edx
c000aa3e:	59                   	pop    ecx
c000aa3f:	e9 37 ff ff ff       	jmp    c000a97b <Dbg::kprintf(char const*, ...)+0x6d>

c000aa44 <KiUbsanPrintDetails(char const*, void*)>:
c000aa44:	83 ec 1c             	sub    esp,0x1c
c000aa47:	83 ec 08             	sub    esp,0x8
c000aa4a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4e:	68 84 15 02 c0       	push   0xc0021584
c000aa53:	e8 b6 fe ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000aa58:	83 c4 10             	add    esp,0x10
c000aa5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa67:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa69:	83 ec 08             	sub    esp,0x8
c000aa6c:	50                   	push   eax
c000aa6d:	68 98 15 02 c0       	push   0xc0021598
c000aa72:	e8 97 fe ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000aa77:	83 c4 10             	add    esp,0x10
c000aa7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa81:	83 ec 08             	sub    esp,0x8
c000aa84:	50                   	push   eax
c000aa85:	68 a2 15 02 c0       	push   0xc00215a2
c000aa8a:	e8 7f fe ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000aa8f:	83 c4 10             	add    esp,0x10
c000aa92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa96:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa99:	83 ec 08             	sub    esp,0x8
c000aa9c:	50                   	push   eax
c000aa9d:	68 ac 15 02 c0       	push   0xc00215ac
c000aaa2:	e8 67 fe ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000aaa7:	83 c4 10             	add    esp,0x10
c000aaaa:	90                   	nop
c000aaab:	83 c4 1c             	add    esp,0x1c
c000aaae:	c3                   	ret    
c000aaaf:	90                   	nop

c000aab0 <__ubsan_handle_type_mismatch_v1>:
c000aab0:	83 ec 0c             	sub    esp,0xc
c000aab3:	83 ec 08             	sub    esp,0x8
c000aab6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaba:	68 f0 16 02 c0       	push   0xc00216f0
c000aabf:	e8 80 ff ff ff       	call   c000aa44 <KiUbsanPrintDetails(char const*, void*)>
c000aac4:	83 c4 10             	add    esp,0x10
c000aac7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aacc:	75 16                	jne    c000aae4 <__ubsan_handle_type_mismatch_v1+0x34>
c000aace:	83 ec 0c             	sub    esp,0xc
c000aad1:	68 b6 15 02 c0       	push   0xc00215b6
c000aad6:	e8 33 fe ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000aadb:	83 c4 10             	add    esp,0x10
c000aade:	e9 91 00 00 00       	jmp    c000ab74 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aae3:	90                   	nop
c000aae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaeb:	85 c0                	test   eax,eax
c000aaed:	74 29                	je     c000ab18 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf6:	83 e8 01             	sub    eax,0x1
c000aaf9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aafd:	75 19                	jne    c000ab18 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaff:	83 ec 08             	sub    esp,0x8
c000ab02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab06:	68 10 17 02 c0       	push   0xc0021710
c000ab0b:	e8 fe fd ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000ab10:	83 c4 10             	add    esp,0x10
c000ab13:	eb 5f                	jmp    c000ab74 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab15:	8d 76 00             	lea    esi,[esi+0x0]
c000ab18:	83 ec 0c             	sub    esp,0xc
c000ab1b:	68 cb 15 02 c0       	push   0xc00215cb
c000ab20:	e8 e9 fd ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000ab25:	83 c4 10             	add    esp,0x10
c000ab28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2f:	0f b6 c0             	movzx  eax,al
c000ab32:	83 ec 08             	sub    esp,0x8
c000ab35:	50                   	push   eax
c000ab36:	68 e5 15 02 c0       	push   0xc00215e5
c000ab3b:	e8 ce fd ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000ab40:	83 c4 10             	add    esp,0x10
c000ab43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab47:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab4a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab4d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab55:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab58:	0f b6 c0             	movzx  eax,al
c000ab5b:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c000ab62:	51                   	push   ecx
c000ab63:	52                   	push   edx
c000ab64:	50                   	push   eax
c000ab65:	68 38 17 02 c0       	push   0xc0021738
c000ab6a:	e8 9f fd ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000ab6f:	83 c4 10             	add    esp,0x10
c000ab72:	66 90                	xchg   ax,ax
c000ab74:	83 ec 0c             	sub    esp,0xc
c000ab77:	68 f0 16 02 c0       	push   0xc00216f0
c000ab7c:	e8 86 6a 00 00       	call   c0011607 <KePanic(char const*)>
c000ab81:	83 c4 10             	add    esp,0x10
c000ab84:	90                   	nop
c000ab85:	83 c4 0c             	add    esp,0xc
c000ab88:	c3                   	ret    
c000ab89:	8d 76 00             	lea    esi,[esi+0x0]

c000ab8c <__ubsan_handle_pointer_overflow>:
c000ab8c:	83 ec 0c             	sub    esp,0xc
c000ab8f:	83 ec 08             	sub    esp,0x8
c000ab92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab96:	68 80 17 02 c0       	push   0xc0021780
c000ab9b:	e8 a4 fe ff ff       	call   c000aa44 <KiUbsanPrintDetails(char const*, void*)>
c000aba0:	83 c4 10             	add    esp,0x10
c000aba3:	83 ec 0c             	sub    esp,0xc
c000aba6:	68 80 17 02 c0       	push   0xc0021780
c000abab:	e8 57 6a 00 00       	call   c0011607 <KePanic(char const*)>
c000abb0:	83 c4 10             	add    esp,0x10
c000abb3:	90                   	nop
c000abb4:	83 c4 0c             	add    esp,0xc
c000abb7:	c3                   	ret    

c000abb8 <__ubsan_handle_out_of_bounds>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	83 ec 08             	sub    esp,0x8
c000abbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abc2:	68 f0 15 02 c0       	push   0xc00215f0
c000abc7:	e8 78 fe ff ff       	call   c000aa44 <KiUbsanPrintDetails(char const*, void*)>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	83 ec 0c             	sub    esp,0xc
c000abd2:	68 f0 15 02 c0       	push   0xc00215f0
c000abd7:	e8 2b 6a 00 00       	call   c0011607 <KePanic(char const*)>
c000abdc:	83 c4 10             	add    esp,0x10
c000abdf:	90                   	nop
c000abe0:	83 c4 0c             	add    esp,0xc
c000abe3:	c3                   	ret    

c000abe4 <__ubsan_handle_add_overflow>:
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	83 ec 08             	sub    esp,0x8
c000abea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abee:	68 0d 16 02 c0       	push   0xc002160d
c000abf3:	e8 4c fe ff ff       	call   c000aa44 <KiUbsanPrintDetails(char const*, void*)>
c000abf8:	83 c4 10             	add    esp,0x10
c000abfb:	83 ec 0c             	sub    esp,0xc
c000abfe:	68 0d 16 02 c0       	push   0xc002160d
c000ac03:	e8 ff 69 00 00       	call   c0011607 <KePanic(char const*)>
c000ac08:	83 c4 10             	add    esp,0x10
c000ac0b:	90                   	nop
c000ac0c:	83 c4 0c             	add    esp,0xc
c000ac0f:	c3                   	ret    

c000ac10 <__ubsan_handle_load_invalid_value>:
c000ac10:	83 ec 0c             	sub    esp,0xc
c000ac13:	83 ec 08             	sub    esp,0x8
c000ac16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac1a:	68 a0 17 02 c0       	push   0xc00217a0
c000ac1f:	e8 20 fe ff ff       	call   c000aa44 <KiUbsanPrintDetails(char const*, void*)>
c000ac24:	83 c4 10             	add    esp,0x10
c000ac27:	83 ec 0c             	sub    esp,0xc
c000ac2a:	68 a0 17 02 c0       	push   0xc00217a0
c000ac2f:	e8 d3 69 00 00       	call   c0011607 <KePanic(char const*)>
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	90                   	nop
c000ac38:	83 c4 0c             	add    esp,0xc
c000ac3b:	c3                   	ret    

c000ac3c <__ubsan_handle_divrem_overflow>:
c000ac3c:	83 ec 0c             	sub    esp,0xc
c000ac3f:	83 ec 08             	sub    esp,0x8
c000ac42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac46:	68 c4 17 02 c0       	push   0xc00217c4
c000ac4b:	e8 f4 fd ff ff       	call   c000aa44 <KiUbsanPrintDetails(char const*, void*)>
c000ac50:	83 c4 10             	add    esp,0x10
c000ac53:	83 ec 0c             	sub    esp,0xc
c000ac56:	68 c4 17 02 c0       	push   0xc00217c4
c000ac5b:	e8 a7 69 00 00       	call   c0011607 <KePanic(char const*)>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	90                   	nop
c000ac64:	83 c4 0c             	add    esp,0xc
c000ac67:	c3                   	ret    

c000ac68 <__ubsan_handle_mul_overflow>:
c000ac68:	83 ec 0c             	sub    esp,0xc
c000ac6b:	83 ec 08             	sub    esp,0x8
c000ac6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac72:	68 29 16 02 c0       	push   0xc0021629
c000ac77:	e8 c8 fd ff ff       	call   c000aa44 <KiUbsanPrintDetails(char const*, void*)>
c000ac7c:	83 c4 10             	add    esp,0x10
c000ac7f:	83 ec 0c             	sub    esp,0xc
c000ac82:	68 29 16 02 c0       	push   0xc0021629
c000ac87:	e8 7b 69 00 00       	call   c0011607 <KePanic(char const*)>
c000ac8c:	83 c4 10             	add    esp,0x10
c000ac8f:	90                   	nop
c000ac90:	83 c4 0c             	add    esp,0xc
c000ac93:	c3                   	ret    

c000ac94 <__ubsan_handle_sub_overflow>:
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	83 ec 08             	sub    esp,0x8
c000ac9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9e:	68 45 16 02 c0       	push   0xc0021645
c000aca3:	e8 9c fd ff ff       	call   c000aa44 <KiUbsanPrintDetails(char const*, void*)>
c000aca8:	83 c4 10             	add    esp,0x10
c000acab:	83 ec 0c             	sub    esp,0xc
c000acae:	68 45 16 02 c0       	push   0xc0021645
c000acb3:	e8 4f 69 00 00       	call   c0011607 <KePanic(char const*)>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	90                   	nop
c000acbc:	83 c4 0c             	add    esp,0xc
c000acbf:	c3                   	ret    

c000acc0 <__ubsan_handle_shift_out_of_bounds>:
c000acc0:	83 ec 0c             	sub    esp,0xc
c000acc3:	83 ec 08             	sub    esp,0x8
c000acc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acca:	68 e4 17 02 c0       	push   0xc00217e4
c000accf:	e8 70 fd ff ff       	call   c000aa44 <KiUbsanPrintDetails(char const*, void*)>
c000acd4:	83 c4 10             	add    esp,0x10
c000acd7:	83 ec 0c             	sub    esp,0xc
c000acda:	68 e4 17 02 c0       	push   0xc00217e4
c000acdf:	e8 23 69 00 00       	call   c0011607 <KePanic(char const*)>
c000ace4:	83 c4 10             	add    esp,0x10
c000ace7:	90                   	nop
c000ace8:	83 c4 0c             	add    esp,0xc
c000aceb:	c3                   	ret    

c000acec <__ubsan_handle_negate_overflow>:
c000acec:	83 ec 0c             	sub    esp,0xc
c000acef:	83 ec 08             	sub    esp,0x8
c000acf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf6:	68 08 18 02 c0       	push   0xc0021808
c000acfb:	e8 44 fd ff ff       	call   c000aa44 <KiUbsanPrintDetails(char const*, void*)>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	83 ec 0c             	sub    esp,0xc
c000ad06:	68 08 18 02 c0       	push   0xc0021808
c000ad0b:	e8 f7 68 00 00       	call   c0011607 <KePanic(char const*)>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	90                   	nop
c000ad14:	83 c4 0c             	add    esp,0xc
c000ad17:	c3                   	ret    

c000ad18 <KiIsHashInTable(unsigned short)>:
c000ad18:	0f b7 d0             	movzx  edx,ax
c000ad1b:	83 e0 07             	and    eax,0x7
c000ad1e:	c1 fa 03             	sar    edx,0x3
c000ad21:	88 c1                	mov    cl,al
c000ad23:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad2a:	d3 fa                	sar    edx,cl
c000ad2c:	89 d0                	mov    eax,edx
c000ad2e:	83 e0 01             	and    eax,0x1
c000ad31:	c3                   	ret    

c000ad32 <KiSetHashInTable(unsigned short, bool)>:
c000ad32:	56                   	push   esi
c000ad33:	53                   	push   ebx
c000ad34:	0f b7 d8             	movzx  ebx,ax
c000ad37:	c1 fb 03             	sar    ebx,0x3
c000ad3a:	83 e0 07             	and    eax,0x7
c000ad3d:	89 c1                	mov    ecx,eax
c000ad3f:	b8 01 00 00 00       	mov    eax,0x1
c000ad44:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad4b:	d3 e0                	shl    eax,cl
c000ad4d:	84 d2                	test   dl,dl
c000ad4f:	74 04                	je     c000ad55 <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad51:	09 f0                	or     eax,esi
c000ad53:	eb 04                	jmp    c000ad59 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad55:	f7 d0                	not    eax
c000ad57:	21 f0                	and    eax,esi
c000ad59:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad5f:	5b                   	pop    ebx
c000ad60:	5e                   	pop    esi
c000ad61:	c3                   	ret    

c000ad62 <KiFlushSymlinkChanges()>:
c000ad62:	57                   	push   edi
c000ad63:	56                   	push   esi
c000ad64:	53                   	push   ebx
c000ad65:	83 ec 1c             	sub    esp,0x1c
c000ad68:	68 14 01 00 00       	push   0x114
c000ad6d:	e8 65 cd ff ff       	call   c0007ad7 <malloc>
c000ad72:	83 c4 0c             	add    esp,0xc
c000ad75:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ad7b:	68 27 18 02 c0       	push   0xc0021827
c000ad80:	50                   	push   eax
c000ad81:	89 c3                	mov    ebx,eax
c000ad83:	e8 9e 0d 00 00       	call   c000bb26 <File::File(char const*, Process*)>
c000ad88:	83 c4 10             	add    esp,0x10
c000ad8b:	85 db                	test   ebx,ebx
c000ad8d:	75 10                	jne    c000ad9f <KiFlushSymlinkChanges()+0x3d>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 45 18 02 c0       	push   0xc0021845
c000ad97:	e8 6b 68 00 00       	call   c0011607 <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	50                   	push   eax
c000ada0:	50                   	push   eax
c000ada1:	6a 06                	push   0x6
c000ada3:	53                   	push   ebx
c000ada4:	e8 9b 0d 00 00       	call   c000bb44 <File::open(FileOpenMode)>
c000ada9:	83 c4 10             	add    esp,0x10
c000adac:	85 c0                	test   eax,eax
c000adae:	74 10                	je     c000adc0 <KiFlushSymlinkChanges()+0x5e>
c000adb0:	83 ec 0c             	sub    esp,0xc
c000adb3:	68 5f 18 02 c0       	push   0xc002185f
c000adb8:	e8 4a 68 00 00       	call   c0011607 <KePanic(char const*)>
c000adbd:	83 c4 10             	add    esp,0x10
c000adc0:	31 f6                	xor    esi,esi
c000adc2:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000adc8:	7e 70                	jle    c000ae3a <KiFlushSymlinkChanges()+0xd8>
c000adca:	83 ec 0c             	sub    esp,0xc
c000adcd:	89 f0                	mov    eax,esi
c000adcf:	8b 13                	mov    edx,DWORD PTR [ebx]
c000add1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000add5:	c1 e0 08             	shl    eax,0x8
c000add8:	57                   	push   edi
c000add9:	05 00 70 02 c0       	add    eax,0xc0027000
c000adde:	50                   	push   eax
c000addf:	6a 00                	push   0x0
c000ade1:	68 00 01 00 00       	push   0x100
c000ade6:	53                   	push   ebx
c000ade7:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000adea:	83 c4 20             	add    esp,0x20
c000aded:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000adf5:	74 10                	je     c000ae07 <KiFlushSymlinkChanges()+0xa5>
c000adf7:	83 ec 0c             	sub    esp,0xc
c000adfa:	68 79 18 02 c0       	push   0xc0021879
c000adff:	e8 03 68 00 00       	call   c0011607 <KePanic(char const*)>
c000ae04:	83 c4 10             	add    esp,0x10
c000ae07:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae09:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae10:	83 ec 0c             	sub    esp,0xc
c000ae13:	57                   	push   edi
c000ae14:	52                   	push   edx
c000ae15:	6a 00                	push   0x0
c000ae17:	6a 08                	push   0x8
c000ae19:	53                   	push   ebx
c000ae1a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae1d:	83 c4 20             	add    esp,0x20
c000ae20:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae25:	74 10                	je     c000ae37 <KiFlushSymlinkChanges()+0xd5>
c000ae27:	83 ec 0c             	sub    esp,0xc
c000ae2a:	68 93 18 02 c0       	push   0xc0021893
c000ae2f:	e8 d3 67 00 00       	call   c0011607 <KePanic(char const*)>
c000ae34:	83 c4 10             	add    esp,0x10
c000ae37:	46                   	inc    esi
c000ae38:	eb 88                	jmp    c000adc2 <KiFlushSymlinkChanges()+0x60>
c000ae3a:	83 ec 0c             	sub    esp,0xc
c000ae3d:	53                   	push   ebx
c000ae3e:	e8 5f 0d 00 00       	call   c000bba2 <File::close()>
c000ae43:	83 c4 10             	add    esp,0x10
c000ae46:	85 db                	test   ebx,ebx
c000ae48:	74 0c                	je     c000ae56 <KiFlushSymlinkChanges()+0xf4>
c000ae4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae4c:	83 ec 0c             	sub    esp,0xc
c000ae4f:	53                   	push   ebx
c000ae50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae53:	83 c4 10             	add    esp,0x10
c000ae56:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	5b                   	pop    ebx
c000ae64:	5e                   	pop    esi
c000ae65:	5f                   	pop    edi
c000ae66:	c3                   	ret    

c000ae67 <KiDeinitialiseSymlinks(void*)>:
c000ae67:	e9 f6 fe ff ff       	jmp    c000ad62 <KiFlushSymlinkChanges()>

c000ae6c <KiGetSymlinkHash(char const*)>:
c000ae6c:	53                   	push   ebx
c000ae6d:	89 c3                	mov    ebx,eax
c000ae6f:	83 ec 14             	sub    esp,0x14
c000ae72:	50                   	push   eax
c000ae73:	e8 08 57 ff ff       	call   c0000580 <strlen>
c000ae78:	5a                   	pop    edx
c000ae79:	59                   	pop    ecx
c000ae7a:	50                   	push   eax
c000ae7b:	53                   	push   ebx
c000ae7c:	e8 08 61 00 00       	call   c0010f89 <KeCalculateCRC32(unsigned char*, int)>
c000ae81:	83 c4 18             	add    esp,0x18
c000ae84:	5b                   	pop    ebx
c000ae85:	89 c2                	mov    edx,eax
c000ae87:	c1 ea 10             	shr    edx,0x10
c000ae8a:	31 d0                	xor    eax,edx
c000ae8c:	c3                   	ret    

c000ae8d <KiCreateSymlinkID()>:
c000ae8d:	55                   	push   ebp
c000ae8e:	57                   	push   edi
c000ae8f:	56                   	push   esi
c000ae90:	53                   	push   ebx
c000ae91:	31 db                	xor    ebx,ebx
c000ae93:	83 ec 1c             	sub    esp,0x1c
c000ae96:	e8 ba 68 00 00       	call   c0011755 <KeRand()>
c000ae9b:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aea1:	31 d2                	xor    edx,edx
c000aea3:	43                   	inc    ebx
c000aea4:	31 ff                	xor    edi,edi
c000aea6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aea9:	89 ee                	mov    esi,ebp
c000aeab:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aeb1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000aeb5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aeb9:	c1 e0 1f             	shl    eax,0x1f
c000aebc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000aec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aec6:	75 10                	jne    c000aed8 <KiCreateSymlinkID()+0x4b>
c000aec8:	83 ec 0c             	sub    esp,0xc
c000aecb:	68 ad 18 02 c0       	push   0xc00218ad
c000aed0:	e8 32 67 00 00       	call   c0011607 <KePanic(char const*)>
c000aed5:	83 c4 10             	add    esp,0x10
c000aed8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000aedc:	75 06                	jne    c000aee4 <KiCreateSymlinkID()+0x57>
c000aede:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000aee2:	74 b2                	je     c000ae96 <KiCreateSymlinkID()+0x9>
c000aee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aee8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aeec:	83 c4 1c             	add    esp,0x1c
c000aeef:	5b                   	pop    ebx
c000aef0:	31 f0                	xor    eax,esi
c000aef2:	5e                   	pop    esi
c000aef3:	31 fa                	xor    edx,edi
c000aef5:	5f                   	pop    edi
c000aef6:	5d                   	pop    ebp
c000aef7:	c3                   	ret    

c000aef8 <KeRegisterSymlink(char const*, unsigned long long)>:
c000aef8:	53                   	push   ebx
c000aef9:	83 ec 0c             	sub    esp,0xc
c000aefc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af04:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af09:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af0d:	68 00 01 00 00       	push   0x100
c000af12:	6a 00                	push   0x0
c000af14:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af1b:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af22:	c1 e0 08             	shl    eax,0x8
c000af25:	05 00 70 02 c0       	add    eax,0xc0027000
c000af2a:	50                   	push   eax
c000af2b:	e8 c0 55 ff ff       	call   c00004f0 <memset>
c000af30:	58                   	pop    eax
c000af31:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af36:	5a                   	pop    edx
c000af37:	c1 e0 08             	shl    eax,0x8
c000af3a:	53                   	push   ebx
c000af3b:	05 00 70 02 c0       	add    eax,0xc0027000
c000af40:	50                   	push   eax
c000af41:	e8 0a 57 ff ff       	call   c0000650 <strcpy>
c000af46:	89 d8                	mov    eax,ebx
c000af48:	e8 1f ff ff ff       	call   c000ae6c <KiGetSymlinkHash(char const*)>
c000af4d:	59                   	pop    ecx
c000af4e:	0f b7 d8             	movzx  ebx,ax
c000af51:	58                   	pop    eax
c000af52:	53                   	push   ebx
c000af53:	68 b6 18 02 c0       	push   0xc00218b6
c000af58:	e8 b1 f9 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000af5d:	89 d8                	mov    eax,ebx
c000af5f:	ba 01 00 00 00       	mov    edx,0x1
c000af64:	e8 c9 fd ff ff       	call   c000ad32 <KiSetHashInTable(unsigned short, bool)>
c000af69:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af6e:	83 c4 10             	add    esp,0x10
c000af71:	40                   	inc    eax
c000af72:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000af77:	83 f8 03             	cmp    eax,0x3
c000af7a:	7e 09                	jle    c000af85 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c000af7c:	83 c4 08             	add    esp,0x8
c000af7f:	5b                   	pop    ebx
c000af80:	e9 dd fd ff ff       	jmp    c000ad62 <KiFlushSymlinkChanges()>
c000af85:	83 c4 08             	add    esp,0x8
c000af88:	5b                   	pop    ebx
c000af89:	c3                   	ret    

c000af8a <KeInitialiseSymlinks()>:
c000af8a:	57                   	push   edi
c000af8b:	56                   	push   esi
c000af8c:	53                   	push   ebx
c000af8d:	81 ec 14 01 00 00    	sub    esp,0x114
c000af93:	68 00 20 00 00       	push   0x2000
c000af98:	6a 00                	push   0x0
c000af9a:	68 00 74 02 c0       	push   0xc0027400
c000af9f:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000afa9:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000afb3:	e8 38 55 ff ff       	call   c00004f0 <memset>
c000afb8:	59                   	pop    ecx
c000afb9:	5b                   	pop    ebx
c000afba:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000afc0:	68 ca 18 02 c0       	push   0xc00218ca
c000afc5:	e8 44 f9 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000afca:	5e                   	pop    esi
c000afcb:	5f                   	pop    edi
c000afcc:	6a 00                	push   0x0
c000afce:	68 67 ae 00 c0       	push   0xc000ae67
c000afd3:	e8 1e 5e 00 00       	call   c0010df6 <KeRegisterAtexit(void (*)(void*), void*)>
c000afd8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000afdf:	e8 f3 ca ff ff       	call   c0007ad7 <malloc>
c000afe4:	83 c4 0c             	add    esp,0xc
c000afe7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000afed:	68 27 18 02 c0       	push   0xc0021827
c000aff2:	50                   	push   eax
c000aff3:	89 c3                	mov    ebx,eax
c000aff5:	e8 2c 0b 00 00       	call   c000bb26 <File::File(char const*, Process*)>
c000affa:	83 c4 10             	add    esp,0x10
c000affd:	85 db                	test   ebx,ebx
c000afff:	75 10                	jne    c000b011 <KeInitialiseSymlinks()+0x87>
c000b001:	83 ec 0c             	sub    esp,0xc
c000b004:	68 e7 18 02 c0       	push   0xc00218e7
c000b009:	e8 f9 65 00 00       	call   c0011607 <KePanic(char const*)>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	83 ec 0c             	sub    esp,0xc
c000b014:	53                   	push   ebx
c000b015:	e8 ee 0d 00 00       	call   c000be08 <File::exists()>
c000b01a:	83 c4 10             	add    esp,0x10
c000b01d:	84 c0                	test   al,al
c000b01f:	75 3a                	jne    c000b05b <KeInitialiseSymlinks()+0xd1>
c000b021:	52                   	push   edx
c000b022:	52                   	push   edx
c000b023:	6a 12                	push   0x12
c000b025:	53                   	push   ebx
c000b026:	e8 19 0b 00 00       	call   c000bb44 <File::open(FileOpenMode)>
c000b02b:	83 c4 10             	add    esp,0x10
c000b02e:	85 c0                	test   eax,eax
c000b030:	74 10                	je     c000b042 <KeInitialiseSymlinks()+0xb8>
c000b032:	83 ec 0c             	sub    esp,0xc
c000b035:	68 04 19 02 c0       	push   0xc0021904
c000b03a:	e8 c8 65 00 00       	call   c0011607 <KePanic(char const*)>
c000b03f:	83 c4 10             	add    esp,0x10
c000b042:	83 ec 0c             	sub    esp,0xc
c000b045:	53                   	push   ebx
c000b046:	e8 57 0b 00 00       	call   c000bba2 <File::close()>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	85 db                	test   ebx,ebx
c000b050:	0f 84 9e 00 00 00    	je     c000b0f4 <KeInitialiseSymlinks()+0x16a>
c000b056:	e9 8d 00 00 00       	jmp    c000b0e8 <KeInitialiseSymlinks()+0x15e>
c000b05b:	50                   	push   eax
c000b05c:	50                   	push   eax
c000b05d:	6a 01                	push   0x1
c000b05f:	53                   	push   ebx
c000b060:	e8 df 0a 00 00       	call   c000bb44 <File::open(FileOpenMode)>
c000b065:	83 c4 10             	add    esp,0x10
c000b068:	85 c0                	test   eax,eax
c000b06a:	74 10                	je     c000b07c <KeInitialiseSymlinks()+0xf2>
c000b06c:	83 ec 0c             	sub    esp,0xc
c000b06f:	68 21 19 02 c0       	push   0xc0021921
c000b074:	e8 8e 65 00 00       	call   c0011607 <KePanic(char const*)>
c000b079:	83 c4 10             	add    esp,0x10
c000b07c:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b082:	83 ec 0c             	sub    esp,0xc
c000b085:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b089:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b08b:	57                   	push   edi
c000b08c:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b090:	56                   	push   esi
c000b091:	6a 00                	push   0x0
c000b093:	68 00 01 00 00       	push   0x100
c000b098:	53                   	push   ebx
c000b099:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b09c:	83 c4 20             	add    esp,0x20
c000b09f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0a7:	75 33                	jne    c000b0dc <KeInitialiseSymlinks()+0x152>
c000b0a9:	83 ec 0c             	sub    esp,0xc
c000b0ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0ae:	57                   	push   edi
c000b0af:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0b3:	52                   	push   edx
c000b0b4:	6a 00                	push   0x0
c000b0b6:	6a 08                	push   0x8
c000b0b8:	53                   	push   ebx
c000b0b9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0bc:	83 c4 20             	add    esp,0x20
c000b0bf:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b0c4:	75 16                	jne    c000b0dc <KeInitialiseSymlinks()+0x152>
c000b0c6:	89 f0                	mov    eax,esi
c000b0c8:	e8 9f fd ff ff       	call   c000ae6c <KiGetSymlinkHash(char const*)>
c000b0cd:	ba 01 00 00 00       	mov    edx,0x1
c000b0d2:	0f b7 c0             	movzx  eax,ax
c000b0d5:	e8 58 fc ff ff       	call   c000ad32 <KiSetHashInTable(unsigned short, bool)>
c000b0da:	eb a0                	jmp    c000b07c <KeInitialiseSymlinks()+0xf2>
c000b0dc:	83 ec 0c             	sub    esp,0xc
c000b0df:	53                   	push   ebx
c000b0e0:	e8 bd 0a 00 00       	call   c000bba2 <File::close()>
c000b0e5:	83 c4 10             	add    esp,0x10
c000b0e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0ea:	83 ec 0c             	sub    esp,0xc
c000b0ed:	53                   	push   ebx
c000b0ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	81 c4 10 01 00 00    	add    esp,0x110
c000b0fa:	5b                   	pop    ebx
c000b0fb:	5e                   	pop    esi
c000b0fc:	5f                   	pop    edi
c000b0fd:	c3                   	ret    

c000b0fe <KiIsSymlinkRegistered(char const*)>:
c000b0fe:	55                   	push   ebp
c000b0ff:	57                   	push   edi
c000b100:	56                   	push   esi
c000b101:	53                   	push   ebx
c000b102:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b108:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b10f:	89 f0                	mov    eax,esi
c000b111:	e8 56 fd ff ff       	call   c000ae6c <KiGetSymlinkHash(char const*)>
c000b116:	53                   	push   ebx
c000b117:	56                   	push   esi
c000b118:	0f b7 c0             	movzx  eax,ax
c000b11b:	50                   	push   eax
c000b11c:	68 3c 19 02 c0       	push   0xc002193c
c000b121:	e8 e8 f7 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000b126:	89 f0                	mov    eax,esi
c000b128:	e8 3f fd ff ff       	call   c000ae6c <KiGetSymlinkHash(char const*)>
c000b12d:	0f b7 c0             	movzx  eax,ax
c000b130:	e8 e3 fb ff ff       	call   c000ad18 <KiIsHashInTable(unsigned short)>
c000b135:	83 c4 10             	add    esp,0x10
c000b138:	31 d2                	xor    edx,edx
c000b13a:	88 c1                	mov    cl,al
c000b13c:	31 c0                	xor    eax,eax
c000b13e:	84 c9                	test   cl,cl
c000b140:	0f 84 31 01 00 00    	je     c000b277 <KiIsSymlinkRegistered(char const*)+0x179>
c000b146:	31 db                	xor    ebx,ebx
c000b148:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b14e:	7e 30                	jle    c000b180 <KiIsSymlinkRegistered(char const*)+0x82>
c000b150:	89 d8                	mov    eax,ebx
c000b152:	c1 e0 08             	shl    eax,0x8
c000b155:	51                   	push   ecx
c000b156:	05 00 70 02 c0       	add    eax,0xc0027000
c000b15b:	51                   	push   ecx
c000b15c:	50                   	push   eax
c000b15d:	56                   	push   esi
c000b15e:	e8 1d 56 ff ff       	call   c0000780 <strcmp>
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	85 c0                	test   eax,eax
c000b168:	75 13                	jne    c000b17d <KiIsSymlinkRegistered(char const*)+0x7f>
c000b16a:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b171:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b178:	e9 fa 00 00 00       	jmp    c000b277 <KiIsSymlinkRegistered(char const*)+0x179>
c000b17d:	43                   	inc    ebx
c000b17e:	eb c8                	jmp    c000b148 <KiIsSymlinkRegistered(char const*)+0x4a>
c000b180:	83 ec 0c             	sub    esp,0xc
c000b183:	68 14 01 00 00       	push   0x114
c000b188:	e8 4a c9 ff ff       	call   c0007ad7 <malloc>
c000b18d:	83 c4 0c             	add    esp,0xc
c000b190:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b196:	68 27 18 02 c0       	push   0xc0021827
c000b19b:	50                   	push   eax
c000b19c:	89 c3                	mov    ebx,eax
c000b19e:	e8 83 09 00 00       	call   c000bb26 <File::File(char const*, Process*)>
c000b1a3:	83 c4 10             	add    esp,0x10
c000b1a6:	85 db                	test   ebx,ebx
c000b1a8:	75 12                	jne    c000b1bc <KiIsSymlinkRegistered(char const*)+0xbe>
c000b1aa:	83 ec 0c             	sub    esp,0xc
c000b1ad:	68 51 19 02 c0       	push   0xc0021951
c000b1b2:	e8 50 64 00 00       	call   c0011607 <KePanic(char const*)>
c000b1b7:	83 c4 10             	add    esp,0x10
c000b1ba:	eb 10                	jmp    c000b1cc <KiIsSymlinkRegistered(char const*)+0xce>
c000b1bc:	83 ec 0c             	sub    esp,0xc
c000b1bf:	53                   	push   ebx
c000b1c0:	e8 43 0c 00 00       	call   c000be08 <File::exists()>
c000b1c5:	83 c4 10             	add    esp,0x10
c000b1c8:	84 c0                	test   al,al
c000b1ca:	74 de                	je     c000b1aa <KiIsSymlinkRegistered(char const*)+0xac>
c000b1cc:	52                   	push   edx
c000b1cd:	52                   	push   edx
c000b1ce:	6a 01                	push   0x1
c000b1d0:	53                   	push   ebx
c000b1d1:	e8 6e 09 00 00       	call   c000bb44 <File::open(FileOpenMode)>
c000b1d6:	83 c4 10             	add    esp,0x10
c000b1d9:	85 c0                	test   eax,eax
c000b1db:	74 10                	je     c000b1ed <KiIsSymlinkRegistered(char const*)+0xef>
c000b1dd:	83 ec 0c             	sub    esp,0xc
c000b1e0:	68 6c 19 02 c0       	push   0xc002196c
c000b1e5:	e8 1d 64 00 00       	call   c0011607 <KePanic(char const*)>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	83 ec 0c             	sub    esp,0xc
c000b1f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1f2:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b1f6:	55                   	push   ebp
c000b1f7:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b1fb:	57                   	push   edi
c000b1fc:	6a 00                	push   0x0
c000b1fe:	68 00 01 00 00       	push   0x100
c000b203:	53                   	push   ebx
c000b204:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b207:	83 c4 20             	add    esp,0x20
c000b20a:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b212:	75 4b                	jne    c000b25f <KiIsSymlinkRegistered(char const*)+0x161>
c000b214:	83 ec 0c             	sub    esp,0xc
c000b217:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b219:	55                   	push   ebp
c000b21a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b21e:	52                   	push   edx
c000b21f:	6a 00                	push   0x0
c000b221:	6a 08                	push   0x8
c000b223:	53                   	push   ebx
c000b224:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b227:	83 c4 20             	add    esp,0x20
c000b22a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b22f:	75 2e                	jne    c000b25f <KiIsSymlinkRegistered(char const*)+0x161>
c000b231:	50                   	push   eax
c000b232:	50                   	push   eax
c000b233:	57                   	push   edi
c000b234:	56                   	push   esi
c000b235:	e8 46 55 ff ff       	call   c0000780 <strcmp>
c000b23a:	83 c4 10             	add    esp,0x10
c000b23d:	85 c0                	test   eax,eax
c000b23f:	75 ac                	jne    c000b1ed <KiIsSymlinkRegistered(char const*)+0xef>
c000b241:	83 ec 0c             	sub    esp,0xc
c000b244:	53                   	push   ebx
c000b245:	e8 58 09 00 00       	call   c000bba2 <File::close()>
c000b24a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b24c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b24f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b252:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b256:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b25a:	83 c4 10             	add    esp,0x10
c000b25d:	eb 18                	jmp    c000b277 <KiIsSymlinkRegistered(char const*)+0x179>
c000b25f:	83 ec 0c             	sub    esp,0xc
c000b262:	53                   	push   ebx
c000b263:	e8 3a 09 00 00       	call   c000bba2 <File::close()>
c000b268:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b26a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b26d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	31 c0                	xor    eax,eax
c000b275:	31 d2                	xor    edx,edx
c000b277:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b27d:	5b                   	pop    ebx
c000b27e:	5e                   	pop    esi
c000b27f:	5f                   	pop    edi
c000b280:	5d                   	pop    ebp
c000b281:	c3                   	ret    

c000b282 <KeDereferenceSymlink(char const*, char*)>:
c000b282:	55                   	push   ebp
c000b283:	57                   	push   edi
c000b284:	56                   	push   esi
c000b285:	53                   	push   ebx
c000b286:	83 ec 48             	sub    esp,0x48
c000b289:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b28d:	56                   	push   esi
c000b28e:	e8 6b fe ff ff       	call   c000b0fe <KiIsSymlinkRegistered(char const*)>
c000b293:	83 c4 10             	add    esp,0x10
c000b296:	89 c7                	mov    edi,eax
c000b298:	89 d0                	mov    eax,edx
c000b29a:	09 f8                	or     eax,edi
c000b29c:	75 07                	jne    c000b2a5 <KeDereferenceSymlink(char const*, char*)+0x23>
c000b29e:	31 c0                	xor    eax,eax
c000b2a0:	e9 7c 01 00 00       	jmp    c000b421 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b2a5:	83 ec 0c             	sub    esp,0xc
c000b2a8:	89 d5                	mov    ebp,edx
c000b2aa:	68 14 01 00 00       	push   0x114
c000b2af:	e8 23 c8 ff ff       	call   c0007ad7 <malloc>
c000b2b4:	83 c4 0c             	add    esp,0xc
c000b2b7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b2bd:	56                   	push   esi
c000b2be:	50                   	push   eax
c000b2bf:	89 c3                	mov    ebx,eax
c000b2c1:	e8 60 08 00 00       	call   c000bb26 <File::File(char const*, Process*)>
c000b2c6:	83 c4 10             	add    esp,0x10
c000b2c9:	85 db                	test   ebx,ebx
c000b2cb:	0f 84 32 01 00 00    	je     c000b403 <KeDereferenceSymlink(char const*, char*)+0x181>
c000b2d1:	56                   	push   esi
c000b2d2:	56                   	push   esi
c000b2d3:	6a 01                	push   0x1
c000b2d5:	53                   	push   ebx
c000b2d6:	e8 69 08 00 00       	call   c000bb44 <File::open(FileOpenMode)>
c000b2db:	83 c4 10             	add    esp,0x10
c000b2de:	85 c0                	test   eax,eax
c000b2e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2e2:	74 09                	je     c000b2ed <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b2e4:	83 ec 0c             	sub    esp,0xc
c000b2e7:	53                   	push   ebx
c000b2e8:	e9 10 01 00 00       	jmp    c000b3fd <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b2f4:	56                   	push   esi
c000b2f5:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b2f9:	52                   	push   edx
c000b2fa:	6a 00                	push   0x0
c000b2fc:	6a 08                	push   0x8
c000b2fe:	53                   	push   ebx
c000b2ff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b302:	83 c4 20             	add    esp,0x20
c000b305:	85 c0                	test   eax,eax
c000b307:	0f 85 e2 00 00 00    	jne    c000b3ef <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b30d:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b312:	0f 85 d7 00 00 00    	jne    c000b3ef <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b318:	83 ec 0c             	sub    esp,0xc
c000b31b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b31d:	56                   	push   esi
c000b31e:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b322:	52                   	push   edx
c000b323:	6a 00                	push   0x0
c000b325:	6a 08                	push   0x8
c000b327:	53                   	push   ebx
c000b328:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b32b:	83 c4 20             	add    esp,0x20
c000b32e:	85 c0                	test   eax,eax
c000b330:	0f 85 b9 00 00 00    	jne    c000b3ef <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b336:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b33b:	0f 85 ae 00 00 00    	jne    c000b3ef <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b341:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b345:	0f 85 53 ff ff ff    	jne    c000b29e <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b34b:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b34f:	0f 85 49 ff ff ff    	jne    c000b29e <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b355:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b35d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b365:	51                   	push   ecx
c000b366:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b36a:	50                   	push   eax
c000b36b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b36f:	50                   	push   eax
c000b370:	53                   	push   ebx
c000b371:	e8 d0 0a 00 00       	call   c000be46 <File::stat(unsigned long long*, bool*)>
c000b376:	83 c4 10             	add    esp,0x10
c000b379:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b37e:	75 6f                	jne    c000b3ef <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b380:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b384:	31 c9                	xor    ecx,ecx
c000b386:	bf 0f 00 00 00       	mov    edi,0xf
c000b38b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b38f:	39 c7                	cmp    edi,eax
c000b391:	89 cf                	mov    edi,ecx
c000b393:	19 d7                	sbb    edi,edx
c000b395:	73 58                	jae    c000b3ef <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b397:	83 c0 f0             	add    eax,0xfffffff0
c000b39a:	bf ff 00 00 00       	mov    edi,0xff
c000b39f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b3a3:	83 d2 ff             	adc    edx,0xffffffff
c000b3a6:	39 c7                	cmp    edi,eax
c000b3a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b3ac:	19 d1                	sbb    ecx,edx
c000b3ae:	72 53                	jb     c000b403 <KeDereferenceSymlink(char const*, char*)+0x181>
c000b3b0:	40                   	inc    eax
c000b3b1:	52                   	push   edx
c000b3b2:	50                   	push   eax
c000b3b3:	6a 00                	push   0x0
c000b3b5:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b3b9:	e8 32 51 ff ff       	call   c00004f0 <memset>
c000b3be:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3c0:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3c3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b3c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b3cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b3cf:	53                   	push   ebx
c000b3d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b3d3:	83 c4 20             	add    esp,0x20
c000b3d6:	85 c0                	test   eax,eax
c000b3d8:	75 15                	jne    c000b3ef <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3de:	89 c7                	mov    edi,eax
c000b3e0:	c1 ff 1f             	sar    edi,0x1f
c000b3e3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b3e7:	75 06                	jne    c000b3ef <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3e9:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b3ed:	74 19                	je     c000b408 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b3ef:	83 ec 0c             	sub    esp,0xc
c000b3f2:	53                   	push   ebx
c000b3f3:	e8 aa 07 00 00       	call   c000bba2 <File::close()>
c000b3f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	83 c8 ff             	or     eax,0xffffffff
c000b406:	eb 19                	jmp    c000b421 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b408:	83 ec 0c             	sub    esp,0xc
c000b40b:	53                   	push   ebx
c000b40c:	e8 91 07 00 00       	call   c000bba2 <File::close()>
c000b411:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b413:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b416:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b419:	83 c4 10             	add    esp,0x10
c000b41c:	b8 01 00 00 00       	mov    eax,0x1
c000b421:	83 c4 3c             	add    esp,0x3c
c000b424:	5b                   	pop    ebx
c000b425:	5e                   	pop    esi
c000b426:	5f                   	pop    edi
c000b427:	5d                   	pop    ebp
c000b428:	c3                   	ret    

c000b429 <KeCreateSymlink(char const*, char const*)>:
c000b429:	55                   	push   ebp
c000b42a:	57                   	push   edi
c000b42b:	56                   	push   esi
c000b42c:	53                   	push   ebx
c000b42d:	83 ec 38             	sub    esp,0x38
c000b430:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b434:	68 14 01 00 00       	push   0x114
c000b439:	e8 99 c6 ff ff       	call   c0007ad7 <malloc>
c000b43e:	6a 00                	push   0x0
c000b440:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b446:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b44a:	89 c3                	mov    ebx,eax
c000b44c:	50                   	push   eax
c000b44d:	e8 f6 05 00 00       	call   c000ba48 <File::File(char const*, Process*, bool)>
c000b452:	83 c4 20             	add    esp,0x20
c000b455:	85 db                	test   ebx,ebx
c000b457:	b8 01 00 00 00       	mov    eax,0x1
c000b45c:	0f 84 19 01 00 00    	je     c000b57b <KeCreateSymlink(char const*, char const*)+0x152>
c000b462:	52                   	push   edx
c000b463:	52                   	push   edx
c000b464:	6a 12                	push   0x12
c000b466:	53                   	push   ebx
c000b467:	e8 d8 06 00 00       	call   c000bb44 <File::open(FileOpenMode)>
c000b46c:	83 c4 10             	add    esp,0x10
c000b46f:	85 c0                	test   eax,eax
c000b471:	74 0b                	je     c000b47e <KeCreateSymlink(char const*, char const*)+0x55>
c000b473:	83 ec 0c             	sub    esp,0xc
c000b476:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b478:	53                   	push   ebx
c000b479:	e9 f2 00 00 00       	jmp    c000b570 <KeCreateSymlink(char const*, char const*)+0x147>
c000b47e:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b482:	be b9 19 02 c0       	mov    esi,0xc00219b9
c000b487:	b9 09 00 00 00       	mov    ecx,0x9
c000b48c:	fc                   	cld    
c000b48d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b48f:	83 ec 0c             	sub    esp,0xc
c000b492:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b496:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b498:	56                   	push   esi
c000b499:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b49d:	52                   	push   edx
c000b49e:	6a 00                	push   0x0
c000b4a0:	6a 08                	push   0x8
c000b4a2:	53                   	push   ebx
c000b4a3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b4a6:	83 c4 20             	add    esp,0x20
c000b4a9:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b4ae:	0f 85 ae 00 00 00    	jne    c000b562 <KeCreateSymlink(char const*, char const*)+0x139>
c000b4b4:	85 c0                	test   eax,eax
c000b4b6:	0f 85 a6 00 00 00    	jne    c000b562 <KeCreateSymlink(char const*, char const*)+0x139>
c000b4bc:	e8 cc f9 ff ff       	call   c000ae8d <KiCreateSymlinkID()>
c000b4c1:	83 ec 0c             	sub    esp,0xc
c000b4c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4ce:	56                   	push   esi
c000b4cf:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b4d3:	52                   	push   edx
c000b4d4:	6a 00                	push   0x0
c000b4d6:	6a 08                	push   0x8
c000b4d8:	53                   	push   ebx
c000b4d9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b4dc:	83 c4 20             	add    esp,0x20
c000b4df:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b4e4:	75 7c                	jne    c000b562 <KeCreateSymlink(char const*, char const*)+0x139>
c000b4e6:	85 c0                	test   eax,eax
c000b4e8:	75 78                	jne    c000b562 <KeCreateSymlink(char const*, char const*)+0x139>
c000b4ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4ec:	83 ec 0c             	sub    esp,0xc
c000b4ef:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b4f2:	55                   	push   ebp
c000b4f3:	e8 88 50 ff ff       	call   c0000580 <strlen>
c000b4f8:	31 d2                	xor    edx,edx
c000b4fa:	89 34 24             	mov    DWORD PTR [esp],esi
c000b4fd:	55                   	push   ebp
c000b4fe:	52                   	push   edx
c000b4ff:	50                   	push   eax
c000b500:	53                   	push   ebx
c000b501:	ff d7                	call   edi
c000b503:	83 c4 14             	add    esp,0x14
c000b506:	55                   	push   ebp
c000b507:	89 c6                	mov    esi,eax
c000b509:	e8 72 50 ff ff       	call   c0000580 <strlen>
c000b50e:	83 c4 10             	add    esp,0x10
c000b511:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b515:	75 4b                	jne    c000b562 <KeCreateSymlink(char const*, char const*)+0x139>
c000b517:	85 f6                	test   esi,esi
c000b519:	75 47                	jne    c000b562 <KeCreateSymlink(char const*, char const*)+0x139>
c000b51b:	50                   	push   eax
c000b51c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b520:	55                   	push   ebp
c000b521:	68 87 19 02 c0       	push   0xc0021987
c000b526:	e8 e3 f3 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000b52b:	83 c4 0c             	add    esp,0xc
c000b52e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b532:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b536:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b53a:	e8 b9 f9 ff ff       	call   c000aef8 <KeRegisterSymlink(char const*, unsigned long long)>
c000b53f:	c7 04 24 ac 19 02 c0 	mov    DWORD PTR [esp],0xc00219ac
c000b546:	e8 c3 f3 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000b54b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b54e:	e8 4f 06 00 00       	call   c000bba2 <File::close()>
c000b553:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b555:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b558:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b55b:	83 c4 10             	add    esp,0x10
c000b55e:	31 c0                	xor    eax,eax
c000b560:	eb 19                	jmp    c000b57b <KeCreateSymlink(char const*, char const*)+0x152>
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	53                   	push   ebx
c000b566:	e8 37 06 00 00       	call   c000bba2 <File::close()>
c000b56b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b56d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b570:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b573:	83 c4 10             	add    esp,0x10
c000b576:	b8 01 00 00 00       	mov    eax,0x1
c000b57b:	83 c4 2c             	add    esp,0x2c
c000b57e:	5b                   	pop    ebx
c000b57f:	5e                   	pop    esi
c000b580:	5f                   	pop    edi
c000b581:	5d                   	pop    ebp
c000b582:	c3                   	ret    
c000b583:	90                   	nop

c000b584 <File::read(unsigned long long, void*, int*)>:
c000b584:	53                   	push   ebx
c000b585:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b589:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b58d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b594:	83 f8 19             	cmp    eax,0x19
c000b597:	77 35                	ja     c000b5ce <File::read(unsigned long long, void*, int*)+0x4a>
c000b599:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5a0:	85 c0                	test   eax,eax
c000b5a2:	74 2a                	je     c000b5ce <File::read(unsigned long long, void*, int*)+0x4a>
c000b5a4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5aa:	85 c0                	test   eax,eax
c000b5ac:	74 20                	je     c000b5ce <File::read(unsigned long long, void*, int*)+0x4a>
c000b5ae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5b2:	74 21                	je     c000b5d5 <File::read(unsigned long long, void*, int*)+0x51>
c000b5b4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5b6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5ba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c8:	5b                   	pop    ebx
c000b5c9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b5cc:	ff e0                	jmp    eax
c000b5ce:	b8 0b 00 00 00       	mov    eax,0xb
c000b5d3:	eb 05                	jmp    c000b5da <File::read(unsigned long long, void*, int*)+0x56>
c000b5d5:	b8 05 00 00 00       	mov    eax,0x5
c000b5da:	5b                   	pop    ebx
c000b5db:	c3                   	ret    

c000b5dc <File::write(unsigned long long, void*, int*)>:
c000b5dc:	53                   	push   ebx
c000b5dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5e5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5ec:	83 f8 19             	cmp    eax,0x19
c000b5ef:	77 35                	ja     c000b626 <File::write(unsigned long long, void*, int*)+0x4a>
c000b5f1:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5f8:	85 c0                	test   eax,eax
c000b5fa:	74 2a                	je     c000b626 <File::write(unsigned long long, void*, int*)+0x4a>
c000b5fc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b602:	85 c0                	test   eax,eax
c000b604:	74 20                	je     c000b626 <File::write(unsigned long long, void*, int*)+0x4a>
c000b606:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b60a:	74 21                	je     c000b62d <File::write(unsigned long long, void*, int*)+0x51>
c000b60c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b60e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b612:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b618:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b620:	5b                   	pop    ebx
c000b621:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b624:	ff e0                	jmp    eax
c000b626:	b8 0b 00 00 00       	mov    eax,0xb
c000b62b:	eb 05                	jmp    c000b632 <File::write(unsigned long long, void*, int*)+0x56>
c000b62d:	b8 05 00 00 00       	mov    eax,0x5
c000b632:	5b                   	pop    ebx
c000b633:	c3                   	ret    

c000b634 <Directory::read(unsigned long long, void*, int*)>:
c000b634:	53                   	push   ebx
c000b635:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b639:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b63d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b644:	83 f8 19             	cmp    eax,0x19
c000b647:	77 35                	ja     c000b67e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b649:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b650:	85 c0                	test   eax,eax
c000b652:	74 2a                	je     c000b67e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b654:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b65a:	85 c0                	test   eax,eax
c000b65c:	74 20                	je     c000b67e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b65e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b662:	74 21                	je     c000b685 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b664:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b666:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b66a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b670:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b674:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b678:	5b                   	pop    ebx
c000b679:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b67c:	ff e0                	jmp    eax
c000b67e:	b8 0b 00 00 00       	mov    eax,0xb
c000b683:	eb 05                	jmp    c000b68a <Directory::read(unsigned long long, void*, int*)+0x56>
c000b685:	b8 05 00 00 00       	mov    eax,0x5
c000b68a:	5b                   	pop    ebx
c000b68b:	c3                   	ret    

c000b68c <Directory::write(unsigned long long, void*, int*)>:
c000b68c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b690:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b697:	b8 0b 00 00 00       	mov    eax,0xb
c000b69c:	83 fa 19             	cmp    edx,0x19
c000b69f:	77 18                	ja     c000b6b9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6a1:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b6a8:	85 d2                	test   edx,edx
c000b6aa:	74 0d                	je     c000b6b9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6ac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b6b3:	19 c0                	sbb    eax,eax
c000b6b5:	83 e0 0a             	and    eax,0xa
c000b6b8:	40                   	inc    eax
c000b6b9:	c3                   	ret    

c000b6ba <File::isAtty()>:
c000b6ba:	31 c0                	xor    eax,eax
c000b6bc:	c3                   	ret    
c000b6bd:	90                   	nop

c000b6be <Directory::isAtty()>:
c000b6be:	31 c0                	xor    eax,eax
c000b6c0:	c3                   	ret    
c000b6c1:	90                   	nop

c000b6c2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b6c2:	b8 0a 00 00 00       	mov    eax,0xa
c000b6c7:	c3                   	ret    

c000b6c8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b6c8:	b8 0a 00 00 00       	mov    eax,0xa
c000b6cd:	c3                   	ret    

c000b6ce <Filesystem::allocateSwapfile(char const*, int)>:
c000b6ce:	31 c0                	xor    eax,eax
c000b6d0:	31 d2                	xor    edx,edx
c000b6d2:	c3                   	ret    
c000b6d3:	90                   	nop

c000b6d4 <File::~File()>:
c000b6d4:	83 ec 0c             	sub    esp,0xc
c000b6d7:	ba 78 1a 02 c0       	mov    edx,0xc0021a78
c000b6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e0:	89 10                	mov    DWORD PTR [eax],edx
c000b6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e6:	83 ec 0c             	sub    esp,0xc
c000b6e9:	50                   	push   eax
c000b6ea:	e8 a1 dc ff ff       	call   c0009390 <UnixFile::~UnixFile()>
c000b6ef:	83 c4 10             	add    esp,0x10
c000b6f2:	90                   	nop
c000b6f3:	83 c4 0c             	add    esp,0xc
c000b6f6:	c3                   	ret    
c000b6f7:	90                   	nop

c000b6f8 <File::~File()>:
c000b6f8:	83 ec 0c             	sub    esp,0xc
c000b6fb:	83 ec 0c             	sub    esp,0xc
c000b6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b702:	e8 cd ff ff ff       	call   c000b6d4 <File::~File()>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	83 ec 08             	sub    esp,0x8
c000b70d:	68 14 01 00 00       	push   0x114
c000b712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b716:	e8 f5 f0 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000b71b:	83 c4 10             	add    esp,0x10
c000b71e:	83 c4 0c             	add    esp,0xc
c000b721:	c3                   	ret    

c000b722 <Directory::~Directory()>:
c000b722:	83 ec 0c             	sub    esp,0xc
c000b725:	ba 94 1a 02 c0       	mov    edx,0xc0021a94
c000b72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b72e:	89 10                	mov    DWORD PTR [eax],edx
c000b730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b734:	83 ec 0c             	sub    esp,0xc
c000b737:	50                   	push   eax
c000b738:	e8 53 dc ff ff       	call   c0009390 <UnixFile::~UnixFile()>
c000b73d:	83 c4 10             	add    esp,0x10
c000b740:	90                   	nop
c000b741:	83 c4 0c             	add    esp,0xc
c000b744:	c3                   	ret    
c000b745:	90                   	nop

c000b746 <Directory::~Directory()>:
c000b746:	83 ec 0c             	sub    esp,0xc
c000b749:	83 ec 0c             	sub    esp,0xc
c000b74c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b750:	e8 cd ff ff ff       	call   c000b722 <Directory::~Directory()>
c000b755:	83 c4 10             	add    esp,0x10
c000b758:	83 ec 08             	sub    esp,0x8
c000b75b:	68 14 01 00 00       	push   0x114
c000b760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b764:	e8 a7 f0 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000b769:	83 c4 10             	add    esp,0x10
c000b76c:	83 c4 0c             	add    esp,0xc
c000b76f:	c3                   	ret    

c000b770 <Filesystem::Filesystem()>:
c000b770:	ba 0c 1a 02 c0       	mov    edx,0xc0021a0c
c000b775:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b779:	89 10                	mov    DWORD PTR [eax],edx
c000b77b:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b785:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b78c:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b791:	90                   	nop
c000b792:	c3                   	ret    
c000b793:	90                   	nop

c000b794 <Filesystem::~Filesystem()>:
c000b794:	ba 0c 1a 02 c0       	mov    edx,0xc0021a0c
c000b799:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b79d:	89 10                	mov    DWORD PTR [eax],edx
c000b79f:	90                   	nop
c000b7a0:	c3                   	ret    
c000b7a1:	90                   	nop

c000b7a2 <Filesystem::~Filesystem()>:
c000b7a2:	83 ec 0c             	sub    esp,0xc
c000b7a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7a9:	e8 e6 ff ff ff       	call   c000b794 <Filesystem::~Filesystem()>
c000b7ae:	83 c4 04             	add    esp,0x4
c000b7b1:	83 ec 08             	sub    esp,0x8
c000b7b4:	6a 08                	push   0x8
c000b7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ba:	e8 51 f0 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000b7bf:	83 c4 10             	add    esp,0x10
c000b7c2:	83 c4 0c             	add    esp,0xc
c000b7c5:	c3                   	ret    

c000b7c6 <Fs::getcwd(Process*, char*, int)>:
c000b7c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b7ca:	31 c0                	xor    eax,eax
c000b7cc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b7d0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b7d3:	7d 15                	jge    c000b7ea <Fs::getcwd(Process*, char*, int)+0x24>
c000b7d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7d9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b7e0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b7e3:	84 c9                	test   cl,cl
c000b7e5:	74 06                	je     c000b7ed <Fs::getcwd(Process*, char*, int)+0x27>
c000b7e7:	40                   	inc    eax
c000b7e8:	eb e2                	jmp    c000b7cc <Fs::getcwd(Process*, char*, int)+0x6>
c000b7ea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b7ed:	31 c0                	xor    eax,eax
c000b7ef:	c3                   	ret    

c000b7f0 <Fs::initVFS()>:
c000b7f0:	83 ec 18             	sub    esp,0x18
c000b7f3:	6a 08                	push   0x8
c000b7f5:	e8 dd c2 ff ff       	call   c0007ad7 <malloc>
c000b7fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7fd:	e8 a6 e4 00 00       	call   c0019ca8 <FAT::FAT()>
c000b802:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b809:	e8 c9 c2 ff ff       	call   c0007ad7 <malloc>
c000b80e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b811:	e8 c0 f3 00 00       	call   c001abd6 <ISO9660::ISO9660()>
c000b816:	83 c4 1c             	add    esp,0x1c
c000b819:	c3                   	ret    

c000b81a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b81a:	55                   	push   ebp
c000b81b:	57                   	push   edi
c000b81c:	56                   	push   esi
c000b81d:	53                   	push   ebx
c000b81e:	81 ec 20 04 00 00    	sub    esp,0x420
c000b824:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b82b:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b832:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b839:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b840:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b844:	68 00 04 00 00       	push   0x400
c000b849:	6a 00                	push   0x0
c000b84b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b84f:	57                   	push   edi
c000b850:	e8 9b 4c ff ff       	call   c00004f0 <memset>
c000b855:	83 c4 10             	add    esp,0x10
c000b858:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b85c:	75 0b                	jne    c000b869 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b85e:	50                   	push   eax
c000b85f:	50                   	push   eax
c000b860:	56                   	push   esi
c000b861:	57                   	push   edi
c000b862:	e8 e9 4d ff ff       	call   c0000650 <strcpy>
c000b867:	eb 45                	jmp    c000b8ae <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b869:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b86c:	83 f8 2f             	cmp    eax,0x2f
c000b86f:	74 05                	je     c000b876 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b871:	83 f8 5c             	cmp    eax,0x5c
c000b874:	75 19                	jne    c000b88f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b876:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b879:	3c 60                	cmp    al,0x60
c000b87b:	7e 03                	jle    c000b880 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b87d:	83 e8 20             	sub    eax,0x20
c000b880:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b884:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b88b:	50                   	push   eax
c000b88c:	50                   	push   eax
c000b88d:	eb 18                	jmp    c000b8a7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b88f:	50                   	push   eax
c000b890:	50                   	push   eax
c000b891:	55                   	push   ebp
c000b892:	57                   	push   edi
c000b893:	e8 b8 4d ff ff       	call   c0000650 <strcpy>
c000b898:	58                   	pop    eax
c000b899:	5a                   	pop    edx
c000b89a:	68 77 2a 02 c0       	push   0xc0022a77
c000b89f:	57                   	push   edi
c000b8a0:	e8 cb 4f ff ff       	call   c0000870 <strcat>
c000b8a5:	59                   	pop    ecx
c000b8a6:	5d                   	pop    ebp
c000b8a7:	56                   	push   esi
c000b8a8:	57                   	push   edi
c000b8a9:	e8 c2 4f ff ff       	call   c0000870 <strcat>
c000b8ae:	83 c4 10             	add    esp,0x10
c000b8b1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b8b5:	3c 60                	cmp    al,0x60
c000b8b7:	7e 03                	jle    c000b8bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b8b9:	83 e8 20             	sub    eax,0x20
c000b8bc:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b8c0:	be 03 00 00 00       	mov    esi,0x3
c000b8c5:	88 03                	mov    BYTE PTR [ebx],al
c000b8c7:	b8 03 00 00 00       	mov    eax,0x3
c000b8cc:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b8d3:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b8d9:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b8dd:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b8e2:	89 fa                	mov    edx,edi
c000b8e4:	0f be ea             	movsx  ebp,dl
c000b8e7:	85 ed                	test   ebp,ebp
c000b8e9:	0f 84 a1 00 00 00    	je     c000b990 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b8ef:	8d 56 01             	lea    edx,[esi+0x1]
c000b8f2:	83 fd 2f             	cmp    ebp,0x2f
c000b8f5:	74 05                	je     c000b8fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b8f7:	83 fd 5c             	cmp    ebp,0x5c
c000b8fa:	75 12                	jne    c000b90e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b8fc:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b901:	89 c5                	mov    ebp,eax
c000b903:	74 09                	je     c000b90e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b905:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b909:	40                   	inc    eax
c000b90a:	89 d6                	mov    esi,edx
c000b90c:	eb cf                	jmp    c000b8dd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b90e:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b913:	89 f9                	mov    ecx,edi
c000b915:	0f be e9             	movsx  ebp,cl
c000b918:	75 61                	jne    c000b97b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b91a:	83 fd 2e             	cmp    ebp,0x2e
c000b91d:	75 5c                	jne    c000b97b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b91f:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b924:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b929:	74 19                	je     c000b944 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b92b:	83 fd 2e             	cmp    ebp,0x2e
c000b92e:	74 55                	je     c000b985 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b930:	89 f2                	mov    edx,esi
c000b932:	42                   	inc    edx
c000b933:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b938:	83 f9 2f             	cmp    ecx,0x2f
c000b93b:	74 f5                	je     c000b932 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b93d:	83 f9 5c             	cmp    ecx,0x5c
c000b940:	74 f0                	je     c000b932 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b942:	eb c6                	jmp    c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b944:	83 fd 2e             	cmp    ebp,0x2e
c000b947:	74 3c                	je     c000b985 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b949:	83 f8 03             	cmp    eax,0x3
c000b94c:	74 bc                	je     c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b94e:	42                   	inc    edx
c000b94f:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b954:	83 f9 2f             	cmp    ecx,0x2f
c000b957:	74 f5                	je     c000b94e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b959:	83 f9 5c             	cmp    ecx,0x5c
c000b95c:	74 f0                	je     c000b94e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b95e:	48                   	dec    eax
c000b95f:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b963:	75 06                	jne    c000b96b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b965:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b969:	eb f3                	jmp    c000b95e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b96b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b96f:	74 07                	je     c000b978 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b971:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b975:	48                   	dec    eax
c000b976:	eb f3                	jmp    c000b96b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b978:	40                   	inc    eax
c000b979:	eb 8f                	jmp    c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b97b:	83 fd 2f             	cmp    ebp,0x2f
c000b97e:	74 8a                	je     c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b980:	83 fd 5c             	cmp    ebp,0x5c
c000b983:	74 85                	je     c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b985:	89 f9                	mov    ecx,edi
c000b987:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b98a:	40                   	inc    eax
c000b98b:	e9 7a ff ff ff       	jmp    c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b990:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b994:	83 ec 0c             	sub    esp,0xc
c000b997:	53                   	push   ebx
c000b998:	e8 e3 4b ff ff       	call   c0000580 <strlen>
c000b99d:	83 c4 10             	add    esp,0x10
c000b9a0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b9a5:	74 1c                	je     c000b9c3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9a7:	83 ec 0c             	sub    esp,0xc
c000b9aa:	53                   	push   ebx
c000b9ab:	e8 d0 4b ff ff       	call   c0000580 <strlen>
c000b9b0:	83 c4 10             	add    esp,0x10
c000b9b3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b9b8:	74 09                	je     c000b9c3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9ba:	31 ff                	xor    edi,edi
c000b9bc:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b9c1:	eb 5c                	jmp    c000ba1f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000b9c3:	83 ec 0c             	sub    esp,0xc
c000b9c6:	53                   	push   ebx
c000b9c7:	e8 b4 4b ff ff       	call   c0000580 <strlen>
c000b9cc:	83 c4 10             	add    esp,0x10
c000b9cf:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b9d4:	74 e4                	je     c000b9ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000b9d6:	83 ec 0c             	sub    esp,0xc
c000b9d9:	53                   	push   ebx
c000b9da:	e8 a1 4b ff ff       	call   c0000580 <strlen>
c000b9df:	83 c4 10             	add    esp,0x10
c000b9e2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b9e7:	eb ab                	jmp    c000b994 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000b9e9:	52                   	push   edx
c000b9ea:	52                   	push   edx
c000b9eb:	53                   	push   ebx
c000b9ec:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b9f0:	55                   	push   ebp
c000b9f1:	e8 5a 4c ff ff       	call   c0000650 <strcpy>
c000b9f6:	59                   	pop    ecx
c000b9f7:	58                   	pop    eax
c000b9f8:	53                   	push   ebx
c000b9f9:	55                   	push   ebp
c000b9fa:	e8 83 f8 ff ff       	call   c000b282 <KeDereferenceSymlink(char const*, char*)>
c000b9ff:	83 c4 10             	add    esp,0x10
c000ba02:	48                   	dec    eax
c000ba03:	75 37                	jne    c000ba3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000ba05:	50                   	push   eax
c000ba06:	53                   	push   ebx
c000ba07:	55                   	push   ebp
c000ba08:	68 c2 19 02 c0       	push   0xc00219c2
c000ba0d:	e8 fc ee ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000ba12:	8d 47 01             	lea    eax,[edi+0x1]
c000ba15:	83 c4 10             	add    esp,0x10
c000ba18:	83 ff 14             	cmp    edi,0x14
c000ba1b:	74 08                	je     c000ba25 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000ba1d:	89 c7                	mov    edi,eax
c000ba1f:	85 f6                	test   esi,esi
c000ba21:	75 c6                	jne    c000b9e9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000ba23:	eb 17                	jmp    c000ba3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000ba25:	83 ec 0c             	sub    esp,0xc
c000ba28:	bf 15 00 00 00       	mov    edi,0x15
c000ba2d:	68 dd 19 02 c0       	push   0xc00219dd
c000ba32:	e8 d0 5b 00 00       	call   c0011607 <KePanic(char const*)>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	eb e3                	jmp    c000ba1f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000ba3c:	81 c4 1c 04 00 00    	add    esp,0x41c
c000ba42:	5b                   	pop    ebx
c000ba43:	5e                   	pop    esi
c000ba44:	5f                   	pop    edi
c000ba45:	5d                   	pop    ebp
c000ba46:	c3                   	ret    
c000ba47:	90                   	nop

c000ba48 <File::File(char const*, Process*, bool)>:
c000ba48:	83 ec 1c             	sub    esp,0x1c
c000ba4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba4f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba57:	83 ec 08             	sub    esp,0x8
c000ba5a:	6a 00                	push   0x0
c000ba5c:	50                   	push   eax
c000ba5d:	e8 48 d7 ff ff       	call   c00091aa <UnixFile::UnixFile(int)>
c000ba62:	83 c4 10             	add    esp,0x10
c000ba65:	ba 78 1a 02 c0       	mov    edx,0xc0021a78
c000ba6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba6e:	89 10                	mov    DWORD PTR [eax],edx
c000ba70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ba75:	85 c0                	test   eax,eax
c000ba77:	74 0f                	je     c000ba88 <File::File(char const*, Process*, bool)+0x40>
c000ba79:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ba7e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000ba82:	74 04                	je     c000ba88 <File::File(char const*, Process*, bool)+0x40>
c000ba84:	b0 01                	mov    al,0x1
c000ba86:	eb 02                	jmp    c000ba8a <File::File(char const*, Process*, bool)+0x42>
c000ba88:	b0 00                	mov    al,0x0
c000ba8a:	0f b6 c0             	movzx  eax,al
c000ba8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba91:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000ba97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ba9b:	83 c2 0d             	add    edx,0xd
c000ba9e:	50                   	push   eax
c000ba9f:	51                   	push   ecx
c000baa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000baa4:	52                   	push   edx
c000baa5:	e8 70 fd ff ff       	call   c000b81a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000baaa:	83 c4 10             	add    esp,0x10
c000baad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab1:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bab4:	83 e8 41             	sub    eax,0x41
c000bab7:	88 c2                	mov    dl,al
c000bab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000babd:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac7:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bacb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bacf:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bad5:	0f b6 c0             	movzx  eax,al
c000bad8:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000badf:	85 c0                	test   eax,eax
c000bae1:	74 3e                	je     c000bb21 <File::File(char const*, Process*, bool)+0xd9>
c000bae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae7:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000baed:	0f b6 c0             	movzx  eax,al
c000baf0:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000baf7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bafd:	85 c0                	test   eax,eax
c000baff:	75 20                	jne    c000bb21 <File::File(char const*, Process*, bool)+0xd9>
c000bb01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb05:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb0b:	0f b6 c0             	movzx  eax,al
c000bb0e:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb15:	83 ec 0c             	sub    esp,0xc
c000bb18:	50                   	push   eax
c000bb19:	e8 c2 21 00 00       	call   c000dce0 <LogicalDisk::mount()>
c000bb1e:	83 c4 10             	add    esp,0x10
c000bb21:	90                   	nop
c000bb22:	83 c4 1c             	add    esp,0x1c
c000bb25:	c3                   	ret    

c000bb26 <File::File(char const*, Process*)>:
c000bb26:	83 ec 0c             	sub    esp,0xc
c000bb29:	6a 01                	push   0x1
c000bb2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb37:	e8 0c ff ff ff       	call   c000ba48 <File::File(char const*, Process*, bool)>
c000bb3c:	83 c4 10             	add    esp,0x10
c000bb3f:	90                   	nop
c000bb40:	83 c4 0c             	add    esp,0xc
c000bb43:	c3                   	ret    

c000bb44 <File::open(FileOpenMode)>:
c000bb44:	53                   	push   ebx
c000bb45:	b8 0b 00 00 00       	mov    eax,0xb
c000bb4a:	83 ec 08             	sub    esp,0x8
c000bb4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb51:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb58:	83 fa 19             	cmp    edx,0x19
c000bb5b:	77 40                	ja     c000bb9d <File::open(FileOpenMode)+0x59>
c000bb5d:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb64:	85 d2                	test   edx,edx
c000bb66:	74 35                	je     c000bb9d <File::open(FileOpenMode)+0x59>
c000bb68:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb6e:	85 d2                	test   edx,edx
c000bb70:	74 2b                	je     c000bb9d <File::open(FileOpenMode)+0x59>
c000bb72:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bb76:	b8 06 00 00 00       	mov    eax,0x6
c000bb7b:	75 20                	jne    c000bb9d <File::open(FileOpenMode)+0x59>
c000bb7d:	8b 02                	mov    eax,DWORD PTR [edx]
c000bb7f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb89:	51                   	push   ecx
c000bb8a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bb8d:	51                   	push   ecx
c000bb8e:	52                   	push   edx
c000bb8f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	85 c0                	test   eax,eax
c000bb97:	75 04                	jne    c000bb9d <File::open(FileOpenMode)+0x59>
c000bb99:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bb9d:	83 c4 08             	add    esp,0x8
c000bba0:	5b                   	pop    ebx
c000bba1:	c3                   	ret    

c000bba2 <File::close()>:
c000bba2:	53                   	push   ebx
c000bba3:	b8 0b 00 00 00       	mov    eax,0xb
c000bba8:	83 ec 08             	sub    esp,0x8
c000bbab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbaf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbb6:	83 f9 19             	cmp    ecx,0x19
c000bbb9:	77 41                	ja     c000bbfc <File::close()+0x5a>
c000bbbb:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bbc2:	85 db                	test   ebx,ebx
c000bbc4:	74 36                	je     c000bbfc <File::close()+0x5a>
c000bbc6:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bbcd:	74 2d                	je     c000bbfc <File::close()+0x5a>
c000bbcf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbd3:	b8 05 00 00 00       	mov    eax,0x5
c000bbd8:	74 22                	je     c000bbfc <File::close()+0x5a>
c000bbda:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bbde:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bbe5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bbeb:	53                   	push   ebx
c000bbec:	53                   	push   ebx
c000bbed:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bbef:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bbf5:	50                   	push   eax
c000bbf6:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bbf9:	83 c4 10             	add    esp,0x10
c000bbfc:	83 c4 08             	add    esp,0x8
c000bbff:	5b                   	pop    ebx
c000bc00:	c3                   	ret    
c000bc01:	90                   	nop

c000bc02 <File::seek(unsigned long long)>:
c000bc02:	56                   	push   esi
c000bc03:	b8 0b 00 00 00       	mov    eax,0xb
c000bc08:	53                   	push   ebx
c000bc09:	51                   	push   ecx
c000bc0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc12:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc16:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc1d:	83 fa 19             	cmp    edx,0x19
c000bc20:	77 31                	ja     c000bc53 <File::seek(unsigned long long)+0x51>
c000bc22:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc29:	85 d2                	test   edx,edx
c000bc2b:	74 26                	je     c000bc53 <File::seek(unsigned long long)+0x51>
c000bc2d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc33:	85 d2                	test   edx,edx
c000bc35:	74 1c                	je     c000bc53 <File::seek(unsigned long long)+0x51>
c000bc37:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc3b:	b8 05 00 00 00       	mov    eax,0x5
c000bc40:	74 11                	je     c000bc53 <File::seek(unsigned long long)+0x51>
c000bc42:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc44:	53                   	push   ebx
c000bc45:	51                   	push   ecx
c000bc46:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc4c:	52                   	push   edx
c000bc4d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc50:	83 c4 10             	add    esp,0x10
c000bc53:	5a                   	pop    edx
c000bc54:	5b                   	pop    ebx
c000bc55:	5e                   	pop    esi
c000bc56:	c3                   	ret    
c000bc57:	90                   	nop

c000bc58 <File::truncate(unsigned long long)>:
c000bc58:	56                   	push   esi
c000bc59:	b8 0b 00 00 00       	mov    eax,0xb
c000bc5e:	53                   	push   ebx
c000bc5f:	51                   	push   ecx
c000bc60:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc64:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc68:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc6c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc73:	83 fa 19             	cmp    edx,0x19
c000bc76:	77 31                	ja     c000bca9 <File::truncate(unsigned long long)+0x51>
c000bc78:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc7f:	85 d2                	test   edx,edx
c000bc81:	74 26                	je     c000bca9 <File::truncate(unsigned long long)+0x51>
c000bc83:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc89:	85 d2                	test   edx,edx
c000bc8b:	74 1c                	je     c000bca9 <File::truncate(unsigned long long)+0x51>
c000bc8d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc91:	b8 05 00 00 00       	mov    eax,0x5
c000bc96:	74 11                	je     c000bca9 <File::truncate(unsigned long long)+0x51>
c000bc98:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc9a:	53                   	push   ebx
c000bc9b:	51                   	push   ecx
c000bc9c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bca2:	52                   	push   edx
c000bca3:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bca6:	83 c4 10             	add    esp,0x10
c000bca9:	5a                   	pop    edx
c000bcaa:	5b                   	pop    ebx
c000bcab:	5e                   	pop    esi
c000bcac:	c3                   	ret    
c000bcad:	90                   	nop

c000bcae <File::tell(unsigned long long*)>:
c000bcae:	83 ec 0c             	sub    esp,0xc
c000bcb1:	b8 0b 00 00 00       	mov    eax,0xb
c000bcb6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bcba:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bcc1:	83 fa 19             	cmp    edx,0x19
c000bcc4:	77 34                	ja     c000bcfa <File::tell(unsigned long long*)+0x4c>
c000bcc6:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bccd:	85 d2                	test   edx,edx
c000bccf:	74 29                	je     c000bcfa <File::tell(unsigned long long*)+0x4c>
c000bcd1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcd7:	85 d2                	test   edx,edx
c000bcd9:	74 1f                	je     c000bcfa <File::tell(unsigned long long*)+0x4c>
c000bcdb:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bcdf:	b8 05 00 00 00       	mov    eax,0x5
c000bce4:	74 14                	je     c000bcfa <File::tell(unsigned long long*)+0x4c>
c000bce6:	50                   	push   eax
c000bce7:	8b 02                	mov    eax,DWORD PTR [edx]
c000bce9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bced:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bcf3:	52                   	push   edx
c000bcf4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bcf7:	83 c4 10             	add    esp,0x10
c000bcfa:	83 c4 0c             	add    esp,0xc
c000bcfd:	c3                   	ret    

c000bcfe <File::rewind()>:
c000bcfe:	83 ec 10             	sub    esp,0x10
c000bd01:	6a 00                	push   0x0
c000bd03:	6a 00                	push   0x0
c000bd05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd09:	e8 f4 fe ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c000bd0e:	83 c4 1c             	add    esp,0x1c
c000bd11:	c3                   	ret    

c000bd12 <File::unlink()>:
c000bd12:	83 ec 0c             	sub    esp,0xc
c000bd15:	b8 0b 00 00 00       	mov    eax,0xb
c000bd1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd25:	83 f9 19             	cmp    ecx,0x19
c000bd28:	77 2f                	ja     c000bd59 <File::unlink()+0x47>
c000bd2a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd31:	85 c9                	test   ecx,ecx
c000bd33:	74 24                	je     c000bd59 <File::unlink()+0x47>
c000bd35:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd3b:	85 c9                	test   ecx,ecx
c000bd3d:	74 1a                	je     c000bd59 <File::unlink()+0x47>
c000bd3f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd43:	b8 06 00 00 00       	mov    eax,0x6
c000bd48:	75 0f                	jne    c000bd59 <File::unlink()+0x47>
c000bd4a:	50                   	push   eax
c000bd4b:	83 c2 0d             	add    edx,0xd
c000bd4e:	50                   	push   eax
c000bd4f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd51:	52                   	push   edx
c000bd52:	51                   	push   ecx
c000bd53:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd56:	83 c4 10             	add    esp,0x10
c000bd59:	83 c4 0c             	add    esp,0xc
c000bd5c:	c3                   	ret    
c000bd5d:	90                   	nop

c000bd5e <File::rename(char const*)>:
c000bd5e:	83 ec 0c             	sub    esp,0xc
c000bd61:	b8 0b 00 00 00       	mov    eax,0xb
c000bd66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd6a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd71:	83 f9 19             	cmp    ecx,0x19
c000bd74:	77 32                	ja     c000bda8 <File::rename(char const*)+0x4a>
c000bd76:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd7d:	85 c9                	test   ecx,ecx
c000bd7f:	74 27                	je     c000bda8 <File::rename(char const*)+0x4a>
c000bd81:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd87:	85 c9                	test   ecx,ecx
c000bd89:	74 1d                	je     c000bda8 <File::rename(char const*)+0x4a>
c000bd8b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd8f:	b8 06 00 00 00       	mov    eax,0x6
c000bd94:	75 12                	jne    c000bda8 <File::rename(char const*)+0x4a>
c000bd96:	50                   	push   eax
c000bd97:	83 c2 0d             	add    edx,0xd
c000bd9a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bda0:	52                   	push   edx
c000bda1:	51                   	push   ecx
c000bda2:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bda5:	83 c4 10             	add    esp,0x10
c000bda8:	83 c4 0c             	add    esp,0xc
c000bdab:	c3                   	ret    

c000bdac <File::chfatattr(unsigned char, unsigned char)>:
c000bdac:	57                   	push   edi
c000bdad:	b8 0b 00 00 00       	mov    eax,0xb
c000bdb2:	56                   	push   esi
c000bdb3:	53                   	push   ebx
c000bdb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdb8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bdbc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdc0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdc7:	83 f9 19             	cmp    ecx,0x19
c000bdca:	77 37                	ja     c000be03 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdcc:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdd3:	85 c9                	test   ecx,ecx
c000bdd5:	74 2c                	je     c000be03 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdd7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bddd:	85 c9                	test   ecx,ecx
c000bddf:	74 22                	je     c000be03 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bde1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bde5:	b8 06 00 00 00       	mov    eax,0x6
c000bdea:	75 17                	jne    c000be03 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdec:	89 f0                	mov    eax,esi
c000bdee:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bdf0:	0f b6 db             	movzx  ebx,bl
c000bdf3:	0f b6 f0             	movzx  esi,al
c000bdf6:	83 c2 0d             	add    edx,0xd
c000bdf9:	56                   	push   esi
c000bdfa:	53                   	push   ebx
c000bdfb:	52                   	push   edx
c000bdfc:	51                   	push   ecx
c000bdfd:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be00:	83 c4 10             	add    esp,0x10
c000be03:	5b                   	pop    ebx
c000be04:	5e                   	pop    esi
c000be05:	5f                   	pop    edi
c000be06:	c3                   	ret    
c000be07:	90                   	nop

c000be08 <File::exists()>:
c000be08:	83 ec 0c             	sub    esp,0xc
c000be0b:	31 c0                	xor    eax,eax
c000be0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be11:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be18:	83 f9 19             	cmp    ecx,0x19
c000be1b:	77 24                	ja     c000be41 <File::exists()+0x39>
c000be1d:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be24:	85 c9                	test   ecx,ecx
c000be26:	74 19                	je     c000be41 <File::exists()+0x39>
c000be28:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be2e:	85 c9                	test   ecx,ecx
c000be30:	74 0f                	je     c000be41 <File::exists()+0x39>
c000be32:	50                   	push   eax
c000be33:	83 c2 0d             	add    edx,0xd
c000be36:	50                   	push   eax
c000be37:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be39:	52                   	push   edx
c000be3a:	51                   	push   ecx
c000be3b:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be3e:	83 c4 10             	add    esp,0x10
c000be41:	83 c4 0c             	add    esp,0xc
c000be44:	c3                   	ret    
c000be45:	90                   	nop

c000be46 <File::stat(unsigned long long*, bool*)>:
c000be46:	56                   	push   esi
c000be47:	53                   	push   ebx
c000be48:	50                   	push   eax
c000be49:	b8 0b 00 00 00       	mov    eax,0xb
c000be4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be52:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be56:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be5a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be61:	83 f9 19             	cmp    ecx,0x19
c000be64:	77 3d                	ja     c000bea3 <File::stat(unsigned long long*, bool*)+0x5d>
c000be66:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be6d:	85 c9                	test   ecx,ecx
c000be6f:	74 32                	je     c000bea3 <File::stat(unsigned long long*, bool*)+0x5d>
c000be71:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be77:	85 c9                	test   ecx,ecx
c000be79:	74 28                	je     c000bea3 <File::stat(unsigned long long*, bool*)+0x5d>
c000be7b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be7f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be81:	74 13                	je     c000be96 <File::stat(unsigned long long*, bool*)+0x50>
c000be83:	83 ec 04             	sub    esp,0x4
c000be86:	56                   	push   esi
c000be87:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be8d:	51                   	push   ecx
c000be8e:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000be91:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000be94:	eb 0a                	jmp    c000bea0 <File::stat(unsigned long long*, bool*)+0x5a>
c000be96:	53                   	push   ebx
c000be97:	83 c2 0d             	add    edx,0xd
c000be9a:	56                   	push   esi
c000be9b:	52                   	push   edx
c000be9c:	51                   	push   ecx
c000be9d:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bea0:	83 c4 10             	add    esp,0x10
c000bea3:	5a                   	pop    edx
c000bea4:	5b                   	pop    ebx
c000bea5:	5e                   	pop    esi
c000bea6:	c3                   	ret    

c000bea7 <Fs::setcwd(Process*, char*)>:
c000bea7:	55                   	push   ebp
c000bea8:	57                   	push   edi
c000bea9:	56                   	push   esi
c000beaa:	53                   	push   ebx
c000beab:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000beb1:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000beb8:	6a 00                	push   0x0
c000beba:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bec0:	57                   	push   edi
c000bec1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bec8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000becc:	56                   	push   esi
c000becd:	e8 48 f9 ff ff       	call   c000b81a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bed2:	89 34 24             	mov    DWORD PTR [esp],esi
c000bed5:	e8 a6 46 ff ff       	call   c0000580 <strlen>
c000beda:	83 c4 10             	add    esp,0x10
c000bedd:	83 f8 02             	cmp    eax,0x2
c000bee0:	77 15                	ja     c000bef7 <Fs::setcwd(Process*, char*)+0x50>
c000bee2:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bee7:	83 eb 41             	sub    ebx,0x41
c000beea:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bef1:	85 c0                	test   eax,eax
c000bef3:	75 1c                	jne    c000bf11 <Fs::setcwd(Process*, char*)+0x6a>
c000bef5:	eb 2f                	jmp    c000bf26 <Fs::setcwd(Process*, char*)+0x7f>
c000bef7:	83 ec 0c             	sub    esp,0xc
c000befa:	56                   	push   esi
c000befb:	e8 80 46 ff ff       	call   c0000580 <strlen>
c000bf00:	83 c4 10             	add    esp,0x10
c000bf03:	83 f8 03             	cmp    eax,0x3
c000bf06:	75 57                	jne    c000bf5f <Fs::setcwd(Process*, char*)+0xb8>
c000bf08:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf0d:	75 50                	jne    c000bf5f <Fs::setcwd(Process*, char*)+0xb8>
c000bf0f:	eb d1                	jmp    c000bee2 <Fs::setcwd(Process*, char*)+0x3b>
c000bf11:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf18:	75 0c                	jne    c000bf26 <Fs::setcwd(Process*, char*)+0x7f>
c000bf1a:	83 ec 0c             	sub    esp,0xc
c000bf1d:	50                   	push   eax
c000bf1e:	e8 bd 1d 00 00       	call   c000dce0 <LogicalDisk::mount()>
c000bf23:	83 c4 10             	add    esp,0x10
c000bf26:	83 fb 19             	cmp    ebx,0x19
c000bf29:	b8 03 00 00 00       	mov    eax,0x3
c000bf2e:	0f 87 c6 00 00 00    	ja     c000bffa <Fs::setcwd(Process*, char*)+0x153>
c000bf34:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf3b:	b8 05 00 00 00       	mov    eax,0x5
c000bf40:	85 d2                	test   edx,edx
c000bf42:	0f 84 b2 00 00 00    	je     c000bffa <Fs::setcwd(Process*, char*)+0x153>
c000bf48:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf4f:	b8 06 00 00 00       	mov    eax,0x6
c000bf54:	0f 85 92 00 00 00    	jne    c000bfec <Fs::setcwd(Process*, char*)+0x145>
c000bf5a:	e9 9b 00 00 00       	jmp    c000bffa <Fs::setcwd(Process*, char*)+0x153>
c000bf5f:	83 ec 0c             	sub    esp,0xc
c000bf62:	68 14 01 00 00       	push   0x114
c000bf67:	e8 6b bb ff ff       	call   c0007ad7 <malloc>
c000bf6c:	83 c4 0c             	add    esp,0xc
c000bf6f:	55                   	push   ebp
c000bf70:	56                   	push   esi
c000bf71:	50                   	push   eax
c000bf72:	89 c3                	mov    ebx,eax
c000bf74:	e8 ad fb ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c000bf79:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bf7e:	83 c4 0c             	add    esp,0xc
c000bf81:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bf85:	50                   	push   eax
c000bf86:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bf8a:	50                   	push   eax
c000bf8b:	53                   	push   ebx
c000bf8c:	e8 b5 fe ff ff       	call   c000be46 <File::stat(unsigned long long*, bool*)>
c000bf91:	83 c4 10             	add    esp,0x10
c000bf94:	83 f8 02             	cmp    eax,0x2
c000bf97:	74 27                	je     c000bfc0 <Fs::setcwd(Process*, char*)+0x119>
c000bf99:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf9e:	75 1c                	jne    c000bfbc <Fs::setcwd(Process*, char*)+0x115>
c000bfa0:	85 db                	test   ebx,ebx
c000bfa2:	b8 02 00 00 00       	mov    eax,0x2
c000bfa7:	74 51                	je     c000bffa <Fs::setcwd(Process*, char*)+0x153>
c000bfa9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfab:	83 ec 0c             	sub    esp,0xc
c000bfae:	53                   	push   ebx
c000bfaf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfb2:	83 c4 10             	add    esp,0x10
c000bfb5:	b8 02 00 00 00       	mov    eax,0x2
c000bfba:	eb 3e                	jmp    c000bffa <Fs::setcwd(Process*, char*)+0x153>
c000bfbc:	85 c0                	test   eax,eax
c000bfbe:	74 1c                	je     c000bfdc <Fs::setcwd(Process*, char*)+0x135>
c000bfc0:	85 db                	test   ebx,ebx
c000bfc2:	b8 01 00 00 00       	mov    eax,0x1
c000bfc7:	74 31                	je     c000bffa <Fs::setcwd(Process*, char*)+0x153>
c000bfc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfcb:	83 ec 0c             	sub    esp,0xc
c000bfce:	53                   	push   ebx
c000bfcf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfd2:	83 c4 10             	add    esp,0x10
c000bfd5:	b8 01 00 00 00       	mov    eax,0x1
c000bfda:	eb 1e                	jmp    c000bffa <Fs::setcwd(Process*, char*)+0x153>
c000bfdc:	85 db                	test   ebx,ebx
c000bfde:	74 0c                	je     c000bfec <Fs::setcwd(Process*, char*)+0x145>
c000bfe0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfe2:	83 ec 0c             	sub    esp,0xc
c000bfe5:	53                   	push   ebx
c000bfe6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfe9:	83 c4 10             	add    esp,0x10
c000bfec:	50                   	push   eax
c000bfed:	50                   	push   eax
c000bfee:	56                   	push   esi
c000bfef:	57                   	push   edi
c000bff0:	e8 5b 46 ff ff       	call   c0000650 <strcpy>
c000bff5:	83 c4 10             	add    esp,0x10
c000bff8:	31 c0                	xor    eax,eax
c000bffa:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c000:	5b                   	pop    ebx
c000c001:	5e                   	pop    esi
c000c002:	5f                   	pop    edi
c000c003:	5d                   	pop    ebp
c000c004:	c3                   	ret    
c000c005:	90                   	nop

c000c006 <Directory::Directory(char const*, Process*)>:
c000c006:	83 ec 0c             	sub    esp,0xc
c000c009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c00d:	83 ec 08             	sub    esp,0x8
c000c010:	6a 00                	push   0x0
c000c012:	50                   	push   eax
c000c013:	e8 92 d1 ff ff       	call   c00091aa <UnixFile::UnixFile(int)>
c000c018:	83 c4 10             	add    esp,0x10
c000c01b:	ba 94 1a 02 c0       	mov    edx,0xc0021a94
c000c020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c024:	89 10                	mov    DWORD PTR [eax],edx
c000c026:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c02b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c02f:	0f 95 c0             	setne  al
c000c032:	0f b6 c0             	movzx  eax,al
c000c035:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c039:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c03f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c043:	83 c2 0d             	add    edx,0xd
c000c046:	50                   	push   eax
c000c047:	51                   	push   ecx
c000c048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04c:	52                   	push   edx
c000c04d:	e8 c8 f7 ff ff       	call   c000b81a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c052:	83 c4 10             	add    esp,0x10
c000c055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c059:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c05c:	83 e8 41             	sub    eax,0x41
c000c05f:	88 c2                	mov    dl,al
c000c061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c065:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c06b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c06f:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c077:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c07d:	0f b6 c0             	movzx  eax,al
c000c080:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c087:	85 c0                	test   eax,eax
c000c089:	74 3e                	je     c000c0c9 <Directory::Directory(char const*, Process*)+0xc3>
c000c08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c095:	0f b6 c0             	movzx  eax,al
c000c098:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c09f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0a5:	85 c0                	test   eax,eax
c000c0a7:	75 20                	jne    c000c0c9 <Directory::Directory(char const*, Process*)+0xc3>
c000c0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ad:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0b3:	0f b6 c0             	movzx  eax,al
c000c0b6:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0bd:	83 ec 0c             	sub    esp,0xc
c000c0c0:	50                   	push   eax
c000c0c1:	e8 1a 1c 00 00       	call   c000dce0 <LogicalDisk::mount()>
c000c0c6:	83 c4 10             	add    esp,0x10
c000c0c9:	90                   	nop
c000c0ca:	83 c4 0c             	add    esp,0xc
c000c0cd:	c3                   	ret    

c000c0ce <Directory::open()>:
c000c0ce:	53                   	push   ebx
c000c0cf:	b8 0b 00 00 00       	mov    eax,0xb
c000c0d4:	83 ec 08             	sub    esp,0x8
c000c0d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0db:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c0e2:	83 fa 19             	cmp    edx,0x19
c000c0e5:	77 3d                	ja     c000c124 <Directory::open()+0x56>
c000c0e7:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c0ee:	85 d2                	test   edx,edx
c000c0f0:	74 32                	je     c000c124 <Directory::open()+0x56>
c000c0f2:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c0f8:	85 d2                	test   edx,edx
c000c0fa:	74 28                	je     c000c124 <Directory::open()+0x56>
c000c0fc:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c100:	b8 06 00 00 00       	mov    eax,0x6
c000c105:	75 1d                	jne    c000c124 <Directory::open()+0x56>
c000c107:	50                   	push   eax
c000c108:	8b 02                	mov    eax,DWORD PTR [edx]
c000c10a:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c110:	51                   	push   ecx
c000c111:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c114:	51                   	push   ecx
c000c115:	52                   	push   edx
c000c116:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	85 c0                	test   eax,eax
c000c11e:	75 04                	jne    c000c124 <Directory::open()+0x56>
c000c120:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c124:	83 c4 08             	add    esp,0x8
c000c127:	5b                   	pop    ebx
c000c128:	c3                   	ret    
c000c129:	90                   	nop

c000c12a <Directory::close()>:
c000c12a:	53                   	push   ebx
c000c12b:	b8 0b 00 00 00       	mov    eax,0xb
c000c130:	83 ec 08             	sub    esp,0x8
c000c133:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c137:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c13e:	83 f9 19             	cmp    ecx,0x19
c000c141:	77 41                	ja     c000c184 <Directory::close()+0x5a>
c000c143:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c14a:	85 db                	test   ebx,ebx
c000c14c:	74 36                	je     c000c184 <Directory::close()+0x5a>
c000c14e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c155:	74 2d                	je     c000c184 <Directory::close()+0x5a>
c000c157:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c15b:	b8 05 00 00 00       	mov    eax,0x5
c000c160:	74 22                	je     c000c184 <Directory::close()+0x5a>
c000c162:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c166:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c16d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c173:	53                   	push   ebx
c000c174:	53                   	push   ebx
c000c175:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c177:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c17d:	50                   	push   eax
c000c17e:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c181:	83 c4 10             	add    esp,0x10
c000c184:	83 c4 08             	add    esp,0x8
c000c187:	5b                   	pop    ebx
c000c188:	c3                   	ret    
c000c189:	90                   	nop

c000c18a <Directory::unlink()>:
c000c18a:	83 ec 0c             	sub    esp,0xc
c000c18d:	b8 0b 00 00 00       	mov    eax,0xb
c000c192:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c196:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c19d:	83 f9 19             	cmp    ecx,0x19
c000c1a0:	77 2f                	ja     c000c1d1 <Directory::unlink()+0x47>
c000c1a2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1a9:	85 c9                	test   ecx,ecx
c000c1ab:	74 24                	je     c000c1d1 <Directory::unlink()+0x47>
c000c1ad:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1b3:	85 c9                	test   ecx,ecx
c000c1b5:	74 1a                	je     c000c1d1 <Directory::unlink()+0x47>
c000c1b7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1bb:	b8 06 00 00 00       	mov    eax,0x6
c000c1c0:	75 0f                	jne    c000c1d1 <Directory::unlink()+0x47>
c000c1c2:	50                   	push   eax
c000c1c3:	83 c2 0d             	add    edx,0xd
c000c1c6:	50                   	push   eax
c000c1c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1c9:	52                   	push   edx
c000c1ca:	51                   	push   ecx
c000c1cb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c1ce:	83 c4 10             	add    esp,0x10
c000c1d1:	83 c4 0c             	add    esp,0xc
c000c1d4:	c3                   	ret    
c000c1d5:	90                   	nop

c000c1d6 <Directory::rename(char const*)>:
c000c1d6:	83 ec 0c             	sub    esp,0xc
c000c1d9:	b8 0b 00 00 00       	mov    eax,0xb
c000c1de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1e9:	83 f9 19             	cmp    ecx,0x19
c000c1ec:	77 32                	ja     c000c220 <Directory::rename(char const*)+0x4a>
c000c1ee:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1f5:	85 c9                	test   ecx,ecx
c000c1f7:	74 27                	je     c000c220 <Directory::rename(char const*)+0x4a>
c000c1f9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1ff:	85 c9                	test   ecx,ecx
c000c201:	74 1d                	je     c000c220 <Directory::rename(char const*)+0x4a>
c000c203:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c207:	b8 06 00 00 00       	mov    eax,0x6
c000c20c:	75 12                	jne    c000c220 <Directory::rename(char const*)+0x4a>
c000c20e:	50                   	push   eax
c000c20f:	83 c2 0d             	add    edx,0xd
c000c212:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c214:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c218:	52                   	push   edx
c000c219:	51                   	push   ecx
c000c21a:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c21d:	83 c4 10             	add    esp,0x10
c000c220:	83 c4 0c             	add    esp,0xc
c000c223:	c3                   	ret    

c000c224 <Directory::exists()>:
c000c224:	83 ec 0c             	sub    esp,0xc
c000c227:	31 c0                	xor    eax,eax
c000c229:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c22d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c234:	83 f9 19             	cmp    ecx,0x19
c000c237:	77 24                	ja     c000c25d <Directory::exists()+0x39>
c000c239:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c240:	85 c9                	test   ecx,ecx
c000c242:	74 19                	je     c000c25d <Directory::exists()+0x39>
c000c244:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c24a:	85 c9                	test   ecx,ecx
c000c24c:	74 0f                	je     c000c25d <Directory::exists()+0x39>
c000c24e:	50                   	push   eax
c000c24f:	83 c2 0d             	add    edx,0xd
c000c252:	50                   	push   eax
c000c253:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c255:	52                   	push   edx
c000c256:	51                   	push   ecx
c000c257:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c25a:	83 c4 10             	add    esp,0x10
c000c25d:	83 c4 0c             	add    esp,0xc
c000c260:	c3                   	ret    
c000c261:	90                   	nop

c000c262 <Directory::read(dirent*)>:
c000c262:	83 ec 1c             	sub    esp,0x1c
c000c265:	b8 0b 00 00 00       	mov    eax,0xb
c000c26a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c26e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c275:	83 f9 19             	cmp    ecx,0x19
c000c278:	77 30                	ja     c000c2aa <Directory::read(dirent*)+0x48>
c000c27a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c281:	85 c9                	test   ecx,ecx
c000c283:	74 25                	je     c000c2aa <Directory::read(dirent*)+0x48>
c000c285:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c28c:	74 1c                	je     c000c2aa <Directory::read(dirent*)+0x48>
c000c28e:	83 ec 0c             	sub    esp,0xc
c000c291:	8b 02                	mov    eax,DWORD PTR [edx]
c000c293:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c297:	51                   	push   ecx
c000c298:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c29c:	6a 00                	push   0x0
c000c29e:	68 10 01 00 00       	push   0x110
c000c2a3:	52                   	push   edx
c000c2a4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2a7:	83 c4 20             	add    esp,0x20
c000c2aa:	83 c4 1c             	add    esp,0x1c
c000c2ad:	c3                   	ret    

c000c2ae <Directory::create()>:
c000c2ae:	83 ec 0c             	sub    esp,0xc
c000c2b1:	b8 0b 00 00 00       	mov    eax,0xb
c000c2b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2c1:	83 f9 19             	cmp    ecx,0x19
c000c2c4:	77 2f                	ja     c000c2f5 <Directory::create()+0x47>
c000c2c6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2cd:	85 c9                	test   ecx,ecx
c000c2cf:	74 24                	je     c000c2f5 <Directory::create()+0x47>
c000c2d1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2d7:	85 c9                	test   ecx,ecx
c000c2d9:	74 1a                	je     c000c2f5 <Directory::create()+0x47>
c000c2db:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c2df:	b8 06 00 00 00       	mov    eax,0x6
c000c2e4:	75 0f                	jne    c000c2f5 <Directory::create()+0x47>
c000c2e6:	50                   	push   eax
c000c2e7:	83 c2 0d             	add    edx,0xd
c000c2ea:	50                   	push   eax
c000c2eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2ed:	52                   	push   edx
c000c2ee:	51                   	push   ecx
c000c2ef:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c2f2:	83 c4 10             	add    esp,0x10
c000c2f5:	83 c4 0c             	add    esp,0xc
c000c2f8:	c3                   	ret    
c000c2f9:	90                   	nop

c000c2fa <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c2fa:	b8 0a 00 00 00       	mov    eax,0xa
c000c2ff:	c3                   	ret    

c000c300 <Bus::Bus(char const*)>:
c000c300:	83 ec 0c             	sub    esp,0xc
c000c303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c307:	83 ec 08             	sub    esp,0x8
c000c30a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c30e:	50                   	push   eax
c000c30f:	e8 f2 07 00 00       	call   c000cb06 <Device::Device(char const*)>
c000c314:	83 c4 10             	add    esp,0x10
c000c317:	ba b0 1a 02 c0       	mov    edx,0xc0021ab0
c000c31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c320:	89 10                	mov    DWORD PTR [eax],edx
c000c322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c326:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c330:	90                   	nop
c000c331:	83 c4 0c             	add    esp,0xc
c000c334:	c3                   	ret    
c000c335:	90                   	nop
c000c336:	66 90                	xchg   ax,ax

c000c338 <Bus::~Bus()>:
c000c338:	83 ec 0c             	sub    esp,0xc
c000c33b:	ba b0 1a 02 c0       	mov    edx,0xc0021ab0
c000c340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c344:	89 10                	mov    DWORD PTR [eax],edx
c000c346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34a:	83 ec 0c             	sub    esp,0xc
c000c34d:	50                   	push   eax
c000c34e:	e8 53 05 00 00       	call   c000c8a6 <Device::~Device()>
c000c353:	83 c4 10             	add    esp,0x10
c000c356:	90                   	nop
c000c357:	83 c4 0c             	add    esp,0xc
c000c35a:	c3                   	ret    
c000c35b:	90                   	nop

c000c35c <Bus::~Bus()>:
c000c35c:	83 ec 0c             	sub    esp,0xc
c000c35f:	83 ec 0c             	sub    esp,0xc
c000c362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c366:	e8 cd ff ff ff       	call   c000c338 <Bus::~Bus()>
c000c36b:	83 c4 10             	add    esp,0x10
c000c36e:	83 ec 08             	sub    esp,0x8
c000c371:	68 58 01 00 00       	push   0x158
c000c376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37a:	e8 91 e4 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000c37f:	83 c4 10             	add    esp,0x10
c000c382:	83 c4 0c             	add    esp,0xc
c000c385:	c3                   	ret    

c000c386 <beepThread(void*)>:
c000c386:	83 ec 0c             	sub    esp,0xc
c000c389:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c38e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c392:	48                   	dec    eax
c000c393:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c398:	75 01                	jne    c000c39b <beepThread(void*)+0x15>
c000c39a:	fb                   	sti    
c000c39b:	6b c2 0a             	imul   eax,edx,0xa
c000c39e:	83 ec 0c             	sub    esp,0xc
c000c3a1:	50                   	push   eax
c000c3a2:	e8 a9 a0 00 00       	call   c0016450 <milliTenthSleep(unsigned int)>
c000c3a7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c3ae:	e8 f6 bf 00 00       	call   c00183a9 <HalMakeBeep(int)>
c000c3b3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c3bb:	83 c4 1c             	add    esp,0x1c
c000c3be:	e9 71 9f 00 00       	jmp    c0016334 <blockTask(TaskState)>

c000c3c3 <Krnl::beep(int, int, bool)>:
c000c3c3:	56                   	push   esi
c000c3c4:	53                   	push   ebx
c000c3c5:	83 ec 10             	sub    esp,0x10
c000c3c8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c3cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c3d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d4:	e8 d0 bf 00 00       	call   c00183a9 <HalMakeBeep(int)>
c000c3d9:	89 f0                	mov    eax,esi
c000c3db:	83 c4 10             	add    esp,0x10
c000c3de:	84 c0                	test   al,al
c000c3e0:	74 1e                	je     c000c400 <Krnl::beep(int, int, bool)+0x3d>
c000c3e2:	6b db 0a             	imul   ebx,ebx,0xa
c000c3e5:	83 ec 0c             	sub    esp,0xc
c000c3e8:	53                   	push   ebx
c000c3e9:	e8 62 a0 00 00       	call   c0016450 <milliTenthSleep(unsigned int)>
c000c3ee:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c3f6:	83 c4 14             	add    esp,0x14
c000c3f9:	5b                   	pop    ebx
c000c3fa:	5e                   	pop    esi
c000c3fb:	e9 a9 bf 00 00       	jmp    c00183a9 <HalMakeBeep(int)>
c000c400:	68 e6 00 00 00       	push   0xe6
c000c405:	53                   	push   ebx
c000c406:	68 86 c3 00 c0       	push   0xc000c386
c000c40b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c411:	e8 d2 9a 00 00       	call   c0015ee8 <Process::createThread(void (*)(void*), void*, int)>
c000c416:	83 c4 14             	add    esp,0x14
c000c419:	5b                   	pop    ebx
c000c41a:	5e                   	pop    esi
c000c41b:	c3                   	ret    

c000c41c <User::loadClockSettings(int)>:
c000c41c:	53                   	push   ebx
c000c41d:	83 ec 14             	sub    esp,0x14
c000c420:	68 14 01 00 00       	push   0x114
c000c425:	e8 ad b6 ff ff       	call   c0007ad7 <malloc>
c000c42a:	83 c4 0c             	add    esp,0xc
c000c42d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c433:	68 d4 1a 02 c0       	push   0xc0021ad4
c000c438:	50                   	push   eax
c000c439:	89 c3                	mov    ebx,eax
c000c43b:	e8 e6 f6 ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c000c440:	58                   	pop    eax
c000c441:	5a                   	pop    edx
c000c442:	6a 01                	push   0x1
c000c444:	53                   	push   ebx
c000c445:	e8 fa f6 ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c000c44a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c44d:	e8 50 f7 ff ff       	call   c000bba2 <File::close()>
c000c452:	83 c4 10             	add    esp,0x10
c000c455:	85 db                	test   ebx,ebx
c000c457:	74 0f                	je     c000c468 <User::loadClockSettings(int)+0x4c>
c000c459:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c45b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c45f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c462:	83 c4 08             	add    esp,0x8
c000c465:	5b                   	pop    ebx
c000c466:	ff e0                	jmp    eax
c000c468:	83 c4 08             	add    esp,0x8
c000c46b:	5b                   	pop    ebx
c000c46c:	c3                   	ret    
c000c46d:	90                   	nop

c000c46e <Clock::Clock(char const*)>:
c000c46e:	83 ec 0c             	sub    esp,0xc
c000c471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c475:	83 ec 08             	sub    esp,0x8
c000c478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c47c:	50                   	push   eax
c000c47d:	e8 84 06 00 00       	call   c000cb06 <Device::Device(char const*)>
c000c482:	83 c4 10             	add    esp,0x10
c000c485:	ba fc 1a 02 c0       	mov    edx,0xc0021afc
c000c48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c48e:	89 10                	mov    DWORD PTR [eax],edx
c000c490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c494:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c49e:	90                   	nop
c000c49f:	83 c4 0c             	add    esp,0xc
c000c4a2:	c3                   	ret    
c000c4a3:	90                   	nop

c000c4a4 <Clock::~Clock()>:
c000c4a4:	83 ec 0c             	sub    esp,0xc
c000c4a7:	ba fc 1a 02 c0       	mov    edx,0xc0021afc
c000c4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b0:	89 10                	mov    DWORD PTR [eax],edx
c000c4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b6:	83 ec 0c             	sub    esp,0xc
c000c4b9:	50                   	push   eax
c000c4ba:	e8 e7 03 00 00       	call   c000c8a6 <Device::~Device()>
c000c4bf:	83 c4 10             	add    esp,0x10
c000c4c2:	90                   	nop
c000c4c3:	83 c4 0c             	add    esp,0xc
c000c4c6:	c3                   	ret    
c000c4c7:	90                   	nop

c000c4c8 <Clock::~Clock()>:
c000c4c8:	83 ec 0c             	sub    esp,0xc
c000c4cb:	83 ec 0c             	sub    esp,0xc
c000c4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4d2:	e8 cd ff ff ff       	call   c000c4a4 <Clock::~Clock()>
c000c4d7:	83 c4 10             	add    esp,0x10
c000c4da:	83 ec 08             	sub    esp,0x8
c000c4dd:	68 58 01 00 00       	push   0x158
c000c4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4e6:	e8 25 e3 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000c4eb:	83 c4 10             	add    esp,0x10
c000c4ee:	83 c4 0c             	add    esp,0xc
c000c4f1:	c3                   	ret    

c000c4f2 <Clock::timeInSecondsLocal()>:
c000c4f2:	53                   	push   ebx
c000c4f3:	83 ec 14             	sub    esp,0x14
c000c4f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c4fa:	8b 10                	mov    edx,DWORD PTR [eax]
c000c4fc:	50                   	push   eax
c000c4fd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c500:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c507:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c50d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c513:	89 cb                	mov    ebx,ecx
c000c515:	c1 fb 1f             	sar    ebx,0x1f
c000c518:	01 c8                	add    eax,ecx
c000c51a:	11 da                	adc    edx,ebx
c000c51c:	83 c4 10             	add    esp,0x10
c000c51f:	31 c9                	xor    ecx,ecx
c000c521:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c528:	74 05                	je     c000c52f <Clock::timeInSecondsLocal()+0x3d>
c000c52a:	b9 08 07 00 00       	mov    ecx,0x708
c000c52f:	31 db                	xor    ebx,ebx
c000c531:	01 c8                	add    eax,ecx
c000c533:	11 da                	adc    edx,ebx
c000c535:	83 c4 08             	add    esp,0x8
c000c538:	5b                   	pop    ebx
c000c539:	c3                   	ret    

c000c53a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c53a:	57                   	push   edi
c000c53b:	56                   	push   esi
c000c53c:	53                   	push   ebx
c000c53d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c541:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c545:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c549:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c54b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c54e:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c555:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c55b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c561:	99                   	cdq    
c000c562:	29 c6                	sub    esi,eax
c000c564:	19 d7                	sbb    edi,edx
c000c566:	89 f0                	mov    eax,esi
c000c568:	31 f6                	xor    esi,esi
c000c56a:	89 fa                	mov    edx,edi
c000c56c:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c573:	74 05                	je     c000c57a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c575:	be 08 07 00 00       	mov    esi,0x708
c000c57a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c57e:	31 ff                	xor    edi,edi
c000c580:	29 f0                	sub    eax,esi
c000c582:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c586:	19 fa                	sbb    edx,edi
c000c588:	89 d8                	mov    eax,ebx
c000c58a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c58e:	5b                   	pop    ebx
c000c58f:	5e                   	pop    esi
c000c590:	5f                   	pop    edi
c000c591:	ff e0                	jmp    eax

c000c593 <datetimeToSeconds(datetime_t)>:
c000c593:	55                   	push   ebp
c000c594:	57                   	push   edi
c000c595:	56                   	push   esi
c000c596:	53                   	push   ebx
c000c597:	83 ec 0c             	sub    esp,0xc
c000c59a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c59e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c5a2:	89 f7                	mov    edi,esi
c000c5a4:	89 f0                	mov    eax,esi
c000c5a6:	0f b6 cf             	movzx  ecx,bh
c000c5a9:	0f b6 c4             	movzx  eax,ah
c000c5ac:	c1 ef 10             	shr    edi,0x10
c000c5af:	89 da                	mov    edx,ebx
c000c5b1:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c5b4:	89 f9                	mov    ecx,edi
c000c5b6:	0f b6 f9             	movzx  edi,cl
c000c5b9:	89 f1                	mov    ecx,esi
c000c5bb:	6b c0 3c             	imul   eax,eax,0x3c
c000c5be:	0f b6 f1             	movzx  esi,cl
c000c5c1:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c5c7:	0f b6 db             	movzx  ebx,bl
c000c5ca:	c1 ea 10             	shr    edx,0x10
c000c5cd:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c5d3:	01 f8                	add    eax,edi
c000c5d5:	01 f0                	add    eax,esi
c000c5d7:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5da:	c1 f8 1f             	sar    eax,0x1f
c000c5dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5e1:	89 e8                	mov    eax,ebp
c000c5e3:	0f b6 c0             	movzx  eax,al
c000c5e6:	8b 0c 85 40 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde4c0]
c000c5ed:	83 f8 01             	cmp    eax,0x1
c000c5f0:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c5f4:	0f b7 da             	movzx  ebx,dx
c000c5f7:	76 27                	jbe    c000c620 <datetimeToSeconds(datetime_t)+0x8d>
c000c5f9:	80 e2 03             	and    dl,0x3
c000c5fc:	75 22                	jne    c000c620 <datetimeToSeconds(datetime_t)+0x8d>
c000c5fe:	31 d2                	xor    edx,edx
c000c600:	be 64 00 00 00       	mov    esi,0x64
c000c605:	89 d8                	mov    eax,ebx
c000c607:	f7 f6                	div    esi
c000c609:	85 d2                	test   edx,edx
c000c60b:	75 12                	jne    c000c61f <datetimeToSeconds(datetime_t)+0x8c>
c000c60d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c613:	be 90 01 00 00       	mov    esi,0x190
c000c618:	99                   	cdq    
c000c619:	f7 fe                	idiv   esi
c000c61b:	85 d2                	test   edx,edx
c000c61d:	75 01                	jne    c000c620 <datetimeToSeconds(datetime_t)+0x8d>
c000c61f:	41                   	inc    ecx
c000c620:	83 fb 46             	cmp    ebx,0x46
c000c623:	76 48                	jbe    c000c66d <datetimeToSeconds(datetime_t)+0xda>
c000c625:	be 46 00 00 00       	mov    esi,0x46
c000c62a:	bf 64 00 00 00       	mov    edi,0x64
c000c62f:	bd 90 01 00 00       	mov    ebp,0x190
c000c634:	f7 c6 03 00 00 00    	test   esi,0x3
c000c63a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c63f:	75 23                	jne    c000c664 <datetimeToSeconds(datetime_t)+0xd1>
c000c641:	89 f0                	mov    eax,esi
c000c643:	99                   	cdq    
c000c644:	f7 ff                	idiv   edi
c000c646:	b8 6e 01 00 00       	mov    eax,0x16e
c000c64b:	85 d2                	test   edx,edx
c000c64d:	75 15                	jne    c000c664 <datetimeToSeconds(datetime_t)+0xd1>
c000c64f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c655:	99                   	cdq    
c000c656:	f7 fd                	idiv   ebp
c000c658:	83 fa 01             	cmp    edx,0x1
c000c65b:	19 c0                	sbb    eax,eax
c000c65d:	f7 d0                	not    eax
c000c65f:	05 6e 01 00 00       	add    eax,0x16e
c000c664:	46                   	inc    esi
c000c665:	01 c1                	add    ecx,eax
c000c667:	39 de                	cmp    esi,ebx
c000c669:	7c c9                	jl     c000c634 <datetimeToSeconds(datetime_t)+0xa1>
c000c66b:	eb 34                	jmp    c000c6a1 <datetimeToSeconds(datetime_t)+0x10e>
c000c66d:	74 32                	je     c000c6a1 <datetimeToSeconds(datetime_t)+0x10e>
c000c66f:	b8 45 00 00 00       	mov    eax,0x45
c000c674:	89 c2                	mov    edx,eax
c000c676:	83 e2 03             	and    edx,0x3
c000c679:	39 d8                	cmp    eax,ebx
c000c67b:	7e 0f                	jle    c000c68c <datetimeToSeconds(datetime_t)+0xf9>
c000c67d:	83 fa 01             	cmp    edx,0x1
c000c680:	19 d2                	sbb    edx,edx
c000c682:	48                   	dec    eax
c000c683:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c68a:	eb e8                	jmp    c000c674 <datetimeToSeconds(datetime_t)+0xe1>
c000c68c:	85 d2                	test   edx,edx
c000c68e:	b8 6d 01 00 00       	mov    eax,0x16d
c000c693:	75 0a                	jne    c000c69f <datetimeToSeconds(datetime_t)+0x10c>
c000c695:	83 fb 01             	cmp    ebx,0x1
c000c698:	19 c0                	sbb    eax,eax
c000c69a:	05 6e 01 00 00       	add    eax,0x16e
c000c69f:	29 c1                	sub    ecx,eax
c000c6a1:	b8 80 51 01 00       	mov    eax,0x15180
c000c6a6:	f7 e9                	imul   ecx
c000c6a8:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6ab:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c6af:	83 c4 0c             	add    esp,0xc
c000c6b2:	5b                   	pop    ebx
c000c6b3:	5e                   	pop    esi
c000c6b4:	5f                   	pop    edi
c000c6b5:	5d                   	pop    ebp
c000c6b6:	c3                   	ret    
c000c6b7:	90                   	nop

c000c6b8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c6b8:	57                   	push   edi
c000c6b9:	56                   	push   esi
c000c6ba:	53                   	push   ebx
c000c6bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6bf:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6c1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c6c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6cc:	e8 c2 fe ff ff       	call   c000c593 <datetimeToSeconds(datetime_t)>
c000c6d1:	59                   	pop    ecx
c000c6d2:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c6d9:	5b                   	pop    ebx
c000c6da:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c6e0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c6e6:	89 cb                	mov    ebx,ecx
c000c6e8:	c1 fb 1f             	sar    ebx,0x1f
c000c6eb:	29 c8                	sub    eax,ecx
c000c6ed:	19 da                	sbb    edx,ebx
c000c6ef:	31 c9                	xor    ecx,ecx
c000c6f1:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c6f8:	74 05                	je     c000c6ff <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c6fa:	b9 08 07 00 00       	mov    ecx,0x708
c000c6ff:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c703:	31 db                	xor    ebx,ebx
c000c705:	29 c8                	sub    eax,ecx
c000c707:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c70b:	19 da                	sbb    edx,ebx
c000c70d:	89 f8                	mov    eax,edi
c000c70f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c713:	5b                   	pop    ebx
c000c714:	5e                   	pop    esi
c000c715:	5f                   	pop    edi
c000c716:	ff e0                	jmp    eax

c000c718 <secondsToDatetime(unsigned long long)>:
c000c718:	55                   	push   ebp
c000c719:	57                   	push   edi
c000c71a:	56                   	push   esi
c000c71b:	53                   	push   ebx
c000c71c:	83 ec 1c             	sub    esp,0x1c
c000c71f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c723:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c727:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c72b:	6a 00                	push   0x0
c000c72d:	68 80 51 01 00       	push   0x15180
c000c732:	55                   	push   ebp
c000c733:	57                   	push   edi
c000c734:	e8 b7 30 01 00       	call   c001f7f0 <__udivdi3>
c000c739:	83 c4 10             	add    esp,0x10
c000c73c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c740:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c746:	6a 00                	push   0x0
c000c748:	68 80 51 01 00       	push   0x15180
c000c74d:	55                   	push   ebp
c000c74e:	57                   	push   edi
c000c74f:	bf 10 0e 00 00       	mov    edi,0xe10
c000c754:	e8 97 31 01 00       	call   c001f8f0 <__umoddi3>
c000c759:	83 c4 10             	add    esp,0x10
c000c75c:	99                   	cdq    
c000c75d:	f7 ff                	idiv   edi
c000c75f:	bf 3c 00 00 00       	mov    edi,0x3c
c000c764:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c767:	89 d0                	mov    eax,edx
c000c769:	99                   	cdq    
c000c76a:	f7 ff                	idiv   edi
c000c76c:	85 db                	test   ebx,ebx
c000c76e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c771:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c774:	79 11                	jns    c000c787 <secondsToDatetime(unsigned long long)+0x6f>
c000c776:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c77a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c780:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c785:	eb 07                	jmp    c000c78e <secondsToDatetime(unsigned long long)+0x76>
c000c787:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c78c:	89 d8                	mov    eax,ebx
c000c78e:	99                   	cdq    
c000c78f:	bf b4 05 00 00       	mov    edi,0x5b4
c000c794:	f7 f9                	idiv   ecx
c000c796:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c79b:	31 d2                	xor    edx,edx
c000c79d:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7a6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c7ae:	01 c3                	add    ebx,eax
c000c7b0:	89 d8                	mov    eax,ebx
c000c7b2:	f7 f1                	div    ecx
c000c7b4:	31 d2                	xor    edx,edx
c000c7b6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c7b9:	89 d8                	mov    eax,ebx
c000c7bb:	f7 f7                	div    edi
c000c7bd:	31 d2                	xor    edx,edx
c000c7bf:	29 c1                	sub    ecx,eax
c000c7c1:	89 d8                	mov    eax,ebx
c000c7c3:	f7 f5                	div    ebp
c000c7c5:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c7ca:	31 d2                	xor    edx,edx
c000c7cc:	29 c1                	sub    ecx,eax
c000c7ce:	89 c8                	mov    eax,ecx
c000c7d0:	f7 f5                	div    ebp
c000c7d2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c7d7:	31 d2                	xor    edx,edx
c000c7d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7dd:	89 c8                	mov    eax,ecx
c000c7df:	f7 f5                	div    ebp
c000c7e1:	31 d2                	xor    edx,edx
c000c7e3:	01 c3                	add    ebx,eax
c000c7e5:	89 c8                	mov    eax,ecx
c000c7e7:	f7 f7                	div    edi
c000c7e9:	bf 99 00 00 00       	mov    edi,0x99
c000c7ee:	31 d2                	xor    edx,edx
c000c7f0:	29 c3                	sub    ebx,eax
c000c7f2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c7fa:	29 c3                	sub    ebx,eax
c000c7fc:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c7ff:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c802:	83 c1 02             	add    ecx,0x2
c000c805:	89 c8                	mov    eax,ecx
c000c807:	bb 05 00 00 00       	mov    ebx,0x5
c000c80c:	f7 f7                	div    edi
c000c80e:	31 d2                	xor    edx,edx
c000c810:	89 c7                	mov    edi,eax
c000c812:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c818:	83 c0 02             	add    eax,0x2
c000c81b:	f7 f3                	div    ebx
c000c81d:	89 eb                	mov    ebx,ebp
c000c81f:	29 c3                	sub    ebx,eax
c000c821:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c827:	88 1e                	mov    BYTE PTR [esi],bl
c000c829:	19 c0                	sbb    eax,eax
c000c82b:	31 d2                	xor    edx,edx
c000c82d:	83 e0 0c             	and    eax,0xc
c000c830:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c834:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c83c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c840:	83 f9 01             	cmp    ecx,0x1
c000c843:	0f 96 c2             	setbe  dl
c000c846:	41                   	inc    ecx
c000c847:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c84a:	01 d0                	add    eax,edx
c000c84c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c850:	83 c4 1c             	add    esp,0x1c
c000c853:	89 f0                	mov    eax,esi
c000c855:	5b                   	pop    ebx
c000c856:	5e                   	pop    esi
c000c857:	5f                   	pop    edi
c000c858:	5d                   	pop    ebp
c000c859:	c2 04 00             	ret    0x4

c000c85c <Clock::timeInDatetimeLocal()>:
c000c85c:	53                   	push   ebx
c000c85d:	83 ec 14             	sub    esp,0x14
c000c860:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c864:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c868:	e8 85 fc ff ff       	call   c000c4f2 <Clock::timeInSecondsLocal()>
c000c86d:	83 c4 0c             	add    esp,0xc
c000c870:	52                   	push   edx
c000c871:	50                   	push   eax
c000c872:	53                   	push   ebx
c000c873:	e8 a0 fe ff ff       	call   c000c718 <secondsToDatetime(unsigned long long)>
c000c878:	89 d8                	mov    eax,ebx
c000c87a:	83 c4 14             	add    esp,0x14
c000c87d:	5b                   	pop    ebx
c000c87e:	c2 04 00             	ret    0x4
c000c881:	90                   	nop

c000c882 <Device::hibernate()>:
c000c882:	c3                   	ret    
c000c883:	90                   	nop

c000c884 <Device::wake()>:
c000c884:	c3                   	ret    
c000c885:	90                   	nop

c000c886 <Device::detect()>:
c000c886:	c3                   	ret    
c000c887:	90                   	nop

c000c888 <Device::disableLegacy()>:
c000c888:	c3                   	ret    
c000c889:	90                   	nop

c000c88a <Device::powerSaving(PowerSavingLevel)>:
c000c88a:	c3                   	ret    
c000c88b:	90                   	nop

c000c88c <DriverlessDevice::close(int, int, void*)>:
c000c88c:	31 c0                	xor    eax,eax
c000c88e:	c3                   	ret    
c000c88f:	90                   	nop

c000c890 <DriverlessDevice::detect()>:
c000c890:	c3                   	ret    
c000c891:	90                   	nop

c000c892 <DriverlessDevice::open(int, int, void*)>:
c000c892:	83 ec 18             	sub    esp,0x18
c000c895:	68 70 1b 02 c0       	push   0xc0021b70
c000c89a:	e8 68 4d 00 00       	call   c0011607 <KePanic(char const*)>
c000c89f:	83 c8 ff             	or     eax,0xffffffff
c000c8a2:	83 c4 1c             	add    esp,0x1c
c000c8a5:	c3                   	ret    

c000c8a6 <Device::~Device()>:
c000c8a6:	ba dc 1b 02 c0       	mov    edx,0xc0021bdc
c000c8ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8af:	89 10                	mov    DWORD PTR [eax],edx
c000c8b1:	90                   	nop
c000c8b2:	c3                   	ret    
c000c8b3:	90                   	nop

c000c8b4 <Device::~Device()>:
c000c8b4:	83 ec 0c             	sub    esp,0xc
c000c8b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c8bb:	e8 e6 ff ff ff       	call   c000c8a6 <Device::~Device()>
c000c8c0:	83 c4 04             	add    esp,0x4
c000c8c3:	83 ec 08             	sub    esp,0x8
c000c8c6:	68 58 01 00 00       	push   0x158
c000c8cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8cf:	e8 3c df ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	83 c4 0c             	add    esp,0xc
c000c8da:	c3                   	ret    
c000c8db:	90                   	nop

c000c8dc <Device::findAndLoadDriver()>:
c000c8dc:	c7 44 24 04 8e 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b8e
c000c8e4:	e9 25 e0 ff ff       	jmp    c000a90e <Dbg::kprintf(char const*, ...)>
c000c8e9:	90                   	nop

c000c8ea <Device::preOpenPCI(PCIDeviceInfo)>:
c000c8ea:	57                   	push   edi
c000c8eb:	b9 09 00 00 00       	mov    ecx,0x9
c000c8f0:	56                   	push   esi
c000c8f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c8f5:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c8f9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c903:	81 c7 18 01 00 00    	add    edi,0x118
c000c909:	fc                   	cld    
c000c90a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c90c:	5e                   	pop    esi
c000c90d:	5f                   	pop    edi
c000c90e:	c3                   	ret    
c000c90f:	90                   	nop

c000c910 <Device::preOpenACPI(void*, char*, char*)>:
c000c910:	57                   	push   edi
c000c911:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c916:	56                   	push   esi
c000c917:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c91b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c91f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c923:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c92d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c933:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c939:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c93b:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c941:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c945:	b9 0e 00 00 00       	mov    ecx,0xe
c000c94a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c94c:	5e                   	pop    esi
c000c94d:	5f                   	pop    edi
c000c94e:	c3                   	ret    
c000c94f:	90                   	nop

c000c950 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c950:	53                   	push   ebx
c000c951:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c955:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c959:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c95d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c961:	0f b6 c0             	movzx  eax,al
c000c964:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c968:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c96c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c970:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c974:	5b                   	pop    ebx
c000c975:	e9 be 05 00 00       	jmp    c000cf38 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c97a <Device::getParent()>:
c000c97a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c97e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c984:	c3                   	ret    
c000c985:	90                   	nop

c000c986 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c986:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c98a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c98e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c993:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c997:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c99b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c99f:	e9 0b 07 00 00       	jmp    c000d0af <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9a4 <Device::addChild(Device*)>:
c000c9a4:	53                   	push   ebx
c000c9a5:	83 ec 08             	sub    esp,0x8
c000c9a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9b0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c9b6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c9bc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c9be:	85 d2                	test   edx,edx
c000c9c0:	74 04                	je     c000c9c6 <Device::addChild(Device*)+0x22>
c000c9c2:	89 d3                	mov    ebx,edx
c000c9c4:	eb f6                	jmp    c000c9bc <Device::addChild(Device*)+0x18>
c000c9c6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c9c9:	83 ec 0c             	sub    esp,0xc
c000c9cc:	6a 08                	push   0x8
c000c9ce:	e8 04 b1 ff ff       	call   c0007ad7 <malloc>
c000c9d3:	89 03                	mov    DWORD PTR [ebx],eax
c000c9d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9e2:	83 c4 18             	add    esp,0x18
c000c9e5:	5b                   	pop    ebx
c000c9e6:	c3                   	ret    
c000c9e7:	90                   	nop

c000c9e8 <Device::removeAllChildren()>:
c000c9e8:	56                   	push   esi
c000c9e9:	53                   	push   ebx
c000c9ea:	52                   	push   edx
c000c9eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c9ef:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c9f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c9f8:	74 17                	je     c000ca11 <Device::removeAllChildren()+0x29>
c000c9fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c9fd:	85 c0                	test   eax,eax
c000c9ff:	74 0c                	je     c000ca0d <Device::removeAllChildren()+0x25>
c000ca01:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca03:	83 ec 0c             	sub    esp,0xc
c000ca06:	50                   	push   eax
c000ca07:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca0a:	83 c4 10             	add    esp,0x10
c000ca0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca0f:	eb e4                	jmp    c000c9f5 <Device::removeAllChildren()+0xd>
c000ca11:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca1d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca23:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca2a:	58                   	pop    eax
c000ca2b:	5b                   	pop    ebx
c000ca2c:	5e                   	pop    esi
c000ca2d:	c3                   	ret    

c000ca2e <Device::hibernateAll()>:
c000ca2e:	53                   	push   ebx
c000ca2f:	83 ec 14             	sub    esp,0x14
c000ca32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca36:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca38:	53                   	push   ebx
c000ca39:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca42:	83 c4 10             	add    esp,0x10
c000ca45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca48:	74 0f                	je     c000ca59 <Device::hibernateAll()+0x2b>
c000ca4a:	83 ec 0c             	sub    esp,0xc
c000ca4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca50:	e8 d9 ff ff ff       	call   c000ca2e <Device::hibernateAll()>
c000ca55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca57:	eb e9                	jmp    c000ca42 <Device::hibernateAll()+0x14>
c000ca59:	83 c4 08             	add    esp,0x8
c000ca5c:	5b                   	pop    ebx
c000ca5d:	c3                   	ret    

c000ca5e <Device::wakeAll()>:
c000ca5e:	53                   	push   ebx
c000ca5f:	83 ec 14             	sub    esp,0x14
c000ca62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca66:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca68:	53                   	push   ebx
c000ca69:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca6c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca72:	83 c4 10             	add    esp,0x10
c000ca75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca78:	74 0f                	je     c000ca89 <Device::wakeAll()+0x2b>
c000ca7a:	83 ec 0c             	sub    esp,0xc
c000ca7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca80:	e8 d9 ff ff ff       	call   c000ca5e <Device::wakeAll()>
c000ca85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca87:	eb e9                	jmp    c000ca72 <Device::wakeAll()+0x14>
c000ca89:	83 c4 08             	add    esp,0x8
c000ca8c:	5b                   	pop    ebx
c000ca8d:	c3                   	ret    

c000ca8e <Device::detectAll()>:
c000ca8e:	53                   	push   ebx
c000ca8f:	83 ec 14             	sub    esp,0x14
c000ca92:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca96:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca98:	53                   	push   ebx
c000ca99:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ca9c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000caa2:	83 c4 10             	add    esp,0x10
c000caa5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caa8:	74 0f                	je     c000cab9 <Device::detectAll()+0x2b>
c000caaa:	83 ec 0c             	sub    esp,0xc
c000caad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cab0:	e8 d9 ff ff ff       	call   c000ca8e <Device::detectAll()>
c000cab5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cab7:	eb e9                	jmp    c000caa2 <Device::detectAll()+0x14>
c000cab9:	83 c4 08             	add    esp,0x8
c000cabc:	5b                   	pop    ebx
c000cabd:	c3                   	ret    

c000cabe <Device::disableLegacyAll()>:
c000cabe:	c3                   	ret    
c000cabf:	90                   	nop

c000cac0 <Device::loadDriversForAll()>:
c000cac0:	c3                   	ret    
c000cac1:	90                   	nop

c000cac2 <Device::powerSavingAll(PowerSavingLevel)>:
c000cac2:	56                   	push   esi
c000cac3:	53                   	push   ebx
c000cac4:	83 ec 0c             	sub    esp,0xc
c000cac7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cacb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cacf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cad1:	56                   	push   esi
c000cad2:	53                   	push   ebx
c000cad3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cad6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cadc:	83 c4 10             	add    esp,0x10
c000cadf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cae2:	74 0f                	je     c000caf3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cae4:	52                   	push   edx
c000cae5:	52                   	push   edx
c000cae6:	56                   	push   esi
c000cae7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caea:	e8 d3 ff ff ff       	call   c000cac2 <Device::powerSavingAll(PowerSavingLevel)>
c000caef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caf1:	eb e9                	jmp    c000cadc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000caf3:	58                   	pop    eax
c000caf4:	5b                   	pop    ebx
c000caf5:	5e                   	pop    esi
c000caf6:	c3                   	ret    
c000caf7:	90                   	nop

c000caf8 <Device::setName(char const*)>:
c000caf8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb00:	e9 4b 3b ff ff       	jmp    c0000650 <strcpy>
c000cb05:	90                   	nop

c000cb06 <Device::Device(char const*)>:
c000cb06:	83 ec 1c             	sub    esp,0x1c
c000cb09:	ba dc 1b 02 c0       	mov    edx,0xc0021bdc
c000cb0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb12:	89 10                	mov    DWORD PTR [eax],edx
c000cb14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb18:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb26:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb34:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cb3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb42:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cb4c:	83 ec 08             	sub    esp,0x8
c000cb4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb57:	e8 9c ff ff ff       	call   c000caf8 <Device::setName(char const*)>
c000cb5c:	83 c4 10             	add    esp,0x10
c000cb5f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cb67:	83 ec 0c             	sub    esp,0xc
c000cb6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb6e:	e8 64 af ff ff       	call   c0007ad7 <malloc>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cb7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb83:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cb87:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cb8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb91:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cb97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cb9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cba7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cbb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbbd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cbc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbf2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cbfc:	90                   	nop
c000cbfd:	83 c4 1c             	add    esp,0x1c
c000cc00:	c3                   	ret    
c000cc01:	90                   	nop

c000cc02 <Device::getName()>:
c000cc02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc06:	05 d0 00 00 00       	add    eax,0xd0
c000cc0b:	c3                   	ret    

c000cc0c <Device::closeAll()>:
c000cc0c:	53                   	push   ebx
c000cc0d:	83 ec 08             	sub    esp,0x8
c000cc10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc14:	53                   	push   ebx
c000cc15:	e8 e8 ff ff ff       	call   c000cc02 <Device::getName()>
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	68 c8 1b 02 c0       	push   0xc0021bc8
c000cc21:	e8 e8 dc ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000cc26:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cc28:	6a 00                	push   0x0
c000cc2a:	6a 00                	push   0x0
c000cc2c:	6a 00                	push   0x0
c000cc2e:	53                   	push   ebx
c000cc2f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cc32:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cc38:	83 c4 20             	add    esp,0x20
c000cc3b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cc3e:	74 12                	je     c000cc52 <Device::closeAll()+0x46>
c000cc40:	83 ec 0c             	sub    esp,0xc
c000cc43:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cc46:	e8 c1 ff ff ff       	call   c000cc0c <Device::closeAll()>
c000cc4b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cc4d:	83 c4 10             	add    esp,0x10
c000cc50:	eb e9                	jmp    c000cc3b <Device::closeAll()+0x2f>
c000cc52:	83 c4 08             	add    esp,0x8
c000cc55:	5b                   	pop    ebx
c000cc56:	c3                   	ret    
c000cc57:	90                   	nop

c000cc58 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc58:	83 ec 0c             	sub    esp,0xc
c000cc5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc5f:	83 ec 08             	sub    esp,0x8
c000cc62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc66:	50                   	push   eax
c000cc67:	e8 9a fe ff ff       	call   c000cb06 <Device::Device(char const*)>
c000cc6c:	83 c4 10             	add    esp,0x10
c000cc6f:	ba 08 1c 02 c0       	mov    edx,0xc0021c08
c000cc74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc78:	89 10                	mov    DWORD PTR [eax],edx
c000cc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc7e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cc88:	90                   	nop
c000cc89:	83 c4 0c             	add    esp,0xc
c000cc8c:	c3                   	ret    
c000cc8d:	90                   	nop

c000cc8e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cc8e:	57                   	push   edi
c000cc8f:	56                   	push   esi
c000cc90:	53                   	push   ebx
c000cc91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc95:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cc99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc9d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cca3:	75 0c                	jne    c000ccb1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cca5:	52                   	push   edx
c000cca6:	52                   	push   edx
c000cca7:	53                   	push   ebx
c000cca8:	56                   	push   esi
c000cca9:	e8 f4 2f 01 00       	call   c001fca2 <LinkedList<Device>::addElement(Device*)>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ccb7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ccba:	74 12                	je     c000ccce <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ccbc:	50                   	push   eax
c000ccbd:	57                   	push   edi
c000ccbe:	56                   	push   esi
c000ccbf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ccc2:	e8 c7 ff ff ff       	call   c000cc8e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccc7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ccc9:	83 c4 10             	add    esp,0x10
c000cccc:	eb e9                	jmp    c000ccb7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ccce:	5b                   	pop    ebx
c000cccf:	5e                   	pop    esi
c000ccd0:	5f                   	pop    edi
c000ccd1:	c3                   	ret    

c000ccd2 <getDevicesOfType(DeviceType)>:
c000ccd2:	53                   	push   ebx
c000ccd3:	83 ec 14             	sub    esp,0x14
c000ccd6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ccda:	53                   	push   ebx
c000ccdb:	e8 9e 30 01 00       	call   c001fd7e <LinkedList<Device>::LinkedList()>
c000cce0:	83 c4 0c             	add    esp,0xc
c000cce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cce7:	53                   	push   ebx
c000cce8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000ccee:	e8 9b ff ff ff       	call   c000cc8e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccf3:	83 c4 18             	add    esp,0x18
c000ccf6:	89 d8                	mov    eax,ebx
c000ccf8:	5b                   	pop    ebx
c000ccf9:	c2 04 00             	ret    0x4

c000ccfc <HardDiskController::HardDiskController(char const*)>:
c000ccfc:	83 ec 0c             	sub    esp,0xc
c000ccff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd03:	83 ec 08             	sub    esp,0x8
c000cd06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd0a:	50                   	push   eax
c000cd0b:	e8 f6 fd ff ff       	call   c000cb06 <Device::Device(char const*)>
c000cd10:	83 c4 10             	add    esp,0x10
c000cd13:	ba 34 1c 02 c0       	mov    edx,0xc0021c34
c000cd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd1c:	89 10                	mov    DWORD PTR [eax],edx
c000cd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd22:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd2c:	90                   	nop
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	c3                   	ret    
c000cd31:	90                   	nop
c000cd32:	66 90                	xchg   ax,ax

c000cd34 <HardDiskController::~HardDiskController()>:
c000cd34:	83 ec 0c             	sub    esp,0xc
c000cd37:	ba 34 1c 02 c0       	mov    edx,0xc0021c34
c000cd3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd40:	89 10                	mov    DWORD PTR [eax],edx
c000cd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd46:	83 ec 0c             	sub    esp,0xc
c000cd49:	50                   	push   eax
c000cd4a:	e8 57 fb ff ff       	call   c000c8a6 <Device::~Device()>
c000cd4f:	83 c4 10             	add    esp,0x10
c000cd52:	90                   	nop
c000cd53:	83 c4 0c             	add    esp,0xc
c000cd56:	c3                   	ret    
c000cd57:	90                   	nop

c000cd58 <HardDiskController::~HardDiskController()>:
c000cd58:	83 ec 0c             	sub    esp,0xc
c000cd5b:	83 ec 0c             	sub    esp,0xc
c000cd5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd62:	e8 cd ff ff ff       	call   c000cd34 <HardDiskController::~HardDiskController()>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	83 ec 08             	sub    esp,0x8
c000cd6d:	68 58 01 00 00       	push   0x158
c000cd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd76:	e8 95 da ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	83 c4 0c             	add    esp,0xc
c000cd81:	c3                   	ret    

c000cd82 <PhysicalDisk::eject()>:
c000cd82:	83 c8 ff             	or     eax,0xffffffff
c000cd85:	c3                   	ret    

c000cd86 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd86:	83 ec 0c             	sub    esp,0xc
c000cd89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd8d:	83 ec 08             	sub    esp,0x8
c000cd90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd94:	50                   	push   eax
c000cd95:	e8 6c fd ff ff       	call   c000cb06 <Device::Device(char const*)>
c000cd9a:	83 c4 10             	add    esp,0x10
c000cd9d:	ba 60 1c 02 c0       	mov    edx,0xc0021c60
c000cda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda6:	89 10                	mov    DWORD PTR [eax],edx
c000cda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdac:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cdb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cdbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cdd4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cdda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdde:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cde8:	90                   	nop
c000cde9:	83 c4 0c             	add    esp,0xc
c000cdec:	c3                   	ret    
c000cded:	90                   	nop

c000cdee <PhysicalDisk::startCache()>:
c000cdee:	56                   	push   esi
c000cdef:	53                   	push   ebx
c000cdf0:	83 ec 10             	sub    esp,0x10
c000cdf3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cdf7:	6a 44                	push   0x44
c000cdf9:	e8 d9 ac ff ff       	call   c0007ad7 <malloc>
c000cdfe:	89 c6                	mov    esi,eax
c000ce00:	58                   	pop    eax
c000ce01:	5a                   	pop    edx
c000ce02:	53                   	push   ebx
c000ce03:	56                   	push   esi
c000ce04:	e8 83 17 00 00       	call   c000e58c <VCache::VCache(PhysicalDisk*)>
c000ce09:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce0f:	83 c4 14             	add    esp,0x14
c000ce12:	5b                   	pop    ebx
c000ce13:	5e                   	pop    esi
c000ce14:	c3                   	ret    
c000ce15:	90                   	nop

c000ce16 <PhysicalDisk::~PhysicalDisk()>:
c000ce16:	83 ec 0c             	sub    esp,0xc
c000ce19:	ba 60 1c 02 c0       	mov    edx,0xc0021c60
c000ce1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce22:	89 10                	mov    DWORD PTR [eax],edx
c000ce24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce28:	83 ec 0c             	sub    esp,0xc
c000ce2b:	50                   	push   eax
c000ce2c:	e8 75 fa ff ff       	call   c000c8a6 <Device::~Device()>
c000ce31:	83 c4 10             	add    esp,0x10
c000ce34:	90                   	nop
c000ce35:	83 c4 0c             	add    esp,0xc
c000ce38:	c3                   	ret    
c000ce39:	90                   	nop

c000ce3a <PhysicalDisk::~PhysicalDisk()>:
c000ce3a:	83 ec 0c             	sub    esp,0xc
c000ce3d:	83 ec 0c             	sub    esp,0xc
c000ce40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce44:	e8 cd ff ff ff       	call   c000ce16 <PhysicalDisk::~PhysicalDisk()>
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	83 ec 08             	sub    esp,0x8
c000ce4f:	68 6c 01 00 00       	push   0x16c
c000ce54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce58:	e8 b3 d9 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	83 c4 0c             	add    esp,0xc
c000ce63:	c3                   	ret    

c000ce64 <int_handler>:
c000ce64:	55                   	push   ebp
c000ce65:	57                   	push   edi
c000ce66:	56                   	push   esi
c000ce67:	53                   	push   ebx
c000ce68:	83 ec 0c             	sub    esp,0xc
c000ce6b:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce72:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce76:	74 0b                	je     c000ce83 <int_handler+0x1f>
c000ce78:	fa                   	cli    
c000ce79:	f4                   	hlt    
c000ce7a:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce81:	75 f5                	jne    c000ce78 <int_handler+0x14>
c000ce83:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce86:	8d 46 e0             	lea    eax,[esi-0x20]
c000ce89:	83 f8 17             	cmp    eax,0x17
c000ce8c:	76 40                	jbe    c000cece <int_handler+0x6a>
c000ce8e:	c1 e6 04             	shl    esi,0x4
c000ce91:	31 db                	xor    ebx,ebx
c000ce93:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ce99:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ce9f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cea3:	85 c0                	test   eax,eax
c000cea5:	74 13                	je     c000ceba <int_handler+0x56>
c000cea7:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ceab:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ceae:	74 2c                	je     c000cedc <int_handler+0x78>
c000ceb0:	83 ec 08             	sub    esp,0x8
c000ceb3:	52                   	push   edx
c000ceb4:	57                   	push   edi
c000ceb5:	ff d0                	call   eax
c000ceb7:	83 c4 10             	add    esp,0x10
c000ceba:	83 c3 01             	add    ebx,0x1
c000cebd:	83 fb 04             	cmp    ebx,0x4
c000cec0:	75 dd                	jne    c000ce9f <int_handler+0x3b>
c000cec2:	83 c4 0c             	add    esp,0xc
c000cec5:	31 c0                	xor    eax,eax
c000cec7:	5b                   	pop    ebx
c000cec8:	31 d2                	xor    edx,edx
c000ceca:	5e                   	pop    esi
c000cecb:	5f                   	pop    edi
c000cecc:	5d                   	pop    ebp
c000cecd:	c3                   	ret    
c000cece:	83 ec 0c             	sub    esp,0xc
c000ced1:	50                   	push   eax
c000ced2:	e8 0f b5 00 00       	call   c00183e6 <HalEndOfInterrupt(int)>
c000ced7:	83 c4 10             	add    esp,0x10
c000ceda:	eb b2                	jmp    c000ce8e <int_handler+0x2a>
c000cedc:	83 ec 08             	sub    esp,0x8
c000cedf:	52                   	push   edx
c000cee0:	57                   	push   edi
c000cee1:	ff d0                	call   eax
c000cee3:	83 c4 10             	add    esp,0x10
c000cee6:	83 c4 0c             	add    esp,0xc
c000cee9:	5b                   	pop    ebx
c000ceea:	5e                   	pop    esi
c000ceeb:	5f                   	pop    edi
c000ceec:	5d                   	pop    ebp
c000ceed:	c3                   	ret    

c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ceee:	56                   	push   esi
c000ceef:	31 c0                	xor    eax,eax
c000cef1:	53                   	push   ebx
c000cef2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cef6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cefa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cefe:	89 ca                	mov    edx,ecx
c000cf00:	c1 e2 04             	shl    edx,0x4
c000cf03:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf0b:	74 17                	je     c000cf24 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf0d:	83 c0 01             	add    eax,0x1
c000cf10:	83 f8 04             	cmp    eax,0x4
c000cf13:	75 ee                	jne    c000cf03 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf15:	c7 44 24 0c 90 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c90
c000cf1d:	5b                   	pop    ebx
c000cf1e:	5e                   	pop    esi
c000cf1f:	e9 e3 46 00 00       	jmp    c0011607 <KePanic(char const*)>
c000cf24:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf27:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf2e:	5b                   	pop    ebx
c000cf2f:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf36:	5e                   	pop    esi
c000cf37:	c3                   	ret    

c000cf38 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf38:	55                   	push   ebp
c000cf39:	57                   	push   edi
c000cf3a:	56                   	push   esi
c000cf3b:	53                   	push   ebx
c000cf3c:	83 ec 0c             	sub    esp,0xc
c000cf3f:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf45:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cf49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf4d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf54:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cf57:	74 57                	je     c000cfb0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cf59:	84 c0                	test   al,al
c000cf5b:	89 c7                	mov    edi,eax
c000cf5d:	74 1d                	je     c000cf7c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cf5f:	83 fe 0f             	cmp    esi,0xf
c000cf62:	0f 8f d9 00 00 00    	jg     c000d041 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cf68:	0f b6 b6 48 38 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc7b8]
c000cf6f:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf77:	d1 ef                	shr    edi,1
c000cf79:	83 e7 01             	and    edi,0x1
c000cf7c:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf81:	83 ec 08             	sub    esp,0x8
c000cf84:	31 db                	xor    ebx,ebx
c000cf86:	50                   	push   eax
c000cf87:	68 9d 1c 02 c0       	push   0xc0021c9d
c000cf8c:	e8 7d d9 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000cf91:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf96:	83 c4 10             	add    esp,0x10
c000cf99:	85 c0                	test   eax,eax
c000cf9b:	7f 59                	jg     c000cff6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cf9d:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cfa0:	83 ec 0c             	sub    esp,0xc
c000cfa3:	68 b4 1c 02 c0       	push   0xc0021cb4
c000cfa8:	e8 5a 46 00 00       	call   c0011607 <KePanic(char const*)>
c000cfad:	83 c4 10             	add    esp,0x10
c000cfb0:	89 e8                	mov    eax,ebp
c000cfb2:	31 d2                	xor    edx,edx
c000cfb4:	c1 e0 04             	shl    eax,0x4
c000cfb7:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cfbe:	85 c9                	test   ecx,ecx
c000cfc0:	0f 84 92 00 00 00    	je     c000d058 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cfc6:	83 c2 01             	add    edx,0x1
c000cfc9:	83 fa 04             	cmp    edx,0x4
c000cfcc:	75 e9                	jne    c000cfb7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cfce:	83 ec 0c             	sub    esp,0xc
c000cfd1:	68 08 1d 02 c0       	push   0xc0021d08
c000cfd6:	e8 2c 46 00 00       	call   c0011607 <KePanic(char const*)>
c000cfdb:	83 c4 10             	add    esp,0x10
c000cfde:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfe3:	83 c4 0c             	add    esp,0xc
c000cfe6:	5b                   	pop    ebx
c000cfe7:	5e                   	pop    esi
c000cfe8:	5f                   	pop    edi
c000cfe9:	5d                   	pop    ebp
c000cfea:	c3                   	ret    
c000cfeb:	83 c3 01             	add    ebx,0x1
c000cfee:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000cff4:	7e a7                	jle    c000cf9d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cff6:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000cffd:	83 ec 08             	sub    esp,0x8
c000d000:	56                   	push   esi
c000d001:	55                   	push   ebp
c000d002:	e8 c9 1b 01 00       	call   c001ebd0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d007:	83 c4 10             	add    esp,0x10
c000d00a:	84 c0                	test   al,al
c000d00c:	74 dd                	je     c000cfeb <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d00e:	89 f8                	mov    eax,edi
c000d010:	83 ec 04             	sub    esp,0x4
c000d013:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d01a:	8d 6e 20             	lea    ebp,[esi+0x20]
c000d01d:	0f b6 f8             	movzx  edi,al
c000d020:	57                   	push   edi
c000d021:	89 e8                	mov    eax,ebp
c000d023:	6a 00                	push   0x0
c000d025:	0f b6 c0             	movzx  eax,al
c000d028:	50                   	push   eax
c000d029:	89 f0                	mov    eax,esi
c000d02b:	6a 00                	push   0x0
c000d02d:	0f b6 c0             	movzx  eax,al
c000d030:	6a 00                	push   0x0
c000d032:	50                   	push   eax
c000d033:	53                   	push   ebx
c000d034:	e8 03 1d 01 00       	call   c001ed3c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d039:	83 c4 20             	add    esp,0x20
c000d03c:	e9 6f ff ff ff       	jmp    c000cfb0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d041:	83 ec 0c             	sub    esp,0xc
c000d044:	31 ff                	xor    edi,edi
c000d046:	68 d0 1c 02 c0       	push   0xc0021cd0
c000d04b:	e8 b7 45 00 00       	call   c0011607 <KePanic(char const*)>
c000d050:	83 c4 10             	add    esp,0x10
c000d053:	e9 24 ff ff ff       	jmp    c000cf7c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d058:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000d05b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d05f:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d066:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d06a:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d071:	83 c4 0c             	add    esp,0xc
c000d074:	89 f0                	mov    eax,esi
c000d076:	5b                   	pop    ebx
c000d077:	5e                   	pop    esi
c000d078:	5f                   	pop    edi
c000d079:	5d                   	pop    ebp
c000d07a:	c3                   	ret    

c000d07b <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d07b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d07f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d083:	c1 e0 04             	shl    eax,0x4
c000d086:	8d 50 10             	lea    edx,[eax+0x10]
c000d089:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d08f:	74 08                	je     c000d099 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d091:	83 c0 04             	add    eax,0x4
c000d094:	39 d0                	cmp    eax,edx
c000d096:	75 f1                	jne    c000d089 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d098:	c3                   	ret    
c000d099:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0a3:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0ad:	eb e2                	jmp    c000d091 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0af <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0af:	56                   	push   esi
c000d0b0:	53                   	push   ebx
c000d0b1:	83 ec 04             	sub    esp,0x4
c000d0b4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d0b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d0bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d0c1:	74 0e                	je     c000d0d1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d0c3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d0c8:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d0cf:	75 34                	jne    c000d105 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d0d1:	8d 43 20             	lea    eax,[ebx+0x20]
c000d0d4:	c1 e0 04             	shl    eax,0x4
c000d0d7:	8d 50 10             	lea    edx,[eax+0x10]
c000d0da:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d0e0:	74 0d                	je     c000d0ef <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d0e2:	83 c0 04             	add    eax,0x4
c000d0e5:	39 d0                	cmp    eax,edx
c000d0e7:	75 f1                	jne    c000d0da <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d0e9:	83 c4 04             	add    esp,0x4
c000d0ec:	5b                   	pop    ebx
c000d0ed:	5e                   	pop    esi
c000d0ee:	c3                   	ret    
c000d0ef:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0f9:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d103:	eb dd                	jmp    c000d0e2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d105:	83 fb 0f             	cmp    ebx,0xf
c000d108:	7f 09                	jg     c000d113 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d10a:	0f b6 9b 48 38 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc7b8]
c000d111:	eb be                	jmp    c000d0d1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d113:	83 ec 0c             	sub    esp,0xc
c000d116:	68 c1 1c 02 c0       	push   0xc0021cc1
c000d11b:	e8 e7 44 00 00       	call   c0011607 <KePanic(char const*)>
c000d120:	83 c4 10             	add    esp,0x10
c000d123:	eb ac                	jmp    c000d0d1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d125 <setupINTS()>:
c000d125:	31 c0                	xor    eax,eax
c000d127:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d131:	83 c0 10             	add    eax,0x10
c000d134:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d13e:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d148:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d152:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d15c:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d166:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d170:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d17a:	3d 00 10 00 00       	cmp    eax,0x1000
c000d17f:	75 a6                	jne    c000d127 <setupINTS()+0x2>
c000d181:	c3                   	ret    

c000d182 <convertLegacyIRQNumber(int)>:
c000d182:	83 ec 0c             	sub    esp,0xc
c000d185:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d18f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d196:	74 0c                	je     c000d1a4 <convertLegacyIRQNumber(int)+0x22>
c000d198:	83 f8 0f             	cmp    eax,0xf
c000d19b:	7f 0b                	jg     c000d1a8 <convertLegacyIRQNumber(int)+0x26>
c000d19d:	0f b6 80 48 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc7b8]
c000d1a4:	83 c4 0c             	add    esp,0xc
c000d1a7:	c3                   	ret    
c000d1a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1ac:	83 ec 0c             	sub    esp,0xc
c000d1af:	68 d0 1c 02 c0       	push   0xc0021cd0
c000d1b4:	e8 4e 44 00 00       	call   c0011607 <KePanic(char const*)>
c000d1b9:	83 c4 10             	add    esp,0x10
c000d1bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c0:	83 c4 0c             	add    esp,0xc
c000d1c3:	c3                   	ret    

c000d1c4 <startGUI(void*)>:
c000d1c4:	55                   	push   ebp
c000d1c5:	89 e5                	mov    ebp,esp
c000d1c7:	53                   	push   ebx
c000d1c8:	83 ec 04             	sub    esp,0x4
c000d1cb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1d0:	83 e8 01             	sub    eax,0x1
c000d1d3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1d8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1dd:	85 c0                	test   eax,eax
c000d1df:	75 01                	jne    c000d1e2 <startGUI(void*)+0x1e>
c000d1e1:	fb                   	sti    
c000d1e2:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1e8:	83 ec 08             	sub    esp,0x8
c000d1eb:	6a 01                	push   0x1
c000d1ed:	68 2d 1d 02 c0       	push   0xc0021d2d
c000d1f2:	e8 d4 84 00 00       	call   c00156cb <Thr::loadDLL(char const*, bool)>
c000d1f7:	83 c4 10             	add    esp,0x10
c000d1fa:	83 ec 08             	sub    esp,0x8
c000d1fd:	53                   	push   ebx
c000d1fe:	50                   	push   eax
c000d1ff:	e8 07 87 00 00       	call   c001590b <Thr::executeDLL(unsigned long, void*)>
c000d204:	83 c4 10             	add    esp,0x10
c000d207:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d20d:	83 ec 08             	sub    esp,0x8
c000d210:	6a 01                	push   0x1
c000d212:	68 47 1d 02 c0       	push   0xc0021d47
c000d217:	e8 af 84 00 00       	call   c00156cb <Thr::loadDLL(char const*, bool)>
c000d21c:	83 c4 10             	add    esp,0x10
c000d21f:	83 ec 08             	sub    esp,0x8
c000d222:	53                   	push   ebx
c000d223:	50                   	push   eax
c000d224:	e8 e2 86 00 00       	call   c001590b <Thr::executeDLL(unsigned long, void*)>
c000d229:	83 c4 10             	add    esp,0x10
c000d22c:	90                   	nop
c000d22d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d230:	c9                   	leave  
c000d231:	c3                   	ret    

c000d232 <startGUIVESA(void*)>:
c000d232:	55                   	push   ebp
c000d233:	89 e5                	mov    ebp,esp
c000d235:	53                   	push   ebx
c000d236:	83 ec 04             	sub    esp,0x4
c000d239:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d23e:	83 e8 01             	sub    eax,0x1
c000d241:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d246:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d24b:	85 c0                	test   eax,eax
c000d24d:	75 01                	jne    c000d250 <startGUIVESA(void*)+0x1e>
c000d24f:	fb                   	sti    
c000d250:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d256:	83 ec 08             	sub    esp,0x8
c000d259:	6a 01                	push   0x1
c000d25b:	68 65 1d 02 c0       	push   0xc0021d65
c000d260:	e8 66 84 00 00       	call   c00156cb <Thr::loadDLL(char const*, bool)>
c000d265:	83 c4 10             	add    esp,0x10
c000d268:	83 ec 08             	sub    esp,0x8
c000d26b:	53                   	push   ebx
c000d26c:	50                   	push   eax
c000d26d:	e8 99 86 00 00       	call   c001590b <Thr::executeDLL(unsigned long, void*)>
c000d272:	83 c4 10             	add    esp,0x10
c000d275:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d27b:	83 ec 08             	sub    esp,0x8
c000d27e:	6a 01                	push   0x1
c000d280:	68 47 1d 02 c0       	push   0xc0021d47
c000d285:	e8 41 84 00 00       	call   c00156cb <Thr::loadDLL(char const*, bool)>
c000d28a:	83 c4 10             	add    esp,0x10
c000d28d:	83 ec 08             	sub    esp,0x8
c000d290:	53                   	push   ebx
c000d291:	50                   	push   eax
c000d292:	e8 74 86 00 00       	call   c001590b <Thr::executeDLL(unsigned long, void*)>
c000d297:	83 c4 10             	add    esp,0x10
c000d29a:	90                   	nop
c000d29b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d29e:	c9                   	leave  
c000d29f:	c3                   	ret    

c000d2a0 <sendKeyToTerminal(unsigned char)>:
c000d2a0:	55                   	push   ebp
c000d2a1:	89 e5                	mov    ebp,esp
c000d2a3:	83 ec 28             	sub    esp,0x28
c000d2a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2ac:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d2b1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d2b5:	83 ec 08             	sub    esp,0x8
c000d2b8:	52                   	push   edx
c000d2b9:	50                   	push   eax
c000d2ba:	e8 01 bb ff ff       	call   c0008dc0 <VgaText::receiveKey(unsigned char)>
c000d2bf:	83 c4 10             	add    esp,0x10
c000d2c2:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2c6:	83 f8 0a             	cmp    eax,0xa
c000d2c9:	74 16                	je     c000d2e1 <sendKeyToTerminal(unsigned char)+0x41>
c000d2cb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2cf:	83 f8 03             	cmp    eax,0x3
c000d2d2:	74 0d                	je     c000d2e1 <sendKeyToTerminal(unsigned char)+0x41>
c000d2d4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2d8:	83 f8 1c             	cmp    eax,0x1c
c000d2db:	0f 85 97 00 00 00    	jne    c000d378 <sendKeyToTerminal(unsigned char)+0xd8>
c000d2e1:	fa                   	cli    
c000d2e2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2e7:	83 c0 01             	add    eax,0x1
c000d2ea:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2ef:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2f4:	83 c0 01             	add    eax,0x1
c000d2f7:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d2fc:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d301:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d304:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d30e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d312:	74 1f                	je     c000d333 <sendKeyToTerminal(unsigned char)+0x93>
c000d314:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d317:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d31a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d31d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d320:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d323:	83 ec 0c             	sub    esp,0xc
c000d326:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d329:	e8 fe 92 00 00       	call   c001662c <unblockTask(ThreadControlBlock*)>
c000d32e:	83 c4 10             	add    esp,0x10
c000d331:	eb db                	jmp    c000d30e <sendKeyToTerminal(unsigned char)+0x6e>
c000d333:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d338:	83 e8 01             	sub    eax,0x1
c000d33b:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d340:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d345:	85 c0                	test   eax,eax
c000d347:	75 18                	jne    c000d361 <sendKeyToTerminal(unsigned char)+0xc1>
c000d349:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d34e:	85 c0                	test   eax,eax
c000d350:	74 0f                	je     c000d361 <sendKeyToTerminal(unsigned char)+0xc1>
c000d352:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d35c:	e8 d3 8d 00 00       	call   c0016134 <schedule()>
c000d361:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d366:	83 e8 01             	sub    eax,0x1
c000d369:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d36e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d373:	85 c0                	test   eax,eax
c000d375:	75 01                	jne    c000d378 <sendKeyToTerminal(unsigned char)+0xd8>
c000d377:	fb                   	sti    
c000d378:	90                   	nop
c000d379:	c9                   	leave  
c000d37a:	c3                   	ret    

c000d37b <sendKeyboardToken(KeyboardToken)>:
c000d37b:	55                   	push   ebp
c000d37c:	89 e5                	mov    ebp,esp
c000d37e:	83 ec 18             	sub    esp,0x18
c000d381:	e8 d1 42 00 00       	call   c0011657 <KeUserIOReceived()>
c000d386:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d38c:	0f b7 c0             	movzx  eax,ax
c000d38f:	83 f2 01             	xor    edx,0x1
c000d392:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d398:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d39d:	85 c0                	test   eax,eax
c000d39f:	74 24                	je     c000d3c5 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3a1:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d3a7:	83 ec 04             	sub    esp,0x4
c000d3aa:	68 40 b4 02 c0       	push   0xc002b440
c000d3af:	83 ec 08             	sub    esp,0x8
c000d3b2:	89 e0                	mov    eax,esp
c000d3b4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d3b7:	89 08                	mov    DWORD PTR [eax],ecx
c000d3b9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d3bc:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d3c0:	ff d2                	call   edx
c000d3c2:	83 c4 10             	add    esp,0x10
c000d3c5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d3c9:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d3cc:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3d1:	0f b6 d2             	movzx  edx,dl
c000d3d4:	0f b6 c0             	movzx  eax,al
c000d3d7:	39 c2                	cmp    edx,eax
c000d3d9:	74 1c                	je     c000d3f7 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d3db:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d3de:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d3e3:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3e8:	0f b6 c0             	movzx  eax,al
c000d3eb:	83 ec 0c             	sub    esp,0xc
c000d3ee:	50                   	push   eax
c000d3ef:	e8 28 b1 ff ff       	call   c000851c <setTerminalScrollLock(bool)>
c000d3f4:	83 c4 10             	add    esp,0x10
c000d3f7:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d3fa:	0f b6 c0             	movzx  eax,al
c000d3fd:	85 c0                	test   eax,eax
c000d3ff:	0f 84 da 00 00 00    	je     c000d4df <sendKeyboardToken(KeyboardToken)+0x164>
c000d405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d408:	0f b7 c0             	movzx  eax,ax
c000d40b:	3d 18 03 00 00       	cmp    eax,0x318
c000d410:	75 06                	jne    c000d418 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d412:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d41b:	0f b7 c0             	movzx  eax,ax
c000d41e:	3d 19 03 00 00       	cmp    eax,0x319
c000d423:	75 06                	jne    c000d42b <sendKeyboardToken(KeyboardToken)+0xb0>
c000d425:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d42b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42e:	0f b7 c0             	movzx  eax,ax
c000d431:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d436:	75 06                	jne    c000d43e <sendKeyboardToken(KeyboardToken)+0xc3>
c000d438:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d43e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d441:	0f b7 c0             	movzx  eax,ax
c000d444:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d449:	75 06                	jne    c000d451 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d44b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d454:	0f b7 c0             	movzx  eax,ax
c000d457:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d45c:	75 06                	jne    c000d464 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d45e:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d467:	0f b7 c0             	movzx  eax,ax
c000d46a:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d46f:	75 06                	jne    c000d477 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d471:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d47a:	0f b7 c0             	movzx  eax,ax
c000d47d:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d482:	75 06                	jne    c000d48a <sendKeyboardToken(KeyboardToken)+0x10f>
c000d484:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d48a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d48d:	0f b7 c0             	movzx  eax,ax
c000d490:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d495:	75 06                	jne    c000d49d <sendKeyboardToken(KeyboardToken)+0x122>
c000d497:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d49d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a0:	0f b7 c0             	movzx  eax,ax
c000d4a3:	3d 20 03 00 00       	cmp    eax,0x320
c000d4a8:	75 06                	jne    c000d4b0 <sendKeyboardToken(KeyboardToken)+0x135>
c000d4aa:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d4b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b3:	0f b7 c0             	movzx  eax,ax
c000d4b6:	3d 21 03 00 00       	cmp    eax,0x321
c000d4bb:	75 06                	jne    c000d4c3 <sendKeyboardToken(KeyboardToken)+0x148>
c000d4bd:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d4c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c6:	0f b7 c0             	movzx  eax,ax
c000d4c9:	3d 22 03 00 00       	cmp    eax,0x322
c000d4ce:	0f 85 f1 00 00 00    	jne    c000d5c5 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4d4:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d4da:	e9 e6 00 00 00       	jmp    c000d5c5 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e2:	0f b7 c0             	movzx  eax,ax
c000d4e5:	3d 18 03 00 00       	cmp    eax,0x318
c000d4ea:	75 0a                	jne    c000d4f6 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d4ec:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d4f2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f9:	0f b7 c0             	movzx  eax,ax
c000d4fc:	3d 19 03 00 00       	cmp    eax,0x319
c000d501:	75 0a                	jne    c000d50d <sendKeyboardToken(KeyboardToken)+0x192>
c000d503:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d509:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d50d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d510:	0f b7 c0             	movzx  eax,ax
c000d513:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d518:	75 0a                	jne    c000d524 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d51a:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d520:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d524:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d527:	0f b7 c0             	movzx  eax,ax
c000d52a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d52f:	75 0a                	jne    c000d53b <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d531:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d537:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53e:	0f b7 c0             	movzx  eax,ax
c000d541:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d546:	75 0a                	jne    c000d552 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d548:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d54e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d555:	0f b7 c0             	movzx  eax,ax
c000d558:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d55d:	75 0a                	jne    c000d569 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d55f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d565:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56c:	0f b7 c0             	movzx  eax,ax
c000d56f:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d574:	75 0a                	jne    c000d580 <sendKeyboardToken(KeyboardToken)+0x205>
c000d576:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d57c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d583:	0f b7 c0             	movzx  eax,ax
c000d586:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d58b:	75 0a                	jne    c000d597 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d58d:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d593:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d59a:	0f b7 c0             	movzx  eax,ax
c000d59d:	3d 20 03 00 00       	cmp    eax,0x320
c000d5a2:	75 0a                	jne    c000d5ae <sendKeyboardToken(KeyboardToken)+0x233>
c000d5a4:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d5aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b1:	0f b7 c0             	movzx  eax,ax
c000d5b4:	3d 21 03 00 00       	cmp    eax,0x321
c000d5b9:	75 0a                	jne    c000d5c5 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d5bb:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d5c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5c8:	0f b7 c0             	movzx  eax,ax
c000d5cb:	3d 00 02 00 00       	cmp    eax,0x200
c000d5d0:	75 2f                	jne    c000d601 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5d2:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5d7:	83 f0 01             	xor    eax,0x1
c000d5da:	0f b6 c0             	movzx  eax,al
c000d5dd:	85 c0                	test   eax,eax
c000d5df:	74 20                	je     c000d601 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5e1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5e6:	6a 01                	push   0x1
c000d5e8:	6a 00                	push   0x0
c000d5ea:	68 c4 d1 00 c0       	push   0xc000d1c4
c000d5ef:	50                   	push   eax
c000d5f0:	e8 f3 88 00 00       	call   c0015ee8 <Process::createThread(void (*)(void*), void*, int)>
c000d5f5:	83 c4 10             	add    esp,0x10
c000d5f8:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d5ff:	eb 3a                	jmp    c000d63b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d604:	0f b7 c0             	movzx  eax,ax
c000d607:	3d 01 02 00 00       	cmp    eax,0x201
c000d60c:	75 2d                	jne    c000d63b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d60e:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d613:	83 f0 01             	xor    eax,0x1
c000d616:	0f b6 c0             	movzx  eax,al
c000d619:	85 c0                	test   eax,eax
c000d61b:	74 1e                	je     c000d63b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d61d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d622:	6a 01                	push   0x1
c000d624:	6a 00                	push   0x0
c000d626:	68 32 d2 00 c0       	push   0xc000d232
c000d62b:	50                   	push   eax
c000d62c:	e8 b7 88 00 00       	call   c0015ee8 <Process::createThread(void (*)(void*), void*, int)>
c000d631:	83 c4 10             	add    esp,0x10
c000d634:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d63e:	0f b7 c0             	movzx  eax,ax
c000d641:	3d 25 03 00 00       	cmp    eax,0x325
c000d646:	75 06                	jne    c000d64e <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d648:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d64e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d651:	0f b7 c0             	movzx  eax,ax
c000d654:	3d 24 03 00 00       	cmp    eax,0x324
c000d659:	75 06                	jne    c000d661 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d65b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d664:	0f b7 c0             	movzx  eax,ax
c000d667:	3d 23 03 00 00       	cmp    eax,0x323
c000d66c:	75 06                	jne    c000d674 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d66e:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d677:	0f b7 c0             	movzx  eax,ax
c000d67a:	3d 26 03 00 00       	cmp    eax,0x326
c000d67f:	75 06                	jne    c000d687 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d681:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d68a:	0f b7 c0             	movzx  eax,ax
c000d68d:	3d 27 03 00 00       	cmp    eax,0x327
c000d692:	75 06                	jne    c000d69a <sendKeyboardToken(KeyboardToken)+0x31f>
c000d694:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d69a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d69d:	0f b7 c0             	movzx  eax,ax
c000d6a0:	3d 22 03 00 00       	cmp    eax,0x322
c000d6a5:	75 06                	jne    c000d6ad <sendKeyboardToken(KeyboardToken)+0x332>
c000d6a7:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6ad:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d6b1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6b4:	83 f0 01             	xor    eax,0x1
c000d6b7:	0f b6 c0             	movzx  eax,al
c000d6ba:	85 c0                	test   eax,eax
c000d6bc:	74 7c                	je     c000d73a <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d6be:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d6c3:	0f b6 c0             	movzx  eax,al
c000d6c6:	85 c0                	test   eax,eax
c000d6c8:	74 43                	je     c000d70d <sendKeyboardToken(KeyboardToken)+0x392>
c000d6ca:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6ce:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d6d2:	85 c0                	test   eax,eax
c000d6d4:	74 2b                	je     c000d701 <sendKeyboardToken(KeyboardToken)+0x386>
c000d6d6:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d6dc:	89 d0                	mov    eax,edx
c000d6de:	c1 e0 02             	shl    eax,0x2
c000d6e1:	01 d0                	add    eax,edx
c000d6e3:	d1 e0                	shl    eax,1
c000d6e5:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ed:	0f b7 c0             	movzx  eax,ax
c000d6f0:	8d 50 d0             	lea    edx,[eax-0x30]
c000d6f3:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6f8:	01 d0                	add    eax,edx
c000d6fa:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6ff:	eb 71                	jmp    c000d772 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d701:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d70b:	eb 65                	jmp    c000d772 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d70d:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d712:	85 c0                	test   eax,eax
c000d714:	74 18                	je     c000d72e <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d716:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d71b:	0f b6 c0             	movzx  eax,al
c000d71e:	83 ec 0c             	sub    esp,0xc
c000d721:	50                   	push   eax
c000d722:	e8 79 fb ff ff       	call   c000d2a0 <sendKeyToTerminal(unsigned char)>
c000d727:	83 c4 10             	add    esp,0x10
c000d72a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d72e:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d738:	eb 38                	jmp    c000d772 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d73a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d73d:	0f b7 c0             	movzx  eax,ax
c000d740:	3d 01 01 00 00       	cmp    eax,0x101
c000d745:	75 2b                	jne    c000d772 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d747:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d74c:	85 c0                	test   eax,eax
c000d74e:	74 18                	je     c000d768 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d750:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d755:	0f b6 c0             	movzx  eax,al
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	50                   	push   eax
c000d75c:	e8 3f fb ff ff       	call   c000d2a0 <sendKeyToTerminal(unsigned char)>
c000d761:	83 c4 10             	add    esp,0x10
c000d764:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d768:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d772:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d775:	83 f0 01             	xor    eax,0x1
c000d778:	0f b6 c0             	movzx  eax,al
c000d77b:	85 c0                	test   eax,eax
c000d77d:	74 5a                	je     c000d7d9 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d77f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d782:	83 f0 01             	xor    eax,0x1
c000d785:	0f b6 c0             	movzx  eax,al
c000d788:	85 c0                	test   eax,eax
c000d78a:	74 4d                	je     c000d7d9 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d78c:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d791:	83 f0 01             	xor    eax,0x1
c000d794:	0f b6 c0             	movzx  eax,al
c000d797:	85 c0                	test   eax,eax
c000d799:	74 3e                	je     c000d7d9 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d79b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d79e:	0f b7 c0             	movzx  eax,ax
c000d7a1:	83 f8 1f             	cmp    eax,0x1f
c000d7a4:	76 0b                	jbe    c000d7b1 <sendKeyboardToken(KeyboardToken)+0x436>
c000d7a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a9:	0f b7 c0             	movzx  eax,ax
c000d7ac:	83 f8 7e             	cmp    eax,0x7e
c000d7af:	76 16                	jbe    c000d7c7 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b4:	0f b7 c0             	movzx  eax,ax
c000d7b7:	83 f8 0a             	cmp    eax,0xa
c000d7ba:	74 0b                	je     c000d7c7 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7bf:	0f b7 c0             	movzx  eax,ax
c000d7c2:	83 f8 08             	cmp    eax,0x8
c000d7c5:	75 12                	jne    c000d7d9 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ca:	0f b6 c0             	movzx  eax,al
c000d7cd:	83 ec 0c             	sub    esp,0xc
c000d7d0:	50                   	push   eax
c000d7d1:	e8 ca fa ff ff       	call   c000d2a0 <sendKeyToTerminal(unsigned char)>
c000d7d6:	83 c4 10             	add    esp,0x10
c000d7d9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7dc:	83 f0 01             	xor    eax,0x1
c000d7df:	0f b6 c0             	movzx  eax,al
c000d7e2:	85 c0                	test   eax,eax
c000d7e4:	74 5d                	je     c000d843 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7e6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7e9:	83 f0 01             	xor    eax,0x1
c000d7ec:	0f b6 c0             	movzx  eax,al
c000d7ef:	85 c0                	test   eax,eax
c000d7f1:	74 50                	je     c000d843 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7f3:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7f8:	0f b6 c0             	movzx  eax,al
c000d7fb:	85 c0                	test   eax,eax
c000d7fd:	74 44                	je     c000d843 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d802:	0f b7 c0             	movzx  eax,ax
c000d805:	83 f8 3f             	cmp    eax,0x3f
c000d808:	76 39                	jbe    c000d843 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d80a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d80d:	0f b7 c0             	movzx  eax,ax
c000d810:	83 f8 7f             	cmp    eax,0x7f
c000d813:	77 2e                	ja     c000d843 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d818:	88 c2                	mov    dl,al
c000d81a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d81d:	0f b7 c0             	movzx  eax,ax
c000d820:	83 f8 5f             	cmp    eax,0x5f
c000d823:	76 04                	jbe    c000d829 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d825:	b0 20                	mov    al,0x20
c000d827:	eb 02                	jmp    c000d82b <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d829:	b0 00                	mov    al,0x0
c000d82b:	89 d1                	mov    ecx,edx
c000d82d:	29 c1                	sub    ecx,eax
c000d82f:	89 c8                	mov    eax,ecx
c000d831:	83 e8 40             	sub    eax,0x40
c000d834:	0f b6 c0             	movzx  eax,al
c000d837:	83 ec 0c             	sub    esp,0xc
c000d83a:	50                   	push   eax
c000d83b:	e8 60 fa ff ff       	call   c000d2a0 <sendKeyToTerminal(unsigned char)>
c000d840:	83 c4 10             	add    esp,0x10
c000d843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d846:	0f b7 c0             	movzx  eax,ax
c000d849:	3d 00 03 00 00       	cmp    eax,0x300
c000d84e:	75 12                	jne    c000d862 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d850:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d853:	83 f0 01             	xor    eax,0x1
c000d856:	0f b6 c0             	movzx  eax,al
c000d859:	85 c0                	test   eax,eax
c000d85b:	74 05                	je     c000d862 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d85d:	e8 bb ac ff ff       	call   c000851d <doTerminalCycle()>
c000d862:	90                   	nop
c000d863:	c9                   	leave  
c000d864:	c3                   	ret    

c000d865 <clearInternalKeybuffer(VgaText*)>:
c000d865:	55                   	push   ebp
c000d866:	89 e5                	mov    ebp,esp
c000d868:	83 ec 08             	sub    esp,0x8
c000d86b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d86e:	05 02 01 00 00       	add    eax,0x102
c000d873:	83 ec 0c             	sub    esp,0xc
c000d876:	50                   	push   eax
c000d877:	e8 04 2d ff ff       	call   c0000580 <strlen>
c000d87c:	83 c4 10             	add    esp,0x10
c000d87f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d882:	81 c2 02 01 00 00    	add    edx,0x102
c000d888:	83 ec 04             	sub    esp,0x4
c000d88b:	50                   	push   eax
c000d88c:	6a 00                	push   0x0
c000d88e:	52                   	push   edx
c000d88f:	e8 5c 2c ff ff       	call   c00004f0 <memset>
c000d894:	83 c4 10             	add    esp,0x10
c000d897:	90                   	nop
c000d898:	c9                   	leave  
c000d899:	c3                   	ret    

c000d89a <readKeyboard(VgaText*, char*, unsigned long)>:
c000d89a:	55                   	push   ebp
c000d89b:	89 e5                	mov    ebp,esp
c000d89d:	83 ec 18             	sub    esp,0x18
c000d8a0:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d8a5:	85 c0                	test   eax,eax
c000d8a7:	74 2a                	je     c000d8d3 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d8a9:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8af:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d8b5:	83 ec 04             	sub    esp,0x4
c000d8b8:	68 40 b4 02 c0       	push   0xc002b440
c000d8bd:	83 ec 08             	sub    esp,0x8
c000d8c0:	89 e0                	mov    eax,esp
c000d8c2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d8c5:	89 08                	mov    DWORD PTR [eax],ecx
c000d8c7:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d8ca:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d8ce:	ff d2                	call   edx
c000d8d0:	83 c4 10             	add    esp,0x10
c000d8d3:	fb                   	sti    
c000d8d4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d8db:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d8df:	0f 84 0d 01 00 00    	je     c000d9f2 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d8e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8e8:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d8ee:	0f be c0             	movsx  eax,al
c000d8f1:	85 c0                	test   eax,eax
c000d8f3:	75 2c                	jne    c000d921 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d8f5:	fa                   	cli    
c000d8f6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8fb:	83 c0 01             	add    eax,0x1
c000d8fe:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d903:	e8 2c 88 00 00       	call   c0016134 <schedule()>
c000d908:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d90d:	83 e8 01             	sub    eax,0x1
c000d910:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d915:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d91a:	85 c0                	test   eax,eax
c000d91c:	75 c7                	jne    c000d8e5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d91e:	fb                   	sti    
c000d91f:	eb c4                	jmp    c000d8e5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d921:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d924:	8d 50 01             	lea    edx,[eax+0x1]
c000d927:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d92a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d92d:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d933:	88 10                	mov    BYTE PTR [eax],dl
c000d935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d938:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d93e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d941:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d945:	83 f8 03             	cmp    eax,0x3
c000d948:	75 1e                	jne    c000d968 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d94a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d94f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d951:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d954:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d95a:	83 ec 08             	sub    esp,0x8
c000d95d:	6a 02                	push   0x2
c000d95f:	50                   	push   eax
c000d960:	e8 3e 41 00 00       	call   c0011aa3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d965:	83 c4 10             	add    esp,0x10
c000d968:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d96c:	83 f8 1c             	cmp    eax,0x1c
c000d96f:	75 1e                	jne    c000d98f <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d971:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d976:	8b 00                	mov    eax,DWORD PTR [eax]
c000d978:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d97b:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d981:	83 ec 08             	sub    esp,0x8
c000d984:	6a 09                	push   0x9
c000d986:	50                   	push   eax
c000d987:	e8 17 41 00 00       	call   c0011aa3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d98c:	83 c4 10             	add    esp,0x10
c000d98f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d992:	05 02 01 00 00       	add    eax,0x102
c000d997:	83 ec 0c             	sub    esp,0xc
c000d99a:	50                   	push   eax
c000d99b:	e8 e0 2b ff ff       	call   c0000580 <strlen>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9a6:	81 c2 02 01 00 00    	add    edx,0x102
c000d9ac:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9af:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9b2:	81 c2 02 01 00 00    	add    edx,0x102
c000d9b8:	83 ec 04             	sub    esp,0x4
c000d9bb:	50                   	push   eax
c000d9bc:	51                   	push   ecx
c000d9bd:	52                   	push   edx
c000d9be:	e8 0d 2a ff ff       	call   c00003d0 <memmove>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d9ca:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d9ce:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9d2:	83 f8 0a             	cmp    eax,0xa
c000d9d5:	74 16                	je     c000d9ed <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9d7:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9db:	83 f8 03             	cmp    eax,0x3
c000d9de:	74 0d                	je     c000d9ed <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9e0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9e4:	83 f8 1c             	cmp    eax,0x1c
c000d9e7:	0f 85 ee fe ff ff    	jne    c000d8db <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d9ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9f0:	eb 03                	jmp    c000d9f5 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d9f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9f5:	c9                   	leave  
c000d9f6:	c3                   	ret    
c000d9f7:	90                   	nop

c000d9f8 <Keyboard::Keyboard(char const*)>:
c000d9f8:	83 ec 0c             	sub    esp,0xc
c000d9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ff:	83 ec 08             	sub    esp,0x8
c000da02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da06:	50                   	push   eax
c000da07:	e8 fa f0 ff ff       	call   c000cb06 <Device::Device(char const*)>
c000da0c:	83 c4 10             	add    esp,0x10
c000da0f:	ba 88 1d 02 c0       	mov    edx,0xc0021d88
c000da14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da18:	89 10                	mov    DWORD PTR [eax],edx
c000da1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da1e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da28:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da2f:	90                   	nop
c000da30:	83 c4 0c             	add    esp,0xc
c000da33:	c3                   	ret    

c000da34 <Keyboard::~Keyboard()>:
c000da34:	83 ec 0c             	sub    esp,0xc
c000da37:	ba 88 1d 02 c0       	mov    edx,0xc0021d88
c000da3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da40:	89 10                	mov    DWORD PTR [eax],edx
c000da42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da46:	83 ec 0c             	sub    esp,0xc
c000da49:	50                   	push   eax
c000da4a:	e8 57 ee ff ff       	call   c000c8a6 <Device::~Device()>
c000da4f:	83 c4 10             	add    esp,0x10
c000da52:	90                   	nop
c000da53:	83 c4 0c             	add    esp,0xc
c000da56:	c3                   	ret    
c000da57:	90                   	nop

c000da58 <Keyboard::~Keyboard()>:
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	83 ec 0c             	sub    esp,0xc
c000da5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da62:	e8 cd ff ff ff       	call   c000da34 <Keyboard::~Keyboard()>
c000da67:	83 c4 10             	add    esp,0x10
c000da6a:	83 ec 08             	sub    esp,0x8
c000da6d:	68 5c 01 00 00       	push   0x15c
c000da72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da76:	e8 95 cd ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000da7b:	83 c4 10             	add    esp,0x10
c000da7e:	83 c4 0c             	add    esp,0xc
c000da81:	c3                   	ret    

c000da82 <LogicalDisk::close(int, int, void*)>:
c000da82:	83 c8 ff             	or     eax,0xffffffff
c000da85:	c3                   	ret    

c000da86 <LogicalDisk::~LogicalDisk()>:
c000da86:	83 ec 0c             	sub    esp,0xc
c000da89:	ba 00 1e 02 c0       	mov    edx,0xc0021e00
c000da8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da92:	89 10                	mov    DWORD PTR [eax],edx
c000da94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da98:	83 ec 0c             	sub    esp,0xc
c000da9b:	50                   	push   eax
c000da9c:	e8 05 ee ff ff       	call   c000c8a6 <Device::~Device()>
c000daa1:	83 c4 10             	add    esp,0x10
c000daa4:	90                   	nop
c000daa5:	83 c4 0c             	add    esp,0xc
c000daa8:	c3                   	ret    
c000daa9:	90                   	nop

c000daaa <LogicalDisk::~LogicalDisk()>:
c000daaa:	83 ec 0c             	sub    esp,0xc
c000daad:	83 ec 0c             	sub    esp,0xc
c000dab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dab4:	e8 cd ff ff ff       	call   c000da86 <LogicalDisk::~LogicalDisk()>
c000dab9:	83 c4 10             	add    esp,0x10
c000dabc:	83 ec 08             	sub    esp,0x8
c000dabf:	68 78 01 00 00       	push   0x178
c000dac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac8:	e8 43 cd ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000dacd:	83 c4 10             	add    esp,0x10
c000dad0:	83 c4 0c             	add    esp,0xc
c000dad3:	c3                   	ret    

c000dad4 <LogicalDisk::open(int, int, void*)>:
c000dad4:	83 ec 18             	sub    esp,0x18
c000dad7:	68 b4 1d 02 c0       	push   0xc0021db4
c000dadc:	e8 26 3b 00 00       	call   c0011607 <KePanic(char const*)>
c000dae1:	83 c8 ff             	or     eax,0xffffffff
c000dae4:	83 c4 1c             	add    esp,0x1c
c000dae7:	c3                   	ret    

c000dae8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000dae8:	53                   	push   ebx
c000dae9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000daed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000daf5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000dafb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db01:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db07:	77 10                	ja     c000db19 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db09:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db0f:	89 d3                	mov    ebx,edx
c000db11:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db17:	72 05                	jb     c000db1e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db19:	83 c8 ff             	or     eax,0xffffffff
c000db1c:	89 c2                	mov    edx,eax
c000db1e:	5b                   	pop    ebx
c000db1f:	c3                   	ret    

c000db20 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db20:	56                   	push   esi
c000db21:	83 c8 ff             	or     eax,0xffffffff
c000db24:	53                   	push   ebx
c000db25:	89 c2                	mov    edx,eax
c000db27:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db2b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db33:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db39:	77 27                	ja     c000db62 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db3b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db41:	89 d8                	mov    eax,ebx
c000db43:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db4e:	89 c2                	mov    edx,eax
c000db50:	73 10                	jae    c000db62 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db52:	89 c8                	mov    eax,ecx
c000db54:	89 da                	mov    edx,ebx
c000db56:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db5c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db62:	5b                   	pop    ebx
c000db63:	5e                   	pop    esi
c000db64:	c3                   	ret    
c000db65:	90                   	nop

c000db66 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db66:	83 ec 1c             	sub    esp,0x1c
c000db69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000db80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db8c:	83 ec 08             	sub    esp,0x8
c000db8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db93:	50                   	push   eax
c000db94:	e8 6d ef ff ff       	call   c000cb06 <Device::Device(char const*)>
c000db99:	83 c4 10             	add    esp,0x10
c000db9c:	ba 00 1e 02 c0       	mov    edx,0xc0021e00
c000dba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba5:	89 10                	mov    DWORD PTR [eax],edx
c000dba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbab:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dbbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbcc:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dbd6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dbe2:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dbe8:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dbee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbf2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dbf5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dbf9:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dbff:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc0d:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc17:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc21:	90                   	nop
c000dc22:	83 c4 1c             	add    esp,0x1c
c000dc25:	c3                   	ret    

c000dc26 <LogicalDisk::assignDriveLetter()>:
c000dc26:	55                   	push   ebp
c000dc27:	57                   	push   edi
c000dc28:	56                   	push   esi
c000dc29:	53                   	push   ebx
c000dc2a:	83 ec 14             	sub    esp,0x14
c000dc2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc31:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc37:	b0 41                	mov    al,0x41
c000dc39:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc3f:	84 d2                	test   dl,dl
c000dc41:	75 02                	jne    c000dc45 <LogicalDisk::assignDriveLetter()+0x1f>
c000dc43:	b0 43                	mov    al,0x43
c000dc45:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc4b:	0f b6 ca             	movzx  ecx,dl
c000dc4e:	0f be e8             	movsx  ebp,al
c000dc51:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc55:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc59:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc5f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc63:	3c 43                	cmp    al,0x43
c000dc65:	75 10                	jne    c000dc77 <LogicalDisk::assignDriveLetter()+0x51>
c000dc67:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc6e:	75 5a                	jne    c000dcca <LogicalDisk::assignDriveLetter()+0xa4>
c000dc70:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc75:	75 53                	jne    c000dcca <LogicalDisk::assignDriveLetter()+0xa4>
c000dc77:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc7a:	ba 01 00 00 00       	mov    edx,0x1
c000dc7f:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc82:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc85:	d3 e2                	shl    edx,cl
c000dc87:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc8b:	89 d7                	mov    edi,edx
c000dc8d:	89 d6                	mov    esi,edx
c000dc8f:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dc93:	c1 ff 1f             	sar    edi,0x1f
c000dc96:	21 f9                	and    ecx,edi
c000dc98:	09 d1                	or     ecx,edx
c000dc9a:	75 2e                	jne    c000dcca <LogicalDisk::assignDriveLetter()+0xa4>
c000dc9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dca0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dca4:	09 f2                	or     edx,esi
c000dca6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dca9:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dcaf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcb3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dcb9:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dcc0:	09 fa                	or     edx,edi
c000dcc2:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dcc8:	eb 0d                	jmp    c000dcd7 <LogicalDisk::assignDriveLetter()+0xb1>
c000dcca:	8d 50 01             	lea    edx,[eax+0x1]
c000dccd:	45                   	inc    ebp
c000dcce:	80 fa 5b             	cmp    dl,0x5b
c000dcd1:	88 d0                	mov    al,dl
c000dcd3:	75 8e                	jne    c000dc63 <LogicalDisk::assignDriveLetter()+0x3d>
c000dcd5:	31 c0                	xor    eax,eax
c000dcd7:	83 c4 14             	add    esp,0x14
c000dcda:	5b                   	pop    ebx
c000dcdb:	5e                   	pop    esi
c000dcdc:	5f                   	pop    edi
c000dcdd:	5d                   	pop    ebp
c000dcde:	c3                   	ret    
c000dcdf:	90                   	nop

c000dce0 <LogicalDisk::mount()>:
c000dce0:	56                   	push   esi
c000dce1:	53                   	push   ebx
c000dce2:	53                   	push   ebx
c000dce3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dce7:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dced:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dcf7:	85 db                	test   ebx,ebx
c000dcf9:	74 27                	je     c000dd22 <LogicalDisk::mount()+0x42>
c000dcfb:	51                   	push   ecx
c000dcfc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd03:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd05:	83 e8 41             	sub    eax,0x41
c000dd08:	50                   	push   eax
c000dd09:	56                   	push   esi
c000dd0a:	53                   	push   ebx
c000dd0b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	84 c0                	test   al,al
c000dd13:	74 08                	je     c000dd1d <LogicalDisk::mount()+0x3d>
c000dd15:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd1b:	eb 07                	jmp    c000dd24 <LogicalDisk::mount()+0x44>
c000dd1d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd20:	eb d5                	jmp    c000dcf7 <LogicalDisk::mount()+0x17>
c000dd22:	31 c0                	xor    eax,eax
c000dd24:	5a                   	pop    edx
c000dd25:	5b                   	pop    ebx
c000dd26:	5e                   	pop    esi
c000dd27:	c3                   	ret    

c000dd28 <LogicalDisk::unmount()>:
c000dd28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd2c:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd36:	c3                   	ret    
c000dd37:	90                   	nop

c000dd38 <LogicalDisk::eject()>:
c000dd38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd3c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd42:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd48:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd4b:	90                   	nop

c000dd4c <LogicalDisk::unassignDriveLetter()>:
c000dd4c:	57                   	push   edi
c000dd4d:	56                   	push   esi
c000dd4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd52:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd59:	85 c9                	test   ecx,ecx
c000dd5b:	75 0f                	jne    c000dd6c <LogicalDisk::unassignDriveLetter()+0x20>
c000dd5d:	c7 44 24 0c d8 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021dd8
c000dd65:	5e                   	pop    esi
c000dd66:	5f                   	pop    edi
c000dd67:	e9 9b 38 00 00       	jmp    c0011607 <KePanic(char const*)>
c000dd6c:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd73:	83 e9 41             	sub    ecx,0x41
c000dd76:	b8 01 00 00 00       	mov    eax,0x1
c000dd7b:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd86:	d3 e0                	shl    eax,cl
c000dd88:	89 c7                	mov    edi,eax
c000dd8a:	f7 d0                	not    eax
c000dd8c:	c1 ff 1f             	sar    edi,0x1f
c000dd8f:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dd95:	89 fe                	mov    esi,edi
c000dd97:	f7 d6                	not    esi
c000dd99:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dd9f:	5e                   	pop    esi
c000dda0:	5f                   	pop    edi
c000dda1:	c3                   	ret    

c000dda2 <LogicalDisk::read(unsigned long long, int, void*)>:
c000dda2:	57                   	push   edi
c000dda3:	56                   	push   esi
c000dda4:	53                   	push   ebx
c000dda5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dda9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddad:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddb5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddbb:	77 41                	ja     c000ddfe <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ddbd:	99                   	cdq    
c000ddbe:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddc4:	01 c8                	add    eax,ecx
c000ddc6:	11 da                	adc    edx,ebx
c000ddc8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ddce:	19 d7                	sbb    edi,edx
c000ddd0:	72 33                	jb     c000de05 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ddd2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ddd8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ddde:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dde2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dde6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ddec:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ddf2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddf6:	5b                   	pop    ebx
c000ddf7:	5e                   	pop    esi
c000ddf8:	5f                   	pop    edi
c000ddf9:	e9 d4 0a 00 00       	jmp    c000e8d2 <VCache::read(unsigned long long, int, void*)>
c000ddfe:	b8 05 00 00 00       	mov    eax,0x5
c000de03:	eb 05                	jmp    c000de0a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de05:	b8 07 00 00 00       	mov    eax,0x7
c000de0a:	5b                   	pop    ebx
c000de0b:	5e                   	pop    esi
c000de0c:	5f                   	pop    edi
c000de0d:	c3                   	ret    

c000de0e <LogicalDisk::write(unsigned long long, int, void*)>:
c000de0e:	57                   	push   edi
c000de0f:	56                   	push   esi
c000de10:	53                   	push   ebx
c000de11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de19:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de21:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de27:	77 41                	ja     c000de6a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de29:	99                   	cdq    
c000de2a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de30:	01 c8                	add    eax,ecx
c000de32:	11 da                	adc    edx,ebx
c000de34:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de3a:	19 d7                	sbb    edi,edx
c000de3c:	72 33                	jb     c000de71 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de3e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de44:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de4a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de4e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de52:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de58:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de62:	5b                   	pop    ebx
c000de63:	5e                   	pop    esi
c000de64:	5f                   	pop    edi
c000de65:	e9 6e 09 00 00       	jmp    c000e7d8 <VCache::write(unsigned long long, int, void*)>
c000de6a:	b8 05 00 00 00       	mov    eax,0x5
c000de6f:	eb 05                	jmp    c000de76 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de71:	b8 07 00 00 00       	mov    eax,0x7
c000de76:	5b                   	pop    ebx
c000de77:	5e                   	pop    esi
c000de78:	5f                   	pop    edi
c000de79:	c3                   	ret    
c000de7a:	66 90                	xchg   ax,ax

c000de7c <Mouse::Mouse(char const*)>:
c000de7c:	83 ec 0c             	sub    esp,0xc
c000de7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de83:	83 ec 08             	sub    esp,0x8
c000de86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de8a:	50                   	push   eax
c000de8b:	e8 76 ec ff ff       	call   c000cb06 <Device::Device(char const*)>
c000de90:	83 c4 10             	add    esp,0x10
c000de93:	ba 2c 1e 02 c0       	mov    edx,0xc0021e2c
c000de98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de9c:	89 10                	mov    DWORD PTR [eax],edx
c000de9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000deac:	90                   	nop
c000dead:	83 c4 0c             	add    esp,0xc
c000deb0:	c3                   	ret    
c000deb1:	90                   	nop
c000deb2:	66 90                	xchg   ax,ax

c000deb4 <Mouse::~Mouse()>:
c000deb4:	83 ec 0c             	sub    esp,0xc
c000deb7:	ba 2c 1e 02 c0       	mov    edx,0xc0021e2c
c000debc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec0:	89 10                	mov    DWORD PTR [eax],edx
c000dec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec6:	83 ec 0c             	sub    esp,0xc
c000dec9:	50                   	push   eax
c000deca:	e8 d7 e9 ff ff       	call   c000c8a6 <Device::~Device()>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	90                   	nop
c000ded3:	83 c4 0c             	add    esp,0xc
c000ded6:	c3                   	ret    
c000ded7:	90                   	nop

c000ded8 <Mouse::~Mouse()>:
c000ded8:	83 ec 0c             	sub    esp,0xc
c000dedb:	83 ec 0c             	sub    esp,0xc
c000dede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dee2:	e8 cd ff ff ff       	call   c000deb4 <Mouse::~Mouse()>
c000dee7:	83 c4 10             	add    esp,0x10
c000deea:	83 ec 08             	sub    esp,0x8
c000deed:	68 58 01 00 00       	push   0x158
c000def2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000def6:	e8 15 c9 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000defb:	83 c4 10             	add    esp,0x10
c000defe:	83 c4 0c             	add    esp,0xc
c000df01:	c3                   	ret    

c000df02 <NIC::getMAC()>:
c000df02:	31 c0                	xor    eax,eax
c000df04:	31 d2                	xor    edx,edx
c000df06:	c3                   	ret    
c000df07:	90                   	nop

c000df08 <NIC::write(int, unsigned char*, int*)>:
c000df08:	b8 01 00 00 00       	mov    eax,0x1
c000df0d:	c3                   	ret    

c000df0e <NIC::NIC(char const*)>:
c000df0e:	83 ec 0c             	sub    esp,0xc
c000df11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df15:	83 ec 08             	sub    esp,0x8
c000df18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1c:	50                   	push   eax
c000df1d:	e8 e4 eb ff ff       	call   c000cb06 <Device::Device(char const*)>
c000df22:	83 c4 10             	add    esp,0x10
c000df25:	ba 58 1e 02 c0       	mov    edx,0xc0021e58
c000df2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df2e:	89 10                	mov    DWORD PTR [eax],edx
c000df30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df34:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df3e:	90                   	nop
c000df3f:	83 c4 0c             	add    esp,0xc
c000df42:	c3                   	ret    
c000df43:	90                   	nop

c000df44 <NIC::~NIC()>:
c000df44:	83 ec 0c             	sub    esp,0xc
c000df47:	ba 58 1e 02 c0       	mov    edx,0xc0021e58
c000df4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df50:	89 10                	mov    DWORD PTR [eax],edx
c000df52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df56:	83 ec 0c             	sub    esp,0xc
c000df59:	50                   	push   eax
c000df5a:	e8 47 e9 ff ff       	call   c000c8a6 <Device::~Device()>
c000df5f:	83 c4 10             	add    esp,0x10
c000df62:	90                   	nop
c000df63:	83 c4 0c             	add    esp,0xc
c000df66:	c3                   	ret    
c000df67:	90                   	nop

c000df68 <NIC::~NIC()>:
c000df68:	83 ec 0c             	sub    esp,0xc
c000df6b:	83 ec 0c             	sub    esp,0xc
c000df6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df72:	e8 cd ff ff ff       	call   c000df44 <NIC::~NIC()>
c000df77:	83 c4 10             	add    esp,0x10
c000df7a:	83 ec 08             	sub    esp,0x8
c000df7d:	68 58 01 00 00       	push   0x158
c000df82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df86:	e8 85 c8 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000df8b:	83 c4 10             	add    esp,0x10
c000df8e:	83 c4 0c             	add    esp,0xc
c000df91:	c3                   	ret    

c000df92 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000df92:	55                   	push   ebp
c000df93:	57                   	push   edi
c000df94:	56                   	push   esi
c000df95:	53                   	push   ebx
c000df96:	81 ec 28 01 00 00    	sub    esp,0x128
c000df9c:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dfa3:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dfaa:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dfb1:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dfb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfbc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfc0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfc7:	e8 36 ec ff ff       	call   c000cc02 <Device::getName()>
c000dfcc:	5a                   	pop    edx
c000dfcd:	59                   	pop    ecx
c000dfce:	50                   	push   eax
c000dfcf:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dfd3:	55                   	push   ebp
c000dfd4:	e8 77 26 ff ff       	call   c0000650 <strcpy>
c000dfd9:	5b                   	pop    ebx
c000dfda:	58                   	pop    eax
c000dfdb:	68 84 1e 02 c0       	push   0xc0021e84
c000dfe0:	55                   	push   ebp
c000dfe1:	e8 8a 28 ff ff       	call   c0000870 <strcat>
c000dfe6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dfed:	e8 e5 9a ff ff       	call   c0007ad7 <malloc>
c000dff2:	83 c4 0c             	add    esp,0xc
c000dff5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dff9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dffd:	89 c3                	mov    ebx,eax
c000dfff:	57                   	push   edi
c000e000:	56                   	push   esi
c000e001:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e008:	55                   	push   ebp
c000e009:	50                   	push   eax
c000e00a:	e8 57 fb ff ff       	call   c000db66 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e00f:	83 c4 14             	add    esp,0x14
c000e012:	53                   	push   ebx
c000e013:	e8 0e fc ff ff       	call   c000dc26 <LogicalDisk::assignDriveLetter()>
c000e018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e01b:	e8 c0 fc ff ff       	call   c000dce0 <LogicalDisk::mount()>
c000e020:	58                   	pop    eax
c000e021:	5a                   	pop    edx
c000e022:	53                   	push   ebx
c000e023:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e02a:	e8 75 e9 ff ff       	call   c000c9a4 <Device::addChild(Device*)>
c000e02f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e035:	5b                   	pop    ebx
c000e036:	5e                   	pop    esi
c000e037:	5f                   	pop    edi
c000e038:	5d                   	pop    ebp
c000e039:	c3                   	ret    

c000e03a <createPartitionsForDisk(PhysicalDisk*)>:
c000e03a:	55                   	push   ebp
c000e03b:	57                   	push   edi
c000e03c:	56                   	push   esi
c000e03d:	53                   	push   ebx
c000e03e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e044:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e04b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e051:	3d 00 02 00 00       	cmp    eax,0x200
c000e056:	74 27                	je     c000e07f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e058:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e05e:	83 ec 10             	sub    esp,0x10
c000e061:	99                   	cdq    
c000e062:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e068:	52                   	push   edx
c000e069:	50                   	push   eax
c000e06a:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e06e:	c1 e6 0a             	shl    esi,0xa
c000e071:	89 fd                	mov    ebp,edi
c000e073:	55                   	push   ebp
c000e074:	56                   	push   esi
c000e075:	e8 76 17 01 00       	call   c001f7f0 <__udivdi3>
c000e07a:	e9 b9 00 00 00       	jmp    c000e138 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e07f:	83 ec 0c             	sub    esp,0xc
c000e082:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e084:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e088:	56                   	push   esi
c000e089:	6a 01                	push   0x1
c000e08b:	6a 00                	push   0x0
c000e08d:	6a 00                	push   0x0
c000e08f:	53                   	push   ebx
c000e090:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e093:	83 c4 20             	add    esp,0x20
c000e096:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e09e:	75 0a                	jne    c000e0aa <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0a0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e0a8:	74 2c                	je     c000e0d6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e0aa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0b0:	83 ec 10             	sub    esp,0x10
c000e0b3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0b9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0bf:	89 f7                	mov    edi,esi
c000e0c1:	c1 ff 1f             	sar    edi,0x1f
c000e0c4:	57                   	push   edi
c000e0c5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0c9:	56                   	push   esi
c000e0ca:	c1 e0 0a             	shl    eax,0xa
c000e0cd:	52                   	push   edx
c000e0ce:	50                   	push   eax
c000e0cf:	e8 1c 17 01 00       	call   c001f7f0 <__udivdi3>
c000e0d4:	eb 62                	jmp    c000e138 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0d6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e0dd:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e0e4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e0eb:	89 cf                	mov    edi,ecx
c000e0ed:	83 e2 7f             	and    edx,0x7f
c000e0f0:	83 e7 7f             	and    edi,0x7f
c000e0f3:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e0f6:	83 e0 7f             	and    eax,0x7f
c000e0f9:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e0fc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e103:	83 e0 7f             	and    eax,0x7f
c000e106:	01 d0                	add    eax,edx
c000e108:	84 c0                	test   al,al
c000e10a:	89 c5                	mov    ebp,eax
c000e10c:	74 41                	je     c000e14f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e10e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e114:	83 ec 10             	sub    esp,0x10
c000e117:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e11d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e123:	89 f7                	mov    edi,esi
c000e125:	c1 ff 1f             	sar    edi,0x1f
c000e128:	57                   	push   edi
c000e129:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e12d:	56                   	push   esi
c000e12e:	c1 e0 0a             	shl    eax,0xa
c000e131:	52                   	push   edx
c000e132:	50                   	push   eax
c000e133:	e8 b8 16 01 00       	call   c001f7f0 <__udivdi3>
c000e138:	83 c4 14             	add    esp,0x14
c000e13b:	52                   	push   edx
c000e13c:	50                   	push   eax
c000e13d:	6a 00                	push   0x0
c000e13f:	6a 00                	push   0x0
c000e141:	53                   	push   ebx
c000e142:	e8 4b fe ff ff       	call   c000df92 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e147:	83 c4 20             	add    esp,0x20
c000e14a:	e9 73 01 00 00       	jmp    c000e2c2 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e14f:	89 f0                	mov    eax,esi
c000e151:	31 c9                	xor    ecx,ecx
c000e153:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e15a:	75 02                	jne    c000e15e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e15c:	89 cd                	mov    ebp,ecx
c000e15e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e166:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e16d:	83 c0 10             	add    eax,0x10
c000e170:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e178:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e17f:	c1 e2 08             	shl    edx,0x8
c000e182:	c1 e6 10             	shl    esi,0x10
c000e185:	09 f2                	or     edx,esi
c000e187:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e18e:	09 f2                	or     edx,esi
c000e190:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e197:	c1 e6 18             	shl    esi,0x18
c000e19a:	09 f2                	or     edx,esi
c000e19c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1a3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e1a7:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1ae:	c1 e6 10             	shl    esi,0x10
c000e1b1:	c1 e2 08             	shl    edx,0x8
c000e1b4:	09 f2                	or     edx,esi
c000e1b6:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e1bd:	09 f2                	or     edx,esi
c000e1bf:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e1c6:	c1 e6 18             	shl    esi,0x18
c000e1c9:	09 f2                	or     edx,esi
c000e1cb:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e1cf:	41                   	inc    ecx
c000e1d0:	83 f9 04             	cmp    ecx,0x4
c000e1d3:	0f 85 7a ff ff ff    	jne    c000e153 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e1d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1dd:	83 f0 01             	xor    eax,0x1
c000e1e0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e1e4:	75 4f                	jne    c000e235 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1ea:	83 f0 01             	xor    eax,0x1
c000e1ed:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e1f1:	75 42                	jne    c000e235 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1f3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e1f9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e201:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e207:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e20f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e215:	89 f7                	mov    edi,esi
c000e217:	c1 ff 1f             	sar    edi,0x1f
c000e21a:	57                   	push   edi
c000e21b:	56                   	push   esi
c000e21c:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e220:	52                   	push   edx
c000e221:	c1 e0 0a             	shl    eax,0xa
c000e224:	50                   	push   eax
c000e225:	e8 c6 15 01 00       	call   c001f7f0 <__udivdi3>
c000e22a:	83 c4 10             	add    esp,0x10
c000e22d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e231:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e235:	89 e8                	mov    eax,ebp
c000e237:	0f b6 e8             	movzx  ebp,al
c000e23a:	85 ed                	test   ebp,ebp
c000e23c:	74 50                	je     c000e28e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e23e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e242:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e246:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e24a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e24e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e252:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e256:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e25a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e25e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e262:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e266:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e26a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e26e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e272:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e276:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e27a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e27e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e282:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e286:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e28a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e28e:	31 ed                	xor    ebp,ebp
c000e290:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e294:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e298:	89 f8                	mov    eax,edi
c000e29a:	09 f0                	or     eax,esi
c000e29c:	74 1e                	je     c000e2bc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e29e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2a2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2a6:	89 d1                	mov    ecx,edx
c000e2a8:	09 c1                	or     ecx,eax
c000e2aa:	74 10                	je     c000e2bc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2ac:	83 ec 0c             	sub    esp,0xc
c000e2af:	57                   	push   edi
c000e2b0:	56                   	push   esi
c000e2b1:	52                   	push   edx
c000e2b2:	50                   	push   eax
c000e2b3:	53                   	push   ebx
c000e2b4:	e8 d9 fc ff ff       	call   c000df92 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2b9:	83 c4 20             	add    esp,0x20
c000e2bc:	45                   	inc    ebp
c000e2bd:	83 fd 04             	cmp    ebp,0x4
c000e2c0:	75 ce                	jne    c000e290 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e2c2:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e2c8:	5b                   	pop    ebx
c000e2c9:	5e                   	pop    esi
c000e2ca:	5f                   	pop    edi
c000e2cb:	5d                   	pop    ebp
c000e2cc:	c3                   	ret    
c000e2cd:	66 90                	xchg   ax,ax
c000e2cf:	90                   	nop

c000e2d0 <Serial::Serial(char const*)>:
c000e2d0:	83 ec 0c             	sub    esp,0xc
c000e2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d7:	83 ec 08             	sub    esp,0x8
c000e2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2de:	50                   	push   eax
c000e2df:	e8 22 e8 ff ff       	call   c000cb06 <Device::Device(char const*)>
c000e2e4:	83 c4 10             	add    esp,0x10
c000e2e7:	ba 98 1e 02 c0       	mov    edx,0xc0021e98
c000e2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f0:	89 10                	mov    DWORD PTR [eax],edx
c000e2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e300:	90                   	nop
c000e301:	83 c4 0c             	add    esp,0xc
c000e304:	c3                   	ret    
c000e305:	90                   	nop
c000e306:	66 90                	xchg   ax,ax

c000e308 <Serial::~Serial()>:
c000e308:	83 ec 0c             	sub    esp,0xc
c000e30b:	ba 98 1e 02 c0       	mov    edx,0xc0021e98
c000e310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e314:	89 10                	mov    DWORD PTR [eax],edx
c000e316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31a:	83 ec 0c             	sub    esp,0xc
c000e31d:	50                   	push   eax
c000e31e:	e8 83 e5 ff ff       	call   c000c8a6 <Device::~Device()>
c000e323:	83 c4 10             	add    esp,0x10
c000e326:	90                   	nop
c000e327:	83 c4 0c             	add    esp,0xc
c000e32a:	c3                   	ret    
c000e32b:	90                   	nop

c000e32c <Serial::~Serial()>:
c000e32c:	83 ec 0c             	sub    esp,0xc
c000e32f:	83 ec 0c             	sub    esp,0xc
c000e332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e336:	e8 cd ff ff ff       	call   c000e308 <Serial::~Serial()>
c000e33b:	83 c4 10             	add    esp,0x10
c000e33e:	83 ec 08             	sub    esp,0x8
c000e341:	68 58 01 00 00       	push   0x158
c000e346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e34a:	e8 c1 c4 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000e34f:	83 c4 10             	add    esp,0x10
c000e352:	83 c4 0c             	add    esp,0xc
c000e355:	c3                   	ret    
c000e356:	66 90                	xchg   ax,ax

c000e358 <Timer::Timer(char const*)>:
c000e358:	83 ec 0c             	sub    esp,0xc
c000e35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e35f:	83 ec 08             	sub    esp,0x8
c000e362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e366:	50                   	push   eax
c000e367:	e8 9a e7 ff ff       	call   c000cb06 <Device::Device(char const*)>
c000e36c:	83 c4 10             	add    esp,0x10
c000e36f:	ba dc 1e 02 c0       	mov    edx,0xc0021edc
c000e374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e378:	89 10                	mov    DWORD PTR [eax],edx
c000e37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e388:	90                   	nop
c000e389:	83 c4 0c             	add    esp,0xc
c000e38c:	c3                   	ret    
c000e38d:	90                   	nop
c000e38e:	66 90                	xchg   ax,ax

c000e390 <Timer::~Timer()>:
c000e390:	83 ec 0c             	sub    esp,0xc
c000e393:	ba dc 1e 02 c0       	mov    edx,0xc0021edc
c000e398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39c:	89 10                	mov    DWORD PTR [eax],edx
c000e39e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a2:	83 ec 0c             	sub    esp,0xc
c000e3a5:	50                   	push   eax
c000e3a6:	e8 fb e4 ff ff       	call   c000c8a6 <Device::~Device()>
c000e3ab:	83 c4 10             	add    esp,0x10
c000e3ae:	90                   	nop
c000e3af:	83 c4 0c             	add    esp,0xc
c000e3b2:	c3                   	ret    
c000e3b3:	90                   	nop

c000e3b4 <Timer::~Timer()>:
c000e3b4:	83 ec 0c             	sub    esp,0xc
c000e3b7:	83 ec 0c             	sub    esp,0xc
c000e3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3be:	e8 cd ff ff ff       	call   c000e390 <Timer::~Timer()>
c000e3c3:	83 c4 10             	add    esp,0x10
c000e3c6:	83 ec 08             	sub    esp,0x8
c000e3c9:	68 5c 01 00 00       	push   0x15c
c000e3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d2:	e8 39 c4 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000e3d7:	83 c4 10             	add    esp,0x10
c000e3da:	83 c4 0c             	add    esp,0xc
c000e3dd:	c3                   	ret    

c000e3de <Timer::read()>:
c000e3de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e3e8:	c3                   	ret    

c000e3e9 <setupTimer(int)>:
c000e3e9:	53                   	push   ebx
c000e3ea:	83 ec 14             	sub    esp,0x14
c000e3ed:	68 5c 01 00 00       	push   0x15c
c000e3f2:	e8 e0 96 ff ff       	call   c0007ad7 <malloc>
c000e3f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3fa:	89 c3                	mov    ebx,eax
c000e3fc:	e8 57 0c 01 00       	call   c001f058 <PIT::PIT()>
c000e401:	58                   	pop    eax
c000e402:	5a                   	pop    edx
c000e403:	53                   	push   ebx
c000e404:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e40a:	e8 95 e5 ff ff       	call   c000c9a4 <Device::addChild(Device*)>
c000e40f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e411:	6a 00                	push   0x0
c000e413:	6a 00                	push   0x0
c000e415:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e419:	53                   	push   ebx
c000e41a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e41d:	83 c4 28             	add    esp,0x28
c000e420:	89 d8                	mov    eax,ebx
c000e422:	5b                   	pop    ebx
c000e423:	c3                   	ret    

c000e424 <timerHandler(unsigned int)>:
c000e424:	56                   	push   esi
c000e425:	53                   	push   ebx
c000e426:	51                   	push   ecx
c000e427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e42b:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e431:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e438:	0f 84 4a 01 00 00    	je     c000e588 <timerHandler(unsigned int)+0x164>
c000e43e:	fa                   	cli    
c000e43f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e445:	83 ec 0c             	sub    esp,0xc
c000e448:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e44d:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e453:	e8 68 19 01 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e458:	83 c4 10             	add    esp,0x10
c000e45b:	84 c0                	test   al,al
c000e45d:	0f 85 a1 00 00 00    	jne    c000e504 <timerHandler(unsigned int)+0xe0>
c000e463:	83 ec 0c             	sub    esp,0xc
c000e466:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e46b:	e8 6c 19 01 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e470:	83 c4 10             	add    esp,0x10
c000e473:	89 c6                	mov    esi,eax
c000e475:	8d 76 00             	lea    esi,[esi+0x0]
c000e478:	83 ec 0c             	sub    esp,0xc
c000e47b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e480:	e8 57 19 01 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e485:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e48c:	89 c3                	mov    ebx,eax
c000e48e:	e8 51 19 01 00       	call   c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e493:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e496:	83 c4 10             	add    esp,0x10
c000e499:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e49f:	77 23                	ja     c000e4c4 <timerHandler(unsigned int)+0xa0>
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	53                   	push   ebx
c000e4a5:	e8 82 81 00 00       	call   c001662c <unblockTask(ThreadControlBlock*)>
c000e4aa:	83 c4 10             	add    esp,0x10
c000e4ad:	39 de                	cmp    esi,ebx
c000e4af:	75 27                	jne    c000e4d8 <timerHandler(unsigned int)+0xb4>
c000e4b1:	83 ec 0c             	sub    esp,0xc
c000e4b4:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4b9:	e8 1e 19 01 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4be:	89 c6                	mov    esi,eax
c000e4c0:	eb 12                	jmp    c000e4d4 <timerHandler(unsigned int)+0xb0>
c000e4c2:	66 90                	xchg   ax,ax
c000e4c4:	52                   	push   edx
c000e4c5:	52                   	push   edx
c000e4c6:	53                   	push   ebx
c000e4c7:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4cc:	e8 cf 19 01 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e4d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4d4:	83 c4 10             	add    esp,0x10
c000e4d7:	90                   	nop
c000e4d8:	83 ec 0c             	sub    esp,0xc
c000e4db:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4e0:	e8 db 18 01 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4e5:	83 c4 10             	add    esp,0x10
c000e4e8:	84 c0                	test   al,al
c000e4ea:	75 18                	jne    c000e504 <timerHandler(unsigned int)+0xe0>
c000e4ec:	83 ec 0c             	sub    esp,0xc
c000e4ef:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4f4:	e8 e3 18 01 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4f9:	83 c4 10             	add    esp,0x10
c000e4fc:	39 f0                	cmp    eax,esi
c000e4fe:	0f 85 74 ff ff ff    	jne    c000e478 <timerHandler(unsigned int)+0x54>
c000e504:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e509:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e50d:	74 41                	je     c000e550 <timerHandler(unsigned int)+0x12c>
c000e50f:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e516:	74 38                	je     c000e550 <timerHandler(unsigned int)+0x12c>
c000e518:	fa                   	cli    
c000e519:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e51f:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e524:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e52a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e52d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e533:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e536:	72 08                	jb     c000e540 <timerHandler(unsigned int)+0x11c>
c000e538:	e8 f7 7b 00 00       	call   c0016134 <schedule()>
c000e53d:	8d 76 00             	lea    esi,[esi+0x0]
c000e540:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e545:	48                   	dec    eax
c000e546:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e54b:	75 03                	jne    c000e550 <timerHandler(unsigned int)+0x12c>
c000e54d:	fb                   	sti    
c000e54e:	66 90                	xchg   ax,ax
c000e550:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e555:	48                   	dec    eax
c000e556:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e55b:	75 1b                	jne    c000e578 <timerHandler(unsigned int)+0x154>
c000e55d:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e564:	74 12                	je     c000e578 <timerHandler(unsigned int)+0x154>
c000e566:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e570:	e8 bf 7b 00 00       	call   c0016134 <schedule()>
c000e575:	8d 76 00             	lea    esi,[esi+0x0]
c000e578:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e57d:	48                   	dec    eax
c000e57e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e583:	75 03                	jne    c000e588 <timerHandler(unsigned int)+0x164>
c000e585:	fb                   	sti    
c000e586:	66 90                	xchg   ax,ax
c000e588:	58                   	pop    eax
c000e589:	5b                   	pop    ebx
c000e58a:	5e                   	pop    esi
c000e58b:	c3                   	ret    

c000e58c <VCache::VCache(PhysicalDisk*)>:
c000e58c:	53                   	push   ebx
c000e58d:	83 ec 18             	sub    esp,0x18
c000e590:	ba 0c 1f 02 c0       	mov    edx,0xc0021f0c
c000e595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e599:	89 10                	mov    DWORD PTR [eax],edx
c000e59b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e59f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e5a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5aa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e5b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e5bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e5c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e5ce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e5d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e5e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e5e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e5f3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e5fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e606:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e60a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e616:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e61d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e625:	83 ec 0c             	sub    esp,0xc
c000e628:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e62c:	e8 a6 94 ff ff       	call   c0007ad7 <malloc>
c000e631:	83 c4 10             	add    esp,0x10
c000e634:	89 c3                	mov    ebx,eax
c000e636:	83 ec 0c             	sub    esp,0xc
c000e639:	53                   	push   ebx
c000e63a:	e8 95 78 00 00       	call   c0015ed4 <Mutex::Mutex()>
c000e63f:	83 c4 10             	add    esp,0x10
c000e642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e646:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e64d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e651:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e658:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e65f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e663:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e66d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e670:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e674:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e67a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e680:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e684:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e687:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e68a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e692:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e696:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e69c:	05 00 02 00 00       	add    eax,0x200
c000e6a1:	c1 e0 03             	shl    eax,0x3
c000e6a4:	83 ec 0c             	sub    esp,0xc
c000e6a7:	50                   	push   eax
c000e6a8:	e8 2a 94 ff ff       	call   c0007ad7 <malloc>
c000e6ad:	83 c4 10             	add    esp,0x10
c000e6b0:	89 c2                	mov    edx,eax
c000e6b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e6b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6bd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e6cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6d6:	89 d0                	mov    eax,edx
c000e6d8:	c1 e0 02             	shl    eax,0x2
c000e6db:	01 d0                	add    eax,edx
c000e6dd:	c1 e0 04             	shl    eax,0x4
c000e6e0:	83 ec 0c             	sub    esp,0xc
c000e6e3:	50                   	push   eax
c000e6e4:	e8 ee 93 ff ff       	call   c0007ad7 <malloc>
c000e6e9:	83 c4 10             	add    esp,0x10
c000e6ec:	89 c2                	mov    edx,eax
c000e6ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6f2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e6f5:	90                   	nop
c000e6f6:	83 c4 18             	add    esp,0x18
c000e6f9:	5b                   	pop    ebx
c000e6fa:	c3                   	ret    
c000e6fb:	90                   	nop

c000e6fc <VCache::invalidateReadBuffer()>:
c000e6fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e700:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e706:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e70a:	c3                   	ret    
c000e70b:	90                   	nop

c000e70c <VCache::writeWriteBuffer()>:
c000e70c:	53                   	push   ebx
c000e70d:	83 ec 08             	sub    esp,0x8
c000e710:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e714:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e718:	74 1e                	je     c000e738 <VCache::writeWriteBuffer()+0x2c>
c000e71a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e71d:	83 ec 0c             	sub    esp,0xc
c000e720:	8b 10                	mov    edx,DWORD PTR [eax]
c000e722:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e725:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e728:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e72b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e72e:	50                   	push   eax
c000e72f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e732:	83 c4 20             	add    esp,0x20
c000e735:	8d 76 00             	lea    esi,[esi+0x0]
c000e738:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e73f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e746:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e74a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e751:	83 c4 08             	add    esp,0x8
c000e754:	5b                   	pop    ebx
c000e755:	c3                   	ret    
c000e756:	66 90                	xchg   ax,ax

c000e758 <VCache::~VCache()>:
c000e758:	83 ec 0c             	sub    esp,0xc
c000e75b:	ba 0c 1f 02 c0       	mov    edx,0xc0021f0c
c000e760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e764:	89 10                	mov    DWORD PTR [eax],edx
c000e766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e76d:	0f b6 c0             	movzx  eax,al
c000e770:	85 c0                	test   eax,eax
c000e772:	74 10                	je     c000e784 <VCache::~VCache()+0x2c>
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e77b:	e8 8c ff ff ff       	call   c000e70c <VCache::writeWriteBuffer()>
c000e780:	83 c4 10             	add    esp,0x10
c000e783:	90                   	nop
c000e784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e788:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e78b:	83 ec 0c             	sub    esp,0xc
c000e78e:	50                   	push   eax
c000e78f:	e8 53 93 ff ff       	call   c0007ae7 <free>
c000e794:	83 c4 10             	add    esp,0x10
c000e797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e79e:	83 ec 0c             	sub    esp,0xc
c000e7a1:	50                   	push   eax
c000e7a2:	e8 40 93 ff ff       	call   c0007ae7 <free>
c000e7a7:	83 c4 10             	add    esp,0x10
c000e7aa:	90                   	nop
c000e7ab:	83 c4 0c             	add    esp,0xc
c000e7ae:	c3                   	ret    
c000e7af:	90                   	nop

c000e7b0 <VCache::~VCache()>:
c000e7b0:	83 ec 0c             	sub    esp,0xc
c000e7b3:	83 ec 0c             	sub    esp,0xc
c000e7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ba:	e8 99 ff ff ff       	call   c000e758 <VCache::~VCache()>
c000e7bf:	83 c4 10             	add    esp,0x10
c000e7c2:	83 ec 08             	sub    esp,0x8
c000e7c5:	6a 44                	push   0x44
c000e7c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7cb:	e8 40 c0 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000e7d0:	83 c4 10             	add    esp,0x10
c000e7d3:	83 c4 0c             	add    esp,0xc
c000e7d6:	c3                   	ret    
c000e7d7:	90                   	nop

c000e7d8 <VCache::write(unsigned long long, int, void*)>:
c000e7d8:	55                   	push   ebp
c000e7d9:	57                   	push   edi
c000e7da:	56                   	push   esi
c000e7db:	53                   	push   ebx
c000e7dc:	83 ec 1c             	sub    esp,0x1c
c000e7df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e7e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7e7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e7eb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e7ef:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e7f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7f7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e7fb:	74 0f                	je     c000e80c <VCache::write(unsigned long long, int, void*)+0x34>
c000e7fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e801:	53                   	push   ebx
c000e802:	e8 f5 fe ff ff       	call   c000e6fc <VCache::invalidateReadBuffer()>
c000e807:	58                   	pop    eax
c000e808:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e80c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e810:	74 66                	je     c000e878 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e812:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e815:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e819:	99                   	cdq    
c000e81a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e81d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e820:	89 c6                	mov    esi,eax
c000e822:	31 ce                	xor    esi,ecx
c000e824:	89 d0                	mov    eax,edx
c000e826:	31 e8                	xor    eax,ebp
c000e828:	09 c6                	or     esi,eax
c000e82a:	75 38                	jne    c000e864 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e82c:	83 ff 01             	cmp    edi,0x1
c000e82f:	75 33                	jne    c000e864 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e831:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e834:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e838:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e83c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e842:	0f af f9             	imul   edi,ecx
c000e845:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e848:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e84a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e84d:	40                   	inc    eax
c000e84e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e851:	83 f8 50             	cmp    eax,0x50
c000e854:	75 72                	jne    c000e8c8 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e856:	83 ec 0c             	sub    esp,0xc
c000e859:	53                   	push   ebx
c000e85a:	e8 ad fe ff ff       	call   c000e70c <VCache::writeWriteBuffer()>
c000e85f:	83 c4 10             	add    esp,0x10
c000e862:	eb 64                	jmp    c000e8c8 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e864:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e868:	83 ec 0c             	sub    esp,0xc
c000e86b:	53                   	push   ebx
c000e86c:	e8 9b fe ff ff       	call   c000e70c <VCache::writeWriteBuffer()>
c000e871:	83 c4 10             	add    esp,0x10
c000e874:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e878:	83 ff 4f             	cmp    edi,0x4f
c000e87b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e87e:	7f 20                	jg     c000e8a0 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e880:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e883:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e887:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e88a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e88d:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e890:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e894:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e89a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e89c:	eb 2a                	jmp    c000e8c8 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e89e:	66 90                	xchg   ax,ax
c000e8a0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8a6:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e8aa:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8ae:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e8b2:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e8b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8ba:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e8bd:	83 c4 1c             	add    esp,0x1c
c000e8c0:	5b                   	pop    ebx
c000e8c1:	5e                   	pop    esi
c000e8c2:	5f                   	pop    edi
c000e8c3:	5d                   	pop    ebp
c000e8c4:	ff e0                	jmp    eax
c000e8c6:	66 90                	xchg   ax,ax
c000e8c8:	83 c4 1c             	add    esp,0x1c
c000e8cb:	31 c0                	xor    eax,eax
c000e8cd:	5b                   	pop    ebx
c000e8ce:	5e                   	pop    esi
c000e8cf:	5f                   	pop    edi
c000e8d0:	5d                   	pop    ebp
c000e8d1:	c3                   	ret    

c000e8d2 <VCache::read(unsigned long long, int, void*)>:
c000e8d2:	55                   	push   ebp
c000e8d3:	57                   	push   edi
c000e8d4:	56                   	push   esi
c000e8d5:	53                   	push   ebx
c000e8d6:	83 ec 1c             	sub    esp,0x1c
c000e8d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8e1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e8e5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8e9:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e8ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e8f1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e8f5:	74 0d                	je     c000e904 <VCache::read(unsigned long long, int, void*)+0x32>
c000e8f7:	83 ec 0c             	sub    esp,0xc
c000e8fa:	57                   	push   edi
c000e8fb:	e8 0c fe ff ff       	call   c000e70c <VCache::writeWriteBuffer()>
c000e900:	83 c4 10             	add    esp,0x10
c000e903:	90                   	nop
c000e904:	83 fd 01             	cmp    ebp,0x1
c000e907:	0f 85 93 00 00 00    	jne    c000e9a0 <VCache::read(unsigned long long, int, void*)+0xce>
c000e90d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e910:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e917:	89 04 24             	mov    DWORD PTR [esp],eax
c000e91a:	0f 85 80 00 00 00    	jne    c000e9a0 <VCache::read(unsigned long long, int, void*)+0xce>
c000e920:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e923:	89 cd                	mov    ebp,ecx
c000e925:	f7 dd                	neg    ebp
c000e927:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e92b:	89 e8                	mov    eax,ebp
c000e92d:	21 dd                	and    ebp,ebx
c000e92f:	c1 f8 1f             	sar    eax,0x1f
c000e932:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e936:	89 e8                	mov    eax,ebp
c000e938:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e93c:	21 f5                	and    ebp,esi
c000e93e:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e942:	89 ea                	mov    edx,ebp
c000e944:	74 2e                	je     c000e974 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e946:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e949:	75 29                	jne    c000e974 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e94b:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e94e:	75 24                	jne    c000e974 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e950:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e953:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e959:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e95c:	8d 70 ff             	lea    esi,[eax-0x1]
c000e95f:	21 f3                	and    ebx,esi
c000e961:	0f af d9             	imul   ebx,ecx
c000e964:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e967:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e96b:	89 de                	mov    esi,ebx
c000e96d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e96f:	31 c0                	xor    eax,eax
c000e971:	eb 61                	jmp    c000e9d4 <VCache::read(unsigned long long, int, void*)+0x102>
c000e973:	90                   	nop
c000e974:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e978:	83 ec 0c             	sub    esp,0xc
c000e97b:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e97e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e982:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e985:	8b 36                	mov    esi,DWORD PTR [esi]
c000e987:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e98a:	51                   	push   ecx
c000e98b:	52                   	push   edx
c000e98c:	50                   	push   eax
c000e98d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e991:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e994:	83 c4 20             	add    esp,0x20
c000e997:	85 c0                	test   eax,eax
c000e999:	75 39                	jne    c000e9d4 <VCache::read(unsigned long long, int, void*)+0x102>
c000e99b:	eb b3                	jmp    c000e950 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e99d:	8d 76 00             	lea    esi,[esi+0x0]
c000e9a0:	83 ec 0c             	sub    esp,0xc
c000e9a3:	57                   	push   edi
c000e9a4:	e8 53 fd ff ff       	call   c000e6fc <VCache::invalidateReadBuffer()>
c000e9a9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9b0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9b2:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e9b6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e9ba:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e9be:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e9c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9c6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e9c9:	83 c4 2c             	add    esp,0x2c
c000e9cc:	5b                   	pop    ebx
c000e9cd:	5e                   	pop    esi
c000e9ce:	5f                   	pop    edi
c000e9cf:	5d                   	pop    ebp
c000e9d0:	ff e0                	jmp    eax
c000e9d2:	66 90                	xchg   ax,ax
c000e9d4:	83 c4 1c             	add    esp,0x1c
c000e9d7:	5b                   	pop    ebx
c000e9d8:	5e                   	pop    esi
c000e9d9:	5f                   	pop    edi
c000e9da:	5d                   	pop    ebp
c000e9db:	c3                   	ret    

c000e9dc <Video::putrect(int, int, int, int, unsigned int)>:
c000e9dc:	55                   	push   ebp
c000e9dd:	57                   	push   edi
c000e9de:	56                   	push   esi
c000e9df:	53                   	push   ebx
c000e9e0:	83 ec 1c             	sub    esp,0x1c
c000e9e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e9e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9eb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9ef:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e9f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e9f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9fb:	01 df                	add    edi,ebx
c000e9fd:	39 fb                	cmp    ebx,edi
c000e9ff:	7d 1f                	jge    c000ea20 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea01:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea05:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea09:	7d 12                	jge    c000ea1d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea0b:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea11:	53                   	push   ebx
c000ea12:	55                   	push   ebp
c000ea13:	45                   	inc    ebp
c000ea14:	56                   	push   esi
c000ea15:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea18:	83 c4 10             	add    esp,0x10
c000ea1b:	eb e8                	jmp    c000ea05 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea1d:	43                   	inc    ebx
c000ea1e:	eb dd                	jmp    c000e9fd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea20:	83 c4 1c             	add    esp,0x1c
c000ea23:	5b                   	pop    ebx
c000ea24:	5e                   	pop    esi
c000ea25:	5f                   	pop    edi
c000ea26:	5d                   	pop    ebp
c000ea27:	c3                   	ret    

c000ea28 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea28:	55                   	push   ebp
c000ea29:	57                   	push   edi
c000ea2a:	31 ff                	xor    edi,edi
c000ea2c:	56                   	push   esi
c000ea2d:	53                   	push   ebx
c000ea2e:	83 ec 1c             	sub    esp,0x1c
c000ea31:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea35:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea39:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea40:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea49:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea4d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea51:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea54:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea58:	01 f9                	add    ecx,edi
c000ea5a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea5e:	7d 2f                	jge    c000ea8f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea60:	31 f6                	xor    esi,esi
c000ea62:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea66:	01 f2                	add    edx,esi
c000ea68:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea6c:	7d 1a                	jge    c000ea88 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea6e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea71:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea74:	46                   	inc    esi
c000ea75:	51                   	push   ecx
c000ea76:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea7a:	52                   	push   edx
c000ea7b:	55                   	push   ebp
c000ea7c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea7f:	83 c4 10             	add    esp,0x10
c000ea82:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea86:	eb da                	jmp    c000ea62 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea88:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ea8c:	47                   	inc    edi
c000ea8d:	eb c5                	jmp    c000ea54 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ea8f:	83 c4 1c             	add    esp,0x1c
c000ea92:	5b                   	pop    ebx
c000ea93:	5e                   	pop    esi
c000ea94:	5f                   	pop    edi
c000ea95:	5d                   	pop    ebp
c000ea96:	c3                   	ret    
c000ea97:	90                   	nop

c000ea98 <Video::blit(unsigned int*, int, int, int, int)>:
c000ea98:	55                   	push   ebp
c000ea99:	ba 00 00 00 00       	mov    edx,0x0
c000ea9e:	57                   	push   edi
c000ea9f:	56                   	push   esi
c000eaa0:	53                   	push   ebx
c000eaa1:	83 ec 1c             	sub    esp,0x1c
c000eaa4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaa8:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000eaac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eab0:	85 c0                	test   eax,eax
c000eab2:	0f 49 d0             	cmovns edx,eax
c000eab5:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000eabc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eac0:	89 eb                	mov    ebx,ebp
c000eac2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000eac6:	01 ea                	add    edx,ebp
c000eac8:	39 da                	cmp    edx,ebx
c000eaca:	7e 54                	jle    c000eb20 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eacc:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ead2:	7c 4c                	jl     c000eb20 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ead4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ead8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eadc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eae0:	01 c1                	add    ecx,eax
c000eae2:	39 f9                	cmp    ecx,edi
c000eae4:	7e 2f                	jle    c000eb15 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000eae6:	83 c2 04             	add    edx,0x4
c000eae9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eaef:	7c 21                	jl     c000eb12 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000eaf1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eaf5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eaf7:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000eafa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000eafe:	55                   	push   ebp
c000eaff:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb03:	56                   	push   esi
c000eb04:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb07:	83 c4 10             	add    esp,0x10
c000eb0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb12:	47                   	inc    edi
c000eb13:	eb c7                	jmp    c000eadc <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000eb15:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eb19:	43                   	inc    ebx
c000eb1a:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000eb1e:	eb a2                	jmp    c000eac2 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000eb20:	83 c4 1c             	add    esp,0x1c
c000eb23:	5b                   	pop    ebx
c000eb24:	5e                   	pop    esi
c000eb25:	5f                   	pop    edi
c000eb26:	5d                   	pop    ebp
c000eb27:	c3                   	ret    

c000eb28 <Video::clearScreen(unsigned int)>:
c000eb28:	57                   	push   edi
c000eb29:	56                   	push   esi
c000eb2a:	53                   	push   ebx
c000eb2b:	31 db                	xor    ebx,ebx
c000eb2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb31:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb37:	7e 1f                	jle    c000eb58 <Video::clearScreen(unsigned int)+0x30>
c000eb39:	31 ff                	xor    edi,edi
c000eb3b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb41:	7e 12                	jle    c000eb55 <Video::clearScreen(unsigned int)+0x2d>
c000eb43:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb49:	53                   	push   ebx
c000eb4a:	57                   	push   edi
c000eb4b:	47                   	inc    edi
c000eb4c:	56                   	push   esi
c000eb4d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb50:	83 c4 10             	add    esp,0x10
c000eb53:	eb e6                	jmp    c000eb3b <Video::clearScreen(unsigned int)+0x13>
c000eb55:	43                   	inc    ebx
c000eb56:	eb d9                	jmp    c000eb31 <Video::clearScreen(unsigned int)+0x9>
c000eb58:	5b                   	pop    ebx
c000eb59:	5e                   	pop    esi
c000eb5a:	5f                   	pop    edi
c000eb5b:	c3                   	ret    

c000eb5c <Video::putpixel(int, int, unsigned int)>:
c000eb5c:	c7 44 24 04 14 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021f14
c000eb64:	e9 9e 2a 00 00       	jmp    c0011607 <KePanic(char const*)>
c000eb69:	90                   	nop

c000eb6a <Video::readPixelApprox(int, int)>:
c000eb6a:	83 ec 18             	sub    esp,0x18
c000eb6d:	68 35 1f 02 c0       	push   0xc0021f35
c000eb72:	e8 90 2a 00 00       	call   c0011607 <KePanic(char const*)>
c000eb77:	31 c0                	xor    eax,eax
c000eb79:	83 c4 1c             	add    esp,0x1c
c000eb7c:	c3                   	ret    
c000eb7d:	90                   	nop

c000eb7e <Video::Video(char const*)>:
c000eb7e:	83 ec 0c             	sub    esp,0xc
c000eb81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb85:	83 ec 08             	sub    esp,0x8
c000eb88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb8c:	50                   	push   eax
c000eb8d:	e8 74 df ff ff       	call   c000cb06 <Device::Device(char const*)>
c000eb92:	83 c4 10             	add    esp,0x10
c000eb95:	ba b0 1f 02 c0       	mov    edx,0xc0021fb0
c000eb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb9e:	89 10                	mov    DWORD PTR [eax],edx
c000eba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ebae:	90                   	nop
c000ebaf:	83 c4 0c             	add    esp,0xc
c000ebb2:	c3                   	ret    
c000ebb3:	90                   	nop

c000ebb4 <Video::~Video()>:
c000ebb4:	83 ec 0c             	sub    esp,0xc
c000ebb7:	ba b0 1f 02 c0       	mov    edx,0xc0021fb0
c000ebbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebc0:	89 10                	mov    DWORD PTR [eax],edx
c000ebc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebc6:	83 ec 0c             	sub    esp,0xc
c000ebc9:	50                   	push   eax
c000ebca:	e8 d7 dc ff ff       	call   c000c8a6 <Device::~Device()>
c000ebcf:	83 c4 10             	add    esp,0x10
c000ebd2:	90                   	nop
c000ebd3:	83 c4 0c             	add    esp,0xc
c000ebd6:	c3                   	ret    
c000ebd7:	90                   	nop

c000ebd8 <Video::~Video()>:
c000ebd8:	83 ec 0c             	sub    esp,0xc
c000ebdb:	83 ec 0c             	sub    esp,0xc
c000ebde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebe2:	e8 cd ff ff ff       	call   c000ebb4 <Video::~Video()>
c000ebe7:	83 c4 10             	add    esp,0x10
c000ebea:	83 ec 08             	sub    esp,0x8
c000ebed:	68 64 01 00 00       	push   0x164
c000ebf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebf6:	e8 15 bc ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c000ebfb:	83 c4 10             	add    esp,0x10
c000ebfe:	83 c4 0c             	add    esp,0xc
c000ec01:	c3                   	ret    

c000ec02 <Video::isMonochrome()>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec0c:	c3                   	ret    
c000ec0d:	90                   	nop

c000ec0e <Video::getWidth()>:
c000ec0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec12:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec18:	c3                   	ret    
c000ec19:	90                   	nop

c000ec1a <Video::getHeight()>:
c000ec1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec1e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec24:	c3                   	ret    
c000ec25:	90                   	nop

c000ec26 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec26:	55                   	push   ebp
c000ec27:	57                   	push   edi
c000ec28:	56                   	push   esi
c000ec29:	53                   	push   ebx
c000ec2a:	83 ec 2c             	sub    esp,0x2c
c000ec2d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ec35:	83 f8 01             	cmp    eax,0x1
c000ec38:	19 c9                	sbb    ecx,ecx
c000ec3a:	31 db                	xor    ebx,ebx
c000ec3c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec40:	89 ce                	mov    esi,ecx
c000ec42:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec4a:	f7 d6                	not    esi
c000ec4c:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ec52:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec56:	01 d8                	add    eax,ebx
c000ec58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec5c:	57                   	push   edi
c000ec5d:	e8 b8 ff ff ff       	call   c000ec1a <Video::getHeight()>
c000ec62:	59                   	pop    ecx
c000ec63:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec67:	7e 70                	jle    c000ecd9 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec69:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec6d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ec71:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec78:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec7c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec87:	89 e8                	mov    eax,ebp
c000ec89:	83 c0 20             	add    eax,0x20
c000ec8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec90:	57                   	push   edi
c000ec91:	e8 78 ff ff ff       	call   c000ec0e <Video::getWidth()>
c000ec96:	5a                   	pop    edx
c000ec97:	39 c5                	cmp    ebp,eax
c000ec99:	7d 34                	jge    c000eccf <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ec9b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000eca0:	74 05                	je     c000eca7 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000eca2:	8b 07                	mov    eax,DWORD PTR [edi]
c000eca4:	56                   	push   esi
c000eca5:	eb 0d                	jmp    c000ecb4 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000eca7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ecac:	74 12                	je     c000ecc0 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ecae:	8b 07                	mov    eax,DWORD PTR [edi]
c000ecb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecb4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ecb8:	55                   	push   ebp
c000ecb9:	57                   	push   edi
c000ecba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ecbd:	83 c4 10             	add    esp,0x10
c000ecc0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ecc4:	45                   	inc    ebp
c000ecc5:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ecc9:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000eccd:	75 c1                	jne    c000ec90 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000eccf:	43                   	inc    ebx
c000ecd0:	83 fb 20             	cmp    ebx,0x20
c000ecd3:	0f 85 79 ff ff ff    	jne    c000ec52 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ecd9:	83 c4 2c             	add    esp,0x2c
c000ecdc:	5b                   	pop    ebx
c000ecdd:	5e                   	pop    esi
c000ecde:	5f                   	pop    edi
c000ecdf:	5d                   	pop    ebp
c000ece0:	c3                   	ret    
c000ece1:	90                   	nop

c000ece2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ece2:	55                   	push   ebp
c000ece3:	57                   	push   edi
c000ece4:	56                   	push   esi
c000ece5:	53                   	push   ebx
c000ece6:	83 ec 28             	sub    esp,0x28
c000ece9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eced:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ecf1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ecf5:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ecf9:	c1 e7 08             	shl    edi,0x8
c000ecfc:	01 c7                	add    edi,eax
c000ecfe:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ed02:	c1 e6 08             	shl    esi,0x8
c000ed05:	01 f0                	add    eax,esi
c000ed07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed0f:	0f af c7             	imul   eax,edi
c000ed12:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed19:	50                   	push   eax
c000ed1a:	e8 b8 8d ff ff       	call   c0007ad7 <malloc>
c000ed1f:	83 c4 10             	add    esp,0x10
c000ed22:	85 c0                	test   eax,eax
c000ed24:	89 c5                	mov    ebp,eax
c000ed26:	75 10                	jne    c000ed38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed28:	83 ec 0c             	sub    esp,0xc
c000ed2b:	68 60 1f 02 c0       	push   0xc0021f60
c000ed30:	e8 d2 28 00 00       	call   c0011607 <KePanic(char const*)>
c000ed35:	83 c4 10             	add    esp,0x10
c000ed38:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed3c:	ba 12 00 00 00       	mov    edx,0x12
c000ed41:	85 c0                	test   eax,eax
c000ed43:	74 11                	je     c000ed56 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed45:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed49:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed4d:	c1 fa 03             	sar    edx,0x3
c000ed50:	0f af d1             	imul   edx,ecx
c000ed53:	83 c2 12             	add    edx,0x12
c000ed56:	85 ff                	test   edi,edi
c000ed58:	74 06                	je     c000ed60 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed5a:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed5e:	75 12                	jne    c000ed72 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed60:	83 ec 0c             	sub    esp,0xc
c000ed63:	68 70 1f 02 c0       	push   0xc0021f70
c000ed68:	e8 a1 bb ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000ed6d:	e9 b8 00 00 00       	jmp    c000ee2a <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed72:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed76:	83 f9 02             	cmp    ecx,0x2
c000ed79:	0f 85 96 00 00 00    	jne    c000ee15 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed7f:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed84:	75 0e                	jne    c000ed94 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed86:	85 c0                	test   eax,eax
c000ed88:	75 0a                	jne    c000ed94 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed8a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed8d:	83 e8 18             	sub    eax,0x18
c000ed90:	a8 f7                	test   al,0xf7
c000ed92:	74 0a                	je     c000ed9e <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed94:	83 ec 0c             	sub    esp,0xc
c000ed97:	68 85 1f 02 c0       	push   0xc0021f85
c000ed9c:	eb 7f                	jmp    c000ee1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ed9e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eda6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000edae:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000edb2:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000edb6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000edbe:	75 0c                	jne    c000edcc <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000edc0:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000edc5:	c1 e1 18             	shl    ecx,0x18
c000edc8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000edcc:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000edd1:	46                   	inc    esi
c000edd2:	89 c8                	mov    eax,ecx
c000edd4:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000edd9:	c1 e0 10             	shl    eax,0x10
c000eddc:	c1 e1 08             	shl    ecx,0x8
c000eddf:	09 c1                	or     ecx,eax
c000ede1:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ede5:	09 c1                	or     ecx,eax
c000ede7:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000edeb:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000edef:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000edf3:	c1 f8 03             	sar    eax,0x3
c000edf6:	01 c2                	add    edx,eax
c000edf8:	89 f0                	mov    eax,esi
c000edfa:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000edfe:	39 c7                	cmp    edi,eax
c000ee00:	7f b0                	jg     c000edb2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee02:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee06:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee0a:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee0d:	7e 22                	jle    c000ee31 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee0f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ee13:	eb 99                	jmp    c000edae <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee15:	50                   	push   eax
c000ee16:	50                   	push   eax
c000ee17:	51                   	push   ecx
c000ee18:	68 93 1f 02 c0       	push   0xc0021f93
c000ee1d:	e8 ec ba ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000ee22:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee25:	e8 bd 8c ff ff       	call   c0007ae7 <free>
c000ee2a:	83 c4 10             	add    esp,0x10
c000ee2d:	31 ed                	xor    ebp,ebp
c000ee2f:	eb 0f                	jmp    c000ee40 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee31:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee35:	89 38                	mov    DWORD PTR [eax],edi
c000ee37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee3b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ee3e:	89 38                	mov    DWORD PTR [eax],edi
c000ee40:	83 c4 1c             	add    esp,0x1c
c000ee43:	89 e8                	mov    eax,ebp
c000ee45:	5b                   	pop    ebx
c000ee46:	5e                   	pop    esi
c000ee47:	5f                   	pop    edi
c000ee48:	5d                   	pop    ebp
c000ee49:	c3                   	ret    

c000ee4a <Video::putTGA(int, int, unsigned char*, int)>:
c000ee4a:	55                   	push   ebp
c000ee4b:	57                   	push   edi
c000ee4c:	56                   	push   esi
c000ee4d:	53                   	push   ebx
c000ee4e:	83 ec 28             	sub    esp,0x28
c000ee51:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee55:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ee59:	50                   	push   eax
c000ee5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee5e:	50                   	push   eax
c000ee5f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee63:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee67:	57                   	push   edi
c000ee68:	e8 75 fe ff ff       	call   c000ece2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee6d:	83 c4 20             	add    esp,0x20
c000ee70:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee74:	85 c0                	test   eax,eax
c000ee76:	74 35                	je     c000eead <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee78:	89 c6                	mov    esi,eax
c000ee7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee7e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee82:	39 d8                	cmp    eax,ebx
c000ee84:	7e 27                	jle    c000eead <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee86:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee8a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ee8e:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ee92:	39 e9                	cmp    ecx,ebp
c000ee94:	7e 14                	jle    c000eeaa <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee96:	83 c6 04             	add    esi,0x4
c000ee99:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ee9b:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ee9e:	53                   	push   ebx
c000ee9f:	55                   	push   ebp
c000eea0:	45                   	inc    ebp
c000eea1:	57                   	push   edi
c000eea2:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eea5:	83 c4 10             	add    esp,0x10
c000eea8:	eb e0                	jmp    c000ee8a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eeaa:	43                   	inc    ebx
c000eeab:	eb cd                	jmp    c000ee7a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eead:	83 c4 1c             	add    esp,0x1c
c000eeb0:	5b                   	pop    ebx
c000eeb1:	5e                   	pop    esi
c000eeb2:	5f                   	pop    edi
c000eeb3:	5d                   	pop    ebp
c000eeb4:	c3                   	ret    
c000eeb5:	66 90                	xchg   ax,ax
c000eeb7:	90                   	nop

c000eeb8 <ACPI::close(int, int, void*)>:
c000eeb8:	83 ec 1c             	sub    esp,0x1c
c000eebb:	83 ec 0c             	sub    esp,0xc
c000eebe:	68 f4 1f 02 c0       	push   0xc0021ff4
c000eec3:	e8 46 ba ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000eec8:	83 c4 10             	add    esp,0x10
c000eecb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eed3:	74 1b                	je     c000eef0 <ACPI::close(int, int, void*)+0x38>
c000eed5:	83 ec 0c             	sub    esp,0xc
c000eed8:	68 03 20 02 c0       	push   0xc0022003
c000eedd:	e8 2c ba ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000eee2:	83 c4 10             	add    esp,0x10
c000eee5:	b8 00 00 00 00       	mov    eax,0x0
c000eeea:	e9 01 01 00 00       	jmp    c000eff0 <ACPI::close(int, int, void*)+0x138>
c000eeef:	90                   	nop
c000eef0:	83 ec 0c             	sub    esp,0xc
c000eef3:	68 14 20 02 c0       	push   0xc0022014
c000eef8:	e8 11 ba ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000eefd:	83 c4 10             	add    esp,0x10
c000ef00:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef05:	75 45                	jne    c000ef4c <ACPI::close(int, int, void*)+0x94>
c000ef07:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef0c:	83 ec 08             	sub    esp,0x8
c000ef0f:	50                   	push   eax
c000ef10:	68 23 20 02 c0       	push   0xc0022023
c000ef15:	e8 f4 b9 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000ef1a:	83 c4 10             	add    esp,0x10
c000ef1d:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef22:	85 c0                	test   eax,eax
c000ef24:	74 0a                	je     c000ef30 <ACPI::close(int, int, void*)+0x78>
c000ef26:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef2b:	ff d0                	call   eax
c000ef2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef30:	83 ec 0c             	sub    esp,0xc
c000ef33:	68 f4 21 02 c0       	push   0xc00221f4
c000ef38:	e8 ca 26 00 00       	call   c0011607 <KePanic(char const*)>
c000ef3d:	83 c4 10             	add    esp,0x10
c000ef40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef45:	e9 a6 00 00 00       	jmp    c000eff0 <ACPI::close(int, int, void*)+0x138>
c000ef4a:	66 90                	xchg   ax,ax
c000ef4c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef51:	0f 85 81 00 00 00    	jne    c000efd8 <ACPI::close(int, int, void*)+0x120>
c000ef57:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef5c:	83 ec 08             	sub    esp,0x8
c000ef5f:	50                   	push   eax
c000ef60:	68 41 20 02 c0       	push   0xc0022041
c000ef65:	e8 a4 b9 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000ef6a:	83 c4 10             	add    esp,0x10
c000ef6d:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef72:	85 c0                	test   eax,eax
c000ef74:	74 0a                	je     c000ef80 <ACPI::close(int, int, void*)+0xc8>
c000ef76:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef7b:	ff d0                	call   eax
c000ef7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef80:	83 ec 0c             	sub    esp,0xc
c000ef83:	68 5c 20 02 c0       	push   0xc002205c
c000ef88:	e8 81 b9 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000ef8d:	83 c4 10             	add    esp,0x10
c000ef90:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef95:	8d 76 00             	lea    esi,[esi+0x0]
c000ef98:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef9d:	83 e0 02             	and    eax,0x2
c000efa0:	74 1e                	je     c000efc0 <ACPI::close(int, int, void*)+0x108>
c000efa2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000efa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efad:	89 c2                	mov    edx,eax
c000efaf:	ec                   	in     al,dx
c000efb0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000efb4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000efb8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000efbc:	eb da                	jmp    c000ef98 <ACPI::close(int, int, void*)+0xe0>
c000efbe:	66 90                	xchg   ax,ax
c000efc0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000efc7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000efcc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000efd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efd4:	ee                   	out    dx,al
c000efd5:	8d 76 00             	lea    esi,[esi+0x0]
c000efd8:	83 ec 0c             	sub    esp,0xc
c000efdb:	68 6e 20 02 c0       	push   0xc002206e
c000efe0:	e8 29 b9 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c000efe5:	83 c4 10             	add    esp,0x10
c000efe8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efed:	8d 76 00             	lea    esi,[esi+0x0]
c000eff0:	83 c4 1c             	add    esp,0x1c
c000eff3:	c3                   	ret    

c000eff4 <findRSDP()>:
c000eff4:	83 ec 1c             	sub    esp,0x1c
c000eff7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000effc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f002:	83 e0 04             	and    eax,0x4
c000f005:	0f b6 c0             	movzx  eax,al
c000f008:	85 c0                	test   eax,eax
c000f00a:	75 08                	jne    c000f014 <findRSDP()+0x20>
c000f00c:	b8 00 00 00 00       	mov    eax,0x0
c000f011:	eb 75                	jmp    c000f088 <findRSDP()+0x94>
c000f013:	90                   	nop
c000f014:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000f019:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f01e:	7f 1c                	jg     c000f03c <findRSDP()+0x48>
c000f020:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f025:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f02b:	83 e2 fb             	and    edx,0xfffffffb
c000f02e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f034:	b8 00 00 00 00       	mov    eax,0x0
c000f039:	eb 4d                	jmp    c000f088 <findRSDP()+0x94>
c000f03b:	90                   	nop
c000f03c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f044:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f04c:	77 32                	ja     c000f080 <findRSDP()+0x8c>
c000f04e:	83 ec 04             	sub    esp,0x4
c000f051:	6a 08                	push   0x8
c000f053:	68 7d 20 02 c0       	push   0xc002207d
c000f058:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f05c:	e8 1f 13 ff ff       	call   c0000380 <memcmp>
c000f061:	83 c4 10             	add    esp,0x10
c000f064:	85 c0                	test   eax,eax
c000f066:	0f 94 c0             	sete   al
c000f069:	0f b6 c0             	movzx  eax,al
c000f06c:	85 c0                	test   eax,eax
c000f06e:	74 08                	je     c000f078 <findRSDP()+0x84>
c000f070:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f074:	eb 12                	jmp    c000f088 <findRSDP()+0x94>
c000f076:	66 90                	xchg   ax,ax
c000f078:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f07d:	eb c5                	jmp    c000f044 <findRSDP()+0x50>
c000f07f:	90                   	nop
c000f080:	b8 00 00 00 00       	mov    eax,0x0
c000f085:	8d 76 00             	lea    esi,[esi+0x0]
c000f088:	83 c4 1c             	add    esp,0x1c
c000f08b:	c3                   	ret    

c000f08c <loadACPITables(unsigned char*)>:
c000f08c:	57                   	push   edi
c000f08d:	56                   	push   esi
c000f08e:	53                   	push   ebx
c000f08f:	83 ec 60             	sub    esp,0x60
c000f092:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f097:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f09d:	83 e0 04             	and    eax,0x4
c000f0a0:	0f b6 c0             	movzx  eax,al
c000f0a3:	85 c0                	test   eax,eax
c000f0a5:	0f 84 41 02 00 00    	je     c000f2ec <loadACPITables(unsigned char*)+0x260>
c000f0ab:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f0b0:	0f b6 c0             	movzx  eax,al
c000f0b3:	85 c0                	test   eax,eax
c000f0b5:	74 79                	je     c000f130 <loadACPITables(unsigned char*)+0xa4>
c000f0b7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0bb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f0bf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f0c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0c6:	83 e8 24             	sub    eax,0x24
c000f0c9:	c1 e8 03             	shr    eax,0x3
c000f0cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0d0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f0d8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0dc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f0e0:	0f 8d ba 00 00 00    	jge    c000f1a0 <loadACPITables(unsigned char*)+0x114>
c000f0e6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0ea:	83 c0 24             	add    eax,0x24
c000f0ed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0f1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0f5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0f9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0fd:	c1 e0 03             	shl    eax,0x3
c000f100:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f104:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f108:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f10b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f10d:	89 c1                	mov    ecx,eax
c000f10f:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f114:	8d 50 01             	lea    edx,[eax+0x1]
c000f117:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f11d:	89 ca                	mov    edx,ecx
c000f11f:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f126:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f12b:	eb ab                	jmp    c000f0d8 <loadACPITables(unsigned char*)+0x4c>
c000f12d:	8d 76 00             	lea    esi,[esi+0x0]
c000f130:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f134:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f138:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f13c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f13f:	83 e8 24             	sub    eax,0x24
c000f142:	c1 e8 02             	shr    eax,0x2
c000f145:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f149:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f151:	8d 76 00             	lea    esi,[esi+0x0]
c000f154:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f158:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f15c:	7d 42                	jge    c000f1a0 <loadACPITables(unsigned char*)+0x114>
c000f15e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f162:	83 c0 24             	add    eax,0x24
c000f165:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f169:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f16d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f171:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f175:	c1 e0 02             	shl    eax,0x2
c000f178:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f17c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f180:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f182:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f187:	8d 50 01             	lea    edx,[eax+0x1]
c000f18a:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f190:	89 ca                	mov    edx,ecx
c000f192:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f199:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f19e:	eb b4                	jmp    c000f154 <loadACPITables(unsigned char*)+0xc8>
c000f1a0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f1a8:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1ad:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f1b1:	0f 8d 39 01 00 00    	jge    c000f2f0 <loadACPITables(unsigned char*)+0x264>
c000f1b7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1bb:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f1c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f1ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1d2:	25 ff 0f 00 00       	and    eax,0xfff
c000f1d7:	89 c6                	mov    esi,eax
c000f1d9:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1df:	83 ec 0c             	sub    esp,0xc
c000f1e2:	6a 01                	push   0x1
c000f1e4:	e8 10 a4 ff ff       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c000f1e9:	83 c4 10             	add    esp,0x10
c000f1ec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1f6:	83 ec 0c             	sub    esp,0xc
c000f1f9:	6a 01                	push   0x1
c000f1fb:	6a 01                	push   0x1
c000f1fd:	50                   	push   eax
c000f1fe:	52                   	push   edx
c000f1ff:	53                   	push   ebx
c000f200:	e8 07 ad ff ff       	call   c0009f0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f205:	83 c4 20             	add    esp,0x20
c000f208:	09 f0                	or     eax,esi
c000f20a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f20e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f212:	c1 e0 03             	shl    eax,0x3
c000f215:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f21a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f21e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f222:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f226:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f22e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f232:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f236:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f23a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f23e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f242:	89 c6                	mov    esi,eax
c000f244:	89 d7                	mov    edi,edx
c000f246:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f248:	89 c8                	mov    eax,ecx
c000f24a:	89 fa                	mov    edx,edi
c000f24c:	89 f3                	mov    ebx,esi
c000f24e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f252:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f25a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f25e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f261:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f265:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f269:	05 00 10 00 00       	add    eax,0x1000
c000f26e:	c1 e8 0c             	shr    eax,0xc
c000f271:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f275:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f279:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f27d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f281:	25 ff 0f 00 00       	and    eax,0xfff
c000f286:	89 c6                	mov    esi,eax
c000f288:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f28e:	83 ec 0c             	sub    esp,0xc
c000f291:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f295:	e8 5f a3 ff ff       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c000f29a:	83 c4 10             	add    esp,0x10
c000f29d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f2a1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2a7:	83 ec 0c             	sub    esp,0xc
c000f2aa:	6a 01                	push   0x1
c000f2ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f2b0:	50                   	push   eax
c000f2b1:	52                   	push   edx
c000f2b2:	53                   	push   ebx
c000f2b3:	e8 54 ac ff ff       	call   c0009f0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2b8:	83 c4 20             	add    esp,0x20
c000f2bb:	09 f0                	or     eax,esi
c000f2bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f2c5:	83 ec 0c             	sub    esp,0xc
c000f2c8:	50                   	push   eax
c000f2c9:	e8 3f a6 ff ff       	call   c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c000f2ce:	83 c4 10             	add    esp,0x10
c000f2d1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f2d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2d9:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f2e0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f2e5:	e9 be fe ff ff       	jmp    c000f1a8 <loadACPITables(unsigned char*)+0x11c>
c000f2ea:	66 90                	xchg   ax,ax
c000f2ec:	90                   	nop
c000f2ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f0:	83 c4 60             	add    esp,0x60
c000f2f3:	5b                   	pop    ebx
c000f2f4:	5e                   	pop    esi
c000f2f5:	5f                   	pop    edi
c000f2f6:	c3                   	ret    
c000f2f7:	90                   	nop

c000f2f8 <findRSDT(unsigned char*)>:
c000f2f8:	57                   	push   edi
c000f2f9:	56                   	push   esi
c000f2fa:	53                   	push   ebx
c000f2fb:	83 ec 50             	sub    esp,0x50
c000f2fe:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f303:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f309:	83 e0 04             	and    eax,0x4
c000f30c:	0f b6 c0             	movzx  eax,al
c000f30f:	85 c0                	test   eax,eax
c000f311:	75 0d                	jne    c000f320 <findRSDT(unsigned char*)+0x28>
c000f313:	b8 00 00 00 00       	mov    eax,0x0
c000f318:	e9 2b 01 00 00       	jmp    c000f448 <findRSDT(unsigned char*)+0x150>
c000f31d:	8d 76 00             	lea    esi,[esi+0x0]
c000f320:	89 e0                	mov    eax,esp
c000f322:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f326:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f32a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f32e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f336:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f33a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f33e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f342:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f346:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f34a:	89 c6                	mov    esi,eax
c000f34c:	89 d7                	mov    edi,edx
c000f34e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f350:	89 c8                	mov    eax,ecx
c000f352:	89 fa                	mov    edx,edi
c000f354:	89 f3                	mov    ebx,esi
c000f356:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f35a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f35e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f362:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f366:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f36a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f372:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f376:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f37a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f382:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f386:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f38a:	25 ff 0f 00 00       	and    eax,0xfff
c000f38f:	89 c6                	mov    esi,eax
c000f391:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f397:	83 ec 0c             	sub    esp,0xc
c000f39a:	6a 02                	push   0x2
c000f39c:	e8 58 a2 ff ff       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c000f3a1:	83 c4 10             	add    esp,0x10
c000f3a4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f3a8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3ae:	83 ec 0c             	sub    esp,0xc
c000f3b1:	6a 01                	push   0x1
c000f3b3:	6a 02                	push   0x2
c000f3b5:	50                   	push   eax
c000f3b6:	52                   	push   edx
c000f3b7:	53                   	push   ebx
c000f3b8:	e8 4f ab ff ff       	call   c0009f0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3bd:	83 c4 20             	add    esp,0x20
c000f3c0:	09 f0                	or     eax,esi
c000f3c2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3ca:	25 ff 0f 00 00       	and    eax,0xfff
c000f3cf:	89 c6                	mov    esi,eax
c000f3d1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3d7:	83 ec 0c             	sub    esp,0xc
c000f3da:	6a 02                	push   0x2
c000f3dc:	e8 18 a2 ff ff       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c000f3e1:	83 c4 10             	add    esp,0x10
c000f3e4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f3e8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3ee:	83 ec 0c             	sub    esp,0xc
c000f3f1:	6a 01                	push   0x1
c000f3f3:	6a 02                	push   0x2
c000f3f5:	50                   	push   eax
c000f3f6:	52                   	push   edx
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 0f ab ff ff       	call   c0009f0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	09 f0                	or     eax,esi
c000f402:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f406:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f40b:	85 c0                	test   eax,eax
c000f40d:	75 11                	jne    c000f420 <findRSDT(unsigned char*)+0x128>
c000f40f:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f416:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f41a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f41e:	eb 24                	jmp    c000f444 <findRSDT(unsigned char*)+0x14c>
c000f420:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f425:	83 f8 02             	cmp    eax,0x2
c000f428:	75 12                	jne    c000f43c <findRSDT(unsigned char*)+0x144>
c000f42a:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f431:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f435:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f439:	eb 09                	jmp    c000f444 <findRSDT(unsigned char*)+0x14c>
c000f43b:	90                   	nop
c000f43c:	b8 00 00 00 00       	mov    eax,0x0
c000f441:	eb 05                	jmp    c000f448 <findRSDT(unsigned char*)+0x150>
c000f443:	90                   	nop
c000f444:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f448:	83 c4 50             	add    esp,0x50
c000f44b:	5b                   	pop    ebx
c000f44c:	5e                   	pop    esi
c000f44d:	5f                   	pop    edi
c000f44e:	c3                   	ret    
c000f44f:	90                   	nop

c000f450 <findDataTable(unsigned char*, char*)>:
c000f450:	83 ec 1c             	sub    esp,0x1c
c000f453:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f458:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f45e:	83 e0 04             	and    eax,0x4
c000f461:	0f b6 c0             	movzx  eax,al
c000f464:	85 c0                	test   eax,eax
c000f466:	75 08                	jne    c000f470 <findDataTable(unsigned char*, char*)+0x20>
c000f468:	b8 00 00 00 00       	mov    eax,0x0
c000f46d:	eb 5d                	jmp    c000f4cc <findDataTable(unsigned char*, char*)+0x7c>
c000f46f:	90                   	nop
c000f470:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f478:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f47d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f481:	7d 41                	jge    c000f4c4 <findDataTable(unsigned char*, char*)+0x74>
c000f483:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f487:	c1 e0 03             	shl    eax,0x3
c000f48a:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 04                	push   0x4
c000f494:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f498:	50                   	push   eax
c000f499:	e8 e2 0e ff ff       	call   c0000380 <memcmp>
c000f49e:	83 c4 10             	add    esp,0x10
c000f4a1:	85 c0                	test   eax,eax
c000f4a3:	0f 94 c0             	sete   al
c000f4a6:	0f b6 c0             	movzx  eax,al
c000f4a9:	85 c0                	test   eax,eax
c000f4ab:	74 0f                	je     c000f4bc <findDataTable(unsigned char*, char*)+0x6c>
c000f4ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4b1:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f4b8:	eb 12                	jmp    c000f4cc <findDataTable(unsigned char*, char*)+0x7c>
c000f4ba:	66 90                	xchg   ax,ax
c000f4bc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f4c1:	eb b5                	jmp    c000f478 <findDataTable(unsigned char*, char*)+0x28>
c000f4c3:	90                   	nop
c000f4c4:	b8 00 00 00 00       	mov    eax,0x0
c000f4c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4cc:	83 c4 1c             	add    esp,0x1c
c000f4cf:	c3                   	ret    

c000f4d0 <scanMADT()>:
c000f4d0:	53                   	push   ebx
c000f4d1:	83 ec 38             	sub    esp,0x38
c000f4d4:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f4d9:	25 00 04 00 00       	and    eax,0x400
c000f4de:	74 14                	je     c000f4f4 <scanMADT()+0x24>
c000f4e0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4e5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4eb:	83 e2 fb             	and    edx,0xfffffffb
c000f4ee:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4f4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4f9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4ff:	83 e0 04             	and    eax,0x4
c000f502:	0f b6 c0             	movzx  eax,al
c000f505:	85 c0                	test   eax,eax
c000f507:	0f 84 6b 04 00 00    	je     c000f978 <scanMADT()+0x4a8>
c000f50d:	e8 e2 fa ff ff       	call   c000eff4 <findRSDP()>
c000f512:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f517:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f51c:	85 c0                	test   eax,eax
c000f51e:	75 1c                	jne    c000f53c <scanMADT()+0x6c>
c000f520:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f525:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f52b:	83 e2 fb             	and    edx,0xfffffffb
c000f52e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f534:	e9 47 04 00 00       	jmp    c000f980 <scanMADT()+0x4b0>
c000f539:	8d 76 00             	lea    esi,[esi+0x0]
c000f53c:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f541:	83 ec 0c             	sub    esp,0xc
c000f544:	50                   	push   eax
c000f545:	e8 ae fd ff ff       	call   c000f2f8 <findRSDT(unsigned char*)>
c000f54a:	83 c4 10             	add    esp,0x10
c000f54d:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f552:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f557:	85 c0                	test   eax,eax
c000f559:	75 19                	jne    c000f574 <scanMADT()+0xa4>
c000f55b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f560:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f566:	83 e2 fb             	and    edx,0xfffffffb
c000f569:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f56f:	e9 0c 04 00 00       	jmp    c000f980 <scanMADT()+0x4b0>
c000f574:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f579:	83 ec 0c             	sub    esp,0xc
c000f57c:	50                   	push   eax
c000f57d:	e8 0a fb ff ff       	call   c000f08c <loadACPITables(unsigned char*)>
c000f582:	83 c4 10             	add    esp,0x10
c000f585:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f58a:	83 ec 08             	sub    esp,0x8
c000f58d:	68 86 20 02 c0       	push   0xc0022086
c000f592:	50                   	push   eax
c000f593:	e8 b8 fe ff ff       	call   c000f450 <findDataTable(unsigned char*, char*)>
c000f598:	83 c4 10             	add    esp,0x10
c000f59b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f59f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f5a4:	75 1a                	jne    c000f5c0 <scanMADT()+0xf0>
c000f5a6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f5ab:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f5b1:	83 e2 fe             	and    edx,0xfffffffe
c000f5b4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5ba:	e9 c1 03 00 00       	jmp    c000f980 <scanMADT()+0x4b0>
c000f5bf:	90                   	nop
c000f5c0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f5c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5cf:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f5d3:	0f 87 a7 03 00 00    	ja     c000f980 <scanMADT()+0x4b0>
c000f5d9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f5e1:	0f 87 99 03 00 00    	ja     c000f980 <scanMADT()+0x4b0>
c000f5e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5eb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f5ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f3:	8d 50 01             	lea    edx,[eax+0x1]
c000f5f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f602:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f606:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f60a:	8d 50 01             	lea    edx,[eax+0x1]
c000f60d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f611:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f615:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f619:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f61d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f622:	83 f8 02             	cmp    eax,0x2
c000f625:	0f 86 51 03 00 00    	jbe    c000f97c <scanMADT()+0x4ac>
c000f62b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f630:	85 c0                	test   eax,eax
c000f632:	75 58                	jne    c000f68c <scanMADT()+0x1bc>
c000f634:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f638:	8d 50 01             	lea    edx,[eax+0x1]
c000f63b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f63f:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f645:	0f b6 d2             	movzx  edx,dl
c000f648:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f64c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f650:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f656:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f65a:	8d 50 01             	lea    edx,[eax+0x1]
c000f65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f661:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f667:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f66a:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f670:	0f b6 d2             	movzx  edx,dl
c000f673:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f677:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f67b:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f681:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f686:	e9 d9 02 00 00       	jmp    c000f964 <scanMADT()+0x494>
c000f68b:	90                   	nop
c000f68c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f691:	83 f8 01             	cmp    eax,0x1
c000f694:	0f 85 1a 01 00 00    	jne    c000f7b4 <scanMADT()+0x2e4>
c000f69a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f69e:	8d 50 01             	lea    edx,[eax+0x1]
c000f6a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6a5:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f6ab:	0f b6 d2             	movzx  edx,dl
c000f6ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f6b2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6b6:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f6bc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f6c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6c9:	01 d0                	add    eax,edx
c000f6cb:	83 c0 2c             	add    eax,0x2c
c000f6ce:	8a 00                	mov    al,BYTE PTR [eax]
c000f6d0:	0f b6 d0             	movzx  edx,al
c000f6d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6d7:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6de:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6e2:	0f b6 c0             	movzx  eax,al
c000f6e5:	c1 e0 08             	shl    eax,0x8
c000f6e8:	89 d1                	mov    ecx,edx
c000f6ea:	09 c1                	or     ecx,eax
c000f6ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6f0:	8d 50 02             	lea    edx,[eax+0x2]
c000f6f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6f7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6fb:	0f b6 c0             	movzx  eax,al
c000f6fe:	c1 e0 10             	shl    eax,0x10
c000f701:	09 c1                	or     ecx,eax
c000f703:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f707:	8d 50 03             	lea    edx,[eax+0x3]
c000f70a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f70e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f712:	0f b6 c0             	movzx  eax,al
c000f715:	c1 e0 18             	shl    eax,0x18
c000f718:	09 c1                	or     ecx,eax
c000f71a:	89 ca                	mov    edx,ecx
c000f71c:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f721:	0f b6 c0             	movzx  eax,al
c000f724:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f72b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f730:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f738:	01 d0                	add    eax,edx
c000f73a:	83 c0 2c             	add    eax,0x2c
c000f73d:	8a 00                	mov    al,BYTE PTR [eax]
c000f73f:	0f b6 d0             	movzx  edx,al
c000f742:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f746:	8d 48 01             	lea    ecx,[eax+0x1]
c000f749:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f74d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f751:	0f b6 c0             	movzx  eax,al
c000f754:	c1 e0 08             	shl    eax,0x8
c000f757:	89 d1                	mov    ecx,edx
c000f759:	09 c1                	or     ecx,eax
c000f75b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f75f:	8d 50 02             	lea    edx,[eax+0x2]
c000f762:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f766:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f76a:	0f b6 c0             	movzx  eax,al
c000f76d:	c1 e0 10             	shl    eax,0x10
c000f770:	09 c1                	or     ecx,eax
c000f772:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f776:	8d 50 03             	lea    edx,[eax+0x3]
c000f779:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f77d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f781:	0f b6 c0             	movzx  eax,al
c000f784:	c1 e0 18             	shl    eax,0x18
c000f787:	09 c1                	or     ecx,eax
c000f789:	89 ca                	mov    edx,ecx
c000f78b:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f790:	0f b6 c0             	movzx  eax,al
c000f793:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f79a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f79f:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7a4:	83 c0 01             	add    eax,0x1
c000f7a7:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f7ac:	e9 b3 01 00 00       	jmp    c000f964 <scanMADT()+0x494>
c000f7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f7b4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7b9:	83 f8 02             	cmp    eax,0x2
c000f7bc:	0f 85 ea 00 00 00    	jne    c000f8ac <scanMADT()+0x3dc>
c000f7c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7c6:	8d 50 01             	lea    edx,[eax+0x1]
c000f7c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7d5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f7d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7dd:	8d 50 01             	lea    edx,[eax+0x1]
c000f7e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7e8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7ec:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f7f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7f8:	01 d0                	add    eax,edx
c000f7fa:	83 c0 2c             	add    eax,0x2c
c000f7fd:	8a 00                	mov    al,BYTE PTR [eax]
c000f7ff:	0f b6 d0             	movzx  edx,al
c000f802:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f806:	8d 48 01             	lea    ecx,[eax+0x1]
c000f809:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f80d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f811:	0f b6 c0             	movzx  eax,al
c000f814:	c1 e0 08             	shl    eax,0x8
c000f817:	89 d1                	mov    ecx,edx
c000f819:	09 c1                	or     ecx,eax
c000f81b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f81f:	8d 50 02             	lea    edx,[eax+0x2]
c000f822:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f826:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f82a:	0f b6 c0             	movzx  eax,al
c000f82d:	c1 e0 10             	shl    eax,0x10
c000f830:	09 c1                	or     ecx,eax
c000f832:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f836:	8d 50 03             	lea    edx,[eax+0x3]
c000f839:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f83d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f841:	0f b6 c0             	movzx  eax,al
c000f844:	c1 e0 18             	shl    eax,0x18
c000f847:	09 c8                	or     eax,ecx
c000f849:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f84d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f852:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f856:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f85a:	01 d0                	add    eax,edx
c000f85c:	83 c0 2c             	add    eax,0x2c
c000f85f:	8a 00                	mov    al,BYTE PTR [eax]
c000f861:	0f b6 d0             	movzx  edx,al
c000f864:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f868:	8d 48 01             	lea    ecx,[eax+0x1]
c000f86b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f86f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f873:	0f b6 c0             	movzx  eax,al
c000f876:	c1 e0 08             	shl    eax,0x8
c000f879:	09 d0                	or     eax,edx
c000f87b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f880:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f885:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f88a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f88e:	88 90 48 38 02 c0    	mov    BYTE PTR [eax-0x3ffdc7b8],dl
c000f894:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f899:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f89e:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f8a6:	e9 b9 00 00 00       	jmp    c000f964 <scanMADT()+0x494>
c000f8ab:	90                   	nop
c000f8ac:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8b1:	83 f8 04             	cmp    eax,0x4
c000f8b4:	0f 85 9a 00 00 00    	jne    c000f954 <scanMADT()+0x484>
c000f8ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8be:	8d 50 01             	lea    edx,[eax+0x1]
c000f8c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8cd:	0f b6 c0             	movzx  eax,al
c000f8d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8dc:	01 d0                	add    eax,edx
c000f8de:	83 c0 2c             	add    eax,0x2c
c000f8e1:	8a 00                	mov    al,BYTE PTR [eax]
c000f8e3:	0f b6 d0             	movzx  edx,al
c000f8e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8ea:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8f1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8f5:	0f b6 c0             	movzx  eax,al
c000f8f8:	c1 e0 08             	shl    eax,0x8
c000f8fb:	09 d0                	or     eax,edx
c000f8fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f901:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f906:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f90a:	8d 50 01             	lea    edx,[eax+0x1]
c000f90d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f911:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f915:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f919:	0f b6 c0             	movzx  eax,al
c000f91c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f924:	c1 e0 08             	shl    eax,0x8
c000f927:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f92b:	89 c1                	mov    ecx,eax
c000f92d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f931:	c1 e0 18             	shl    eax,0x18
c000f934:	89 c3                	mov    ebx,eax
c000f936:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f93b:	8d 50 01             	lea    edx,[eax+0x1]
c000f93e:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f944:	09 d9                	or     ecx,ebx
c000f946:	89 ca                	mov    edx,ecx
c000f948:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f94f:	eb 13                	jmp    c000f964 <scanMADT()+0x494>
c000f951:	8d 76 00             	lea    esi,[esi+0x0]
c000f954:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f959:	83 f8 05             	cmp    eax,0x5
c000f95c:	75 06                	jne    c000f964 <scanMADT()+0x494>
c000f95e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f963:	90                   	nop
c000f964:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f969:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f96d:	01 d0                	add    eax,edx
c000f96f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f973:	e9 50 fc ff ff       	jmp    c000f5c8 <scanMADT()+0xf8>
c000f978:	90                   	nop
c000f979:	eb 05                	jmp    c000f980 <scanMADT()+0x4b0>
c000f97b:	90                   	nop
c000f97c:	90                   	nop
c000f97d:	8d 76 00             	lea    esi,[esi+0x0]
c000f980:	83 c4 38             	add    esp,0x38
c000f983:	5b                   	pop    ebx
c000f984:	c3                   	ret    
c000f985:	90                   	nop
c000f986:	66 90                	xchg   ax,ax

c000f988 <ACPI::ACPI()>:
c000f988:	83 ec 0c             	sub    esp,0xc
c000f98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f98f:	83 ec 08             	sub    esp,0x8
c000f992:	68 8b 20 02 c0       	push   0xc002208b
c000f997:	50                   	push   eax
c000f998:	e8 69 d1 ff ff       	call   c000cb06 <Device::Device(char const*)>
c000f99d:	83 c4 10             	add    esp,0x10
c000f9a0:	ba 98 22 02 c0       	mov    edx,0xc0022298
c000f9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9a9:	89 10                	mov    DWORD PTR [eax],edx
c000f9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9af:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9ba:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9c8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f9d2:	e8 f9 fa ff ff       	call   c000f4d0 <scanMADT()>
c000f9d7:	90                   	nop
c000f9d8:	83 c4 0c             	add    esp,0xc
c000f9db:	c3                   	ret    

c000f9dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f9dc:	83 ec 2c             	sub    esp,0x2c
c000f9df:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f9e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f9e7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f9eb:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f9ef:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f9f4:	88 c8                	mov    al,cl
c000f9f6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f9fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f9ff:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000fa07:	90                   	nop
c000fa08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa0c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa12:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fa16:	0f 8d b0 00 00 00    	jge    c000facc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000fa1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa24:	83 c2 2a             	add    edx,0x2a
c000fa27:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fa2b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa30:	0f b7 c0             	movzx  eax,ax
c000fa33:	39 c2                	cmp    edx,eax
c000fa35:	0f 85 85 00 00 00    	jne    c000fac0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa43:	83 c2 2a             	add    edx,0x2a
c000fa46:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa4a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa4f:	0f b6 c0             	movzx  eax,al
c000fa52:	39 c2                	cmp    edx,eax
c000fa54:	75 6a                	jne    c000fac0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa56:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa5b:	85 c0                	test   eax,eax
c000fa5d:	74 3d                	je     c000fa9c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa67:	83 c2 2a             	add    edx,0x2a
c000fa6a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fa6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa75:	39 c2                	cmp    edx,eax
c000fa77:	74 13                	je     c000fa8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa79:	83 ec 0c             	sub    esp,0xc
c000fa7c:	68 18 22 02 c0       	push   0xc0022218
c000fa81:	e8 81 1b 00 00       	call   c0011607 <KePanic(char const*)>
c000fa86:	83 c4 10             	add    esp,0x10
c000fa89:	8d 76 00             	lea    esi,[esi+0x0]
c000fa8c:	83 ec 0c             	sub    esp,0xc
c000fa8f:	68 90 20 02 c0       	push   0xc0022090
c000fa94:	e8 6e 1b 00 00       	call   c0011607 <KePanic(char const*)>
c000fa99:	83 c4 10             	add    esp,0x10
c000fa9c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faa0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000faa4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000faa8:	83 c2 2a             	add    edx,0x2a
c000faab:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000faaf:	8b 02                	mov    eax,DWORD PTR [edx]
c000fab1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fab4:	89 01                	mov    DWORD PTR [ecx],eax
c000fab6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fab9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fabe:	66 90                	xchg   ax,ax
c000fac0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fac5:	e9 3e ff ff ff       	jmp    c000fa08 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000faca:	66 90                	xchg   ax,ax
c000facc:	90                   	nop
c000facd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fad1:	83 c4 2c             	add    esp,0x2c
c000fad4:	c2 04 00             	ret    0x4
c000fad7:	90                   	nop

c000fad8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fad8:	83 ec 1c             	sub    esp,0x1c
c000fadb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fadf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fae3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fae7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000faec:	88 c8                	mov    al,cl
c000faee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000faf2:	88 d0                	mov    al,dl
c000faf4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000faf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fafc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb06:	83 c2 2a             	add    edx,0x2a
c000fb09:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fb0d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000fb11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb15:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb1f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fb26:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000fb2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb2f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb35:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb39:	83 c0 01             	add    eax,0x1
c000fb3c:	88 c1                	mov    cl,al
c000fb3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb42:	83 c2 2a             	add    edx,0x2a
c000fb45:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb4d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb57:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb5a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb5e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb66:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb6c:	8d 50 01             	lea    edx,[eax+0x1]
c000fb6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb73:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb7d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb83:	3d 00 02 00 00       	cmp    eax,0x200
c000fb88:	75 12                	jne    c000fb9c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb8a:	83 ec 0c             	sub    esp,0xc
c000fb8d:	68 9f 20 02 c0       	push   0xc002209f
c000fb92:	e8 70 1a 00 00       	call   c0011607 <KePanic(char const*)>
c000fb97:	83 c4 10             	add    esp,0x10
c000fb9a:	66 90                	xchg   ax,ax
c000fb9c:	90                   	nop
c000fb9d:	83 c4 1c             	add    esp,0x1c
c000fba0:	c3                   	ret    
c000fba1:	90                   	nop
c000fba2:	66 90                	xchg   ax,ax

c000fba4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fba4:	b8 00 00 00 00       	mov    eax,0x0
c000fba9:	c3                   	ret    
c000fbaa:	66 90                	xchg   ax,ax

c000fbac <ACPI::detectPCI()>:
c000fbac:	53                   	push   ebx
c000fbad:	83 ec 28             	sub    esp,0x28
c000fbb0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fbb5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fbba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fbbf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fbc5:	83 e0 04             	and    eax,0x4
c000fbc8:	0f b6 c0             	movzx  eax,al
c000fbcb:	85 c0                	test   eax,eax
c000fbcd:	74 2d                	je     c000fbfc <ACPI::detectPCI()+0x50>
c000fbcf:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fbd4:	83 ec 08             	sub    esp,0x8
c000fbd7:	68 bc 20 02 c0       	push   0xc00220bc
c000fbdc:	50                   	push   eax
c000fbdd:	e8 6e f8 ff ff       	call   c000f450 <findDataTable(unsigned char*, char*)>
c000fbe2:	83 c4 10             	add    esp,0x10
c000fbe5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbe9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fbee:	74 0c                	je     c000fbfc <ACPI::detectPCI()+0x50>
c000fbf0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbf5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbfa:	66 90                	xchg   ax,ax
c000fbfc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fc04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc08:	8a 00                	mov    al,BYTE PTR [eax]
c000fc0a:	0f b6 c0             	movzx  eax,al
c000fc0d:	83 f8 01             	cmp    eax,0x1
c000fc10:	75 0e                	jne    c000fc20 <ACPI::detectPCI()+0x74>
c000fc12:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc17:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc1c:	eb 2e                	jmp    c000fc4c <ACPI::detectPCI()+0xa0>
c000fc1e:	66 90                	xchg   ax,ax
c000fc20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc24:	8a 00                	mov    al,BYTE PTR [eax]
c000fc26:	0f b6 c0             	movzx  eax,al
c000fc29:	83 f8 02             	cmp    eax,0x2
c000fc2c:	75 1e                	jne    c000fc4c <ACPI::detectPCI()+0xa0>
c000fc2e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc33:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc38:	85 c0                	test   eax,eax
c000fc3a:	74 10                	je     c000fc4c <ACPI::detectPCI()+0xa0>
c000fc3c:	83 ec 0c             	sub    esp,0xc
c000fc3f:	68 48 22 02 c0       	push   0xc0022248
c000fc44:	e8 be 19 00 00       	call   c0011607 <KePanic(char const*)>
c000fc49:	83 c4 10             	add    esp,0x10
c000fc4c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc50:	83 f0 01             	xor    eax,0x1
c000fc53:	0f b6 c0             	movzx  eax,al
c000fc56:	85 c0                	test   eax,eax
c000fc58:	74 46                	je     c000fca0 <ACPI::detectPCI()+0xf4>
c000fc5a:	e8 d1 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fc5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc63:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc68:	75 0e                	jne    c000fc78 <ACPI::detectPCI()+0xcc>
c000fc6a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc6f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc74:	eb 2a                	jmp    c000fca0 <ACPI::detectPCI()+0xf4>
c000fc76:	66 90                	xchg   ax,ax
c000fc78:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc7d:	75 21                	jne    c000fca0 <ACPI::detectPCI()+0xf4>
c000fc7f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc84:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc89:	85 c0                	test   eax,eax
c000fc8b:	74 13                	je     c000fca0 <ACPI::detectPCI()+0xf4>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 48 22 02 c0       	push   0xc0022248
c000fc95:	e8 6d 19 00 00       	call   c0011607 <KePanic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	8d 76 00             	lea    esi,[esi+0x0]
c000fca0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fca5:	85 c0                	test   eax,eax
c000fca7:	0f 84 87 00 00 00    	je     c000fd34 <ACPI::detectPCI()+0x188>
c000fcad:	83 ec 0c             	sub    esp,0xc
c000fcb0:	68 c1 20 02 c0       	push   0xc00220c1
c000fcb5:	e8 4f 12 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c000fcba:	83 c4 10             	add    esp,0x10
c000fcbd:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fcc5:	83 ec 0c             	sub    esp,0xc
c000fcc8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fccc:	e8 06 7e ff ff       	call   c0007ad7 <malloc>
c000fcd1:	83 c4 10             	add    esp,0x10
c000fcd4:	89 c3                	mov    ebx,eax
c000fcd6:	83 ec 0c             	sub    esp,0xc
c000fcd9:	53                   	push   ebx
c000fcda:	e8 43 b5 00 00       	call   c001b222 <PCI::PCI()>
c000fcdf:	83 c4 10             	add    esp,0x10
c000fce2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fce6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcea:	83 ec 08             	sub    esp,0x8
c000fced:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcf1:	50                   	push   eax
c000fcf2:	e8 ad cc ff ff       	call   c000c9a4 <Device::addChild(Device*)>
c000fcf7:	83 c4 10             	add    esp,0x10
c000fcfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcfe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd00:	83 c0 08             	add    eax,0x8
c000fd03:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd05:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fd0a:	85 d2                	test   edx,edx
c000fd0c:	74 0a                	je     c000fd18 <ACPI::detectPCI()+0x16c>
c000fd0e:	ba 01 00 00 00       	mov    edx,0x1
c000fd13:	eb 0b                	jmp    c000fd20 <ACPI::detectPCI()+0x174>
c000fd15:	8d 76 00             	lea    esi,[esi+0x0]
c000fd18:	ba 02 00 00 00       	mov    edx,0x2
c000fd1d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd20:	6a 00                	push   0x0
c000fd22:	6a 00                	push   0x0
c000fd24:	52                   	push   edx
c000fd25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd29:	ff d0                	call   eax
c000fd2b:	83 c4 10             	add    esp,0x10
c000fd2e:	e9 91 00 00 00       	jmp    c000fdc4 <ACPI::detectPCI()+0x218>
c000fd33:	90                   	nop
c000fd34:	83 ec 0c             	sub    esp,0xc
c000fd37:	68 d9 20 02 c0       	push   0xc00220d9
c000fd3c:	e8 c8 11 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c000fd41:	83 c4 10             	add    esp,0x10
c000fd44:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd4b:	83 ec 0c             	sub    esp,0xc
c000fd4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd52:	e8 80 7d ff ff       	call   c0007ad7 <malloc>
c000fd57:	83 c4 10             	add    esp,0x10
c000fd5a:	89 c3                	mov    ebx,eax
c000fd5c:	83 ec 0c             	sub    esp,0xc
c000fd5f:	53                   	push   ebx
c000fd60:	e8 65 c0 00 00       	call   c001bdca <IDE::IDE()>
c000fd65:	83 c4 10             	add    esp,0x10
c000fd68:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd70:	83 ec 08             	sub    esp,0x8
c000fd73:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd77:	50                   	push   eax
c000fd78:	e8 27 cc ff ff       	call   c000c9a4 <Device::addChild(Device*)>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd84:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd92:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd9f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fda8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdac:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdae:	83 c0 08             	add    eax,0x8
c000fdb1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb3:	6a 00                	push   0x0
c000fdb5:	6a 00                	push   0x0
c000fdb7:	6a 00                	push   0x0
c000fdb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fdbd:	ff d0                	call   eax
c000fdbf:	83 c4 10             	add    esp,0x10
c000fdc2:	66 90                	xchg   ax,ax
c000fdc4:	90                   	nop
c000fdc5:	83 c4 28             	add    esp,0x28
c000fdc8:	5b                   	pop    ebx
c000fdc9:	c3                   	ret    
c000fdca:	66 90                	xchg   ax,ax

c000fdcc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fdcc:	83 ec 1c             	sub    esp,0x1c
c000fdcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdd3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdd6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fdda:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fddf:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fde4:	83 ec 08             	sub    esp,0x8
c000fde7:	52                   	push   edx
c000fde8:	50                   	push   eax
c000fde9:	e8 b0 73 ff ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c000fdee:	83 c4 10             	add    esp,0x10
c000fdf1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fdf5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdfa:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdff:	83 ec 04             	sub    esp,0x4
c000fe02:	6a 01                	push   0x1
c000fe04:	52                   	push   edx
c000fe05:	50                   	push   eax
c000fe06:	e8 ab 74 ff ff       	call   c00072b6 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fe0b:	83 c4 10             	add    esp,0x10
c000fe0e:	90                   	nop
c000fe0f:	83 c4 1c             	add    esp,0x1c
c000fe12:	c3                   	ret    
c000fe13:	90                   	nop

c000fe14 <ACPI::sleep()>:
c000fe14:	83 ec 0c             	sub    esp,0xc
c000fe17:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe1c:	85 c0                	test   eax,eax
c000fe1e:	74 08                	je     c000fe28 <ACPI::sleep()+0x14>
c000fe20:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe25:	ff d0                	call   eax
c000fe27:	90                   	nop
c000fe28:	90                   	nop
c000fe29:	83 c4 0c             	add    esp,0xc
c000fe2c:	c3                   	ret    
c000fe2d:	90                   	nop
c000fe2e:	66 90                	xchg   ax,ax

c000fe30 <ACPI::open(int, int, void*)>:
c000fe30:	55                   	push   ebp
c000fe31:	89 e5                	mov    ebp,esp
c000fe33:	53                   	push   ebx
c000fe34:	81 ec 74 01 00 00    	sub    esp,0x174
c000fe3a:	83 ec 0c             	sub    esp,0xc
c000fe3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe40:	e8 67 fd ff ff       	call   c000fbac <ACPI::detectPCI()>
c000fe45:	83 c4 10             	add    esp,0x10
c000fe48:	83 ec 0c             	sub    esp,0xc
c000fe4b:	68 70 22 02 c0       	push   0xc0022270
c000fe50:	e8 b4 10 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c000fe55:	83 c4 10             	add    esp,0x10
c000fe58:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe5d:	8a 00                	mov    al,BYTE PTR [eax]
c000fe5f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fe62:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe66:	83 f8 01             	cmp    eax,0x1
c000fe69:	75 15                	jne    c000fe80 <ACPI::open(int, int, void*)+0x50>
c000fe6b:	83 ec 0c             	sub    esp,0xc
c000fe6e:	68 ee 20 02 c0       	push   0xc00220ee
c000fe73:	e8 d1 4d 00 00       	call   c0014c49 <Thr::loadKernelSymbolTable(char const*)>
c000fe78:	83 c4 10             	add    esp,0x10
c000fe7b:	eb 33                	jmp    c000feb0 <ACPI::open(int, int, void*)+0x80>
c000fe7d:	8d 76 00             	lea    esi,[esi+0x0]
c000fe80:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe84:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe89:	75 15                	jne    c000fea0 <ACPI::open(int, int, void*)+0x70>
c000fe8b:	83 ec 0c             	sub    esp,0xc
c000fe8e:	68 0c 21 02 c0       	push   0xc002210c
c000fe93:	e8 b1 4d 00 00       	call   c0014c49 <Thr::loadKernelSymbolTable(char const*)>
c000fe98:	83 c4 10             	add    esp,0x10
c000fe9b:	eb 13                	jmp    c000feb0 <ACPI::open(int, int, void*)+0x80>
c000fe9d:	8d 76 00             	lea    esi,[esi+0x0]
c000fea0:	83 ec 0c             	sub    esp,0xc
c000fea3:	68 2a 21 02 c0       	push   0xc002212a
c000fea8:	e8 5a 17 00 00       	call   c0011607 <KePanic(char const*)>
c000fead:	83 c4 10             	add    esp,0x10
c000feb0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000feb4:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000febb:	83 ec 0c             	sub    esp,0xc
c000febe:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fec1:	e8 11 7c ff ff       	call   c0007ad7 <malloc>
c000fec6:	83 c4 10             	add    esp,0x10
c000fec9:	89 c3                	mov    ebx,eax
c000fecb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fed0:	83 ec 04             	sub    esp,0x4
c000fed3:	50                   	push   eax
c000fed4:	68 44 21 02 c0       	push   0xc0022144
c000fed9:	53                   	push   ebx
c000feda:	e8 47 bc ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c000fedf:	83 c4 10             	add    esp,0x10
c000fee2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fee5:	83 ec 08             	sub    esp,0x8
c000fee8:	6a 01                	push   0x1
c000feea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000feed:	e8 52 bc ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c000fef2:	83 c4 10             	add    esp,0x10
c000fef5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fef8:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fefc:	75 12                	jne    c000ff10 <ACPI::open(int, int, void*)+0xe0>
c000fefe:	83 ec 0c             	sub    esp,0xc
c000ff01:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff04:	e8 99 bc ff ff       	call   c000bba2 <File::close()>
c000ff09:	83 c4 10             	add    esp,0x10
c000ff0c:	eb 06                	jmp    c000ff14 <ACPI::open(int, int, void*)+0xe4>
c000ff0e:	66 90                	xchg   ax,ax
c000ff10:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ff14:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000ff18:	74 16                	je     c000ff30 <ACPI::open(int, int, void*)+0x100>
c000ff1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ff1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff1f:	83 c0 08             	add    eax,0x8
c000ff22:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff24:	83 ec 0c             	sub    esp,0xc
c000ff27:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff2a:	ff d0                	call   eax
c000ff2c:	83 c4 10             	add    esp,0x10
c000ff2f:	90                   	nop
c000ff30:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000ff33:	83 f0 01             	xor    eax,0x1
c000ff36:	0f b6 c0             	movzx  eax,al
c000ff39:	85 c0                	test   eax,eax
c000ff3b:	74 3b                	je     c000ff78 <ACPI::open(int, int, void*)+0x148>
c000ff3d:	83 ec 0c             	sub    esp,0xc
c000ff40:	68 62 21 02 c0       	push   0xc0022162
c000ff45:	e8 bf 0f 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c000ff4a:	83 c4 10             	add    esp,0x10
c000ff4d:	83 ec 04             	sub    esp,0x4
c000ff50:	6a 0c                	push   0xc
c000ff52:	68 7d 21 02 c0       	push   0xc002217d
c000ff57:	68 8e 21 02 c0       	push   0xc002218e
c000ff5c:	e8 21 3f 00 00       	call   c0013e82 <Reg::readIntWithDefault(char*, char*, int)>
c000ff61:	83 c4 10             	add    esp,0x10
c000ff64:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000ff67:	83 ec 0c             	sub    esp,0xc
c000ff6a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000ff6d:	e8 ac 98 ff ff       	call   c000981e <Virt::setupPageSwapping(int)>
c000ff72:	83 c4 10             	add    esp,0x10
c000ff75:	8d 76 00             	lea    esi,[esi+0x0]
c000ff78:	83 ec 0c             	sub    esp,0xc
c000ff7b:	68 eb 0b 02 c0       	push   0xc0020beb
c000ff80:	e8 84 0f 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c000ff85:	83 c4 10             	add    esp,0x10
c000ff88:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff8b:	83 ec 08             	sub    esp,0x8
c000ff8e:	6a 13                	push   0x13
c000ff90:	50                   	push   eax
c000ff91:	e8 3c cd ff ff       	call   c000ccd2 <getDevicesOfType(DeviceType)>
c000ff96:	83 c4 0c             	add    esp,0xc
c000ff99:	8d 76 00             	lea    esi,[esi+0x0]
c000ff9c:	83 ec 0c             	sub    esp,0xc
c000ff9f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffa2:	50                   	push   eax
c000ffa3:	e8 28 00 01 00       	call   c001ffd0 <LinkedList<Device>::isEmpty()>
c000ffa8:	83 c4 10             	add    esp,0x10
c000ffab:	83 f0 01             	xor    eax,0x1
c000ffae:	0f b6 c0             	movzx  eax,al
c000ffb1:	85 c0                	test   eax,eax
c000ffb3:	0f 84 1f 01 00 00    	je     c00100d8 <ACPI::open(int, int, void*)+0x2a8>
c000ffb9:	83 ec 0c             	sub    esp,0xc
c000ffbc:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffbf:	50                   	push   eax
c000ffc0:	e8 27 00 01 00       	call   c001ffec <LinkedList<Device>::getFirstElement()>
c000ffc5:	83 c4 10             	add    esp,0x10
c000ffc8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000ffcb:	83 ec 0c             	sub    esp,0xc
c000ffce:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffd1:	50                   	push   eax
c000ffd2:	e8 1d 00 01 00       	call   c001fff4 <LinkedList<Device>::removeFirst()>
c000ffd7:	83 c4 10             	add    esp,0x10
c000ffda:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ffdd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ffe0:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ffe3:	b8 24 00 00 00       	mov    eax,0x24
c000ffe8:	83 e0 fc             	and    eax,0xfffffffc
c000ffeb:	89 c3                	mov    ebx,eax
c000ffed:	b8 00 00 00 00       	mov    eax,0x0
c000fff2:	66 90                	xchg   ax,ax
c000fff4:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fffb:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c0010002:	83 c0 04             	add    eax,0x4
c0010005:	39 d8                	cmp    eax,ebx
c0010007:	72 eb                	jb     c000fff4 <ACPI::open(int, int, void*)+0x1c4>
c0010009:	83 ec 08             	sub    esp,0x8
c001000c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c0010012:	50                   	push   eax
c0010013:	83 ec 24             	sub    esp,0x24
c0010016:	89 e1                	mov    ecx,esp
c0010018:	b8 24 00 00 00       	mov    eax,0x24
c001001d:	83 e0 fc             	and    eax,0xfffffffc
c0010020:	89 c3                	mov    ebx,eax
c0010022:	b8 00 00 00 00       	mov    eax,0x0
c0010027:	90                   	nop
c0010028:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c001002f:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c0010032:	83 c0 04             	add    eax,0x4
c0010035:	39 d8                	cmp    eax,ebx
c0010037:	72 ef                	jb     c0010028 <ACPI::open(int, int, void*)+0x1f8>
c0010039:	e8 cc b6 00 00       	call   c001b70a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001003e:	83 c4 30             	add    esp,0x30
c0010041:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0010044:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0010048:	0f 84 4e ff ff ff    	je     c000ff9c <ACPI::open(int, int, void*)+0x16c>
c001004e:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c0010055:	83 ec 0c             	sub    esp,0xc
c0010058:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c001005b:	e8 77 7a ff ff       	call   c0007ad7 <malloc>
c0010060:	83 c4 10             	add    esp,0x10
c0010063:	89 c3                	mov    ebx,eax
c0010065:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001006a:	83 ec 04             	sub    esp,0x4
c001006d:	50                   	push   eax
c001006e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0010071:	53                   	push   ebx
c0010072:	e8 af ba ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c0010077:	83 c4 10             	add    esp,0x10
c001007a:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c001007d:	83 ec 0c             	sub    esp,0xc
c0010080:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c0010083:	e8 80 bd ff ff       	call   c000be08 <File::exists()>
c0010088:	83 c4 10             	add    esp,0x10
c001008b:	0f b6 c0             	movzx  eax,al
c001008e:	85 c0                	test   eax,eax
c0010090:	74 22                	je     c00100b4 <ACPI::open(int, int, void*)+0x284>
c0010092:	83 ec 08             	sub    esp,0x8
c0010095:	6a 01                	push   0x1
c0010097:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001009a:	e8 2c 56 00 00       	call   c00156cb <Thr::loadDLL(char const*, bool)>
c001009f:	83 c4 10             	add    esp,0x10
c00100a2:	83 ec 08             	sub    esp,0x8
c00100a5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00100a8:	50                   	push   eax
c00100a9:	e8 5d 58 00 00       	call   c001590b <Thr::executeDLL(unsigned long, void*)>
c00100ae:	83 c4 10             	add    esp,0x10
c00100b1:	8d 76 00             	lea    esi,[esi+0x0]
c00100b4:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00100b8:	0f 84 de fe ff ff    	je     c000ff9c <ACPI::open(int, int, void*)+0x16c>
c00100be:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00100c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00100c3:	83 c0 08             	add    eax,0x8
c00100c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00100c8:	83 ec 0c             	sub    esp,0xc
c00100cb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c00100ce:	ff d0                	call   eax
c00100d0:	83 c4 10             	add    esp,0x10
c00100d3:	e9 c4 fe ff ff       	jmp    c000ff9c <ACPI::open(int, int, void*)+0x16c>
c00100d8:	83 ec 0c             	sub    esp,0xc
c00100db:	8d 45 b8             	lea    eax,[ebp-0x48]
c00100de:	50                   	push   eax
c00100df:	e8 e8 fe 00 00       	call   c001ffcc <LinkedList<Device>::~LinkedList()>
c00100e4:	83 c4 10             	add    esp,0x10
c00100e7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c00100ed:	83 ec 08             	sub    esp,0x8
c00100f0:	6a 01                	push   0x1
c00100f2:	68 95 21 02 c0       	push   0xc0022195
c00100f7:	e8 cf 55 00 00       	call   c00156cb <Thr::loadDLL(char const*, bool)>
c00100fc:	83 c4 10             	add    esp,0x10
c00100ff:	83 ec 08             	sub    esp,0x8
c0010102:	53                   	push   ebx
c0010103:	50                   	push   eax
c0010104:	e8 02 58 00 00       	call   c001590b <Thr::executeDLL(unsigned long, void*)>
c0010109:	83 c4 10             	add    esp,0x10
c001010c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010111:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0010117:	83 e0 04             	and    eax,0x4
c001011a:	0f b6 c0             	movzx  eax,al
c001011d:	85 c0                	test   eax,eax
c001011f:	0f 84 e3 00 00 00    	je     c0010208 <ACPI::open(int, int, void*)+0x3d8>
c0010125:	83 ec 0c             	sub    esp,0xc
c0010128:	68 b2 21 02 c0       	push   0xc00221b2
c001012d:	e8 d7 0d 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c0010132:	83 c4 10             	add    esp,0x10
c0010135:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001013c:	83 ec 0c             	sub    esp,0xc
c001013f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c0010142:	e8 90 79 ff ff       	call   c0007ad7 <malloc>
c0010147:	83 c4 10             	add    esp,0x10
c001014a:	89 c3                	mov    ebx,eax
c001014c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010151:	83 ec 04             	sub    esp,0x4
c0010154:	50                   	push   eax
c0010155:	68 cf 21 02 c0       	push   0xc00221cf
c001015a:	53                   	push   ebx
c001015b:	e8 c6 b9 ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c0010160:	83 c4 10             	add    esp,0x10
c0010163:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0010166:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001016a:	74 1c                	je     c0010188 <ACPI::open(int, int, void*)+0x358>
c001016c:	83 ec 0c             	sub    esp,0xc
c001016f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c0010172:	e8 91 bc ff ff       	call   c000be08 <File::exists()>
c0010177:	83 c4 10             	add    esp,0x10
c001017a:	0f b6 c0             	movzx  eax,al
c001017d:	85 c0                	test   eax,eax
c001017f:	74 07                	je     c0010188 <ACPI::open(int, int, void*)+0x358>
c0010181:	b0 01                	mov    al,0x1
c0010183:	eb 07                	jmp    c001018c <ACPI::open(int, int, void*)+0x35c>
c0010185:	8d 76 00             	lea    esi,[esi+0x0]
c0010188:	b0 00                	mov    al,0x0
c001018a:	66 90                	xchg   ax,ax
c001018c:	0f b6 c0             	movzx  eax,al
c001018f:	85 c0                	test   eax,eax
c0010191:	74 21                	je     c00101b4 <ACPI::open(int, int, void*)+0x384>
c0010193:	83 ec 08             	sub    esp,0x8
c0010196:	6a 01                	push   0x1
c0010198:	68 cf 21 02 c0       	push   0xc00221cf
c001019d:	e8 29 55 00 00       	call   c00156cb <Thr::loadDLL(char const*, bool)>
c00101a2:	83 c4 10             	add    esp,0x10
c00101a5:	83 ec 08             	sub    esp,0x8
c00101a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00101ab:	50                   	push   eax
c00101ac:	e8 5a 57 00 00       	call   c001590b <Thr::executeDLL(unsigned long, void*)>
c00101b1:	83 c4 10             	add    esp,0x10
c00101b4:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00101b8:	74 1e                	je     c00101d8 <ACPI::open(int, int, void*)+0x3a8>
c00101ba:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00101be:	74 18                	je     c00101d8 <ACPI::open(int, int, void*)+0x3a8>
c00101c0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00101c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00101c5:	83 c0 08             	add    eax,0x8
c00101c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00101ca:	83 ec 0c             	sub    esp,0xc
c00101cd:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c00101d0:	ff d0                	call   eax
c00101d2:	83 c4 10             	add    esp,0x10
c00101d5:	8d 76 00             	lea    esi,[esi+0x0]
c00101d8:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00101dd:	83 ec 08             	sub    esp,0x8
c00101e0:	68 ec 21 02 c0       	push   0xc00221ec
c00101e5:	50                   	push   eax
c00101e6:	e8 65 f2 ff ff       	call   c000f450 <findDataTable(unsigned char*, char*)>
c00101eb:	83 c4 10             	add    esp,0x10
c00101ee:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00101f1:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00101f5:	74 11                	je     c0010208 <ACPI::open(int, int, void*)+0x3d8>
c00101f7:	83 ec 08             	sub    esp,0x8
c00101fa:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00101fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010200:	e8 c7 fb ff ff       	call   c000fdcc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010205:	83 c4 10             	add    esp,0x10
c0010208:	b8 00 00 00 00       	mov    eax,0x0
c001020d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010210:	c9                   	leave  
c0010211:	c3                   	ret    

c0010212 <CPU::close(int, int, void*)>:
c0010212:	31 c0                	xor    eax,eax
c0010214:	c3                   	ret    
c0010215:	90                   	nop

c0010216 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010216:	60                   	pusha  
c0010217:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001021b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001021f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010223:	9c                   	pushf  
c0010224:	fa                   	cli    
c0010225:	0f 09                	wbinvd 
c0010227:	0f 30                	wrmsr  
c0010229:	9d                   	popf   
c001022a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001022e:	89 02                	mov    DWORD PTR [edx],eax
c0010230:	61                   	popa   
c0010231:	c3                   	ret    

c0010232 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010232:	60                   	pusha  
c0010233:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010237:	9c                   	pushf  
c0010238:	fa                   	cli    
c0010239:	0f 09                	wbinvd 
c001023b:	31 c0                	xor    eax,eax
c001023d:	31 d2                	xor    edx,edx
c001023f:	0f 32                	rdmsr  
c0010241:	9d                   	popf   
c0010242:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010246:	89 02                	mov    DWORD PTR [edx],eax
c0010248:	61                   	popa   
c0010249:	c3                   	ret    

c001024a <CPU::AMD_K6_writeback(int, int, int)>:
c001024a:	56                   	push   esi
c001024b:	53                   	push   ebx
c001024c:	83 ec 10             	sub    esp,0x10
c001024f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010258:	75 5d                	jne    c00102b7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001025a:	83 f8 08             	cmp    eax,0x8
c001025d:	75 09                	jne    c0010268 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001025f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010264:	7e 13                	jle    c0010279 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010266:	eb 30                	jmp    c0010298 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010268:	83 f8 06             	cmp    eax,0x6
c001026b:	7c 4a                	jl     c00102b7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001026d:	83 f8 07             	cmp    eax,0x7
c0010270:	7e 07                	jle    c0010279 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010272:	83 f8 09             	cmp    eax,0x9
c0010275:	74 21                	je     c0010298 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010277:	eb 3e                	jmp    c00102b7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010279:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c001027f:	89 e6                	mov    esi,esp
c0010281:	56                   	push   esi
c0010282:	68 82 00 00 c0       	push   0xc0000082
c0010287:	e8 a6 ff ff ff       	call   c0010232 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001028c:	c1 eb 15             	shr    ebx,0x15
c001028f:	56                   	push   esi
c0010290:	83 e3 7e             	and    ebx,0x7e
c0010293:	6a 00                	push   0x0
c0010295:	53                   	push   ebx
c0010296:	eb 12                	jmp    c00102aa <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010298:	89 e3                	mov    ebx,esp
c001029a:	53                   	push   ebx
c001029b:	68 82 00 00 c0       	push   0xc0000082
c00102a0:	e8 8d ff ff ff       	call   c0010232 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102a5:	53                   	push   ebx
c00102a6:	6a 00                	push   0x0
c00102a8:	6a 00                	push   0x0
c00102aa:	68 82 00 00 c0       	push   0xc0000082
c00102af:	e8 62 ff ff ff       	call   c0010216 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00102b4:	83 c4 18             	add    esp,0x18
c00102b7:	83 c4 10             	add    esp,0x10
c00102ba:	5b                   	pop    ebx
c00102bb:	5e                   	pop    esi
c00102bc:	c3                   	ret    
c00102bd:	90                   	nop

c00102be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00102be:	55                   	push   ebp
c00102bf:	57                   	push   edi
c00102c0:	56                   	push   esi
c00102c1:	53                   	push   ebx
c00102c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102c6:	39 05 58 38 02 c0    	cmp    DWORD PTR ds:0xc0023858,eax
c00102cc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00102d0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102d4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00102d8:	75 23                	jne    c00102fd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00102da:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00102df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00102e3:	89 06                	mov    DWORD PTR [esi],eax
c00102e5:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00102ea:	89 07                	mov    DWORD PTR [edi],eax
c00102ec:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00102f1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102f4:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c00102f9:	89 02                	mov    DWORD PTR [edx],eax
c00102fb:	eb 3f                	jmp    c001033c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00102fd:	31 c9                	xor    ecx,ecx
c00102ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010303:	0f a2                	cpuid  
c0010305:	89 06                	mov    DWORD PTR [esi],eax
c0010307:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001030b:	89 1f                	mov    DWORD PTR [edi],ebx
c001030d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010310:	89 10                	mov    DWORD PTR [eax],edx
c0010312:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010316:	a3 58 38 02 c0       	mov    ds:0xc0023858,eax
c001031b:	8b 06                	mov    eax,DWORD PTR [esi]
c001031d:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010322:	8b 07                	mov    eax,DWORD PTR [edi]
c0010324:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010329:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001032c:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010331:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010335:	8b 00                	mov    eax,DWORD PTR [eax]
c0010337:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c001033c:	5b                   	pop    ebx
c001033d:	5e                   	pop    esi
c001033e:	5f                   	pop    edi
c001033f:	5d                   	pop    ebp
c0010340:	c3                   	ret    
c0010341:	90                   	nop

c0010342 <CPU::cpuidCheckEDX(unsigned int)>:
c0010342:	83 ec 10             	sub    esp,0x10
c0010345:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010349:	50                   	push   eax
c001034a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001034e:	50                   	push   eax
c001034f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010353:	50                   	push   eax
c0010354:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010358:	50                   	push   eax
c0010359:	6a 01                	push   0x1
c001035b:	e8 5e ff ff ff       	call   c00102be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010360:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010364:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010368:	0f 95 c0             	setne  al
c001036b:	83 c4 24             	add    esp,0x24
c001036e:	c3                   	ret    
c001036f:	90                   	nop

c0010370 <CPU::cpuidCheckECX(unsigned int)>:
c0010370:	83 ec 10             	sub    esp,0x10
c0010373:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010377:	50                   	push   eax
c0010378:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001037c:	50                   	push   eax
c001037d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010381:	50                   	push   eax
c0010382:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010386:	50                   	push   eax
c0010387:	6a 01                	push   0x1
c0010389:	e8 30 ff ff ff       	call   c00102be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001038e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010392:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010396:	0f 95 c0             	setne  al
c0010399:	83 c4 24             	add    esp,0x24
c001039c:	c3                   	ret    
c001039d:	90                   	nop

c001039e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001039e:	83 ec 10             	sub    esp,0x10
c00103a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103a5:	50                   	push   eax
c00103a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103aa:	50                   	push   eax
c00103ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103af:	50                   	push   eax
c00103b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b4:	50                   	push   eax
c00103b5:	6a 07                	push   0x7
c00103b7:	e8 02 ff ff ff       	call   c00102be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103c0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00103c4:	0f 95 c0             	setne  al
c00103c7:	83 c4 24             	add    esp,0x24
c00103ca:	c3                   	ret    
c00103cb:	90                   	nop

c00103cc <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00103cc:	83 ec 10             	sub    esp,0x10
c00103cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103d3:	50                   	push   eax
c00103d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103d8:	50                   	push   eax
c00103d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103dd:	50                   	push   eax
c00103de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103e2:	50                   	push   eax
c00103e3:	6a 07                	push   0x7
c00103e5:	e8 d4 fe ff ff       	call   c00102be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103ee:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103f2:	0f 95 c0             	setne  al
c00103f5:	83 c4 24             	add    esp,0x24
c00103f8:	c3                   	ret    
c00103f9:	90                   	nop

c00103fa <CPU::CPU()>:
c00103fa:	83 ec 0c             	sub    esp,0xc
c00103fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010401:	83 ec 08             	sub    esp,0x8
c0010404:	68 ad 23 02 c0       	push   0xc00223ad
c0010409:	50                   	push   eax
c001040a:	e8 f7 c6 ff ff       	call   c000cb06 <Device::Device(char const*)>
c001040f:	83 c4 10             	add    esp,0x10
c0010412:	ba 40 24 02 c0       	mov    edx,0xc0022440
c0010417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001041b:	89 10                	mov    DWORD PTR [eax],edx
c001041d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010421:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001042b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001042f:	05 78 01 00 00       	add    eax,0x178
c0010434:	83 ec 0c             	sub    esp,0xc
c0010437:	50                   	push   eax
c0010438:	e8 43 6f ff ff       	call   c0007380 <GDT::GDT()>
c001043d:	83 c4 10             	add    esp,0x10
c0010440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010444:	05 7c 09 00 00       	add    eax,0x97c
c0010449:	83 ec 0c             	sub    esp,0xc
c001044c:	50                   	push   eax
c001044d:	e8 7e 71 ff ff       	call   c00075d0 <IDT::IDT()>
c0010452:	83 c4 10             	add    esp,0x10
c0010455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010459:	05 7c 11 00 00       	add    eax,0x117c
c001045e:	83 ec 0c             	sub    esp,0xc
c0010461:	50                   	push   eax
c0010462:	e8 c9 8a ff ff       	call   c0008f30 <TSS::TSS()>
c0010467:	83 c4 10             	add    esp,0x10
c001046a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001046e:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010479:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010483:	90                   	nop
c0010484:	83 c4 0c             	add    esp,0xc
c0010487:	c3                   	ret    

c0010488 <CPU::displayFeatures()>:
c0010488:	c3                   	ret    
c0010489:	90                   	nop

c001048a <CPU::detectFeatures()>:
c001048a:	55                   	push   ebp
c001048b:	57                   	push   edi
c001048c:	56                   	push   esi
c001048d:	53                   	push   ebx
c001048e:	83 ec 30             	sub    esp,0x30
c0010491:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010495:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001049f:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00104a5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00104ac:	6a 0d                	push   0xd
c00104ae:	6a 00                	push   0x0
c00104b0:	55                   	push   ebp
c00104b1:	e8 3a 00 ff ff       	call   c00004f0 <memset>
c00104b6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00104bb:	83 c4 10             	add    esp,0x10
c00104be:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00104c5:	0f 84 db 05 00 00    	je     c0010aa6 <CPU::detectFeatures()+0x61c>
c00104cb:	83 ec 0c             	sub    esp,0xc
c00104ce:	89 ef                	mov    edi,ebp
c00104d0:	6a 10                	push   0x10
c00104d2:	e8 6b fe ff ff       	call   c0010342 <CPU::cpuidCheckEDX(unsigned int)>
c00104d7:	83 e0 01             	and    eax,0x1
c00104da:	8d 14 00             	lea    edx,[eax+eax*1]
c00104dd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104e3:	83 e0 fd             	and    eax,0xfffffffd
c00104e6:	09 d0                	or     eax,edx
c00104e8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104ee:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00104f5:	e8 48 fe ff ff       	call   c0010342 <CPU::cpuidCheckEDX(unsigned int)>
c00104fa:	83 e0 01             	and    eax,0x1
c00104fd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010504:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001050a:	83 e0 fb             	and    eax,0xfffffffb
c001050d:	09 d0                	or     eax,edx
c001050f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010515:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001051c:	e8 21 fe ff ff       	call   c0010342 <CPU::cpuidCheckEDX(unsigned int)>
c0010521:	83 e0 01             	and    eax,0x1
c0010524:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001052b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010531:	83 e0 f7             	and    eax,0xfffffff7
c0010534:	09 d0                	or     eax,edx
c0010536:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001053c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010543:	e8 fa fd ff ff       	call   c0010342 <CPU::cpuidCheckEDX(unsigned int)>
c0010548:	83 e0 01             	and    eax,0x1
c001054b:	c1 e0 04             	shl    eax,0x4
c001054e:	89 c2                	mov    edx,eax
c0010550:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010556:	83 e0 ef             	and    eax,0xffffffef
c0010559:	09 d0                	or     eax,edx
c001055b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010561:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010568:	e8 d5 fd ff ff       	call   c0010342 <CPU::cpuidCheckEDX(unsigned int)>
c001056d:	83 e0 01             	and    eax,0x1
c0010570:	c1 e0 05             	shl    eax,0x5
c0010573:	89 c2                	mov    edx,eax
c0010575:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001057b:	83 e0 df             	and    eax,0xffffffdf
c001057e:	09 d0                	or     eax,edx
c0010580:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010586:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001058d:	e8 b0 fd ff ff       	call   c0010342 <CPU::cpuidCheckEDX(unsigned int)>
c0010592:	83 e0 01             	and    eax,0x1
c0010595:	8d 14 00             	lea    edx,[eax+eax*1]
c0010598:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001059e:	83 e0 fd             	and    eax,0xfffffffd
c00105a1:	09 d0                	or     eax,edx
c00105a3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00105a9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00105b0:	e8 8d fd ff ff       	call   c0010342 <CPU::cpuidCheckEDX(unsigned int)>
c00105b5:	83 e0 01             	and    eax,0x1
c00105b8:	c1 e0 06             	shl    eax,0x6
c00105bb:	89 c2                	mov    edx,eax
c00105bd:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105c3:	83 e0 bf             	and    eax,0xffffffbf
c00105c6:	09 d0                	or     eax,edx
c00105c8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105ce:	58                   	pop    eax
c00105cf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105d3:	50                   	push   eax
c00105d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105d8:	50                   	push   eax
c00105d9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105dd:	56                   	push   esi
c00105de:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105e2:	50                   	push   eax
c00105e3:	6a 00                	push   0x0
c00105e5:	e8 d4 fc ff ff       	call   c00102be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105ea:	b8 04 00 00 00       	mov    eax,0x4
c00105ef:	89 c1                	mov    ecx,eax
c00105f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105f3:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00105f9:	89 c1                	mov    ecx,eax
c00105fb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00105ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010601:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010607:	89 c1                	mov    ecx,eax
c0010609:	8d 74 24 38          	lea    esi,[esp+0x38]
c001060d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001060f:	83 c4 18             	add    esp,0x18
c0010612:	68 bc 22 02 c0       	push   0xc00222bc
c0010617:	55                   	push   ebp
c0010618:	e8 63 01 ff ff       	call   c0000780 <strcmp>
c001061d:	83 c4 10             	add    esp,0x10
c0010620:	85 c0                	test   eax,eax
c0010622:	75 0f                	jne    c0010633 <CPU::detectFeatures()+0x1a9>
c0010624:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001062e:	e9 22 02 00 00       	jmp    c0010855 <CPU::detectFeatures()+0x3cb>
c0010633:	50                   	push   eax
c0010634:	50                   	push   eax
c0010635:	68 c9 22 02 c0       	push   0xc00222c9
c001063a:	55                   	push   ebp
c001063b:	e8 40 01 ff ff       	call   c0000780 <strcmp>
c0010640:	83 c4 10             	add    esp,0x10
c0010643:	85 c0                	test   eax,eax
c0010645:	74 dd                	je     c0010624 <CPU::detectFeatures()+0x19a>
c0010647:	50                   	push   eax
c0010648:	50                   	push   eax
c0010649:	68 d6 22 02 c0       	push   0xc00222d6
c001064e:	55                   	push   ebp
c001064f:	e8 2c 01 ff ff       	call   c0000780 <strcmp>
c0010654:	83 c4 10             	add    esp,0x10
c0010657:	85 c0                	test   eax,eax
c0010659:	74 2a                	je     c0010685 <CPU::detectFeatures()+0x1fb>
c001065b:	50                   	push   eax
c001065c:	50                   	push   eax
c001065d:	68 e3 22 02 c0       	push   0xc00222e3
c0010662:	55                   	push   ebp
c0010663:	e8 18 01 ff ff       	call   c0000780 <strcmp>
c0010668:	83 c4 10             	add    esp,0x10
c001066b:	85 c0                	test   eax,eax
c001066d:	74 16                	je     c0010685 <CPU::detectFeatures()+0x1fb>
c001066f:	50                   	push   eax
c0010670:	50                   	push   eax
c0010671:	68 f0 22 02 c0       	push   0xc00222f0
c0010676:	55                   	push   ebp
c0010677:	e8 04 01 ff ff       	call   c0000780 <strcmp>
c001067c:	83 c4 10             	add    esp,0x10
c001067f:	85 c0                	test   eax,eax
c0010681:	74 48                	je     c00106cb <CPU::detectFeatures()+0x241>
c0010683:	eb 0f                	jmp    c0010694 <CPU::detectFeatures()+0x20a>
c0010685:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001068f:	e9 c1 01 00 00       	jmp    c0010855 <CPU::detectFeatures()+0x3cb>
c0010694:	50                   	push   eax
c0010695:	50                   	push   eax
c0010696:	68 fd 22 02 c0       	push   0xc00222fd
c001069b:	55                   	push   ebp
c001069c:	e8 df 00 ff ff       	call   c0000780 <strcmp>
c00106a1:	83 c4 10             	add    esp,0x10
c00106a4:	85 c0                	test   eax,eax
c00106a6:	74 23                	je     c00106cb <CPU::detectFeatures()+0x241>
c00106a8:	57                   	push   edi
c00106a9:	57                   	push   edi
c00106aa:	68 0a 23 02 c0       	push   0xc002230a
c00106af:	55                   	push   ebp
c00106b0:	e8 cb 00 ff ff       	call   c0000780 <strcmp>
c00106b5:	83 c4 10             	add    esp,0x10
c00106b8:	85 c0                	test   eax,eax
c00106ba:	75 1e                	jne    c00106da <CPU::detectFeatures()+0x250>
c00106bc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00106c6:	e9 8a 01 00 00       	jmp    c0010855 <CPU::detectFeatures()+0x3cb>
c00106cb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00106d5:	e9 7b 01 00 00       	jmp    c0010855 <CPU::detectFeatures()+0x3cb>
c00106da:	56                   	push   esi
c00106db:	56                   	push   esi
c00106dc:	68 17 23 02 c0       	push   0xc0022317
c00106e1:	55                   	push   ebp
c00106e2:	e8 99 00 ff ff       	call   c0000780 <strcmp>
c00106e7:	83 c4 10             	add    esp,0x10
c00106ea:	85 c0                	test   eax,eax
c00106ec:	75 0f                	jne    c00106fd <CPU::detectFeatures()+0x273>
c00106ee:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00106f8:	e9 58 01 00 00       	jmp    c0010855 <CPU::detectFeatures()+0x3cb>
c00106fd:	51                   	push   ecx
c00106fe:	51                   	push   ecx
c00106ff:	68 d6 22 02 c0       	push   0xc00222d6
c0010704:	55                   	push   ebp
c0010705:	e8 76 00 ff ff       	call   c0000780 <strcmp>
c001070a:	83 c4 10             	add    esp,0x10
c001070d:	85 c0                	test   eax,eax
c001070f:	75 0f                	jne    c0010720 <CPU::detectFeatures()+0x296>
c0010711:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001071b:	e9 35 01 00 00       	jmp    c0010855 <CPU::detectFeatures()+0x3cb>
c0010720:	52                   	push   edx
c0010721:	52                   	push   edx
c0010722:	68 24 23 02 c0       	push   0xc0022324
c0010727:	55                   	push   ebp
c0010728:	e8 53 00 ff ff       	call   c0000780 <strcmp>
c001072d:	83 c4 10             	add    esp,0x10
c0010730:	85 c0                	test   eax,eax
c0010732:	75 0f                	jne    c0010743 <CPU::detectFeatures()+0x2b9>
c0010734:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001073e:	e9 12 01 00 00       	jmp    c0010855 <CPU::detectFeatures()+0x3cb>
c0010743:	50                   	push   eax
c0010744:	50                   	push   eax
c0010745:	68 31 23 02 c0       	push   0xc0022331
c001074a:	55                   	push   ebp
c001074b:	e8 30 00 ff ff       	call   c0000780 <strcmp>
c0010750:	83 c4 10             	add    esp,0x10
c0010753:	85 c0                	test   eax,eax
c0010755:	75 0f                	jne    c0010766 <CPU::detectFeatures()+0x2dc>
c0010757:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010761:	e9 ef 00 00 00       	jmp    c0010855 <CPU::detectFeatures()+0x3cb>
c0010766:	50                   	push   eax
c0010767:	50                   	push   eax
c0010768:	68 3e 23 02 c0       	push   0xc002233e
c001076d:	55                   	push   ebp
c001076e:	e8 0d 00 ff ff       	call   c0000780 <strcmp>
c0010773:	83 c4 10             	add    esp,0x10
c0010776:	85 c0                	test   eax,eax
c0010778:	75 0f                	jne    c0010789 <CPU::detectFeatures()+0x2ff>
c001077a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010784:	e9 cc 00 00 00       	jmp    c0010855 <CPU::detectFeatures()+0x3cb>
c0010789:	50                   	push   eax
c001078a:	50                   	push   eax
c001078b:	68 4b 23 02 c0       	push   0xc002234b
c0010790:	55                   	push   ebp
c0010791:	e8 ea ff fe ff       	call   c0000780 <strcmp>
c0010796:	83 c4 10             	add    esp,0x10
c0010799:	85 c0                	test   eax,eax
c001079b:	75 0f                	jne    c00107ac <CPU::detectFeatures()+0x322>
c001079d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00107a7:	e9 a9 00 00 00       	jmp    c0010855 <CPU::detectFeatures()+0x3cb>
c00107ac:	50                   	push   eax
c00107ad:	50                   	push   eax
c00107ae:	68 58 23 02 c0       	push   0xc0022358
c00107b3:	55                   	push   ebp
c00107b4:	e8 c7 ff fe ff       	call   c0000780 <strcmp>
c00107b9:	83 c4 10             	add    esp,0x10
c00107bc:	85 c0                	test   eax,eax
c00107be:	75 0f                	jne    c00107cf <CPU::detectFeatures()+0x345>
c00107c0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00107ca:	e9 86 00 00 00       	jmp    c0010855 <CPU::detectFeatures()+0x3cb>
c00107cf:	50                   	push   eax
c00107d0:	50                   	push   eax
c00107d1:	68 65 23 02 c0       	push   0xc0022365
c00107d6:	55                   	push   ebp
c00107d7:	e8 a4 ff fe ff       	call   c0000780 <strcmp>
c00107dc:	83 c4 10             	add    esp,0x10
c00107df:	85 c0                	test   eax,eax
c00107e1:	75 0c                	jne    c00107ef <CPU::detectFeatures()+0x365>
c00107e3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00107ed:	eb 66                	jmp    c0010855 <CPU::detectFeatures()+0x3cb>
c00107ef:	50                   	push   eax
c00107f0:	50                   	push   eax
c00107f1:	68 72 23 02 c0       	push   0xc0022372
c00107f6:	55                   	push   ebp
c00107f7:	e8 84 ff fe ff       	call   c0000780 <strcmp>
c00107fc:	83 c4 10             	add    esp,0x10
c00107ff:	85 c0                	test   eax,eax
c0010801:	75 0c                	jne    c001080f <CPU::detectFeatures()+0x385>
c0010803:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001080d:	eb 46                	jmp    c0010855 <CPU::detectFeatures()+0x3cb>
c001080f:	57                   	push   edi
c0010810:	57                   	push   edi
c0010811:	68 7f 23 02 c0       	push   0xc002237f
c0010816:	55                   	push   ebp
c0010817:	e8 64 ff fe ff       	call   c0000780 <strcmp>
c001081c:	83 c4 10             	add    esp,0x10
c001081f:	85 c0                	test   eax,eax
c0010821:	74 e0                	je     c0010803 <CPU::detectFeatures()+0x379>
c0010823:	56                   	push   esi
c0010824:	56                   	push   esi
c0010825:	68 8c 23 02 c0       	push   0xc002238c
c001082a:	55                   	push   ebp
c001082b:	e8 50 ff fe ff       	call   c0000780 <strcmp>
c0010830:	83 c4 10             	add    esp,0x10
c0010833:	85 c0                	test   eax,eax
c0010835:	74 cc                	je     c0010803 <CPU::detectFeatures()+0x379>
c0010837:	51                   	push   ecx
c0010838:	51                   	push   ecx
c0010839:	68 99 23 02 c0       	push   0xc0022399
c001083e:	55                   	push   ebp
c001083f:	e8 3c ff fe ff       	call   c0000780 <strcmp>
c0010844:	83 c4 10             	add    esp,0x10
c0010847:	85 c0                	test   eax,eax
c0010849:	74 b8                	je     c0010803 <CPU::detectFeatures()+0x379>
c001084b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010855:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001085a:	0f 86 be 00 00 00    	jbe    c001091e <CPU::detectFeatures()+0x494>
c0010860:	83 ec 0c             	sub    esp,0xc
c0010863:	68 80 00 00 00       	push   0x80
c0010868:	e8 31 fb ff ff       	call   c001039e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001086d:	83 e0 01             	and    eax,0x1
c0010870:	c1 e0 06             	shl    eax,0x6
c0010873:	89 c2                	mov    edx,eax
c0010875:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001087b:	83 e0 bf             	and    eax,0xffffffbf
c001087e:	09 d0                	or     eax,edx
c0010880:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010886:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001088d:	e8 0c fb ff ff       	call   c001039e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010892:	83 e0 01             	and    eax,0x1
c0010895:	c1 e0 04             	shl    eax,0x4
c0010898:	89 c2                	mov    edx,eax
c001089a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108a0:	83 e0 ef             	and    eax,0xffffffef
c00108a3:	09 d0                	or     eax,edx
c00108a5:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108ab:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00108b2:	e8 e7 fa ff ff       	call   c001039e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108b7:	89 c2                	mov    edx,eax
c00108b9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00108bf:	c1 e2 07             	shl    edx,0x7
c00108c2:	83 e0 7f             	and    eax,0x7f
c00108c5:	09 d0                	or     eax,edx
c00108c7:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108cd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00108d4:	e8 f3 fa ff ff       	call   c00103cc <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108d9:	83 e0 01             	and    eax,0x1
c00108dc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00108e3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108e9:	83 e0 f7             	and    eax,0xfffffff7
c00108ec:	09 d0                	or     eax,edx
c00108ee:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108f4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00108fb:	e8 cc fa ff ff       	call   c00103cc <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010900:	83 c4 10             	add    esp,0x10
c0010903:	83 e0 01             	and    eax,0x1
c0010906:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001090d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010913:	83 e0 fb             	and    eax,0xfffffffb
c0010916:	09 d0                	or     eax,edx
c0010918:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001091e:	83 ec 0c             	sub    esp,0xc
c0010921:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010925:	50                   	push   eax
c0010926:	8d 44 24 28          	lea    eax,[esp+0x28]
c001092a:	50                   	push   eax
c001092b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001092f:	57                   	push   edi
c0010930:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010934:	56                   	push   esi
c0010935:	6a 01                	push   0x1
c0010937:	e8 82 f9 ff ff       	call   c00102be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001093c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010940:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010946:	89 c1                	mov    ecx,eax
c0010948:	83 e1 0f             	and    ecx,0xf
c001094b:	83 e2 f0             	and    edx,0xfffffff0
c001094e:	09 ca                	or     edx,ecx
c0010950:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010956:	89 c2                	mov    edx,eax
c0010958:	c1 ea 04             	shr    edx,0x4
c001095b:	83 e2 0f             	and    edx,0xf
c001095e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010962:	89 d1                	mov    ecx,edx
c0010964:	83 c4 20             	add    esp,0x20
c0010967:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001096d:	c1 e1 06             	shl    ecx,0x6
c0010970:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010976:	09 ca                	or     edx,ecx
c0010978:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001097f:	89 c2                	mov    edx,eax
c0010981:	c1 ea 08             	shr    edx,0x8
c0010984:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001098a:	83 e2 0f             	and    edx,0xf
c001098d:	89 d5                	mov    ebp,edx
c001098f:	83 e5 03             	and    ebp,0x3
c0010992:	c1 e5 06             	shl    ebp,0x6
c0010995:	83 e1 3f             	and    ecx,0x3f
c0010998:	09 e9                	or     ecx,ebp
c001099a:	89 d5                	mov    ebp,edx
c001099c:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00109a2:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00109a8:	c1 ed 02             	shr    ebp,0x2
c00109ab:	83 e1 c0             	and    ecx,0xffffffc0
c00109ae:	09 e9                	or     ecx,ebp
c00109b0:	89 c5                	mov    ebp,eax
c00109b2:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00109b8:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00109be:	c1 ed 08             	shr    ebp,0x8
c00109c1:	83 e5 30             	and    ebp,0x30
c00109c4:	83 e1 cf             	and    ecx,0xffffffcf
c00109c7:	09 e9                	or     ecx,ebp
c00109c9:	83 fa 06             	cmp    edx,0x6
c00109cc:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00109d2:	74 05                	je     c00109d9 <CPU::detectFeatures()+0x54f>
c00109d4:	83 fa 0f             	cmp    edx,0xf
c00109d7:	75 64                	jne    c0010a3d <CPU::detectFeatures()+0x5b3>
c00109d9:	89 c1                	mov    ecx,eax
c00109db:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00109e1:	c1 e9 10             	shr    ecx,0x10
c00109e4:	c1 e1 04             	shl    ecx,0x4
c00109e7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00109eb:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00109f1:	0f b6 c9             	movzx  ecx,cl
c00109f4:	c1 e1 06             	shl    ecx,0x6
c00109f7:	09 e9                	or     ecx,ebp
c00109f9:	83 fa 0f             	cmp    edx,0xf
c00109fc:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010a03:	75 38                	jne    c0010a3d <CPU::detectFeatures()+0x5b3>
c0010a05:	c1 e8 14             	shr    eax,0x14
c0010a08:	83 c0 0f             	add    eax,0xf
c0010a0b:	0f b6 c0             	movzx  eax,al
c0010a0e:	89 c2                	mov    edx,eax
c0010a10:	c1 e8 02             	shr    eax,0x2
c0010a13:	83 e2 03             	and    edx,0x3
c0010a16:	89 d1                	mov    ecx,edx
c0010a18:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010a1e:	c1 e1 06             	shl    ecx,0x6
c0010a21:	83 e2 3f             	and    edx,0x3f
c0010a24:	09 ca                	or     edx,ecx
c0010a26:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a2c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a32:	83 e2 c0             	and    edx,0xffffffc0
c0010a35:	09 d0                	or     eax,edx
c0010a37:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a3d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a43:	83 ec 0c             	sub    esp,0xc
c0010a46:	83 c8 07             	or     eax,0x7
c0010a49:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a4f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a53:	50                   	push   eax
c0010a54:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010a58:	55                   	push   ebp
c0010a59:	57                   	push   edi
c0010a5a:	56                   	push   esi
c0010a5b:	68 00 00 00 80       	push   0x80000000
c0010a60:	e8 59 f8 ff ff       	call   c00102be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a65:	83 c4 20             	add    esp,0x20
c0010a68:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010a70:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010a74:	76 1e                	jbe    c0010a94 <CPU::detectFeatures()+0x60a>
c0010a76:	83 ec 0c             	sub    esp,0xc
c0010a79:	50                   	push   eax
c0010a7a:	55                   	push   ebp
c0010a7b:	57                   	push   edi
c0010a7c:	56                   	push   esi
c0010a7d:	68 01 00 00 80       	push   0x80000001
c0010a82:	e8 37 f8 ff ff       	call   c00102be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a87:	83 c4 20             	add    esp,0x20
c0010a8a:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010a94:	52                   	push   edx
c0010a95:	52                   	push   edx
c0010a96:	68 a5 23 02 c0       	push   0xc00223a5
c0010a9b:	53                   	push   ebx
c0010a9c:	e8 57 c0 ff ff       	call   c000caf8 <Device::setName(char const*)>
c0010aa1:	83 c4 10             	add    esp,0x10
c0010aa4:	eb 69                	jmp    c0010b0f <CPU::detectFeatures()+0x685>
c0010aa6:	50                   	push   eax
c0010aa7:	50                   	push   eax
c0010aa8:	68 0a 23 02 c0       	push   0xc002230a
c0010aad:	55                   	push   ebp
c0010aae:	e8 9d fb fe ff       	call   c0000650 <strcpy>
c0010ab3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010abd:	e8 01 f7 fe ff       	call   c00001c3 <is486>
c0010ac2:	83 c4 10             	add    esp,0x10
c0010ac5:	85 c0                	test   eax,eax
c0010ac7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010acd:	74 1f                	je     c0010aee <CPU::detectFeatures()+0x664>
c0010acf:	83 c8 07             	or     eax,0x7
c0010ad2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010ad8:	0f 20 c0             	mov    eax,cr0
c0010adb:	83 e0 14             	and    eax,0x14
c0010ade:	83 f8 04             	cmp    eax,0x4
c0010ae1:	75 10                	jne    c0010af3 <CPU::detectFeatures()+0x669>
c0010ae3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010ae9:	83 e0 fd             	and    eax,0xfffffffd
c0010aec:	eb 1b                	jmp    c0010b09 <CPU::detectFeatures()+0x67f>
c0010aee:	83 e0 f8             	and    eax,0xfffffff8
c0010af1:	eb df                	jmp    c0010ad2 <CPU::detectFeatures()+0x648>
c0010af3:	e8 a6 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010af8:	83 e0 01             	and    eax,0x1
c0010afb:	8d 14 00             	lea    edx,[eax+eax*1]
c0010afe:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b04:	83 e0 fd             	and    eax,0xfffffffd
c0010b07:	09 d0                	or     eax,edx
c0010b09:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b0f:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010b16:	74 17                	je     c0010b2f <CPU::detectFeatures()+0x6a5>
c0010b18:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010b1e:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010b24:	83 c8 10             	or     eax,0x10
c0010b27:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b2d:	eb 20                	jmp    c0010b4f <CPU::detectFeatures()+0x6c5>
c0010b2f:	e8 6a f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b34:	83 e0 01             	and    eax,0x1
c0010b37:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b3a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b40:	83 e0 fd             	and    eax,0xfffffffd
c0010b43:	09 d0                	or     eax,edx
c0010b45:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b4b:	a8 02                	test   al,0x2
c0010b4d:	75 c9                	jne    c0010b18 <CPU::detectFeatures()+0x68e>
c0010b4f:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010b56:	83 c4 2c             	add    esp,0x2c
c0010b59:	5b                   	pop    ebx
c0010b5a:	5e                   	pop    esi
c0010b5b:	5f                   	pop    edi
c0010b5c:	5d                   	pop    ebp
c0010b5d:	c3                   	ret    

c0010b5e <CPU::setupSMEP()>:
c0010b5e:	0f 20 e0             	mov    eax,cr4
c0010b61:	0d 00 00 10 00       	or     eax,0x100000
c0010b66:	0f 22 e0             	mov    cr4,eax
c0010b69:	c3                   	ret    

c0010b6a <CPU::setupUMIP()>:
c0010b6a:	0f 20 e0             	mov    eax,cr4
c0010b6d:	80 cc 08             	or     ah,0x8
c0010b70:	0f 22 e0             	mov    cr4,eax
c0010b73:	c3                   	ret    

c0010b74 <CPU::setupTSC()>:
c0010b74:	0f 20 e0             	mov    eax,cr4
c0010b77:	83 c8 04             	or     eax,0x4
c0010b7a:	0f 22 e0             	mov    cr4,eax
c0010b7d:	c3                   	ret    

c0010b7e <CPU::setupLargePages()>:
c0010b7e:	0f 20 e0             	mov    eax,cr4
c0010b81:	83 c8 10             	or     eax,0x10
c0010b84:	0f 22 e0             	mov    cr4,eax
c0010b87:	c3                   	ret    

c0010b88 <CPU::setupPAT()>:
c0010b88:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010b8d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010b94:	74 2c                	je     c0010bc2 <CPU::setupPAT()+0x3a>
c0010b96:	53                   	push   ebx
c0010b97:	83 ec 10             	sub    esp,0x10
c0010b9a:	68 77 02 00 00       	push   0x277
c0010b9f:	50                   	push   eax
c0010ba0:	e8 41 65 ff ff       	call   c00070e6 <Computer::rdmsr(unsigned int)>
c0010ba5:	83 e2 f8             	and    edx,0xfffffff8
c0010ba8:	83 ca 01             	or     edx,0x1
c0010bab:	52                   	push   edx
c0010bac:	50                   	push   eax
c0010bad:	68 77 02 00 00       	push   0x277
c0010bb2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010bb8:	e8 55 65 ff ff       	call   c0007112 <Computer::wrmsr(unsigned int, unsigned long long)>
c0010bbd:	83 c4 28             	add    esp,0x28
c0010bc0:	5b                   	pop    ebx
c0010bc1:	c3                   	ret    
c0010bc2:	c3                   	ret    
c0010bc3:	90                   	nop

c0010bc4 <CPU::setupMTRR()>:
c0010bc4:	c3                   	ret    
c0010bc5:	90                   	nop

c0010bc6 <CPU::setupGlobalPages()>:
c0010bc6:	0f 20 e0             	mov    eax,cr4
c0010bc9:	0c 80                	or     al,0x80
c0010bcb:	0f 22 e0             	mov    cr4,eax
c0010bce:	c3                   	ret    
c0010bcf:	90                   	nop

c0010bd0 <CPU::allowUsermodeDataAccess()>:
c0010bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bd4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bdb:	74 03                	je     c0010be0 <CPU::allowUsermodeDataAccess()+0x10>
c0010bdd:	0f 01 cb             	stac   
c0010be0:	c3                   	ret    
c0010be1:	90                   	nop

c0010be2 <CPU::prohibitUsermodeDataAccess()>:
c0010be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010be6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bed:	74 03                	je     c0010bf2 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010bef:	0f 01 ca             	clac   
c0010bf2:	c3                   	ret    
c0010bf3:	90                   	nop

c0010bf4 <CPU::setupSMAP()>:
c0010bf4:	0f 20 e0             	mov    eax,cr4
c0010bf7:	0d 00 00 20 00       	or     eax,0x200000
c0010bfc:	0f 22 e0             	mov    cr4,eax
c0010bff:	eb e1                	jmp    c0010be2 <CPU::prohibitUsermodeDataAccess()>
c0010c01:	90                   	nop

c0010c02 <CPU::setupFeatures()>:
c0010c02:	53                   	push   ebx
c0010c03:	83 ec 08             	sub    esp,0x8
c0010c06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c0a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010c11:	74 18                	je     c0010c2b <CPU::setupFeatures()+0x29>
c0010c13:	83 ec 0c             	sub    esp,0xc
c0010c16:	68 b1 23 02 c0       	push   0xc00223b1
c0010c1b:	e8 ee 9c ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0010c20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c23:	e8 42 ff ff ff       	call   c0010b6a <CPU::setupUMIP()>
c0010c28:	83 c4 10             	add    esp,0x10
c0010c2b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c32:	74 18                	je     c0010c4c <CPU::setupFeatures()+0x4a>
c0010c34:	83 ec 0c             	sub    esp,0xc
c0010c37:	68 bb 23 02 c0       	push   0xc00223bb
c0010c3c:	e8 cd 9c ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0010c41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c44:	e8 2b ff ff ff       	call   c0010b74 <CPU::setupTSC()>
c0010c49:	83 c4 10             	add    esp,0x10
c0010c4c:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c53:	74 18                	je     c0010c6d <CPU::setupFeatures()+0x6b>
c0010c55:	83 ec 0c             	sub    esp,0xc
c0010c58:	68 c4 23 02 c0       	push   0xc00223c4
c0010c5d:	e8 ac 9c ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0010c62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c65:	e8 14 ff ff ff       	call   c0010b7e <CPU::setupLargePages()>
c0010c6a:	83 c4 10             	add    esp,0x10
c0010c6d:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010c74:	74 18                	je     c0010c8e <CPU::setupFeatures()+0x8c>
c0010c76:	83 ec 0c             	sub    esp,0xc
c0010c79:	68 cd 23 02 c0       	push   0xc00223cd
c0010c7e:	e8 8b 9c ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0010c83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c86:	e8 3b ff ff ff       	call   c0010bc6 <CPU::setupGlobalPages()>
c0010c8b:	83 c4 10             	add    esp,0x10
c0010c8e:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010c95:	74 18                	je     c0010caf <CPU::setupFeatures()+0xad>
c0010c97:	83 ec 0c             	sub    esp,0xc
c0010c9a:	68 df 23 02 c0       	push   0xc00223df
c0010c9f:	e8 6a 9c ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0010ca4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ca7:	e8 dc fe ff ff       	call   c0010b88 <CPU::setupPAT()>
c0010cac:	83 c4 10             	add    esp,0x10
c0010caf:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010cb6:	74 11                	je     c0010cc9 <CPU::setupFeatures()+0xc7>
c0010cb8:	c7 44 24 10 e8 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc00223e8
c0010cc0:	83 c4 08             	add    esp,0x8
c0010cc3:	5b                   	pop    ebx
c0010cc4:	e9 45 9c ff ff       	jmp    c000a90e <Dbg::kprintf(char const*, ...)>
c0010cc9:	83 c4 08             	add    esp,0x8
c0010ccc:	5b                   	pop    ebx
c0010ccd:	c3                   	ret    

c0010cce <CPU::open(int, int, void*)>:
c0010cce:	55                   	push   ebp
c0010ccf:	57                   	push   edi
c0010cd0:	56                   	push   esi
c0010cd1:	53                   	push   ebx
c0010cd2:	83 ec 18             	sub    esp,0x18
c0010cd5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010cd9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010cdd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010ce1:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010ce7:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010ced:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010cf3:	50                   	push   eax
c0010cf4:	e8 e9 66 ff ff       	call   c00073e2 <GDT::setup()>
c0010cf9:	83 c4 0c             	add    esp,0xc
c0010cfc:	6a 00                	push   0x0
c0010cfe:	68 ef be ad de       	push   0xdeadbeef
c0010d03:	55                   	push   ebp
c0010d04:	e8 6b 82 ff ff       	call   c0008f74 <TSS::setup(unsigned long, unsigned long)>
c0010d09:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010d0c:	e8 43 82 ff ff       	call   c0008f54 <TSS::flush()>
c0010d11:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d1a:	e8 27 69 ff ff       	call   c0007646 <IDT::setup()>
c0010d1f:	b8 00 04 00 00       	mov    eax,0x400
c0010d24:	0f 23 f8             	mov    db7,eax
c0010d27:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d31:	e8 b0 70 ff ff       	call   c0007de6 <Phys::allocatePage()>
c0010d36:	83 c4 10             	add    esp,0x10
c0010d39:	85 f6                	test   esi,esi
c0010d3b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d41:	89 38                	mov    DWORD PTR [eax],edi
c0010d43:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d49:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d4c:	74 10                	je     c0010d5e <CPU::open(int, int, void*)+0x90>
c0010d4e:	50                   	push   eax
c0010d4f:	50                   	push   eax
c0010d50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010d56:	56                   	push   esi
c0010d57:	e8 34 8b ff ff       	call   c0009890 <VAS::setCPUSpecific(unsigned long)>
c0010d5c:	eb 0d                	jmp    c0010d6b <CPU::open(int, int, void*)+0x9d>
c0010d5e:	83 ec 0c             	sub    esp,0xc
c0010d61:	68 f2 23 02 c0       	push   0xc00223f2
c0010d66:	e8 9c 08 00 00       	call   c0011607 <KePanic(char const*)>
c0010d6b:	83 c4 10             	add    esp,0x10
c0010d6e:	83 ec 0c             	sub    esp,0xc
c0010d71:	68 00 24 02 c0       	push   0xc0022400
c0010d76:	e8 8e 01 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c0010d7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d7e:	e8 07 f7 ff ff       	call   c001048a <CPU::detectFeatures()>
c0010d83:	c7 04 24 23 24 02 c0 	mov    DWORD PTR [esp],0xc0022423
c0010d8a:	e8 7a 01 00 00       	call   c0010f09 <KeSetBootMessage(char const*)>
c0010d8f:	e8 5f 74 00 00       	call   c00181f3 <HalInitialise()>
c0010d94:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010d99:	83 e0 10             	and    eax,0x10
c0010d9c:	83 f8 01             	cmp    eax,0x1
c0010d9f:	19 c0                	sbb    eax,eax
c0010da1:	83 e0 46             	and    eax,0x46
c0010da4:	83 c0 1e             	add    eax,0x1e
c0010da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010daa:	e8 3a d6 ff ff       	call   c000e3e9 <setupTimer(int)>
c0010daf:	83 c4 10             	add    esp,0x10
c0010db2:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010db9:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010dbf:	74 0c                	je     c0010dcd <CPU::open(int, int, void*)+0xff>
c0010dc1:	83 ec 0c             	sub    esp,0xc
c0010dc4:	53                   	push   ebx
c0010dc5:	e8 38 fe ff ff       	call   c0010c02 <CPU::setupFeatures()>
c0010dca:	83 c4 10             	add    esp,0x10
c0010dcd:	83 c4 0c             	add    esp,0xc
c0010dd0:	31 c0                	xor    eax,eax
c0010dd2:	5b                   	pop    ebx
c0010dd3:	5e                   	pop    esi
c0010dd4:	5f                   	pop    edi
c0010dd5:	5d                   	pop    ebp
c0010dd6:	c3                   	ret    

c0010dd7 <KeInitialiseAtexit()>:
c0010dd7:	83 ec 10             	sub    esp,0x10
c0010dda:	6a 60                	push   0x60
c0010ddc:	6a 00                	push   0x0
c0010dde:	68 20 be 02 c0       	push   0xc002be20
c0010de3:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010ded:	e8 fe f6 fe ff       	call   c00004f0 <memset>
c0010df2:	83 c4 1c             	add    esp,0x1c
c0010df5:	c3                   	ret    

c0010df6 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010df6:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010dfb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010dff:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010e06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e0a:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010e11:	40                   	inc    eax
c0010e12:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010e17:	83 f8 17             	cmp    eax,0x17
c0010e1a:	7e 0d                	jle    c0010e29 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010e1c:	c7 44 24 04 64 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022464
c0010e24:	e9 de 07 00 00       	jmp    c0011607 <KePanic(char const*)>
c0010e29:	c3                   	ret    

c0010e2a <KeExecuteAtexit()>:
c0010e2a:	53                   	push   ebx
c0010e2b:	31 db                	xor    ebx,ebx
c0010e2d:	83 ec 08             	sub    esp,0x8
c0010e30:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e36:	7e 50                	jle    c0010e88 <KeExecuteAtexit()+0x5e>
c0010e38:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e3f:	85 c0                	test   eax,eax
c0010e41:	74 42                	je     c0010e85 <KeExecuteAtexit()+0x5b>
c0010e43:	51                   	push   ecx
c0010e44:	50                   	push   eax
c0010e45:	53                   	push   ebx
c0010e46:	68 7d 24 02 c0       	push   0xc002247d
c0010e4b:	e8 be 9a ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0010e50:	58                   	pop    eax
c0010e51:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010e58:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010e5f:	c7 04 24 9f 24 02 c0 	mov    DWORD PTR [esp],0xc002249f
c0010e66:	e8 a3 9a ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0010e6b:	c7 04 24 ff 35 02 c0 	mov    DWORD PTR [esp],0xc00235ff
c0010e72:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010e7d:	e8 8c 9a ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0010e82:	83 c4 10             	add    esp,0x10
c0010e85:	43                   	inc    ebx
c0010e86:	eb a8                	jmp    c0010e30 <KeExecuteAtexit()+0x6>
c0010e88:	83 c4 08             	add    esp,0x8
c0010e8b:	5b                   	pop    ebx
c0010e8c:	c3                   	ret    

c0010e8d <KeDisplaySplashScreen()>:
c0010e8d:	55                   	push   ebp
c0010e8e:	bd 05 00 00 00       	mov    ebp,0x5
c0010e93:	57                   	push   edi
c0010e94:	bf 0a 00 00 00       	mov    edi,0xa
c0010e99:	56                   	push   esi
c0010e9a:	31 f6                	xor    esi,esi
c0010e9c:	53                   	push   ebx
c0010e9d:	31 db                	xor    ebx,ebx
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	0f b6 96 60 38 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc7a0]
c0010ea9:	85 d2                	test   edx,edx
c0010eab:	89 d0                	mov    eax,edx
c0010ead:	74 52                	je     c0010f01 <KeDisplaySplashScreen()+0x74>
c0010eaf:	80 bb 96 38 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc76a],0xdb
c0010eb6:	75 13                	jne    c0010ecb <KeDisplaySplashScreen()+0x3e>
c0010eb8:	0f b6 8b 95 38 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc76b]
c0010ebf:	83 e1 fe             	and    ecx,0xfffffffe
c0010ec2:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010ec8:	75 01                	jne    c0010ecb <KeDisplaySplashScreen()+0x3e>
c0010eca:	47                   	inc    edi
c0010ecb:	83 fa 0d             	cmp    edx,0xd
c0010ece:	74 28                	je     c0010ef8 <KeDisplaySplashScreen()+0x6b>
c0010ed0:	83 fa 0a             	cmp    edx,0xa
c0010ed3:	75 0a                	jne    c0010edf <KeDisplaySplashScreen()+0x52>
c0010ed5:	45                   	inc    ebp
c0010ed6:	bf 0a 00 00 00       	mov    edi,0xa
c0010edb:	31 db                	xor    ebx,ebx
c0010edd:	eb 19                	jmp    c0010ef8 <KeDisplaySplashScreen()+0x6b>
c0010edf:	83 ec 0c             	sub    esp,0xc
c0010ee2:	0f be c0             	movsx  eax,al
c0010ee5:	55                   	push   ebp
c0010ee6:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010ee9:	43                   	inc    ebx
c0010eea:	52                   	push   edx
c0010eeb:	6a 00                	push   0x0
c0010eed:	6a 0e                	push   0xe
c0010eef:	50                   	push   eax
c0010ef0:	e8 7b 7f 00 00       	call   c0018e70 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010ef5:	83 c4 20             	add    esp,0x20
c0010ef8:	46                   	inc    esi
c0010ef9:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010eff:	75 a1                	jne    c0010ea2 <KeDisplaySplashScreen()+0x15>
c0010f01:	83 c4 0c             	add    esp,0xc
c0010f04:	5b                   	pop    ebx
c0010f05:	5e                   	pop    esi
c0010f06:	5f                   	pop    edi
c0010f07:	5d                   	pop    ebp
c0010f08:	c3                   	ret    

c0010f09 <KeSetBootMessage(char const*)>:
c0010f09:	57                   	push   edi
c0010f0a:	56                   	push   esi
c0010f0b:	53                   	push   ebx
c0010f0c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010f12:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010f19:	68 9e 00 00 00       	push   0x9e
c0010f1e:	6a 00                	push   0x0
c0010f20:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010f24:	56                   	push   esi
c0010f25:	e8 c6 f5 fe ff       	call   c00004f0 <memset>
c0010f2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f2d:	e8 4e f6 fe ff       	call   c0000580 <strlen>
c0010f32:	ba 50 00 00 00       	mov    edx,0x50
c0010f37:	83 c4 10             	add    esp,0x10
c0010f3a:	31 c9                	xor    ecx,ecx
c0010f3c:	29 c2                	sub    edx,eax
c0010f3e:	83 e2 fe             	and    edx,0xfffffffe
c0010f41:	01 f2                	add    edx,esi
c0010f43:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f48:	84 c0                	test   al,al
c0010f4a:	74 0a                	je     c0010f56 <KeSetBootMessage(char const*)+0x4d>
c0010f4c:	80 cc 0f             	or     ah,0xf
c0010f4f:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f53:	41                   	inc    ecx
c0010f54:	eb ed                	jmp    c0010f43 <KeSetBootMessage(char const*)+0x3a>
c0010f56:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010f5b:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010f60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f62:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010f68:	5b                   	pop    ebx
c0010f69:	5e                   	pop    esi
c0010f6a:	5f                   	pop    edi
c0010f6b:	c3                   	ret    

c0010f6c <Krnl::handlePowerButton()>:
c0010f6c:	83 ec 0c             	sub    esp,0xc
c0010f6f:	e8 ee 06 00 00       	call   c0011662 <KeHandlePowerButton()>
c0010f74:	90                   	nop
c0010f75:	83 c4 0c             	add    esp,0xc
c0010f78:	c3                   	ret    
c0010f79:	8d 76 00             	lea    esi,[esi+0x0]

c0010f7c <Krnl::handleSleepButton()>:
c0010f7c:	83 ec 0c             	sub    esp,0xc
c0010f7f:	e8 13 07 00 00       	call   c0011697 <KeHandleSleepButton()>
c0010f84:	90                   	nop
c0010f85:	83 c4 0c             	add    esp,0xc
c0010f88:	c3                   	ret    

c0010f89 <KeCalculateCRC32(unsigned char*, int)>:
c0010f89:	53                   	push   ebx
c0010f8a:	83 c8 ff             	or     eax,0xffffffff
c0010f8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f95:	01 cb                	add    ebx,ecx
c0010f97:	39 d9                	cmp    ecx,ebx
c0010f99:	74 15                	je     c0010fb0 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010f9b:	41                   	inc    ecx
c0010f9c:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010f9f:	31 c2                	xor    edx,eax
c0010fa1:	c1 e8 08             	shr    eax,0x8
c0010fa4:	0f b6 d2             	movzx  edx,dl
c0010fa7:	33 04 95 c0 39 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc640]
c0010fae:	eb e7                	jmp    c0010f97 <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010fb0:	5b                   	pop    ebx
c0010fb1:	f7 d0                	not    eax
c0010fb3:	c3                   	ret    

c0010fb4 <EnvVarContainer::getEnv(char const*)>:
c0010fb4:	57                   	push   edi
c0010fb5:	56                   	push   esi
c0010fb6:	53                   	push   ebx
c0010fb7:	31 db                	xor    ebx,ebx
c0010fb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fbd:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010fbf:	7e 2b                	jle    c0010fec <EnvVarContainer::getEnv(char const*)+0x38>
c0010fc1:	50                   	push   eax
c0010fc2:	50                   	push   eax
c0010fc3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fc6:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010fcd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010fd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010fd4:	e8 a7 f7 fe ff       	call   c0000780 <strcmp>
c0010fd9:	83 c4 10             	add    esp,0x10
c0010fdc:	85 c0                	test   eax,eax
c0010fde:	75 09                	jne    c0010fe9 <EnvVarContainer::getEnv(char const*)+0x35>
c0010fe0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fe3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010fe7:	eb 05                	jmp    c0010fee <EnvVarContainer::getEnv(char const*)+0x3a>
c0010fe9:	43                   	inc    ebx
c0010fea:	eb d1                	jmp    c0010fbd <EnvVarContainer::getEnv(char const*)+0x9>
c0010fec:	31 c0                	xor    eax,eax
c0010fee:	5b                   	pop    ebx
c0010fef:	5e                   	pop    esi
c0010ff0:	5f                   	pop    edi
c0010ff1:	c3                   	ret    

c0010ff2 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010ff2:	55                   	push   ebp
c0010ff3:	57                   	push   edi
c0010ff4:	56                   	push   esi
c0010ff5:	53                   	push   ebx
c0010ff6:	83 ec 28             	sub    esp,0x28
c0010ff9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010ffd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0011001:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011005:	56                   	push   esi
c0011006:	e8 75 f5 fe ff       	call   c0000580 <strlen>
c001100b:	40                   	inc    eax
c001100c:	89 04 24             	mov    DWORD PTR [esp],eax
c001100f:	e8 c3 6a ff ff       	call   c0007ad7 <malloc>
c0011014:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011017:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001101b:	e8 60 f5 fe ff       	call   c0000580 <strlen>
c0011020:	40                   	inc    eax
c0011021:	89 04 24             	mov    DWORD PTR [esp],eax
c0011024:	e8 ae 6a ff ff       	call   c0007ad7 <malloc>
c0011029:	89 34 24             	mov    DWORD PTR [esp],esi
c001102c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011030:	e8 4b f5 fe ff       	call   c0000580 <strlen>
c0011035:	83 c4 0c             	add    esp,0xc
c0011038:	40                   	inc    eax
c0011039:	50                   	push   eax
c001103a:	6a 00                	push   0x0
c001103c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011040:	e8 ab f4 fe ff       	call   c00004f0 <memset>
c0011045:	89 34 24             	mov    DWORD PTR [esp],esi
c0011048:	e8 33 f5 fe ff       	call   c0000580 <strlen>
c001104d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011051:	8d 48 01             	lea    ecx,[eax+0x1]
c0011054:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011056:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011059:	89 de                	mov    esi,ebx
c001105b:	e8 20 f5 fe ff       	call   c0000580 <strlen>
c0011060:	83 c4 0c             	add    esp,0xc
c0011063:	40                   	inc    eax
c0011064:	50                   	push   eax
c0011065:	6a 00                	push   0x0
c0011067:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001106b:	e8 80 f4 fe ff       	call   c00004f0 <memset>
c0011070:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011073:	e8 08 f5 fe ff       	call   c0000580 <strlen>
c0011078:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001107c:	8d 48 01             	lea    ecx,[eax+0x1]
c001107f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011081:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011084:	40                   	inc    eax
c0011085:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011088:	c1 e0 03             	shl    eax,0x3
c001108b:	5a                   	pop    edx
c001108c:	59                   	pop    ecx
c001108d:	50                   	push   eax
c001108e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011091:	e8 2d 6a ff ff       	call   c0007ac3 <realloc>
c0011096:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011099:	8d 74 24 18          	lea    esi,[esp+0x18]
c001109d:	b9 08 00 00 00       	mov    ecx,0x8
c00110a2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00110a5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00110a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110ab:	83 c4 2c             	add    esp,0x2c
c00110ae:	5b                   	pop    ebx
c00110af:	5e                   	pop    esi
c00110b0:	5f                   	pop    edi
c00110b1:	5d                   	pop    ebp
c00110b2:	c3                   	ret    
c00110b3:	90                   	nop

c00110b4 <EnvVarContainer::deleteEnv(char const*)>:
c00110b4:	c3                   	ret    
c00110b5:	90                   	nop

c00110b6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00110b6:	55                   	push   ebp
c00110b7:	57                   	push   edi
c00110b8:	56                   	push   esi
c00110b9:	53                   	push   ebx
c00110ba:	81 ec 38 01 00 00    	sub    esp,0x138
c00110c0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00110c7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00110ce:	68 14 01 00 00       	push   0x114
c00110d3:	e8 ff 69 ff ff       	call   c0007ad7 <malloc>
c00110d8:	83 c4 0c             	add    esp,0xc
c00110db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00110de:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00110e5:	89 c3                	mov    ebx,eax
c00110e7:	50                   	push   eax
c00110e8:	e8 39 aa ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c00110ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110f0:	e8 13 ad ff ff       	call   c000be08 <File::exists()>
c00110f5:	83 c4 10             	add    esp,0x10
c00110f8:	84 c0                	test   al,al
c00110fa:	75 31                	jne    c001112d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00110fc:	50                   	push   eax
c00110fd:	50                   	push   eax
c00110fe:	6a 12                	push   0x12
c0011100:	53                   	push   ebx
c0011101:	e8 3e aa ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c0011106:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011108:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001110b:	89 34 24             	mov    DWORD PTR [esp],esi
c001110e:	e8 6d f4 fe ff       	call   c0000580 <strlen>
c0011113:	5a                   	pop    edx
c0011114:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011118:	52                   	push   edx
c0011119:	31 d2                	xor    edx,edx
c001111b:	56                   	push   esi
c001111c:	52                   	push   edx
c001111d:	50                   	push   eax
c001111e:	53                   	push   ebx
c001111f:	ff d7                	call   edi
c0011121:	83 c4 14             	add    esp,0x14
c0011124:	53                   	push   ebx
c0011125:	e8 78 aa ff ff       	call   c000bba2 <File::close()>
c001112a:	83 c4 10             	add    esp,0x10
c001112d:	56                   	push   esi
c001112e:	31 f6                	xor    esi,esi
c0011130:	68 00 01 00 00       	push   0x100
c0011135:	6a 00                	push   0x0
c0011137:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001113b:	50                   	push   eax
c001113c:	e8 af f3 fe ff       	call   c00004f0 <memset>
c0011141:	5f                   	pop    edi
c0011142:	58                   	pop    eax
c0011143:	6a 01                	push   0x1
c0011145:	53                   	push   ebx
c0011146:	e8 f9 a9 ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c001114b:	83 c4 10             	add    esp,0x10
c001114e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011156:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001115e:	83 ec 0c             	sub    esp,0xc
c0011161:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011165:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011167:	52                   	push   edx
c0011168:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c001116c:	51                   	push   ecx
c001116d:	6a 00                	push   0x0
c001116f:	6a 01                	push   0x1
c0011171:	53                   	push   ebx
c0011172:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011175:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001117a:	83 c4 20             	add    esp,0x20
c001117d:	85 c0                	test   eax,eax
c001117f:	89 c1                	mov    ecx,eax
c0011181:	0f 84 36 01 00 00    	je     c00112bd <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0011187:	83 f8 0d             	cmp    eax,0xd
c001118a:	0f 84 22 01 00 00    	je     c00112b2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011190:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011195:	0f 84 f0 00 00 00    	je     c001128b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001119b:	83 f8 0a             	cmp    eax,0xa
c001119e:	74 13                	je     c00111b3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111a0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00111a5:	74 0c                	je     c00111b3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111a7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00111ad:	0f 8e f6 00 00 00    	jle    c00112a9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00111b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111b7:	83 ec 0c             	sub    esp,0xc
c00111ba:	8d 78 01             	lea    edi,[eax+0x1]
c00111bd:	57                   	push   edi
c00111be:	e8 14 69 ff ff       	call   c0007ad7 <malloc>
c00111c3:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00111c7:	8d 56 04             	lea    edx,[esi+0x4]
c00111ca:	89 14 24             	mov    DWORD PTR [esp],edx
c00111cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00111d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00111d5:	e8 fd 68 ff ff       	call   c0007ad7 <malloc>
c00111da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00111de:	83 c4 0c             	add    esp,0xc
c00111e1:	57                   	push   edi
c00111e2:	6a 00                	push   0x0
c00111e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00111e8:	e8 03 f3 fe ff       	call   c00004f0 <memset>
c00111ed:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111f1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00111f5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00111f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111fb:	83 c4 0c             	add    esp,0xc
c00111fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011202:	52                   	push   edx
c0011203:	6a 00                	push   0x0
c0011205:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011209:	e8 e2 f2 fe ff       	call   c00004f0 <memset>
c001120e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011212:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0011216:	89 34 24             	mov    DWORD PTR [esp],esi
c0011219:	e8 62 f3 fe ff       	call   c0000580 <strlen>
c001121e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011222:	89 c1                	mov    ecx,eax
c0011224:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011226:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011229:	83 c4 10             	add    esp,0x10
c001122c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001122f:	40                   	inc    eax
c0011230:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011233:	85 d2                	test   edx,edx
c0011235:	75 0c                	jne    c0011243 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0011237:	83 ec 0c             	sub    esp,0xc
c001123a:	6a 08                	push   0x8
c001123c:	e8 96 68 ff ff       	call   c0007ad7 <malloc>
c0011241:	eb 0c                	jmp    c001124f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0011243:	51                   	push   ecx
c0011244:	51                   	push   ecx
c0011245:	c1 e0 03             	shl    eax,0x3
c0011248:	50                   	push   eax
c0011249:	52                   	push   edx
c001124a:	e8 74 68 ff ff       	call   c0007ac3 <realloc>
c001124f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011252:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011255:	83 c4 10             	add    esp,0x10
c0011258:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001125b:	8d 74 24 18          	lea    esi,[esp+0x18]
c001125f:	b9 08 00 00 00       	mov    ecx,0x8
c0011264:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011268:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001126a:	50                   	push   eax
c001126b:	31 f6                	xor    esi,esi
c001126d:	68 00 01 00 00       	push   0x100
c0011272:	6a 00                	push   0x0
c0011274:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011278:	50                   	push   eax
c0011279:	e8 72 f2 fe ff       	call   c00004f0 <memset>
c001127e:	83 c4 10             	add    esp,0x10
c0011281:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011289:	eb 27                	jmp    c00112b2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001128b:	83 f8 3d             	cmp    eax,0x3d
c001128e:	74 1e                	je     c00112ae <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011290:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011296:	7f 07                	jg     c001129f <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011298:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c001129c:	46                   	inc    esi
c001129d:	eb 13                	jmp    c00112b2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001129f:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00112a7:	eb 09                	jmp    c00112b2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112a9:	83 f8 3d             	cmp    eax,0x3d
c00112ac:	75 ea                	jne    c0011298 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00112ae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00112b2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00112b7:	0f 85 99 fe ff ff    	jne    c0011156 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00112bd:	83 ec 0c             	sub    esp,0xc
c00112c0:	53                   	push   ebx
c00112c1:	e8 dc a8 ff ff       	call   c000bba2 <File::close()>
c00112c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112ce:	81 c4 3c 01 00 00    	add    esp,0x13c
c00112d4:	5b                   	pop    ebx
c00112d5:	5e                   	pop    esi
c00112d6:	5f                   	pop    edi
c00112d7:	5d                   	pop    ebp
c00112d8:	c3                   	ret    
c00112d9:	90                   	nop

c00112da <EnvVarContainer::__loadSystem()>:
c00112da:	83 ec 10             	sub    esp,0x10
c00112dd:	68 c0 3d 02 c0       	push   0xc0023dc0
c00112e2:	68 a4 24 02 c0       	push   0xc00224a4
c00112e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112eb:	e8 c6 fd ff ff       	call   c00110b6 <EnvVarContainer::loadFrom(char const*, char const*)>
c00112f0:	83 c4 1c             	add    esp,0x1c
c00112f3:	c3                   	ret    

c00112f4 <EnvVarContainer::__loadUser()>:
c00112f4:	c3                   	ret    
c00112f5:	90                   	nop

c00112f6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00112f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011304:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011308:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001130b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001130f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011316:	90                   	nop
c0011317:	c3                   	ret    

c0011318 <EnvVarContainer::~EnvVarContainer()>:
c0011318:	83 ec 0c             	sub    esp,0xc
c001131b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001131f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011322:	85 c0                	test   eax,eax
c0011324:	74 1d                	je     c0011343 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132a:	8b 00                	mov    eax,DWORD PTR [eax]
c001132c:	85 c0                	test   eax,eax
c001132e:	74 13                	je     c0011343 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011334:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011337:	83 ec 0c             	sub    esp,0xc
c001133a:	50                   	push   eax
c001133b:	e8 a7 67 ff ff       	call   c0007ae7 <free>
c0011340:	83 c4 10             	add    esp,0x10
c0011343:	90                   	nop
c0011344:	83 c4 0c             	add    esp,0xc
c0011347:	c3                   	ret    

c0011348 <KeGetEnv(Process*, char const*)>:
c0011348:	53                   	push   ebx
c0011349:	83 ec 08             	sub    esp,0x8
c001134c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011350:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c0011356:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001135a:	74 04                	je     c0011360 <KeGetEnv(Process*, char const*)+0x18>
c001135c:	85 c0                	test   eax,eax
c001135e:	75 0b                	jne    c001136b <KeGetEnv(Process*, char const*)+0x23>
c0011360:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011365:	85 c0                	test   eax,eax
c0011367:	75 19                	jne    c0011382 <KeGetEnv(Process*, char const*)+0x3a>
c0011369:	eb 27                	jmp    c0011392 <KeGetEnv(Process*, char const*)+0x4a>
c001136b:	52                   	push   edx
c001136c:	52                   	push   edx
c001136d:	53                   	push   ebx
c001136e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011374:	e8 3b fc ff ff       	call   c0010fb4 <EnvVarContainer::getEnv(char const*)>
c0011379:	83 c4 10             	add    esp,0x10
c001137c:	85 c0                	test   eax,eax
c001137e:	75 28                	jne    c00113a8 <KeGetEnv(Process*, char const*)+0x60>
c0011380:	eb de                	jmp    c0011360 <KeGetEnv(Process*, char const*)+0x18>
c0011382:	52                   	push   edx
c0011383:	52                   	push   edx
c0011384:	53                   	push   ebx
c0011385:	50                   	push   eax
c0011386:	e8 29 fc ff ff       	call   c0010fb4 <EnvVarContainer::getEnv(char const*)>
c001138b:	83 c4 10             	add    esp,0x10
c001138e:	85 c0                	test   eax,eax
c0011390:	75 16                	jne    c00113a8 <KeGetEnv(Process*, char const*)+0x60>
c0011392:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011396:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001139b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001139f:	83 c4 08             	add    esp,0x8
c00113a2:	5b                   	pop    ebx
c00113a3:	e9 0c fc ff ff       	jmp    c0010fb4 <EnvVarContainer::getEnv(char const*)>
c00113a8:	83 c4 08             	add    esp,0x8
c00113ab:	5b                   	pop    ebx
c00113ac:	c3                   	ret    

c00113ad <KeSetEnvSystem(char const*, char const*)>:
c00113ad:	83 ec 10             	sub    esp,0x10
c00113b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113b8:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c00113be:	e8 2f fc ff ff       	call   c0010ff2 <EnvVarContainer::setEnv(char const*, char const*)>
c00113c3:	83 c4 1c             	add    esp,0x1c
c00113c6:	c3                   	ret    

c00113c7 <KeSetEnvUser(char const*, char const*)>:
c00113c7:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113cc:	85 c0                	test   eax,eax
c00113ce:	74 15                	je     c00113e5 <KeSetEnvUser(char const*, char const*)+0x1e>
c00113d0:	83 ec 10             	sub    esp,0x10
c00113d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113db:	50                   	push   eax
c00113dc:	e8 11 fc ff ff       	call   c0010ff2 <EnvVarContainer::setEnv(char const*, char const*)>
c00113e1:	83 c4 1c             	add    esp,0x1c
c00113e4:	c3                   	ret    
c00113e5:	c3                   	ret    

c00113e6 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00113e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ea:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00113f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113f4:	e9 f9 fb ff ff       	jmp    c0010ff2 <EnvVarContainer::setEnv(char const*, char const*)>

c00113f9 <KeDeleteEnvSystem(char const*)>:
c00113f9:	c3                   	ret    

c00113fa <KeDeleteEnvUser(char const*)>:
c00113fa:	c3                   	ret    

c00113fb <KeDeleteEnvProcess(Process*, char const*)>:
c00113fb:	c3                   	ret    

c00113fc <KeNewProcessEnv(Process*)>:
c00113fc:	83 ec 28             	sub    esp,0x28
c00113ff:	6a 0c                	push   0xc
c0011401:	e8 d1 66 ff ff       	call   c0007ad7 <malloc>
c0011406:	5a                   	pop    edx
c0011407:	59                   	pop    ecx
c0011408:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001140c:	50                   	push   eax
c001140d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011411:	e8 e0 fe ff ff       	call   c00112f6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011416:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001141a:	83 c4 2c             	add    esp,0x2c
c001141d:	c3                   	ret    

c001141e <KeCopyProcessEnv(Process*, Process*)>:
c001141e:	57                   	push   edi
c001141f:	56                   	push   esi
c0011420:	53                   	push   ebx
c0011421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011425:	83 ec 0c             	sub    esp,0xc
c0011428:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001142e:	6a 0c                	push   0xc
c0011430:	e8 a2 66 ff ff       	call   c0007ad7 <malloc>
c0011435:	89 c3                	mov    ebx,eax
c0011437:	58                   	pop    eax
c0011438:	5a                   	pop    edx
c0011439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001143d:	53                   	push   ebx
c001143e:	e8 b3 fe ff ff       	call   c00112f6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011443:	8b 07                	mov    eax,DWORD PTR [edi]
c0011445:	89 03                	mov    DWORD PTR [ebx],eax
c0011447:	c1 e0 03             	shl    eax,0x3
c001144a:	89 04 24             	mov    DWORD PTR [esp],eax
c001144d:	e8 85 66 ff ff       	call   c0007ad7 <malloc>
c0011452:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011455:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011457:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001145a:	89 c7                	mov    edi,eax
c001145c:	c1 e1 03             	shl    ecx,0x3
c001145f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011461:	83 c4 10             	add    esp,0x10
c0011464:	89 d8                	mov    eax,ebx
c0011466:	5b                   	pop    ebx
c0011467:	5e                   	pop    esi
c0011468:	5f                   	pop    edi
c0011469:	c3                   	ret    

c001146a <KeLoadSystemEnv()>:
c001146a:	53                   	push   ebx
c001146b:	83 ec 14             	sub    esp,0x14
c001146e:	6a 0c                	push   0xc
c0011470:	e8 62 66 ff ff       	call   c0007ad7 <malloc>
c0011475:	89 c3                	mov    ebx,eax
c0011477:	58                   	pop    eax
c0011478:	5a                   	pop    edx
c0011479:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001147f:	53                   	push   ebx
c0011480:	e8 71 fe ff ff       	call   c00112f6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011485:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011488:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c001148e:	e8 47 fe ff ff       	call   c00112da <EnvVarContainer::__loadSystem()>
c0011493:	83 c4 18             	add    esp,0x18
c0011496:	5b                   	pop    ebx
c0011497:	c3                   	ret    

c0011498 <KeLoadUserEnv()>:
c0011498:	53                   	push   ebx
c0011499:	83 ec 14             	sub    esp,0x14
c001149c:	6a 0c                	push   0xc
c001149e:	e8 34 66 ff ff       	call   c0007ad7 <malloc>
c00114a3:	89 c3                	mov    ebx,eax
c00114a5:	58                   	pop    eax
c00114a6:	5a                   	pop    edx
c00114a7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00114ad:	53                   	push   ebx
c00114ae:	e8 43 fe ff ff       	call   c00112f6 <EnvVarContainer::EnvVarContainer(Process*)>
c00114b3:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c00114b9:	83 c4 18             	add    esp,0x18
c00114bc:	5b                   	pop    ebx
c00114bd:	c3                   	ret    

c00114be <KeFlushEnv()>:
c00114be:	c3                   	ret    

c00114bf <KeGetProcessTotalEnvCount(Process*)>:
c00114bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114c3:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00114c9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114cf:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00114d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00114d6:	03 01                	add    eax,DWORD PTR [ecx]
c00114d8:	85 d2                	test   edx,edx
c00114da:	74 02                	je     c00114de <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00114dc:	03 02                	add    eax,DWORD PTR [edx]
c00114de:	c3                   	ret    

c00114df <KeGetProcessEnvPair(Process*, int)>:
c00114df:	57                   	push   edi
c00114e0:	56                   	push   esi
c00114e1:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00114e7:	53                   	push   ebx
c00114e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00114ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114f0:	85 f6                	test   esi,esi
c00114f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00114f6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00114fe:	75 16                	jne    c0011516 <KeGetProcessEnvPair(Process*, int)+0x37>
c0011500:	39 c2                	cmp    edx,eax
c0011502:	7c 16                	jl     c001151a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011504:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c001150a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001150c:	01 c6                	add    esi,eax
c001150e:	39 d6                	cmp    esi,edx
c0011510:	7e 3c                	jle    c001154e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011512:	29 c2                	sub    edx,eax
c0011514:	eb 04                	jmp    c001151a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011516:	39 c2                	cmp    edx,eax
c0011518:	7d 05                	jge    c001151f <KeGetProcessEnvPair(Process*, int)+0x40>
c001151a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001151d:	eb 20                	jmp    c001153f <KeGetProcessEnvPair(Process*, int)+0x60>
c001151f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011521:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011524:	39 d1                	cmp    ecx,edx
c0011526:	7e 04                	jle    c001152c <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011528:	29 c2                	sub    edx,eax
c001152a:	eb 10                	jmp    c001153c <KeGetProcessEnvPair(Process*, int)+0x5d>
c001152c:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011532:	03 0e                	add    ecx,DWORD PTR [esi]
c0011534:	39 d1                	cmp    ecx,edx
c0011536:	7e 16                	jle    c001154e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011538:	29 c2                	sub    edx,eax
c001153a:	29 fa                	sub    edx,edi
c001153c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001153f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011542:	8b 02                	mov    eax,DWORD PTR [edx]
c0011544:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011547:	89 03                	mov    DWORD PTR [ebx],eax
c0011549:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001154c:	eb 1d                	jmp    c001156b <KeGetProcessEnvPair(Process*, int)+0x8c>
c001154e:	83 ec 0c             	sub    esp,0xc
c0011551:	68 c6 24 02 c0       	push   0xc00224c6
c0011556:	e8 ac 00 00 00       	call   c0011607 <KePanic(char const*)>
c001155b:	83 c4 10             	add    esp,0x10
c001155e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011564:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001156b:	89 d8                	mov    eax,ebx
c001156d:	5b                   	pop    ebx
c001156e:	5e                   	pop    esi
c001156f:	5f                   	pop    edi
c0011570:	c2 04 00             	ret    0x4

c0011573 <CPU::current()>:
c0011573:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011578:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001157e:	c3                   	ret    

c001157f <operator new(unsigned long)>:
c001157f:	e9 53 65 ff ff       	jmp    c0007ad7 <malloc>

c0011584 <operator delete(void*)>:
c0011584:	e9 6e 65 ff ff       	jmp    c0007af7 <rfree>

c0011589 <disableIRQs()>:
c0011589:	fa                   	cli    
c001158a:	c3                   	ret    

c001158b <enableIRQs()>:
c001158b:	fb                   	sti    
c001158c:	c3                   	ret    

c001158d <lockScheduler()>:
c001158d:	fa                   	cli    
c001158e:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011594:	c3                   	ret    

c0011595 <unlockScheduler()>:
c0011595:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001159a:	48                   	dec    eax
c001159b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115a0:	75 01                	jne    c00115a3 <unlockScheduler()+0xe>
c00115a2:	fb                   	sti    
c00115a3:	c3                   	ret    

c00115a4 <lockStuff()>:
c00115a4:	fa                   	cli    
c00115a5:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115ab:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00115b1:	c3                   	ret    

c00115b2 <unlockStuff()>:
c00115b2:	83 ec 0c             	sub    esp,0xc
c00115b5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00115ba:	48                   	dec    eax
c00115bb:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00115c0:	75 18                	jne    c00115da <unlockStuff()+0x28>
c00115c2:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00115c9:	74 0f                	je     c00115da <unlockStuff()+0x28>
c00115cb:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00115d5:	e8 5a 4b 00 00       	call   c0016134 <schedule()>
c00115da:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115df:	48                   	dec    eax
c00115e0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115e5:	75 01                	jne    c00115e8 <unlockStuff()+0x36>
c00115e7:	fb                   	sti    
c00115e8:	83 c4 0c             	add    esp,0xc
c00115eb:	c3                   	ret    

c00115ec <Virt::getAKernelVAS()>:
c00115ec:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00115f1:	c3                   	ret    

c00115f2 <__not_memcpy>:
c00115f2:	57                   	push   edi
c00115f3:	56                   	push   esi
c00115f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00115fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011600:	89 c7                	mov    edi,eax
c0011602:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011604:	5e                   	pop    esi
c0011605:	5f                   	pop    edi
c0011606:	c3                   	ret    

c0011607 <KePanic(char const*)>:
c0011607:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c001160e:	e9 b1 6a 00 00       	jmp    c00180c4 <HalPanic(char const*)>

c0011613 <KePowerThread(void*)>:
c0011613:	83 ec 0c             	sub    esp,0xc
c0011616:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001161b:	48                   	dec    eax
c001161c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011621:	75 01                	jne    c0011624 <KePowerThread(void*)+0x11>
c0011623:	fb                   	sti    
c0011624:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001162b:	83 ec 0c             	sub    esp,0xc
c001162e:	6a 0a                	push   0xa
c0011630:	e8 2f 4e 00 00       	call   c0016464 <sleep(unsigned int)>
c0011635:	83 c4 10             	add    esp,0x10
c0011638:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c001163f:	eb e3                	jmp    c0011624 <KePowerThread(void*)+0x11>

c0011641 <KeChangePowerSettings(PowerSettings)>:
c0011641:	57                   	push   edi
c0011642:	b9 09 00 00 00       	mov    ecx,0x9
c0011647:	56                   	push   esi
c0011648:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c001164d:	fc                   	cld    
c001164e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011652:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011654:	5e                   	pop    esi
c0011655:	5f                   	pop    edi
c0011656:	c3                   	ret    

c0011657 <KeUserIOReceived()>:
c0011657:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011661:	c3                   	ret    

c0011662 <KeHandlePowerButton()>:
c0011662:	83 ec 0c             	sub    esp,0xc
c0011665:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c001166a:	83 f8 02             	cmp    eax,0x2
c001166d:	75 10                	jne    c001167f <KeHandlePowerButton()+0x1d>
c001166f:	83 ec 0c             	sub    esp,0xc
c0011672:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011678:	e8 d1 5a ff ff       	call   c000714e <Computer::shutdown()>
c001167d:	eb 11                	jmp    c0011690 <KeHandlePowerButton()+0x2e>
c001167f:	48                   	dec    eax
c0011680:	75 11                	jne    c0011693 <KeHandlePowerButton()+0x31>
c0011682:	83 ec 0c             	sub    esp,0xc
c0011685:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001168b:	e8 ee 5a ff ff       	call   c000717e <Computer::sleep()>
c0011690:	83 c4 10             	add    esp,0x10
c0011693:	83 c4 0c             	add    esp,0xc
c0011696:	c3                   	ret    

c0011697 <KeHandleSleepButton()>:
c0011697:	83 ec 0c             	sub    esp,0xc
c001169a:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c001169f:	83 f8 02             	cmp    eax,0x2
c00116a2:	75 10                	jne    c00116b4 <KeHandleSleepButton()+0x1d>
c00116a4:	83 ec 0c             	sub    esp,0xc
c00116a7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116ad:	e8 9c 5a ff ff       	call   c000714e <Computer::shutdown()>
c00116b2:	eb 11                	jmp    c00116c5 <KeHandleSleepButton()+0x2e>
c00116b4:	48                   	dec    eax
c00116b5:	75 11                	jne    c00116c8 <KeHandleSleepButton()+0x31>
c00116b7:	83 ec 0c             	sub    esp,0xc
c00116ba:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116c0:	e8 b9 5a ff ff       	call   c000717e <Computer::sleep()>
c00116c5:	83 c4 10             	add    esp,0x10
c00116c8:	83 c4 0c             	add    esp,0xc
c00116cb:	c3                   	ret    

c00116cc <KeSetupPowerManager()>:
c00116cc:	83 ec 0c             	sub    esp,0xc
c00116cf:	68 f0 00 00 00       	push   0xf0
c00116d4:	6a 00                	push   0x0
c00116d6:	68 13 16 01 c0       	push   0xc0011613
c00116db:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00116e1:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116eb:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116f2:	e8 f1 47 00 00       	call   c0015ee8 <Process::createThread(void (*)(void*), void*, int)>
c00116f7:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011701:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c001170b:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011715:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c001171f:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011729:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011733:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c001173d:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c0011747:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011751:	83 c4 1c             	add    esp,0x1c
c0011754:	c3                   	ret    

c0011755 <KeRand()>:
c0011755:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c001175f:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011769:	53                   	push   ebx
c001176a:	01 c1                	add    ecx,eax
c001176c:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011771:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c0011777:	01 ca                	add    edx,ecx
c0011779:	05 ef 04 b5 00       	add    eax,0xb504ef
c001177e:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011783:	83 d2 00             	adc    edx,0x0
c0011786:	0f b7 da             	movzx  ebx,dx
c0011789:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c001178f:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0011793:	5b                   	pop    ebx
c0011794:	c3                   	ret    

c0011795 <KeSeedRand(unsigned int)>:
c0011795:	53                   	push   ebx
c0011796:	83 ec 08             	sub    esp,0x8
c0011799:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001179d:	e8 41 6c 00 00       	call   c00183e3 <HalGetRand()>
c00117a2:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c00117ac:	31 d8                	xor    eax,ebx
c00117ae:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00117b3:	e8 9d ff ff ff       	call   c0011755 <KeRand()>
c00117b8:	83 c4 08             	add    esp,0x8
c00117bb:	5b                   	pop    ebx
c00117bc:	eb 97                	jmp    c0011755 <KeRand()>

c00117be <KeInitRand()>:
c00117be:	83 ec 0c             	sub    esp,0xc
c00117c1:	e8 12 6a 00 00       	call   c00181d8 <HalQueryPerformanceCounter()>
c00117c6:	0f 20 da             	mov    edx,cr3
c00117c9:	0f 22 da             	mov    cr3,edx
c00117cc:	0f 20 da             	mov    edx,cr3
c00117cf:	0f 22 da             	mov    cr3,edx
c00117d2:	0f 20 da             	mov    edx,cr3
c00117d5:	0f 22 da             	mov    cr3,edx
c00117d8:	0f 20 da             	mov    edx,cr3
c00117db:	0f 22 da             	mov    cr3,edx
c00117de:	83 ec 0c             	sub    esp,0xc
c00117e1:	35 03 8a 95 38       	xor    eax,0x38958a03
c00117e6:	50                   	push   eax
c00117e7:	e8 a9 ff ff ff       	call   c0011795 <KeSeedRand(unsigned int)>
c00117ec:	83 c4 1c             	add    esp,0x1c
c00117ef:	c3                   	ret    

c00117f0 <KeResolveCompatibilitySymbol(char*)>:
c00117f0:	83 ec 0c             	sub    esp,0xc
c00117f3:	83 ec 08             	sub    esp,0x8
c00117f6:	68 e0 24 02 c0       	push   0xc00224e0
c00117fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117ff:	e8 7c ef fe ff       	call   c0000780 <strcmp>
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	85 c0                	test   eax,eax
c0011809:	0f 94 c0             	sete   al
c001180c:	0f b6 c0             	movzx  eax,al
c001180f:	85 c0                	test   eax,eax
c0011811:	74 0d                	je     c0011820 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011813:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011818:	e9 8b 01 00 00       	jmp    c00119a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001181d:	8d 76 00             	lea    esi,[esi+0x0]
c0011820:	83 ec 08             	sub    esp,0x8
c0011823:	68 e9 24 02 c0       	push   0xc00224e9
c0011828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001182c:	e8 4f ef fe ff       	call   c0000780 <strcmp>
c0011831:	83 c4 10             	add    esp,0x10
c0011834:	85 c0                	test   eax,eax
c0011836:	0f 94 c0             	sete   al
c0011839:	0f b6 c0             	movzx  eax,al
c001183c:	85 c0                	test   eax,eax
c001183e:	74 0c                	je     c001184c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011840:	b8 f0 f7 01 c0       	mov    eax,0xc001f7f0
c0011845:	e9 5e 01 00 00       	jmp    c00119a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001184a:	66 90                	xchg   ax,ax
c001184c:	83 ec 08             	sub    esp,0x8
c001184f:	68 f3 24 02 c0       	push   0xc00224f3
c0011854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011858:	e8 23 ef fe ff       	call   c0000780 <strcmp>
c001185d:	83 c4 10             	add    esp,0x10
c0011860:	85 c0                	test   eax,eax
c0011862:	0f 94 c0             	sete   al
c0011865:	0f b6 c0             	movzx  eax,al
c0011868:	85 c0                	test   eax,eax
c001186a:	74 0c                	je     c0011878 <KeResolveCompatibilitySymbol(char*)+0x88>
c001186c:	b8 24 f5 01 c0       	mov    eax,0xc001f524
c0011871:	e9 32 01 00 00       	jmp    c00119a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011876:	66 90                	xchg   ax,ax
c0011878:	83 ec 08             	sub    esp,0x8
c001187b:	68 fc 24 02 c0       	push   0xc00224fc
c0011880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011884:	e8 f7 ee fe ff       	call   c0000780 <strcmp>
c0011889:	83 c4 10             	add    esp,0x10
c001188c:	85 c0                	test   eax,eax
c001188e:	0f 94 c0             	sete   al
c0011891:	0f b6 c0             	movzx  eax,al
c0011894:	85 c0                	test   eax,eax
c0011896:	74 0c                	je     c00118a4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011898:	b8 07 16 01 c0       	mov    eax,0xc0011607
c001189d:	e9 06 01 00 00       	jmp    c00119a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118a2:	66 90                	xchg   ax,ax
c00118a4:	83 ec 08             	sub    esp,0x8
c00118a7:	68 0f 25 02 c0       	push   0xc002250f
c00118ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118b0:	e8 cb ee fe ff       	call   c0000780 <strcmp>
c00118b5:	83 c4 10             	add    esp,0x10
c00118b8:	85 c0                	test   eax,eax
c00118ba:	0f 94 c0             	sete   al
c00118bd:	0f b6 c0             	movzx  eax,al
c00118c0:	85 c0                	test   eax,eax
c00118c2:	74 0c                	je     c00118d0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00118c4:	b8 09 0f 01 c0       	mov    eax,0xc0010f09
c00118c9:	e9 da 00 00 00       	jmp    c00119a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118ce:	66 90                	xchg   ax,ax
c00118d0:	83 ec 08             	sub    esp,0x8
c00118d3:	68 2c 25 02 c0       	push   0xc002252c
c00118d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118dc:	e8 9f ee fe ff       	call   c0000780 <strcmp>
c00118e1:	83 c4 10             	add    esp,0x10
c00118e4:	85 c0                	test   eax,eax
c00118e6:	0f 94 c0             	sete   al
c00118e9:	0f b6 c0             	movzx  eax,al
c00118ec:	85 c0                	test   eax,eax
c00118ee:	74 0c                	je     c00118fc <KeResolveCompatibilitySymbol(char*)+0x10c>
c00118f0:	b8 f0 f8 01 c0       	mov    eax,0xc001f8f0
c00118f5:	e9 ae 00 00 00       	jmp    c00119a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118fa:	66 90                	xchg   ax,ax
c00118fc:	83 ec 08             	sub    esp,0x8
c00118ff:	68 36 25 02 c0       	push   0xc0022536
c0011904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011908:	e8 73 ee fe ff       	call   c0000780 <strcmp>
c001190d:	83 c4 10             	add    esp,0x10
c0011910:	85 c0                	test   eax,eax
c0011912:	0f 94 c0             	sete   al
c0011915:	0f b6 c0             	movzx  eax,al
c0011918:	85 c0                	test   eax,eax
c001191a:	74 0c                	je     c0011928 <KeResolveCompatibilitySymbol(char*)+0x138>
c001191c:	b8 70 f6 01 c0       	mov    eax,0xc001f670
c0011921:	e9 82 00 00 00       	jmp    c00119a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011926:	66 90                	xchg   ax,ax
c0011928:	83 ec 08             	sub    esp,0x8
c001192b:	68 3f 25 02 c0       	push   0xc002253f
c0011930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011934:	e8 47 ee fe ff       	call   c0000780 <strcmp>
c0011939:	83 c4 10             	add    esp,0x10
c001193c:	85 c0                	test   eax,eax
c001193e:	0f 94 c0             	sete   al
c0011941:	0f b6 c0             	movzx  eax,al
c0011944:	85 c0                	test   eax,eax
c0011946:	74 08                	je     c0011950 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011948:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c001194d:	eb 59                	jmp    c00119a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001194f:	90                   	nop
c0011950:	83 ec 08             	sub    esp,0x8
c0011953:	68 57 25 02 c0       	push   0xc0022557
c0011958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001195c:	e8 1f ee fe ff       	call   c0000780 <strcmp>
c0011961:	83 c4 10             	add    esp,0x10
c0011964:	85 c0                	test   eax,eax
c0011966:	0f 94 c0             	sete   al
c0011969:	0f b6 c0             	movzx  eax,al
c001196c:	85 c0                	test   eax,eax
c001196e:	74 08                	je     c0011978 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011970:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011975:	eb 31                	jmp    c00119a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011977:	90                   	nop
c0011978:	83 ec 08             	sub    esp,0x8
c001197b:	68 64 25 02 c0       	push   0xc0022564
c0011980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011984:	e8 f7 ed fe ff       	call   c0000780 <strcmp>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	85 c0                	test   eax,eax
c001198e:	0f 94 c0             	sete   al
c0011991:	0f b6 c0             	movzx  eax,al
c0011994:	85 c0                	test   eax,eax
c0011996:	74 08                	je     c00119a0 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011998:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c001199d:	eb 09                	jmp    c00119a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001199f:	90                   	nop
c00119a0:	b8 00 00 00 00       	mov    eax,0x0
c00119a5:	8d 76 00             	lea    esi,[esi+0x0]
c00119a8:	83 c4 0c             	add    esp,0xc
c00119ab:	c3                   	ret    

c00119ac <KiSigKill(int)>:
c00119ac:	83 ec 0c             	sub    esp,0xc
c00119af:	6a 00                	push   0x0
c00119b1:	6a 00                	push   0x0
c00119b3:	6a ff                	push   0xffffffff
c00119b5:	6a 01                	push   0x1
c00119b7:	e8 96 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119bc:	83 c4 1c             	add    esp,0x1c
c00119bf:	c3                   	ret    

c00119c0 <KiDefaultSignalHandlerIgnore(int)>:
c00119c0:	c3                   	ret    

c00119c1 <KiDefaultSignalHandlerPause(int)>:
c00119c1:	57                   	push   edi
c00119c2:	b9 07 00 00 00       	mov    ecx,0x7
c00119c7:	56                   	push   esi
c00119c8:	be ad 25 02 c0       	mov    esi,0xc00225ad
c00119cd:	83 ec 24             	sub    esp,0x24
c00119d0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119d4:	fc                   	cld    
c00119d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119d7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00119db:	50                   	push   eax
c00119dc:	6a 00                	push   0x0
c00119de:	6a 00                	push   0x0
c00119e0:	6a 27                	push   0x27
c00119e2:	e8 6b 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119e7:	83 c4 34             	add    esp,0x34
c00119ea:	5e                   	pop    esi
c00119eb:	5f                   	pop    edi
c00119ec:	c3                   	ret    

c00119ed <KiDefaultSignalHandlerResume(int)>:
c00119ed:	57                   	push   edi
c00119ee:	b9 1d 00 00 00       	mov    ecx,0x1d
c00119f3:	56                   	push   esi
c00119f4:	be c9 25 02 c0       	mov    esi,0xc00225c9
c00119f9:	83 ec 24             	sub    esp,0x24
c00119fc:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011a00:	fc                   	cld    
c0011a01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a03:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011a07:	50                   	push   eax
c0011a08:	6a 00                	push   0x0
c0011a0a:	6a 00                	push   0x0
c0011a0c:	6a 27                	push   0x27
c0011a0e:	e8 3f 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a13:	83 c4 34             	add    esp,0x34
c0011a16:	5e                   	pop    esi
c0011a17:	5f                   	pop    edi
c0011a18:	c3                   	ret    

c0011a19 <KeDeinitSignals(SigHandlerBlock*)>:
c0011a19:	e9 c9 60 ff ff       	jmp    c0007ae7 <free>

c0011a1e <KeInitSignals()>:
c0011a1e:	53                   	push   ebx
c0011a1f:	83 ec 14             	sub    esp,0x14
c0011a22:	68 c8 00 00 00       	push   0xc8
c0011a27:	e8 ab 60 ff ff       	call   c0007ad7 <malloc>
c0011a2c:	83 c4 0c             	add    esp,0xc
c0011a2f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a39:	89 c3                	mov    ebx,eax
c0011a3b:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a45:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a4b:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011a4f:	6a 20                	push   0x20
c0011a51:	6a 00                	push   0x0
c0011a53:	50                   	push   eax
c0011a54:	e8 97 ea fe ff       	call   c00004f0 <memset>
c0011a59:	83 c4 0c             	add    esp,0xc
c0011a5c:	6a 44                	push   0x44
c0011a5e:	6a 00                	push   0x0
c0011a60:	53                   	push   ebx
c0011a61:	e8 8a ea fe ff       	call   c00004f0 <memset>
c0011a66:	83 c4 18             	add    esp,0x18
c0011a69:	89 d8                	mov    eax,ebx
c0011a6b:	5b                   	pop    ebx
c0011a6c:	c3                   	ret    

c0011a6d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a6d:	53                   	push   ebx
c0011a6e:	b8 01 00 00 00       	mov    eax,0x1
c0011a73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a7b:	83 f9 10             	cmp    ecx,0x10
c0011a7e:	7f 21                	jg     c0011aa1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a84:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011a87:	89 03                	mov    DWORD PTR [ebx],eax
c0011a89:	b8 01 00 00 00       	mov    eax,0x1
c0011a8e:	d3 e0                	shl    eax,cl
c0011a90:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011a94:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011a97:	31 c0                	xor    eax,eax
c0011a99:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011aa1:	5b                   	pop    ebx
c0011aa2:	c3                   	ret    

c0011aa3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011aa3:	55                   	push   ebp
c0011aa4:	57                   	push   edi
c0011aa5:	bf 08 00 00 00       	mov    edi,0x8
c0011aaa:	56                   	push   esi
c0011aab:	53                   	push   ebx
c0011aac:	83 ec 18             	sub    esp,0x18
c0011aaf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011ab3:	68 e6 25 02 c0       	push   0xc00225e6
c0011ab8:	e8 51 8e ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0011abd:	83 c4 10             	add    esp,0x10
c0011ac0:	31 c9                	xor    ecx,ecx
c0011ac2:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011ac9:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011acf:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011ad3:	99                   	cdq    
c0011ad4:	f7 ff                	idiv   edi
c0011ad6:	8d 42 24             	lea    eax,[edx+0x24]
c0011ad9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011add:	85 f6                	test   esi,esi
c0011adf:	75 1a                	jne    c0011afb <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011ae1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ae5:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011ae9:	50                   	push   eax
c0011aea:	50                   	push   eax
c0011aeb:	52                   	push   edx
c0011aec:	68 f7 25 02 c0       	push   0xc00225f7
c0011af1:	e8 18 8e ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0011af6:	83 c4 10             	add    esp,0x10
c0011af9:	eb 1b                	jmp    c0011b16 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011afb:	41                   	inc    ecx
c0011afc:	83 f9 08             	cmp    ecx,0x8
c0011aff:	75 ce                	jne    c0011acf <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011b01:	83 ec 0c             	sub    esp,0xc
c0011b04:	be 01 00 00 00       	mov    esi,0x1
c0011b09:	68 18 26 02 c0       	push   0xc0022618
c0011b0e:	e8 fb 8d ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0011b13:	83 c4 10             	add    esp,0x10
c0011b16:	83 c4 0c             	add    esp,0xc
c0011b19:	89 f0                	mov    eax,esi
c0011b1b:	5b                   	pop    ebx
c0011b1c:	5e                   	pop    esi
c0011b1d:	5f                   	pop    edi
c0011b1e:	5d                   	pop    ebp
c0011b1f:	c3                   	ret    

c0011b20 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011b20:	55                   	push   ebp
c0011b21:	57                   	push   edi
c0011b22:	56                   	push   esi
c0011b23:	53                   	push   ebx
c0011b24:	51                   	push   ecx
c0011b25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b29:	85 db                	test   ebx,ebx
c0011b2b:	0f 84 bc 00 00 00    	je     c0011bed <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b31:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b38:	0f 84 af 00 00 00    	je     c0011bed <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b3e:	31 c9                	xor    ecx,ecx
c0011b40:	bf 08 00 00 00       	mov    edi,0x8
c0011b45:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b4b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b4e:	99                   	cdq    
c0011b4f:	f7 ff                	idiv   edi
c0011b51:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b58:	85 ed                	test   ebp,ebp
c0011b5a:	0f 84 9e 00 00 00    	je     c0011bfe <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011b60:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b66:	89 e9                	mov    ecx,ebp
c0011b68:	bf 01 00 00 00       	mov    edi,0x1
c0011b6d:	d3 e7                	shl    edi,cl
c0011b6f:	31 c9                	xor    ecx,ecx
c0011b71:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b74:	b8 01 00 00 00       	mov    eax,0x1
c0011b79:	d3 e0                	shl    eax,cl
c0011b7b:	85 04 24             	test   DWORD PTR [esp],eax
c0011b7e:	74 06                	je     c0011b86 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011b80:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011b84:	75 67                	jne    c0011bed <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b86:	41                   	inc    ecx
c0011b87:	83 f9 11             	cmp    ecx,0x11
c0011b8a:	75 e8                	jne    c0011b74 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011b8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011b8f:	46                   	inc    esi
c0011b90:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b96:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011ba1:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011ba8:	09 f8                	or     eax,edi
c0011baa:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011bb0:	31 c0                	xor    eax,eax
c0011bb2:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011bba:	74 09                	je     c0011bc5 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011bbc:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011bc3:	eb 06                	jmp    c0011bcb <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011bc5:	40                   	inc    eax
c0011bc6:	83 f8 08             	cmp    eax,0x8
c0011bc9:	75 e7                	jne    c0011bb2 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011bcb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011bcf:	83 fd 09             	cmp    ebp,0x9
c0011bd2:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011bd5:	89 2a                	mov    DWORD PTR [edx],ebp
c0011bd7:	75 07                	jne    c0011be0 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011bd9:	b8 ac 19 01 c0       	mov    eax,0xc00119ac
c0011bde:	eb 31                	jmp    c0011c11 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011be0:	83 f8 01             	cmp    eax,0x1
c0011be3:	75 0c                	jne    c0011bf1 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011be5:	f7 d7                	not    edi
c0011be7:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011bed:	31 c0                	xor    eax,eax
c0011bef:	eb 20                	jmp    c0011c11 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bf1:	85 c0                	test   eax,eax
c0011bf3:	75 1c                	jne    c0011c11 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bf5:	8b 04 ad 20 3e 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc1e0]
c0011bfc:	eb 13                	jmp    c0011c11 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bfe:	41                   	inc    ecx
c0011bff:	46                   	inc    esi
c0011c00:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c06:	83 f9 08             	cmp    ecx,0x8
c0011c09:	0f 85 36 ff ff ff    	jne    c0011b45 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011c0f:	eb dc                	jmp    c0011bed <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c11:	5a                   	pop    edx
c0011c12:	5b                   	pop    ebx
c0011c13:	5e                   	pop    esi
c0011c14:	5f                   	pop    edi
c0011c15:	5d                   	pop    ebp
c0011c16:	c3                   	ret    

c0011c17 <KiCheckSignalZ>:
c0011c17:	83 ec 10             	sub    esp,0x10
c0011c1a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c1e:	50                   	push   eax
c0011c1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c24:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c27:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c2d:	e8 ee fe ff ff       	call   c0011b20 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c32:	5a                   	pop    edx
c0011c33:	31 d2                	xor    edx,edx
c0011c35:	59                   	pop    ecx
c0011c36:	85 c0                	test   eax,eax
c0011c38:	74 19                	je     c0011c53 <KiCheckSignalZ+0x3c>
c0011c3a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c40:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c43:	89 02                	mov    DWORD PTR [edx],eax
c0011c45:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c50:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c53:	89 d0                	mov    eax,edx
c0011c55:	83 c4 10             	add    esp,0x10
c0011c58:	c3                   	ret    

c0011c59 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011c59:	56                   	push   esi
c0011c5a:	53                   	push   ebx
c0011c5b:	bb 01 00 00 00       	mov    ebx,0x1
c0011c60:	52                   	push   edx
c0011c61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c69:	d3 e3                	shl    ebx,cl
c0011c6b:	83 f9 10             	cmp    ecx,0x10
c0011c6e:	7f 08                	jg     c0011c78 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011c70:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011c76:	75 10                	jne    c0011c88 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011c78:	83 ec 0c             	sub    esp,0xc
c0011c7b:	68 29 26 02 c0       	push   0xc0022629
c0011c80:	e8 82 f9 ff ff       	call   c0011607 <KePanic(char const*)>
c0011c85:	83 c4 10             	add    esp,0x10
c0011c88:	f7 d3                	not    ebx
c0011c8a:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011c90:	58                   	pop    eax
c0011c91:	5b                   	pop    ebx
c0011c92:	5e                   	pop    esi
c0011c93:	c3                   	ret    

c0011c94 <KiFinishSignalZ>:
c0011c94:	53                   	push   ebx
c0011c95:	83 ec 10             	sub    esp,0x10
c0011c98:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c9c:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011c9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ca4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ca7:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011cad:	e8 a7 ff ff ff       	call   c0011c59 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011cb2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011cb8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011cbf:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011cc6:	83 c4 18             	add    esp,0x18
c0011cc9:	5b                   	pop    ebx
c0011cca:	c3                   	ret    

c0011ccb <SysSeekDir(regs*)>:
c0011ccb:	31 c0                	xor    eax,eax
c0011ccd:	31 d2                	xor    edx,edx
c0011ccf:	c3                   	ret    

c0011cd0 <SysTellDir(regs*)>:
c0011cd0:	31 c0                	xor    eax,eax
c0011cd2:	31 d2                	xor    edx,edx
c0011cd4:	c3                   	ret    

c0011cd5 <SysVerify(regs*)>:
c0011cd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd9:	31 d2                	xor    edx,edx
c0011cdb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011cde:	c3                   	ret    

c0011cdf <SysGetArgc(regs*)>:
c0011cdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ce4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ce7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011ced:	89 c2                	mov    edx,eax
c0011cef:	c1 fa 1f             	sar    edx,0x1f
c0011cf2:	c3                   	ret    

c0011cf3 <SysTTYName(regs*)>:
c0011cf3:	b8 01 00 00 00       	mov    eax,0x1
c0011cf8:	31 d2                	xor    edx,edx
c0011cfa:	c3                   	ret    

c0011cfb <SysFormatDisk(regs*)>:
c0011cfb:	56                   	push   esi
c0011cfc:	53                   	push   ebx
c0011cfd:	83 ec 04             	sub    esp,0x4
c0011d00:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d04:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011d0a:	eb 2a                	jmp    c0011d36 <SysFormatDisk(regs*)+0x3b>
c0011d0c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011d0f:	83 ec 0c             	sub    esp,0xc
c0011d12:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011d15:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d17:	51                   	push   ecx
c0011d18:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011d1b:	51                   	push   ecx
c0011d1c:	50                   	push   eax
c0011d1d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011d24:	50                   	push   eax
c0011d25:	53                   	push   ebx
c0011d26:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d29:	83 c4 20             	add    esp,0x20
c0011d2c:	83 f8 08             	cmp    eax,0x8
c0011d2f:	89 c1                	mov    ecx,eax
c0011d31:	75 14                	jne    c0011d47 <SysFormatDisk(regs*)+0x4c>
c0011d33:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d36:	85 db                	test   ebx,ebx
c0011d38:	75 d2                	jne    c0011d0c <SysFormatDisk(regs*)+0x11>
c0011d3a:	b8 03 00 00 00       	mov    eax,0x3
c0011d3f:	31 d2                	xor    edx,edx
c0011d41:	83 c4 04             	add    esp,0x4
c0011d44:	5b                   	pop    ebx
c0011d45:	5e                   	pop    esi
c0011d46:	c3                   	ret    
c0011d47:	85 c0                	test   eax,eax
c0011d49:	74 13                	je     c0011d5e <SysFormatDisk(regs*)+0x63>
c0011d4b:	31 d2                	xor    edx,edx
c0011d4d:	83 f9 09             	cmp    ecx,0x9
c0011d50:	b8 01 00 00 00       	mov    eax,0x1
c0011d55:	74 ea                	je     c0011d41 <SysFormatDisk(regs*)+0x46>
c0011d57:	b8 02 00 00 00       	mov    eax,0x2
c0011d5c:	eb e1                	jmp    c0011d3f <SysFormatDisk(regs*)+0x44>
c0011d5e:	31 c0                	xor    eax,eax
c0011d60:	eb dd                	jmp    c0011d3f <SysFormatDisk(regs*)+0x44>

c0011d62 <SysSetDiskVolumeLabel(regs*)>:
c0011d62:	56                   	push   esi
c0011d63:	53                   	push   ebx
c0011d64:	83 ec 04             	sub    esp,0x4
c0011d67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d6b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d6e:	83 f8 19             	cmp    eax,0x19
c0011d71:	77 33                	ja     c0011da6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d73:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011d7a:	85 c9                	test   ecx,ecx
c0011d7c:	74 28                	je     c0011da6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d7e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011d81:	85 db                	test   ebx,ebx
c0011d83:	74 21                	je     c0011da6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d85:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011d8b:	85 d2                	test   edx,edx
c0011d8d:	74 17                	je     c0011da6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d8f:	8b 32                	mov    esi,DWORD PTR [edx]
c0011d91:	53                   	push   ebx
c0011d92:	50                   	push   eax
c0011d93:	51                   	push   ecx
c0011d94:	52                   	push   edx
c0011d95:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011d98:	83 c4 10             	add    esp,0x10
c0011d9b:	83 c4 04             	add    esp,0x4
c0011d9e:	5b                   	pop    ebx
c0011d9f:	5e                   	pop    esi
c0011da0:	89 c2                	mov    edx,eax
c0011da2:	c1 fa 1f             	sar    edx,0x1f
c0011da5:	c3                   	ret    
c0011da6:	83 c4 04             	add    esp,0x4
c0011da9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011dae:	5b                   	pop    ebx
c0011daf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011db4:	5e                   	pop    esi
c0011db5:	c3                   	ret    

c0011db6 <SysGetDiskVolumeLabel(regs*)>:
c0011db6:	57                   	push   edi
c0011db7:	56                   	push   esi
c0011db8:	53                   	push   ebx
c0011db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dbd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011dc0:	83 fa 19             	cmp    edx,0x19
c0011dc3:	77 3c                	ja     c0011e01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dc5:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011dcc:	85 c9                	test   ecx,ecx
c0011dce:	74 31                	je     c0011e01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dd0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011dd3:	85 db                	test   ebx,ebx
c0011dd5:	74 2a                	je     c0011e01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dd7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011dda:	85 f6                	test   esi,esi
c0011ddc:	74 23                	je     c0011e01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dde:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011de4:	85 c0                	test   eax,eax
c0011de6:	74 19                	je     c0011e01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011de8:	83 ec 0c             	sub    esp,0xc
c0011deb:	8b 38                	mov    edi,DWORD PTR [eax]
c0011ded:	56                   	push   esi
c0011dee:	53                   	push   ebx
c0011def:	52                   	push   edx
c0011df0:	51                   	push   ecx
c0011df1:	50                   	push   eax
c0011df2:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011df5:	83 c4 20             	add    esp,0x20
c0011df8:	5b                   	pop    ebx
c0011df9:	5e                   	pop    esi
c0011dfa:	89 c2                	mov    edx,eax
c0011dfc:	c1 fa 1f             	sar    edx,0x1f
c0011dff:	5f                   	pop    edi
c0011e00:	c3                   	ret    
c0011e01:	5b                   	pop    ebx
c0011e02:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e07:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e0c:	5e                   	pop    esi
c0011e0d:	5f                   	pop    edi
c0011e0e:	c3                   	ret    

c0011e0f <SysShutdown(regs*)>:
c0011e0f:	57                   	push   edi
c0011e10:	56                   	push   esi
c0011e11:	83 ec 04             	sub    esp,0x4
c0011e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e18:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e1b:	85 c0                	test   eax,eax
c0011e1d:	74 1e                	je     c0011e3d <SysShutdown(regs*)+0x2e>
c0011e1f:	83 f8 01             	cmp    eax,0x1
c0011e22:	74 5f                	je     c0011e83 <SysShutdown(regs*)+0x74>
c0011e24:	83 f8 02             	cmp    eax,0x2
c0011e27:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e2c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e31:	74 32                	je     c0011e65 <SysShutdown(regs*)+0x56>
c0011e33:	83 c4 04             	add    esp,0x4
c0011e36:	89 f0                	mov    eax,esi
c0011e38:	5e                   	pop    esi
c0011e39:	89 fa                	mov    edx,edi
c0011e3b:	5f                   	pop    edi
c0011e3c:	c3                   	ret    
c0011e3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e42:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e47:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e4e:	6a 00                	push   0x0
c0011e50:	6a 00                	push   0x0
c0011e52:	6a 00                	push   0x0
c0011e54:	50                   	push   eax
c0011e55:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e58:	83 c4 10             	add    esp,0x10
c0011e5b:	89 f0                	mov    eax,esi
c0011e5d:	83 c4 04             	add    esp,0x4
c0011e60:	89 fa                	mov    edx,edi
c0011e62:	5e                   	pop    esi
c0011e63:	5f                   	pop    edi
c0011e64:	c3                   	ret    
c0011e65:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e6c:	6a 00                	push   0x0
c0011e6e:	6a 00                	push   0x0
c0011e70:	6a 01                	push   0x1
c0011e72:	50                   	push   eax
c0011e73:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e76:	83 c4 10             	add    esp,0x10
c0011e79:	89 f0                	mov    eax,esi
c0011e7b:	83 c4 04             	add    esp,0x4
c0011e7e:	89 fa                	mov    edx,edi
c0011e80:	5e                   	pop    esi
c0011e81:	5f                   	pop    edi
c0011e82:	c3                   	ret    
c0011e83:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011e88:	85 c0                	test   eax,eax
c0011e8a:	74 02                	je     c0011e8e <SysShutdown(regs*)+0x7f>
c0011e8c:	ff d0                	call   eax
c0011e8e:	31 f6                	xor    esi,esi
c0011e90:	83 c4 04             	add    esp,0x4
c0011e93:	89 f0                	mov    eax,esi
c0011e95:	31 ff                	xor    edi,edi
c0011e97:	5e                   	pop    esi
c0011e98:	89 fa                	mov    edx,edi
c0011e9a:	5f                   	pop    edi
c0011e9b:	c3                   	ret    

c0011e9c <SysRealpath(regs*)>:
c0011e9c:	53                   	push   ebx
c0011e9d:	83 ec 08             	sub    esp,0x8
c0011ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ea4:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011ea7:	85 c9                	test   ecx,ecx
c0011ea9:	74 36                	je     c0011ee1 <SysRealpath(regs*)+0x45>
c0011eab:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011eae:	31 d2                	xor    edx,edx
c0011eb0:	b8 01 00 00 00       	mov    eax,0x1
c0011eb5:	85 db                	test   ebx,ebx
c0011eb7:	75 05                	jne    c0011ebe <SysRealpath(regs*)+0x22>
c0011eb9:	83 c4 08             	add    esp,0x8
c0011ebc:	5b                   	pop    ebx
c0011ebd:	c3                   	ret    
c0011ebe:	6a 00                	push   0x0
c0011ec0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ec5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ec8:	05 0c 01 00 00       	add    eax,0x10c
c0011ecd:	50                   	push   eax
c0011ece:	51                   	push   ecx
c0011ecf:	53                   	push   ebx
c0011ed0:	e8 45 99 ff ff       	call   c000b81a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011ed5:	83 c4 10             	add    esp,0x10
c0011ed8:	31 c0                	xor    eax,eax
c0011eda:	31 d2                	xor    edx,edx
c0011edc:	83 c4 08             	add    esp,0x8
c0011edf:	5b                   	pop    ebx
c0011ee0:	c3                   	ret    
c0011ee1:	b8 01 00 00 00       	mov    eax,0x1
c0011ee6:	31 d2                	xor    edx,edx
c0011ee8:	eb f2                	jmp    c0011edc <SysRealpath(regs*)+0x40>

c0011eea <SysReadDir(regs*)>:
c0011eea:	53                   	push   ebx
c0011eeb:	83 ec 18             	sub    esp,0x18
c0011eee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ef2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ef5:	83 f8 02             	cmp    eax,0x2
c0011ef8:	76 4f                	jbe    c0011f49 <SysReadDir(regs*)+0x5f>
c0011efa:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011f01:	77 52                	ja     c0011f55 <SysReadDir(regs*)+0x6b>
c0011f03:	83 ec 0c             	sub    esp,0xc
c0011f06:	50                   	push   eax
c0011f07:	e8 93 75 ff ff       	call   c000949f <KeGetFileFromDescriptor(int)>
c0011f0c:	83 c4 10             	add    esp,0x10
c0011f0f:	85 c0                	test   eax,eax
c0011f11:	74 42                	je     c0011f55 <SysReadDir(regs*)+0x6b>
c0011f13:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f1b:	83 ec 0c             	sub    esp,0xc
c0011f1e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f22:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f24:	51                   	push   ecx
c0011f25:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f28:	51                   	push   ecx
c0011f29:	6a 00                	push   0x0
c0011f2b:	68 10 01 00 00       	push   0x110
c0011f30:	50                   	push   eax
c0011f31:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f34:	83 c4 20             	add    esp,0x20
c0011f37:	85 c0                	test   eax,eax
c0011f39:	89 c1                	mov    ecx,eax
c0011f3b:	74 27                	je     c0011f64 <SysReadDir(regs*)+0x7a>
c0011f3d:	31 d2                	xor    edx,edx
c0011f3f:	83 f9 07             	cmp    ecx,0x7
c0011f42:	b8 02 00 00 00       	mov    eax,0x2
c0011f47:	75 16                	jne    c0011f5f <SysReadDir(regs*)+0x75>
c0011f49:	b8 01 00 00 00       	mov    eax,0x1
c0011f4e:	31 d2                	xor    edx,edx
c0011f50:	83 c4 18             	add    esp,0x18
c0011f53:	5b                   	pop    ebx
c0011f54:	c3                   	ret    
c0011f55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f5f:	83 c4 18             	add    esp,0x18
c0011f62:	5b                   	pop    ebx
c0011f63:	c3                   	ret    
c0011f64:	31 c0                	xor    eax,eax
c0011f66:	31 d2                	xor    edx,edx
c0011f68:	eb e6                	jmp    c0011f50 <SysReadDir(regs*)+0x66>

c0011f6a <SysIsATTY(regs*)>:
c0011f6a:	83 ec 0c             	sub    esp,0xc
c0011f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f71:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f74:	83 f8 02             	cmp    eax,0x2
c0011f77:	76 07                	jbe    c0011f80 <SysIsATTY(regs*)+0x16>
c0011f79:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f7e:	75 26                	jne    c0011fa6 <SysIsATTY(regs*)+0x3c>
c0011f80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f88:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011f8e:	85 c0                	test   eax,eax
c0011f90:	74 24                	je     c0011fb6 <SysIsATTY(regs*)+0x4c>
c0011f92:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f94:	83 ec 0c             	sub    esp,0xc
c0011f97:	50                   	push   eax
c0011f98:	ff 12                	call   DWORD PTR [edx]
c0011f9a:	83 c4 10             	add    esp,0x10
c0011f9d:	31 d2                	xor    edx,edx
c0011f9f:	83 c4 0c             	add    esp,0xc
c0011fa2:	0f b6 c0             	movzx  eax,al
c0011fa5:	c3                   	ret    
c0011fa6:	83 ec 0c             	sub    esp,0xc
c0011fa9:	50                   	push   eax
c0011faa:	e8 f0 74 ff ff       	call   c000949f <KeGetFileFromDescriptor(int)>
c0011faf:	83 c4 10             	add    esp,0x10
c0011fb2:	85 c0                	test   eax,eax
c0011fb4:	75 dc                	jne    c0011f92 <SysIsATTY(regs*)+0x28>
c0011fb6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fbb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fc0:	83 c4 0c             	add    esp,0xc
c0011fc3:	c3                   	ret    

c0011fc4 <SysSeek(regs*)>:
c0011fc4:	56                   	push   esi
c0011fc5:	53                   	push   ebx
c0011fc6:	83 ec 04             	sub    esp,0x4
c0011fc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fcd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011fd0:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011fd3:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011fd9:	77 33                	ja     c001200e <SysSeek(regs*)+0x4a>
c0011fdb:	83 ec 0c             	sub    esp,0xc
c0011fde:	51                   	push   ecx
c0011fdf:	e8 bb 74 ff ff       	call   c000949f <KeGetFileFromDescriptor(int)>
c0011fe4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011fe7:	83 c4 0c             	add    esp,0xc
c0011fea:	31 db                	xor    ebx,ebx
c0011fec:	53                   	push   ebx
c0011fed:	51                   	push   ecx
c0011fee:	50                   	push   eax
c0011fef:	e8 0e 9c ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0011ff4:	83 c4 10             	add    esp,0x10
c0011ff7:	85 c0                	test   eax,eax
c0011ff9:	0f 95 c0             	setne  al
c0011ffc:	31 d2                	xor    edx,edx
c0011ffe:	0f b6 c0             	movzx  eax,al
c0012001:	f7 d8                	neg    eax
c0012003:	83 d2 00             	adc    edx,0x0
c0012006:	83 c4 04             	add    esp,0x4
c0012009:	5b                   	pop    ebx
c001200a:	f7 da                	neg    edx
c001200c:	5e                   	pop    esi
c001200d:	c3                   	ret    
c001200e:	83 c4 04             	add    esp,0x4
c0012011:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012016:	5b                   	pop    ebx
c0012017:	ba ff ff ff ff       	mov    edx,0xffffffff
c001201c:	5e                   	pop    esi
c001201d:	c3                   	ret    

c001201e <SysTell(regs*)>:
c001201e:	53                   	push   ebx
c001201f:	83 ec 08             	sub    esp,0x8
c0012022:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012026:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012029:	83 f8 02             	cmp    eax,0x2
c001202c:	76 4e                	jbe    c001207c <SysTell(regs*)+0x5e>
c001202e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012033:	76 19                	jbe    c001204e <SysTell(regs*)+0x30>
c0012035:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012038:	31 d2                	xor    edx,edx
c001203a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012040:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012047:	83 c4 08             	add    esp,0x8
c001204a:	31 c0                	xor    eax,eax
c001204c:	5b                   	pop    ebx
c001204d:	c3                   	ret    
c001204e:	83 ec 0c             	sub    esp,0xc
c0012051:	50                   	push   eax
c0012052:	e8 48 74 ff ff       	call   c000949f <KeGetFileFromDescriptor(int)>
c0012057:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001205a:	5a                   	pop    edx
c001205b:	59                   	pop    ecx
c001205c:	53                   	push   ebx
c001205d:	50                   	push   eax
c001205e:	e8 4b 9c ff ff       	call   c000bcae <File::tell(unsigned long long*)>
c0012063:	83 c4 10             	add    esp,0x10
c0012066:	85 c0                	test   eax,eax
c0012068:	0f 95 c0             	setne  al
c001206b:	31 d2                	xor    edx,edx
c001206d:	0f b6 c0             	movzx  eax,al
c0012070:	f7 d8                	neg    eax
c0012072:	83 d2 00             	adc    edx,0x0
c0012075:	83 c4 08             	add    esp,0x8
c0012078:	5b                   	pop    ebx
c0012079:	f7 da                	neg    edx
c001207b:	c3                   	ret    
c001207c:	83 c4 08             	add    esp,0x8
c001207f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012084:	5b                   	pop    ebx
c0012085:	ba ff ff ff ff       	mov    edx,0xffffffff
c001208a:	c3                   	ret    

c001208b <SysSize(regs*)>:
c001208b:	53                   	push   ebx
c001208c:	83 ec 18             	sub    esp,0x18
c001208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012093:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012096:	83 f8 02             	cmp    eax,0x2
c0012099:	76 54                	jbe    c00120ef <SysSize(regs*)+0x64>
c001209b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120a0:	76 19                	jbe    c00120bb <SysSize(regs*)+0x30>
c00120a2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120a5:	31 d2                	xor    edx,edx
c00120a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120b4:	83 c4 18             	add    esp,0x18
c00120b7:	31 c0                	xor    eax,eax
c00120b9:	5b                   	pop    ebx
c00120ba:	c3                   	ret    
c00120bb:	83 ec 0c             	sub    esp,0xc
c00120be:	50                   	push   eax
c00120bf:	e8 db 73 ff ff       	call   c000949f <KeGetFileFromDescriptor(int)>
c00120c4:	83 c4 0c             	add    esp,0xc
c00120c7:	8d 54 24 13          	lea    edx,[esp+0x13]
c00120cb:	52                   	push   edx
c00120cc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120cf:	52                   	push   edx
c00120d0:	50                   	push   eax
c00120d1:	e8 70 9d ff ff       	call   c000be46 <File::stat(unsigned long long*, bool*)>
c00120d6:	83 c4 10             	add    esp,0x10
c00120d9:	85 c0                	test   eax,eax
c00120db:	0f 95 c0             	setne  al
c00120de:	31 d2                	xor    edx,edx
c00120e0:	0f b6 c0             	movzx  eax,al
c00120e3:	f7 d8                	neg    eax
c00120e5:	83 d2 00             	adc    edx,0x0
c00120e8:	83 c4 18             	add    esp,0x18
c00120eb:	5b                   	pop    ebx
c00120ec:	f7 da                	neg    edx
c00120ee:	c3                   	ret    
c00120ef:	83 c4 18             	add    esp,0x18
c00120f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120f7:	5b                   	pop    ebx
c00120f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120fd:	c3                   	ret    

c00120fe <SysSizeFromFilename(regs*)>:
c00120fe:	55                   	push   ebp
c00120ff:	57                   	push   edi
c0012100:	56                   	push   esi
c0012101:	53                   	push   ebx
c0012102:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0012108:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001210f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012112:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012115:	85 f6                	test   esi,esi
c0012117:	89 f8                	mov    eax,edi
c0012119:	74 09                	je     c0012124 <SysSizeFromFilename(regs*)+0x26>
c001211b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012121:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012124:	83 f8 02             	cmp    eax,0x2
c0012127:	0f 86 ca 00 00 00    	jbe    c00121f7 <SysSizeFromFilename(regs*)+0xf9>
c001212d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012132:	76 1f                	jbe    c0012153 <SysSizeFromFilename(regs*)+0x55>
c0012134:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012137:	31 d2                	xor    edx,edx
c0012139:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001213f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012146:	31 c0                	xor    eax,eax
c0012148:	81 c4 4c 02 00 00    	add    esp,0x24c
c001214e:	5b                   	pop    ebx
c001214f:	5e                   	pop    esi
c0012150:	5f                   	pop    edi
c0012151:	5d                   	pop    ebp
c0012152:	c3                   	ret    
c0012153:	83 ec 0c             	sub    esp,0xc
c0012156:	68 14 01 00 00       	push   0x114
c001215b:	e8 77 59 ff ff       	call   c0007ad7 <malloc>
c0012160:	6a 01                	push   0x1
c0012162:	89 c5                	mov    ebp,eax
c0012164:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012169:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001216c:	51                   	push   ecx
c001216d:	57                   	push   edi
c001216e:	55                   	push   ebp
c001216f:	e8 d4 98 ff ff       	call   c000ba48 <File::File(char const*, Process*, bool)>
c0012174:	83 c4 1c             	add    esp,0x1c
c0012177:	8d 44 24 13          	lea    eax,[esp+0x13]
c001217b:	50                   	push   eax
c001217c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001217f:	53                   	push   ebx
c0012180:	55                   	push   ebp
c0012181:	e8 c0 9c ff ff       	call   c000be46 <File::stat(unsigned long long*, bool*)>
c0012186:	83 c4 10             	add    esp,0x10
c0012189:	85 ed                	test   ebp,ebp
c001218b:	89 c3                	mov    ebx,eax
c001218d:	74 0d                	je     c001219c <SysSizeFromFilename(regs*)+0x9e>
c001218f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012192:	83 ec 0c             	sub    esp,0xc
c0012195:	55                   	push   ebp
c0012196:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012199:	83 c4 10             	add    esp,0x10
c001219c:	85 db                	test   ebx,ebx
c001219e:	75 57                	jne    c00121f7 <SysSizeFromFilename(regs*)+0xf9>
c00121a0:	6a 00                	push   0x0
c00121a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121aa:	05 0c 01 00 00       	add    eax,0x10c
c00121af:	50                   	push   eax
c00121b0:	57                   	push   edi
c00121b1:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00121b8:	53                   	push   ebx
c00121b9:	e8 5c 96 ff ff       	call   c000b81a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00121be:	58                   	pop    eax
c00121bf:	5a                   	pop    edx
c00121c0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00121c4:	50                   	push   eax
c00121c5:	53                   	push   ebx
c00121c6:	e8 b7 90 ff ff       	call   c000b282 <KeDereferenceSymlink(char const*, char*)>
c00121cb:	83 c4 10             	add    esp,0x10
c00121ce:	ba 00 00 00 00       	mov    edx,0x0
c00121d3:	83 f8 01             	cmp    eax,0x1
c00121d6:	b8 00 00 00 00       	mov    eax,0x0
c00121db:	74 2f                	je     c001220c <SysSizeFromFilename(regs*)+0x10e>
c00121dd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00121e2:	74 3b                	je     c001221f <SysSizeFromFilename(regs*)+0x121>
c00121e4:	85 f6                	test   esi,esi
c00121e6:	0f 84 5c ff ff ff    	je     c0012148 <SysSizeFromFilename(regs*)+0x4a>
c00121ec:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00121f2:	e9 51 ff ff ff       	jmp    c0012148 <SysSizeFromFilename(regs*)+0x4a>
c00121f7:	81 c4 4c 02 00 00    	add    esp,0x24c
c00121fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012202:	5b                   	pop    ebx
c0012203:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012208:	5e                   	pop    esi
c0012209:	5f                   	pop    edi
c001220a:	5d                   	pop    ebp
c001220b:	c3                   	ret    
c001220c:	85 f6                	test   esi,esi
c001220e:	0f 84 34 ff ff ff    	je     c0012148 <SysSizeFromFilename(regs*)+0x4a>
c0012214:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001221a:	e9 29 ff ff ff       	jmp    c0012148 <SysSizeFromFilename(regs*)+0x4a>
c001221f:	85 f6                	test   esi,esi
c0012221:	0f 84 21 ff ff ff    	je     c0012148 <SysSizeFromFilename(regs*)+0x4a>
c0012227:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001222d:	e9 16 ff ff ff       	jmp    c0012148 <SysSizeFromFilename(regs*)+0x4a>

c0012232 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012232:	55                   	push   ebp
c0012233:	57                   	push   edi
c0012234:	56                   	push   esi
c0012235:	53                   	push   ebx
c0012236:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001223c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0012243:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012246:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012249:	85 f6                	test   esi,esi
c001224b:	89 f8                	mov    eax,edi
c001224d:	74 09                	je     c0012258 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c001224f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012255:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012258:	83 f8 02             	cmp    eax,0x2
c001225b:	0f 86 ca 00 00 00    	jbe    c001232b <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0012261:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012266:	76 1f                	jbe    c0012287 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0012268:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001226b:	31 d2                	xor    edx,edx
c001226d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012273:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001227a:	31 c0                	xor    eax,eax
c001227c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012282:	5b                   	pop    ebx
c0012283:	5e                   	pop    esi
c0012284:	5f                   	pop    edi
c0012285:	5d                   	pop    ebp
c0012286:	c3                   	ret    
c0012287:	83 ec 0c             	sub    esp,0xc
c001228a:	68 14 01 00 00       	push   0x114
c001228f:	e8 43 58 ff ff       	call   c0007ad7 <malloc>
c0012294:	6a 00                	push   0x0
c0012296:	89 c5                	mov    ebp,eax
c0012298:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001229d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00122a0:	51                   	push   ecx
c00122a1:	57                   	push   edi
c00122a2:	55                   	push   ebp
c00122a3:	e8 a0 97 ff ff       	call   c000ba48 <File::File(char const*, Process*, bool)>
c00122a8:	83 c4 1c             	add    esp,0x1c
c00122ab:	8d 44 24 13          	lea    eax,[esp+0x13]
c00122af:	50                   	push   eax
c00122b0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00122b3:	53                   	push   ebx
c00122b4:	55                   	push   ebp
c00122b5:	e8 8c 9b ff ff       	call   c000be46 <File::stat(unsigned long long*, bool*)>
c00122ba:	83 c4 10             	add    esp,0x10
c00122bd:	85 ed                	test   ebp,ebp
c00122bf:	89 c3                	mov    ebx,eax
c00122c1:	74 0d                	je     c00122d0 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00122c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00122c6:	83 ec 0c             	sub    esp,0xc
c00122c9:	55                   	push   ebp
c00122ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00122cd:	83 c4 10             	add    esp,0x10
c00122d0:	85 db                	test   ebx,ebx
c00122d2:	75 57                	jne    c001232b <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00122d4:	6a 00                	push   0x0
c00122d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122de:	05 0c 01 00 00       	add    eax,0x10c
c00122e3:	50                   	push   eax
c00122e4:	57                   	push   edi
c00122e5:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00122ec:	53                   	push   ebx
c00122ed:	e8 28 95 ff ff       	call   c000b81a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122f2:	58                   	pop    eax
c00122f3:	5a                   	pop    edx
c00122f4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00122f8:	50                   	push   eax
c00122f9:	53                   	push   ebx
c00122fa:	e8 83 8f ff ff       	call   c000b282 <KeDereferenceSymlink(char const*, char*)>
c00122ff:	83 c4 10             	add    esp,0x10
c0012302:	ba 00 00 00 00       	mov    edx,0x0
c0012307:	83 f8 01             	cmp    eax,0x1
c001230a:	b8 00 00 00 00       	mov    eax,0x0
c001230f:	74 2f                	je     c0012340 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0012311:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012316:	74 3b                	je     c0012353 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0012318:	85 f6                	test   esi,esi
c001231a:	0f 84 5c ff ff ff    	je     c001227c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012320:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012326:	e9 51 ff ff ff       	jmp    c001227c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001232b:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012331:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012336:	5b                   	pop    ebx
c0012337:	ba ff ff ff ff       	mov    edx,0xffffffff
c001233c:	5e                   	pop    esi
c001233d:	5f                   	pop    edi
c001233e:	5d                   	pop    ebp
c001233f:	c3                   	ret    
c0012340:	85 f6                	test   esi,esi
c0012342:	0f 84 34 ff ff ff    	je     c001227c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012348:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001234e:	e9 29 ff ff ff       	jmp    c001227c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012353:	85 f6                	test   esi,esi
c0012355:	0f 84 21 ff ff ff    	je     c001227c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001235b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012361:	e9 16 ff ff ff       	jmp    c001227c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0012366 <SysClose(regs*)>:
c0012366:	53                   	push   ebx
c0012367:	83 ec 08             	sub    esp,0x8
c001236a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001236e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012371:	83 f8 02             	cmp    eax,0x2
c0012374:	76 41                	jbe    c00123b7 <SysClose(regs*)+0x51>
c0012376:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001237c:	83 fa 01             	cmp    edx,0x1
c001237f:	76 2d                	jbe    c00123ae <SysClose(regs*)+0x48>
c0012381:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012386:	77 2f                	ja     c00123b7 <SysClose(regs*)+0x51>
c0012388:	83 ec 0c             	sub    esp,0xc
c001238b:	50                   	push   eax
c001238c:	e8 0e 71 ff ff       	call   c000949f <KeGetFileFromDescriptor(int)>
c0012391:	89 04 24             	mov    DWORD PTR [esp],eax
c0012394:	89 c3                	mov    ebx,eax
c0012396:	e8 07 98 ff ff       	call   c000bba2 <File::close()>
c001239b:	83 c4 10             	add    esp,0x10
c001239e:	85 db                	test   ebx,ebx
c00123a0:	74 0c                	je     c00123ae <SysClose(regs*)+0x48>
c00123a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123a4:	83 ec 0c             	sub    esp,0xc
c00123a7:	53                   	push   ebx
c00123a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123ab:	83 c4 10             	add    esp,0x10
c00123ae:	83 c4 08             	add    esp,0x8
c00123b1:	31 c0                	xor    eax,eax
c00123b3:	5b                   	pop    ebx
c00123b4:	31 d2                	xor    edx,edx
c00123b6:	c3                   	ret    
c00123b7:	83 c4 08             	add    esp,0x8
c00123ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123bf:	5b                   	pop    ebx
c00123c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123c5:	c3                   	ret    

c00123c6 <SysOpenDir(regs*)>:
c00123c6:	56                   	push   esi
c00123c7:	53                   	push   ebx
c00123c8:	83 ec 04             	sub    esp,0x4
c00123cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123cf:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00123d2:	85 c9                	test   ecx,ecx
c00123d4:	74 5d                	je     c0012433 <SysOpenDir(regs*)+0x6d>
c00123d6:	83 ec 0c             	sub    esp,0xc
c00123d9:	68 14 01 00 00       	push   0x114
c00123de:	e8 f4 56 ff ff       	call   c0007ad7 <malloc>
c00123e3:	83 c4 0c             	add    esp,0xc
c00123e6:	89 c6                	mov    esi,eax
c00123e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123f0:	50                   	push   eax
c00123f1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123f4:	52                   	push   edx
c00123f5:	56                   	push   esi
c00123f6:	e8 0b 9c ff ff       	call   c000c006 <Directory::Directory(char const*, Process*)>
c00123fb:	83 c4 10             	add    esp,0x10
c00123fe:	85 f6                	test   esi,esi
c0012400:	74 31                	je     c0012433 <SysOpenDir(regs*)+0x6d>
c0012402:	83 ec 0c             	sub    esp,0xc
c0012405:	56                   	push   esi
c0012406:	e8 c3 9c ff ff       	call   c000c0ce <Directory::open()>
c001240b:	83 c4 10             	add    esp,0x10
c001240e:	85 c0                	test   eax,eax
c0012410:	75 21                	jne    c0012433 <SysOpenDir(regs*)+0x6d>
c0012412:	83 ec 0c             	sub    esp,0xc
c0012415:	56                   	push   esi
c0012416:	e8 87 6d ff ff       	call   c00091a2 <UnixFile::getFileDescriptor()>
c001241b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001241e:	83 c4 10             	add    esp,0x10
c0012421:	89 02                	mov    DWORD PTR [edx],eax
c0012423:	c1 f8 1f             	sar    eax,0x1f
c0012426:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012429:	83 c4 04             	add    esp,0x4
c001242c:	31 c0                	xor    eax,eax
c001242e:	5b                   	pop    ebx
c001242f:	31 d2                	xor    edx,edx
c0012431:	5e                   	pop    esi
c0012432:	c3                   	ret    
c0012433:	83 c4 04             	add    esp,0x4
c0012436:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001243b:	5b                   	pop    ebx
c001243c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012441:	5e                   	pop    esi
c0012442:	c3                   	ret    

c0012443 <SysMakeDir(regs*)>:
c0012443:	56                   	push   esi
c0012444:	53                   	push   ebx
c0012445:	83 ec 10             	sub    esp,0x10
c0012448:	68 14 01 00 00       	push   0x114
c001244d:	e8 85 56 ff ff       	call   c0007ad7 <malloc>
c0012452:	83 c4 0c             	add    esp,0xc
c0012455:	89 c3                	mov    ebx,eax
c0012457:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001245c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001245f:	50                   	push   eax
c0012460:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012464:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012467:	52                   	push   edx
c0012468:	53                   	push   ebx
c0012469:	e8 98 9b ff ff       	call   c000c006 <Directory::Directory(char const*, Process*)>
c001246e:	83 c4 10             	add    esp,0x10
c0012471:	85 db                	test   ebx,ebx
c0012473:	74 2c                	je     c00124a1 <SysMakeDir(regs*)+0x5e>
c0012475:	83 ec 0c             	sub    esp,0xc
c0012478:	53                   	push   ebx
c0012479:	e8 30 9e ff ff       	call   c000c2ae <Directory::create()>
c001247e:	89 c6                	mov    esi,eax
c0012480:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012482:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012485:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012488:	83 c4 10             	add    esp,0x10
c001248b:	31 c0                	xor    eax,eax
c001248d:	85 f6                	test   esi,esi
c001248f:	0f 95 c0             	setne  al
c0012492:	31 d2                	xor    edx,edx
c0012494:	f7 d8                	neg    eax
c0012496:	83 d2 00             	adc    edx,0x0
c0012499:	83 c4 04             	add    esp,0x4
c001249c:	5b                   	pop    ebx
c001249d:	f7 da                	neg    edx
c001249f:	5e                   	pop    esi
c00124a0:	c3                   	ret    
c00124a1:	83 c4 04             	add    esp,0x4
c00124a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124a9:	5b                   	pop    ebx
c00124aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124af:	5e                   	pop    esi
c00124b0:	c3                   	ret    

c00124b1 <SysCloseDir(regs*)>:
c00124b1:	53                   	push   ebx
c00124b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124b7:	83 ec 08             	sub    esp,0x8
c00124ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124be:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00124c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124c6:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00124c9:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00124cf:	77 2a                	ja     c00124fb <SysCloseDir(regs*)+0x4a>
c00124d1:	83 ec 0c             	sub    esp,0xc
c00124d4:	51                   	push   ecx
c00124d5:	e8 c5 6f ff ff       	call   c000949f <KeGetFileFromDescriptor(int)>
c00124da:	89 04 24             	mov    DWORD PTR [esp],eax
c00124dd:	89 c3                	mov    ebx,eax
c00124df:	e8 46 9c ff ff       	call   c000c12a <Directory::close()>
c00124e4:	83 c4 10             	add    esp,0x10
c00124e7:	85 db                	test   ebx,ebx
c00124e9:	74 0c                	je     c00124f7 <SysCloseDir(regs*)+0x46>
c00124eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124ed:	83 ec 0c             	sub    esp,0xc
c00124f0:	53                   	push   ebx
c00124f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124f4:	83 c4 10             	add    esp,0x10
c00124f7:	31 c0                	xor    eax,eax
c00124f9:	31 d2                	xor    edx,edx
c00124fb:	83 c4 08             	add    esp,0x8
c00124fe:	5b                   	pop    ebx
c00124ff:	c3                   	ret    

c0012500 <SysWait(regs*)>:
c0012500:	83 ec 10             	sub    esp,0x10
c0012503:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012507:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001250a:	52                   	push   edx
c001250b:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001250e:	51                   	push   ecx
c001250f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012512:	50                   	push   eax
c0012513:	e8 54 3e 00 00       	call   c001636c <waitTask(int, int*, int)>
c0012518:	83 c4 1c             	add    esp,0x1c
c001251b:	89 c2                	mov    edx,eax
c001251d:	c1 fa 1f             	sar    edx,0x1f
c0012520:	c3                   	ret    

c0012521 <SysNotImpl(regs*)>:
c0012521:	83 ec 18             	sub    esp,0x18
c0012524:	68 3a 26 02 c0       	push   0xc002263a
c0012529:	e8 d9 f0 ff ff       	call   c0011607 <KePanic(char const*)>
c001252e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012533:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012538:	83 c4 1c             	add    esp,0x1c
c001253b:	c3                   	ret    

c001253c <SysPanic(regs*)>:
c001253c:	83 ec 18             	sub    esp,0x18
c001253f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012543:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012546:	50                   	push   eax
c0012547:	e8 bb f0 ff ff       	call   c0011607 <KePanic(char const*)>
c001254c:	b8 01 00 00 00       	mov    eax,0x1
c0012551:	31 d2                	xor    edx,edx
c0012553:	83 c4 1c             	add    esp,0x1c
c0012556:	c3                   	ret    

c0012557 <SysRmdir(regs*)>:
c0012557:	56                   	push   esi
c0012558:	53                   	push   ebx
c0012559:	83 ec 10             	sub    esp,0x10
c001255c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012560:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012563:	68 14 01 00 00       	push   0x114
c0012568:	e8 6a 55 ff ff       	call   c0007ad7 <malloc>
c001256d:	6a 00                	push   0x0
c001256f:	89 c3                	mov    ebx,eax
c0012571:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012576:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012579:	50                   	push   eax
c001257a:	56                   	push   esi
c001257b:	53                   	push   ebx
c001257c:	e8 c7 94 ff ff       	call   c000ba48 <File::File(char const*, Process*, bool)>
c0012581:	83 c4 14             	add    esp,0x14
c0012584:	53                   	push   ebx
c0012585:	e8 88 97 ff ff       	call   c000bd12 <File::unlink()>
c001258a:	83 c4 10             	add    esp,0x10
c001258d:	85 db                	test   ebx,ebx
c001258f:	89 c6                	mov    esi,eax
c0012591:	74 0c                	je     c001259f <SysRmdir(regs*)+0x48>
c0012593:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012595:	83 ec 0c             	sub    esp,0xc
c0012598:	53                   	push   ebx
c0012599:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001259c:	83 c4 10             	add    esp,0x10
c001259f:	31 c0                	xor    eax,eax
c00125a1:	85 f6                	test   esi,esi
c00125a3:	0f 95 c0             	setne  al
c00125a6:	31 d2                	xor    edx,edx
c00125a8:	f7 d8                	neg    eax
c00125aa:	83 d2 00             	adc    edx,0x0
c00125ad:	83 c4 04             	add    esp,0x4
c00125b0:	5b                   	pop    ebx
c00125b1:	f7 da                	neg    edx
c00125b3:	5e                   	pop    esi
c00125b4:	c3                   	ret    

c00125b5 <SysUnlink(regs*)>:
c00125b5:	56                   	push   esi
c00125b6:	53                   	push   ebx
c00125b7:	83 ec 10             	sub    esp,0x10
c00125ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125be:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125c1:	68 14 01 00 00       	push   0x114
c00125c6:	e8 0c 55 ff ff       	call   c0007ad7 <malloc>
c00125cb:	6a 00                	push   0x0
c00125cd:	89 c3                	mov    ebx,eax
c00125cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125d7:	50                   	push   eax
c00125d8:	56                   	push   esi
c00125d9:	53                   	push   ebx
c00125da:	e8 69 94 ff ff       	call   c000ba48 <File::File(char const*, Process*, bool)>
c00125df:	83 c4 14             	add    esp,0x14
c00125e2:	53                   	push   ebx
c00125e3:	e8 2a 97 ff ff       	call   c000bd12 <File::unlink()>
c00125e8:	83 c4 10             	add    esp,0x10
c00125eb:	85 db                	test   ebx,ebx
c00125ed:	89 c6                	mov    esi,eax
c00125ef:	74 0c                	je     c00125fd <SysUnlink(regs*)+0x48>
c00125f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125f3:	83 ec 0c             	sub    esp,0xc
c00125f6:	53                   	push   ebx
c00125f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125fa:	83 c4 10             	add    esp,0x10
c00125fd:	31 c0                	xor    eax,eax
c00125ff:	85 f6                	test   esi,esi
c0012601:	0f 95 c0             	setne  al
c0012604:	31 d2                	xor    edx,edx
c0012606:	f7 d8                	neg    eax
c0012608:	83 d2 00             	adc    edx,0x0
c001260b:	83 c4 04             	add    esp,0x4
c001260e:	5b                   	pop    ebx
c001260f:	f7 da                	neg    edx
c0012611:	5e                   	pop    esi
c0012612:	c3                   	ret    

c0012613 <SysGetArgv(regs*)>:
c0012613:	83 ec 0c             	sub    esp,0xc
c0012616:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001261a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001261d:	85 c0                	test   eax,eax
c001261f:	78 2c                	js     c001264d <SysGetArgv(regs*)+0x3a>
c0012621:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012627:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001262a:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012630:	7d 1b                	jge    c001264d <SysGetArgv(regs*)+0x3a>
c0012632:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012639:	85 c0                	test   eax,eax
c001263b:	74 18                	je     c0012655 <SysGetArgv(regs*)+0x42>
c001263d:	83 ec 08             	sub    esp,0x8
c0012640:	50                   	push   eax
c0012641:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012644:	50                   	push   eax
c0012645:	e8 06 e0 fe ff       	call   c0000650 <strcpy>
c001264a:	83 c4 10             	add    esp,0x10
c001264d:	31 c0                	xor    eax,eax
c001264f:	31 d2                	xor    edx,edx
c0012651:	83 c4 0c             	add    esp,0xc
c0012654:	c3                   	ret    
c0012655:	b8 01 00 00 00       	mov    eax,0x1
c001265a:	31 d2                	xor    edx,edx
c001265c:	83 c4 0c             	add    esp,0xc
c001265f:	c3                   	ret    

c0012660 <SysUSleep(regs*)>:
c0012660:	83 ec 1c             	sub    esp,0x1c
c0012663:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012667:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001266a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001266d:	6a 00                	push   0x0
c001266f:	6a 64                	push   0x64
c0012671:	52                   	push   edx
c0012672:	50                   	push   eax
c0012673:	e8 78 d1 00 00       	call   c001f7f0 <__udivdi3>
c0012678:	83 c4 14             	add    esp,0x14
c001267b:	50                   	push   eax
c001267c:	e8 cf 3d 00 00       	call   c0016450 <milliTenthSleep(unsigned int)>
c0012681:	31 c0                	xor    eax,eax
c0012683:	31 d2                	xor    edx,edx
c0012685:	83 c4 1c             	add    esp,0x1c
c0012688:	c3                   	ret    

c0012689 <SysSpawn(regs*)>:
c0012689:	56                   	push   esi
c001268a:	53                   	push   ebx
c001268b:	83 ec 04             	sub    esp,0x4
c001268e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012692:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012695:	85 f6                	test   esi,esi
c0012697:	75 0a                	jne    c00126a3 <SysSpawn(regs*)+0x1a>
c0012699:	83 c4 04             	add    esp,0x4
c001269c:	31 c0                	xor    eax,eax
c001269e:	5b                   	pop    ebx
c001269f:	31 d2                	xor    edx,edx
c00126a1:	5e                   	pop    esi
c00126a2:	c3                   	ret    
c00126a3:	83 ec 0c             	sub    esp,0xc
c00126a6:	68 24 07 00 00       	push   0x724
c00126ab:	e8 27 54 ff ff       	call   c0007ad7 <malloc>
c00126b0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00126b3:	83 c4 10             	add    esp,0x10
c00126b6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126b9:	89 c6                	mov    esi,eax
c00126bb:	31 c0                	xor    eax,eax
c00126bd:	85 c9                	test   ecx,ecx
c00126bf:	75 08                	jne    c00126c9 <SysSpawn(regs*)+0x40>
c00126c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126c9:	52                   	push   edx
c00126ca:	50                   	push   eax
c00126cb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126ce:	50                   	push   eax
c00126cf:	56                   	push   esi
c00126d0:	e8 e3 33 00 00       	call   c0015ab8 <Process::Process(char const*, Process*, char**)>
c00126d5:	83 c4 10             	add    esp,0x10
c00126d8:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00126df:	75 b8                	jne    c0012699 <SysSpawn(regs*)+0x10>
c00126e1:	83 ec 0c             	sub    esp,0xc
c00126e4:	56                   	push   esi
c00126e5:	e8 06 39 00 00       	call   c0015ff0 <Process::createUserThread()>
c00126ea:	8b 06                	mov    eax,DWORD PTR [esi]
c00126ec:	83 c4 10             	add    esp,0x10
c00126ef:	83 c4 04             	add    esp,0x4
c00126f2:	5b                   	pop    ebx
c00126f3:	89 c2                	mov    edx,eax
c00126f5:	c1 fa 1f             	sar    edx,0x1f
c00126f8:	5e                   	pop    esi
c00126f9:	c3                   	ret    

c00126fa <SysGetEnv(regs*)>:
c00126fa:	57                   	push   edi
c00126fb:	56                   	push   esi
c00126fc:	53                   	push   ebx
c00126fd:	83 ec 1c             	sub    esp,0x1c
c0012700:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012705:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012709:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001270c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001270f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012712:	51                   	push   ecx
c0012713:	e8 a7 ed ff ff       	call   c00114bf <KeGetProcessTotalEnvCount(Process*)>
c0012718:	83 c4 10             	add    esp,0x10
c001271b:	39 c7                	cmp    edi,eax
c001271d:	7c 12                	jl     c0012731 <SysGetEnv(regs*)+0x37>
c001271f:	31 c0                	xor    eax,eax
c0012721:	31 d2                	xor    edx,edx
c0012723:	85 f6                	test   esi,esi
c0012725:	74 03                	je     c001272a <SysGetEnv(regs*)+0x30>
c0012727:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001272a:	83 c4 10             	add    esp,0x10
c001272d:	5b                   	pop    ebx
c001272e:	5e                   	pop    esi
c001272f:	5f                   	pop    edi
c0012730:	c3                   	ret    
c0012731:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012735:	83 ec 04             	sub    esp,0x4
c0012738:	57                   	push   edi
c0012739:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001273f:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012742:	57                   	push   edi
c0012743:	50                   	push   eax
c0012744:	e8 96 ed ff ff       	call   c00114df <KeGetProcessEnvPair(Process*, int)>
c0012749:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001274c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012750:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012754:	83 c4 0c             	add    esp,0xc
c0012757:	85 d2                	test   edx,edx
c0012759:	75 23                	jne    c001277e <SysGetEnv(regs*)+0x84>
c001275b:	83 ec 0c             	sub    esp,0xc
c001275e:	50                   	push   eax
c001275f:	e8 1c de fe ff       	call   c0000580 <strlen>
c0012764:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012767:	89 c3                	mov    ebx,eax
c0012769:	e8 12 de fe ff       	call   c0000580 <strlen>
c001276e:	83 c4 10             	add    esp,0x10
c0012771:	31 d2                	xor    edx,edx
c0012773:	83 c4 10             	add    esp,0x10
c0012776:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001277a:	5b                   	pop    ebx
c001277b:	5e                   	pop    esi
c001277c:	5f                   	pop    edi
c001277d:	c3                   	ret    
c001277e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012781:	83 ec 08             	sub    esp,0x8
c0012784:	50                   	push   eax
c0012785:	56                   	push   esi
c0012786:	e8 c5 de fe ff       	call   c0000650 <strcpy>
c001278b:	58                   	pop    eax
c001278c:	5a                   	pop    edx
c001278d:	68 54 26 02 c0       	push   0xc0022654
c0012792:	56                   	push   esi
c0012793:	e8 d8 e0 fe ff       	call   c0000870 <strcat>
c0012798:	59                   	pop    ecx
c0012799:	5b                   	pop    ebx
c001279a:	57                   	push   edi
c001279b:	56                   	push   esi
c001279c:	e8 cf e0 fe ff       	call   c0000870 <strcat>
c00127a1:	83 c4 10             	add    esp,0x10
c00127a4:	31 c0                	xor    eax,eax
c00127a6:	83 c4 10             	add    esp,0x10
c00127a9:	31 d2                	xor    edx,edx
c00127ab:	5b                   	pop    ebx
c00127ac:	5e                   	pop    esi
c00127ad:	5f                   	pop    edi
c00127ae:	c3                   	ret    

c00127af <SysSetFatAttrib(regs*)>:
c00127af:	57                   	push   edi
c00127b0:	56                   	push   esi
c00127b1:	53                   	push   ebx
c00127b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127b6:	83 ec 0c             	sub    esp,0xc
c00127b9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00127bc:	68 14 01 00 00       	push   0x114
c00127c1:	e8 11 53 ff ff       	call   c0007ad7 <malloc>
c00127c6:	83 c4 0c             	add    esp,0xc
c00127c9:	89 c3                	mov    ebx,eax
c00127cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00127d3:	50                   	push   eax
c00127d4:	57                   	push   edi
c00127d5:	53                   	push   ebx
c00127d6:	e8 4b 93 ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c00127db:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00127de:	83 c4 0c             	add    esp,0xc
c00127e1:	0f b6 d4             	movzx  edx,ah
c00127e4:	0f b6 c0             	movzx  eax,al
c00127e7:	52                   	push   edx
c00127e8:	50                   	push   eax
c00127e9:	53                   	push   ebx
c00127ea:	e8 bd 95 ff ff       	call   c000bdac <File::chfatattr(unsigned char, unsigned char)>
c00127ef:	83 c4 10             	add    esp,0x10
c00127f2:	85 db                	test   ebx,ebx
c00127f4:	89 c6                	mov    esi,eax
c00127f6:	74 0c                	je     c0012804 <SysSetFatAttrib(regs*)+0x55>
c00127f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127fa:	83 ec 0c             	sub    esp,0xc
c00127fd:	53                   	push   ebx
c00127fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012801:	83 c4 10             	add    esp,0x10
c0012804:	5b                   	pop    ebx
c0012805:	31 c0                	xor    eax,eax
c0012807:	85 f6                	test   esi,esi
c0012809:	0f 95 c0             	setne  al
c001280c:	31 d2                	xor    edx,edx
c001280e:	5e                   	pop    esi
c001280f:	f7 d8                	neg    eax
c0012811:	83 d2 00             	adc    edx,0x0
c0012814:	f7 da                	neg    edx
c0012816:	5f                   	pop    edi
c0012817:	c3                   	ret    

c0012818 <SysPipe(regs*)>:
c0012818:	57                   	push   edi
c0012819:	56                   	push   esi
c001281a:	53                   	push   ebx
c001281b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001281f:	83 ec 0c             	sub    esp,0xc
c0012822:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012825:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012828:	6a 20                	push   0x20
c001282a:	e8 a8 52 ff ff       	call   c0007ad7 <malloc>
c001282f:	89 c3                	mov    ebx,eax
c0012831:	58                   	pop    eax
c0012832:	5a                   	pop    edx
c0012833:	68 00 50 00 00       	push   0x5000
c0012838:	53                   	push   ebx
c0012839:	e8 04 5c ff ff       	call   c0008442 <Pipe::Pipe(int)>
c001283e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012841:	e8 5c 69 ff ff       	call   c00091a2 <UnixFile::getFileDescriptor()>
c0012846:	89 07                	mov    DWORD PTR [edi],eax
c0012848:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001284b:	e8 52 69 ff ff       	call   c00091a2 <UnixFile::getFileDescriptor()>
c0012850:	83 c4 10             	add    esp,0x10
c0012853:	31 d2                	xor    edx,edx
c0012855:	89 06                	mov    DWORD PTR [esi],eax
c0012857:	31 c0                	xor    eax,eax
c0012859:	5b                   	pop    ebx
c001285a:	5e                   	pop    esi
c001285b:	5f                   	pop    edi
c001285c:	c3                   	ret    

c001285d <SysGetUnixTime(regs*)>:
c001285d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0012862:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012868:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001286c:	e9 81 9c ff ff       	jmp    c000c4f2 <Clock::timeInSecondsLocal()>

c0012871 <string_ends_with(char const*, char const*)>:
c0012871:	57                   	push   edi
c0012872:	56                   	push   esi
c0012873:	53                   	push   ebx
c0012874:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012878:	83 ec 0c             	sub    esp,0xc
c001287b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001287f:	53                   	push   ebx
c0012880:	e8 fb dc fe ff       	call   c0000580 <strlen>
c0012885:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012888:	89 c6                	mov    esi,eax
c001288a:	e8 f1 dc fe ff       	call   c0000580 <strlen>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	31 d2                	xor    edx,edx
c0012894:	39 c6                	cmp    esi,eax
c0012896:	7d 06                	jge    c001289e <string_ends_with(char const*, char const*)+0x2d>
c0012898:	5b                   	pop    ebx
c0012899:	89 d0                	mov    eax,edx
c001289b:	5e                   	pop    esi
c001289c:	5f                   	pop    edi
c001289d:	c3                   	ret    
c001289e:	83 ec 08             	sub    esp,0x8
c00128a1:	29 c6                	sub    esi,eax
c00128a3:	57                   	push   edi
c00128a4:	01 f3                	add    ebx,esi
c00128a6:	53                   	push   ebx
c00128a7:	e8 d4 de fe ff       	call   c0000780 <strcmp>
c00128ac:	83 c4 10             	add    esp,0x10
c00128af:	31 d2                	xor    edx,edx
c00128b1:	5b                   	pop    ebx
c00128b2:	5e                   	pop    esi
c00128b3:	85 c0                	test   eax,eax
c00128b5:	5f                   	pop    edi
c00128b6:	0f 94 c2             	sete   dl
c00128b9:	89 d0                	mov    eax,edx
c00128bb:	c3                   	ret    

c00128bc <SysOpen(regs*)>:
c00128bc:	56                   	push   esi
c00128bd:	53                   	push   ebx
c00128be:	81 ec 04 01 00 00    	sub    esp,0x104
c00128c4:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00128cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128ce:	85 c0                	test   eax,eax
c00128d0:	0f 84 c4 01 00 00    	je     c0012a9a <SysOpen(regs*)+0x1de>
c00128d6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128d9:	85 c0                	test   eax,eax
c00128db:	0f 84 b9 01 00 00    	je     c0012a9a <SysOpen(regs*)+0x1de>
c00128e1:	6a 00                	push   0x0
c00128e3:	68 56 26 02 c0       	push   0xc0022656
c00128e8:	50                   	push   eax
c00128e9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128ed:	56                   	push   esi
c00128ee:	e8 27 8f ff ff       	call   c000b81a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00128f3:	89 34 24             	mov    DWORD PTR [esp],esi
c00128f6:	e8 85 dc fe ff       	call   c0000580 <strlen>
c00128fb:	83 c4 10             	add    esp,0x10
c00128fe:	83 e8 01             	sub    eax,0x1
c0012901:	74 29                	je     c001292c <SysOpen(regs*)+0x70>
c0012903:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012907:	83 fa 2e             	cmp    edx,0x2e
c001290a:	74 1c                	je     c0012928 <SysOpen(regs*)+0x6c>
c001290c:	83 fa 3a             	cmp    edx,0x3a
c001290f:	74 17                	je     c0012928 <SysOpen(regs*)+0x6c>
c0012911:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012915:	83 e8 01             	sub    eax,0x1
c0012918:	74 12                	je     c001292c <SysOpen(regs*)+0x70>
c001291a:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001291e:	83 fa 3a             	cmp    edx,0x3a
c0012921:	74 05                	je     c0012928 <SysOpen(regs*)+0x6c>
c0012923:	83 fa 2e             	cmp    edx,0x2e
c0012926:	75 e9                	jne    c0012911 <SysOpen(regs*)+0x55>
c0012928:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001292c:	83 ec 08             	sub    esp,0x8
c001292f:	68 5a 26 02 c0       	push   0xc002265a
c0012934:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012937:	50                   	push   eax
c0012938:	e8 34 ff ff ff       	call   c0012871 <string_ends_with(char const*, char const*)>
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	85 c0                	test   eax,eax
c0012942:	74 1d                	je     c0012961 <SysOpen(regs*)+0xa5>
c0012944:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012947:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001294d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012954:	81 c4 04 01 00 00    	add    esp,0x104
c001295a:	31 c0                	xor    eax,eax
c001295c:	5b                   	pop    ebx
c001295d:	31 d2                	xor    edx,edx
c001295f:	5e                   	pop    esi
c0012960:	c3                   	ret    
c0012961:	83 ec 08             	sub    esp,0x8
c0012964:	68 5f 26 02 c0       	push   0xc002265f
c0012969:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001296c:	50                   	push   eax
c001296d:	e8 ff fe ff ff       	call   c0012871 <string_ends_with(char const*, char const*)>
c0012972:	83 c4 10             	add    esp,0x10
c0012975:	85 c0                	test   eax,eax
c0012977:	75 cb                	jne    c0012944 <SysOpen(regs*)+0x88>
c0012979:	83 ec 08             	sub    esp,0x8
c001297c:	68 5b 26 02 c0       	push   0xc002265b
c0012981:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012984:	50                   	push   eax
c0012985:	e8 f6 dd fe ff       	call   c0000780 <strcmp>
c001298a:	83 c4 10             	add    esp,0x10
c001298d:	85 c0                	test   eax,eax
c001298f:	74 b3                	je     c0012944 <SysOpen(regs*)+0x88>
c0012991:	83 ec 08             	sub    esp,0x8
c0012994:	68 5a 26 02 c0       	push   0xc002265a
c0012999:	56                   	push   esi
c001299a:	e8 d2 fe ff ff       	call   c0012871 <string_ends_with(char const*, char const*)>
c001299f:	83 c4 10             	add    esp,0x10
c00129a2:	85 c0                	test   eax,eax
c00129a4:	75 9e                	jne    c0012944 <SysOpen(regs*)+0x88>
c00129a6:	83 ec 08             	sub    esp,0x8
c00129a9:	68 64 26 02 c0       	push   0xc0022664
c00129ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129b1:	50                   	push   eax
c00129b2:	e8 ba fe ff ff       	call   c0012871 <string_ends_with(char const*, char const*)>
c00129b7:	83 c4 10             	add    esp,0x10
c00129ba:	85 c0                	test   eax,eax
c00129bc:	0f 85 eb 00 00 00    	jne    c0012aad <SysOpen(regs*)+0x1f1>
c00129c2:	83 ec 08             	sub    esp,0x8
c00129c5:	68 69 26 02 c0       	push   0xc0022669
c00129ca:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129cd:	50                   	push   eax
c00129ce:	e8 9e fe ff ff       	call   c0012871 <string_ends_with(char const*, char const*)>
c00129d3:	83 c4 10             	add    esp,0x10
c00129d6:	85 c0                	test   eax,eax
c00129d8:	0f 85 cf 00 00 00    	jne    c0012aad <SysOpen(regs*)+0x1f1>
c00129de:	83 ec 08             	sub    esp,0x8
c00129e1:	68 65 26 02 c0       	push   0xc0022665
c00129e6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00129e9:	51                   	push   ecx
c00129ea:	e8 91 dd fe ff       	call   c0000780 <strcmp>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	85 c0                	test   eax,eax
c00129f4:	0f 84 b3 00 00 00    	je     c0012aad <SysOpen(regs*)+0x1f1>
c00129fa:	83 ec 08             	sub    esp,0x8
c00129fd:	68 64 26 02 c0       	push   0xc0022664
c0012a02:	56                   	push   esi
c0012a03:	e8 69 fe ff ff       	call   c0012871 <string_ends_with(char const*, char const*)>
c0012a08:	83 c4 10             	add    esp,0x10
c0012a0b:	85 c0                	test   eax,eax
c0012a0d:	0f 85 9a 00 00 00    	jne    c0012aad <SysOpen(regs*)+0x1f1>
c0012a13:	83 ec 0c             	sub    esp,0xc
c0012a16:	68 14 01 00 00       	push   0x114
c0012a1b:	e8 b7 50 ff ff       	call   c0007ad7 <malloc>
c0012a20:	83 c4 0c             	add    esp,0xc
c0012a23:	89 c6                	mov    esi,eax
c0012a25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a2d:	50                   	push   eax
c0012a2e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012a31:	52                   	push   edx
c0012a32:	56                   	push   esi
c0012a33:	e8 ee 90 ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c0012a38:	83 c4 10             	add    esp,0x10
c0012a3b:	85 f6                	test   esi,esi
c0012a3d:	74 5b                	je     c0012a9a <SysOpen(regs*)+0x1de>
c0012a3f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012a42:	0f b6 c2             	movzx  eax,dl
c0012a45:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a48:	89 d0                	mov    eax,edx
c0012a4a:	83 e0 01             	and    eax,0x1
c0012a4d:	f6 c2 02             	test   dl,0x2
c0012a50:	74 03                	je     c0012a55 <SysOpen(regs*)+0x199>
c0012a52:	83 c8 02             	or     eax,0x2
c0012a55:	f6 c2 04             	test   dl,0x4
c0012a58:	74 03                	je     c0012a5d <SysOpen(regs*)+0x1a1>
c0012a5a:	83 c8 04             	or     eax,0x4
c0012a5d:	f6 c2 08             	test   dl,0x8
c0012a60:	74 03                	je     c0012a65 <SysOpen(regs*)+0x1a9>
c0012a62:	83 c8 0a             	or     eax,0xa
c0012a65:	80 e2 10             	and    dl,0x10
c0012a68:	74 03                	je     c0012a6d <SysOpen(regs*)+0x1b1>
c0012a6a:	83 c8 12             	or     eax,0x12
c0012a6d:	83 ec 08             	sub    esp,0x8
c0012a70:	50                   	push   eax
c0012a71:	56                   	push   esi
c0012a72:	e8 cd 90 ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c0012a77:	83 c4 10             	add    esp,0x10
c0012a7a:	85 c0                	test   eax,eax
c0012a7c:	75 1c                	jne    c0012a9a <SysOpen(regs*)+0x1de>
c0012a7e:	83 ec 0c             	sub    esp,0xc
c0012a81:	56                   	push   esi
c0012a82:	e8 1b 67 ff ff       	call   c00091a2 <UnixFile::getFileDescriptor()>
c0012a87:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a8a:	83 c4 10             	add    esp,0x10
c0012a8d:	89 02                	mov    DWORD PTR [edx],eax
c0012a8f:	c1 f8 1f             	sar    eax,0x1f
c0012a92:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a95:	e9 ba fe ff ff       	jmp    c0012954 <SysOpen(regs*)+0x98>
c0012a9a:	81 c4 04 01 00 00    	add    esp,0x104
c0012aa0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012aa5:	5b                   	pop    ebx
c0012aa6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012aab:	5e                   	pop    esi
c0012aac:	c3                   	ret    
c0012aad:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012ab0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012ab6:	e9 92 fe ff ff       	jmp    c001294d <SysOpen(regs*)+0x91>

c0012abb <KeSystemCall(regs*, void*)>:
c0012abb:	53                   	push   ebx
c0012abc:	83 ec 08             	sub    esp,0x8
c0012abf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ac3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012ac6:	83 f8 3e             	cmp    eax,0x3e
c0012ac9:	77 16                	ja     c0012ae1 <KeSystemCall(regs*, void*)+0x26>
c0012acb:	8b 14 85 80 3e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc180]
c0012ad2:	85 d2                	test   edx,edx
c0012ad4:	74 0b                	je     c0012ae1 <KeSystemCall(regs*, void*)+0x26>
c0012ad6:	83 ec 0c             	sub    esp,0xc
c0012ad9:	53                   	push   ebx
c0012ada:	ff d2                	call   edx
c0012adc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012adf:	eb 0d                	jmp    c0012aee <KeSystemCall(regs*, void*)+0x33>
c0012ae1:	52                   	push   edx
c0012ae2:	52                   	push   edx
c0012ae3:	50                   	push   eax
c0012ae4:	68 6e 26 02 c0       	push   0xc002266e
c0012ae9:	e8 20 7e ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0012aee:	83 c4 10             	add    esp,0x10
c0012af1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012af6:	83 c4 08             	add    esp,0x8
c0012af9:	31 d2                	xor    edx,edx
c0012afb:	5b                   	pop    ebx
c0012afc:	c3                   	ret    
c0012afd:	66 90                	xchg   ax,ax
c0012aff:	90                   	nop

c0012b00 <KeSwitchEndian16(unsigned short)>:
c0012b00:	83 ec 04             	sub    esp,0x4
c0012b03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b07:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012b0b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b0f:	c1 f8 08             	sar    eax,0x8
c0012b12:	89 c2                	mov    edx,eax
c0012b14:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b18:	c1 e0 08             	shl    eax,0x8
c0012b1b:	09 d0                	or     eax,edx
c0012b1d:	83 c4 04             	add    esp,0x4
c0012b20:	c3                   	ret    
c0012b21:	8d 76 00             	lea    esi,[esi+0x0]

c0012b24 <KeSwitchEndian32(unsigned int)>:
c0012b24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b28:	c1 e8 18             	shr    eax,0x18
c0012b2b:	89 c2                	mov    edx,eax
c0012b2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b31:	c1 e0 08             	shl    eax,0x8
c0012b34:	25 00 00 ff 00       	and    eax,0xff0000
c0012b39:	09 c2                	or     edx,eax
c0012b3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b3f:	c1 e8 08             	shr    eax,0x8
c0012b42:	25 00 ff 00 00       	and    eax,0xff00
c0012b47:	09 c2                	or     edx,eax
c0012b49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b4d:	c1 e0 18             	shl    eax,0x18
c0012b50:	09 d0                	or     eax,edx
c0012b52:	c3                   	ret    
c0012b53:	90                   	nop

c0012b54 <EthernetCRC32(unsigned char*, int)>:
c0012b54:	83 ec 10             	sub    esp,0x10
c0012b57:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012b5c:	75 0a                	jne    c0012b68 <EthernetCRC32(unsigned char*, int)+0x14>
c0012b5e:	b8 00 00 00 00       	mov    eax,0x0
c0012b63:	e9 8c 00 00 00       	jmp    c0012bf4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b68:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b6d:	7f 09                	jg     c0012b78 <EthernetCRC32(unsigned char*, int)+0x24>
c0012b6f:	b8 00 00 00 00       	mov    eax,0x0
c0012b74:	eb 7e                	jmp    c0012bf4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b76:	66 90                	xchg   ax,ax
c0012b78:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012b80:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012b88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b8c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012b90:	7d 5a                	jge    c0012bec <EthernetCRC32(unsigned char*, int)+0x98>
c0012b92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b9a:	01 d0                	add    eax,edx
c0012b9c:	8a 00                	mov    al,BYTE PTR [eax]
c0012b9e:	0f b6 c0             	movzx  eax,al
c0012ba1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012ba5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012bad:	8d 76 00             	lea    esi,[esi+0x0]
c0012bb0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012bb5:	7f 2d                	jg     c0012be4 <EthernetCRC32(unsigned char*, int)+0x90>
c0012bb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bbb:	83 e0 01             	and    eax,0x1
c0012bbe:	74 10                	je     c0012bd0 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc4:	d1 e8                	shr    eax,1
c0012bc6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012bcb:	eb 0b                	jmp    c0012bd8 <EthernetCRC32(unsigned char*, int)+0x84>
c0012bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0012bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bd4:	d1 e8                	shr    eax,1
c0012bd6:	66 90                	xchg   ax,ax
c0012bd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bdc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012be1:	eb cd                	jmp    c0012bb0 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012be3:	90                   	nop
c0012be4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012be9:	eb 9d                	jmp    c0012b88 <EthernetCRC32(unsigned char*, int)+0x34>
c0012beb:	90                   	nop
c0012bec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bf0:	f7 d0                	not    eax
c0012bf2:	66 90                	xchg   ax,ax
c0012bf4:	83 c4 10             	add    esp,0x10
c0012bf7:	c3                   	ret    

c0012bf8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012bf8:	83 ec 2c             	sub    esp,0x2c
c0012bfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bff:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012c04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c13:	0f b7 c0             	movzx  eax,ax
c0012c16:	3d 06 08 00 00       	cmp    eax,0x806
c0012c1b:	75 13                	jne    c0012c30 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012c1d:	83 ec 0c             	sub    esp,0xc
c0012c20:	68 82 26 02 c0       	push   0xc0022682
c0012c25:	e8 e4 7c ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0012c2a:	83 c4 10             	add    esp,0x10
c0012c2d:	eb 25                	jmp    c0012c54 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c2f:	90                   	nop
c0012c30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c37:	0f b7 c0             	movzx  eax,ax
c0012c3a:	3d 00 08 00 00       	cmp    eax,0x800
c0012c3f:	75 13                	jne    c0012c54 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c41:	83 ec 0c             	sub    esp,0xc
c0012c44:	68 98 26 02 c0       	push   0xc0022698
c0012c49:	e8 c0 7c ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0012c4e:	83 c4 10             	add    esp,0x10
c0012c51:	8d 76 00             	lea    esi,[esi+0x0]
c0012c54:	90                   	nop
c0012c55:	83 c4 2c             	add    esp,0x2c
c0012c58:	c3                   	ret    

c0012c59 <CmOpen(char const*)>:
c0012c59:	57                   	push   edi
c0012c5a:	56                   	push   esi
c0012c5b:	53                   	push   ebx
c0012c5c:	83 ec 1c             	sub    esp,0x1c
c0012c5f:	6a 30                	push   0x30
c0012c61:	e8 71 4e ff ff       	call   c0007ad7 <malloc>
c0012c66:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c6d:	89 c3                	mov    ebx,eax
c0012c6f:	e8 63 4e ff ff       	call   c0007ad7 <malloc>
c0012c74:	83 c4 0c             	add    esp,0xc
c0012c77:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012c7d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c81:	89 c6                	mov    esi,eax
c0012c83:	50                   	push   eax
c0012c84:	e8 9d 8e ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c0012c89:	83 c4 0c             	add    esp,0xc
c0012c8c:	89 33                	mov    DWORD PTR [ebx],esi
c0012c8e:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012c92:	50                   	push   eax
c0012c93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c97:	50                   	push   eax
c0012c98:	56                   	push   esi
c0012c99:	e8 a8 91 ff ff       	call   c000be46 <File::stat(unsigned long long*, bool*)>
c0012c9e:	5a                   	pop    edx
c0012c9f:	59                   	pop    ecx
c0012ca0:	6a 01                	push   0x1
c0012ca2:	ff 33                	push   DWORD PTR [ebx]
c0012ca4:	e8 9b 8e ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c0012ca9:	5e                   	pop    esi
c0012caa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cae:	e8 24 4e ff ff       	call   c0007ad7 <malloc>
c0012cb3:	5a                   	pop    edx
c0012cb4:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012cb8:	89 c7                	mov    edi,eax
c0012cba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cbe:	56                   	push   esi
c0012cbf:	57                   	push   edi
c0012cc0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cc4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cc8:	50                   	push   eax
c0012cc9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012ccc:	83 c4 14             	add    esp,0x14
c0012ccf:	ff 33                	push   DWORD PTR [ebx]
c0012cd1:	e8 cc 8e ff ff       	call   c000bba2 <File::close()>
c0012cd6:	59                   	pop    ecx
c0012cd7:	58                   	pop    eax
c0012cd8:	6a 13                	push   0x13
c0012cda:	ff 33                	push   DWORD PTR [ebx]
c0012cdc:	e8 63 8e ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c0012ce1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ce3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ce5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ce8:	57                   	push   edi
c0012ce9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ced:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cf1:	50                   	push   eax
c0012cf2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012cf5:	83 c4 14             	add    esp,0x14
c0012cf8:	57                   	push   edi
c0012cf9:	e8 e9 4d ff ff       	call   c0007ae7 <free>
c0012cfe:	83 c4 10             	add    esp,0x10
c0012d01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012d04:	75 10                	jne    c0012d16 <CmOpen(char const*)+0xbd>
c0012d06:	83 ec 0c             	sub    esp,0xc
c0012d09:	68 ad 26 02 c0       	push   0xc00226ad
c0012d0e:	e8 f4 e8 ff ff       	call   c0011607 <KePanic(char const*)>
c0012d13:	83 c4 10             	add    esp,0x10
c0012d16:	50                   	push   eax
c0012d17:	6a 00                	push   0x0
c0012d19:	6a 00                	push   0x0
c0012d1b:	ff 33                	push   DWORD PTR [ebx]
c0012d1d:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012d20:	e8 dd 8e ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0012d25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d27:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d29:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d2c:	57                   	push   edi
c0012d2d:	6a 00                	push   0x0
c0012d2f:	6a 2b                	push   0x2b
c0012d31:	50                   	push   eax
c0012d32:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d35:	83 c4 1c             	add    esp,0x1c
c0012d38:	6a 00                	push   0x0
c0012d3a:	6a 00                	push   0x0
c0012d3c:	ff 33                	push   DWORD PTR [ebx]
c0012d3e:	e8 bf 8e ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0012d43:	83 c4 0c             	add    esp,0xc
c0012d46:	6a 08                	push   0x8
c0012d48:	68 be 26 02 c0       	push   0xc00226be
c0012d4d:	57                   	push   edi
c0012d4e:	e8 2d d6 fe ff       	call   c0000380 <memcmp>
c0012d53:	83 c4 10             	add    esp,0x10
c0012d56:	85 c0                	test   eax,eax
c0012d58:	74 10                	je     c0012d6a <CmOpen(char const*)+0x111>
c0012d5a:	83 ec 0c             	sub    esp,0xc
c0012d5d:	68 c7 26 02 c0       	push   0xc00226c7
c0012d62:	e8 a0 e8 ff ff       	call   c0011607 <KePanic(char const*)>
c0012d67:	83 c4 10             	add    esp,0x10
c0012d6a:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012d6e:	83 c4 10             	add    esp,0x10
c0012d71:	89 d8                	mov    eax,ebx
c0012d73:	5b                   	pop    ebx
c0012d74:	5e                   	pop    esi
c0012d75:	5f                   	pop    edi
c0012d76:	c3                   	ret    

c0012d77 <CmClose(Reghive_Tag*)>:
c0012d77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d7b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012d7f:	74 0b                	je     c0012d8c <CmClose(Reghive_Tag*)+0x15>
c0012d81:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d87:	e9 16 8e ff ff       	jmp    c000bba2 <File::close()>
c0012d8c:	c3                   	ret    

c0012d8d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d8d:	53                   	push   ebx
c0012d8e:	83 ec 18             	sub    esp,0x18
c0012d91:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d95:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d99:	74 29                	je     c0012dc4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012d9b:	50                   	push   eax
c0012d9c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012da1:	99                   	cdq    
c0012da2:	52                   	push   edx
c0012da3:	50                   	push   eax
c0012da4:	ff 33                	push   DWORD PTR [ebx]
c0012da6:	e8 57 8e ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0012dab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012dad:	5a                   	pop    edx
c0012dae:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012db2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012db4:	51                   	push   ecx
c0012db5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012db9:	6a 00                	push   0x0
c0012dbb:	6a 2b                	push   0x2b
c0012dbd:	50                   	push   eax
c0012dbe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012dc1:	83 c4 20             	add    esp,0x20
c0012dc4:	83 c4 18             	add    esp,0x18
c0012dc7:	5b                   	pop    ebx
c0012dc8:	c3                   	ret    

c0012dc9 <CmGetString(Reghive_Tag*, int, char*)>:
c0012dc9:	55                   	push   ebp
c0012dca:	57                   	push   edi
c0012dcb:	56                   	push   esi
c0012dcc:	53                   	push   ebx
c0012dcd:	31 db                	xor    ebx,ebx
c0012dcf:	83 ec 70             	sub    esp,0x70
c0012dd2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012dd6:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012ddd:	50                   	push   eax
c0012dde:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012de5:	55                   	push   ebp
c0012de6:	e8 a2 ff ff ff       	call   c0012d8d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012deb:	83 c4 10             	add    esp,0x10
c0012dee:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012df3:	c1 e0 08             	shl    eax,0x8
c0012df6:	89 c2                	mov    edx,eax
c0012df8:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012dfd:	09 d0                	or     eax,edx
c0012dff:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012e04:	c1 e0 08             	shl    eax,0x8
c0012e07:	09 d0                	or     eax,edx
c0012e09:	74 25                	je     c0012e30 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012e0b:	52                   	push   edx
c0012e0c:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012e10:	52                   	push   edx
c0012e11:	6b fb 0d             	imul   edi,ebx,0xd
c0012e14:	50                   	push   eax
c0012e15:	55                   	push   ebp
c0012e16:	e8 72 ff ff ff       	call   c0012d8d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e1b:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012e1f:	b9 27 00 00 00       	mov    ecx,0x27
c0012e24:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012e2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e2d:	83 c4 10             	add    esp,0x10
c0012e30:	83 c3 03             	add    ebx,0x3
c0012e33:	83 fb 15             	cmp    ebx,0x15
c0012e36:	75 b6                	jne    c0012dee <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012e38:	83 c4 6c             	add    esp,0x6c
c0012e3b:	5b                   	pop    ebx
c0012e3c:	5e                   	pop    esi
c0012e3d:	5f                   	pop    edi
c0012e3e:	5d                   	pop    ebp
c0012e3f:	c3                   	ret    

c0012e40 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012e40:	83 ec 40             	sub    esp,0x40
c0012e43:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e47:	50                   	push   eax
c0012e48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e4c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e50:	e8 38 ff ff ff       	call   c0012d8d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e55:	83 c4 10             	add    esp,0x10
c0012e58:	83 c8 ff             	or     eax,0xffffffff
c0012e5b:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012e60:	75 19                	jne    c0012e7b <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012e62:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012e67:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012e6c:	c1 e0 08             	shl    eax,0x8
c0012e6f:	09 c2                	or     edx,eax
c0012e71:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012e76:	c1 e0 10             	shl    eax,0x10
c0012e79:	09 d0                	or     eax,edx
c0012e7b:	83 c4 3c             	add    esp,0x3c
c0012e7e:	c3                   	ret    

c0012e7f <CmGetNext(Reghive_Tag*, int)>:
c0012e7f:	83 ec 40             	sub    esp,0x40
c0012e82:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e86:	50                   	push   eax
c0012e87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e8f:	e8 f9 fe ff ff       	call   c0012d8d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e94:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012e99:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012e9e:	c1 e0 08             	shl    eax,0x8
c0012ea1:	09 c2                	or     edx,eax
c0012ea3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012ea8:	83 c4 4c             	add    esp,0x4c
c0012eab:	c1 e0 10             	shl    eax,0x10
c0012eae:	09 d0                	or     eax,edx
c0012eb0:	c3                   	ret    

c0012eb1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012eb1:	53                   	push   ebx
c0012eb2:	83 ec 18             	sub    esp,0x18
c0012eb5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012eb9:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ebd:	74 29                	je     c0012ee8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012ebf:	50                   	push   eax
c0012ec0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012ec5:	99                   	cdq    
c0012ec6:	52                   	push   edx
c0012ec7:	50                   	push   eax
c0012ec8:	ff 33                	push   DWORD PTR [ebx]
c0012eca:	e8 33 8d ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0012ecf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ed1:	5a                   	pop    edx
c0012ed2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ed6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ed8:	51                   	push   ecx
c0012ed9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012edd:	6a 00                	push   0x0
c0012edf:	6a 2b                	push   0x2b
c0012ee1:	50                   	push   eax
c0012ee2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ee5:	83 c4 20             	add    esp,0x20
c0012ee8:	83 c4 18             	add    esp,0x18
c0012eeb:	5b                   	pop    ebx
c0012eec:	c3                   	ret    

c0012eed <CmFreeExtent(Reghive_Tag*, int)>:
c0012eed:	53                   	push   ebx
c0012eee:	83 ec 3c             	sub    esp,0x3c
c0012ef1:	6a 2b                	push   0x2b
c0012ef3:	6a 00                	push   0x0
c0012ef5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012ef9:	53                   	push   ebx
c0012efa:	e8 f1 d5 fe ff       	call   c00004f0 <memset>
c0012eff:	83 c4 0c             	add    esp,0xc
c0012f02:	53                   	push   ebx
c0012f03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f0b:	e8 a1 ff ff ff       	call   c0012eb1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f10:	83 c4 48             	add    esp,0x48
c0012f13:	5b                   	pop    ebx
c0012f14:	c3                   	ret    

c0012f15 <CmUpdateHeader(Reghive_Tag*)>:
c0012f15:	83 ec 0c             	sub    esp,0xc
c0012f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012f20:	74 10                	je     c0012f32 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012f22:	52                   	push   edx
c0012f23:	8d 50 05             	lea    edx,[eax+0x5]
c0012f26:	52                   	push   edx
c0012f27:	6a 00                	push   0x0
c0012f29:	50                   	push   eax
c0012f2a:	e8 82 ff ff ff       	call   c0012eb1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f2f:	83 c4 10             	add    esp,0x10
c0012f32:	83 c4 0c             	add    esp,0xc
c0012f35:	c3                   	ret    

c0012f36 <CmExpand(Reghive_Tag*, int)>:
c0012f36:	55                   	push   ebp
c0012f37:	57                   	push   edi
c0012f38:	83 cf ff             	or     edi,0xffffffff
c0012f3b:	56                   	push   esi
c0012f3c:	53                   	push   ebx
c0012f3d:	83 ec 3c             	sub    esp,0x3c
c0012f40:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f44:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f48:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f4c:	74 59                	je     c0012fa7 <CmExpand(Reghive_Tag*, int)+0x71>
c0012f4e:	50                   	push   eax
c0012f4f:	31 d2                	xor    edx,edx
c0012f51:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012f55:	31 ff                	xor    edi,edi
c0012f57:	52                   	push   edx
c0012f58:	50                   	push   eax
c0012f59:	ff 33                	push   DWORD PTR [ebx]
c0012f5b:	e8 a2 8c ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0012f60:	83 c4 0c             	add    esp,0xc
c0012f63:	6a 2b                	push   0x2b
c0012f65:	6a 00                	push   0x0
c0012f67:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012f6b:	55                   	push   ebp
c0012f6c:	e8 7f d5 fe ff       	call   c00004f0 <memset>
c0012f71:	83 c4 10             	add    esp,0x10
c0012f74:	39 f7                	cmp    edi,esi
c0012f76:	7d 1b                	jge    c0012f93 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012f78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f7a:	83 ec 0c             	sub    esp,0xc
c0012f7d:	47                   	inc    edi
c0012f7e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012f82:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f84:	51                   	push   ecx
c0012f85:	55                   	push   ebp
c0012f86:	6a 00                	push   0x0
c0012f88:	6a 2b                	push   0x2b
c0012f8a:	50                   	push   eax
c0012f8b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f8e:	83 c4 20             	add    esp,0x20
c0012f91:	eb e1                	jmp    c0012f74 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012f93:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012f96:	83 ec 0c             	sub    esp,0xc
c0012f99:	01 fe                	add    esi,edi
c0012f9b:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012f9e:	53                   	push   ebx
c0012f9f:	e8 71 ff ff ff       	call   c0012f15 <CmUpdateHeader(Reghive_Tag*)>
c0012fa4:	83 c4 10             	add    esp,0x10
c0012fa7:	83 c4 3c             	add    esp,0x3c
c0012faa:	89 f8                	mov    eax,edi
c0012fac:	5b                   	pop    ebx
c0012fad:	5e                   	pop    esi
c0012fae:	5f                   	pop    edi
c0012faf:	5d                   	pop    ebp
c0012fb0:	c3                   	ret    

c0012fb1 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012fb1:	55                   	push   ebp
c0012fb2:	57                   	push   edi
c0012fb3:	56                   	push   esi
c0012fb4:	53                   	push   ebx
c0012fb5:	83 cb ff             	or     ebx,0xffffffff
c0012fb8:	83 ec 1c             	sub    esp,0x1c
c0012fbb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012fbf:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012fc3:	74 68                	je     c001302d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012fc5:	51                   	push   ecx
c0012fc6:	be 2b 00 00 00       	mov    esi,0x2b
c0012fcb:	6a 00                	push   0x0
c0012fcd:	31 ff                	xor    edi,edi
c0012fcf:	6a 00                	push   0x0
c0012fd1:	31 db                	xor    ebx,ebx
c0012fd3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fd6:	e8 27 8c ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0012fdb:	83 c4 10             	add    esp,0x10
c0012fde:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012fe1:	76 3b                	jbe    c001301e <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012fe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fe6:	83 ec 0c             	sub    esp,0xc
c0012fe9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012fed:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fef:	51                   	push   ecx
c0012ff0:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012ff4:	51                   	push   ecx
c0012ff5:	6a 00                	push   0x0
c0012ff7:	6a 01                	push   0x1
c0012ff9:	50                   	push   eax
c0012ffa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012ffd:	83 c4 20             	add    esp,0x20
c0013000:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0013005:	74 26                	je     c001302d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0013007:	52                   	push   edx
c0013008:	43                   	inc    ebx
c0013009:	57                   	push   edi
c001300a:	56                   	push   esi
c001300b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001300e:	e8 ef 8b ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0013013:	83 c6 2b             	add    esi,0x2b
c0013016:	83 d7 00             	adc    edi,0x0
c0013019:	83 c4 10             	add    esp,0x10
c001301c:	eb c0                	jmp    c0012fde <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001301e:	50                   	push   eax
c001301f:	50                   	push   eax
c0013020:	6a 40                	push   0x40
c0013022:	55                   	push   ebp
c0013023:	e8 0e ff ff ff       	call   c0012f36 <CmExpand(Reghive_Tag*, int)>
c0013028:	83 c4 10             	add    esp,0x10
c001302b:	89 c3                	mov    ebx,eax
c001302d:	83 c4 1c             	add    esp,0x1c
c0013030:	89 d8                	mov    eax,ebx
c0013032:	5b                   	pop    ebx
c0013033:	5e                   	pop    esi
c0013034:	5f                   	pop    edi
c0013035:	5d                   	pop    ebp
c0013036:	c3                   	ret    

c0013037 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0013037:	55                   	push   ebp
c0013038:	57                   	push   edi
c0013039:	56                   	push   esi
c001303a:	53                   	push   ebx
c001303b:	81 ec 88 00 00 00    	sub    esp,0x88
c0013041:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0013048:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001304f:	e8 5d ff ff ff       	call   c0012fb1 <CmFindUnusedExtent(Reghive_Tag*)>
c0013054:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013058:	83 c4 0c             	add    esp,0xc
c001305b:	6a 2b                	push   0x2b
c001305d:	6a 00                	push   0x0
c001305f:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0013063:	55                   	push   ebp
c0013064:	e8 87 d4 fe ff       	call   c00004f0 <memset>
c0013069:	83 c4 10             	add    esp,0x10
c001306c:	85 db                	test   ebx,ebx
c001306e:	74 12                	je     c0013082 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0013070:	51                   	push   ecx
c0013071:	55                   	push   ebp
c0013072:	53                   	push   ebx
c0013073:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001307a:	e8 0e fd ff ff       	call   c0012d8d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001307f:	83 c4 10             	add    esp,0x10
c0013082:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0013086:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001308d:	b9 2b 00 00 00       	mov    ecx,0x2b
c0013092:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013094:	85 db                	test   ebx,ebx
c0013096:	74 49                	je     c00130e1 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0013098:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001309d:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00130a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00130a6:	c1 e0 08             	shl    eax,0x8
c00130a9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00130af:	09 c8                	or     eax,ecx
c00130b1:	74 11                	je     c00130c4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00130b3:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00130b7:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00130bb:	c1 e8 10             	shr    eax,0x10
c00130be:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00130c2:	eb 0f                	jmp    c00130d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00130c4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130c9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130ce:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130d3:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00130d7:	c1 ea 08             	shr    edx,0x8
c00130da:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00130df:	eb 0f                	jmp    c00130f0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00130e1:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130e6:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130eb:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130f0:	52                   	push   edx
c00130f1:	8d 44 24 49          	lea    eax,[esp+0x49]
c00130f5:	50                   	push   eax
c00130f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00130fa:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013101:	e8 ab fd ff ff       	call   c0012eb1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013106:	83 c4 10             	add    esp,0x10
c0013109:	85 db                	test   ebx,ebx
c001310b:	74 12                	je     c001311f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c001310d:	50                   	push   eax
c001310e:	55                   	push   ebp
c001310f:	53                   	push   ebx
c0013110:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013117:	e8 95 fd ff ff       	call   c0012eb1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001311c:	83 c4 10             	add    esp,0x10
c001311f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013123:	83 c4 7c             	add    esp,0x7c
c0013126:	5b                   	pop    ebx
c0013127:	5e                   	pop    esi
c0013128:	5f                   	pop    edi
c0013129:	5d                   	pop    ebp
c001312a:	c3                   	ret    

c001312b <CmSetString(Reghive_Tag*, int, char const*)>:
c001312b:	55                   	push   ebp
c001312c:	57                   	push   edi
c001312d:	56                   	push   esi
c001312e:	53                   	push   ebx
c001312f:	bb 27 00 00 00       	mov    ebx,0x27
c0013134:	81 ec 88 00 00 00    	sub    esp,0x88
c001313a:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0013141:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013148:	e8 33 d4 fe ff       	call   c0000580 <strlen>
c001314d:	8d 48 26             	lea    ecx,[eax+0x26]
c0013150:	89 c8                	mov    eax,ecx
c0013152:	99                   	cdq    
c0013153:	f7 fb                	idiv   ebx
c0013155:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013159:	83 c4 10             	add    esp,0x10
c001315c:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013162:	7e 10                	jle    c0013174 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013164:	83 ec 0c             	sub    esp,0xc
c0013167:	68 d8 26 02 c0       	push   0xc00226d8
c001316c:	e8 96 e4 ff ff       	call   c0011607 <KePanic(char const*)>
c0013171:	83 c4 10             	add    esp,0x10
c0013174:	53                   	push   ebx
c0013175:	31 ed                	xor    ebp,ebp
c0013177:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001317b:	53                   	push   ebx
c001317c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013183:	57                   	push   edi
c0013184:	e8 04 fc ff ff       	call   c0012d8d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013189:	83 c4 10             	add    esp,0x10
c001318c:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0013190:	89 f0                	mov    eax,esi
c0013192:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0013196:	c1 e0 08             	shl    eax,0x8
c0013199:	09 c6                	or     esi,eax
c001319b:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001319f:	c1 e6 08             	shl    esi,0x8
c00131a2:	09 c6                	or     esi,eax
c00131a4:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00131a8:	7e 72                	jle    c001321c <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00131aa:	85 f6                	test   esi,esi
c00131ac:	75 25                	jne    c00131d3 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00131ae:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00131b3:	8d 44 24 45          	lea    eax,[esp+0x45]
c00131b7:	50                   	push   eax
c00131b8:	6a 00                	push   0x0
c00131ba:	6a 00                	push   0x0
c00131bc:	57                   	push   edi
c00131bd:	e8 75 fe ff ff       	call   c0013037 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131c2:	83 c4 10             	add    esp,0x10
c00131c5:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00131c8:	89 c6                	mov    esi,eax
c00131ca:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00131cd:	c1 f8 10             	sar    eax,0x10
c00131d0:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00131d3:	51                   	push   ecx
c00131d4:	8d 54 24 49          	lea    edx,[esp+0x49]
c00131d8:	52                   	push   edx
c00131d9:	56                   	push   esi
c00131da:	57                   	push   edi
c00131db:	e8 ad fb ff ff       	call   c0012d8d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131e0:	83 c4 0c             	add    esp,0xc
c00131e3:	6a 27                	push   0x27
c00131e5:	6a 00                	push   0x0
c00131e7:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131eb:	51                   	push   ecx
c00131ec:	e8 ff d2 fe ff       	call   c00004f0 <memset>
c00131f1:	6b c5 27             	imul   eax,ebp,0x27
c00131f4:	83 c4 0c             	add    esp,0xc
c00131f7:	6a 27                	push   0x27
c00131f9:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013200:	50                   	push   eax
c0013201:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013205:	51                   	push   ecx
c0013206:	e8 85 d4 fe ff       	call   c0000690 <strncpy>
c001320b:	83 c4 0c             	add    esp,0xc
c001320e:	8d 54 24 49          	lea    edx,[esp+0x49]
c0013212:	52                   	push   edx
c0013213:	56                   	push   esi
c0013214:	57                   	push   edi
c0013215:	e8 97 fc ff ff       	call   c0012eb1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001321a:	eb 19                	jmp    c0013235 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c001321c:	85 f6                	test   esi,esi
c001321e:	74 18                	je     c0013238 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0013220:	52                   	push   edx
c0013221:	52                   	push   edx
c0013222:	56                   	push   esi
c0013223:	57                   	push   edi
c0013224:	e8 c4 fc ff ff       	call   c0012eed <CmFreeExtent(Reghive_Tag*, int)>
c0013229:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001322d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013231:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013235:	83 c4 10             	add    esp,0x10
c0013238:	45                   	inc    ebp
c0013239:	83 c3 03             	add    ebx,0x3
c001323c:	83 fd 07             	cmp    ebp,0x7
c001323f:	0f 85 47 ff ff ff    	jne    c001318c <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013245:	50                   	push   eax
c0013246:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001324a:	50                   	push   eax
c001324b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013252:	57                   	push   edi
c0013253:	e8 59 fc ff ff       	call   c0012eb1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013258:	81 c4 8c 00 00 00    	add    esp,0x8c
c001325e:	5b                   	pop    ebx
c001325f:	5e                   	pop    esi
c0013260:	5f                   	pop    edi
c0013261:	5d                   	pop    ebp
c0013262:	c3                   	ret    

c0013263 <CmGetMatch(char*, char*, bool, bool*)>:
c0013263:	56                   	push   esi
c0013264:	53                   	push   ebx
c0013265:	50                   	push   eax
c0013266:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001326b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001326f:	74 25                	je     c0013296 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013271:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013274:	31 db                	xor    ebx,ebx
c0013276:	50                   	push   eax
c0013277:	50                   	push   eax
c0013278:	8d 04 9d 80 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc080]
c001327f:	50                   	push   eax
c0013280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013284:	e8 f7 d4 fe ff       	call   c0000780 <strcmp>
c0013289:	83 c4 10             	add    esp,0x10
c001328c:	85 c0                	test   eax,eax
c001328e:	74 2e                	je     c00132be <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013290:	43                   	inc    ebx
c0013291:	83 fb 3f             	cmp    ebx,0x3f
c0013294:	75 e0                	jne    c0013276 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0013296:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013299:	31 db                	xor    ebx,ebx
c001329b:	51                   	push   ecx
c001329c:	51                   	push   ecx
c001329d:	8d 04 9d 80 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc080]
c00132a4:	50                   	push   eax
c00132a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00132a9:	e8 d2 d4 fe ff       	call   c0000780 <strcmp>
c00132ae:	83 c4 10             	add    esp,0x10
c00132b1:	85 c0                	test   eax,eax
c00132b3:	74 09                	je     c00132be <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00132b5:	43                   	inc    ebx
c00132b6:	83 fb 3f             	cmp    ebx,0x3f
c00132b9:	75 e0                	jne    c001329b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00132bb:	83 cb ff             	or     ebx,0xffffffff
c00132be:	5a                   	pop    edx
c00132bf:	89 d8                	mov    eax,ebx
c00132c1:	5b                   	pop    ebx
c00132c2:	5e                   	pop    esi
c00132c3:	c3                   	ret    

c00132c4 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00132c4:	55                   	push   ebp
c00132c5:	31 c0                	xor    eax,eax
c00132c7:	57                   	push   edi
c00132c8:	56                   	push   esi
c00132c9:	53                   	push   ebx
c00132ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132ce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00132d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00132d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132da:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00132dc:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00132df:	83 fd 1f             	cmp    ebp,0x1f
c00132e2:	7f 0b                	jg     c00132ef <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00132e4:	0f b6 c2             	movzx  eax,dl
c00132e7:	d3 e0                	shl    eax,cl
c00132e9:	09 07                	or     DWORD PTR [edi],eax
c00132eb:	b0 01                	mov    al,0x1
c00132ed:	01 33                	add    DWORD PTR [ebx],esi
c00132ef:	5b                   	pop    ebx
c00132f0:	5e                   	pop    esi
c00132f1:	5f                   	pop    edi
c00132f2:	5d                   	pop    ebp
c00132f3:	c3                   	ret    

c00132f4 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00132f4:	57                   	push   edi
c00132f5:	56                   	push   esi
c00132f6:	53                   	push   ebx
c00132f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132ff:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0013303:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013307:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013309:	7c 17                	jl     c0013322 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001330b:	8b 17                	mov    edx,DWORD PTR [edi]
c001330d:	b8 01 00 00 00       	mov    eax,0x1
c0013312:	d3 e0                	shl    eax,cl
c0013314:	48                   	dec    eax
c0013315:	21 d0                	and    eax,edx
c0013317:	d3 ea                	shr    edx,cl
c0013319:	89 17                	mov    DWORD PTR [edi],edx
c001331b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001331d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013320:	eb 05                	jmp    c0013327 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0013322:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013325:	31 c0                	xor    eax,eax
c0013327:	5b                   	pop    ebx
c0013328:	5e                   	pop    esi
c0013329:	5f                   	pop    edi
c001332a:	c3                   	ret    

c001332b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001332b:	83 ec 40             	sub    esp,0x40
c001332e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013332:	50                   	push   eax
c0013333:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013337:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001333b:	e8 4d fa ff ff       	call   c0012d8d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013340:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013344:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013348:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001334c:	89 10                	mov    DWORD PTR [eax],edx
c001334e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013351:	83 c4 4c             	add    esp,0x4c
c0013354:	c3                   	ret    

c0013355 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013355:	55                   	push   ebp
c0013356:	57                   	push   edi
c0013357:	56                   	push   esi
c0013358:	53                   	push   ebx
c0013359:	83 ec 40             	sub    esp,0x40
c001335c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013360:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013364:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013368:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c001336c:	53                   	push   ebx
c001336d:	56                   	push   esi
c001336e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013372:	e8 16 fa ff ff       	call   c0012d8d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013377:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001337b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001337f:	83 c4 0c             	add    esp,0xc
c0013382:	53                   	push   ebx
c0013383:	56                   	push   esi
c0013384:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013388:	e8 24 fb ff ff       	call   c0012eb1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001338d:	83 c4 4c             	add    esp,0x4c
c0013390:	5b                   	pop    ebx
c0013391:	5e                   	pop    esi
c0013392:	5f                   	pop    edi
c0013393:	5d                   	pop    ebp
c0013394:	c3                   	ret    

c0013395 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013395:	55                   	push   ebp
c0013396:	57                   	push   edi
c0013397:	56                   	push   esi
c0013398:	31 f6                	xor    esi,esi
c001339a:	53                   	push   ebx
c001339b:	31 db                	xor    ebx,ebx
c001339d:	83 ec 40             	sub    esp,0x40
c00133a0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00133a8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00133b0:	6a 12                	push   0x12
c00133b2:	68 ee 00 00 00       	push   0xee
c00133b7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133bb:	e8 30 d1 fe ff       	call   c00004f0 <memset>
c00133c0:	83 c4 10             	add    esp,0x10
c00133c3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00133c7:	6a 08                	push   0x8
c00133c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133cd:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00133d1:	50                   	push   eax
c00133d2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00133d6:	55                   	push   ebp
c00133d7:	57                   	push   edi
c00133d8:	e8 e7 fe ff ff       	call   c00132c4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00133dd:	83 c4 10             	add    esp,0x10
c00133e0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00133e4:	50                   	push   eax
c00133e5:	6a 06                	push   0x6
c00133e7:	55                   	push   ebp
c00133e8:	57                   	push   edi
c00133e9:	e8 06 ff ff ff       	call   c00132f4 <CmGetShift(unsigned int*, int*, int, bool*)>
c00133ee:	83 c4 10             	add    esp,0x10
c00133f1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00133f6:	74 07                	je     c00133ff <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00133f8:	46                   	inc    esi
c00133f9:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00133fd:	eb e1                	jmp    c00133e0 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00133ff:	43                   	inc    ebx
c0013400:	83 fb 12             	cmp    ebx,0x12
c0013403:	75 c2                	jne    c00133c7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013405:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013409:	31 f6                	xor    esi,esi
c001340b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001340e:	50                   	push   eax
c001340f:	50                   	push   eax
c0013410:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0013415:	46                   	inc    esi
c0013416:	8d 04 85 80 3f 02 c0 	lea    eax,[eax*4-0x3ffdc080]
c001341d:	50                   	push   eax
c001341e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013422:	e8 49 d4 fe ff       	call   c0000870 <strcat>
c0013427:	83 c4 10             	add    esp,0x10
c001342a:	83 fe 18             	cmp    esi,0x18
c001342d:	75 df                	jne    c001340e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001342f:	83 c4 3c             	add    esp,0x3c
c0013432:	31 c0                	xor    eax,eax
c0013434:	5b                   	pop    ebx
c0013435:	5e                   	pop    esi
c0013436:	5f                   	pop    edi
c0013437:	5d                   	pop    ebp
c0013438:	c3                   	ret    

c0013439 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013439:	83 ec 40             	sub    esp,0x40
c001343c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013440:	50                   	push   eax
c0013441:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013445:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013449:	e8 3f f9 ff ff       	call   c0012d8d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001344e:	58                   	pop    eax
c001344f:	5a                   	pop    edx
c0013450:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013454:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013458:	50                   	push   eax
c0013459:	e8 37 ff ff ff       	call   c0013395 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001345e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013463:	83 c4 4c             	add    esp,0x4c
c0013466:	c3                   	ret    

c0013467 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013467:	55                   	push   ebp
c0013468:	57                   	push   edi
c0013469:	56                   	push   esi
c001346a:	53                   	push   ebx
c001346b:	31 db                	xor    ebx,ebx
c001346d:	83 ec 70             	sub    esp,0x70
c0013470:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013477:	6a 30                	push   0x30
c0013479:	6a 00                	push   0x0
c001347b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001347f:	56                   	push   esi
c0013480:	e8 6b d0 fe ff       	call   c00004f0 <memset>
c0013485:	83 c4 10             	add    esp,0x10
c0013488:	83 ec 0c             	sub    esp,0xc
c001348b:	57                   	push   edi
c001348c:	e8 ef d0 fe ff       	call   c0000580 <strlen>
c0013491:	83 c4 10             	add    esp,0x10
c0013494:	39 d8                	cmp    eax,ebx
c0013496:	76 16                	jbe    c00134ae <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013498:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001349c:	83 ec 0c             	sub    esp,0xc
c001349f:	50                   	push   eax
c00134a0:	e8 bb d4 fe ff       	call   c0000960 <toupper>
c00134a5:	83 c4 10             	add    esp,0x10
c00134a8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00134ab:	43                   	inc    ebx
c00134ac:	eb da                	jmp    c0013488 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00134ae:	52                   	push   edx
c00134af:	31 db                	xor    ebx,ebx
c00134b1:	6a 18                	push   0x18
c00134b3:	31 ff                	xor    edi,edi
c00134b5:	6a 3f                	push   0x3f
c00134b7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134bb:	50                   	push   eax
c00134bc:	e8 2f d0 fe ff       	call   c00004f0 <memset>
c00134c1:	83 c4 10             	add    esp,0x10
c00134c4:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00134c8:	8d 74 24 10          	lea    esi,[esp+0x10]
c00134cc:	84 c0                	test   al,al
c00134ce:	0f 84 af 00 00 00    	je     c0013583 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00134d4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00134d8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00134db:	83 ec 0c             	sub    esp,0xc
c00134de:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c00134e3:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00134e7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00134eb:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c00134f0:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00134f4:	56                   	push   esi
c00134f5:	e8 86 d0 fe ff       	call   c0000580 <strlen>
c00134fa:	83 c4 10             	add    esp,0x10
c00134fd:	85 c0                	test   eax,eax
c00134ff:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013503:	74 0b                	je     c0013510 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013505:	50                   	push   eax
c0013506:	6a 01                	push   0x1
c0013508:	56                   	push   esi
c0013509:	8d 44 24 20          	lea    eax,[esp+0x20]
c001350d:	50                   	push   eax
c001350e:	eb 0a                	jmp    c001351a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013510:	50                   	push   eax
c0013511:	6a 00                	push   0x0
c0013513:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013517:	50                   	push   eax
c0013518:	6a 00                	push   0x0
c001351a:	e8 44 fd ff ff       	call   c0013263 <CmGetMatch(char*, char*, bool, bool*)>
c001351f:	83 c4 10             	add    esp,0x10
c0013522:	83 f8 ff             	cmp    eax,0xffffffff
c0013525:	75 1a                	jne    c0013541 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013527:	83 ec 0c             	sub    esp,0xc
c001352a:	68 ed 26 02 c0       	push   0xc00226ed
c001352f:	e8 d3 e0 ff ff       	call   c0011607 <KePanic(char const*)>
c0013534:	83 c4 10             	add    esp,0x10
c0013537:	b8 02 00 00 00       	mov    eax,0x2
c001353c:	e9 bb 00 00 00       	jmp    c00135fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013541:	83 ff 18             	cmp    edi,0x18
c0013544:	75 1a                	jne    c0013560 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013546:	83 ec 0c             	sub    esp,0xc
c0013549:	68 02 27 02 c0       	push   0xc0022702
c001354e:	e8 b4 e0 ff ff       	call   c0011607 <KePanic(char const*)>
c0013553:	83 c4 10             	add    esp,0x10
c0013556:	b8 01 00 00 00       	mov    eax,0x1
c001355b:	e9 9c 00 00 00       	jmp    c00135fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013560:	47                   	inc    edi
c0013561:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013566:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001356a:	0f 45 dd             	cmovne ebx,ebp
c001356d:	83 ec 0c             	sub    esp,0xc
c0013570:	56                   	push   esi
c0013571:	e8 0a d0 fe ff       	call   c0000580 <strlen>
c0013576:	83 c4 10             	add    esp,0x10
c0013579:	85 c0                	test   eax,eax
c001357b:	74 06                	je     c0013583 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001357d:	43                   	inc    ebx
c001357e:	e9 41 ff ff ff       	jmp    c00134c4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013583:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001358b:	31 db                	xor    ebx,ebx
c001358d:	31 ff                	xor    edi,edi
c001358f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013597:	50                   	push   eax
c0013598:	6a 12                	push   0x12
c001359a:	68 ee 00 00 00       	push   0xee
c001359f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00135a6:	e8 45 cf fe ff       	call   c00004f0 <memset>
c00135ab:	83 c4 10             	add    esp,0x10
c00135ae:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00135b2:	83 fb 17             	cmp    ebx,0x17
c00135b5:	7e 26                	jle    c00135dd <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00135b7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00135bb:	50                   	push   eax
c00135bc:	6a 08                	push   0x8
c00135be:	55                   	push   ebp
c00135bf:	56                   	push   esi
c00135c0:	e8 2f fd ff ff       	call   c00132f4 <CmGetShift(unsigned int*, int*, int, bool*)>
c00135c5:	83 c4 10             	add    esp,0x10
c00135c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00135cd:	74 26                	je     c00135f5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00135cf:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00135d6:	4b                   	dec    ebx
c00135d7:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00135da:	47                   	inc    edi
c00135db:	eb 1c                	jmp    c00135f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00135dd:	6a 06                	push   0x6
c00135df:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00135e4:	50                   	push   eax
c00135e5:	55                   	push   ebp
c00135e6:	56                   	push   esi
c00135e7:	e8 d8 fc ff ff       	call   c00132c4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00135ec:	83 c4 10             	add    esp,0x10
c00135ef:	84 c0                	test   al,al
c00135f1:	75 06                	jne    c00135f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00135f3:	eb c2                	jmp    c00135b7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00135f5:	31 c0                	xor    eax,eax
c00135f7:	eb 03                	jmp    c00135fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00135f9:	43                   	inc    ebx
c00135fa:	eb b2                	jmp    c00135ae <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c00135fc:	83 c4 6c             	add    esp,0x6c
c00135ff:	5b                   	pop    ebx
c0013600:	5e                   	pop    esi
c0013601:	5f                   	pop    edi
c0013602:	5d                   	pop    ebp
c0013603:	c3                   	ret    

c0013604 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013604:	53                   	push   ebx
c0013605:	83 ec 3c             	sub    esp,0x3c
c0013608:	6a 2b                	push   0x2b
c001360a:	6a 00                	push   0x0
c001360c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013610:	53                   	push   ebx
c0013611:	e8 da ce fe ff       	call   c00004f0 <memset>
c0013616:	58                   	pop    eax
c0013617:	5a                   	pop    edx
c0013618:	8d 44 24 11          	lea    eax,[esp+0x11]
c001361c:	50                   	push   eax
c001361d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013621:	e8 41 fe ff ff       	call   c0013467 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013626:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001362b:	83 c4 0c             	add    esp,0xc
c001362e:	6a 15                	push   0x15
c0013630:	6a 00                	push   0x0
c0013632:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013636:	50                   	push   eax
c0013637:	e8 b4 ce fe ff       	call   c00004f0 <memset>
c001363c:	53                   	push   ebx
c001363d:	6a 00                	push   0x0
c001363f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013643:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013647:	e8 eb f9 ff ff       	call   c0013037 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001364c:	83 c4 58             	add    esp,0x58
c001364f:	5b                   	pop    ebx
c0013650:	c3                   	ret    

c0013651 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013651:	56                   	push   esi
c0013652:	53                   	push   ebx
c0013653:	83 ec 48             	sub    esp,0x48
c0013656:	6a 12                	push   0x12
c0013658:	68 ff 00 00 00       	push   0xff
c001365d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013661:	56                   	push   esi
c0013662:	e8 89 ce fe ff       	call   c00004f0 <memset>
c0013667:	5a                   	pop    edx
c0013668:	59                   	pop    ecx
c0013669:	56                   	push   esi
c001366a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001366e:	e8 f4 fd ff ff       	call   c0013467 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013673:	83 c4 10             	add    esp,0x10
c0013676:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001367a:	85 db                	test   ebx,ebx
c001367c:	74 42                	je     c00136c0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001367e:	50                   	push   eax
c001367f:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013683:	50                   	push   eax
c0013684:	53                   	push   ebx
c0013685:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013689:	e8 ff f6 ff ff       	call   c0012d8d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001368e:	83 c4 0c             	add    esp,0xc
c0013691:	6a 12                	push   0x12
c0013693:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013697:	50                   	push   eax
c0013698:	56                   	push   esi
c0013699:	e8 e2 cc fe ff       	call   c0000380 <memcmp>
c001369e:	83 c4 10             	add    esp,0x10
c00136a1:	85 c0                	test   eax,eax
c00136a3:	74 1e                	je     c00136c3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00136a5:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00136aa:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00136af:	c1 e3 08             	shl    ebx,0x8
c00136b2:	09 d8                	or     eax,ebx
c00136b4:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00136b9:	c1 e3 10             	shl    ebx,0x10
c00136bc:	09 c3                	or     ebx,eax
c00136be:	eb ba                	jmp    c001367a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00136c0:	83 cb ff             	or     ebx,0xffffffff
c00136c3:	83 c4 44             	add    esp,0x44
c00136c6:	89 d8                	mov    eax,ebx
c00136c8:	5b                   	pop    ebx
c00136c9:	5e                   	pop    esi
c00136ca:	c3                   	ret    

c00136cb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00136cb:	57                   	push   edi
c00136cc:	56                   	push   esi
c00136cd:	53                   	push   ebx
c00136ce:	83 ec 34             	sub    esp,0x34
c00136d1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00136d5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00136d9:	6a 2b                	push   0x2b
c00136db:	6a 00                	push   0x0
c00136dd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136e1:	53                   	push   ebx
c00136e2:	e8 09 ce fe ff       	call   c00004f0 <memset>
c00136e7:	58                   	pop    eax
c00136e8:	5a                   	pop    edx
c00136e9:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136ed:	50                   	push   eax
c00136ee:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136f2:	e8 70 fd ff ff       	call   c0013467 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136f7:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00136fb:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00136ff:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013703:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013707:	53                   	push   ebx
c0013708:	6a 00                	push   0x0
c001370a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001370e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013712:	e8 20 f9 ff ff       	call   c0013037 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013717:	83 c4 50             	add    esp,0x50
c001371a:	5b                   	pop    ebx
c001371b:	5e                   	pop    esi
c001371c:	5f                   	pop    edi
c001371d:	c3                   	ret    

c001371e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001371e:	55                   	push   ebp
c001371f:	57                   	push   edi
c0013720:	56                   	push   esi
c0013721:	53                   	push   ebx
c0013722:	83 ec 40             	sub    esp,0x40
c0013725:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013729:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001372d:	6a 2b                	push   0x2b
c001372f:	6a 00                	push   0x0
c0013731:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013735:	56                   	push   esi
c0013736:	e8 b5 cd fe ff       	call   c00004f0 <memset>
c001373b:	5f                   	pop    edi
c001373c:	89 ef                	mov    edi,ebp
c001373e:	58                   	pop    eax
c001373f:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013743:	50                   	push   eax
c0013744:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013748:	e8 1a fd ff ff       	call   c0013467 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001374d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013752:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013757:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001375c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013761:	83 c4 10             	add    esp,0x10
c0013764:	85 ed                	test   ebp,ebp
c0013766:	74 14                	je     c001377c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013768:	51                   	push   ecx
c0013769:	51                   	push   ecx
c001376a:	57                   	push   edi
c001376b:	53                   	push   ebx
c001376c:	e8 0e f7 ff ff       	call   c0012e7f <CmGetNext(Reghive_Tag*, int)>
c0013771:	83 c4 10             	add    esp,0x10
c0013774:	85 c0                	test   eax,eax
c0013776:	74 04                	je     c001377c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013778:	89 c7                	mov    edi,eax
c001377a:	eb e8                	jmp    c0013764 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001377c:	56                   	push   esi
c001377d:	6a 00                	push   0x0
c001377f:	57                   	push   edi
c0013780:	53                   	push   ebx
c0013781:	e8 b1 f8 ff ff       	call   c0013037 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013786:	83 c4 0c             	add    esp,0xc
c0013789:	56                   	push   esi
c001378a:	50                   	push   eax
c001378b:	89 c7                	mov    edi,eax
c001378d:	53                   	push   ebx
c001378e:	e8 fa f5 ff ff       	call   c0012d8d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013793:	58                   	pop    eax
c0013794:	5a                   	pop    edx
c0013795:	6a 6c                	push   0x6c
c0013797:	6a 00                	push   0x0
c0013799:	6a 00                	push   0x0
c001379b:	68 13 27 02 c0       	push   0xc0022713
c00137a0:	57                   	push   edi
c00137a1:	53                   	push   ebx
c00137a2:	e8 24 ff ff ff       	call   c00136cb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00137a7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00137ab:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00137af:	c1 e8 10             	shr    eax,0x10
c00137b2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00137b6:	83 c4 1c             	add    esp,0x1c
c00137b9:	56                   	push   esi
c00137ba:	57                   	push   edi
c00137bb:	53                   	push   ebx
c00137bc:	e8 f0 f6 ff ff       	call   c0012eb1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00137c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00137c6:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00137cb:	c1 e0 08             	shl    eax,0x8
c00137ce:	09 c2                	or     edx,eax
c00137d0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00137d5:	83 c4 4c             	add    esp,0x4c
c00137d8:	5b                   	pop    ebx
c00137d9:	5e                   	pop    esi
c00137da:	c1 e0 10             	shl    eax,0x10
c00137dd:	09 d0                	or     eax,edx
c00137df:	5f                   	pop    edi
c00137e0:	5d                   	pop    ebp
c00137e1:	c3                   	ret    

c00137e2 <zStrtok(char*, char const*)>:
c00137e2:	55                   	push   ebp
c00137e3:	57                   	push   edi
c00137e4:	56                   	push   esi
c00137e5:	53                   	push   ebx
c00137e6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137ee:	85 db                	test   ebx,ebx
c00137f0:	74 2f                	je     c0013821 <zStrtok(char*, char const*)+0x3f>
c00137f2:	85 c0                	test   eax,eax
c00137f4:	75 09                	jne    c00137ff <zStrtok(char*, char const*)+0x1d>
c00137f6:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00137fb:	85 c0                	test   eax,eax
c00137fd:	74 50                	je     c001384f <zStrtok(char*, char const*)+0x6d>
c00137ff:	31 c9                	xor    ecx,ecx
c0013801:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013805:	74 03                	je     c001380a <zStrtok(char*, char const*)+0x28>
c0013807:	41                   	inc    ecx
c0013808:	eb f7                	jmp    c0013801 <zStrtok(char*, char const*)+0x1f>
c001380a:	31 d2                	xor    edx,edx
c001380c:	39 ca                	cmp    edx,ecx
c001380e:	74 15                	je     c0013825 <zStrtok(char*, char const*)+0x43>
c0013810:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013814:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013817:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001381a:	39 ee                	cmp    esi,ebp
c001381c:	74 13                	je     c0013831 <zStrtok(char*, char const*)+0x4f>
c001381e:	42                   	inc    edx
c001381f:	eb eb                	jmp    c001380c <zStrtok(char*, char const*)+0x2a>
c0013821:	31 c0                	xor    eax,eax
c0013823:	eb 2a                	jmp    c001384f <zStrtok(char*, char const*)+0x6d>
c0013825:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c001382f:	eb 1e                	jmp    c001384f <zStrtok(char*, char const*)+0x6d>
c0013831:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013834:	39 ce                	cmp    esi,ecx
c0013836:	75 0a                	jne    c0013842 <zStrtok(char*, char const*)+0x60>
c0013838:	40                   	inc    eax
c0013839:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c001383e:	89 d8                	mov    eax,ebx
c0013840:	eb 0d                	jmp    c001384f <zStrtok(char*, char const*)+0x6d>
c0013842:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013845:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013849:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c001384f:	5b                   	pop    ebx
c0013850:	5e                   	pop    esi
c0013851:	5f                   	pop    edi
c0013852:	5d                   	pop    ebp
c0013853:	c3                   	ret    

c0013854 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013854:	57                   	push   edi
c0013855:	56                   	push   esi
c0013856:	53                   	push   ebx
c0013857:	81 ec 08 01 00 00    	sub    esp,0x108
c001385d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013864:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001386b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001386f:	53                   	push   ebx
c0013870:	e8 db cd fe ff       	call   c0000650 <strcpy>
c0013875:	59                   	pop    ecx
c0013876:	5e                   	pop    esi
c0013877:	68 77 2a 02 c0       	push   0xc0022a77
c001387c:	53                   	push   ebx
c001387d:	bb 01 00 00 00       	mov    ebx,0x1
c0013882:	e8 5b ff ff ff       	call   c00137e2 <zStrtok(char*, char const*)>
c0013887:	83 c4 10             	add    esp,0x10
c001388a:	85 c0                	test   eax,eax
c001388c:	74 3b                	je     c00138c9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001388e:	52                   	push   edx
c001388f:	50                   	push   eax
c0013890:	6a 01                	push   0x1
c0013892:	57                   	push   edi
c0013893:	e8 b9 fd ff ff       	call   c0013651 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013898:	59                   	pop    ecx
c0013899:	5e                   	pop    esi
c001389a:	89 c3                	mov    ebx,eax
c001389c:	68 77 2a 02 c0       	push   0xc0022a77
c00138a1:	6a 00                	push   0x0
c00138a3:	e8 3a ff ff ff       	call   c00137e2 <zStrtok(char*, char const*)>
c00138a8:	83 c4 10             	add    esp,0x10
c00138ab:	85 c0                	test   eax,eax
c00138ad:	89 c6                	mov    esi,eax
c00138af:	74 18                	je     c00138c9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138b1:	52                   	push   edx
c00138b2:	52                   	push   edx
c00138b3:	53                   	push   ebx
c00138b4:	57                   	push   edi
c00138b5:	e8 86 f5 ff ff       	call   c0012e40 <CmEnterDirectory(Reghive_Tag*, int)>
c00138ba:	83 c4 10             	add    esp,0x10
c00138bd:	83 f8 ff             	cmp    eax,0xffffffff
c00138c0:	89 c3                	mov    ebx,eax
c00138c2:	74 05                	je     c00138c9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138c4:	50                   	push   eax
c00138c5:	56                   	push   esi
c00138c6:	53                   	push   ebx
c00138c7:	eb c9                	jmp    c0013892 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00138c9:	81 c4 00 01 00 00    	add    esp,0x100
c00138cf:	89 d8                	mov    eax,ebx
c00138d1:	5b                   	pop    ebx
c00138d2:	5e                   	pop    esi
c00138d3:	5f                   	pop    edi
c00138d4:	c3                   	ret    

c00138d5 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00138d5:	55                   	push   ebp
c00138d6:	57                   	push   edi
c00138d7:	56                   	push   esi
c00138d8:	53                   	push   ebx
c00138d9:	83 ec 5c             	sub    esp,0x5c
c00138dc:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00138e0:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00138e4:	85 db                	test   ebx,ebx
c00138e6:	0f 8e 84 00 00 00    	jle    c0013970 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00138ec:	57                   	push   edi
c00138ed:	31 ed                	xor    ebp,ebp
c00138ef:	6a 32                	push   0x32
c00138f1:	6a 00                	push   0x0
c00138f3:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00138f7:	57                   	push   edi
c00138f8:	e8 f3 cb fe ff       	call   c00004f0 <memset>
c00138fd:	83 c4 0c             	add    esp,0xc
c0013900:	57                   	push   edi
c0013901:	53                   	push   ebx
c0013902:	56                   	push   esi
c0013903:	e8 31 fb ff ff       	call   c0013439 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013908:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001390c:	83 c4 10             	add    esp,0x10
c001390f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013913:	7d 13                	jge    c0013928 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013915:	83 ec 0c             	sub    esp,0xc
c0013918:	45                   	inc    ebp
c0013919:	68 1b 2e 02 c0       	push   0xc0022e1b
c001391e:	e8 eb 6f ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0013923:	83 c4 10             	add    esp,0x10
c0013926:	eb e7                	jmp    c001390f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013928:	51                   	push   ecx
c0013929:	57                   	push   edi
c001392a:	53                   	push   ebx
c001392b:	68 19 27 02 c0       	push   0xc0022719
c0013930:	e8 d9 6f ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0013935:	83 c4 10             	add    esp,0x10
c0013938:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001393d:	75 1e                	jne    c001395d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001393f:	52                   	push   edx
c0013940:	52                   	push   edx
c0013941:	53                   	push   ebx
c0013942:	56                   	push   esi
c0013943:	e8 f8 f4 ff ff       	call   c0012e40 <CmEnterDirectory(Reghive_Tag*, int)>
c0013948:	83 c4 0c             	add    esp,0xc
c001394b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001394f:	8d 51 04             	lea    edx,[ecx+0x4]
c0013952:	52                   	push   edx
c0013953:	50                   	push   eax
c0013954:	56                   	push   esi
c0013955:	e8 7b ff ff ff       	call   c00138d5 <CmDisplayTree(Reghive_Tag*, int, int)>
c001395a:	83 c4 10             	add    esp,0x10
c001395d:	50                   	push   eax
c001395e:	50                   	push   eax
c001395f:	53                   	push   ebx
c0013960:	56                   	push   esi
c0013961:	e8 19 f5 ff ff       	call   c0012e7f <CmGetNext(Reghive_Tag*, int)>
c0013966:	83 c4 10             	add    esp,0x10
c0013969:	89 c3                	mov    ebx,eax
c001396b:	e9 74 ff ff ff       	jmp    c00138e4 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013970:	83 c4 5c             	add    esp,0x5c
c0013973:	5b                   	pop    ebx
c0013974:	5e                   	pop    esi
c0013975:	5f                   	pop    edi
c0013976:	5d                   	pop    ebp
c0013977:	c3                   	ret    

c0013978 <CmSplitFinalSlashInPlace(char*)>:
c0013978:	53                   	push   ebx
c0013979:	83 ec 14             	sub    esp,0x14
c001397c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013980:	53                   	push   ebx
c0013981:	e8 fa cb fe ff       	call   c0000580 <strlen>
c0013986:	83 c4 10             	add    esp,0x10
c0013989:	48                   	dec    eax
c001398a:	85 c0                	test   eax,eax
c001398c:	74 15                	je     c00139a3 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001398e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013992:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013995:	75 09                	jne    c00139a0 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013997:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001399a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001399e:	eb 05                	jmp    c00139a5 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00139a0:	48                   	dec    eax
c00139a1:	eb e7                	jmp    c001398a <CmSplitFinalSlashInPlace(char*)+0x12>
c00139a3:	31 c0                	xor    eax,eax
c00139a5:	83 c4 08             	add    esp,0x8
c00139a8:	5b                   	pop    ebx
c00139a9:	c3                   	ret    

c00139aa <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00139aa:	55                   	push   ebp
c00139ab:	57                   	push   edi
c00139ac:	56                   	push   esi
c00139ad:	53                   	push   ebx
c00139ae:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00139b4:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00139bb:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00139be:	8d 43 01             	lea    eax,[ebx+0x1]
c00139c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139c5:	89 f0                	mov    eax,esi
c00139c7:	3c 40                	cmp    al,0x40
c00139c9:	75 1b                	jne    c00139e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00139cb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00139ce:	85 c0                	test   eax,eax
c00139d0:	74 08                	je     c00139da <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00139d2:	83 f8 3a             	cmp    eax,0x3a
c00139d5:	74 03                	je     c00139da <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00139d7:	43                   	inc    ebx
c00139d8:	eb f1                	jmp    c00139cb <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00139da:	85 c0                	test   eax,eax
c00139dc:	0f 84 45 01 00 00    	je     c0013b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139e2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00139e5:	43                   	inc    ebx
c00139e6:	50                   	push   eax
c00139e7:	6a 40                	push   0x40
c00139e9:	6a 00                	push   0x0
c00139eb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139ef:	50                   	push   eax
c00139f0:	e8 fb ca fe ff       	call   c00004f0 <memset>
c00139f5:	89 f1                	mov    ecx,esi
c00139f7:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00139fe:	31 c0                	xor    eax,eax
c0013a00:	83 c4 10             	add    esp,0x10
c0013a03:	0f be f1             	movsx  esi,cl
c0013a06:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013a09:	85 d2                	test   edx,edx
c0013a0b:	89 d1                	mov    ecx,edx
c0013a0d:	0f 84 14 01 00 00    	je     c0013b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a13:	3d c7 00 00 00       	cmp    eax,0xc7
c0013a18:	0f 8f 09 01 00 00    	jg     c0013b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a1e:	83 fa 0a             	cmp    edx,0xa
c0013a21:	0f 85 f1 00 00 00    	jne    c0013b18 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013a27:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013a2c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013a31:	89 c8                	mov    eax,ecx
c0013a33:	a8 df                	test   al,0xdf
c0013a35:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a3a:	83 f9 23             	cmp    ecx,0x23
c0013a3d:	0f 94 c2             	sete   dl
c0013a40:	89 d5                	mov    ebp,edx
c0013a42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a46:	09 ea                	or     edx,ebp
c0013a48:	80 e2 01             	and    dl,0x1
c0013a4b:	75 47                	jne    c0013a94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a4d:	83 e8 09             	sub    eax,0x9
c0013a50:	3c 01                	cmp    al,0x1
c0013a52:	76 40                	jbe    c0013a94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a54:	83 f9 5b             	cmp    ecx,0x5b
c0013a57:	75 42                	jne    c0013a9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013a59:	83 fe 40             	cmp    esi,0x40
c0013a5c:	75 36                	jne    c0013a94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a5e:	83 ec 0c             	sub    esp,0xc
c0013a61:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013a65:	55                   	push   ebp
c0013a66:	e8 15 cb fe ff       	call   c0000580 <strlen>
c0013a6b:	83 c4 10             	add    esp,0x10
c0013a6e:	83 f8 3f             	cmp    eax,0x3f
c0013a71:	0f 87 b0 00 00 00    	ja     c0013b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a77:	50                   	push   eax
c0013a78:	50                   	push   eax
c0013a79:	55                   	push   ebp
c0013a7a:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0013a7e:	55                   	push   ebp
c0013a7f:	e8 cc cb fe ff       	call   c0000650 <strcpy>
c0013a84:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013a87:	e8 f4 ca fe ff       	call   c0000580 <strlen>
c0013a8c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013a91:	83 c4 10             	add    esp,0x10
c0013a94:	31 d2                	xor    edx,edx
c0013a96:	e9 84 00 00 00       	jmp    c0013b1f <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013a9b:	83 fe 40             	cmp    esi,0x40
c0013a9e:	74 06                	je     c0013aa6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013aa0:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013aa4:	eb 19                	jmp    c0013abf <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013aa6:	51                   	push   ecx
c0013aa7:	51                   	push   ecx
c0013aa8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013aac:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013ab0:	50                   	push   eax
c0013ab1:	e8 ca cc fe ff       	call   c0000780 <strcmp>
c0013ab6:	83 c4 10             	add    esp,0x10
c0013ab9:	85 c0                	test   eax,eax
c0013abb:	75 d7                	jne    c0013a94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013abd:	eb e1                	jmp    c0013aa0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0013abf:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013ac2:	85 c9                	test   ecx,ecx
c0013ac4:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013ac9:	83 f9 3d             	cmp    ecx,0x3d
c0013acc:	0f 94 c0             	sete   al
c0013acf:	89 c5                	mov    ebp,eax
c0013ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ad5:	09 e8                	or     eax,ebp
c0013ad7:	a8 01                	test   al,0x1
c0013ad9:	89 c5                	mov    ebp,eax
c0013adb:	75 03                	jne    c0013ae0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013add:	42                   	inc    edx
c0013ade:	eb df                	jmp    c0013abf <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013ae0:	85 c9                	test   ecx,ecx
c0013ae2:	74 43                	je     c0013b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013ae4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ae8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013aeb:	52                   	push   edx
c0013aec:	52                   	push   edx
c0013aed:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013af1:	50                   	push   eax
c0013af2:	53                   	push   ebx
c0013af3:	e8 88 cc fe ff       	call   c0000780 <strcmp>
c0013af8:	83 c4 10             	add    esp,0x10
c0013afb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013aff:	85 c0                	test   eax,eax
c0013b01:	75 91                	jne    c0013a94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013b03:	50                   	push   eax
c0013b04:	42                   	inc    edx
c0013b05:	50                   	push   eax
c0013b06:	52                   	push   edx
c0013b07:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013b0e:	e8 3d cb fe ff       	call   c0000650 <strcpy>
c0013b13:	83 c4 10             	add    esp,0x10
c0013b16:	eb 11                	jmp    c0013b29 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013b18:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013b1c:	8d 50 01             	lea    edx,[eax+0x1]
c0013b1f:	47                   	inc    edi
c0013b20:	89 d0                	mov    eax,edx
c0013b22:	e9 df fe ff ff       	jmp    c0013a06 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013b27:	31 ed                	xor    ebp,ebp
c0013b29:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013b2f:	89 e8                	mov    eax,ebp
c0013b31:	5b                   	pop    ebx
c0013b32:	5e                   	pop    esi
c0013b33:	5f                   	pop    edi
c0013b34:	5d                   	pop    ebp
c0013b35:	c3                   	ret    

c0013b36 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013b36:	57                   	push   edi
c0013b37:	56                   	push   esi
c0013b38:	53                   	push   ebx
c0013b39:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013b3f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013b46:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013b4d:	53                   	push   ebx
c0013b4e:	e8 2d ca fe ff       	call   c0000580 <strlen>
c0013b53:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b56:	89 c7                	mov    edi,eax
c0013b58:	e8 23 ca fe ff       	call   c0000580 <strlen>
c0013b5d:	83 c4 10             	add    esp,0x10
c0013b60:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013b64:	3d ff 00 00 00       	cmp    eax,0xff
c0013b69:	0f 87 d3 00 00 00    	ja     c0013c42 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b6f:	57                   	push   edi
c0013b70:	57                   	push   edi
c0013b71:	56                   	push   esi
c0013b72:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013b76:	56                   	push   esi
c0013b77:	e8 d4 ca fe ff       	call   c0000650 <strcpy>
c0013b7c:	58                   	pop    eax
c0013b7d:	5a                   	pop    edx
c0013b7e:	68 77 2a 02 c0       	push   0xc0022a77
c0013b83:	56                   	push   esi
c0013b84:	e8 e7 cc fe ff       	call   c0000870 <strcat>
c0013b89:	59                   	pop    ecx
c0013b8a:	5f                   	pop    edi
c0013b8b:	53                   	push   ebx
c0013b8c:	56                   	push   esi
c0013b8d:	e8 de cc fe ff       	call   c0000870 <strcat>
c0013b92:	58                   	pop    eax
c0013b93:	5a                   	pop    edx
c0013b94:	68 23 27 02 c0       	push   0xc0022723
c0013b99:	56                   	push   esi
c0013b9a:	e8 d1 cc fe ff       	call   c0000870 <strcat>
c0013b9f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013ba6:	e8 2c 3f ff ff       	call   c0007ad7 <malloc>
c0013bab:	83 c4 0c             	add    esp,0xc
c0013bae:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013bb4:	56                   	push   esi
c0013bb5:	50                   	push   eax
c0013bb6:	89 c3                	mov    ebx,eax
c0013bb8:	e8 69 7f ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c0013bbd:	83 c4 10             	add    esp,0x10
c0013bc0:	85 db                	test   ebx,ebx
c0013bc2:	74 7e                	je     c0013c42 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013bc4:	51                   	push   ecx
c0013bc5:	51                   	push   ecx
c0013bc6:	6a 01                	push   0x1
c0013bc8:	53                   	push   ebx
c0013bc9:	e8 76 7f ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c0013bce:	83 c4 10             	add    esp,0x10
c0013bd1:	85 c0                	test   eax,eax
c0013bd3:	74 08                	je     c0013bdd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013bd5:	83 ec 0c             	sub    esp,0xc
c0013bd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bda:	53                   	push   ebx
c0013bdb:	eb 5f                	jmp    c0013c3c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013bdd:	52                   	push   edx
c0013bde:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013be2:	50                   	push   eax
c0013be3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013be7:	50                   	push   eax
c0013be8:	53                   	push   ebx
c0013be9:	e8 58 82 ff ff       	call   c000be46 <File::stat(unsigned long long*, bool*)>
c0013bee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013bf2:	83 c4 10             	add    esp,0x10
c0013bf5:	89 c1                	mov    ecx,eax
c0013bf7:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013bfb:	74 31                	je     c0013c2e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013bfd:	83 ec 0c             	sub    esp,0xc
c0013c00:	50                   	push   eax
c0013c01:	e8 d1 3e ff ff       	call   c0007ad7 <malloc>
c0013c06:	89 c6                	mov    esi,eax
c0013c08:	58                   	pop    eax
c0013c09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013c0f:	52                   	push   edx
c0013c10:	56                   	push   esi
c0013c11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c19:	53                   	push   ebx
c0013c1a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c1d:	83 c4 20             	add    esp,0x20
c0013c20:	85 c0                	test   eax,eax
c0013c22:	75 0a                	jne    c0013c2e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c28:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013c2c:	74 18                	je     c0013c46 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013c2e:	83 ec 0c             	sub    esp,0xc
c0013c31:	53                   	push   ebx
c0013c32:	e8 6b 7f ff ff       	call   c000bba2 <File::close()>
c0013c37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c3c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c3f:	83 c4 10             	add    esp,0x10
c0013c42:	31 c0                	xor    eax,eax
c0013c44:	eb 3b                	jmp    c0013c81 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013c46:	83 ec 0c             	sub    esp,0xc
c0013c49:	53                   	push   ebx
c0013c4a:	e8 53 7f ff ff       	call   c000bba2 <File::close()>
c0013c4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c57:	83 c4 0c             	add    esp,0xc
c0013c5a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c61:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c68:	56                   	push   esi
c0013c69:	e8 3c fd ff ff       	call   c00139aa <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013c6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c71:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013c75:	e8 6d 3e ff ff       	call   c0007ae7 <free>
c0013c7a:	83 c4 10             	add    esp,0x10
c0013c7d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013c81:	81 c4 20 01 00 00    	add    esp,0x120
c0013c87:	5b                   	pop    ebx
c0013c88:	5e                   	pop    esi
c0013c89:	5f                   	pop    edi
c0013c8a:	c3                   	ret    

c0013c8b <Reg::getLine(char*, char*, char*)>:
c0013c8b:	57                   	push   edi
c0013c8c:	56                   	push   esi
c0013c8d:	53                   	push   ebx
c0013c8e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c92:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c9a:	57                   	push   edi
c0013c9b:	56                   	push   esi
c0013c9c:	53                   	push   ebx
c0013c9d:	68 28 27 02 c0       	push   0xc0022728
c0013ca2:	e8 8f fe ff ff       	call   c0013b36 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013ca7:	83 c4 10             	add    esp,0x10
c0013caa:	84 c0                	test   al,al
c0013cac:	75 10                	jne    c0013cbe <Reg::getLine(char*, char*, char*)+0x33>
c0013cae:	57                   	push   edi
c0013caf:	56                   	push   esi
c0013cb0:	53                   	push   ebx
c0013cb1:	68 4d 27 02 c0       	push   0xc002274d
c0013cb6:	e8 7b fe ff ff       	call   c0013b36 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013cbb:	83 c4 10             	add    esp,0x10
c0013cbe:	5b                   	pop    ebx
c0013cbf:	5e                   	pop    esi
c0013cc0:	5f                   	pop    edi
c0013cc1:	c3                   	ret    

c0013cc2 <Reg::readInt(char*, char*, int*)>:
c0013cc2:	55                   	push   ebp
c0013cc3:	57                   	push   edi
c0013cc4:	56                   	push   esi
c0013cc5:	53                   	push   ebx
c0013cc6:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013ccc:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013cd0:	55                   	push   ebp
c0013cd1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013cd8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013cdf:	e8 a7 ff ff ff       	call   c0013c8b <Reg::getLine(char*, char*, char*)>
c0013ce4:	83 c4 10             	add    esp,0x10
c0013ce7:	84 c0                	test   al,al
c0013ce9:	0f 84 b6 00 00 00    	je     c0013da5 <Reg::readInt(char*, char*, int*)+0xe3>
c0013cef:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013cf4:	83 fa 2b             	cmp    edx,0x2b
c0013cf7:	74 0c                	je     c0013d05 <Reg::readInt(char*, char*, int*)+0x43>
c0013cf9:	83 fa 2d             	cmp    edx,0x2d
c0013cfc:	75 0e                	jne    c0013d0c <Reg::readInt(char*, char*, int*)+0x4a>
c0013cfe:	ba 01 00 00 00       	mov    edx,0x1
c0013d03:	eb 0b                	jmp    c0013d10 <Reg::readInt(char*, char*, int*)+0x4e>
c0013d05:	ba 01 00 00 00       	mov    edx,0x1
c0013d0a:	eb 02                	jmp    c0013d0e <Reg::readInt(char*, char*, int*)+0x4c>
c0013d0c:	31 d2                	xor    edx,edx
c0013d0e:	31 c0                	xor    eax,eax
c0013d10:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013d15:	be 0a 00 00 00       	mov    esi,0xa
c0013d1a:	75 21                	jne    c0013d3d <Reg::readInt(char*, char*, int*)+0x7b>
c0013d1c:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013d21:	83 f9 78             	cmp    ecx,0x78
c0013d24:	75 0a                	jne    c0013d30 <Reg::readInt(char*, char*, int*)+0x6e>
c0013d26:	83 c2 02             	add    edx,0x2
c0013d29:	be 10 00 00 00       	mov    esi,0x10
c0013d2e:	eb 0d                	jmp    c0013d3d <Reg::readInt(char*, char*, int*)+0x7b>
c0013d30:	83 f9 62             	cmp    ecx,0x62
c0013d33:	75 08                	jne    c0013d3d <Reg::readInt(char*, char*, int*)+0x7b>
c0013d35:	83 c2 02             	add    edx,0x2
c0013d38:	be 02 00 00 00       	mov    esi,0x2
c0013d3d:	01 d5                	add    ebp,edx
c0013d3f:	31 d2                	xor    edx,edx
c0013d41:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013d45:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d49:	85 c9                	test   ecx,ecx
c0013d4b:	0f 94 c3             	sete   bl
c0013d4e:	83 f9 0d             	cmp    ecx,0xd
c0013d51:	89 df                	mov    edi,ebx
c0013d53:	0f 94 c3             	sete   bl
c0013d56:	09 df                	or     edi,ebx
c0013d58:	89 fb                	mov    ebx,edi
c0013d5a:	83 e7 01             	and    edi,0x1
c0013d5d:	75 35                	jne    c0013d94 <Reg::readInt(char*, char*, int*)+0xd2>
c0013d5f:	0f af d6             	imul   edx,esi
c0013d62:	83 fe 10             	cmp    esi,0x10
c0013d65:	75 26                	jne    c0013d8d <Reg::readInt(char*, char*, int*)+0xcb>
c0013d67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d6b:	83 ef 41             	sub    edi,0x41
c0013d6e:	89 fb                	mov    ebx,edi
c0013d70:	80 fb 05             	cmp    bl,0x5
c0013d73:	77 06                	ja     c0013d7b <Reg::readInt(char*, char*, int*)+0xb9>
c0013d75:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013d79:	eb 16                	jmp    c0013d91 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d7f:	83 eb 61             	sub    ebx,0x61
c0013d82:	80 fb 05             	cmp    bl,0x5
c0013d85:	77 06                	ja     c0013d8d <Reg::readInt(char*, char*, int*)+0xcb>
c0013d87:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013d8b:	eb 04                	jmp    c0013d91 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d8d:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013d91:	45                   	inc    ebp
c0013d92:	eb ad                	jmp    c0013d41 <Reg::readInt(char*, char*, int*)+0x7f>
c0013d94:	84 c0                	test   al,al
c0013d96:	74 02                	je     c0013d9a <Reg::readInt(char*, char*, int*)+0xd8>
c0013d98:	f7 da                	neg    edx
c0013d9a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013da1:	89 10                	mov    DWORD PTR [eax],edx
c0013da3:	88 d8                	mov    al,bl
c0013da5:	81 c4 ec 00 00 00    	add    esp,0xec
c0013dab:	5b                   	pop    ebx
c0013dac:	5e                   	pop    esi
c0013dad:	5f                   	pop    edi
c0013dae:	5d                   	pop    ebp
c0013daf:	c3                   	ret    

c0013db0 <Reg::readString(char*, char*, char*, int)>:
c0013db0:	57                   	push   edi
c0013db1:	56                   	push   esi
c0013db2:	53                   	push   ebx
c0013db3:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013db9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013dbd:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013dc4:	57                   	push   edi
c0013dc5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013dcc:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013dd3:	e8 b3 fe ff ff       	call   c0013c8b <Reg::getLine(char*, char*, char*)>
c0013dd8:	83 c4 10             	add    esp,0x10
c0013ddb:	84 c0                	test   al,al
c0013ddd:	89 c6                	mov    esi,eax
c0013ddf:	74 44                	je     c0013e25 <Reg::readString(char*, char*, char*, int)+0x75>
c0013de1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013de8:	31 c0                	xor    eax,eax
c0013dea:	4a                   	dec    edx
c0013deb:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013dee:	84 c9                	test   cl,cl
c0013df0:	74 0f                	je     c0013e01 <Reg::readString(char*, char*, char*, int)+0x51>
c0013df2:	39 c2                	cmp    edx,eax
c0013df4:	7e 0b                	jle    c0013e01 <Reg::readString(char*, char*, char*, int)+0x51>
c0013df6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013df9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013dfe:	40                   	inc    eax
c0013dff:	eb ea                	jmp    c0013deb <Reg::readString(char*, char*, char*, int)+0x3b>
c0013e01:	83 ec 0c             	sub    esp,0xc
c0013e04:	53                   	push   ebx
c0013e05:	e8 76 c7 fe ff       	call   c0000580 <strlen>
c0013e0a:	83 c4 10             	add    esp,0x10
c0013e0d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013e12:	75 11                	jne    c0013e25 <Reg::readString(char*, char*, char*, int)+0x75>
c0013e14:	83 ec 0c             	sub    esp,0xc
c0013e17:	53                   	push   ebx
c0013e18:	e8 63 c7 fe ff       	call   c0000580 <strlen>
c0013e1d:	83 c4 10             	add    esp,0x10
c0013e20:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013e25:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013e2b:	89 f0                	mov    eax,esi
c0013e2d:	5b                   	pop    ebx
c0013e2e:	5e                   	pop    esi
c0013e2f:	5f                   	pop    edi
c0013e30:	c3                   	ret    

c0013e31 <Reg::readBool(char*, char*, bool*)>:
c0013e31:	83 ec 20             	sub    esp,0x20
c0013e34:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e38:	50                   	push   eax
c0013e39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e41:	e8 7c fe ff ff       	call   c0013cc2 <Reg::readInt(char*, char*, int*)>
c0013e46:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e4a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e4f:	0f 95 02             	setne  BYTE PTR [edx]
c0013e52:	83 c4 2c             	add    esp,0x2c
c0013e55:	c3                   	ret    

c0013e56 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013e56:	53                   	push   ebx
c0013e57:	83 ec 1c             	sub    esp,0x1c
c0013e5a:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013e5e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e62:	50                   	push   eax
c0013e63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e6b:	e8 c1 ff ff ff       	call   c0013e31 <Reg::readBool(char*, char*, bool*)>
c0013e70:	83 c4 10             	add    esp,0x10
c0013e73:	84 c0                	test   al,al
c0013e75:	74 04                	je     c0013e7b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013e77:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013e7b:	83 c4 18             	add    esp,0x18
c0013e7e:	88 d8                	mov    al,bl
c0013e80:	5b                   	pop    ebx
c0013e81:	c3                   	ret    

c0013e82 <Reg::readIntWithDefault(char*, char*, int)>:
c0013e82:	53                   	push   ebx
c0013e83:	83 ec 1c             	sub    esp,0x1c
c0013e86:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e8a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e8e:	50                   	push   eax
c0013e8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e97:	e8 26 fe ff ff       	call   c0013cc2 <Reg::readInt(char*, char*, int*)>
c0013e9c:	83 c4 10             	add    esp,0x10
c0013e9f:	84 c0                	test   al,al
c0013ea1:	74 04                	je     c0013ea7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013ea3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013ea7:	83 c4 18             	add    esp,0x18
c0013eaa:	89 d8                	mov    eax,ebx
c0013eac:	5b                   	pop    ebx
c0013ead:	c3                   	ret    

c0013eae <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013eae:	57                   	push   edi
c0013eaf:	56                   	push   esi
c0013eb0:	53                   	push   ebx
c0013eb1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013eb5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013eb9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013ebd:	56                   	push   esi
c0013ebe:	57                   	push   edi
c0013ebf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ec3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ec7:	e8 e4 fe ff ff       	call   c0013db0 <Reg::readString(char*, char*, char*, int)>
c0013ecc:	83 c4 10             	add    esp,0x10
c0013ecf:	84 c0                	test   al,al
c0013ed1:	75 16                	jne    c0013ee9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013ed3:	50                   	push   eax
c0013ed4:	56                   	push   esi
c0013ed5:	6a 00                	push   0x0
c0013ed7:	57                   	push   edi
c0013ed8:	e8 13 c6 fe ff       	call   c00004f0 <memset>
c0013edd:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013ee0:	89 de                	mov    esi,ebx
c0013ee2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ee4:	83 c4 10             	add    esp,0x10
c0013ee7:	89 df                	mov    edi,ebx
c0013ee9:	5b                   	pop    ebx
c0013eea:	89 f8                	mov    eax,edi
c0013eec:	5e                   	pop    esi
c0013eed:	5f                   	pop    edi
c0013eee:	c3                   	ret    

c0013eef <SysEject(regs*)>:
c0013eef:	83 ec 0c             	sub    esp,0xc
c0013ef2:	83 ca ff             	or     edx,0xffffffff
c0013ef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013efc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013f01:	83 e9 41             	sub    ecx,0x41
c0013f04:	83 f9 19             	cmp    ecx,0x19
c0013f07:	77 18                	ja     c0013f21 <SysEject(regs*)+0x32>
c0013f09:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013f10:	85 c9                	test   ecx,ecx
c0013f12:	74 0d                	je     c0013f21 <SysEject(regs*)+0x32>
c0013f14:	83 ec 0c             	sub    esp,0xc
c0013f17:	51                   	push   ecx
c0013f18:	e8 1b 9e ff ff       	call   c000dd38 <LogicalDisk::eject()>
c0013f1d:	83 c4 10             	add    esp,0x10
c0013f20:	99                   	cdq    
c0013f21:	83 c4 0c             	add    esp,0xc
c0013f24:	c3                   	ret    

c0013f25 <SysExit(regs*)>:
c0013f25:	83 ec 18             	sub    esp,0x18
c0013f28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f2c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f2f:	e8 80 2b 00 00       	call   c0016ab4 <terminateTask(int)>
c0013f34:	83 c8 ff             	or     eax,0xffffffff
c0013f37:	83 c4 1c             	add    esp,0x1c
c0013f3a:	89 c2                	mov    edx,eax
c0013f3c:	c3                   	ret    

c0013f3d <SysGetCwd(regs*)>:
c0013f3d:	83 ec 10             	sub    esp,0x10
c0013f40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f44:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013f47:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f4f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f52:	e8 6f 78 ff ff       	call   c000b7c6 <Fs::getcwd(Process*, char*, int)>
c0013f57:	83 c4 1c             	add    esp,0x1c
c0013f5a:	99                   	cdq    
c0013f5b:	c3                   	ret    

c0013f5c <SysGetPID(regs*)>:
c0013f5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f61:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f64:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f66:	99                   	cdq    
c0013f67:	c3                   	ret    

c0013f68 <SysGetRAMData(regs*)>:
c0013f68:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013f72:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013f78:	99                   	cdq    
c0013f79:	f7 f9                	idiv   ecx
c0013f7b:	c1 e0 18             	shl    eax,0x18
c0013f7e:	09 c8                	or     eax,ecx
c0013f80:	99                   	cdq    
c0013f81:	c3                   	ret    

c0013f82 <SysGetVGAPtr(regs*)>:
c0013f82:	55                   	push   ebp
c0013f83:	57                   	push   edi
c0013f84:	56                   	push   esi
c0013f85:	53                   	push   ebx
c0013f86:	83 ec 18             	sub    esp,0x18
c0013f89:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f8d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f90:	e8 eb 25 00 00       	call   c0016580 <Thr::processFromPID(int)>
c0013f95:	83 c4 10             	add    esp,0x10
c0013f98:	89 c1                	mov    ecx,eax
c0013f9a:	b8 01 00 00 00       	mov    eax,0x1
c0013f9f:	85 c9                	test   ecx,ecx
c0013fa1:	74 57                	je     c0013ffa <SysGetVGAPtr(regs*)+0x78>
c0013fa3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013fa7:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013fad:	74 0c                	je     c0013fbb <SysGetVGAPtr(regs*)+0x39>
c0013faf:	83 ec 0c             	sub    esp,0xc
c0013fb2:	55                   	push   ebp
c0013fb3:	e8 bb 47 ff ff       	call   c0008773 <setActiveTerminal(VgaText*)>
c0013fb8:	83 c4 10             	add    esp,0x10
c0013fbb:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013fbe:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013fc3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013fc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fc8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013fcb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fce:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013fd4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fd7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013fda:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013fe0:	50                   	push   eax
c0013fe1:	50                   	push   eax
c0013fe2:	68 68 27 02 c0       	push   0xc0022768
c0013fe7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fea:	05 a8 0f 00 00       	add    eax,0xfa8
c0013fef:	50                   	push   eax
c0013ff0:	e8 5b c6 fe ff       	call   c0000650 <strcpy>
c0013ff5:	83 c4 10             	add    esp,0x10
c0013ff8:	31 c0                	xor    eax,eax
c0013ffa:	83 c4 0c             	add    esp,0xc
c0013ffd:	31 d2                	xor    edx,edx
c0013fff:	5b                   	pop    ebx
c0014000:	5e                   	pop    esi
c0014001:	5f                   	pop    edi
c0014002:	5d                   	pop    ebp
c0014003:	c3                   	ret    

c0014004 <SysKill(regs*)>:
c0014004:	53                   	push   ebx
c0014005:	83 ec 08             	sub    esp,0x8
c0014008:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001400c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014010:	75 16                	jne    c0014028 <SysKill(regs*)+0x24>
c0014012:	83 ec 0c             	sub    esp,0xc
c0014015:	68 72 27 02 c0       	push   0xc0022772
c001401a:	e8 e8 d5 ff ff       	call   c0011607 <KePanic(char const*)>
c001401f:	83 c4 10             	add    esp,0x10
c0014022:	e9 89 00 00 00       	jmp    c00140b0 <SysKill(regs*)+0xac>
c0014027:	90                   	nop
c0014028:	83 ec 0c             	sub    esp,0xc
c001402b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014030:	e8 a7 bd 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014035:	8d 76 00             	lea    esi,[esi+0x0]
c0014038:	83 c4 10             	add    esp,0x10
c001403b:	85 c0                	test   eax,eax
c001403d:	74 19                	je     c0014058 <SysKill(regs*)+0x54>
c001403f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014042:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014045:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014047:	74 33                	je     c001407c <SysKill(regs*)+0x78>
c0014049:	52                   	push   edx
c001404a:	52                   	push   edx
c001404b:	50                   	push   eax
c001404c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014051:	e8 a6 c0 00 00       	call   c00200fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014056:	eb e0                	jmp    c0014038 <SysKill(regs*)+0x34>
c0014058:	83 ec 0c             	sub    esp,0xc
c001405b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014060:	e8 77 bd 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014065:	8d 76 00             	lea    esi,[esi+0x0]
c0014068:	83 c4 10             	add    esp,0x10
c001406b:	85 c0                	test   eax,eax
c001406d:	74 41                	je     c00140b0 <SysKill(regs*)+0xac>
c001406f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014072:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014075:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014077:	75 27                	jne    c00140a0 <SysKill(regs*)+0x9c>
c0014079:	8d 76 00             	lea    esi,[esi+0x0]
c001407c:	51                   	push   ecx
c001407d:	51                   	push   ecx
c001407e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014081:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014086:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014089:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001408f:	e8 0f da ff ff       	call   c0011aa3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014094:	83 c4 10             	add    esp,0x10
c0014097:	31 c0                	xor    eax,eax
c0014099:	31 d2                	xor    edx,edx
c001409b:	eb 1b                	jmp    c00140b8 <SysKill(regs*)+0xb4>
c001409d:	8d 76 00             	lea    esi,[esi+0x0]
c00140a0:	52                   	push   edx
c00140a1:	52                   	push   edx
c00140a2:	50                   	push   eax
c00140a3:	68 d8 c6 02 c0       	push   0xc002c6d8
c00140a8:	e8 4f c0 00 00       	call   c00200fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140ad:	eb b9                	jmp    c0014068 <SysKill(regs*)+0x64>
c00140af:	90                   	nop
c00140b0:	83 c8 ff             	or     eax,0xffffffff
c00140b3:	89 c2                	mov    edx,eax
c00140b5:	8d 76 00             	lea    esi,[esi+0x0]
c00140b8:	83 c4 08             	add    esp,0x8
c00140bb:	5b                   	pop    ebx
c00140bc:	c3                   	ret    

c00140bd <SysLoadDLL(regs*)>:
c00140bd:	56                   	push   esi
c00140be:	31 d2                	xor    edx,edx
c00140c0:	53                   	push   ebx
c00140c1:	b8 01 00 00 00       	mov    eax,0x1
c00140c6:	51                   	push   ecx
c00140c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140cb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00140cf:	0f 84 8c 00 00 00    	je     c0014161 <SysLoadDLL(regs*)+0xa4>
c00140d5:	83 ec 0c             	sub    esp,0xc
c00140d8:	68 14 01 00 00       	push   0x114
c00140dd:	e8 f5 39 ff ff       	call   c0007ad7 <malloc>
c00140e2:	83 c4 0c             	add    esp,0xc
c00140e5:	89 c3                	mov    ebx,eax
c00140e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140ec:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140ef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140f2:	53                   	push   ebx
c00140f3:	e8 2e 7a ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c00140f8:	83 c4 10             	add    esp,0x10
c00140fb:	31 d2                	xor    edx,edx
c00140fd:	85 db                	test   ebx,ebx
c00140ff:	b8 02 00 00 00       	mov    eax,0x2
c0014104:	74 5b                	je     c0014161 <SysLoadDLL(regs*)+0xa4>
c0014106:	83 ec 0c             	sub    esp,0xc
c0014109:	53                   	push   ebx
c001410a:	e8 f9 7c ff ff       	call   c000be08 <File::exists()>
c001410f:	83 c4 10             	add    esp,0x10
c0014112:	84 c0                	test   al,al
c0014114:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014116:	75 11                	jne    c0014129 <SysLoadDLL(regs*)+0x6c>
c0014118:	83 ec 0c             	sub    esp,0xc
c001411b:	53                   	push   ebx
c001411c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001411f:	83 c4 10             	add    esp,0x10
c0014122:	b8 03 00 00 00       	mov    eax,0x3
c0014127:	eb 36                	jmp    c001415f <SysLoadDLL(regs*)+0xa2>
c0014129:	83 ec 0c             	sub    esp,0xc
c001412c:	53                   	push   ebx
c001412d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014130:	58                   	pop    eax
c0014131:	5a                   	pop    edx
c0014132:	6a 00                	push   0x0
c0014134:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014137:	e8 8f 15 00 00       	call   c00156cb <Thr::loadDLL(char const*, bool)>
c001413c:	83 c4 10             	add    esp,0x10
c001413f:	31 d2                	xor    edx,edx
c0014141:	89 c1                	mov    ecx,eax
c0014143:	b8 04 00 00 00       	mov    eax,0x4
c0014148:	85 c9                	test   ecx,ecx
c001414a:	74 15                	je     c0014161 <SysLoadDLL(regs*)+0xa4>
c001414c:	53                   	push   ebx
c001414d:	53                   	push   ebx
c001414e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014154:	51                   	push   ecx
c0014155:	e8 b1 17 00 00       	call   c001590b <Thr::executeDLL(unsigned long, void*)>
c001415a:	83 c4 10             	add    esp,0x10
c001415d:	31 c0                	xor    eax,eax
c001415f:	31 d2                	xor    edx,edx
c0014161:	59                   	pop    ecx
c0014162:	5b                   	pop    ebx
c0014163:	5e                   	pop    esi
c0014164:	c3                   	ret    

c0014165 <SysRead(regs*)>:
c0014165:	57                   	push   edi
c0014166:	56                   	push   esi
c0014167:	53                   	push   ebx
c0014168:	83 ec 10             	sub    esp,0x10
c001416b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001416f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014172:	83 f8 02             	cmp    eax,0x2
c0014175:	77 10                	ja     c0014187 <SysRead(regs*)+0x22>
c0014177:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001417c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001417f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014185:	eb 0e                	jmp    c0014195 <SysRead(regs*)+0x30>
c0014187:	83 ec 0c             	sub    esp,0xc
c001418a:	50                   	push   eax
c001418b:	e8 0f 53 ff ff       	call   c000949f <KeGetFileFromDescriptor(int)>
c0014190:	83 c4 10             	add    esp,0x10
c0014193:	89 c1                	mov    ecx,eax
c0014195:	83 c8 ff             	or     eax,0xffffffff
c0014198:	85 c9                	test   ecx,ecx
c001419a:	89 c2                	mov    edx,eax
c001419c:	74 28                	je     c00141c6 <SysRead(regs*)+0x61>
c001419e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141a6:	83 ec 0c             	sub    esp,0xc
c00141a9:	31 ff                	xor    edi,edi
c00141ab:	8d 54 24 18          	lea    edx,[esp+0x18]
c00141af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00141b1:	52                   	push   edx
c00141b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141b5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00141b8:	57                   	push   edi
c00141b9:	56                   	push   esi
c00141ba:	51                   	push   ecx
c00141bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00141c2:	83 c4 20             	add    esp,0x20
c00141c5:	99                   	cdq    
c00141c6:	83 c4 10             	add    esp,0x10
c00141c9:	5b                   	pop    ebx
c00141ca:	5e                   	pop    esi
c00141cb:	5f                   	pop    edi
c00141cc:	c3                   	ret    

c00141cd <SysRegisterSignal(regs*)>:
c00141cd:	83 ec 18             	sub    esp,0x18
c00141d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141d4:	6a 00                	push   0x0
c00141d6:	6a 00                	push   0x0
c00141d8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00141db:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00141de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141e6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00141ec:	e8 7c d8 ff ff       	call   c0011a6d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00141f1:	83 c4 2c             	add    esp,0x2c
c00141f4:	99                   	cdq    
c00141f5:	c3                   	ret    

c00141f6 <SysRegistryGetTypeFromPath(regs*)>:
c00141f6:	57                   	push   edi
c00141f7:	56                   	push   esi
c00141f8:	53                   	push   ebx
c00141f9:	81 ec 38 01 00 00    	sub    esp,0x138
c00141ff:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014206:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014209:	68 93 27 02 c0       	push   0xc0022793
c001420e:	e8 fb 66 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0014213:	5a                   	pop    edx
c0014214:	59                   	pop    ecx
c0014215:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014218:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001421b:	e8 34 f6 ff ff       	call   c0013854 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014220:	5f                   	pop    edi
c0014221:	5a                   	pop    edx
c0014222:	89 c6                	mov    esi,eax
c0014224:	50                   	push   eax
c0014225:	68 b3 27 02 c0       	push   0xc00227b3
c001422a:	e8 df 66 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001422f:	83 c4 10             	add    esp,0x10
c0014232:	85 f6                	test   esi,esi
c0014234:	74 28                	je     c001425e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0014236:	50                   	push   eax
c0014237:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001423b:	57                   	push   edi
c001423c:	56                   	push   esi
c001423d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014240:	e8 f4 f1 ff ff       	call   c0013439 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014245:	83 c4 0c             	add    esp,0xc
c0014248:	57                   	push   edi
c0014249:	50                   	push   eax
c001424a:	89 c3                	mov    ebx,eax
c001424c:	68 bb 27 02 c0       	push   0xc00227bb
c0014251:	e8 b8 66 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0014256:	89 d8                	mov    eax,ebx
c0014258:	83 c4 10             	add    esp,0x10
c001425b:	99                   	cdq    
c001425c:	eb 05                	jmp    c0014263 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001425e:	83 c8 ff             	or     eax,0xffffffff
c0014261:	89 c2                	mov    edx,eax
c0014263:	81 c4 30 01 00 00    	add    esp,0x130
c0014269:	5b                   	pop    ebx
c001426a:	5e                   	pop    esi
c001426b:	5f                   	pop    edi
c001426c:	c3                   	ret    

c001426d <SysRegistryReadExtent(regs*)>:
c001426d:	83 ec 1c             	sub    esp,0x1c
c0014270:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014274:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014277:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001427a:	85 c0                	test   eax,eax
c001427c:	79 1f                	jns    c001429d <SysRegistryReadExtent(regs*)+0x30>
c001427e:	52                   	push   edx
c001427f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014284:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014288:	52                   	push   edx
c0014289:	50                   	push   eax
c001428a:	51                   	push   ecx
c001428b:	e8 9b f0 ff ff       	call   c001332b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014290:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014294:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014298:	83 c4 10             	add    esp,0x10
c001429b:	eb 14                	jmp    c00142b1 <SysRegistryReadExtent(regs*)+0x44>
c001429d:	83 ec 04             	sub    esp,0x4
c00142a0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00142a3:	50                   	push   eax
c00142a4:	51                   	push   ecx
c00142a5:	e8 1f eb ff ff       	call   c0012dc9 <CmGetString(Reghive_Tag*, int, char*)>
c00142aa:	83 c4 10             	add    esp,0x10
c00142ad:	31 c0                	xor    eax,eax
c00142af:	31 d2                	xor    edx,edx
c00142b1:	83 c4 1c             	add    esp,0x1c
c00142b4:	c3                   	ret    

c00142b5 <SysRegistryPathToExtentLookup(regs*)>:
c00142b5:	53                   	push   ebx
c00142b6:	83 ec 10             	sub    esp,0x10
c00142b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142c0:	68 d1 27 02 c0       	push   0xc00227d1
c00142c5:	e8 44 66 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00142ca:	58                   	pop    eax
c00142cb:	5a                   	pop    edx
c00142cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142cf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142d2:	e8 7d f5 ff ff       	call   c0013854 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142d7:	83 c4 18             	add    esp,0x18
c00142da:	5b                   	pop    ebx
c00142db:	99                   	cdq    
c00142dc:	c3                   	ret    

c00142dd <SysRegistryEnterDirectory(regs*)>:
c00142dd:	53                   	push   ebx
c00142de:	83 ec 10             	sub    esp,0x10
c00142e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142e5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142e8:	68 f4 27 02 c0       	push   0xc00227f4
c00142ed:	e8 1c 66 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00142f2:	58                   	pop    eax
c00142f3:	5a                   	pop    edx
c00142f4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142f7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142fa:	e8 41 eb ff ff       	call   c0012e40 <CmEnterDirectory(Reghive_Tag*, int)>
c00142ff:	83 c4 18             	add    esp,0x18
c0014302:	5b                   	pop    ebx
c0014303:	99                   	cdq    
c0014304:	c3                   	ret    

c0014305 <SysRegistryGetNext(regs*)>:
c0014305:	53                   	push   ebx
c0014306:	83 ec 10             	sub    esp,0x10
c0014309:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001430d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014310:	68 12 28 02 c0       	push   0xc0022812
c0014315:	e8 f4 65 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001431a:	58                   	pop    eax
c001431b:	5a                   	pop    edx
c001431c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001431f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014322:	e8 58 eb ff ff       	call   c0012e7f <CmGetNext(Reghive_Tag*, int)>
c0014327:	83 c4 18             	add    esp,0x18
c001432a:	5b                   	pop    ebx
c001432b:	99                   	cdq    
c001432c:	c3                   	ret    

c001432d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001432d:	57                   	push   edi
c001432e:	56                   	push   esi
c001432f:	53                   	push   ebx
c0014330:	81 ec 34 01 00 00    	sub    esp,0x134
c0014336:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001433d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014341:	57                   	push   edi
c0014342:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014345:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014348:	e8 ec f0 ff ff       	call   c0013439 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001434d:	89 c3                	mov    ebx,eax
c001434f:	58                   	pop    eax
c0014350:	5a                   	pop    edx
c0014351:	57                   	push   edi
c0014352:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014355:	e8 f6 c2 fe ff       	call   c0000650 <strcpy>
c001435a:	81 c4 40 01 00 00    	add    esp,0x140
c0014360:	89 d8                	mov    eax,ebx
c0014362:	5b                   	pop    ebx
c0014363:	99                   	cdq    
c0014364:	5e                   	pop    esi
c0014365:	5f                   	pop    edi
c0014366:	c3                   	ret    

c0014367 <SysRegistryOpen(regs*)>:
c0014367:	83 ec 18             	sub    esp,0x18
c001436a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001436e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014371:	e8 e3 e8 ff ff       	call   c0012c59 <CmOpen(char const*)>
c0014376:	83 c4 1c             	add    esp,0x1c
c0014379:	99                   	cdq    
c001437a:	c3                   	ret    

c001437b <SysRegistryClose(regs*)>:
c001437b:	83 ec 18             	sub    esp,0x18
c001437e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014382:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014385:	e8 ed e9 ff ff       	call   c0012d77 <CmClose(Reghive_Tag*)>
c001438a:	31 c0                	xor    eax,eax
c001438c:	31 d2                	xor    edx,edx
c001438e:	83 c4 1c             	add    esp,0x1c
c0014391:	c3                   	ret    

c0014392 <SysSbrk(regs*)>:
c0014392:	56                   	push   esi
c0014393:	53                   	push   ebx
c0014394:	50                   	push   eax
c0014395:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001439a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001439e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143a1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00143a4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00143aa:	85 db                	test   ebx,ebx
c00143ac:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00143af:	74 02                	je     c00143b3 <SysSbrk(regs*)+0x21>
c00143b1:	79 06                	jns    c00143b9 <SysSbrk(regs*)+0x27>
c00143b3:	89 f0                	mov    eax,esi
c00143b5:	31 d2                	xor    edx,edx
c00143b7:	eb 2a                	jmp    c00143e3 <SysSbrk(regs*)+0x51>
c00143b9:	83 c8 ff             	or     eax,0xffffffff
c00143bc:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00143c2:	89 c2                	mov    edx,eax
c00143c4:	77 1d                	ja     c00143e3 <SysSbrk(regs*)+0x51>
c00143c6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00143cc:	50                   	push   eax
c00143cd:	68 07 0c 00 00       	push   0xc07
c00143d2:	c1 ea 0c             	shr    edx,0xc
c00143d5:	52                   	push   edx
c00143d6:	51                   	push   ecx
c00143d7:	e8 2e 5a ff ff       	call   c0009e0a <VAS::allocatePages(int, int)>
c00143dc:	89 f0                	mov    eax,esi
c00143de:	31 d2                	xor    edx,edx
c00143e0:	83 c4 10             	add    esp,0x10
c00143e3:	59                   	pop    ecx
c00143e4:	5b                   	pop    ebx
c00143e5:	5e                   	pop    esi
c00143e6:	c3                   	ret    

c00143e7 <SysSetCwd(regs*)>:
c00143e7:	83 ec 14             	sub    esp,0x14
c00143ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143ee:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143f6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00143f9:	e8 a9 7a ff ff       	call   c000bea7 <Fs::setcwd(Process*, char*)>
c00143fe:	83 c4 1c             	add    esp,0x1c
c0014401:	99                   	cdq    
c0014402:	c3                   	ret    

c0014403 <SysSetTime(regs*)>:
c0014403:	55                   	push   ebp
c0014404:	31 c9                	xor    ecx,ecx
c0014406:	57                   	push   edi
c0014407:	bd 0c 00 00 00       	mov    ebp,0xc
c001440c:	56                   	push   esi
c001440d:	53                   	push   ebx
c001440e:	31 db                	xor    ebx,ebx
c0014410:	83 ec 10             	sub    esp,0x10
c0014413:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014417:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001441a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001441d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014420:	89 c2                	mov    edx,eax
c0014422:	c1 e8 05             	shr    eax,0x5
c0014425:	83 e2 1f             	and    edx,0x1f
c0014428:	42                   	inc    edx
c0014429:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001442f:	c1 e7 10             	shl    edi,0x10
c0014432:	88 d1                	mov    cl,dl
c0014434:	31 d2                	xor    edx,edx
c0014436:	f7 f5                	div    ebp
c0014438:	89 dd                	mov    ebp,ebx
c001443a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014440:	88 d5                	mov    ch,dl
c0014442:	31 d2                	xor    edx,edx
c0014444:	0f b7 c1             	movzx  eax,cx
c0014447:	09 f8                	or     eax,edi
c0014449:	bf 3c 00 00 00       	mov    edi,0x3c
c001444e:	89 c1                	mov    ecx,eax
c0014450:	89 f0                	mov    eax,esi
c0014452:	f7 f7                	div    edi
c0014454:	c1 e2 10             	shl    edx,0x10
c0014457:	09 d5                	or     ebp,edx
c0014459:	31 d2                	xor    edx,edx
c001445b:	f7 f7                	div    edi
c001445d:	89 eb                	mov    ebx,ebp
c001445f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014464:	89 f0                	mov    eax,esi
c0014466:	88 d7                	mov    bh,dl
c0014468:	31 d2                	xor    edx,edx
c001446a:	f7 f7                	div    edi
c001446c:	bf 18 00 00 00       	mov    edi,0x18
c0014471:	31 d2                	xor    edx,edx
c0014473:	f7 f7                	div    edi
c0014475:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001447a:	88 d3                	mov    bl,dl
c001447c:	53                   	push   ebx
c001447d:	51                   	push   ecx
c001447e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014484:	e8 2f 82 ff ff       	call   c000c6b8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014489:	83 c4 1c             	add    esp,0x1c
c001448c:	31 d2                	xor    edx,edx
c001448e:	5b                   	pop    ebx
c001448f:	5e                   	pop    esi
c0014490:	83 f0 01             	xor    eax,0x1
c0014493:	5f                   	pop    edi
c0014494:	0f b6 c0             	movzx  eax,al
c0014497:	5d                   	pop    ebp
c0014498:	c3                   	ret    

c0014499 <SysSymlink(regs*)>:
c0014499:	56                   	push   esi
c001449a:	83 c8 ff             	or     eax,0xffffffff
c001449d:	53                   	push   ebx
c001449e:	89 c2                	mov    edx,eax
c00144a0:	81 ec 34 02 00 00    	sub    esp,0x234
c00144a6:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00144ad:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00144b1:	74 50                	je     c0014503 <SysSymlink(regs*)+0x6a>
c00144b3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00144b6:	85 c9                	test   ecx,ecx
c00144b8:	74 49                	je     c0014503 <SysSymlink(regs*)+0x6a>
c00144ba:	6a 01                	push   0x1
c00144bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144c4:	05 0c 01 00 00       	add    eax,0x10c
c00144c9:	50                   	push   eax
c00144ca:	51                   	push   ecx
c00144cb:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00144cf:	56                   	push   esi
c00144d0:	e8 45 73 ff ff       	call   c000b81a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00144d5:	6a 01                	push   0x1
c00144d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144df:	05 0c 01 00 00       	add    eax,0x10c
c00144e4:	50                   	push   eax
c00144e5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00144e8:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00144ef:	53                   	push   ebx
c00144f0:	e8 25 73 ff ff       	call   c000b81a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00144f5:	83 c4 18             	add    esp,0x18
c00144f8:	56                   	push   esi
c00144f9:	53                   	push   ebx
c00144fa:	e8 2a 6f ff ff       	call   c000b429 <KeCreateSymlink(char const*, char const*)>
c00144ff:	83 c4 10             	add    esp,0x10
c0014502:	99                   	cdq    
c0014503:	81 c4 34 02 00 00    	add    esp,0x234
c0014509:	5b                   	pop    ebx
c001450a:	5e                   	pop    esi
c001450b:	c3                   	ret    

c001450c <SysTimezone(regs*)>:
c001450c:	53                   	push   ebx
c001450d:	83 ec 08             	sub    esp,0x8
c0014510:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014514:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014518:	75 17                	jne    c0014531 <SysTimezone(regs*)+0x25>
c001451a:	83 ec 0c             	sub    esp,0xc
c001451d:	68 29 28 02 c0       	push   0xc0022829
c0014522:	e8 e7 63 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0014527:	83 c8 ff             	or     eax,0xffffffff
c001452a:	83 c4 10             	add    esp,0x10
c001452d:	89 c2                	mov    edx,eax
c001452f:	eb 20                	jmp    c0014551 <SysTimezone(regs*)+0x45>
c0014531:	83 ec 0c             	sub    esp,0xc
c0014534:	68 3e 28 02 c0       	push   0xc002283e
c0014539:	e8 d0 63 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001453e:	58                   	pop    eax
c001453f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014542:	e8 d5 7e ff ff       	call   c000c41c <User::loadClockSettings(int)>
c0014547:	83 c4 10             	add    esp,0x10
c001454a:	b8 01 00 00 00       	mov    eax,0x1
c001454f:	31 d2                	xor    edx,edx
c0014551:	83 c4 08             	add    esp,0x8
c0014554:	5b                   	pop    ebx
c0014555:	c3                   	ret    

c0014556 <SysTruncate(regs*)>:
c0014556:	55                   	push   ebp
c0014557:	57                   	push   edi
c0014558:	31 ff                	xor    edi,edi
c001455a:	56                   	push   esi
c001455b:	53                   	push   ebx
c001455c:	83 ec 0c             	sub    esp,0xc
c001455f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014563:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014566:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001456a:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001456d:	89 ce                	mov    esi,ecx
c001456f:	0f 84 9a 00 00 00    	je     c001460f <SysTruncate(regs*)+0xb9>
c0014575:	83 ec 0c             	sub    esp,0xc
c0014578:	68 14 01 00 00       	push   0x114
c001457d:	e8 55 35 ff ff       	call   c0007ad7 <malloc>
c0014582:	83 c4 0c             	add    esp,0xc
c0014585:	89 c3                	mov    ebx,eax
c0014587:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001458c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001458f:	55                   	push   ebp
c0014590:	53                   	push   ebx
c0014591:	e8 90 75 ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c0014596:	83 c4 10             	add    esp,0x10
c0014599:	31 d2                	xor    edx,edx
c001459b:	85 db                	test   ebx,ebx
c001459d:	b8 03 00 00 00       	mov    eax,0x3
c00145a2:	0f 84 a2 00 00 00    	je     c001464a <SysTruncate(regs*)+0xf4>
c00145a8:	51                   	push   ecx
c00145a9:	51                   	push   ecx
c00145aa:	6a 02                	push   0x2
c00145ac:	53                   	push   ebx
c00145ad:	e8 92 75 ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c00145b2:	83 c4 10             	add    esp,0x10
c00145b5:	85 c0                	test   eax,eax
c00145b7:	74 13                	je     c00145cc <SysTruncate(regs*)+0x76>
c00145b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145bb:	83 ec 0c             	sub    esp,0xc
c00145be:	53                   	push   ebx
c00145bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145c2:	83 c4 10             	add    esp,0x10
c00145c5:	b8 04 00 00 00       	mov    eax,0x4
c00145ca:	eb 7c                	jmp    c0014648 <SysTruncate(regs*)+0xf2>
c00145cc:	52                   	push   edx
c00145cd:	57                   	push   edi
c00145ce:	56                   	push   esi
c00145cf:	53                   	push   ebx
c00145d0:	e8 83 76 ff ff       	call   c000bc58 <File::truncate(unsigned long long)>
c00145d5:	83 c4 10             	add    esp,0x10
c00145d8:	85 c0                	test   eax,eax
c00145da:	74 1b                	je     c00145f7 <SysTruncate(regs*)+0xa1>
c00145dc:	83 ec 0c             	sub    esp,0xc
c00145df:	53                   	push   ebx
c00145e0:	e8 bd 75 ff ff       	call   c000bba2 <File::close()>
c00145e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145ed:	83 c4 10             	add    esp,0x10
c00145f0:	b8 05 00 00 00       	mov    eax,0x5
c00145f5:	eb 51                	jmp    c0014648 <SysTruncate(regs*)+0xf2>
c00145f7:	83 ec 0c             	sub    esp,0xc
c00145fa:	53                   	push   ebx
c00145fb:	e8 a2 75 ff ff       	call   c000bba2 <File::close()>
c0014600:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014602:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014605:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014608:	83 c4 10             	add    esp,0x10
c001460b:	31 c0                	xor    eax,eax
c001460d:	eb 39                	jmp    c0014648 <SysTruncate(regs*)+0xf2>
c001460f:	31 d2                	xor    edx,edx
c0014611:	83 fd 02             	cmp    ebp,0x2
c0014614:	b8 01 00 00 00       	mov    eax,0x1
c0014619:	7e 2f                	jle    c001464a <SysTruncate(regs*)+0xf4>
c001461b:	83 ec 0c             	sub    esp,0xc
c001461e:	51                   	push   ecx
c001461f:	e8 7b 4e ff ff       	call   c000949f <KeGetFileFromDescriptor(int)>
c0014624:	83 c4 10             	add    esp,0x10
c0014627:	31 d2                	xor    edx,edx
c0014629:	89 c1                	mov    ecx,eax
c001462b:	b8 02 00 00 00       	mov    eax,0x2
c0014630:	85 c9                	test   ecx,ecx
c0014632:	74 16                	je     c001464a <SysTruncate(regs*)+0xf4>
c0014634:	50                   	push   eax
c0014635:	57                   	push   edi
c0014636:	56                   	push   esi
c0014637:	51                   	push   ecx
c0014638:	e8 1b 76 ff ff       	call   c000bc58 <File::truncate(unsigned long long)>
c001463d:	83 c4 10             	add    esp,0x10
c0014640:	85 c0                	test   eax,eax
c0014642:	0f 95 c0             	setne  al
c0014645:	0f b6 c0             	movzx  eax,al
c0014648:	31 d2                	xor    edx,edx
c001464a:	83 c4 0c             	add    esp,0xc
c001464d:	5b                   	pop    ebx
c001464e:	5e                   	pop    esi
c001464f:	5f                   	pop    edi
c0014650:	5d                   	pop    ebp
c0014651:	c3                   	ret    

c0014652 <SysWrite(regs*)>:
c0014652:	57                   	push   edi
c0014653:	56                   	push   esi
c0014654:	53                   	push   ebx
c0014655:	83 ec 10             	sub    esp,0x10
c0014658:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001465c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001465f:	83 f8 02             	cmp    eax,0x2
c0014662:	77 10                	ja     c0014674 <SysWrite(regs*)+0x22>
c0014664:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014669:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001466c:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014672:	eb 0e                	jmp    c0014682 <SysWrite(regs*)+0x30>
c0014674:	83 ec 0c             	sub    esp,0xc
c0014677:	50                   	push   eax
c0014678:	e8 22 4e ff ff       	call   c000949f <KeGetFileFromDescriptor(int)>
c001467d:	83 c4 10             	add    esp,0x10
c0014680:	89 c1                	mov    ecx,eax
c0014682:	83 c8 ff             	or     eax,0xffffffff
c0014685:	85 c9                	test   ecx,ecx
c0014687:	89 c2                	mov    edx,eax
c0014689:	74 28                	je     c00146b3 <SysWrite(regs*)+0x61>
c001468b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014693:	83 ec 0c             	sub    esp,0xc
c0014696:	31 ff                	xor    edi,edi
c0014698:	8d 54 24 18          	lea    edx,[esp+0x18]
c001469c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001469e:	52                   	push   edx
c001469f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00146a2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00146a5:	57                   	push   edi
c00146a6:	56                   	push   esi
c00146a7:	51                   	push   ecx
c00146a8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00146ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00146af:	83 c4 20             	add    esp,0x20
c00146b2:	99                   	cdq    
c00146b3:	83 c4 10             	add    esp,0x10
c00146b6:	5b                   	pop    ebx
c00146b7:	5e                   	pop    esi
c00146b8:	5f                   	pop    edi
c00146b9:	c3                   	ret    

c00146ba <SysWsbe(regs*)>:
c00146ba:	57                   	push   edi
c00146bb:	b9 0b 00 00 00       	mov    ecx,0xb
c00146c0:	56                   	push   esi
c00146c1:	be 7d 28 02 c0       	mov    esi,0xc002287d
c00146c6:	53                   	push   ebx
c00146c7:	83 ec 30             	sub    esp,0x30
c00146ca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00146ce:	fc                   	cld    
c00146cf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00146d1:	83 ec 0c             	sub    esp,0xc
c00146d4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00146d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146e0:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00146e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00146e8:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00146eb:	57                   	push   edi
c00146ec:	e8 8f be fe ff       	call   c0000580 <strlen>
c00146f1:	5a                   	pop    edx
c00146f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00146f6:	52                   	push   edx
c00146f7:	31 d2                	xor    edx,edx
c00146f9:	57                   	push   edi
c00146fa:	52                   	push   edx
c00146fb:	50                   	push   eax
c00146fc:	56                   	push   esi
c00146fd:	ff d3                	call   ebx
c00146ff:	83 c4 14             	add    esp,0x14
c0014702:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014706:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014709:	e8 a6 23 00 00       	call   c0016ab4 <terminateTask(int)>
c001470e:	83 c4 40             	add    esp,0x40
c0014711:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014716:	5b                   	pop    ebx
c0014717:	31 d2                	xor    edx,edx
c0014719:	5e                   	pop    esi
c001471a:	5f                   	pop    edi
c001471b:	c3                   	ret    

c001471c <SysYield(regs*)>:
c001471c:	83 ec 0c             	sub    esp,0xc
c001471f:	fa                   	cli    
c0014720:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014726:	e8 09 1a 00 00       	call   c0016134 <schedule()>
c001472b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014730:	48                   	dec    eax
c0014731:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014736:	75 01                	jne    c0014739 <SysYield(regs*)+0x1d>
c0014738:	fb                   	sti    
c0014739:	31 c0                	xor    eax,eax
c001473b:	31 d2                	xor    edx,edx
c001473d:	83 c4 0c             	add    esp,0xc
c0014740:	c3                   	ret    

c0014741 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014741:	55                   	push   ebp
c0014742:	57                   	push   edi
c0014743:	56                   	push   esi
c0014744:	53                   	push   ebx
c0014745:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001474b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014756:	74 3b                	je     c0014793 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014758:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014760:	74 31                	je     c0014793 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014762:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001476a:	75 27                	jne    c0014793 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001476c:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014773:	05 00 10 00 00       	add    eax,0x1000
c0014778:	89 c2                	mov    edx,eax
c001477a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001477f:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014786:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001478c:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014793:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001479a:	83 ec 0c             	sub    esp,0xc
c001479d:	6a 01                	push   0x1
c001479f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00147a5:	e8 4f 4e ff ff       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c00147aa:	83 c4 10             	add    esp,0x10
c00147ad:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00147b3:	89 c3                	mov    ebx,eax
c00147b5:	0f 86 26 01 00 00    	jbe    c00148e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00147bb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147c3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00147ca:	c1 ee 0c             	shr    esi,0xc
c00147cd:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00147d1:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00147d8:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00147df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147e3:	29 ef                	sub    edi,ebp
c00147e5:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00147e9:	0f 83 f9 00 00 00    	jae    c00148e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00147ef:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00147f5:	b8 00 10 00 00       	mov    eax,0x1000
c00147fa:	0f 47 f8             	cmova  edi,eax
c00147fd:	83 ec 0c             	sub    esp,0xc
c0014800:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014807:	31 d2                	xor    edx,edx
c0014809:	8b 08                	mov    ecx,DWORD PTR [eax]
c001480b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001480f:	50                   	push   eax
c0014810:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014814:	56                   	push   esi
c0014815:	52                   	push   edx
c0014816:	57                   	push   edi
c0014817:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001481e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014821:	83 c4 20             	add    esp,0x20
c0014824:	85 c0                	test   eax,eax
c0014826:	75 06                	jne    c001482e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014828:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001482c:	74 13                	je     c0014841 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001482e:	83 ec 0c             	sub    esp,0xc
c0014831:	53                   	push   ebx
c0014832:	e8 d6 50 ff ff       	call   c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c0014837:	83 c4 10             	add    esp,0x10
c001483a:	31 c0                	xor    eax,eax
c001483c:	e9 7c 01 00 00       	jmp    c00149bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0014841:	fa                   	cli    
c0014842:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014848:	e8 99 35 ff ff       	call   c0007de6 <Phys::allocatePage()>
c001484d:	6a 07                	push   0x7
c001484f:	53                   	push   ebx
c0014850:	50                   	push   eax
c0014851:	89 c7                	mov    edi,eax
c0014853:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014858:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001485b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014861:	e8 9c 54 ff ff       	call   c0009d02 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014866:	83 c4 0c             	add    esp,0xc
c0014869:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014870:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014876:	6a 00                	push   0x0
c0014878:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001487d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014880:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014886:	e8 dd 52 ff ff       	call   c0009b68 <VAS::mapOtherVASIn(bool, VAS*)>
c001488b:	58                   	pop    eax
c001488c:	5a                   	pop    edx
c001488d:	68 07 0c 00 00       	push   0xc07
c0014892:	55                   	push   ebp
c0014893:	57                   	push   edi
c0014894:	89 df                	mov    edi,ebx
c0014896:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001489d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148a3:	6a 00                	push   0x0
c00148a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148ad:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148b3:	e8 ae 56 ff ff       	call   c0009f66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00148b8:	b9 00 10 00 00       	mov    ecx,0x1000
c00148bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148bf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00148c4:	83 c4 20             	add    esp,0x20
c00148c7:	48                   	dec    eax
c00148c8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00148cd:	85 c0                	test   eax,eax
c00148cf:	75 01                	jne    c00148d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00148d1:	fb                   	sti    
c00148d2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00148d6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00148dc:	e9 f0 fe ff ff       	jmp    c00147d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00148e1:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00148e8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00148ef:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00148f5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00148fb:	0f 86 ae 00 00 00    	jbe    c00149af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014901:	fa                   	cli    
c0014902:	51                   	push   ecx
c0014903:	31 ff                	xor    edi,edi
c0014905:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001490c:	c1 ee 0c             	shr    esi,0xc
c001490f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014915:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001491b:	6a 00                	push   0x0
c001491d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014922:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014925:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001492b:	e8 38 52 ff ff       	call   c0009b68 <VAS::mapOtherVASIn(bool, VAS*)>
c0014930:	83 c4 10             	add    esp,0x10
c0014933:	e8 ae 34 ff ff       	call   c0007de6 <Phys::allocatePage()>
c0014938:	47                   	inc    edi
c0014939:	6a 07                	push   0x7
c001493b:	53                   	push   ebx
c001493c:	50                   	push   eax
c001493d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014941:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014947:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001494a:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014950:	e8 ad 53 ff ff       	call   c0009d02 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014955:	58                   	pop    eax
c0014956:	5a                   	pop    edx
c0014957:	68 07 0c 00 00       	push   0xc07
c001495c:	55                   	push   ebp
c001495d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014963:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014967:	50                   	push   eax
c0014968:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001496f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014975:	6a 00                	push   0x0
c0014977:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001497c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001497f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014985:	e8 dc 55 ff ff       	call   c0009f66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001498a:	83 c4 1c             	add    esp,0x1c
c001498d:	68 00 10 00 00       	push   0x1000
c0014992:	6a 00                	push   0x0
c0014994:	53                   	push   ebx
c0014995:	e8 56 bb fe ff       	call   c00004f0 <memset>
c001499a:	83 c4 10             	add    esp,0x10
c001499d:	39 fe                	cmp    esi,edi
c001499f:	77 92                	ja     c0014933 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00149a1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00149a6:	48                   	dec    eax
c00149a7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00149ac:	75 01                	jne    c00149af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00149ae:	fb                   	sti    
c00149af:	83 ec 0c             	sub    esp,0xc
c00149b2:	53                   	push   ebx
c00149b3:	e8 55 4f ff ff       	call   c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c00149b8:	83 c4 10             	add    esp,0x10
c00149bb:	b0 01                	mov    al,0x1
c00149bd:	81 c4 2c 10 00 00    	add    esp,0x102c
c00149c3:	5b                   	pop    ebx
c00149c4:	5e                   	pop    esi
c00149c5:	5f                   	pop    edi
c00149c6:	5d                   	pop    ebp
c00149c7:	c3                   	ret    

c00149c8 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00149c8:	55                   	push   ebp
c00149c9:	57                   	push   edi
c00149ca:	56                   	push   esi
c00149cb:	53                   	push   ebx
c00149cc:	83 ec 48             	sub    esp,0x48
c00149cf:	68 14 01 00 00       	push   0x114
c00149d4:	e8 fe 30 ff ff       	call   c0007ad7 <malloc>
c00149d9:	83 c4 0c             	add    esp,0xc
c00149dc:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00149e0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00149e4:	89 c7                	mov    edi,eax
c00149e6:	50                   	push   eax
c00149e7:	e8 3a 71 ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c00149ec:	58                   	pop    eax
c00149ed:	5a                   	pop    edx
c00149ee:	6a 01                	push   0x1
c00149f0:	57                   	push   edi
c00149f1:	e8 4e 71 ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c00149f6:	83 c4 10             	add    esp,0x10
c00149f9:	85 c0                	test   eax,eax
c00149fb:	0f 85 4c 01 00 00    	jne    c0014b4d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a01:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014a09:	83 ec 0c             	sub    esp,0xc
c0014a0c:	6a 34                	push   0x34
c0014a0e:	e8 c4 30 ff ff       	call   c0007ad7 <malloc>
c0014a13:	89 c3                	mov    ebx,eax
c0014a15:	58                   	pop    eax
c0014a16:	8b 07                	mov    eax,DWORD PTR [edi]
c0014a18:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014a1c:	56                   	push   esi
c0014a1d:	53                   	push   ebx
c0014a1e:	6a 00                	push   0x0
c0014a20:	6a 34                	push   0x34
c0014a22:	57                   	push   edi
c0014a23:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a26:	83 c4 20             	add    esp,0x20
c0014a29:	85 c0                	test   eax,eax
c0014a2b:	0f 85 1c 01 00 00    	jne    c0014b4d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a31:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014a37:	0f 85 10 01 00 00    	jne    c0014b4d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a3d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a40:	85 c0                	test   eax,eax
c0014a42:	0f 84 05 01 00 00    	je     c0014b4d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a48:	31 d2                	xor    edx,edx
c0014a4a:	55                   	push   ebp
c0014a4b:	52                   	push   edx
c0014a4c:	50                   	push   eax
c0014a4d:	57                   	push   edi
c0014a4e:	e8 af 71 ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0014a53:	83 c4 10             	add    esp,0x10
c0014a56:	85 c0                	test   eax,eax
c0014a58:	0f 85 ef 00 00 00    	jne    c0014b4d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a5e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014a61:	83 ec 0c             	sub    esp,0xc
c0014a64:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a68:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014a6c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a70:	0f af c2             	imul   eax,edx
c0014a73:	50                   	push   eax
c0014a74:	e8 5e 30 ff ff       	call   c0007ad7 <malloc>
c0014a79:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014a7b:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014a82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a86:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a8a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a8e:	0f af c2             	imul   eax,edx
c0014a91:	99                   	cdq    
c0014a92:	52                   	push   edx
c0014a93:	50                   	push   eax
c0014a94:	57                   	push   edi
c0014a95:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a98:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014a9b:	83 c4 20             	add    esp,0x20
c0014a9e:	85 c0                	test   eax,eax
c0014aa0:	0f 84 a7 00 00 00    	je     c0014b4d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014aa6:	31 d2                	xor    edx,edx
c0014aa8:	51                   	push   ecx
c0014aa9:	52                   	push   edx
c0014aaa:	50                   	push   eax
c0014aab:	57                   	push   edi
c0014aac:	e8 51 71 ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0014ab1:	83 c4 10             	add    esp,0x10
c0014ab4:	85 c0                	test   eax,eax
c0014ab6:	0f 85 91 00 00 00    	jne    c0014b4d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014abc:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014ac0:	83 ec 0c             	sub    esp,0xc
c0014ac3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014ac7:	0f af c2             	imul   eax,edx
c0014aca:	50                   	push   eax
c0014acb:	e8 07 30 ff ff       	call   c0007ad7 <malloc>
c0014ad0:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014ad2:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ad5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014add:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014ae1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014ae5:	0f af c2             	imul   eax,edx
c0014ae8:	99                   	cdq    
c0014ae9:	52                   	push   edx
c0014aea:	50                   	push   eax
c0014aeb:	57                   	push   edi
c0014aec:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014aef:	83 c4 20             	add    esp,0x20
c0014af2:	31 c9                	xor    ecx,ecx
c0014af4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014afc:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014b00:	0f b7 e9             	movzx  ebp,cx
c0014b03:	0f 83 86 00 00 00    	jae    c0014b8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014b09:	c1 e5 05             	shl    ebp,0x5
c0014b0c:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014b10:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014b14:	75 73                	jne    c0014b89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014b16:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1d:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014b20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b24:	52                   	push   edx
c0014b25:	31 d2                	xor    edx,edx
c0014b27:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014b2a:	52                   	push   edx
c0014b2b:	50                   	push   eax
c0014b2c:	57                   	push   edi
c0014b2d:	e8 d0 70 ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0014b32:	83 c4 10             	add    esp,0x10
c0014b35:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b39:	85 c0                	test   eax,eax
c0014b3b:	74 17                	je     c0014b54 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014b3d:	83 ec 0c             	sub    esp,0xc
c0014b40:	68 a9 28 02 c0       	push   0xc00228a9
c0014b45:	e8 c4 5d ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0014b4a:	83 c4 10             	add    esp,0x10
c0014b4d:	31 c0                	xor    eax,eax
c0014b4f:	e9 8b 00 00 00       	jmp    c0014bdf <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014b54:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014b58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014b5b:	83 ec 0c             	sub    esp,0xc
c0014b5e:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014b61:	50                   	push   eax
c0014b62:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014b66:	56                   	push   esi
c0014b67:	57                   	push   edi
c0014b68:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014b6c:	e8 d0 fb ff ff       	call   c0014741 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014b71:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014b75:	83 c4 20             	add    esp,0x20
c0014b78:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014b7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b80:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014b85:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014b89:	41                   	inc    ecx
c0014b8a:	e9 6d ff ff ff       	jmp    c0014afc <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014b8f:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014b93:	83 ec 0c             	sub    esp,0xc
c0014b96:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014b9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b9e:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014ba4:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014baa:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014baf:	05 00 10 00 00       	add    eax,0x1000
c0014bb4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014bb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bbb:	e8 27 2f ff ff       	call   c0007ae7 <free>
c0014bc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bc3:	e8 1f 2f ff ff       	call   c0007ae7 <free>
c0014bc8:	58                   	pop    eax
c0014bc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bcd:	e8 15 2f ff ff       	call   c0007ae7 <free>
c0014bd2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014bd5:	e8 c8 6f ff ff       	call   c000bba2 <File::close()>
c0014bda:	83 c4 10             	add    esp,0x10
c0014bdd:	b0 01                	mov    al,0x1
c0014bdf:	83 c4 3c             	add    esp,0x3c
c0014be2:	5b                   	pop    ebx
c0014be3:	5e                   	pop    esi
c0014be4:	5f                   	pop    edi
c0014be5:	5d                   	pop    ebp
c0014be6:	c3                   	ret    

c0014be7 <Thr::runtimeReferenceHelper()>:
c0014be7:	83 ec 18             	sub    esp,0x18
c0014bea:	68 b1 28 02 c0       	push   0xc00228b1
c0014bef:	e8 1a 5d ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0014bf4:	fa                   	cli    
c0014bf5:	83 c4 10             	add    esp,0x10
c0014bf8:	eb fe                	jmp    c0014bf8 <Thr::runtimeReferenceHelper()+0x11>

c0014bfa <Thr::getAddressOfKernelSymbol(char const*)>:
c0014bfa:	57                   	push   edi
c0014bfb:	56                   	push   esi
c0014bfc:	53                   	push   ebx
c0014bfd:	31 db                	xor    ebx,ebx
c0014bff:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014c05:	7e 3c                	jle    c0014c43 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014c07:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014c0e:	31 ff                	xor    edi,edi
c0014c10:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014c17:	7e 27                	jle    c0014c40 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014c19:	50                   	push   eax
c0014c1a:	50                   	push   eax
c0014c1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c1f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c21:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014c28:	50                   	push   eax
c0014c29:	e8 52 bb fe ff       	call   c0000780 <strcmp>
c0014c2e:	83 c4 10             	add    esp,0x10
c0014c31:	85 c0                	test   eax,eax
c0014c33:	75 05                	jne    c0014c3a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014c35:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c38:	eb 0b                	jmp    c0014c45 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014c3a:	83 c6 10             	add    esi,0x10
c0014c3d:	47                   	inc    edi
c0014c3e:	eb d0                	jmp    c0014c10 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014c40:	43                   	inc    ebx
c0014c41:	eb bc                	jmp    c0014bff <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014c43:	31 c0                	xor    eax,eax
c0014c45:	5b                   	pop    ebx
c0014c46:	5e                   	pop    esi
c0014c47:	5f                   	pop    edi
c0014c48:	c3                   	ret    

c0014c49 <Thr::loadKernelSymbolTable(char const*)>:
c0014c49:	55                   	push   ebp
c0014c4a:	57                   	push   edi
c0014c4b:	56                   	push   esi
c0014c4c:	53                   	push   ebx
c0014c4d:	83 ec 68             	sub    esp,0x68
c0014c50:	68 14 01 00 00       	push   0x114
c0014c55:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014c5b:	e8 77 2e ff ff       	call   c0007ad7 <malloc>
c0014c60:	83 c4 0c             	add    esp,0xc
c0014c63:	56                   	push   esi
c0014c64:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c68:	89 c3                	mov    ebx,eax
c0014c6a:	50                   	push   eax
c0014c6b:	e8 b6 6e ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c0014c70:	5e                   	pop    esi
c0014c71:	5f                   	pop    edi
c0014c72:	6a 01                	push   0x1
c0014c74:	53                   	push   ebx
c0014c75:	e8 ca 6e ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c0014c7a:	83 c4 10             	add    esp,0x10
c0014c7d:	85 c0                	test   eax,eax
c0014c7f:	74 0a                	je     c0014c8b <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014c81:	83 ec 0c             	sub    esp,0xc
c0014c84:	68 d3 28 02 c0       	push   0xc00228d3
c0014c89:	eb 34                	jmp    c0014cbf <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014c8b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014c93:	83 ec 0c             	sub    esp,0xc
c0014c96:	6a 34                	push   0x34
c0014c98:	e8 3a 2e ff ff       	call   c0007ad7 <malloc>
c0014c9d:	59                   	pop    ecx
c0014c9e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014ca2:	89 c7                	mov    edi,eax
c0014ca4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ca6:	56                   	push   esi
c0014ca7:	57                   	push   edi
c0014ca8:	6a 00                	push   0x0
c0014caa:	6a 34                	push   0x34
c0014cac:	53                   	push   ebx
c0014cad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cb0:	83 c4 20             	add    esp,0x20
c0014cb3:	85 c0                	test   eax,eax
c0014cb5:	74 17                	je     c0014cce <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014cb7:	83 ec 0c             	sub    esp,0xc
c0014cba:	68 ea 28 02 c0       	push   0xc00228ea
c0014cbf:	e8 43 c9 ff ff       	call   c0011607 <KePanic(char const*)>
c0014cc4:	83 c4 10             	add    esp,0x10
c0014cc7:	31 c0                	xor    eax,eax
c0014cc9:	e9 31 02 00 00       	jmp    c0014eff <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014cce:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014cd4:	75 e1                	jne    c0014cb7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cd6:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014cd9:	85 c0                	test   eax,eax
c0014cdb:	74 da                	je     c0014cb7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cdd:	52                   	push   edx
c0014cde:	31 d2                	xor    edx,edx
c0014ce0:	52                   	push   edx
c0014ce1:	50                   	push   eax
c0014ce2:	53                   	push   ebx
c0014ce3:	e8 1a 6f ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0014ce8:	83 c4 10             	add    esp,0x10
c0014ceb:	85 c0                	test   eax,eax
c0014ced:	75 c8                	jne    c0014cb7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014cef:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014cf3:	83 ec 0c             	sub    esp,0xc
c0014cf6:	31 ed                	xor    ebp,ebp
c0014cf8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014cfc:	0f af c2             	imul   eax,edx
c0014cff:	50                   	push   eax
c0014d00:	e8 d2 2d ff ff       	call   c0007ad7 <malloc>
c0014d05:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d07:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d12:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d16:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d1a:	0f af c2             	imul   eax,edx
c0014d1d:	99                   	cdq    
c0014d1e:	52                   	push   edx
c0014d1f:	50                   	push   eax
c0014d20:	53                   	push   ebx
c0014d21:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d24:	83 c4 20             	add    esp,0x20
c0014d27:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d2f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d37:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014d3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d47:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014d4b:	0f b7 f5             	movzx  esi,bp
c0014d4e:	0f 83 a7 00 00 00    	jae    c0014dfb <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014d54:	6b f6 28             	imul   esi,esi,0x28
c0014d57:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014d5b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014d5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d62:	50                   	push   eax
c0014d63:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014d67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d6b:	8b 16                	mov    edx,DWORD PTR [esi]
c0014d6d:	6b c0 28             	imul   eax,eax,0x28
c0014d70:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014d74:	89 d0                	mov    eax,edx
c0014d76:	31 d2                	xor    edx,edx
c0014d78:	52                   	push   edx
c0014d79:	50                   	push   eax
c0014d7a:	53                   	push   ebx
c0014d7b:	e8 82 6e ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0014d80:	83 c4 0c             	add    esp,0xc
c0014d83:	6a 20                	push   0x20
c0014d85:	6a 00                	push   0x0
c0014d87:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d8b:	52                   	push   edx
c0014d8c:	e8 5f b7 fe ff       	call   c00004f0 <memset>
c0014d91:	58                   	pop    eax
c0014d92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d94:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014d98:	51                   	push   ecx
c0014d99:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014d9d:	52                   	push   edx
c0014d9e:	6a 00                	push   0x0
c0014da0:	6a 1f                	push   0x1f
c0014da2:	53                   	push   ebx
c0014da3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014da6:	83 c4 18             	add    esp,0x18
c0014da9:	68 01 29 02 c0       	push   0xc0022901
c0014dae:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014db2:	52                   	push   edx
c0014db3:	e8 c8 b9 fe ff       	call   c0000780 <strcmp>
c0014db8:	83 c4 10             	add    esp,0x10
c0014dbb:	85 c0                	test   eax,eax
c0014dbd:	75 0f                	jne    c0014dce <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014dbf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014dc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014dc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014dce:	50                   	push   eax
c0014dcf:	50                   	push   eax
c0014dd0:	68 09 29 02 c0       	push   0xc0022909
c0014dd5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014dd9:	50                   	push   eax
c0014dda:	e8 a1 b9 fe ff       	call   c0000780 <strcmp>
c0014ddf:	83 c4 10             	add    esp,0x10
c0014de2:	85 c0                	test   eax,eax
c0014de4:	75 0f                	jne    c0014df5 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014de6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014de9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ded:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014df1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014df5:	45                   	inc    ebp
c0014df6:	e9 4c ff ff ff       	jmp    c0014d47 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014dfb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014e00:	75 10                	jne    c0014e12 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014e02:	83 ec 0c             	sub    esp,0xc
c0014e05:	68 11 29 02 c0       	push   0xc0022911
c0014e0a:	e8 f8 c7 ff ff       	call   c0011607 <KePanic(char const*)>
c0014e0f:	83 c4 10             	add    esp,0x10
c0014e12:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014e17:	75 10                	jne    c0014e29 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014e19:	83 ec 0c             	sub    esp,0xc
c0014e1c:	68 11 29 02 c0       	push   0xc0022911
c0014e21:	e8 e1 c7 ff ff       	call   c0011607 <KePanic(char const*)>
c0014e26:	83 c4 10             	add    esp,0x10
c0014e29:	50                   	push   eax
c0014e2a:	31 d2                	xor    edx,edx
c0014e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e30:	52                   	push   edx
c0014e31:	50                   	push   eax
c0014e32:	53                   	push   ebx
c0014e33:	e8 ca 6d ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0014e38:	5a                   	pop    edx
c0014e39:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e3d:	e8 95 2c ff ff       	call   c0007ad7 <malloc>
c0014e42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e46:	31 c9                	xor    ecx,ecx
c0014e48:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e4e:	5e                   	pop    esi
c0014e4f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014e53:	55                   	push   ebp
c0014e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e58:	51                   	push   ecx
c0014e59:	52                   	push   edx
c0014e5a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014e5e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014e62:	53                   	push   ebx
c0014e63:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e66:	83 c4 14             	add    esp,0x14
c0014e69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e6d:	e8 65 2c ff ff       	call   c0007ad7 <malloc>
c0014e72:	89 c6                	mov    esi,eax
c0014e74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e76:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e79:	56                   	push   esi
c0014e7a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014e7e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014e82:	51                   	push   ecx
c0014e83:	52                   	push   edx
c0014e84:	53                   	push   ebx
c0014e85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e8c:	83 c4 1c             	add    esp,0x1c
c0014e8f:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014e95:	c1 e8 04             	shr    eax,0x4
c0014e98:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014e9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ea3:	31 d2                	xor    edx,edx
c0014ea5:	52                   	push   edx
c0014ea6:	50                   	push   eax
c0014ea7:	53                   	push   ebx
c0014ea8:	e8 55 6d ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0014ead:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014eaf:	31 d2                	xor    edx,edx
c0014eb1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014eb4:	56                   	push   esi
c0014eb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014eb9:	52                   	push   edx
c0014eba:	50                   	push   eax
c0014ebb:	53                   	push   ebx
c0014ebc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ebf:	83 c4 14             	add    esp,0x14
c0014ec2:	53                   	push   ebx
c0014ec3:	e8 da 6c ff ff       	call   c000bba2 <File::close()>
c0014ec8:	5d                   	pop    ebp
c0014ec9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ecd:	e8 15 2c ff ff       	call   c0007ae7 <free>
c0014ed2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014ed5:	e8 0d 2c ff ff       	call   c0007ae7 <free>
c0014eda:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014edf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014ee3:	83 c4 10             	add    esp,0x10
c0014ee6:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014eed:	8d 50 01             	lea    edx,[eax+0x1]
c0014ef0:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014ef7:	b0 01                	mov    al,0x1
c0014ef9:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014eff:	83 c4 5c             	add    esp,0x5c
c0014f02:	5b                   	pop    ebx
c0014f03:	5e                   	pop    esi
c0014f04:	5f                   	pop    edi
c0014f05:	5d                   	pop    ebp
c0014f06:	c3                   	ret    

c0014f07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014f07:	55                   	push   ebp
c0014f08:	57                   	push   edi
c0014f09:	56                   	push   esi
c0014f0a:	53                   	push   ebx
c0014f0b:	81 ec 68 03 00 00    	sub    esp,0x368
c0014f11:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014f18:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014f1e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014f22:	68 14 01 00 00       	push   0x114
c0014f27:	e8 ab 2b ff ff       	call   c0007ad7 <malloc>
c0014f2c:	83 c4 0c             	add    esp,0xc
c0014f2f:	56                   	push   esi
c0014f30:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014f37:	50                   	push   eax
c0014f38:	89 c3                	mov    ebx,eax
c0014f3a:	e8 e7 6b ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c0014f3f:	5f                   	pop    edi
c0014f40:	5d                   	pop    ebp
c0014f41:	6a 01                	push   0x1
c0014f43:	53                   	push   ebx
c0014f44:	e8 fb 6b ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c0014f49:	83 c4 10             	add    esp,0x10
c0014f4c:	85 c0                	test   eax,eax
c0014f4e:	0f 85 b3 06 00 00    	jne    c0015607 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f54:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014f5c:	83 ec 0c             	sub    esp,0xc
c0014f5f:	6a 34                	push   0x34
c0014f61:	e8 71 2b ff ff       	call   c0007ad7 <malloc>
c0014f66:	5e                   	pop    esi
c0014f67:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014f6b:	89 c5                	mov    ebp,eax
c0014f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f6f:	56                   	push   esi
c0014f70:	55                   	push   ebp
c0014f71:	6a 00                	push   0x0
c0014f73:	6a 34                	push   0x34
c0014f75:	53                   	push   ebx
c0014f76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f79:	83 c4 20             	add    esp,0x20
c0014f7c:	85 c0                	test   eax,eax
c0014f7e:	0f 85 83 06 00 00    	jne    c0015607 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f84:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014f8b:	0f 85 76 06 00 00    	jne    c0015607 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f91:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014f94:	85 c0                	test   eax,eax
c0014f96:	0f 84 6b 06 00 00    	je     c0015607 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f9c:	31 d2                	xor    edx,edx
c0014f9e:	51                   	push   ecx
c0014f9f:	52                   	push   edx
c0014fa0:	50                   	push   eax
c0014fa1:	53                   	push   ebx
c0014fa2:	e8 5b 6c ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0014fa7:	83 c4 10             	add    esp,0x10
c0014faa:	85 c0                	test   eax,eax
c0014fac:	0f 85 55 06 00 00    	jne    c0015607 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fb2:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014fb5:	83 ec 0c             	sub    esp,0xc
c0014fb8:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014fbc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014fc0:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014fc4:	0f af c2             	imul   eax,edx
c0014fc7:	50                   	push   eax
c0014fc8:	e8 0a 2b ff ff       	call   c0007ad7 <malloc>
c0014fcd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014fcf:	89 34 24             	mov    DWORD PTR [esp],esi
c0014fd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014fd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fda:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014fde:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014fe2:	0f af c2             	imul   eax,edx
c0014fe5:	99                   	cdq    
c0014fe6:	52                   	push   edx
c0014fe7:	50                   	push   eax
c0014fe8:	53                   	push   ebx
c0014fe9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fec:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014fef:	83 c4 20             	add    esp,0x20
c0014ff2:	85 c0                	test   eax,eax
c0014ff4:	0f 84 0d 06 00 00    	je     c0015607 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ffa:	52                   	push   edx
c0014ffb:	31 d2                	xor    edx,edx
c0014ffd:	52                   	push   edx
c0014ffe:	50                   	push   eax
c0014fff:	53                   	push   ebx
c0015000:	e8 fd 6b ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0015005:	83 c4 10             	add    esp,0x10
c0015008:	85 c0                	test   eax,eax
c001500a:	0f 85 f7 05 00 00    	jne    c0015607 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015010:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0015014:	83 ec 0c             	sub    esp,0xc
c0015017:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001501b:	0f af c2             	imul   eax,edx
c001501e:	50                   	push   eax
c001501f:	e8 b3 2a ff ff       	call   c0007ad7 <malloc>
c0015024:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015026:	89 34 24             	mov    DWORD PTR [esp],esi
c0015029:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001502d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015031:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0015035:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015039:	0f af c2             	imul   eax,edx
c001503c:	99                   	cdq    
c001503d:	52                   	push   edx
c001503e:	50                   	push   eax
c001503f:	53                   	push   ebx
c0015040:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015043:	83 c4 20             	add    esp,0x20
c0015046:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001504c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001504f:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0015053:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0015057:	73 78                	jae    c00150d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0015059:	c1 e7 05             	shl    edi,0x5
c001505c:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0015060:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015063:	75 63                	jne    c00150c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0015065:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015068:	31 d2                	xor    edx,edx
c001506a:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c001506d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015071:	50                   	push   eax
c0015072:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015075:	52                   	push   edx
c0015076:	50                   	push   eax
c0015077:	53                   	push   ebx
c0015078:	e8 85 6b ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c001507d:	83 c4 10             	add    esp,0x10
c0015080:	85 c0                	test   eax,eax
c0015082:	0f 85 7f 05 00 00    	jne    c0015607 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015088:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001508f:	83 ec 0c             	sub    esp,0xc
c0015092:	31 d2                	xor    edx,edx
c0015094:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0015098:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001509a:	01 c6                	add    esi,eax
c001509c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150a3:	50                   	push   eax
c00150a4:	56                   	push   esi
c00150a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150a9:	52                   	push   edx
c00150aa:	50                   	push   eax
c00150ab:	53                   	push   ebx
c00150ac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150af:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150b2:	83 c4 1c             	add    esp,0x1c
c00150b5:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00150b8:	50                   	push   eax
c00150b9:	6a 00                	push   0x0
c00150bb:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00150bf:	56                   	push   esi
c00150c0:	e8 2b b4 fe ff       	call   c00004f0 <memset>
c00150c5:	83 c4 10             	add    esp,0x10
c00150c8:	66 ff 04 24          	inc    WORD PTR [esp]
c00150cc:	e9 7b ff ff ff       	jmp    c001504c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00150d1:	50                   	push   eax
c00150d2:	68 00 01 00 00       	push   0x100
c00150d7:	6a 00                	push   0x0
c00150d9:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00150dd:	50                   	push   eax
c00150de:	e8 0d b4 fe ff       	call   c00004f0 <memset>
c00150e3:	83 c4 0c             	add    esp,0xc
c00150e6:	68 00 01 00 00       	push   0x100
c00150eb:	6a 00                	push   0x0
c00150ed:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00150f4:	50                   	push   eax
c00150f5:	e8 f6 b3 fe ff       	call   c00004f0 <memset>
c00150fa:	83 c4 10             	add    esp,0x10
c00150fd:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0015104:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001510b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015113:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001511b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015123:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001512b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001512f:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0015133:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015138:	0f 83 16 01 00 00    	jae    c0015254 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c001513e:	6b ff 28             	imul   edi,edi,0x28
c0015141:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0015145:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015148:	51                   	push   ecx
c0015149:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001514d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015151:	8b 07                	mov    eax,DWORD PTR [edi]
c0015153:	6b d2 28             	imul   edx,edx,0x28
c0015156:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001515a:	31 d2                	xor    edx,edx
c001515c:	52                   	push   edx
c001515d:	50                   	push   eax
c001515e:	53                   	push   ebx
c001515f:	e8 9e 6a ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0015164:	83 c4 0c             	add    esp,0xc
c0015167:	6a 20                	push   0x20
c0015169:	6a 00                	push   0x0
c001516b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015172:	51                   	push   ecx
c0015173:	e8 78 b3 fe ff       	call   c00004f0 <memset>
c0015178:	58                   	pop    eax
c0015179:	8b 03                	mov    eax,DWORD PTR [ebx]
c001517b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001517f:	52                   	push   edx
c0015180:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015187:	51                   	push   ecx
c0015188:	6a 00                	push   0x0
c001518a:	6a 1f                	push   0x1f
c001518c:	53                   	push   ebx
c001518d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015190:	83 c4 1c             	add    esp,0x1c
c0015193:	6a 09                	push   0x9
c0015195:	68 2b 29 02 c0       	push   0xc002292b
c001519a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151a1:	51                   	push   ecx
c00151a2:	e8 d9 b1 fe ff       	call   c0000380 <memcmp>
c00151a7:	83 c4 10             	add    esp,0x10
c00151aa:	85 c0                	test   eax,eax
c00151ac:	75 1a                	jne    c00151c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00151ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00151b1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00151b4:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00151b8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00151bb:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00151c2:	89 d0                	mov    eax,edx
c00151c4:	40                   	inc    eax
c00151c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00151c8:	52                   	push   edx
c00151c9:	6a 09                	push   0x9
c00151cb:	68 35 29 02 c0       	push   0xc0022935
c00151d0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151d7:	50                   	push   eax
c00151d8:	e8 a3 b1 fe ff       	call   c0000380 <memcmp>
c00151dd:	83 c4 10             	add    esp,0x10
c00151e0:	85 c0                	test   eax,eax
c00151e2:	75 1a                	jne    c00151fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00151e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00151e7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00151ea:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00151ee:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00151f1:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00151f8:	89 c8                	mov    eax,ecx
c00151fa:	40                   	inc    eax
c00151fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00151fe:	50                   	push   eax
c00151ff:	50                   	push   eax
c0015200:	68 01 29 02 c0       	push   0xc0022901
c0015205:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001520c:	50                   	push   eax
c001520d:	e8 6e b5 fe ff       	call   c0000780 <strcmp>
c0015212:	83 c4 10             	add    esp,0x10
c0015215:	85 c0                	test   eax,eax
c0015217:	75 0b                	jne    c0015224 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0015219:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001521d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015220:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015224:	50                   	push   eax
c0015225:	50                   	push   eax
c0015226:	68 09 29 02 c0       	push   0xc0022909
c001522b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015232:	50                   	push   eax
c0015233:	e8 48 b5 fe ff       	call   c0000780 <strcmp>
c0015238:	83 c4 10             	add    esp,0x10
c001523b:	85 c0                	test   eax,eax
c001523d:	75 0b                	jne    c001524a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c001523f:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0015243:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015246:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001524a:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c001524f:	e9 d7 fe ff ff       	jmp    c001512b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0015254:	50                   	push   eax
c0015255:	31 d2                	xor    edx,edx
c0015257:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001525b:	52                   	push   edx
c001525c:	50                   	push   eax
c001525d:	53                   	push   ebx
c001525e:	e8 9f 69 ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0015263:	58                   	pop    eax
c0015264:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015268:	e8 6a 28 ff ff       	call   c0007ad7 <malloc>
c001526d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001526f:	31 d2                	xor    edx,edx
c0015271:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015275:	58                   	pop    eax
c0015276:	8d 74 24 54          	lea    esi,[esp+0x54]
c001527a:	56                   	push   esi
c001527b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001527f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015283:	52                   	push   edx
c0015284:	50                   	push   eax
c0015285:	53                   	push   ebx
c0015286:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015289:	83 c4 14             	add    esp,0x14
c001528c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015290:	e8 42 28 ff ff       	call   c0007ad7 <malloc>
c0015295:	31 d2                	xor    edx,edx
c0015297:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001529b:	83 c4 0c             	add    esp,0xc
c001529e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152a2:	52                   	push   edx
c00152a3:	50                   	push   eax
c00152a4:	53                   	push   ebx
c00152a5:	e8 58 69 ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c00152aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00152ac:	31 d2                	xor    edx,edx
c00152ae:	89 34 24             	mov    DWORD PTR [esp],esi
c00152b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00152b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00152b9:	52                   	push   edx
c00152ba:	50                   	push   eax
c00152bb:	53                   	push   ebx
c00152bc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152bf:	83 c4 20             	add    esp,0x20
c00152c2:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00152c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00152cf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00152d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00152d7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00152da:	0f 84 2b 03 00 00    	je     c001560b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00152e0:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00152e7:	31 d2                	xor    edx,edx
c00152e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00152ed:	c1 e8 03             	shr    eax,0x3
c00152f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00152f4:	51                   	push   ecx
c00152f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152f9:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00152fd:	52                   	push   edx
c00152fe:	50                   	push   eax
c00152ff:	53                   	push   ebx
c0015300:	e8 fd 68 ff ff       	call   c000bc02 <File::seek(unsigned long long)>
c0015305:	5e                   	pop    esi
c0015306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001530a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015311:	e8 c1 27 ff ff       	call   c0007ad7 <malloc>
c0015316:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015318:	31 d2                	xor    edx,edx
c001531a:	89 c7                	mov    edi,eax
c001531c:	58                   	pop    eax
c001531d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015321:	50                   	push   eax
c0015322:	57                   	push   edi
c0015323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015327:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001532e:	52                   	push   edx
c001532f:	50                   	push   eax
c0015330:	53                   	push   ebx
c0015331:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015334:	83 c4 20             	add    esp,0x20
c0015337:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001533f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015343:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015347:	0f 8d a5 02 00 00    	jge    c00155f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c001534d:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0015352:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015356:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015359:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001535d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015361:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0015365:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015369:	c1 e8 08             	shr    eax,0x8
c001536c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015370:	89 c2                	mov    edx,eax
c0015372:	c1 e2 04             	shl    edx,0x4
c0015375:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015379:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c001537c:	85 f6                	test   esi,esi
c001537e:	0f 85 cf 00 00 00    	jne    c0015453 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015384:	83 ec 0c             	sub    esp,0xc
c0015387:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c001538b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001538f:	03 02                	add    eax,DWORD PTR [edx]
c0015391:	50                   	push   eax
c0015392:	e8 63 f8 ff ff       	call   c0014bfa <Thr::getAddressOfKernelSymbol(char const*)>
c0015397:	83 c4 10             	add    esp,0x10
c001539a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001539e:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00153a3:	85 c0                	test   eax,eax
c00153a5:	89 c6                	mov    esi,eax
c00153a7:	0f 85 a6 00 00 00    	jne    c0015453 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00153ad:	83 ec 0c             	sub    esp,0xc
c00153b0:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00153b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153b8:	03 02                	add    eax,DWORD PTR [edx]
c00153ba:	50                   	push   eax
c00153bb:	e8 30 c4 ff ff       	call   c00117f0 <KeResolveCompatibilitySymbol(char*)>
c00153c0:	83 c4 10             	add    esp,0x10
c00153c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00153c7:	85 c0                	test   eax,eax
c00153c9:	89 c6                	mov    esi,eax
c00153cb:	0f 85 82 00 00 00    	jne    c0015453 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00153d1:	50                   	push   eax
c00153d2:	50                   	push   eax
c00153d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00153d7:	03 02                	add    eax,DWORD PTR [edx]
c00153d9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00153dd:	50                   	push   eax
c00153de:	68 3f 29 02 c0       	push   0xc002293f
c00153e3:	e8 26 55 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00153e8:	58                   	pop    eax
c00153e9:	5a                   	pop    edx
c00153ea:	68 59 29 02 c0       	push   0xc0022959
c00153ef:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00153f6:	51                   	push   ecx
c00153f7:	e8 54 b2 fe ff       	call   c0000650 <strcpy>
c00153fc:	59                   	pop    ecx
c00153fd:	58                   	pop    eax
c00153fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015402:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015406:	03 02                	add    eax,DWORD PTR [edx]
c0015408:	50                   	push   eax
c0015409:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015410:	51                   	push   ecx
c0015411:	e8 5a b4 fe ff       	call   c0000870 <strcat>
c0015416:	58                   	pop    eax
c0015417:	5a                   	pop    edx
c0015418:	68 ef 29 02 c0       	push   0xc00229ef
c001541d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015424:	51                   	push   ecx
c0015425:	e8 46 b4 fe ff       	call   c0000870 <strcat>
c001542a:	83 c4 10             	add    esp,0x10
c001542d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015432:	0f 84 77 01 00 00    	je     c00155af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015438:	83 ec 0c             	sub    esp,0xc
c001543b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015442:	51                   	push   ecx
c0015443:	e8 bf c1 ff ff       	call   c0011607 <KePanic(char const*)>
c0015448:	83 c4 10             	add    esp,0x10
c001544b:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001544f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015453:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015458:	83 f8 01             	cmp    eax,0x1
c001545b:	0f 85 9b 00 00 00    	jne    c00154fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0015461:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015465:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c001546c:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0015470:	01 d0                	add    eax,edx
c0015472:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001547a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001547e:	0f 94 c0             	sete   al
c0015481:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015489:	0f 94 c1             	sete   cl
c001548c:	09 c1                	or     ecx,eax
c001548e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015492:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015497:	0f b6 c9             	movzx  ecx,cl
c001549a:	8b 00                	mov    eax,DWORD PTR [eax]
c001549c:	74 41                	je     c00154df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c001549e:	8d 14 06             	lea    edx,[esi+eax*1]
c00154a1:	85 c9                	test   ecx,ecx
c00154a3:	75 15                	jne    c00154ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00154a5:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00154a9:	66 83 f8 0c          	cmp    ax,0xc
c00154ad:	76 05                	jbe    c00154b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00154af:	b8 0c 00 00 00       	mov    eax,0xc
c00154b4:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00154b8:	76 37                	jbe    c00154f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154ba:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00154bf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00154c3:	0f 84 e6 00 00 00    	je     c00155af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00154c9:	83 ec 0c             	sub    esp,0xc
c00154cc:	68 70 29 02 c0       	push   0xc0022970
c00154d1:	e8 31 c1 ff ff       	call   c0011607 <KePanic(char const*)>
c00154d6:	83 c4 10             	add    esp,0x10
c00154d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154dd:	eb 12                	jmp    c00154f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154df:	01 c2                	add    edx,eax
c00154e1:	85 c9                	test   ecx,ecx
c00154e3:	75 0c                	jne    c00154f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154e5:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00154e9:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00154ed:	77 02                	ja     c00154f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00154ef:	01 f2                	add    edx,esi
c00154f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154f5:	89 10                	mov    DWORD PTR [eax],edx
c00154f7:	e9 ed 00 00 00       	jmp    c00155e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00154fc:	83 f8 02             	cmp    eax,0x2
c00154ff:	0f 85 81 00 00 00    	jne    c0015586 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0015505:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001550c:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0015510:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0015514:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001551c:	74 21                	je     c001553f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001551e:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015526:	74 17                	je     c001553f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015528:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c001552c:	ba 0a 00 00 00       	mov    edx,0xa
c0015531:	83 f9 0e             	cmp    ecx,0xe
c0015534:	77 03                	ja     c0015539 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0015536:	8d 51 fc             	lea    edx,[ecx-0x4]
c0015539:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c001553d:	76 1f                	jbe    c001555e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c001553f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015544:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015548:	74 65                	je     c00155af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001554a:	83 ec 0c             	sub    esp,0xc
c001554d:	68 8c 29 02 c0       	push   0xc002298c
c0015552:	e8 b0 c0 ff ff       	call   c0011607 <KePanic(char const*)>
c0015557:	83 c4 10             	add    esp,0x10
c001555a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001555e:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015563:	8b 10                	mov    edx,DWORD PTR [eax]
c0015565:	74 15                	je     c001557c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0015567:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001556b:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0015572:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015576:	01 d1                	add    ecx,edx
c0015578:	01 ce                	add    esi,ecx
c001557a:	eb 06                	jmp    c0015582 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c001557c:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0015580:	01 d6                	add    esi,edx
c0015582:	89 30                	mov    DWORD PTR [eax],esi
c0015584:	eb 63                	jmp    c00155e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015586:	56                   	push   esi
c0015587:	56                   	push   esi
c0015588:	50                   	push   eax
c0015589:	68 a8 29 02 c0       	push   0xc00229a8
c001558e:	e8 7b 53 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0015593:	83 c4 10             	add    esp,0x10
c0015596:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001559b:	74 12                	je     c00155af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001559d:	83 ec 0c             	sub    esp,0xc
c00155a0:	68 b3 29 02 c0       	push   0xc00229b3
c00155a5:	e8 5d c0 ff ff       	call   c0011607 <KePanic(char const*)>
c00155aa:	83 c4 10             	add    esp,0x10
c00155ad:	eb 3a                	jmp    c00155e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00155af:	83 ec 0c             	sub    esp,0xc
c00155b2:	53                   	push   ebx
c00155b3:	e8 ea 65 ff ff       	call   c000bba2 <File::close()>
c00155b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00155c3:	e8 1f 25 ff ff       	call   c0007ae7 <free>
c00155c8:	59                   	pop    ecx
c00155c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00155cd:	e8 15 25 ff ff       	call   c0007ae7 <free>
c00155d2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155d5:	e8 0d 25 ff ff       	call   c0007ae7 <free>
c00155da:	5b                   	pop    ebx
c00155db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155df:	e8 03 25 ff ff       	call   c0007ae7 <free>
c00155e4:	83 c4 10             	add    esp,0x10
c00155e7:	eb 1e                	jmp    c0015607 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00155e9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00155ed:	e9 4d fd ff ff       	jmp    c001533f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00155f2:	83 ec 0c             	sub    esp,0xc
c00155f5:	57                   	push   edi
c00155f6:	e8 ec 24 ff ff       	call   c0007ae7 <free>
c00155fb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00155ff:	83 c4 10             	add    esp,0x10
c0015602:	e9 cc fc ff ff       	jmp    c00152d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0015607:	31 c0                	xor    eax,eax
c0015609:	eb 32                	jmp    c001563d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c001560b:	83 ec 0c             	sub    esp,0xc
c001560e:	53                   	push   ebx
c001560f:	e8 8e 65 ff ff       	call   c000bba2 <File::close()>
c0015614:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015616:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015619:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001561c:	58                   	pop    eax
c001561d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015621:	e8 c1 24 ff ff       	call   c0007ae7 <free>
c0015626:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015629:	e8 b9 24 ff ff       	call   c0007ae7 <free>
c001562e:	5a                   	pop    edx
c001562f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015633:	e8 af 24 ff ff       	call   c0007ae7 <free>
c0015638:	83 c4 10             	add    esp,0x10
c001563b:	b0 01                	mov    al,0x1
c001563d:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015643:	5b                   	pop    ebx
c0015644:	5e                   	pop    esi
c0015645:	5f                   	pop    edi
c0015646:	5d                   	pop    ebp
c0015647:	c3                   	ret    

c0015648 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015648:	56                   	push   esi
c0015649:	31 d2                	xor    edx,edx
c001564b:	53                   	push   ebx
c001564c:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015652:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015656:	39 d3                	cmp    ebx,edx
c0015658:	7e 1b                	jle    c0015675 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001565a:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c0015661:	39 c8                	cmp    eax,ecx
c0015663:	77 0d                	ja     c0015672 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015665:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c001566c:	01 c6                	add    esi,eax
c001566e:	39 ce                	cmp    esi,ecx
c0015670:	77 05                	ja     c0015677 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015672:	42                   	inc    edx
c0015673:	eb e1                	jmp    c0015656 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015675:	31 c0                	xor    eax,eax
c0015677:	5b                   	pop    ebx
c0015678:	5e                   	pop    esi
c0015679:	c3                   	ret    

c001567a <Thr::getDriverNameFromAddress(unsigned long)>:
c001567a:	53                   	push   ebx
c001567b:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015681:	31 c0                	xor    eax,eax
c0015683:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015687:	39 c3                	cmp    ebx,eax
c0015689:	7e 22                	jle    c00156ad <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001568b:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c0015692:	39 ca                	cmp    edx,ecx
c0015694:	77 14                	ja     c00156aa <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015696:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c001569d:	39 ca                	cmp    edx,ecx
c001569f:	76 09                	jbe    c00156aa <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156a1:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c00156a8:	eb 05                	jmp    c00156af <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00156aa:	40                   	inc    eax
c00156ab:	eb da                	jmp    c0015687 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00156ad:	31 c0                	xor    eax,eax
c00156af:	5b                   	pop    ebx
c00156b0:	c3                   	ret    

c00156b1 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00156b1:	53                   	push   ebx
c00156b2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00156b6:	53                   	push   ebx
c00156b7:	e8 8c ff ff ff       	call   c0015648 <Thr::getDriverBaseFromAddress(unsigned long)>
c00156bc:	5a                   	pop    edx
c00156bd:	31 d2                	xor    edx,edx
c00156bf:	85 c0                	test   eax,eax
c00156c1:	74 04                	je     c00156c7 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00156c3:	89 da                	mov    edx,ebx
c00156c5:	29 c2                	sub    edx,eax
c00156c7:	5b                   	pop    ebx
c00156c8:	89 d0                	mov    eax,edx
c00156ca:	c3                   	ret    

c00156cb <Thr::loadDLL(char const*, bool)>:
c00156cb:	55                   	push   ebp
c00156cc:	57                   	push   edi
c00156cd:	56                   	push   esi
c00156ce:	53                   	push   ebx
c00156cf:	81 ec 34 01 00 00    	sub    esp,0x134
c00156d5:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00156dc:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00156e3:	56                   	push   esi
c00156e4:	68 cb 29 02 c0       	push   0xc00229cb
c00156e9:	e8 20 52 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00156ee:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00156f5:	e8 dd 23 ff ff       	call   c0007ad7 <malloc>
c00156fa:	83 c4 0c             	add    esp,0xc
c00156fd:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015703:	56                   	push   esi
c0015704:	50                   	push   eax
c0015705:	89 c3                	mov    ebx,eax
c0015707:	e8 1a 64 ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c001570c:	83 c4 10             	add    esp,0x10
c001570f:	85 db                	test   ebx,ebx
c0015711:	75 3c                	jne    c001574f <Thr::loadDLL(char const*, bool)+0x84>
c0015713:	89 e8                	mov    eax,ebp
c0015715:	84 c0                	test   al,al
c0015717:	0f 84 e1 01 00 00    	je     c00158fe <Thr::loadDLL(char const*, bool)+0x233>
c001571d:	50                   	push   eax
c001571e:	50                   	push   eax
c001571f:	68 dc 29 02 c0       	push   0xc00229dc
c0015724:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015728:	57                   	push   edi
c0015729:	e8 22 af fe ff       	call   c0000650 <strcpy>
c001572e:	58                   	pop    eax
c001572f:	5a                   	pop    edx
c0015730:	56                   	push   esi
c0015731:	57                   	push   edi
c0015732:	e8 39 b1 fe ff       	call   c0000870 <strcat>
c0015737:	59                   	pop    ecx
c0015738:	58                   	pop    eax
c0015739:	68 ef 29 02 c0       	push   0xc00229ef
c001573e:	57                   	push   edi
c001573f:	e8 2c b1 fe ff       	call   c0000870 <strcat>
c0015744:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015747:	e8 bb be ff ff       	call   c0011607 <KePanic(char const*)>
c001574c:	83 c4 10             	add    esp,0x10
c001574f:	50                   	push   eax
c0015750:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015754:	50                   	push   eax
c0015755:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015759:	50                   	push   eax
c001575a:	53                   	push   ebx
c001575b:	e8 e6 66 ff ff       	call   c000be46 <File::stat(unsigned long long*, bool*)>
c0015760:	83 c4 10             	add    esp,0x10
c0015763:	85 db                	test   ebx,ebx
c0015765:	74 0c                	je     c0015773 <Thr::loadDLL(char const*, bool)+0xa8>
c0015767:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015769:	83 ec 0c             	sub    esp,0xc
c001576c:	53                   	push   ebx
c001576d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015770:	83 c4 10             	add    esp,0x10
c0015773:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015778:	75 0a                	jne    c0015784 <Thr::loadDLL(char const*, bool)+0xb9>
c001577a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001577e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015782:	75 3e                	jne    c00157c2 <Thr::loadDLL(char const*, bool)+0xf7>
c0015784:	89 e8                	mov    eax,ebp
c0015786:	31 db                	xor    ebx,ebx
c0015788:	84 c0                	test   al,al
c001578a:	0f 84 6e 01 00 00    	je     c00158fe <Thr::loadDLL(char const*, bool)+0x233>
c0015790:	50                   	push   eax
c0015791:	50                   	push   eax
c0015792:	68 dc 29 02 c0       	push   0xc00229dc
c0015797:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001579b:	53                   	push   ebx
c001579c:	e8 af ae fe ff       	call   c0000650 <strcpy>
c00157a1:	58                   	pop    eax
c00157a2:	5a                   	pop    edx
c00157a3:	56                   	push   esi
c00157a4:	53                   	push   ebx
c00157a5:	e8 c6 b0 fe ff       	call   c0000870 <strcat>
c00157aa:	59                   	pop    ecx
c00157ab:	5f                   	pop    edi
c00157ac:	68 ef 29 02 c0       	push   0xc00229ef
c00157b1:	53                   	push   ebx
c00157b2:	e8 b9 b0 fe ff       	call   c0000870 <strcat>
c00157b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157ba:	e8 48 be ff ff       	call   c0011607 <KePanic(char const*)>
c00157bf:	83 c4 10             	add    esp,0x10
c00157c2:	53                   	push   ebx
c00157c3:	6a 03                	push   0x3
c00157c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00157cd:	05 ff 0f 00 00       	add    eax,0xfff
c00157d2:	83 d2 00             	adc    edx,0x0
c00157d5:	0f ac d0 0c          	shrd   eax,edx,0xc
c00157d9:	50                   	push   eax
c00157da:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00157e0:	e8 25 46 ff ff       	call   c0009e0a <VAS::allocatePages(int, int)>
c00157e5:	89 c3                	mov    ebx,eax
c00157e7:	58                   	pop    eax
c00157e8:	5a                   	pop    edx
c00157e9:	53                   	push   ebx
c00157ea:	68 8a 0e 02 c0       	push   0xc0020e8a
c00157ef:	e8 1a 51 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00157f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00157f7:	e8 84 ad fe ff       	call   c0000580 <strlen>
c00157fc:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c0015802:	40                   	inc    eax
c0015803:	89 04 24             	mov    DWORD PTR [esp],eax
c0015806:	e8 cc 22 ff ff       	call   c0007ad7 <malloc>
c001580b:	59                   	pop    ecx
c001580c:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c0015813:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015818:	5f                   	pop    edi
c0015819:	56                   	push   esi
c001581a:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c0015821:	e8 2a ae fe ff       	call   c0000650 <strcpy>
c0015826:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001582b:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c0015832:	8d 50 01             	lea    edx,[eax+0x1]
c0015835:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c001583b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001583f:	83 c4 0c             	add    esp,0xc
c0015842:	6a 01                	push   0x1
c0015844:	53                   	push   ebx
c0015845:	56                   	push   esi
c0015846:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c001584d:	e8 b5 f6 ff ff       	call   c0014f07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015852:	83 c4 10             	add    esp,0x10
c0015855:	89 c7                	mov    edi,eax
c0015857:	89 f8                	mov    eax,edi
c0015859:	83 f0 01             	xor    eax,0x1
c001585c:	84 c0                	test   al,al
c001585e:	74 18                	je     c0015878 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015860:	89 e8                	mov    eax,ebp
c0015862:	84 c0                	test   al,al
c0015864:	74 12                	je     c0015878 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015866:	83 ec 0c             	sub    esp,0xc
c0015869:	68 f1 29 02 c0       	push   0xc00229f1
c001586e:	e8 94 bd ff ff       	call   c0011607 <KePanic(char const*)>
c0015873:	83 c4 10             	add    esp,0x10
c0015876:	eb 06                	jmp    c001587e <Thr::loadDLL(char const*, bool)+0x1b3>
c0015878:	89 f8                	mov    eax,edi
c001587a:	84 c0                	test   al,al
c001587c:	75 10                	jne    c001588e <Thr::loadDLL(char const*, bool)+0x1c3>
c001587e:	83 ec 0c             	sub    esp,0xc
c0015881:	68 10 2a 02 c0       	push   0xc0022a10
c0015886:	e8 7c bd ff ff       	call   c0011607 <KePanic(char const*)>
c001588b:	83 c4 10             	add    esp,0x10
c001588e:	31 f6                	xor    esi,esi
c0015890:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015894:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015898:	05 ff 0f 00 00       	add    eax,0xfff
c001589d:	83 d2 00             	adc    edx,0x0
c00158a0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00158a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00158a8:	c1 ea 0c             	shr    edx,0xc
c00158ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00158af:	ba 00 00 00 00       	mov    edx,0x0
c00158b4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00158b8:	89 d0                	mov    eax,edx
c00158ba:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00158be:	73 32                	jae    c00158f2 <Thr::loadDLL(char const*, bool)+0x227>
c00158c0:	50                   	push   eax
c00158c1:	50                   	push   eax
c00158c2:	89 f0                	mov    eax,esi
c00158c4:	c1 e0 0c             	shl    eax,0xc
c00158c7:	01 d8                	add    eax,ebx
c00158c9:	50                   	push   eax
c00158ca:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00158d0:	e8 19 40 ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c00158d5:	83 c4 10             	add    esp,0x10
c00158d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00158da:	a8 60                	test   al,0x60
c00158dc:	75 11                	jne    c00158ef <Thr::loadDLL(char const*, bool)+0x224>
c00158de:	83 ec 0c             	sub    esp,0xc
c00158e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158e6:	50                   	push   eax
c00158e7:	e8 91 24 ff ff       	call   c0007d7d <Phys::freePage(unsigned long)>
c00158ec:	83 c4 10             	add    esp,0x10
c00158ef:	46                   	inc    esi
c00158f0:	eb 9e                	jmp    c0015890 <Thr::loadDLL(char const*, bool)+0x1c5>
c00158f2:	89 f8                	mov    eax,edi
c00158f4:	84 c0                	test   al,al
c00158f6:	b8 00 00 00 00       	mov    eax,0x0
c00158fb:	0f 44 d8             	cmove  ebx,eax
c00158fe:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015904:	89 d8                	mov    eax,ebx
c0015906:	5b                   	pop    ebx
c0015907:	5e                   	pop    esi
c0015908:	5f                   	pop    edi
c0015909:	5d                   	pop    ebp
c001590a:	c3                   	ret    

c001590b <Thr::executeDLL(unsigned long, void*)>:
c001590b:	56                   	push   esi
c001590c:	53                   	push   ebx
c001590d:	52                   	push   edx
c001590e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015912:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015916:	85 db                	test   ebx,ebx
c0015918:	75 10                	jne    c001592a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001591a:	83 ec 0c             	sub    esp,0xc
c001591d:	68 2c 2a 02 c0       	push   0xc0022a2c
c0015922:	e8 e0 bc ff ff       	call   c0011607 <KePanic(char const*)>
c0015927:	83 c4 10             	add    esp,0x10
c001592a:	50                   	push   eax
c001592b:	50                   	push   eax
c001592c:	53                   	push   ebx
c001592d:	68 56 2a 02 c0       	push   0xc0022a56
c0015932:	e8 d7 4f ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0015937:	89 d8                	mov    eax,ebx
c0015939:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001593d:	83 c4 14             	add    esp,0x14
c0015940:	5b                   	pop    ebx
c0015941:	5e                   	pop    esi
c0015942:	ff e0                	jmp    eax

c0015944 <userModeEntryPoint(void*)>:
c0015944:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015949:	83 e8 01             	sub    eax,0x1
c001594c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015951:	75 01                	jne    c0015954 <userModeEntryPoint(void*)+0x10>
c0015953:	fb                   	sti    
c0015954:	fb                   	sti    
c0015955:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001595a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001595d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015963:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015967:	e9 d3 a8 fe ff       	jmp    c000023f <goToUsermode>

c001596c <changeTSS>:
c001596c:	83 ec 14             	sub    esp,0x14
c001596f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015974:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015977:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001597c:	c1 e2 15             	shl    edx,0x15
c001597f:	29 d0                	sub    eax,edx
c0015981:	50                   	push   eax
c0015982:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0015987:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001598d:	05 7c 11 00 00       	add    eax,0x117c
c0015992:	50                   	push   eax
c0015993:	e8 a8 35 ff ff       	call   c0008f40 <TSS::setESP(unsigned long)>
c0015998:	83 c4 1c             	add    esp,0x1c
c001599b:	c3                   	ret    

c001599c <switchToThread(ThreadControlBlock*)>:
c001599c:	57                   	push   edi
c001599d:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00159a3:	56                   	push   esi
c00159a4:	53                   	push   ebx
c00159a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159a9:	85 c9                	test   ecx,ecx
c00159ab:	0f 85 8b 00 00 00    	jne    c0015a3c <switchToThread(ThreadControlBlock*)+0xa0>
c00159b1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00159b5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00159bb:	74 7b                	je     c0015a38 <switchToThread(ThreadControlBlock*)+0x9c>
c00159bd:	b8 00 04 00 00       	mov    eax,0x400
c00159c2:	29 d0                	sub    eax,edx
c00159c4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00159c7:	d1 f8                	sar    eax,1
c00159c9:	01 d0                	add    eax,edx
c00159cb:	90                   	nop
c00159cc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00159cf:	e8 04 28 00 00       	call   c00181d8 <HalQueryPerformanceCounter()>
c00159d4:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c00159d9:	89 c6                	mov    esi,eax
c00159db:	89 d7                	mov    edi,edx
c00159dd:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c00159e3:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c00159e8:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c00159ee:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c00159f4:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c00159fa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015a00:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015a06:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015a0c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015a0f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015a12:	01 c6                	add    esi,eax
c0015a14:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015a17:	11 d7                	adc    edi,edx
c0015a19:	83 ec 0c             	sub    esp,0xc
c0015a1c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015a1f:	53                   	push   ebx
c0015a20:	e8 52 a8 fe ff       	call   c0000277 <switchToThreadASM>
c0015a25:	0f 20 c0             	mov    eax,cr0
c0015a28:	83 c8 08             	or     eax,0x8
c0015a2b:	0f 22 c0             	mov    cr0,eax
c0015a2e:	83 c4 10             	add    esp,0x10
c0015a31:	5b                   	pop    ebx
c0015a32:	5e                   	pop    esi
c0015a33:	5f                   	pop    edi
c0015a34:	c3                   	ret    
c0015a35:	8d 76 00             	lea    esi,[esi+0x0]
c0015a38:	31 c0                	xor    eax,eax
c0015a3a:	eb 90                	jmp    c00159cc <switchToThread(ThreadControlBlock*)+0x30>
c0015a3c:	5b                   	pop    ebx
c0015a3d:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015a47:	5e                   	pop    esi
c0015a48:	5f                   	pop    edi
c0015a49:	c3                   	ret    
c0015a4a:	66 90                	xchg   ax,ax

c0015a4c <Process::addArgs(char**)>:
c0015a4c:	57                   	push   edi
c0015a4d:	56                   	push   esi
c0015a4e:	53                   	push   ebx
c0015a4f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015a53:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015a57:	85 f6                	test   esi,esi
c0015a59:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0015a63:	74 4f                	je     c0015ab4 <Process::addArgs(char**)+0x68>
c0015a65:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a67:	85 c0                	test   eax,eax
c0015a69:	74 49                	je     c0015ab4 <Process::addArgs(char**)+0x68>
c0015a6b:	31 db                	xor    ebx,ebx
c0015a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a70:	83 ec 0c             	sub    esp,0xc
c0015a73:	50                   	push   eax
c0015a74:	e8 07 ab fe ff       	call   c0000580 <strlen>
c0015a79:	83 c0 01             	add    eax,0x1
c0015a7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a7f:	e8 53 20 ff ff       	call   c0007ad7 <malloc>
c0015a84:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015a8b:	5a                   	pop    edx
c0015a8c:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015a8f:	83 c3 01             	add    ebx,0x1
c0015a92:	59                   	pop    ecx
c0015a93:	52                   	push   edx
c0015a94:	50                   	push   eax
c0015a95:	e8 b6 ab fe ff       	call   c0000650 <strcpy>
c0015a9a:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015aa0:	83 c4 10             	add    esp,0x10
c0015aa3:	83 c1 01             	add    ecx,0x1
c0015aa6:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015aac:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015aaf:	85 c0                	test   eax,eax
c0015ab1:	75 bd                	jne    c0015a70 <Process::addArgs(char**)+0x24>
c0015ab3:	90                   	nop
c0015ab4:	5b                   	pop    ebx
c0015ab5:	5e                   	pop    esi
c0015ab6:	5f                   	pop    edi
c0015ab7:	c3                   	ret    

c0015ab8 <Process::Process(char const*, Process*, char**)>:
c0015ab8:	56                   	push   esi
c0015ab9:	53                   	push   ebx
c0015aba:	83 ec 14             	sub    esp,0x14
c0015abd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ac1:	05 0c 02 00 00       	add    eax,0x20c
c0015ac6:	bb 07 00 00 00       	mov    ebx,0x7
c0015acb:	89 c6                	mov    esi,eax
c0015acd:	8d 76 00             	lea    esi,[esi+0x0]
c0015ad0:	85 db                	test   ebx,ebx
c0015ad2:	78 14                	js     c0015ae8 <Process::Process(char const*, Process*, char**)+0x30>
c0015ad4:	83 ec 0c             	sub    esp,0xc
c0015ad7:	56                   	push   esi
c0015ad8:	e8 2b a6 00 00       	call   c0020108 <ThreadControlBlock::ThreadControlBlock()>
c0015add:	83 c4 10             	add    esp,0x10
c0015ae0:	83 c6 5f             	add    esi,0x5f
c0015ae3:	83 eb 01             	sub    ebx,0x1
c0015ae6:	eb e8                	jmp    c0015ad0 <Process::Process(char const*, Process*, char**)+0x18>
c0015ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aec:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015afe:	83 ec 0c             	sub    esp,0xc
c0015b01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b05:	e8 f2 b8 ff ff       	call   c00113fc <KeNewProcessEnv(Process*)>
c0015b0a:	83 c4 10             	add    esp,0x10
c0015b0d:	89 c2                	mov    edx,eax
c0015b0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b13:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015b19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b1d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015b26:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c0015b2b:	8d 50 01             	lea    edx,[eax+0x1]
c0015b2e:	89 15 80 40 02 c0    	mov    DWORD PTR ds:0xc0024080,edx
c0015b34:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b38:	89 02                	mov    DWORD PTR [edx],eax
c0015b3a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015b42:	83 ec 0c             	sub    esp,0xc
c0015b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b49:	e8 89 1f ff ff       	call   c0007ad7 <malloc>
c0015b4e:	83 c4 10             	add    esp,0x10
c0015b51:	89 c3                	mov    ebx,eax
c0015b53:	83 ec 08             	sub    esp,0x8
c0015b56:	6a 00                	push   0x0
c0015b58:	53                   	push   ebx
c0015b59:	e8 f8 44 ff ff       	call   c000a056 <VAS::VAS(bool)>
c0015b5e:	83 c4 10             	add    esp,0x10
c0015b61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b65:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015b6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b6f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015b79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b81:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015b87:	e8 92 be ff ff       	call   c0011a1e <KeInitSignals()>
c0015b8c:	89 c2                	mov    edx,eax
c0015b8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b92:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b9c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ba2:	85 c0                	test   eax,eax
c0015ba4:	74 42                	je     c0015be8 <Process::Process(char const*, Process*, char**)+0x130>
c0015ba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015baa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bb0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015bb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bba:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bc4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015bd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd4:	05 0c 01 00 00       	add    eax,0x10c
c0015bd9:	83 ec 08             	sub    esp,0x8
c0015bdc:	52                   	push   edx
c0015bdd:	50                   	push   eax
c0015bde:	e8 6d aa fe ff       	call   c0000650 <strcpy>
c0015be3:	83 c4 10             	add    esp,0x10
c0015be6:	eb 64                	jmp    c0015c4c <Process::Process(char const*, Process*, char**)+0x194>
c0015be8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015bf0:	83 ec 0c             	sub    esp,0xc
c0015bf3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015bf7:	e8 db 1e ff ff       	call   c0007ad7 <malloc>
c0015bfc:	83 c4 10             	add    esp,0x10
c0015bff:	89 c3                	mov    ebx,eax
c0015c01:	83 ec 08             	sub    esp,0x8
c0015c04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c08:	53                   	push   ebx
c0015c09:	e8 62 30 ff ff       	call   c0008c70 <VgaText::VgaText(char const*)>
c0015c0e:	83 c4 10             	add    esp,0x10
c0015c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c15:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015c1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c25:	83 ec 0c             	sub    esp,0xc
c0015c28:	50                   	push   eax
c0015c29:	e8 f0 28 ff ff       	call   c000851e <addToTerminalCycle(VgaText*)>
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c35:	05 0c 01 00 00       	add    eax,0x10c
c0015c3a:	83 ec 08             	sub    esp,0x8
c0015c3d:	68 75 2a 02 c0       	push   0xc0022a75
c0015c42:	50                   	push   eax
c0015c43:	e8 08 aa fe ff       	call   c0000650 <strcpy>
c0015c48:	83 c4 10             	add    esp,0x10
c0015c4b:	90                   	nop
c0015c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c50:	83 c0 0c             	add    eax,0xc
c0015c53:	83 ec 08             	sub    esp,0x8
c0015c56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c5a:	50                   	push   eax
c0015c5b:	e8 f0 a9 fe ff       	call   c0000650 <strcpy>
c0015c60:	83 c4 10             	add    esp,0x10
c0015c63:	83 ec 08             	sub    esp,0x8
c0015c66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c6e:	e8 d9 fd ff ff       	call   c0015a4c <Process::addArgs(char**)>
c0015c73:	83 c4 10             	add    esp,0x10
c0015c76:	83 ec 08             	sub    esp,0x8
c0015c79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c81:	e8 42 ed ff ff       	call   c00149c8 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015c86:	83 c4 10             	add    esp,0x10
c0015c89:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015c8d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c91:	83 f0 01             	xor    eax,0x1
c0015c94:	88 c2                	mov    dl,al
c0015c96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c9a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015ca0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015ca5:	83 ec 04             	sub    esp,0x4
c0015ca8:	50                   	push   eax
c0015ca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cad:	68 cc 2a 02 c0       	push   0xc0022acc
c0015cb2:	e8 57 4c ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0015cb7:	83 c4 10             	add    esp,0x10
c0015cba:	90                   	nop
c0015cbb:	83 c4 14             	add    esp,0x14
c0015cbe:	5b                   	pop    ebx
c0015cbf:	5e                   	pop    esi
c0015cc0:	c3                   	ret    
c0015cc1:	90                   	nop
c0015cc2:	66 90                	xchg   ax,ax

c0015cc4 <Process::Process(bool, char const*, Process*, char**)>:
c0015cc4:	56                   	push   esi
c0015cc5:	53                   	push   ebx
c0015cc6:	83 ec 24             	sub    esp,0x24
c0015cc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ccd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015cd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cd5:	05 0c 02 00 00       	add    eax,0x20c
c0015cda:	bb 07 00 00 00       	mov    ebx,0x7
c0015cdf:	89 c6                	mov    esi,eax
c0015ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ce4:	85 db                	test   ebx,ebx
c0015ce6:	78 14                	js     c0015cfc <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015ce8:	83 ec 0c             	sub    esp,0xc
c0015ceb:	56                   	push   esi
c0015cec:	e8 17 a4 00 00       	call   c0020108 <ThreadControlBlock::ThreadControlBlock()>
c0015cf1:	83 c4 10             	add    esp,0x10
c0015cf4:	83 c6 5f             	add    esi,0x5f
c0015cf7:	83 eb 01             	sub    ebx,0x1
c0015cfa:	eb e8                	jmp    c0015ce4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015cfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d00:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015d07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d0b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015d12:	83 ec 0c             	sub    esp,0xc
c0015d15:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d19:	e8 de b6 ff ff       	call   c00113fc <KeNewProcessEnv(Process*)>
c0015d1e:	83 c4 10             	add    esp,0x10
c0015d21:	89 c2                	mov    edx,eax
c0015d23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d27:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015d2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d31:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015d3a:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c0015d3f:	8d 50 01             	lea    edx,[eax+0x1]
c0015d42:	89 15 80 40 02 c0    	mov    DWORD PTR ds:0xc0024080,edx
c0015d48:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015d4c:	89 02                	mov    DWORD PTR [edx],eax
c0015d4e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015d56:	83 ec 0c             	sub    esp,0xc
c0015d59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d5d:	e8 75 1d ff ff       	call   c0007ad7 <malloc>
c0015d62:	83 c4 10             	add    esp,0x10
c0015d65:	89 c3                	mov    ebx,eax
c0015d67:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015d6c:	83 ec 08             	sub    esp,0x8
c0015d6f:	50                   	push   eax
c0015d70:	53                   	push   ebx
c0015d71:	e8 e0 42 ff ff       	call   c000a056 <VAS::VAS(bool)>
c0015d76:	83 c4 10             	add    esp,0x10
c0015d79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d7d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015d83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d87:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015d91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d95:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d99:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015d9f:	e8 7a bc ff ff       	call   c0011a1e <KeInitSignals()>
c0015da4:	89 c2                	mov    edx,eax
c0015da6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015daa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015db0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015db4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015dba:	85 c0                	test   eax,eax
c0015dbc:	74 42                	je     c0015e00 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015dbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dc2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015dc8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015dce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dd2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015dd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ddc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015de2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015de8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dec:	05 0c 01 00 00       	add    eax,0x10c
c0015df1:	83 ec 08             	sub    esp,0x8
c0015df4:	52                   	push   edx
c0015df5:	50                   	push   eax
c0015df6:	e8 55 a8 fe ff       	call   c0000650 <strcpy>
c0015dfb:	83 c4 10             	add    esp,0x10
c0015dfe:	eb 64                	jmp    c0015e64 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015e00:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015e08:	83 ec 0c             	sub    esp,0xc
c0015e0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015e0f:	e8 c3 1c ff ff       	call   c0007ad7 <malloc>
c0015e14:	83 c4 10             	add    esp,0x10
c0015e17:	89 c3                	mov    ebx,eax
c0015e19:	83 ec 08             	sub    esp,0x8
c0015e1c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e20:	53                   	push   ebx
c0015e21:	e8 4a 2e ff ff       	call   c0008c70 <VgaText::VgaText(char const*)>
c0015e26:	83 c4 10             	add    esp,0x10
c0015e29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e2d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015e33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e3d:	83 ec 0c             	sub    esp,0xc
c0015e40:	50                   	push   eax
c0015e41:	e8 d8 26 ff ff       	call   c000851e <addToTerminalCycle(VgaText*)>
c0015e46:	83 c4 10             	add    esp,0x10
c0015e49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e4d:	05 0c 01 00 00       	add    eax,0x10c
c0015e52:	83 ec 08             	sub    esp,0x8
c0015e55:	68 75 2a 02 c0       	push   0xc0022a75
c0015e5a:	50                   	push   eax
c0015e5b:	e8 f0 a7 fe ff       	call   c0000650 <strcpy>
c0015e60:	83 c4 10             	add    esp,0x10
c0015e63:	90                   	nop
c0015e64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e68:	83 c0 0c             	add    eax,0xc
c0015e6b:	83 ec 08             	sub    esp,0x8
c0015e6e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e72:	50                   	push   eax
c0015e73:	e8 d8 a7 fe ff       	call   c0000650 <strcpy>
c0015e78:	83 c4 10             	add    esp,0x10
c0015e7b:	83 ec 08             	sub    esp,0x8
c0015e7e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e86:	e8 c1 fb ff ff       	call   c0015a4c <Process::addArgs(char**)>
c0015e8b:	83 c4 10             	add    esp,0x10
c0015e8e:	90                   	nop
c0015e8f:	83 c4 24             	add    esp,0x24
c0015e92:	5b                   	pop    ebx
c0015e93:	5e                   	pop    esi
c0015e94:	c3                   	ret    
c0015e95:	8d 76 00             	lea    esi,[esi+0x0]

c0015e98 <taskStartupFunction>:
c0015e98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e9d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015ea0:	c3                   	ret    
c0015ea1:	90                   	nop
c0015ea2:	66 90                	xchg   ax,ax

c0015ea4 <Semaphore::Semaphore(int)>:
c0015ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ea8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015eac:	89 10                	mov    DWORD PTR [eax],edx
c0015eae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eb2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015eb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ebd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ec8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015ecf:	90                   	nop
c0015ed0:	c3                   	ret    
c0015ed1:	90                   	nop
c0015ed2:	66 90                	xchg   ax,ax

c0015ed4 <Mutex::Mutex()>:
c0015ed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ed8:	6a 01                	push   0x1
c0015eda:	50                   	push   eax
c0015edb:	e8 c4 ff ff ff       	call   c0015ea4 <Semaphore::Semaphore(int)>
c0015ee0:	83 c4 08             	add    esp,0x8
c0015ee3:	90                   	nop
c0015ee4:	c3                   	ret    
c0015ee5:	90                   	nop
c0015ee6:	66 90                	xchg   ax,ax

c0015ee8 <Process::createThread(void (*)(void*), void*, int)>:
c0015ee8:	57                   	push   edi
c0015ee9:	31 c9                	xor    ecx,ecx
c0015eeb:	56                   	push   esi
c0015eec:	53                   	push   ebx
c0015eed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ef1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015ef8:	89 f2                	mov    edx,esi
c0015efa:	66 90                	xchg   ax,ax
c0015efc:	0f b7 c2             	movzx  eax,dx
c0015eff:	80 e2 01             	and    dl,0x1
c0015f02:	74 14                	je     c0015f18 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015f04:	d1 f8                	sar    eax,1
c0015f06:	83 c1 01             	add    ecx,0x1
c0015f09:	83 f9 10             	cmp    ecx,0x10
c0015f0c:	89 c2                	mov    edx,eax
c0015f0e:	75 ec                	jne    c0015efc <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015f10:	31 db                	xor    ebx,ebx
c0015f12:	89 d8                	mov    eax,ebx
c0015f14:	5b                   	pop    ebx
c0015f15:	5e                   	pop    esi
c0015f16:	5f                   	pop    edi
c0015f17:	c3                   	ret    
c0015f18:	b8 01 00 00 00       	mov    eax,0x1
c0015f1d:	d3 e0                	shl    eax,cl
c0015f1f:	09 c6                	or     esi,eax
c0015f21:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015f28:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015f2b:	c1 e0 05             	shl    eax,0x5
c0015f2e:	29 c8                	sub    eax,ecx
c0015f30:	01 d8                	add    eax,ebx
c0015f32:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015f39:	75 0d                	jne    c0015f48 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015f3b:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015f45:	8d 76 00             	lea    esi,[esi+0x0]
c0015f48:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f4e:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015f51:	83 ec 0c             	sub    esp,0xc
c0015f54:	c1 e6 05             	shl    esi,0x5
c0015f57:	29 ce                	sub    esi,ecx
c0015f59:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015f5c:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015f5f:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015f65:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015f6b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015f71:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015f78:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015f7e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015f82:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015f88:	89 ca                	mov    edx,ecx
c0015f8a:	f7 da                	neg    edx
c0015f8c:	c1 e2 15             	shl    edx,0x15
c0015f8f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015f95:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015f9b:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015f9f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015fa9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015faf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015fb3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015fb9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015fc3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015fcd:	68 00 01 00 00       	push   0x100
c0015fd2:	e8 00 1b ff ff       	call   c0007ad7 <malloc>
c0015fd7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015fda:	58                   	pop    eax
c0015fdb:	5a                   	pop    edx
c0015fdc:	53                   	push   ebx
c0015fdd:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fe2:	e8 b9 9e 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015fe7:	83 c4 10             	add    esp,0x10
c0015fea:	89 d8                	mov    eax,ebx
c0015fec:	5b                   	pop    ebx
c0015fed:	5e                   	pop    esi
c0015fee:	5f                   	pop    edi
c0015fef:	c3                   	ret    

c0015ff0 <Process::createUserThread()>:
c0015ff0:	83 ec 0c             	sub    esp,0xc
c0015ff3:	68 80 00 00 00       	push   0x80
c0015ff8:	6a 00                	push   0x0
c0015ffa:	68 44 59 01 c0       	push   0xc0015944
c0015fff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016003:	50                   	push   eax
c0016004:	e8 df fe ff ff       	call   c0015ee8 <Process::createThread(void (*)(void*), void*, int)>
c0016009:	83 c4 1c             	add    esp,0x1c
c001600c:	c3                   	ret    
c001600d:	8d 76 00             	lea    esi,[esi+0x0]

c0016010 <setupMultitasking(void (*)())>:
c0016010:	56                   	push   esi
c0016011:	53                   	push   ebx
c0016012:	83 ec 04             	sub    esp,0x4
c0016015:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016019:	eb 11                	jmp    c001602c <setupMultitasking(void (*)())+0x1c>
c001601b:	90                   	nop
c001601c:	83 ec 0c             	sub    esp,0xc
c001601f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016024:	e8 bb 9d 00 00       	call   c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016029:	83 c4 10             	add    esp,0x10
c001602c:	83 ec 0c             	sub    esp,0xc
c001602f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016034:	e8 87 9d 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016039:	83 c4 10             	add    esp,0x10
c001603c:	84 c0                	test   al,al
c001603e:	74 dc                	je     c001601c <setupMultitasking(void (*)())+0xc>
c0016040:	83 ec 0c             	sub    esp,0xc
c0016043:	68 24 07 00 00       	push   0x724
c0016048:	e8 8a 1a ff ff       	call   c0007ad7 <malloc>
c001604d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016054:	6a 00                	push   0x0
c0016056:	68 79 2a 02 c0       	push   0xc0022a79
c001605b:	6a 01                	push   0x1
c001605d:	50                   	push   eax
c001605e:	89 c3                	mov    ebx,eax
c0016060:	e8 5f fc ff ff       	call   c0015cc4 <Process::Process(bool, char const*, Process*, char**)>
c0016065:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001606b:	83 c4 14             	add    esp,0x14
c001606e:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0016074:	50                   	push   eax
c0016075:	e8 f9 26 ff ff       	call   c0008773 <setActiveTerminal(VgaText*)>
c001607a:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0016081:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001608b:	83 c8 01             	or     eax,0x1
c001608e:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0016095:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001609b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001609e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00160a8:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00160ae:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00160b8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00160be:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00160c8:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00160d2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00160d8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00160de:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00160e8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00160f2:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00160f9:	e8 d9 19 ff ff       	call   c0007ad7 <malloc>
c00160fe:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016104:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001610a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016110:	5a                   	pop    edx
c0016111:	59                   	pop    ecx
c0016112:	68 75 2a 02 c0       	push   0xc0022a75
c0016117:	50                   	push   eax
c0016118:	e8 33 a5 fe ff       	call   c0000650 <strcpy>
c001611d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016124:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016128:	83 c4 14             	add    esp,0x14
c001612b:	5b                   	pop    ebx
c001612c:	5e                   	pop    esi
c001612d:	e9 37 a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016132:	66 90                	xchg   ax,ax

c0016134 <schedule()>:
c0016134:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c001613a:	85 d2                	test   edx,edx
c001613c:	74 0e                	je     c001614c <schedule()+0x18>
c001613e:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016148:	c3                   	ret    
c0016149:	8d 76 00             	lea    esi,[esi+0x0]
c001614c:	53                   	push   ebx
c001614d:	83 ec 14             	sub    esp,0x14
c0016150:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016155:	e8 66 9c 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001615a:	83 c4 10             	add    esp,0x10
c001615d:	84 c0                	test   al,al
c001615f:	75 3f                	jne    c00161a0 <schedule()+0x6c>
c0016161:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016166:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016169:	83 fa 01             	cmp    edx,0x1
c001616c:	74 3a                	je     c00161a8 <schedule()+0x74>
c001616e:	66 90                	xchg   ax,ax
c0016170:	83 ec 0c             	sub    esp,0xc
c0016173:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016178:	e8 5f 9c 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001617d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016184:	89 c3                	mov    ebx,eax
c0016186:	e8 59 9c 00 00       	call   c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001618b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016192:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016195:	e8 02 f8 ff ff       	call   c001599c <switchToThread(ThreadControlBlock*)>
c001619a:	83 c4 10             	add    esp,0x10
c001619d:	8d 76 00             	lea    esi,[esi+0x0]
c00161a0:	83 c4 08             	add    esp,0x8
c00161a3:	5b                   	pop    ebx
c00161a4:	c3                   	ret    
c00161a5:	8d 76 00             	lea    esi,[esi+0x0]
c00161a8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00161af:	83 ec 08             	sub    esp,0x8
c00161b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161b7:	50                   	push   eax
c00161b8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161bd:	e8 de 9c 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00161c2:	83 c4 10             	add    esp,0x10
c00161c5:	eb a9                	jmp    c0016170 <schedule()+0x3c>
c00161c7:	90                   	nop

c00161c8 <Semaphore::tryAcquire()>:
c00161c8:	53                   	push   ebx
c00161c9:	83 ec 08             	sub    esp,0x8
c00161cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00161d0:	fa                   	cli    
c00161d1:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00161d7:	8d 42 01             	lea    eax,[edx+0x1]
c00161da:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161df:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00161e4:	8d 58 01             	lea    ebx,[eax+0x1]
c00161e7:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c00161ed:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00161f0:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00161f2:	7c 2c                	jl     c0016220 <Semaphore::tryAcquire()+0x58>
c00161f4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00161f9:	85 c0                	test   eax,eax
c00161fb:	75 0b                	jne    c0016208 <Semaphore::tryAcquire()+0x40>
c00161fd:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016202:	85 c0                	test   eax,eax
c0016204:	75 5a                	jne    c0016260 <Semaphore::tryAcquire()+0x98>
c0016206:	66 90                	xchg   ax,ax
c0016208:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001620e:	31 c0                	xor    eax,eax
c0016210:	85 d2                	test   edx,edx
c0016212:	75 04                	jne    c0016218 <Semaphore::tryAcquire()+0x50>
c0016214:	fb                   	sti    
c0016215:	8d 76 00             	lea    esi,[esi+0x0]
c0016218:	83 c4 08             	add    esp,0x8
c001621b:	5b                   	pop    ebx
c001621c:	c3                   	ret    
c001621d:	8d 76 00             	lea    esi,[esi+0x0]
c0016220:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016225:	83 c3 01             	add    ebx,0x1
c0016228:	85 c0                	test   eax,eax
c001622a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001622d:	75 21                	jne    c0016250 <Semaphore::tryAcquire()+0x88>
c001622f:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c0016235:	85 c9                	test   ecx,ecx
c0016237:	74 17                	je     c0016250 <Semaphore::tryAcquire()+0x88>
c0016239:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016243:	e8 ec fe ff ff       	call   c0016134 <schedule()>
c0016248:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001624d:	8d 50 ff             	lea    edx,[eax-0x1]
c0016250:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016256:	85 d2                	test   edx,edx
c0016258:	b0 01                	mov    al,0x1
c001625a:	75 bc                	jne    c0016218 <Semaphore::tryAcquire()+0x50>
c001625c:	eb b6                	jmp    c0016214 <Semaphore::tryAcquire()+0x4c>
c001625e:	66 90                	xchg   ax,ax
c0016260:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001626a:	e8 c5 fe ff ff       	call   c0016134 <schedule()>
c001626f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016274:	8d 50 ff             	lea    edx,[eax-0x1]
c0016277:	31 c0                	xor    eax,eax
c0016279:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001627f:	85 d2                	test   edx,edx
c0016281:	75 95                	jne    c0016218 <Semaphore::tryAcquire()+0x50>
c0016283:	eb 8f                	jmp    c0016214 <Semaphore::tryAcquire()+0x4c>
c0016285:	90                   	nop
c0016286:	66 90                	xchg   ax,ax

c0016288 <Semaphore::assertLocked(char const*)>:
c0016288:	83 ec 0c             	sub    esp,0xc
c001628b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001628f:	fa                   	cli    
c0016290:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016296:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001629b:	83 c1 01             	add    ecx,0x1
c001629e:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00162a4:	8d 48 01             	lea    ecx,[eax+0x1]
c00162a7:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00162ad:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00162af:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00162b2:	7c 28                	jl     c00162dc <Semaphore::assertLocked(char const*)+0x54>
c00162b4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00162b9:	85 c0                	test   eax,eax
c00162bb:	75 0b                	jne    c00162c8 <Semaphore::assertLocked(char const*)+0x40>
c00162bd:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00162c2:	85 c0                	test   eax,eax
c00162c4:	75 32                	jne    c00162f8 <Semaphore::assertLocked(char const*)+0x70>
c00162c6:	66 90                	xchg   ax,ax
c00162c8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162cd:	83 e8 01             	sub    eax,0x1
c00162d0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162d5:	75 01                	jne    c00162d8 <Semaphore::assertLocked(char const*)+0x50>
c00162d7:	fb                   	sti    
c00162d8:	83 c4 0c             	add    esp,0xc
c00162db:	c3                   	ret    
c00162dc:	83 ec 0c             	sub    esp,0xc
c00162df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162e3:	52                   	push   edx
c00162e4:	e8 1e b3 ff ff       	call   c0011607 <KePanic(char const*)>
c00162e9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162ee:	83 c4 10             	add    esp,0x10
c00162f1:	83 e8 01             	sub    eax,0x1
c00162f4:	eb be                	jmp    c00162b4 <Semaphore::assertLocked(char const*)+0x2c>
c00162f6:	66 90                	xchg   ax,ax
c00162f8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016302:	e8 2d fe ff ff       	call   c0016134 <schedule()>
c0016307:	eb bf                	jmp    c00162c8 <Semaphore::assertLocked(char const*)+0x40>
c0016309:	8d 76 00             	lea    esi,[esi+0x0]

c001630c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001630c:	83 ec 0c             	sub    esp,0xc
c001630f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016314:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016318:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001631b:	e8 14 fe ff ff       	call   c0016134 <schedule()>
c0016320:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016325:	83 e8 01             	sub    eax,0x1
c0016328:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001632d:	75 01                	jne    c0016330 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001632f:	fb                   	sti    
c0016330:	83 c4 0c             	add    esp,0xc
c0016333:	c3                   	ret    

c0016334 <blockTask(TaskState)>:
c0016334:	83 ec 0c             	sub    esp,0xc
c0016337:	fa                   	cli    
c0016338:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001633d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016341:	83 c0 01             	add    eax,0x1
c0016344:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001634e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016351:	e8 de fd ff ff       	call   c0016134 <schedule()>
c0016356:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001635b:	83 e8 01             	sub    eax,0x1
c001635e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016363:	75 03                	jne    c0016368 <blockTask(TaskState)+0x34>
c0016365:	fb                   	sti    
c0016366:	66 90                	xchg   ax,ax
c0016368:	83 c4 0c             	add    esp,0xc
c001636b:	c3                   	ret    

c001636c <waitTask(int, int*, int)>:
c001636c:	83 ec 18             	sub    esp,0x18
c001636f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016374:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016378:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001637b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001637f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016384:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016387:	6a 07                	push   0x7
c0016389:	e8 a6 ff ff ff       	call   c0016334 <blockTask(TaskState)>
c001638e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016393:	83 c4 10             	add    esp,0x10
c0016396:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016399:	85 d2                	test   edx,edx
c001639b:	74 0b                	je     c00163a8 <waitTask(int, int*, int)+0x3c>
c001639d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00163a0:	89 02                	mov    DWORD PTR [edx],eax
c00163a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163a7:	90                   	nop
c00163a8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00163ab:	83 c4 0c             	add    esp,0xc
c00163ae:	c3                   	ret    
c00163af:	90                   	nop

c00163b0 <milliTenthSleepUntil(unsigned int)>:
c00163b0:	83 ec 0c             	sub    esp,0xc
c00163b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b7:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c00163bd:	76 05                	jbe    c00163c4 <milliTenthSleepUntil(unsigned int)+0x14>
c00163bf:	90                   	nop
c00163c0:	83 c4 0c             	add    esp,0xc
c00163c3:	c3                   	ret    
c00163c4:	fa                   	cli    
c00163c5:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00163cb:	83 ec 08             	sub    esp,0x8
c00163ce:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00163d4:	83 c2 01             	add    edx,0x1
c00163d7:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00163dd:	83 c1 01             	add    ecx,0x1
c00163e0:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00163e6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163ec:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00163ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163f4:	50                   	push   eax
c00163f5:	68 d8 c6 02 c0       	push   0xc002c6d8
c00163fa:	e8 a1 9a 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163ff:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016406:	e8 29 ff ff ff       	call   c0016334 <blockTask(TaskState)>
c001640b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016410:	83 c4 10             	add    esp,0x10
c0016413:	83 e8 01             	sub    eax,0x1
c0016416:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001641b:	85 c0                	test   eax,eax
c001641d:	75 09                	jne    c0016428 <milliTenthSleepUntil(unsigned int)+0x78>
c001641f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016424:	85 c0                	test   eax,eax
c0016426:	75 14                	jne    c001643c <milliTenthSleepUntil(unsigned int)+0x8c>
c0016428:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001642d:	83 e8 01             	sub    eax,0x1
c0016430:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016435:	75 89                	jne    c00163c0 <milliTenthSleepUntil(unsigned int)+0x10>
c0016437:	fb                   	sti    
c0016438:	83 c4 0c             	add    esp,0xc
c001643b:	c3                   	ret    
c001643c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016446:	e8 e9 fc ff ff       	call   c0016134 <schedule()>
c001644b:	eb db                	jmp    c0016428 <milliTenthSleepUntil(unsigned int)+0x78>
c001644d:	8d 76 00             	lea    esi,[esi+0x0]

c0016450 <milliTenthSleep(unsigned int)>:
c0016450:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016454:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016459:	01 c2                	add    edx,eax
c001645b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001645f:	e9 4c ff ff ff       	jmp    c00163b0 <milliTenthSleepUntil(unsigned int)>

c0016464 <sleep(unsigned int)>:
c0016464:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c001646c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016470:	eb de                	jmp    c0016450 <milliTenthSleep(unsigned int)>
c0016472:	66 90                	xchg   ax,ax

c0016474 <Semaphore::acquire()>:
c0016474:	83 ec 0c             	sub    esp,0xc
c0016477:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001647b:	fa                   	cli    
c001647c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016481:	83 c0 01             	add    eax,0x1
c0016484:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016489:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001648e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016491:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016497:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001649a:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001649c:	7d 2e                	jge    c00164cc <Semaphore::acquire()+0x58>
c001649e:	83 c1 01             	add    ecx,0x1
c00164a1:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00164a4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00164a9:	85 c0                	test   eax,eax
c00164ab:	75 0b                	jne    c00164b8 <Semaphore::acquire()+0x44>
c00164ad:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00164b2:	85 c0                	test   eax,eax
c00164b4:	75 66                	jne    c001651c <Semaphore::acquire()+0xa8>
c00164b6:	66 90                	xchg   ax,ax
c00164b8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164bd:	83 e8 01             	sub    eax,0x1
c00164c0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164c5:	75 01                	jne    c00164c8 <Semaphore::acquire()+0x54>
c00164c7:	fb                   	sti    
c00164c8:	83 c4 0c             	add    esp,0xc
c00164cb:	c3                   	ret    
c00164cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164d1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00164d8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00164db:	85 c9                	test   ecx,ecx
c00164dd:	74 51                	je     c0016530 <Semaphore::acquire()+0xbc>
c00164df:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00164e2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00164e8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00164eb:	90                   	nop
c00164ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164f1:	83 ec 0c             	sub    esp,0xc
c00164f4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00164f7:	68 f8 2a 02 c0       	push   0xc0022af8
c00164fc:	e8 0d 44 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0016501:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016508:	e8 27 fe ff ff       	call   c0016334 <blockTask(TaskState)>
c001650d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016512:	83 c4 10             	add    esp,0x10
c0016515:	83 e8 01             	sub    eax,0x1
c0016518:	eb 8a                	jmp    c00164a4 <Semaphore::acquire()+0x30>
c001651a:	66 90                	xchg   ax,ax
c001651c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016526:	e8 09 fc ff ff       	call   c0016134 <schedule()>
c001652b:	eb 8b                	jmp    c00164b8 <Semaphore::acquire()+0x44>
c001652d:	8d 76 00             	lea    esi,[esi+0x0]
c0016530:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016535:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016538:	eb b2                	jmp    c00164ec <Semaphore::acquire()+0x78>
c001653a:	66 90                	xchg   ax,ax

c001653c <taskReturned>:
c001653c:	83 ec 18             	sub    esp,0x18
c001653f:	68 18 2b 02 c0       	push   0xc0022b18
c0016544:	e8 be b0 ff ff       	call   c0011607 <KePanic(char const*)>
c0016549:	83 c4 10             	add    esp,0x10
c001654c:	83 ec 0c             	sub    esp,0xc
c001654f:	6a 02                	push   0x2
c0016551:	e8 de fd ff ff       	call   c0016334 <blockTask(TaskState)>
c0016556:	fa                   	cli    
c0016557:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001655c:	83 c0 01             	add    eax,0x1
c001655f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016564:	e8 cb fb ff ff       	call   c0016134 <schedule()>
c0016569:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001656e:	83 c4 10             	add    esp,0x10
c0016571:	83 e8 01             	sub    eax,0x1
c0016574:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016579:	85 c0                	test   eax,eax
c001657b:	75 cf                	jne    c001654c <taskReturned+0x10>
c001657d:	fb                   	sti    
c001657e:	eb cc                	jmp    c001654c <taskReturned+0x10>

c0016580 <Thr::processFromPID(int)>:
c0016580:	57                   	push   edi
c0016581:	56                   	push   esi
c0016582:	53                   	push   ebx
c0016583:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016587:	fa                   	cli    
c0016588:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001658e:	83 ec 0c             	sub    esp,0xc
c0016591:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016596:	83 c1 01             	add    ecx,0x1
c0016599:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001659f:	e8 38 98 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165a4:	83 c4 10             	add    esp,0x10
c00165a7:	89 c7                	mov    edi,eax
c00165a9:	eb 15                	jmp    c00165c0 <Thr::processFromPID(int)+0x40>
c00165ab:	90                   	nop
c00165ac:	83 ec 0c             	sub    esp,0xc
c00165af:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165b4:	e8 23 98 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165b9:	83 c4 10             	add    esp,0x10
c00165bc:	39 f8                	cmp    eax,edi
c00165be:	74 50                	je     c0016610 <Thr::processFromPID(int)+0x90>
c00165c0:	83 ec 0c             	sub    esp,0xc
c00165c3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165c8:	e8 0f 98 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165cd:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00165d4:	89 c3                	mov    ebx,eax
c00165d6:	e8 09 98 00 00       	call   c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00165db:	58                   	pop    eax
c00165dc:	5a                   	pop    edx
c00165dd:	53                   	push   ebx
c00165de:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165e3:	e8 b8 98 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165e8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	39 30                	cmp    DWORD PTR [eax],esi
c00165f0:	75 ba                	jne    c00165ac <Thr::processFromPID(int)+0x2c>
c00165f2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165f7:	83 e8 01             	sub    eax,0x1
c00165fa:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165ff:	74 0b                	je     c001660c <Thr::processFromPID(int)+0x8c>
c0016601:	8d 76 00             	lea    esi,[esi+0x0]
c0016604:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016607:	90                   	nop
c0016608:	5b                   	pop    ebx
c0016609:	5e                   	pop    esi
c001660a:	5f                   	pop    edi
c001660b:	c3                   	ret    
c001660c:	fb                   	sti    
c001660d:	eb f5                	jmp    c0016604 <Thr::processFromPID(int)+0x84>
c001660f:	90                   	nop
c0016610:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016615:	8d 50 ff             	lea    edx,[eax-0x1]
c0016618:	31 c0                	xor    eax,eax
c001661a:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016620:	85 d2                	test   edx,edx
c0016622:	75 e4                	jne    c0016608 <Thr::processFromPID(int)+0x88>
c0016624:	fb                   	sti    
c0016625:	5b                   	pop    ebx
c0016626:	5e                   	pop    esi
c0016627:	5f                   	pop    edi
c0016628:	c3                   	ret    
c0016629:	8d 76 00             	lea    esi,[esi+0x0]

c001662c <unblockTask(ThreadControlBlock*)>:
c001662c:	53                   	push   ebx
c001662d:	83 ec 08             	sub    esp,0x8
c0016630:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016634:	fa                   	cli    
c0016635:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001663a:	83 c0 01             	add    eax,0x1
c001663d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016642:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016645:	85 c0                	test   eax,eax
c0016647:	74 67                	je     c00166b0 <unblockTask(ThreadControlBlock*)+0x84>
c0016649:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001664c:	83 f8 01             	cmp    eax,0x1
c001664f:	74 37                	je     c0016688 <unblockTask(ThreadControlBlock*)+0x5c>
c0016651:	83 ec 0c             	sub    esp,0xc
c0016654:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016659:	e8 7e 97 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001665e:	83 c4 10             	add    esp,0x10
c0016661:	85 c0                	test   eax,eax
c0016663:	75 1b                	jne    c0016680 <unblockTask(ThreadControlBlock*)+0x54>
c0016665:	eb 5d                	jmp    c00166c4 <unblockTask(ThreadControlBlock*)+0x98>
c0016667:	90                   	nop
c0016668:	83 ec 08             	sub    esp,0x8
c001666b:	50                   	push   eax
c001666c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016671:	e8 86 9a 00 00       	call   c00200fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016676:	83 c4 10             	add    esp,0x10
c0016679:	85 c0                	test   eax,eax
c001667b:	74 47                	je     c00166c4 <unblockTask(ThreadControlBlock*)+0x98>
c001667d:	8d 76 00             	lea    esi,[esi+0x0]
c0016680:	39 c3                	cmp    ebx,eax
c0016682:	75 e4                	jne    c0016668 <unblockTask(ThreadControlBlock*)+0x3c>
c0016684:	eb 12                	jmp    c0016698 <unblockTask(ThreadControlBlock*)+0x6c>
c0016686:	66 90                	xchg   ax,ax
c0016688:	83 ec 0c             	sub    esp,0xc
c001668b:	68 97 2a 02 c0       	push   0xc0022a97
c0016690:	e8 79 42 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0016695:	83 c4 10             	add    esp,0x10
c0016698:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001669d:	83 e8 01             	sub    eax,0x1
c00166a0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166a5:	75 01                	jne    c00166a8 <unblockTask(ThreadControlBlock*)+0x7c>
c00166a7:	fb                   	sti    
c00166a8:	83 c4 08             	add    esp,0x8
c00166ab:	5b                   	pop    ebx
c00166ac:	c3                   	ret    
c00166ad:	8d 76 00             	lea    esi,[esi+0x0]
c00166b0:	83 ec 0c             	sub    esp,0xc
c00166b3:	68 80 2a 02 c0       	push   0xc0022a80
c00166b8:	e8 51 42 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00166bd:	83 c4 10             	add    esp,0x10
c00166c0:	eb d6                	jmp    c0016698 <unblockTask(ThreadControlBlock*)+0x6c>
c00166c2:	66 90                	xchg   ax,ax
c00166c4:	83 ec 08             	sub    esp,0x8
c00166c7:	53                   	push   ebx
c00166c8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166cd:	e8 ce 97 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166d2:	83 c4 10             	add    esp,0x10
c00166d5:	eb c1                	jmp    c0016698 <unblockTask(ThreadControlBlock*)+0x6c>
c00166d7:	90                   	nop

c00166d8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00166d8:	55                   	push   ebp
c00166d9:	57                   	push   edi
c00166da:	56                   	push   esi
c00166db:	53                   	push   ebx
c00166dc:	83 ec 1c             	sub    esp,0x1c
c00166df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00166e3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166e6:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00166ec:	85 ed                	test   ebp,ebp
c00166ee:	7e 28                	jle    c0016718 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00166f0:	31 f6                	xor    esi,esi
c00166f2:	66 90                	xchg   ax,ax
c00166f4:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00166fb:	83 ec 0c             	sub    esp,0xc
c00166fe:	83 c6 01             	add    esi,0x1
c0016701:	57                   	push   edi
c0016702:	e8 e0 13 ff ff       	call   c0007ae7 <free>
c0016707:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001670a:	83 c4 10             	add    esp,0x10
c001670d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016713:	7f df                	jg     c00166f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016715:	8d 76 00             	lea    esi,[esi+0x0]
c0016718:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016722:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016727:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001672a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001672d:	d3 c0                	rol    eax,cl
c001672f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016736:	21 c8                	and    eax,ecx
c0016738:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001673f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016742:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001674a:	89 f7                	mov    edi,esi
c001674c:	0f 85 72 01 00 00    	jne    c00168c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016752:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016758:	85 ed                	test   ebp,ebp
c001675a:	74 1c                	je     c0016778 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001675c:	83 ec 0c             	sub    esp,0xc
c001675f:	55                   	push   ebp
c0016760:	e8 b3 ab ff ff       	call   c0011318 <EnvVarContainer::~EnvVarContainer()>
c0016765:	59                   	pop    ecx
c0016766:	5e                   	pop    esi
c0016767:	6a 0c                	push   0xc
c0016769:	55                   	push   ebp
c001676a:	e8 a1 40 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c001676f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016772:	83 c4 10             	add    esp,0x10
c0016775:	89 f7                	mov    edi,esi
c0016777:	90                   	nop
c0016778:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001677e:	85 c0                	test   eax,eax
c0016780:	0f 84 b2 00 00 00    	je     c0016838 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016786:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016789:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001678d:	31 c9                	xor    ecx,ecx
c001678f:	eb 17                	jmp    c00167a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016791:	8d 76 00             	lea    esi,[esi+0x0]
c0016794:	83 c1 01             	add    ecx,0x1
c0016797:	83 f9 10             	cmp    ecx,0x10
c001679a:	0f 84 98 00 00 00    	je     c0016838 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00167a0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167a6:	66 90                	xchg   ax,ax
c00167a8:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00167af:	d3 fa                	sar    edx,cl
c00167b1:	80 e2 01             	and    dl,0x1
c00167b4:	74 de                	je     c0016794 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167b6:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00167b9:	c1 e2 05             	shl    edx,0x5
c00167bc:	29 ca                	sub    edx,ecx
c00167be:	01 d0                	add    eax,edx
c00167c0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00167c6:	83 fd 07             	cmp    ebp,0x7
c00167c9:	75 c9                	jne    c0016794 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167cb:	05 40 02 00 00       	add    eax,0x240
c00167d0:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00167d3:	83 fd ff             	cmp    ebp,0xffffffff
c00167d6:	0f 8c f0 00 00 00    	jl     c00168cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00167dc:	0f 84 ae 01 00 00    	je     c0016990 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00167e2:	85 ed                	test   ebp,ebp
c00167e4:	0f 84 92 01 00 00    	je     c001697c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00167ea:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00167ec:	75 a6                	jne    c0016794 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167f2:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167f8:	01 d0                	add    eax,edx
c00167fa:	66 90                	xchg   ax,ax
c00167fc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016800:	83 ec 0c             	sub    esp,0xc
c0016803:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016809:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001680c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016812:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016819:	50                   	push   eax
c001681a:	e8 0d fe ff ff       	call   c001662c <unblockTask(ThreadControlBlock*)>
c001681f:	83 c4 10             	add    esp,0x10
c0016822:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016825:	89 f7                	mov    edi,esi
c0016827:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001682b:	83 c1 01             	add    ecx,0x1
c001682e:	83 f9 10             	cmp    ecx,0x10
c0016831:	0f 85 69 ff ff ff    	jne    c00167a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016837:	90                   	nop
c0016838:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001683e:	85 c0                	test   eax,eax
c0016840:	74 62                	je     c00168a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016842:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016848:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001684e:	74 54                	je     c00168a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016850:	83 ec 0c             	sub    esp,0xc
c0016853:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016858:	e8 7f 95 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001685d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016864:	89 c7                	mov    edi,eax
c0016866:	e8 55 95 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001686b:	83 c4 10             	add    esp,0x10
c001686e:	84 c0                	test   al,al
c0016870:	0f 84 ce 00 00 00    	je     c0016944 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016876:	66 90                	xchg   ax,ax
c0016878:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001687b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016881:	85 d2                	test   edx,edx
c0016883:	74 0f                	je     c0016894 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016885:	8b 02                	mov    eax,DWORD PTR [edx]
c0016887:	83 ec 0c             	sub    esp,0xc
c001688a:	52                   	push   edx
c001688b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001688e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016891:	83 c4 10             	add    esp,0x10
c0016894:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001689e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00168a1:	8d 76 00             	lea    esi,[esi+0x0]
c00168a4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00168aa:	85 db                	test   ebx,ebx
c00168ac:	74 16                	je     c00168c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00168ae:	83 ec 0c             	sub    esp,0xc
c00168b1:	53                   	push   ebx
c00168b2:	e8 dd 32 ff ff       	call   c0009b94 <VAS::~VAS()>
c00168b7:	58                   	pop    eax
c00168b8:	5a                   	pop    edx
c00168b9:	6a 14                	push   0x14
c00168bb:	53                   	push   ebx
c00168bc:	e8 4f 3f ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c00168c1:	83 c4 10             	add    esp,0x10
c00168c4:	83 c4 1c             	add    esp,0x1c
c00168c7:	5b                   	pop    ebx
c00168c8:	5e                   	pop    esi
c00168c9:	5f                   	pop    edi
c00168ca:	5d                   	pop    ebp
c00168cb:	c3                   	ret    
c00168cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168d0:	83 ec 0c             	sub    esp,0xc
c00168d3:	68 4c 2b 02 c0       	push   0xc0022b4c
c00168d8:	e8 2a ad ff ff       	call   c0011607 <KePanic(char const*)>
c00168dd:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00168e0:	83 c4 10             	add    esp,0x10
c00168e3:	89 f7                	mov    edi,esi
c00168e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168e9:	e9 a6 fe ff ff       	jmp    c0016794 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00168ee:	66 90                	xchg   ax,ax
c00168f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168f6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00168fc:	75 1e                	jne    c001691c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168fe:	83 ec 0c             	sub    esp,0xc
c0016901:	68 b4 2b 02 c0       	push   0xc0022bb4
c0016906:	e8 03 40 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001690b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016912:	e8 1d fa ff ff       	call   c0016334 <blockTask(TaskState)>
c0016917:	83 c4 10             	add    esp,0x10
c001691a:	66 90                	xchg   ax,ax
c001691c:	83 ec 08             	sub    esp,0x8
c001691f:	56                   	push   esi
c0016920:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016925:	e8 76 95 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001692a:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016931:	e8 a6 94 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016936:	83 c4 10             	add    esp,0x10
c0016939:	39 f8                	cmp    eax,edi
c001693b:	0f 84 37 ff ff ff    	je     c0016878 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016941:	8d 76 00             	lea    esi,[esi+0x0]
c0016944:	83 ec 0c             	sub    esp,0xc
c0016947:	68 e4 c6 02 c0       	push   0xc002c6e4
c001694c:	e8 8b 94 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016951:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016958:	89 c6                	mov    esi,eax
c001695a:	e8 85 94 00 00       	call   c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001695f:	83 c4 10             	add    esp,0x10
c0016962:	39 f3                	cmp    ebx,esi
c0016964:	74 b6                	je     c001691c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016966:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016969:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001696c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016972:	75 a8                	jne    c001691c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016974:	e9 77 ff ff ff       	jmp    c00168f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016979:	8d 76 00             	lea    esi,[esi+0x0]
c001697c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016980:	83 ec 0c             	sub    esp,0xc
c0016983:	68 80 2b 02 c0       	push   0xc0022b80
c0016988:	e9 4b ff ff ff       	jmp    c00168d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c001698d:	8d 76 00             	lea    esi,[esi+0x0]
c0016990:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016994:	8b 36                	mov    esi,DWORD PTR [esi]
c0016996:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016999:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001699c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00169a2:	01 d7                	add    edi,edx
c00169a4:	89 f8                	mov    eax,edi
c00169a6:	e9 51 fe ff ff       	jmp    c00167fc <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00169ab:	90                   	nop

c00169ac <cleanerTaskFunction(void*)>:
c00169ac:	53                   	push   ebx
c00169ad:	83 ec 08             	sub    esp,0x8
c00169b0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169b5:	83 e8 01             	sub    eax,0x1
c00169b8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169bd:	75 01                	jne    c00169c0 <cleanerTaskFunction(void*)+0x14>
c00169bf:	fb                   	sti    
c00169c0:	fa                   	cli    
c00169c1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169c6:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c00169cd:	8d 50 01             	lea    edx,[eax+0x1]
c00169d0:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169d6:	0f 84 c4 00 00 00    	je     c0016aa0 <cleanerTaskFunction(void*)+0xf4>
c00169dc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169e1:	85 c0                	test   eax,eax
c00169e3:	75 03                	jne    c00169e8 <cleanerTaskFunction(void*)+0x3c>
c00169e5:	fb                   	sti    
c00169e6:	66 90                	xchg   ax,ax
c00169e8:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c00169ef:	fa                   	cli    
c00169f0:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00169f6:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00169fc:	83 c2 01             	add    edx,0x1
c00169ff:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a05:	83 c1 01             	add    ecx,0x1
c0016a08:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a0e:	fa                   	cli    
c0016a0f:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016a15:	83 c3 01             	add    ebx,0x1
c0016a18:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016a1e:	eb 28                	jmp    c0016a48 <cleanerTaskFunction(void*)+0x9c>
c0016a20:	83 ec 0c             	sub    esp,0xc
c0016a23:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a28:	e8 af 93 00 00       	call   c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a2d:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016a34:	89 c3                	mov    ebx,eax
c0016a36:	e8 a9 93 00 00       	call   c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a3e:	e8 95 fc ff ff       	call   c00166d8 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016a43:	83 c4 10             	add    esp,0x10
c0016a46:	66 90                	xchg   ax,ax
c0016a48:	83 ec 0c             	sub    esp,0xc
c0016a4b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a50:	e8 6b 93 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a55:	83 c4 10             	add    esp,0x10
c0016a58:	84 c0                	test   al,al
c0016a5a:	74 c4                	je     c0016a20 <cleanerTaskFunction(void*)+0x74>
c0016a5c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a61:	83 e8 01             	sub    eax,0x1
c0016a64:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a69:	75 01                	jne    c0016a6c <cleanerTaskFunction(void*)+0xc0>
c0016a6b:	fb                   	sti    
c0016a6c:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a71:	83 e8 01             	sub    eax,0x1
c0016a74:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a79:	0f 85 31 ff ff ff    	jne    c00169b0 <cleanerTaskFunction(void*)+0x4>
c0016a7f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016a84:	85 c0                	test   eax,eax
c0016a86:	0f 84 24 ff ff ff    	je     c00169b0 <cleanerTaskFunction(void*)+0x4>
c0016a8c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a96:	e8 99 f6 ff ff       	call   c0016134 <schedule()>
c0016a9b:	e9 10 ff ff ff       	jmp    c00169b0 <cleanerTaskFunction(void*)+0x4>
c0016aa0:	83 ec 0c             	sub    esp,0xc
c0016aa3:	6a 02                	push   0x2
c0016aa5:	e8 62 f8 ff ff       	call   c001630c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016aaa:	83 c4 10             	add    esp,0x10
c0016aad:	e9 36 ff ff ff       	jmp    c00169e8 <cleanerTaskFunction(void*)+0x3c>
c0016ab2:	66 90                	xchg   ax,ax

c0016ab4 <terminateTask(int)>:
c0016ab4:	83 ec 14             	sub    esp,0x14
c0016ab7:	fa                   	cli    
c0016ab8:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016abe:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016ac4:	83 c2 01             	add    edx,0x1
c0016ac7:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016acd:	83 c1 01             	add    ecx,0x1
c0016ad0:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016ad6:	fa                   	cli    
c0016ad7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016adc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ae0:	83 c0 01             	add    eax,0x1
c0016ae3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ae8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aed:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016af0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016af5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016af8:	50                   	push   eax
c0016af9:	68 cc c6 02 c0       	push   0xc002c6cc
c0016afe:	e8 9d 93 00 00       	call   c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b08:	83 c4 10             	add    esp,0x10
c0016b0b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016b12:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016b17:	85 c0                	test   eax,eax
c0016b19:	74 65                	je     c0016b80 <terminateTask(int)+0xcc>
c0016b1b:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016b22:	83 ec 0c             	sub    esp,0xc
c0016b25:	50                   	push   eax
c0016b26:	e8 01 fb ff ff       	call   c001662c <unblockTask(ThreadControlBlock*)>
c0016b2b:	83 c4 10             	add    esp,0x10
c0016b2e:	66 90                	xchg   ax,ax
c0016b30:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b35:	83 e8 01             	sub    eax,0x1
c0016b38:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b3d:	75 01                	jne    c0016b40 <terminateTask(int)+0x8c>
c0016b3f:	fb                   	sti    
c0016b40:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b45:	83 e8 01             	sub    eax,0x1
c0016b48:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b4d:	75 09                	jne    c0016b58 <terminateTask(int)+0xa4>
c0016b4f:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016b56:	75 3c                	jne    c0016b94 <terminateTask(int)+0xe0>
c0016b58:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b5d:	83 e8 01             	sub    eax,0x1
c0016b60:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b65:	75 01                	jne    c0016b68 <terminateTask(int)+0xb4>
c0016b67:	fb                   	sti    
c0016b68:	fa                   	cli    
c0016b69:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b6e:	83 c0 01             	add    eax,0x1
c0016b71:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b76:	66 90                	xchg   ax,ax
c0016b78:	e8 b7 f5 ff ff       	call   c0016134 <schedule()>
c0016b7d:	eb d9                	jmp    c0016b58 <terminateTask(int)+0xa4>
c0016b7f:	90                   	nop
c0016b80:	83 ec 0c             	sub    esp,0xc
c0016b83:	68 ae 2a 02 c0       	push   0xc0022aae
c0016b88:	e8 81 3d ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0016b8d:	83 c4 10             	add    esp,0x10
c0016b90:	eb 9e                	jmp    c0016b30 <terminateTask(int)+0x7c>
c0016b92:	66 90                	xchg   ax,ax
c0016b94:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b9e:	eb d8                	jmp    c0016b78 <terminateTask(int)+0xc4>

c0016ba0 <Thr::terminateFromIRQ(int)>:
c0016ba0:	83 ec 18             	sub    esp,0x18
c0016ba3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ba7:	50                   	push   eax
c0016ba8:	e8 07 ff ff ff       	call   c0016ab4 <terminateTask(int)>
c0016bad:	90                   	nop
c0016bae:	66 90                	xchg   ax,ax

c0016bb0 <Semaphore::release()>:
c0016bb0:	83 ec 0c             	sub    esp,0xc
c0016bb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016bb7:	fa                   	cli    
c0016bb8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bbd:	83 c0 01             	add    eax,0x1
c0016bc0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bc5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016bca:	8d 48 01             	lea    ecx,[eax+0x1]
c0016bcd:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016bd3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016bd6:	85 c9                	test   ecx,ecx
c0016bd8:	74 42                	je     c0016c1c <Semaphore::release()+0x6c>
c0016bda:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016bdd:	83 ec 0c             	sub    esp,0xc
c0016be0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016be3:	51                   	push   ecx
c0016be4:	e8 43 fa ff ff       	call   c001662c <unblockTask(ThreadControlBlock*)>
c0016be9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016bee:	83 c4 10             	add    esp,0x10
c0016bf1:	83 e8 01             	sub    eax,0x1
c0016bf4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016bf9:	85 c0                	test   eax,eax
c0016bfb:	75 0b                	jne    c0016c08 <Semaphore::release()+0x58>
c0016bfd:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016c02:	85 c0                	test   eax,eax
c0016c04:	75 22                	jne    c0016c28 <Semaphore::release()+0x78>
c0016c06:	66 90                	xchg   ax,ax
c0016c08:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c0d:	83 e8 01             	sub    eax,0x1
c0016c10:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c15:	75 01                	jne    c0016c18 <Semaphore::release()+0x68>
c0016c17:	fb                   	sti    
c0016c18:	83 c4 0c             	add    esp,0xc
c0016c1b:	c3                   	ret    
c0016c1c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016c1f:	83 e9 01             	sub    ecx,0x1
c0016c22:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016c25:	eb cd                	jmp    c0016bf4 <Semaphore::release()+0x44>
c0016c27:	90                   	nop
c0016c28:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c32:	e8 fd f4 ff ff       	call   c0016134 <schedule()>
c0016c37:	eb cf                	jmp    c0016c08 <Semaphore::release()+0x58>
c0016c39:	8d 76 00             	lea    esi,[esi+0x0]

c0016c3c <__static_initialization_and_destruction_0(int, int)>:
c0016c3c:	83 ec 0c             	sub    esp,0xc
c0016c3f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016c44:	0f 85 8e 00 00 00    	jne    c0016cd8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c4a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016c52:	0f 85 80 00 00 00    	jne    c0016cd8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c58:	83 ec 0c             	sub    esp,0xc
c0016c5b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c60:	e8 ef 94 00 00       	call   c0020154 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c65:	83 c4 10             	add    esp,0x10
c0016c68:	83 ec 04             	sub    esp,0x4
c0016c6b:	68 84 37 02 c0       	push   0xc0023784
c0016c70:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c75:	68 04 01 02 c0       	push   0xc0020104
c0016c7a:	e8 41 3b ff ff       	call   c000a7c0 <__cxa_atexit>
c0016c7f:	83 c4 10             	add    esp,0x10
c0016c82:	83 ec 0c             	sub    esp,0xc
c0016c85:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c8a:	e8 c5 94 00 00       	call   c0020154 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c8f:	83 c4 10             	add    esp,0x10
c0016c92:	83 ec 04             	sub    esp,0x4
c0016c95:	68 84 37 02 c0       	push   0xc0023784
c0016c9a:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c9f:	68 04 01 02 c0       	push   0xc0020104
c0016ca4:	e8 17 3b ff ff       	call   c000a7c0 <__cxa_atexit>
c0016ca9:	83 c4 10             	add    esp,0x10
c0016cac:	83 ec 0c             	sub    esp,0xc
c0016caf:	68 cc c6 02 c0       	push   0xc002c6cc
c0016cb4:	e8 9b 94 00 00       	call   c0020154 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016cb9:	83 c4 10             	add    esp,0x10
c0016cbc:	83 ec 04             	sub    esp,0x4
c0016cbf:	68 84 37 02 c0       	push   0xc0023784
c0016cc4:	68 cc c6 02 c0       	push   0xc002c6cc
c0016cc9:	68 04 01 02 c0       	push   0xc0020104
c0016cce:	e8 ed 3a ff ff       	call   c000a7c0 <__cxa_atexit>
c0016cd3:	83 c4 10             	add    esp,0x10
c0016cd6:	66 90                	xchg   ax,ax
c0016cd8:	90                   	nop
c0016cd9:	83 c4 0c             	add    esp,0xc
c0016cdc:	c3                   	ret    
c0016cdd:	8d 76 00             	lea    esi,[esi+0x0]

c0016ce0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016ce0:	83 ec 0c             	sub    esp,0xc
c0016ce3:	83 ec 08             	sub    esp,0x8
c0016ce6:	68 ff ff 00 00       	push   0xffff
c0016ceb:	6a 01                	push   0x1
c0016ced:	e8 4a ff ff ff       	call   c0016c3c <__static_initialization_and_destruction_0(int, int)>
c0016cf2:	83 c4 10             	add    esp,0x10
c0016cf5:	83 c4 0c             	add    esp,0xc
c0016cf8:	c3                   	ret    

c0016cf9 <Vm::inbv(unsigned short)>:
c0016cf9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016cfd:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d02:	75 06                	jne    c0016d0a <Vm::inbv(unsigned short)+0x11>
c0016d04:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016d09:	c3                   	ret    
c0016d0a:	ec                   	in     al,dx
c0016d0b:	c3                   	ret    

c0016d0c <Vm::outbv(unsigned short, unsigned char)>:
c0016d0c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d14:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d19:	75 25                	jne    c0016d40 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016d1b:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d21:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016d27:	8d 51 01             	lea    edx,[ecx+0x1]
c0016d2a:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016d30:	83 fa 20             	cmp    edx,0x20
c0016d33:	75 0c                	jne    c0016d41 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016d35:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016d3f:	c3                   	ret    
c0016d40:	ee                   	out    dx,al
c0016d41:	c3                   	ret    

c0016d42 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016d42:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d47:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d4c:	c1 e0 04             	shl    eax,0x4
c0016d4f:	01 d0                	add    eax,edx
c0016d51:	c3                   	ret    

c0016d52 <Vm::getSegment(unsigned int)>:
c0016d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d56:	c1 e8 10             	shr    eax,0x10
c0016d59:	c3                   	ret    

c0016d5a <Vm::getOffset(unsigned int)>:
c0016d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d5e:	c3                   	ret    

c0016d5f <Vm::mainloop2()>:
c0016d5f:	83 ec 18             	sub    esp,0x18
c0016d62:	fa                   	cli    
c0016d63:	6a 02                	push   0x2
c0016d65:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d6b:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016d72:	e8 95 f5 ff ff       	call   c001630c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d7c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016d80:	52                   	push   edx
c0016d81:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016d85:	52                   	push   edx
c0016d86:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016d8a:	52                   	push   edx
c0016d8b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016d8f:	50                   	push   eax
c0016d90:	e8 7a 94 fe ff       	call   c000020f <goToVM86>
c0016d95:	83 c4 2c             	add    esp,0x2c
c0016d98:	c3                   	ret    

c0016d99 <Vm::mainVm8086Loop(void*)>:
c0016d99:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d9e:	48                   	dec    eax
c0016d9f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016da4:	75 01                	jne    c0016da7 <Vm::mainVm8086Loop(void*)+0xe>
c0016da6:	fb                   	sti    
c0016da7:	eb b6                	jmp    c0016d5f <Vm::mainloop2()>

c0016da9 <Vm::mainloop3(unsigned long)>:
c0016da9:	83 ec 18             	sub    esp,0x18
c0016dac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016db0:	fa                   	cli    
c0016db1:	6a 02                	push   0x2
c0016db3:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016db9:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016dc0:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016dc5:	e8 42 f5 ff ff       	call   c001630c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016dca:	83 c4 1c             	add    esp,0x1c
c0016dcd:	eb 90                	jmp    c0016d5f <Vm::mainloop2()>

c0016dcf <Vm::initialise8086()>:
c0016dcf:	83 ec 0c             	sub    esp,0xc
c0016dd2:	68 80 00 00 00       	push   0x80
c0016dd7:	6a 00                	push   0x0
c0016dd9:	68 99 6d 01 c0       	push   0xc0016d99
c0016dde:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016de4:	e8 ff f0 ff ff       	call   c0015ee8 <Process::createThread(void (*)(void*), void*, int)>
c0016de9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016df0:	68 00 01 00 00       	push   0x100
c0016df5:	6a 00                	push   0x0
c0016df7:	6a 00                	push   0x0
c0016df9:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016dfe:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016e03:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e09:	e8 fe 30 ff ff       	call   c0009f0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016e0e:	83 c4 2c             	add    esp,0x2c
c0016e11:	c3                   	ret    

c0016e12 <Vm::finish8086()>:
c0016e12:	53                   	push   ebx
c0016e13:	83 ec 08             	sub    esp,0x8
c0016e16:	fa                   	cli    
c0016e17:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e1d:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016e24:	75 15                	jne    c0016e3b <Vm::finish8086()+0x29>
c0016e26:	e8 09 f3 ff ff       	call   c0016134 <schedule()>
c0016e2b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e30:	48                   	dec    eax
c0016e31:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e36:	75 de                	jne    c0016e16 <Vm::finish8086()+0x4>
c0016e38:	fb                   	sti    
c0016e39:	eb db                	jmp    c0016e16 <Vm::finish8086()+0x4>
c0016e3b:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016e42:	83 ec 0c             	sub    esp,0xc
c0016e45:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016e4b:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e51:	e8 d6 f7 ff ff       	call   c001662c <unblockTask(ThreadControlBlock*)>
c0016e56:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e5b:	83 c4 10             	add    esp,0x10
c0016e5e:	8d 50 ff             	lea    edx,[eax-0x1]
c0016e61:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016e67:	85 d2                	test   edx,edx
c0016e69:	75 01                	jne    c0016e6c <Vm::finish8086()+0x5a>
c0016e6b:	fb                   	sti    
c0016e6c:	83 c4 08             	add    esp,0x8
c0016e6f:	89 d8                	mov    eax,ebx
c0016e71:	5b                   	pop    ebx
c0016e72:	c3                   	ret    

c0016e73 <Vm::getOutput8086(unsigned char*)>:
c0016e73:	57                   	push   edi
c0016e74:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016e7a:	56                   	push   esi
c0016e7b:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016e80:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016e84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e86:	5e                   	pop    esi
c0016e87:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016e8c:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e96:	5f                   	pop    edi
c0016e97:	c3                   	ret    

c0016e98 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e98:	55                   	push   ebp
c0016e99:	57                   	push   edi
c0016e9a:	56                   	push   esi
c0016e9b:	53                   	push   ebx
c0016e9c:	83 ec 0c             	sub    esp,0xc
c0016e9f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016ea3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016ea7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016eab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016eaf:	fa                   	cli    
c0016eb0:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016eb6:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016ebd:	75 15                	jne    c0016ed4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016ebf:	e8 70 f2 ff ff       	call   c0016134 <schedule()>
c0016ec4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ec9:	48                   	dec    eax
c0016eca:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ecf:	75 de                	jne    c0016eaf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016ed1:	fb                   	sti    
c0016ed2:	eb db                	jmp    c0016eaf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016ed4:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016ede:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016ee3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016ee7:	0f b7 ff             	movzx  edi,di
c0016eea:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016eee:	0f b7 f6             	movzx  esi,si
c0016ef1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016ef5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016ef9:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016efd:	50                   	push   eax
c0016efe:	6a 20                	push   0x20
c0016f00:	6a 00                	push   0x0
c0016f02:	68 40 c7 02 c0       	push   0xc002c740
c0016f07:	e8 e4 95 fe ff       	call   c00004f0 <memset>
c0016f0c:	5a                   	pop    edx
c0016f0d:	59                   	pop    ecx
c0016f0e:	57                   	push   edi
c0016f0f:	56                   	push   esi
c0016f10:	e8 2d fe ff ff       	call   c0016d42 <Vm::realToLinear(unsigned short, unsigned short)>
c0016f15:	83 c4 10             	add    esp,0x10
c0016f18:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016f1c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016f20:	89 c7                	mov    edi,eax
c0016f22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f24:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016f2b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f30:	48                   	dec    eax
c0016f31:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f36:	75 01                	jne    c0016f39 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016f38:	fb                   	sti    
c0016f39:	83 ec 0c             	sub    esp,0xc
c0016f3c:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016f42:	e8 e5 f6 ff ff       	call   c001662c <unblockTask(ThreadControlBlock*)>
c0016f47:	83 c4 1c             	add    esp,0x1c
c0016f4a:	b0 01                	mov    al,0x1
c0016f4c:	5b                   	pop    ebx
c0016f4d:	5e                   	pop    esi
c0016f4e:	5f                   	pop    edi
c0016f4f:	5d                   	pop    ebp
c0016f50:	c3                   	ret    

c0016f51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f51:	55                   	push   ebp
c0016f52:	57                   	push   edi
c0016f53:	56                   	push   esi
c0016f54:	53                   	push   ebx
c0016f55:	83 ec 34             	sub    esp,0x34
c0016f58:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016f5c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016f60:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016f64:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016f68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f6c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f70:	68 dc 2b 02 c0       	push   0xc0022bdc
c0016f75:	e8 94 39 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0016f7a:	83 c4 10             	add    esp,0x10
c0016f7d:	fa                   	cli    
c0016f7e:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016f84:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f8a:	84 db                	test   bl,bl
c0016f8c:	75 15                	jne    c0016fa3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016f8e:	e8 a1 f1 ff ff       	call   c0016134 <schedule()>
c0016f93:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f98:	48                   	dec    eax
c0016f99:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f9e:	75 dd                	jne    c0016f7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016fa0:	fb                   	sti    
c0016fa1:	eb da                	jmp    c0016f7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016fa3:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016fad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fb1:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016fb6:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016fba:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016fbe:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016fc2:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016fc6:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016fca:	50                   	push   eax
c0016fcb:	6a 20                	push   0x20
c0016fcd:	6a 00                	push   0x0
c0016fcf:	68 40 c7 02 c0       	push   0xc002c740
c0016fd4:	e8 17 95 fe ff       	call   c00004f0 <memset>
c0016fd9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016fe0:	e8 f2 0a ff ff       	call   c0007ad7 <malloc>
c0016fe5:	83 c4 0c             	add    esp,0xc
c0016fe8:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016fee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ff2:	89 c5                	mov    ebp,eax
c0016ff4:	50                   	push   eax
c0016ff5:	e8 2c 4b ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c0016ffa:	83 c4 10             	add    esp,0x10
c0016ffd:	85 ed                	test   ebp,ebp
c0016fff:	75 0a                	jne    c001700b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0017001:	83 ec 0c             	sub    esp,0xc
c0017004:	68 fe 2b 02 c0       	push   0xc0022bfe
c0017009:	eb 2b                	jmp    c0017036 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c001700b:	50                   	push   eax
c001700c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017010:	50                   	push   eax
c0017011:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017015:	50                   	push   eax
c0017016:	55                   	push   ebp
c0017017:	e8 2a 4e ff ff       	call   c000be46 <File::stat(unsigned long long*, bool*)>
c001701c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017020:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017024:	83 c4 10             	add    esp,0x10
c0017027:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001702c:	74 27                	je     c0017055 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c001702e:	83 ec 0c             	sub    esp,0xc
c0017031:	68 12 2c 02 c0       	push   0xc0022c12
c0017036:	e8 cc a5 ff ff       	call   c0011607 <KePanic(char const*)>
c001703b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017040:	83 c4 10             	add    esp,0x10
c0017043:	48                   	dec    eax
c0017044:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017049:	85 c0                	test   eax,eax
c001704b:	75 01                	jne    c001704e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001704d:	fb                   	sti    
c001704e:	31 db                	xor    ebx,ebx
c0017050:	e9 90 00 00 00       	jmp    c00170e5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017055:	51                   	push   ecx
c0017056:	51                   	push   ecx
c0017057:	6a 01                	push   0x1
c0017059:	55                   	push   ebp
c001705a:	e8 e5 4a ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c001705f:	83 c4 10             	add    esp,0x10
c0017062:	85 c0                	test   eax,eax
c0017064:	74 26                	je     c001708c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0017066:	83 ec 0c             	sub    esp,0xc
c0017069:	68 2b 2c 02 c0       	push   0xc0022c2b
c001706e:	e8 94 a5 ff ff       	call   c0011607 <KePanic(char const*)>
c0017073:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017078:	83 c4 10             	add    esp,0x10
c001707b:	48                   	dec    eax
c001707c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017081:	85 c0                	test   eax,eax
c0017083:	75 c9                	jne    c001704e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017085:	fb                   	sti    
c0017086:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c001708a:	eb 59                	jmp    c00170e5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c001708c:	50                   	push   eax
c001708d:	0f b7 ff             	movzx  edi,di
c0017090:	50                   	push   eax
c0017091:	0f b7 f6             	movzx  esi,si
c0017094:	57                   	push   edi
c0017095:	56                   	push   esi
c0017096:	e8 a7 fc ff ff       	call   c0016d42 <Vm::realToLinear(unsigned short, unsigned short)>
c001709b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001709e:	5a                   	pop    edx
c001709f:	8d 74 24 20          	lea    esi,[esp+0x20]
c00170a3:	56                   	push   esi
c00170a4:	50                   	push   eax
c00170a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170ad:	55                   	push   ebp
c00170ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170b1:	83 c4 14             	add    esp,0x14
c00170b4:	55                   	push   ebp
c00170b5:	e8 e8 4a ff ff       	call   c000bba2 <File::close()>
c00170ba:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170bf:	83 c4 10             	add    esp,0x10
c00170c2:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c00170c9:	48                   	dec    eax
c00170ca:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00170cf:	85 c0                	test   eax,eax
c00170d1:	75 01                	jne    c00170d4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c00170d3:	fb                   	sti    
c00170d4:	83 ec 0c             	sub    esp,0xc
c00170d7:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c00170dd:	e8 4a f5 ff ff       	call   c001662c <unblockTask(ThreadControlBlock*)>
c00170e2:	83 c4 10             	add    esp,0x10
c00170e5:	83 c4 2c             	add    esp,0x2c
c00170e8:	88 d8                	mov    al,bl
c00170ea:	5b                   	pop    ebx
c00170eb:	5e                   	pop    esi
c00170ec:	5f                   	pop    edi
c00170ed:	5d                   	pop    ebp
c00170ee:	c3                   	ret    

c00170ef <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00170ef:	57                   	push   edi
c00170f0:	56                   	push   esi
c00170f1:	53                   	push   ebx
c00170f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170fa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170fe:	83 e8 06             	sub    eax,0x6
c0017101:	0f b7 c0             	movzx  eax,ax
c0017104:	50                   	push   eax
c0017105:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001710a:	50                   	push   eax
c001710b:	e8 32 fc ff ff       	call   c0016d42 <Vm::realToLinear(unsigned short, unsigned short)>
c0017110:	5a                   	pop    edx
c0017111:	59                   	pop    ecx
c0017112:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017115:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017118:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001711b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017121:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017124:	8d 51 02             	lea    edx,[ecx+0x2]
c0017127:	66 89 10             	mov    WORD PTR [eax],dx
c001712a:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001712e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017132:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017136:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017139:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001713d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017143:	89 f1                	mov    ecx,esi
c0017145:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017149:	89 f2                	mov    edx,esi
c001714b:	0f b6 d6             	movzx  edx,dh
c001714e:	0f b6 f1             	movzx  esi,cl
c0017151:	74 0a                	je     c001715d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0017153:	c1 e2 08             	shl    edx,0x8
c0017156:	09 f2                	or     edx,esi
c0017158:	80 ce 02             	or     dh,0x2
c001715b:	eb 08                	jmp    c0017165 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c001715d:	c1 e2 08             	shl    edx,0x8
c0017160:	09 f2                	or     edx,esi
c0017162:	80 e6 fd             	and    dh,0xfd
c0017165:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017169:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001716e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017172:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001717a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c001717d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017185:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017188:	5b                   	pop    ebx
c0017189:	5e                   	pop    esi
c001718a:	5f                   	pop    edi
c001718b:	c3                   	ret    

c001718c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001718c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017191:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017196:	c1 e0 04             	shl    eax,0x4
c0017199:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001719c:	c3                   	ret    

c001719d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001719d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171a2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171a7:	c1 e0 04             	shl    eax,0x4
c00171aa:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00171ae:	c3                   	ret    

c00171af <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00171af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171b4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171b9:	c1 e0 04             	shl    eax,0x4
c00171bc:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00171bf:	c3                   	ret    

c00171c0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00171c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171c5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171ca:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00171ce:	c1 e0 04             	shl    eax,0x4
c00171d1:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00171d4:	c3                   	ret    

c00171d5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00171d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171da:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171e3:	c1 e0 04             	shl    eax,0x4
c00171e6:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00171ea:	c3                   	ret    

c00171eb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00171eb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171f0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171f9:	c1 e0 04             	shl    eax,0x4
c00171fc:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00171ff:	c3                   	ret    

c0017200 <Vm::faultHandler(regs*)>:
c0017200:	55                   	push   ebp
c0017201:	57                   	push   edi
c0017202:	56                   	push   esi
c0017203:	53                   	push   ebx
c0017204:	83 ec 2c             	sub    esp,0x2c
c0017207:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001720b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001720e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017212:	0f b7 f8             	movzx  edi,ax
c0017215:	0f b7 c0             	movzx  eax,ax
c0017218:	52                   	push   edx
c0017219:	50                   	push   eax
c001721a:	e8 23 fb ff ff       	call   c0016d42 <Vm::realToLinear(unsigned short, unsigned short)>
c001721f:	5a                   	pop    edx
c0017220:	59                   	pop    ecx
c0017221:	89 c1                	mov    ecx,eax
c0017223:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017226:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001722a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001722f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017233:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017236:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001723a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001723f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017243:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017247:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001724b:	e8 f2 fa ff ff       	call   c0016d42 <Vm::realToLinear(unsigned short, unsigned short)>
c0017250:	5e                   	pop    esi
c0017251:	be 06 00 00 00       	mov    esi,0x6
c0017256:	5d                   	pop    ebp
c0017257:	31 ed                	xor    ebp,ebp
c0017259:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001725e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017261:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017267:	0f 84 74 02 00 00    	je     c00174e1 <Vm::faultHandler(regs*)+0x2e1>
c001726d:	0f 87 94 00 00 00    	ja     c0017307 <Vm::faultHandler(regs*)+0x107>
c0017273:	83 fa 66             	cmp    edx,0x66
c0017276:	0f 84 e2 01 00 00    	je     c001745e <Vm::faultHandler(regs*)+0x25e>
c001727c:	77 47                	ja     c00172c5 <Vm::faultHandler(regs*)+0xc5>
c001727e:	83 fa 36             	cmp    edx,0x36
c0017281:	0f 84 ca 01 00 00    	je     c0017451 <Vm::faultHandler(regs*)+0x251>
c0017287:	77 1a                	ja     c00172a3 <Vm::faultHandler(regs*)+0xa3>
c0017289:	83 fa 26             	cmp    edx,0x26
c001728c:	0f 84 98 01 00 00    	je     c001742a <Vm::faultHandler(regs*)+0x22a>
c0017292:	83 fa 2e             	cmp    edx,0x2e
c0017295:	0f 85 27 06 00 00    	jne    c00178c2 <Vm::faultHandler(regs*)+0x6c2>
c001729b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001729e:	31 f6                	xor    esi,esi
c00172a0:	41                   	inc    ecx
c00172a1:	eb bb                	jmp    c001725e <Vm::faultHandler(regs*)+0x5e>
c00172a3:	83 fa 64             	cmp    edx,0x64
c00172a6:	0f 84 8b 01 00 00    	je     c0017437 <Vm::faultHandler(regs*)+0x237>
c00172ac:	0f 87 92 01 00 00    	ja     c0017444 <Vm::faultHandler(regs*)+0x244>
c00172b2:	83 fa 3e             	cmp    edx,0x3e
c00172b5:	0f 85 07 06 00 00    	jne    c00178c2 <Vm::faultHandler(regs*)+0x6c2>
c00172bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172be:	be 01 00 00 00       	mov    esi,0x1
c00172c3:	eb db                	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c00172c5:	83 fa 6d             	cmp    edx,0x6d
c00172c8:	0f 84 34 03 00 00    	je     c0017602 <Vm::faultHandler(regs*)+0x402>
c00172ce:	77 17                	ja     c00172e7 <Vm::faultHandler(regs*)+0xe7>
c00172d0:	83 fa 67             	cmp    edx,0x67
c00172d3:	0f 84 92 01 00 00    	je     c001746b <Vm::faultHandler(regs*)+0x26b>
c00172d9:	83 fa 6c             	cmp    edx,0x6c
c00172dc:	0f 84 b1 02 00 00    	je     c0017593 <Vm::faultHandler(regs*)+0x393>
c00172e2:	e9 db 05 00 00       	jmp    c00178c2 <Vm::faultHandler(regs*)+0x6c2>
c00172e7:	83 fa 6f             	cmp    edx,0x6f
c00172ea:	0f 84 40 04 00 00    	je     c0017730 <Vm::faultHandler(regs*)+0x530>
c00172f0:	0f 82 a2 03 00 00    	jb     c0017698 <Vm::faultHandler(regs*)+0x498>
c00172f6:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00172fc:	0f 84 76 01 00 00    	je     c0017478 <Vm::faultHandler(regs*)+0x278>
c0017302:	e9 bb 05 00 00       	jmp    c00178c2 <Vm::faultHandler(regs*)+0x6c2>
c0017307:	81 fa ec 00 00 00    	cmp    edx,0xec
c001730d:	0f 84 57 05 00 00    	je     c001786a <Vm::faultHandler(regs*)+0x66a>
c0017313:	0f 87 a9 00 00 00    	ja     c00173c2 <Vm::faultHandler(regs*)+0x1c2>
c0017319:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001731f:	0f 84 d6 04 00 00    	je     c00177fb <Vm::faultHandler(regs*)+0x5fb>
c0017325:	77 78                	ja     c001739f <Vm::faultHandler(regs*)+0x19f>
c0017327:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001732d:	0f 84 0e 02 00 00    	je     c0017541 <Vm::faultHandler(regs*)+0x341>
c0017333:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017339:	0f 85 83 05 00 00    	jne    c00178c2 <Vm::faultHandler(regs*)+0x6c2>
c001733f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017343:	89 d1                	mov    ecx,edx
c0017345:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017348:	c1 e1 08             	shl    ecx,0x8
c001734b:	09 ca                	or     edx,ecx
c001734d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017350:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017354:	89 d1                	mov    ecx,edx
c0017356:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001735a:	c1 e1 08             	shl    ecx,0x8
c001735d:	09 ca                	or     edx,ecx
c001735f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017362:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017366:	89 d1                	mov    ecx,edx
c0017368:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c001736c:	c1 e1 08             	shl    ecx,0x8
c001736f:	09 ca                	or     edx,ecx
c0017371:	81 ca 00 02 02 00    	or     edx,0x20200
c0017377:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001737a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001737e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017384:	d1 e8                	shr    eax,1
c0017386:	83 e0 01             	and    eax,0x1
c0017389:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001738c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001738f:	83 c0 06             	add    eax,0x6
c0017392:	25 ff ff 00 00       	and    eax,0xffff
c0017397:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001739a:	e9 1f 05 00 00       	jmp    c00178be <Vm::faultHandler(regs*)+0x6be>
c001739f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00173a5:	0f 84 95 04 00 00    	je     c0017840 <Vm::faultHandler(regs*)+0x640>
c00173ab:	0f 82 66 04 00 00    	jb     c0017817 <Vm::faultHandler(regs*)+0x617>
c00173b1:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00173b7:	0f 84 9a 04 00 00    	je     c0017857 <Vm::faultHandler(regs*)+0x657>
c00173bd:	e9 00 05 00 00       	jmp    c00178c2 <Vm::faultHandler(regs*)+0x6c2>
c00173c2:	81 fa ef 00 00 00    	cmp    edx,0xef
c00173c8:	0f 84 dd 04 00 00    	je     c00178ab <Vm::faultHandler(regs*)+0x6ab>
c00173ce:	77 2e                	ja     c00173fe <Vm::faultHandler(regs*)+0x1fe>
c00173d0:	81 fa ed 00 00 00    	cmp    edx,0xed
c00173d6:	0f 84 aa 04 00 00    	je     c0017886 <Vm::faultHandler(regs*)+0x686>
c00173dc:	81 fa ee 00 00 00    	cmp    edx,0xee
c00173e2:	0f 85 da 04 00 00    	jne    c00178c2 <Vm::faultHandler(regs*)+0x6c2>
c00173e8:	50                   	push   eax
c00173e9:	50                   	push   eax
c00173ea:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00173ee:	50                   	push   eax
c00173ef:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00173f3:	50                   	push   eax
c00173f4:	e8 13 f9 ff ff       	call   c0016d0c <Vm::outbv(unsigned short, unsigned char)>
c00173f9:	e9 a5 04 00 00       	jmp    c00178a3 <Vm::faultHandler(regs*)+0x6a3>
c00173fe:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017404:	0f 84 6d 01 00 00    	je     c0017577 <Vm::faultHandler(regs*)+0x377>
c001740a:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017410:	0f 84 6f 01 00 00    	je     c0017585 <Vm::faultHandler(regs*)+0x385>
c0017416:	81 fa f3 00 00 00    	cmp    edx,0xf3
c001741c:	0f 85 a0 04 00 00    	jne    c00178c2 <Vm::faultHandler(regs*)+0x6c2>
c0017422:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017425:	e9 76 fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c001742a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001742d:	be 02 00 00 00       	mov    esi,0x2
c0017432:	e9 69 fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c0017437:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001743a:	be 03 00 00 00       	mov    esi,0x3
c001743f:	e9 5c fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c0017444:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017447:	be 04 00 00 00       	mov    esi,0x4
c001744c:	e9 4f fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c0017451:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017454:	be 05 00 00 00       	mov    esi,0x5
c0017459:	e9 42 fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c001745e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017461:	bd 01 00 00 00       	mov    ebp,0x1
c0017466:	e9 35 fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c001746b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001746e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017473:	e9 28 fe ff ff       	jmp    c00172a0 <Vm::faultHandler(regs*)+0xa0>
c0017478:	83 e5 01             	and    ebp,0x1
c001747b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001747e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017482:	74 30                	je     c00174b4 <Vm::faultHandler(regs*)+0x2b4>
c0017484:	83 e9 04             	sub    ecx,0x4
c0017487:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001748d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017493:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017496:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017499:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001749f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174a3:	0f 84 12 04 00 00    	je     c00178bb <Vm::faultHandler(regs*)+0x6bb>
c00174a9:	80 ce 02             	or     dh,0x2
c00174ac:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174af:	e9 07 04 00 00       	jmp    c00178bb <Vm::faultHandler(regs*)+0x6bb>
c00174b4:	83 e9 02             	sub    ecx,0x2
c00174b7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00174bd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00174c0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00174c4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00174ca:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174ce:	74 05                	je     c00174d5 <Vm::faultHandler(regs*)+0x2d5>
c00174d0:	80 ce 02             	or     dh,0x2
c00174d3:	eb 03                	jmp    c00174d8 <Vm::faultHandler(regs*)+0x2d8>
c00174d5:	80 e6 fd             	and    dh,0xfd
c00174d8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00174dc:	e9 da 03 00 00       	jmp    c00178bb <Vm::faultHandler(regs*)+0x6bb>
c00174e1:	83 e5 01             	and    ebp,0x1
c00174e4:	74 2a                	je     c0017510 <Vm::faultHandler(regs*)+0x310>
c00174e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00174e8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00174ee:	81 ca 00 02 02 00    	or     edx,0x20200
c00174f4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00174f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00174f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174ff:	c1 e8 09             	shr    eax,0x9
c0017502:	83 e0 01             	and    eax,0x1
c0017505:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017508:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001750b:	83 c0 04             	add    eax,0x4
c001750e:	eb 24                	jmp    c0017534 <Vm::faultHandler(regs*)+0x334>
c0017510:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017513:	81 ca 00 02 02 00    	or     edx,0x20200
c0017519:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001751c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001751f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017525:	c1 e8 09             	shr    eax,0x9
c0017528:	83 e0 01             	and    eax,0x1
c001752b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001752e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017531:	83 c0 02             	add    eax,0x2
c0017534:	25 ff ff 00 00       	and    eax,0xffff
c0017539:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001753c:	e9 7a 03 00 00       	jmp    c00178bb <Vm::faultHandler(regs*)+0x6bb>
c0017541:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017545:	3d ee 00 00 00       	cmp    eax,0xee
c001754a:	75 10                	jne    c001755c <Vm::faultHandler(regs*)+0x35c>
c001754c:	83 ec 0c             	sub    esp,0xc
c001754f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017552:	e8 52 f8 ff ff       	call   c0016da9 <Vm::mainloop3(unsigned long)>
c0017557:	e9 4a 03 00 00       	jmp    c00178a6 <Vm::faultHandler(regs*)+0x6a6>
c001755c:	83 ec 0c             	sub    esp,0xc
c001755f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017563:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017567:	51                   	push   ecx
c0017568:	50                   	push   eax
c0017569:	53                   	push   ebx
c001756a:	e8 80 fb ff ff       	call   c00170ef <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001756f:	83 c4 20             	add    esp,0x20
c0017572:	e9 47 03 00 00       	jmp    c00178be <Vm::faultHandler(regs*)+0x6be>
c0017577:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001757c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017580:	e9 36 03 00 00       	jmp    c00178bb <Vm::faultHandler(regs*)+0x6bb>
c0017585:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001758a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001758e:	e9 28 03 00 00       	jmp    c00178bb <Vm::faultHandler(regs*)+0x6bb>
c0017593:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017598:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001759b:	74 2b                	je     c00175c8 <Vm::faultHandler(regs*)+0x3c8>
c001759d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00175a4:	76 22                	jbe    c00175c8 <Vm::faultHandler(regs*)+0x3c8>
c00175a6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175aa:	50                   	push   eax
c00175ab:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175af:	50                   	push   eax
c00175b0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175b4:	50                   	push   eax
c00175b5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175b9:	50                   	push   eax
c00175ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175be:	50                   	push   eax
c00175bf:	6a 6c                	push   0x6c
c00175c1:	6a 6c                	push   0x6c
c00175c3:	e9 c0 01 00 00       	jmp    c0017788 <Vm::faultHandler(regs*)+0x588>
c00175c8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00175cc:	83 ec 0c             	sub    esp,0xc
c00175cf:	0f b7 f6             	movzx  esi,si
c00175d2:	50                   	push   eax
c00175d3:	e8 21 f7 ff ff       	call   c0016cf9 <Vm::inbv(unsigned short)>
c00175d8:	83 c4 0c             	add    esp,0xc
c00175db:	0f b6 c0             	movzx  eax,al
c00175de:	50                   	push   eax
c00175df:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00175e3:	50                   	push   eax
c00175e4:	56                   	push   esi
c00175e5:	e8 d6 fb ff ff       	call   c00171c0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00175ea:	83 c4 10             	add    esp,0x10
c00175ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175f0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175f4:	74 03                	je     c00175f9 <Vm::faultHandler(regs*)+0x3f9>
c00175f6:	48                   	dec    eax
c00175f7:	eb 01                	jmp    c00175fa <Vm::faultHandler(regs*)+0x3fa>
c00175f9:	40                   	inc    eax
c00175fa:	0f b7 c0             	movzx  eax,ax
c00175fd:	e9 8e 00 00 00       	jmp    c0017690 <Vm::faultHandler(regs*)+0x490>
c0017602:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017607:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001760a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001760d:	74 29                	je     c0017638 <Vm::faultHandler(regs*)+0x438>
c001760f:	3d ff ff 00 00       	cmp    eax,0xffff
c0017614:	76 22                	jbe    c0017638 <Vm::faultHandler(regs*)+0x438>
c0017616:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001761a:	50                   	push   eax
c001761b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001761f:	50                   	push   eax
c0017620:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017624:	50                   	push   eax
c0017625:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017629:	50                   	push   eax
c001762a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001762e:	50                   	push   eax
c001762f:	6a 6d                	push   0x6d
c0017631:	6a 6d                	push   0x6d
c0017633:	e9 50 01 00 00       	jmp    c0017788 <Vm::faultHandler(regs*)+0x588>
c0017638:	83 e5 01             	and    ebp,0x1
c001763b:	0f b7 c8             	movzx  ecx,ax
c001763e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017641:	0f b7 f6             	movzx  esi,si
c0017644:	74 1e                	je     c0017664 <Vm::faultHandler(regs*)+0x464>
c0017646:	ed                   	in     eax,dx
c0017647:	55                   	push   ebp
c0017648:	50                   	push   eax
c0017649:	51                   	push   ecx
c001764a:	56                   	push   esi
c001764b:	e8 9b fb ff ff       	call   c00171eb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017650:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017653:	83 c4 10             	add    esp,0x10
c0017656:	8d 50 04             	lea    edx,[eax+0x4]
c0017659:	83 e8 04             	sub    eax,0x4
c001765c:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017662:	eb 20                	jmp    c0017684 <Vm::faultHandler(regs*)+0x484>
c0017664:	66 ed                	in     ax,dx
c0017666:	57                   	push   edi
c0017667:	0f b7 c0             	movzx  eax,ax
c001766a:	50                   	push   eax
c001766b:	51                   	push   ecx
c001766c:	56                   	push   esi
c001766d:	e8 63 fb ff ff       	call   c00171d5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017672:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017675:	83 c4 10             	add    esp,0x10
c0017678:	8d 50 02             	lea    edx,[eax+0x2]
c001767b:	83 e8 02             	sub    eax,0x2
c001767e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017684:	25 ff ff 00 00       	and    eax,0xffff
c0017689:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001768d:	0f 44 c2             	cmove  eax,edx
c0017690:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017693:	e9 23 02 00 00       	jmp    c00178bb <Vm::faultHandler(regs*)+0x6bb>
c0017698:	8d 46 ff             	lea    eax,[esi-0x1]
c001769b:	0f b6 f0             	movzx  esi,al
c001769e:	83 fe 05             	cmp    esi,0x5
c00176a1:	77 23                	ja     c00176c6 <Vm::faultHandler(regs*)+0x4c6>
c00176a3:	ff 24 b5 a0 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd360]
c00176aa:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00176af:	eb 15                	jmp    c00176c6 <Vm::faultHandler(regs*)+0x4c6>
c00176b1:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00176b5:	eb 0f                	jmp    c00176c6 <Vm::faultHandler(regs*)+0x4c6>
c00176b7:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00176bb:	eb 09                	jmp    c00176c6 <Vm::faultHandler(regs*)+0x4c6>
c00176bd:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00176c1:	eb 03                	jmp    c00176c6 <Vm::faultHandler(regs*)+0x4c6>
c00176c3:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00176c6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176ce:	74 29                	je     c00176f9 <Vm::faultHandler(regs*)+0x4f9>
c00176d0:	3d ff ff 00 00       	cmp    eax,0xffff
c00176d5:	76 22                	jbe    c00176f9 <Vm::faultHandler(regs*)+0x4f9>
c00176d7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176db:	50                   	push   eax
c00176dc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176e0:	50                   	push   eax
c00176e1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176e5:	50                   	push   eax
c00176e6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176ea:	50                   	push   eax
c00176eb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176ef:	50                   	push   eax
c00176f0:	6a 6e                	push   0x6e
c00176f2:	6a 6e                	push   0x6e
c00176f4:	e9 8f 00 00 00       	jmp    c0017788 <Vm::faultHandler(regs*)+0x588>
c00176f9:	52                   	push   edx
c00176fa:	0f b7 c0             	movzx  eax,ax
c00176fd:	52                   	push   edx
c00176fe:	50                   	push   eax
c00176ff:	57                   	push   edi
c0017700:	e8 87 fa ff ff       	call   c001718c <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017705:	59                   	pop    ecx
c0017706:	5e                   	pop    esi
c0017707:	0f b6 c0             	movzx  eax,al
c001770a:	50                   	push   eax
c001770b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001770f:	50                   	push   eax
c0017710:	e8 f7 f5 ff ff       	call   c0016d0c <Vm::outbv(unsigned short, unsigned char)>
c0017715:	83 c4 10             	add    esp,0x10
c0017718:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001771b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001771f:	74 03                	je     c0017724 <Vm::faultHandler(regs*)+0x524>
c0017721:	48                   	dec    eax
c0017722:	eb 01                	jmp    c0017725 <Vm::faultHandler(regs*)+0x525>
c0017724:	40                   	inc    eax
c0017725:	0f b7 c0             	movzx  eax,ax
c0017728:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001772b:	e9 8b 01 00 00       	jmp    c00178bb <Vm::faultHandler(regs*)+0x6bb>
c0017730:	8d 46 ff             	lea    eax,[esi-0x1]
c0017733:	0f b6 f0             	movzx  esi,al
c0017736:	83 fe 05             	cmp    esi,0x5
c0017739:	77 1e                	ja     c0017759 <Vm::faultHandler(regs*)+0x559>
c001773b:	ff 24 b5 b8 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd348]
c0017742:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017746:	eb 11                	jmp    c0017759 <Vm::faultHandler(regs*)+0x559>
c0017748:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001774b:	eb 0c                	jmp    c0017759 <Vm::faultHandler(regs*)+0x559>
c001774d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017750:	eb 07                	jmp    c0017759 <Vm::faultHandler(regs*)+0x559>
c0017752:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017755:	eb 02                	jmp    c0017759 <Vm::faultHandler(regs*)+0x559>
c0017757:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017759:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001775e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017761:	74 37                	je     c001779a <Vm::faultHandler(regs*)+0x59a>
c0017763:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017769:	76 2f                	jbe    c001779a <Vm::faultHandler(regs*)+0x59a>
c001776b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001776f:	50                   	push   eax
c0017770:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017774:	50                   	push   eax
c0017775:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017779:	50                   	push   eax
c001777a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001777e:	50                   	push   eax
c001777f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017783:	50                   	push   eax
c0017784:	6a 6f                	push   0x6f
c0017786:	6a 6f                	push   0x6f
c0017788:	68 44 2c 02 c0       	push   0xc0022c44
c001778d:	e8 7c 31 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0017792:	83 c4 20             	add    esp,0x20
c0017795:	e9 86 01 00 00       	jmp    c0017920 <Vm::faultHandler(regs*)+0x720>
c001779a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001779d:	0f b7 d7             	movzx  edx,di
c00177a0:	0f b7 c6             	movzx  eax,si
c00177a3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00177a6:	81 e1 00 04 00 00    	and    ecx,0x400
c00177ac:	83 e5 01             	and    ebp,0x1
c00177af:	74 1c                	je     c00177cd <Vm::faultHandler(regs*)+0x5cd>
c00177b1:	55                   	push   ebp
c00177b2:	55                   	push   ebp
c00177b3:	50                   	push   eax
c00177b4:	52                   	push   edx
c00177b5:	e8 f5 f9 ff ff       	call   c00171af <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00177ba:	83 c4 10             	add    esp,0x10
c00177bd:	89 fa                	mov    edx,edi
c00177bf:	ef                   	out    dx,eax
c00177c0:	8d 46 04             	lea    eax,[esi+0x4]
c00177c3:	83 ee 04             	sub    esi,0x4
c00177c6:	25 ff ff 00 00       	and    eax,0xffff
c00177cb:	eb 1b                	jmp    c00177e8 <Vm::faultHandler(regs*)+0x5e8>
c00177cd:	55                   	push   ebp
c00177ce:	55                   	push   ebp
c00177cf:	50                   	push   eax
c00177d0:	52                   	push   edx
c00177d1:	e8 c7 f9 ff ff       	call   c001719d <Vm::readWordFromReal(unsigned short, unsigned short)>
c00177d6:	83 c4 10             	add    esp,0x10
c00177d9:	89 fa                	mov    edx,edi
c00177db:	66 ef                	out    dx,ax
c00177dd:	8d 46 02             	lea    eax,[esi+0x2]
c00177e0:	83 ee 02             	sub    esi,0x2
c00177e3:	25 ff ff 00 00       	and    eax,0xffff
c00177e8:	81 e6 ff ff 00 00    	and    esi,0xffff
c00177ee:	85 c9                	test   ecx,ecx
c00177f0:	0f 44 f0             	cmove  esi,eax
c00177f3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00177f6:	e9 c0 00 00 00       	jmp    c00178bb <Vm::faultHandler(regs*)+0x6bb>
c00177fb:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017802:	83 ec 0c             	sub    esp,0xc
c0017805:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017809:	50                   	push   eax
c001780a:	e8 ea f4 ff ff       	call   c0016cf9 <Vm::inbv(unsigned short)>
c001780f:	0f b6 c0             	movzx  eax,al
c0017812:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017815:	eb 3a                	jmp    c0017851 <Vm::faultHandler(regs*)+0x651>
c0017817:	83 e5 01             	and    ebp,0x1
c001781a:	74 07                	je     c0017823 <Vm::faultHandler(regs*)+0x623>
c001781c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017820:	ed                   	in     eax,dx
c0017821:	eb 14                	jmp    c0017837 <Vm::faultHandler(regs*)+0x637>
c0017823:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017826:	66 31 f6             	xor    si,si
c0017829:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001782c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017830:	66 ed                	in     ax,dx
c0017832:	0f b7 c0             	movzx  eax,ax
c0017835:	09 f0                	or     eax,esi
c0017837:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001783a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001783e:	eb 7e                	jmp    c00178be <Vm::faultHandler(regs*)+0x6be>
c0017840:	52                   	push   edx
c0017841:	52                   	push   edx
c0017842:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017846:	50                   	push   eax
c0017847:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001784b:	50                   	push   eax
c001784c:	e8 bb f4 ff ff       	call   c0016d0c <Vm::outbv(unsigned short, unsigned char)>
c0017851:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017855:	eb 4f                	jmp    c00178a6 <Vm::faultHandler(regs*)+0x6a6>
c0017857:	83 e5 01             	and    ebp,0x1
c001785a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001785d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017861:	74 03                	je     c0017866 <Vm::faultHandler(regs*)+0x666>
c0017863:	ef                   	out    dx,eax
c0017864:	eb d4                	jmp    c001783a <Vm::faultHandler(regs*)+0x63a>
c0017866:	66 ef                	out    dx,ax
c0017868:	eb d0                	jmp    c001783a <Vm::faultHandler(regs*)+0x63a>
c001786a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001786e:	83 ec 0c             	sub    esp,0xc
c0017871:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017878:	50                   	push   eax
c0017879:	e8 7b f4 ff ff       	call   c0016cf9 <Vm::inbv(unsigned short)>
c001787e:	0f b6 c0             	movzx  eax,al
c0017881:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017884:	eb 1d                	jmp    c00178a3 <Vm::faultHandler(regs*)+0x6a3>
c0017886:	83 e5 01             	and    ebp,0x1
c0017889:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001788c:	74 03                	je     c0017891 <Vm::faultHandler(regs*)+0x691>
c001788e:	ed                   	in     eax,dx
c001788f:	eb 0d                	jmp    c001789e <Vm::faultHandler(regs*)+0x69e>
c0017891:	66 ed                	in     ax,dx
c0017893:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017896:	0f b7 c0             	movzx  eax,ax
c0017899:	66 31 d2             	xor    dx,dx
c001789c:	09 d0                	or     eax,edx
c001789e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00178a1:	eb 18                	jmp    c00178bb <Vm::faultHandler(regs*)+0x6bb>
c00178a3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178a6:	83 c4 10             	add    esp,0x10
c00178a9:	eb 13                	jmp    c00178be <Vm::faultHandler(regs*)+0x6be>
c00178ab:	83 e5 01             	and    ebp,0x1
c00178ae:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00178b1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00178b4:	74 03                	je     c00178b9 <Vm::faultHandler(regs*)+0x6b9>
c00178b6:	ef                   	out    dx,eax
c00178b7:	eb 02                	jmp    c00178bb <Vm::faultHandler(regs*)+0x6bb>
c00178b9:	66 ef                	out    dx,ax
c00178bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178be:	b0 01                	mov    al,0x1
c00178c0:	eb 60                	jmp    c0017922 <Vm::faultHandler(regs*)+0x722>
c00178c2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00178c6:	50                   	push   eax
c00178c7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00178cb:	50                   	push   eax
c00178cc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00178d0:	50                   	push   eax
c00178d1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00178d5:	50                   	push   eax
c00178d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00178da:	50                   	push   eax
c00178db:	52                   	push   edx
c00178dc:	52                   	push   edx
c00178dd:	68 71 2c 02 c0       	push   0xc0022c71
c00178e2:	e8 27 30 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00178e7:	83 c4 20             	add    esp,0x20
c00178ea:	83 ec 0c             	sub    esp,0xc
c00178ed:	6a 60                	push   0x60
c00178ef:	e8 05 f4 ff ff       	call   c0016cf9 <Vm::inbv(unsigned short)>
c00178f4:	83 c4 10             	add    esp,0x10
c00178f7:	0f b6 d0             	movzx  edx,al
c00178fa:	83 fa 1c             	cmp    edx,0x1c
c00178fd:	74 05                	je     c0017904 <Vm::faultHandler(regs*)+0x704>
c00178ff:	83 fa 5a             	cmp    edx,0x5a
c0017902:	75 e6                	jne    c00178ea <Vm::faultHandler(regs*)+0x6ea>
c0017904:	0f b6 c0             	movzx  eax,al
c0017907:	83 f8 1c             	cmp    eax,0x1c
c001790a:	74 05                	je     c0017911 <Vm::faultHandler(regs*)+0x711>
c001790c:	83 f8 5a             	cmp    eax,0x5a
c001790f:	75 0f                	jne    c0017920 <Vm::faultHandler(regs*)+0x720>
c0017911:	83 ec 0c             	sub    esp,0xc
c0017914:	6a 60                	push   0x60
c0017916:	e8 de f3 ff ff       	call   c0016cf9 <Vm::inbv(unsigned short)>
c001791b:	83 c4 10             	add    esp,0x10
c001791e:	eb e4                	jmp    c0017904 <Vm::faultHandler(regs*)+0x704>
c0017920:	31 c0                	xor    eax,eax
c0017922:	83 c4 2c             	add    esp,0x2c
c0017925:	5b                   	pop    ebx
c0017926:	5e                   	pop    esi
c0017927:	5f                   	pop    edi
c0017928:	5d                   	pop    ebp
c0017929:	c3                   	ret    

c001792a <noCopro(unsigned long)>:
c001792a:	c3                   	ret    

c001792b <nmiHandler(regs*, void*)>:
c001792b:	83 ec 0c             	sub    esp,0xc
c001792e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017933:	83 ec 0c             	sub    esp,0xc
c0017936:	50                   	push   eax
c0017937:	e8 9e f9 fe ff       	call   c00072da <Computer::handleNMI()>
c001793c:	83 c4 10             	add    esp,0x10
c001793f:	90                   	nop
c0017940:	83 c4 0c             	add    esp,0xc
c0017943:	c3                   	ret    

c0017944 <doubleFault(regs*, void*)>:
c0017944:	55                   	push   ebp
c0017945:	89 e5                	mov    ebp,esp
c0017947:	83 ec 08             	sub    esp,0x8
c001794a:	83 ec 0c             	sub    esp,0xc
c001794d:	68 d0 2c 02 c0       	push   0xc0022cd0
c0017952:	e8 b0 9c ff ff       	call   c0011607 <KePanic(char const*)>
c0017957:	83 c4 10             	add    esp,0x10
c001795a:	90                   	nop
c001795b:	c9                   	leave  
c001795c:	c3                   	ret    

c001795d <displayDebugInfo(regs*)>:
c001795d:	83 ec 1c             	sub    esp,0x1c
c0017960:	0f 20 c0             	mov    eax,cr0
c0017963:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017967:	0f 20 d0             	mov    eax,cr2
c001796a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001796e:	0f 20 d8             	mov    eax,cr3
c0017971:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017975:	0f 20 e0             	mov    eax,cr4
c0017978:	89 04 24             	mov    DWORD PTR [esp],eax
c001797b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001797f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017982:	83 ec 08             	sub    esp,0x8
c0017985:	50                   	push   eax
c0017986:	68 ec 2c 02 c0       	push   0xc0022cec
c001798b:	e8 7e 2f ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0017990:	83 c4 10             	add    esp,0x10
c0017993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017997:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001799a:	83 ec 08             	sub    esp,0x8
c001799d:	50                   	push   eax
c001799e:	68 dd 2c 02 c0       	push   0xc0022cdd
c00179a3:	e8 66 2f ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00179a8:	83 c4 10             	add    esp,0x10
c00179ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179af:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00179b2:	83 ec 08             	sub    esp,0x8
c00179b5:	50                   	push   eax
c00179b6:	68 e8 2c 02 c0       	push   0xc0022ce8
c00179bb:	e8 4e 2f ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00179c0:	83 c4 10             	add    esp,0x10
c00179c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179ca:	83 ec 08             	sub    esp,0x8
c00179cd:	50                   	push   eax
c00179ce:	68 f7 2c 02 c0       	push   0xc0022cf7
c00179d3:	e8 36 2f ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00179d8:	83 c4 10             	add    esp,0x10
c00179db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179df:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00179e2:	83 ec 08             	sub    esp,0x8
c00179e5:	50                   	push   eax
c00179e6:	68 02 2d 02 c0       	push   0xc0022d02
c00179eb:	e8 1e 2f ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00179f0:	83 c4 10             	add    esp,0x10
c00179f3:	83 ec 08             	sub    esp,0x8
c00179f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179fa:	68 0d 2d 02 c0       	push   0xc0022d0d
c00179ff:	e8 0a 2f ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0017a04:	83 c4 10             	add    esp,0x10
c0017a07:	83 ec 08             	sub    esp,0x8
c0017a0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017a0e:	68 18 2d 02 c0       	push   0xc0022d18
c0017a13:	e8 f6 2e ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0017a18:	83 c4 10             	add    esp,0x10
c0017a1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a1f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a22:	c1 e0 05             	shl    eax,0x5
c0017a25:	8d 90 a0 40 02 c0    	lea    edx,[eax-0x3ffdbf60]
c0017a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a32:	83 ec 04             	sub    esp,0x4
c0017a35:	52                   	push   edx
c0017a36:	50                   	push   eax
c0017a37:	68 23 2d 02 c0       	push   0xc0022d23
c0017a3c:	e8 cd 2e ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0017a41:	83 c4 10             	add    esp,0x10
c0017a44:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a49:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a4f:	83 ec 0c             	sub    esp,0xc
c0017a52:	50                   	push   eax
c0017a53:	e8 1b 0d ff ff       	call   c0008773 <setActiveTerminal(VgaText*)>
c0017a58:	83 c4 10             	add    esp,0x10
c0017a5b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a60:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a66:	83 ec 08             	sub    esp,0x8
c0017a69:	68 32 2d 02 c0       	push   0xc0022d32
c0017a6e:	50                   	push   eax
c0017a6f:	e8 3c 10 ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0017a74:	83 c4 10             	add    esp,0x10
c0017a77:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a7c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a82:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a86:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017a89:	83 ec 08             	sub    esp,0x8
c0017a8c:	52                   	push   edx
c0017a8d:	50                   	push   eax
c0017a8e:	e8 d7 0f ff ff       	call   c0008a6a <VgaText::putx(unsigned int)>
c0017a93:	83 c4 10             	add    esp,0x10
c0017a96:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a9b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aa1:	83 ec 08             	sub    esp,0x8
c0017aa4:	68 40 2d 02 c0       	push   0xc0022d40
c0017aa9:	50                   	push   eax
c0017aaa:	e8 01 10 ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0017aaf:	83 c4 10             	add    esp,0x10
c0017ab2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ab7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017abd:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017ac2:	8b 12                	mov    edx,DWORD PTR [edx]
c0017ac4:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017ac7:	83 c2 0c             	add    edx,0xc
c0017aca:	83 ec 08             	sub    esp,0x8
c0017acd:	52                   	push   edx
c0017ace:	50                   	push   eax
c0017acf:	e8 dc 0f ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0017ad4:	83 c4 10             	add    esp,0x10
c0017ad7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017adc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ae2:	83 ec 08             	sub    esp,0x8
c0017ae5:	68 49 2d 02 c0       	push   0xc0022d49
c0017aea:	50                   	push   eax
c0017aeb:	e8 c0 0f ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0017af0:	83 c4 10             	add    esp,0x10
c0017af3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017af8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017afe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b02:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017b05:	83 ec 08             	sub    esp,0x8
c0017b08:	52                   	push   edx
c0017b09:	50                   	push   eax
c0017b0a:	e8 5b 0f ff ff       	call   c0008a6a <VgaText::putx(unsigned int)>
c0017b0f:	83 c4 10             	add    esp,0x10
c0017b12:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b17:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b1d:	83 ec 08             	sub    esp,0x8
c0017b20:	68 51 2d 02 c0       	push   0xc0022d51
c0017b25:	50                   	push   eax
c0017b26:	e8 85 0f ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0017b2b:	83 c4 10             	add    esp,0x10
c0017b2e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b3d:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017b40:	83 ec 08             	sub    esp,0x8
c0017b43:	52                   	push   edx
c0017b44:	50                   	push   eax
c0017b45:	e8 20 0f ff ff       	call   c0008a6a <VgaText::putx(unsigned int)>
c0017b4a:	83 c4 10             	add    esp,0x10
c0017b4d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b52:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b58:	83 ec 08             	sub    esp,0x8
c0017b5b:	68 59 2d 02 c0       	push   0xc0022d59
c0017b60:	50                   	push   eax
c0017b61:	e8 4a 0f ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0017b66:	83 c4 10             	add    esp,0x10
c0017b69:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b78:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017b7b:	83 ec 08             	sub    esp,0x8
c0017b7e:	52                   	push   edx
c0017b7f:	50                   	push   eax
c0017b80:	e8 e5 0e ff ff       	call   c0008a6a <VgaText::putx(unsigned int)>
c0017b85:	83 c4 10             	add    esp,0x10
c0017b88:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b8d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b93:	83 ec 08             	sub    esp,0x8
c0017b96:	68 61 2d 02 c0       	push   0xc0022d61
c0017b9b:	50                   	push   eax
c0017b9c:	e8 0f 0f ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0017ba1:	83 c4 10             	add    esp,0x10
c0017ba4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017baf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bb3:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017bb6:	83 ec 08             	sub    esp,0x8
c0017bb9:	52                   	push   edx
c0017bba:	50                   	push   eax
c0017bbb:	e8 aa 0e ff ff       	call   c0008a6a <VgaText::putx(unsigned int)>
c0017bc0:	83 c4 10             	add    esp,0x10
c0017bc3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bc8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bce:	83 ec 08             	sub    esp,0x8
c0017bd1:	68 69 2d 02 c0       	push   0xc0022d69
c0017bd6:	50                   	push   eax
c0017bd7:	e8 d4 0e ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0017bdc:	83 c4 10             	add    esp,0x10
c0017bdf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017be4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bee:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017bf1:	83 ec 08             	sub    esp,0x8
c0017bf4:	52                   	push   edx
c0017bf5:	50                   	push   eax
c0017bf6:	e8 6f 0e ff ff       	call   c0008a6a <VgaText::putx(unsigned int)>
c0017bfb:	83 c4 10             	add    esp,0x10
c0017bfe:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c09:	83 ec 08             	sub    esp,0x8
c0017c0c:	68 71 2d 02 c0       	push   0xc0022d71
c0017c11:	50                   	push   eax
c0017c12:	e8 99 0e ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0017c17:	83 c4 10             	add    esp,0x10
c0017c1a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c29:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017c2c:	83 ec 08             	sub    esp,0x8
c0017c2f:	52                   	push   edx
c0017c30:	50                   	push   eax
c0017c31:	e8 34 0e ff ff       	call   c0008a6a <VgaText::putx(unsigned int)>
c0017c36:	83 c4 10             	add    esp,0x10
c0017c39:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c44:	83 ec 08             	sub    esp,0x8
c0017c47:	68 79 2d 02 c0       	push   0xc0022d79
c0017c4c:	50                   	push   eax
c0017c4d:	e8 5e 0e ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0017c52:	83 c4 10             	add    esp,0x10
c0017c55:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c60:	83 ec 08             	sub    esp,0x8
c0017c63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c67:	50                   	push   eax
c0017c68:	e8 fd 0d ff ff       	call   c0008a6a <VgaText::putx(unsigned int)>
c0017c6d:	83 c4 10             	add    esp,0x10
c0017c70:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c7b:	83 ec 08             	sub    esp,0x8
c0017c7e:	68 82 2d 02 c0       	push   0xc0022d82
c0017c83:	50                   	push   eax
c0017c84:	e8 27 0e ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0017c89:	83 c4 10             	add    esp,0x10
c0017c8c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c91:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c97:	83 ec 08             	sub    esp,0x8
c0017c9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c9e:	50                   	push   eax
c0017c9f:	e8 c6 0d ff ff       	call   c0008a6a <VgaText::putx(unsigned int)>
c0017ca4:	83 c4 10             	add    esp,0x10
c0017ca7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cb2:	83 ec 08             	sub    esp,0x8
c0017cb5:	68 8a 2d 02 c0       	push   0xc0022d8a
c0017cba:	50                   	push   eax
c0017cbb:	e8 f0 0d ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0017cc0:	83 c4 10             	add    esp,0x10
c0017cc3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cc8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cce:	83 ec 08             	sub    esp,0x8
c0017cd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017cd5:	50                   	push   eax
c0017cd6:	e8 8f 0d ff ff       	call   c0008a6a <VgaText::putx(unsigned int)>
c0017cdb:	83 c4 10             	add    esp,0x10
c0017cde:	fa                   	cli    
c0017cdf:	f4                   	hlt    
c0017ce0:	eb fe                	jmp    c0017ce0 <displayDebugInfo(regs*)+0x383>

c0017ce2 <HalSystemIdle()>:
c0017ce2:	56                   	push   esi
c0017ce3:	53                   	push   ebx
c0017ce4:	83 ec 14             	sub    esp,0x14
c0017ce7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017cec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017cf2:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017cf8:	83 e0 04             	and    eax,0x4
c0017cfb:	0f b6 c0             	movzx  eax,al
c0017cfe:	85 c0                	test   eax,eax
c0017d00:	0f 95 c0             	setne  al
c0017d03:	0f b6 c0             	movzx  eax,al
c0017d06:	85 c0                	test   eax,eax
c0017d08:	74 4c                	je     c0017d56 <HalSystemIdle()+0x74>
c0017d0a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d0f:	83 ec 08             	sub    esp,0x8
c0017d12:	68 e1 00 00 00       	push   0xe1
c0017d17:	50                   	push   eax
c0017d18:	e8 c9 f3 fe ff       	call   c00070e6 <Computer::rdmsr(unsigned int)>
c0017d1d:	83 c4 10             	add    esp,0x10
c0017d20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d28:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d2d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d31:	83 e2 02             	and    edx,0x2
c0017d34:	89 d3                	mov    ebx,edx
c0017d36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d3a:	83 e2 00             	and    edx,0x0
c0017d3d:	89 d6                	mov    esi,edx
c0017d3f:	56                   	push   esi
c0017d40:	53                   	push   ebx
c0017d41:	68 e1 00 00 00       	push   0xe1
c0017d46:	50                   	push   eax
c0017d47:	e8 c6 f3 fe ff       	call   c0007112 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017d4c:	83 c4 10             	add    esp,0x10
c0017d4f:	e8 40 84 fe ff       	call   c0000194 <doTPAUSE>
c0017d54:	eb 01                	jmp    c0017d57 <HalSystemIdle()+0x75>
c0017d56:	f4                   	hlt    
c0017d57:	90                   	nop
c0017d58:	83 c4 14             	add    esp,0x14
c0017d5b:	5b                   	pop    ebx
c0017d5c:	5e                   	pop    esi
c0017d5d:	c3                   	ret    

c0017d5e <displayProgramFault(char const*)>:
c0017d5e:	83 ec 0c             	sub    esp,0xc
c0017d61:	83 ec 0c             	sub    esp,0xc
c0017d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d68:	e8 a1 2b ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0017d6d:	83 c4 10             	add    esp,0x10
c0017d70:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d75:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d77:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d7a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d80:	85 c0                	test   eax,eax
c0017d82:	74 21                	je     c0017da5 <displayProgramFault(char const*)+0x47>
c0017d84:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d89:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d8e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d94:	6a 04                	push   0x4
c0017d96:	6a 0f                	push   0xf
c0017d98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d9c:	50                   	push   eax
c0017d9d:	e8 80 0d ff ff       	call   c0008b22 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017da2:	83 c4 10             	add    esp,0x10
c0017da5:	90                   	nop
c0017da6:	83 c4 0c             	add    esp,0xc
c0017da9:	c3                   	ret    

c0017daa <gpFault(regs*, void*)>:
c0017daa:	83 ec 1c             	sub    esp,0x1c
c0017dad:	c7 05 74 c7 02 c0 00 72 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017200
c0017db7:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017dbc:	85 c0                	test   eax,eax
c0017dbe:	74 1e                	je     c0017dde <gpFault(regs*, void*)+0x34>
c0017dc0:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017dc5:	83 ec 0c             	sub    esp,0xc
c0017dc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dcc:	ff d0                	call   eax
c0017dce:	83 c4 10             	add    esp,0x10
c0017dd1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017dd5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017dda:	85 c0                	test   eax,eax
c0017ddc:	75 2e                	jne    c0017e0c <gpFault(regs*, void*)+0x62>
c0017dde:	83 ec 0c             	sub    esp,0xc
c0017de1:	68 92 2d 02 c0       	push   0xc0022d92
c0017de6:	e8 73 ff ff ff       	call   c0017d5e <displayProgramFault(char const*)>
c0017deb:	83 c4 10             	add    esp,0x10
c0017dee:	83 ec 0c             	sub    esp,0xc
c0017df1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017df5:	e8 63 fb ff ff       	call   c001795d <displayDebugInfo(regs*)>
c0017dfa:	83 c4 10             	add    esp,0x10
c0017dfd:	83 ec 0c             	sub    esp,0xc
c0017e00:	6a 00                	push   0x0
c0017e02:	e8 99 ed ff ff       	call   c0016ba0 <Thr::terminateFromIRQ(int)>
c0017e07:	83 c4 10             	add    esp,0x10
c0017e0a:	eb 01                	jmp    c0017e0d <gpFault(regs*, void*)+0x63>
c0017e0c:	90                   	nop
c0017e0d:	83 c4 1c             	add    esp,0x1c
c0017e10:	c3                   	ret    

c0017e11 <pgFault(regs*, void*)>:
c0017e11:	83 ec 1c             	sub    esp,0x1c
c0017e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e18:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017e1b:	0f 20 d0             	mov    eax,cr2
c0017e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e26:	83 ec 04             	sub    esp,0x4
c0017e29:	52                   	push   edx
c0017e2a:	50                   	push   eax
c0017e2b:	68 70 2e 02 c0       	push   0xc0022e70
c0017e30:	e8 d9 2a ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0017e35:	83 c4 10             	add    esp,0x10
c0017e38:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e3f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e42:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017e48:	0f 20 d2             	mov    edx,cr2
c0017e4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e53:	83 ec 08             	sub    esp,0x8
c0017e56:	52                   	push   edx
c0017e57:	50                   	push   eax
c0017e58:	e8 21 25 ff ff       	call   c000a37e <VAS::tryLoadBackOffDisk(unsigned long)>
c0017e5d:	83 c4 10             	add    esp,0x10
c0017e60:	0f b6 c0             	movzx  eax,al
c0017e63:	85 c0                	test   eax,eax
c0017e65:	75 2e                	jne    c0017e95 <pgFault(regs*, void*)+0x84>
c0017e67:	83 ec 0c             	sub    esp,0xc
c0017e6a:	68 ab 2d 02 c0       	push   0xc0022dab
c0017e6f:	e8 ea fe ff ff       	call   c0017d5e <displayProgramFault(char const*)>
c0017e74:	83 c4 10             	add    esp,0x10
c0017e77:	83 ec 0c             	sub    esp,0xc
c0017e7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e7e:	e8 da fa ff ff       	call   c001795d <displayDebugInfo(regs*)>
c0017e83:	83 c4 10             	add    esp,0x10
c0017e86:	83 ec 0c             	sub    esp,0xc
c0017e89:	6a 00                	push   0x0
c0017e8b:	e8 10 ed ff ff       	call   c0016ba0 <Thr::terminateFromIRQ(int)>
c0017e90:	83 c4 10             	add    esp,0x10
c0017e93:	eb 01                	jmp    c0017e96 <pgFault(regs*, void*)+0x85>
c0017e95:	90                   	nop
c0017e96:	83 c4 1c             	add    esp,0x1c
c0017e99:	c3                   	ret    

c0017e9a <otherISRHandler(regs*, void*)>:
c0017e9a:	83 ec 0c             	sub    esp,0xc
c0017e9d:	83 ec 0c             	sub    esp,0xc
c0017ea0:	68 98 2e 02 c0       	push   0xc0022e98
c0017ea5:	e8 b4 fe ff ff       	call   c0017d5e <displayProgramFault(char const*)>
c0017eaa:	83 c4 10             	add    esp,0x10
c0017ead:	83 ec 0c             	sub    esp,0xc
c0017eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017eb4:	e8 a4 fa ff ff       	call   c001795d <displayDebugInfo(regs*)>
c0017eb9:	83 c4 10             	add    esp,0x10
c0017ebc:	83 ec 0c             	sub    esp,0xc
c0017ebf:	6a 00                	push   0x0
c0017ec1:	e8 da ec ff ff       	call   c0016ba0 <Thr::terminateFromIRQ(int)>
c0017ec6:	83 c4 10             	add    esp,0x10
c0017ec9:	90                   	nop
c0017eca:	83 c4 0c             	add    esp,0xc
c0017ecd:	c3                   	ret    

c0017ece <opcodeFault(regs*, void*)>:
c0017ece:	55                   	push   ebp
c0017ecf:	89 e5                	mov    ebp,esp
c0017ed1:	83 ec 08             	sub    esp,0x8
c0017ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ed7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017eda:	83 ec 08             	sub    esp,0x8
c0017edd:	50                   	push   eax
c0017ede:	68 b6 2d 02 c0       	push   0xc0022db6
c0017ee3:	e8 26 2a ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0017ee8:	83 c4 10             	add    esp,0x10
c0017eeb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017ef0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017ef6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017efc:	0f b6 c0             	movzx  eax,al
c0017eff:	85 c0                	test   eax,eax
c0017f01:	74 21                	je     c0017f24 <opcodeFault(regs*, void*)+0x56>
c0017f03:	83 ec 0c             	sub    esp,0xc
c0017f06:	68 c0 2e 02 c0       	push   0xc0022ec0
c0017f0b:	e8 fe 29 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0017f10:	83 c4 10             	add    esp,0x10
c0017f13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f16:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f19:	8d 50 19             	lea    edx,[eax+0x19]
c0017f1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f1f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f22:	eb 2b                	jmp    c0017f4f <opcodeFault(regs*, void*)+0x81>
c0017f24:	83 ec 0c             	sub    esp,0xc
c0017f27:	68 c4 2d 02 c0       	push   0xc0022dc4
c0017f2c:	e8 2d fe ff ff       	call   c0017d5e <displayProgramFault(char const*)>
c0017f31:	83 c4 10             	add    esp,0x10
c0017f34:	83 ec 0c             	sub    esp,0xc
c0017f37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017f3a:	e8 1e fa ff ff       	call   c001795d <displayDebugInfo(regs*)>
c0017f3f:	83 c4 10             	add    esp,0x10
c0017f42:	83 ec 0c             	sub    esp,0xc
c0017f45:	6a 00                	push   0x0
c0017f47:	e8 54 ec ff ff       	call   c0016ba0 <Thr::terminateFromIRQ(int)>
c0017f4c:	83 c4 10             	add    esp,0x10
c0017f4f:	c9                   	leave  
c0017f50:	c3                   	ret    

c0017f51 <i386SaveCoprocessor(void*)>:
c0017f51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f55:	83 c0 3f             	add    eax,0x3f
c0017f58:	83 e0 c0             	and    eax,0xffffffc0
c0017f5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f5f:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017f65 <i386LoadCoprocessor(void*)>:
c0017f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f69:	83 c0 3f             	add    eax,0x3f
c0017f6c:	83 e0 c0             	and    eax,0xffffffc0
c0017f6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f73:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017f79 <x87EmulHandler(regs*, void*)>:
c0017f79:	53                   	push   ebx
c0017f7a:	83 ec 08             	sub    esp,0x8
c0017f7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f82:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017f86:	74 10                	je     c0017f98 <x87EmulHandler(regs*, void*)+0x1f>
c0017f88:	83 ec 0c             	sub    esp,0xc
c0017f8b:	68 d1 2d 02 c0       	push   0xc0022dd1
c0017f90:	e8 72 96 ff ff       	call   c0011607 <KePanic(char const*)>
c0017f95:	83 c4 10             	add    esp,0x10
c0017f98:	0f 20 c0             	mov    eax,cr0
c0017f9b:	a8 08                	test   al,0x8
c0017f9d:	74 59                	je     c0017ff8 <x87EmulHandler(regs*, void*)+0x7f>
c0017f9f:	0f 06                	clts   
c0017fa1:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017fa6:	85 c0                	test   eax,eax
c0017fa8:	74 0e                	je     c0017fb8 <x87EmulHandler(regs*, void*)+0x3f>
c0017faa:	83 ec 0c             	sub    esp,0xc
c0017fad:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017fb0:	e8 9c ff ff ff       	call   c0017f51 <i386SaveCoprocessor(void*)>
c0017fb5:	83 c4 10             	add    esp,0x10
c0017fb8:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017fbe:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017fc2:	75 12                	jne    c0017fd6 <x87EmulHandler(regs*, void*)+0x5d>
c0017fc4:	83 ec 0c             	sub    esp,0xc
c0017fc7:	68 40 02 00 00       	push   0x240
c0017fcc:	e8 06 fb fe ff       	call   c0007ad7 <malloc>
c0017fd1:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017fd4:	eb 10                	jmp    c0017fe6 <x87EmulHandler(regs*, void*)+0x6d>
c0017fd6:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017fdb:	83 ec 0c             	sub    esp,0xc
c0017fde:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017fe1:	e8 7f ff ff ff       	call   c0017f65 <i386LoadCoprocessor(void*)>
c0017fe6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017feb:	83 c4 10             	add    esp,0x10
c0017fee:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017ff3:	83 c4 08             	add    esp,0x8
c0017ff6:	5b                   	pop    ebx
c0017ff7:	c3                   	ret    
c0017ff8:	83 ec 0c             	sub    esp,0xc
c0017ffb:	68 e5 2d 02 c0       	push   0xc0022de5
c0018000:	e8 09 29 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c0018005:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001800d:	83 c4 18             	add    esp,0x18
c0018010:	5b                   	pop    ebx
c0018011:	e9 8a eb ff ff       	jmp    c0016ba0 <Thr::terminateFromIRQ(int)>

c0018016 <HalInitialiseCoprocessor()>:
c0018016:	83 ec 10             	sub    esp,0x10
c0018019:	6a 00                	push   0x0
c001801b:	68 79 7f 01 c0       	push   0xc0017f79
c0018020:	6a 07                	push   0x7
c0018022:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c001802c:	e8 bd 4e ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018031:	e8 aa 70 00 00       	call   c001f0e0 <avxDetect>
c0018036:	83 c4 10             	add    esp,0x10
c0018039:	85 c0                	test   eax,eax
c001803b:	74 1c                	je     c0018059 <HalInitialiseCoprocessor()+0x43>
c001803d:	c7 05 70 c7 02 c0 0a f1 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f10a
c0018047:	c7 05 6c c7 02 c0 1b f1 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f11b
c0018051:	83 c4 0c             	add    esp,0xc
c0018054:	e9 d3 70 00 00       	jmp    c001f12c <avxInit>
c0018059:	e8 12 74 00 00       	call   c001f470 <absolutelyNoChanceInHell>
c001805e:	85 c0                	test   eax,eax
c0018060:	74 1c                	je     c001807e <HalInitialiseCoprocessor()+0x68>
c0018062:	c7 05 70 c7 02 c0 88 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f488
c001806c:	c7 05 6c c7 02 c0 90 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f490
c0018076:	83 c4 0c             	add    esp,0xc
c0018079:	e9 1a 74 00 00       	jmp    c001f498 <sseInit>
c001807e:	e8 33 74 00 00       	call   c001f4b6 <x87Detect>
c0018083:	85 c0                	test   eax,eax
c0018085:	74 1c                	je     c00180a3 <HalInitialiseCoprocessor()+0x8d>
c0018087:	c7 05 70 c7 02 c0 d1 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f4d1
c0018091:	c7 05 6c c7 02 c0 d8 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f4d8
c001809b:	83 c4 0c             	add    esp,0xc
c001809e:	e9 3c 74 00 00       	jmp    c001f4df <x87Init>
c00180a3:	c7 05 70 c7 02 c0 2a 79 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001792a
c00180ad:	c7 05 6c c7 02 c0 2a 79 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001792a
c00180b7:	0f 20 c0             	mov    eax,cr0
c00180ba:	83 c8 04             	or     eax,0x4
c00180bd:	0f 22 c0             	mov    cr0,eax
c00180c0:	83 c4 0c             	add    esp,0xc
c00180c3:	c3                   	ret    

c00180c4 <HalPanic(char const*)>:
c00180c4:	53                   	push   ebx
c00180c5:	83 ec 10             	sub    esp,0x10
c00180c8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00180cc:	fa                   	cli    
c00180cd:	53                   	push   ebx
c00180ce:	68 fb 2d 02 c0       	push   0xc0022dfb
c00180d3:	e8 36 28 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c00180d8:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c00180dd:	83 c4 10             	add    esp,0x10
c00180e0:	85 c0                	test   eax,eax
c00180e2:	74 09                	je     c00180ed <HalPanic(char const*)+0x29>
c00180e4:	83 ec 0c             	sub    esp,0xc
c00180e7:	53                   	push   ebx
c00180e8:	ff d0                	call   eax
c00180ea:	83 c4 10             	add    esp,0x10
c00180ed:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00180f2:	85 c0                	test   eax,eax
c00180f4:	0f 84 dc 00 00 00    	je     c00181d6 <HalPanic(char const*)+0x112>
c00180fa:	52                   	push   edx
c00180fb:	6a 01                	push   0x1
c00180fd:	6a 0f                	push   0xf
c00180ff:	50                   	push   eax
c0018100:	e8 c9 04 ff ff       	call   c00085ce <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018105:	59                   	pop    ecx
c0018106:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001810c:	e8 ad 06 ff ff       	call   c00087be <VgaText::clearScreen()>
c0018111:	58                   	pop    eax
c0018112:	5a                   	pop    edx
c0018113:	68 3c 0f 02 c0       	push   0xc0020f3c
c0018118:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001811e:	e8 e3 04 ff ff       	call   c0008606 <VgaText::setTitle(char*)>
c0018123:	83 c4 0c             	add    esp,0xc
c0018126:	6a 01                	push   0x1
c0018128:	6a 0f                	push   0xf
c001812a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018130:	e8 99 04 ff ff       	call   c00085ce <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018135:	59                   	pop    ecx
c0018136:	58                   	pop    eax
c0018137:	68 14 2e 02 c0       	push   0xc0022e14
c001813c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018142:	e8 69 09 ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c0018147:	83 c4 0c             	add    esp,0xc
c001814a:	6a 0f                	push   0xf
c001814c:	6a 01                	push   0x1
c001814e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018154:	e8 75 04 ff ff       	call   c00085ce <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018159:	58                   	pop    eax
c001815a:	5a                   	pop    edx
c001815b:	68 1d 2e 02 c0       	push   0xc0022e1d
c0018160:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018166:	e8 45 09 ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c001816b:	83 c4 0c             	add    esp,0xc
c001816e:	6a 01                	push   0x1
c0018170:	6a 0f                	push   0xf
c0018172:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018178:	e8 51 04 ff ff       	call   c00085ce <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001817d:	59                   	pop    ecx
c001817e:	58                   	pop    eax
c001817f:	68 61 2e 02 c0       	push   0xc0022e61
c0018184:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001818a:	e8 21 09 ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c001818f:	58                   	pop    eax
c0018190:	5a                   	pop    edx
c0018191:	68 2a 2e 02 c0       	push   0xc0022e2a
c0018196:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001819c:	e8 0f 09 ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c00181a1:	59                   	pop    ecx
c00181a2:	58                   	pop    eax
c00181a3:	68 64 2e 02 c0       	push   0xc0022e64
c00181a8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181ae:	e8 fd 08 ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c00181b3:	58                   	pop    eax
c00181b4:	5a                   	pop    edx
c00181b5:	53                   	push   ebx
c00181b6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181bc:	e8 ef 08 ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c00181c1:	59                   	pop    ecx
c00181c2:	5b                   	pop    ebx
c00181c3:	68 61 2e 02 c0       	push   0xc0022e61
c00181c8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181ce:	e8 dd 08 ff ff       	call   c0008ab0 <VgaText::puts(char const*)>
c00181d3:	83 c4 10             	add    esp,0x10
c00181d6:	eb fe                	jmp    c00181d6 <HalPanic(char const*)+0x112>

c00181d8 <HalQueryPerformanceCounter()>:
c00181d8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00181dd:	31 d2                	xor    edx,edx
c00181df:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00181e5:	31 c0                	xor    eax,eax
c00181e7:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00181ee:	74 02                	je     c00181f2 <HalQueryPerformanceCounter()+0x1a>
c00181f0:	0f 31                	rdtsc  
c00181f2:	c3                   	ret    

c00181f3 <HalInitialise()>:
c00181f3:	53                   	push   ebx
c00181f4:	83 ec 08             	sub    esp,0x8
c00181f7:	e8 29 4f ff ff       	call   c000d125 <setupINTS()>
c00181fc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018201:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0018208:	75 0f                	jne    c0018219 <HalInitialise()+0x26>
c001820a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018210:	83 e2 fe             	and    edx,0xfffffffe
c0018213:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018219:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018220:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018226:	83 e2 fe             	and    edx,0xfffffffe
c0018229:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001822f:	e8 a0 02 00 00       	call   c00184d4 <picOpen()>
c0018234:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001823b:	74 0a                	je     c0018247 <HalInitialise()+0x54>
c001823d:	e8 e2 01 00 00       	call   c0018424 <picDisable()>
c0018242:	e8 0d 68 00 00       	call   c001ea54 <apicOpen()>
c0018247:	50                   	push   eax
c0018248:	bb 0f 00 00 00       	mov    ebx,0xf
c001824d:	6a 00                	push   0x0
c001824f:	68 9a 7e 01 c0       	push   0xc0017e9a
c0018254:	6a 00                	push   0x0
c0018256:	e8 93 4c ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c001825b:	83 c4 0c             	add    esp,0xc
c001825e:	6a 00                	push   0x0
c0018260:	68 9a 7e 01 c0       	push   0xc0017e9a
c0018265:	6a 01                	push   0x1
c0018267:	e8 82 4c ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c001826c:	83 c4 0c             	add    esp,0xc
c001826f:	6a 00                	push   0x0
c0018271:	68 2b 79 01 c0       	push   0xc001792b
c0018276:	6a 02                	push   0x2
c0018278:	e8 71 4c ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c001827d:	83 c4 0c             	add    esp,0xc
c0018280:	6a 00                	push   0x0
c0018282:	68 9a 7e 01 c0       	push   0xc0017e9a
c0018287:	6a 03                	push   0x3
c0018289:	e8 60 4c ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c001828e:	83 c4 0c             	add    esp,0xc
c0018291:	6a 00                	push   0x0
c0018293:	68 9a 7e 01 c0       	push   0xc0017e9a
c0018298:	6a 04                	push   0x4
c001829a:	e8 4f 4c ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c001829f:	83 c4 0c             	add    esp,0xc
c00182a2:	6a 00                	push   0x0
c00182a4:	68 9a 7e 01 c0       	push   0xc0017e9a
c00182a9:	6a 05                	push   0x5
c00182ab:	e8 3e 4c ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182b0:	83 c4 0c             	add    esp,0xc
c00182b3:	6a 00                	push   0x0
c00182b5:	68 ce 7e 01 c0       	push   0xc0017ece
c00182ba:	6a 06                	push   0x6
c00182bc:	e8 2d 4c ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182c1:	83 c4 0c             	add    esp,0xc
c00182c4:	6a 00                	push   0x0
c00182c6:	68 44 79 01 c0       	push   0xc0017944
c00182cb:	6a 08                	push   0x8
c00182cd:	e8 1c 4c ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182d2:	83 c4 0c             	add    esp,0xc
c00182d5:	6a 00                	push   0x0
c00182d7:	68 9a 7e 01 c0       	push   0xc0017e9a
c00182dc:	6a 09                	push   0x9
c00182de:	e8 0b 4c ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182e3:	83 c4 0c             	add    esp,0xc
c00182e6:	6a 00                	push   0x0
c00182e8:	68 9a 7e 01 c0       	push   0xc0017e9a
c00182ed:	6a 0a                	push   0xa
c00182ef:	e8 fa 4b ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182f4:	83 c4 0c             	add    esp,0xc
c00182f7:	6a 00                	push   0x0
c00182f9:	68 9a 7e 01 c0       	push   0xc0017e9a
c00182fe:	6a 0b                	push   0xb
c0018300:	e8 e9 4b ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018305:	83 c4 0c             	add    esp,0xc
c0018308:	6a 00                	push   0x0
c001830a:	68 aa 7d 01 c0       	push   0xc0017daa
c001830f:	6a 0d                	push   0xd
c0018311:	e8 d8 4b ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018316:	83 c4 0c             	add    esp,0xc
c0018319:	6a 00                	push   0x0
c001831b:	68 11 7e 01 c0       	push   0xc0017e11
c0018320:	6a 0e                	push   0xe
c0018322:	e8 c7 4b ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018327:	83 c4 10             	add    esp,0x10
c001832a:	50                   	push   eax
c001832b:	6a 00                	push   0x0
c001832d:	68 9a 7e 01 c0       	push   0xc0017e9a
c0018332:	53                   	push   ebx
c0018333:	43                   	inc    ebx
c0018334:	e8 b5 4b ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018339:	83 c4 10             	add    esp,0x10
c001833c:	83 fb 1e             	cmp    ebx,0x1e
c001833f:	75 e9                	jne    c001832a <HalInitialise()+0x137>
c0018341:	50                   	push   eax
c0018342:	6a 00                	push   0x0
c0018344:	68 bb 2a 01 c0       	push   0xc0012abb
c0018349:	6a 60                	push   0x60
c001834b:	e8 9e 4b ff ff       	call   c000ceee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018350:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018355:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001835f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018366:	e8 6c f7 fe ff       	call   c0007ad7 <malloc>
c001836b:	89 04 24             	mov    DWORD PTR [esp],eax
c001836e:	89 c3                	mov    ebx,eax
c0018370:	e8 37 09 00 00       	call   c0018cac <RTC::RTC()>
c0018375:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001837f:	5a                   	pop    edx
c0018380:	59                   	pop    ecx
c0018381:	53                   	push   ebx
c0018382:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018388:	e8 17 46 ff ff       	call   c000c9a4 <Device::addChild(Device*)>
c001838d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001838f:	6a 00                	push   0x0
c0018391:	6a 00                	push   0x0
c0018393:	6a 00                	push   0x0
c0018395:	53                   	push   ebx
c0018396:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018399:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001839e:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00183a4:	83 c4 28             	add    esp,0x28
c00183a7:	5b                   	pop    ebx
c00183a8:	c3                   	ret    

c00183a9 <HalMakeBeep(int)>:
c00183a9:	53                   	push   ebx
c00183aa:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00183ae:	85 db                	test   ebx,ebx
c00183b0:	75 07                	jne    c00183b9 <HalMakeBeep(int)+0x10>
c00183b2:	e4 61                	in     al,0x61
c00183b4:	83 e0 fc             	and    eax,0xfffffffc
c00183b7:	eb 26                	jmp    c00183df <HalMakeBeep(int)+0x36>
c00183b9:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00183be:	99                   	cdq    
c00183bf:	f7 fb                	idiv   ebx
c00183c1:	89 c1                	mov    ecx,eax
c00183c3:	b0 b6                	mov    al,0xb6
c00183c5:	e6 43                	out    0x43,al
c00183c7:	88 c8                	mov    al,cl
c00183c9:	e6 42                	out    0x42,al
c00183cb:	89 c8                	mov    eax,ecx
c00183cd:	c1 e8 08             	shr    eax,0x8
c00183d0:	e6 42                	out    0x42,al
c00183d2:	e4 61                	in     al,0x61
c00183d4:	89 c2                	mov    edx,eax
c00183d6:	83 ca 03             	or     edx,0x3
c00183d9:	38 d0                	cmp    al,dl
c00183db:	74 04                	je     c00183e1 <HalMakeBeep(int)+0x38>
c00183dd:	88 d0                	mov    al,dl
c00183df:	e6 61                	out    0x61,al
c00183e1:	5b                   	pop    ebx
c00183e2:	c3                   	ret    

c00183e3 <HalGetRand()>:
c00183e3:	31 c0                	xor    eax,eax
c00183e5:	c3                   	ret    

c00183e6 <HalEndOfInterrupt(int)>:
c00183e6:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00183ed:	74 23                	je     c0018412 <HalEndOfInterrupt(int)+0x2c>
c00183ef:	83 ec 14             	sub    esp,0x14
c00183f2:	6a 1b                	push   0x1b
c00183f4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00183fa:	e8 e7 ec fe ff       	call   c00070e6 <Computer::rdmsr(unsigned int)>
c00183ff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018404:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001840e:	83 c4 1c             	add    esp,0x1c
c0018411:	c3                   	ret    
c0018412:	e9 41 02 00 00       	jmp    c0018658 <picEOI(int)>

c0018417 <HalRestart()>:
c0018417:	c3                   	ret    

c0018418 <HalShutdown()>:
c0018418:	c3                   	ret    

c0018419 <HalSleep()>:
c0018419:	c3                   	ret    
c001841a:	66 90                	xchg   ax,ax

c001841c <picIoWait()>:
c001841c:	eb 00                	jmp    c001841e <picIoWait()+0x2>
c001841e:	eb 00                	jmp    c0018420 <picIoWait()+0x4>
c0018420:	90                   	nop
c0018421:	c3                   	ret    
c0018422:	66 90                	xchg   ax,ax

c0018424 <picDisable()>:
c0018424:	83 ec 10             	sub    esp,0x10
c0018427:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001842e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018433:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018437:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001843c:	ee                   	out    dx,al
c001843d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018444:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018449:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001844d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018452:	ee                   	out    dx,al
c0018453:	90                   	nop
c0018454:	83 c4 10             	add    esp,0x10
c0018457:	c3                   	ret    

c0018458 <picGetIRQReg(int)>:
c0018458:	83 ec 10             	sub    esp,0x10
c001845b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001845f:	0f b6 c0             	movzx  eax,al
c0018462:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018469:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001846d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018471:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018476:	ee                   	out    dx,al
c0018477:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001847b:	0f b6 c0             	movzx  eax,al
c001847e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018485:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018489:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001848d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018492:	ee                   	out    dx,al
c0018493:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001849a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001849f:	89 c2                	mov    edx,eax
c00184a1:	ec                   	in     al,dx
c00184a2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00184a6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00184aa:	0f b6 c0             	movzx  eax,al
c00184ad:	c1 e0 08             	shl    eax,0x8
c00184b0:	89 c1                	mov    ecx,eax
c00184b2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00184b9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00184be:	89 c2                	mov    edx,eax
c00184c0:	ec                   	in     al,dx
c00184c1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00184c5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00184c9:	0f b6 c0             	movzx  eax,al
c00184cc:	09 c8                	or     eax,ecx
c00184ce:	83 c4 10             	add    esp,0x10
c00184d1:	c3                   	ret    
c00184d2:	66 90                	xchg   ax,ax

c00184d4 <picOpen()>:
c00184d4:	83 ec 50             	sub    esp,0x50
c00184d7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00184de:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00184e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00184e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00184eb:	ee                   	out    dx,al
c00184ec:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00184f3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00184f8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00184fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018500:	ee                   	out    dx,al
c0018501:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018509:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018511:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018518:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001851c:	89 c2                	mov    edx,eax
c001851e:	ec                   	in     al,dx
c001851f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018523:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018527:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001852b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018532:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018536:	89 c2                	mov    edx,eax
c0018538:	ec                   	in     al,dx
c0018539:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001853d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018541:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018545:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001854c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018551:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018555:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018559:	ee                   	out    dx,al
c001855a:	e8 bd fe ff ff       	call   c001841c <picIoWait()>
c001855f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018566:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001856b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001856f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018573:	ee                   	out    dx,al
c0018574:	e8 a3 fe ff ff       	call   c001841c <picIoWait()>
c0018579:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001857d:	0f b6 c0             	movzx  eax,al
c0018580:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018587:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001858b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001858f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018593:	ee                   	out    dx,al
c0018594:	e8 83 fe ff ff       	call   c001841c <picIoWait()>
c0018599:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001859d:	0f b6 c0             	movzx  eax,al
c00185a0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00185a7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00185ab:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00185af:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00185b3:	ee                   	out    dx,al
c00185b4:	e8 63 fe ff ff       	call   c001841c <picIoWait()>
c00185b9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00185c0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00185c5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00185c9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00185cd:	ee                   	out    dx,al
c00185ce:	e8 49 fe ff ff       	call   c001841c <picIoWait()>
c00185d3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00185da:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00185df:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00185e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00185e7:	ee                   	out    dx,al
c00185e8:	e8 2f fe ff ff       	call   c001841c <picIoWait()>
c00185ed:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00185f4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00185f9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00185fd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018601:	ee                   	out    dx,al
c0018602:	e8 15 fe ff ff       	call   c001841c <picIoWait()>
c0018607:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001860e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018613:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018617:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001861b:	ee                   	out    dx,al
c001861c:	e8 fb fd ff ff       	call   c001841c <picIoWait()>
c0018621:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018626:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001862d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018631:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018635:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018639:	ee                   	out    dx,al
c001863a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001863f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018646:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001864a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001864e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018652:	ee                   	out    dx,al
c0018653:	90                   	nop
c0018654:	83 c4 50             	add    esp,0x50
c0018657:	c3                   	ret    

c0018658 <picEOI(int)>:
c0018658:	83 ec 10             	sub    esp,0x10
c001865b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018660:	75 1e                	jne    c0018680 <picEOI(int)+0x28>
c0018662:	6a 0b                	push   0xb
c0018664:	e8 ef fd ff ff       	call   c0018458 <picGetIRQReg(int)>
c0018669:	83 c4 04             	add    esp,0x4
c001866c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018671:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018676:	25 80 00 00 00       	and    eax,0x80
c001867b:	74 73                	je     c00186f0 <picEOI(int)+0x98>
c001867d:	8d 76 00             	lea    esi,[esi+0x0]
c0018680:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018685:	75 31                	jne    c00186b8 <picEOI(int)+0x60>
c0018687:	6a 0b                	push   0xb
c0018689:	e8 ca fd ff ff       	call   c0018458 <picGetIRQReg(int)>
c001868e:	83 c4 04             	add    esp,0x4
c0018691:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018696:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001869a:	98                   	cwde   
c001869b:	85 c0                	test   eax,eax
c001869d:	78 19                	js     c00186b8 <picEOI(int)+0x60>
c001869f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00186a6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00186ab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00186af:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00186b4:	ee                   	out    dx,al
c00186b5:	eb 3d                	jmp    c00186f4 <picEOI(int)+0x9c>
c00186b7:	90                   	nop
c00186b8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00186bd:	7e 19                	jle    c00186d8 <picEOI(int)+0x80>
c00186bf:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00186c6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00186cb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00186cf:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00186d4:	ee                   	out    dx,al
c00186d5:	8d 76 00             	lea    esi,[esi+0x0]
c00186d8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00186df:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00186e4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00186e8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00186ed:	ee                   	out    dx,al
c00186ee:	eb 04                	jmp    c00186f4 <picEOI(int)+0x9c>
c00186f0:	90                   	nop
c00186f1:	8d 76 00             	lea    esi,[esi+0x0]
c00186f4:	83 c4 10             	add    esp,0x10
c00186f7:	c3                   	ret    

c00186f8 <RTC::open(int, int, void*)>:
c00186f8:	31 c0                	xor    eax,eax
c00186fa:	c3                   	ret    
c00186fb:	90                   	nop

c00186fc <RTC::close(int, int, void*)>:
c00186fc:	31 c0                	xor    eax,eax
c00186fe:	c3                   	ret    
c00186ff:	90                   	nop

c0018700 <RTC::timeInSecondsUTC()>:
c0018700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018704:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001870a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018710:	c3                   	ret    
c0018711:	90                   	nop

c0018712 <RTC::timeInDatetimeUTC()>:
c0018712:	53                   	push   ebx
c0018713:	83 ec 14             	sub    esp,0x14
c0018716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001871a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001871e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018720:	50                   	push   eax
c0018721:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018724:	83 c4 0c             	add    esp,0xc
c0018727:	52                   	push   edx
c0018728:	50                   	push   eax
c0018729:	53                   	push   ebx
c001872a:	e8 e9 3f ff ff       	call   c000c718 <secondsToDatetime(unsigned long long)>
c001872f:	89 d8                	mov    eax,ebx
c0018731:	83 c4 14             	add    esp,0x14
c0018734:	5b                   	pop    ebx
c0018735:	c2 04 00             	ret    0x4

c0018738 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018738:	56                   	push   esi
c0018739:	53                   	push   ebx
c001873a:	83 ec 14             	sub    esp,0x14
c001873d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018741:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018743:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018746:	8d 44 24 08          	lea    eax,[esp+0x8]
c001874a:	52                   	push   edx
c001874b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001874f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018753:	50                   	push   eax
c0018754:	e8 bf 3f ff ff       	call   c000c718 <secondsToDatetime(unsigned long long)>
c0018759:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001875d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018761:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018765:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018769:	89 f0                	mov    eax,esi
c001876b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001876f:	83 c4 20             	add    esp,0x20
c0018772:	5b                   	pop    ebx
c0018773:	5e                   	pop    esi
c0018774:	ff e0                	jmp    eax

c0018776 <RTC::~RTC()>:
c0018776:	83 ec 0c             	sub    esp,0xc
c0018779:	ba 00 2f 02 c0       	mov    edx,0xc0022f00
c001877e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018782:	89 10                	mov    DWORD PTR [eax],edx
c0018784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018788:	83 ec 0c             	sub    esp,0xc
c001878b:	50                   	push   eax
c001878c:	e8 13 3d ff ff       	call   c000c4a4 <Clock::~Clock()>
c0018791:	83 c4 10             	add    esp,0x10
c0018794:	90                   	nop
c0018795:	83 c4 0c             	add    esp,0xc
c0018798:	c3                   	ret    
c0018799:	90                   	nop

c001879a <RTC::~RTC()>:
c001879a:	83 ec 0c             	sub    esp,0xc
c001879d:	83 ec 0c             	sub    esp,0xc
c00187a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187a4:	e8 cd ff ff ff       	call   c0018776 <RTC::~RTC()>
c00187a9:	83 c4 10             	add    esp,0x10
c00187ac:	83 ec 08             	sub    esp,0x8
c00187af:	68 60 01 00 00       	push   0x160
c00187b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187b8:	e8 53 20 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c00187bd:	83 c4 10             	add    esp,0x10
c00187c0:	83 c4 0c             	add    esp,0xc
c00187c3:	c3                   	ret    

c00187c4 <RTC::get_update_in_progress_flag()>:
c00187c4:	83 ec 14             	sub    esp,0x14
c00187c7:	6a 0a                	push   0xa
c00187c9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187cf:	e8 ca e9 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c00187d4:	83 c4 1c             	add    esp,0x1c
c00187d7:	0f b6 c0             	movzx  eax,al
c00187da:	c1 e8 07             	shr    eax,0x7
c00187dd:	c3                   	ret    

c00187de <RTC::completeRTCRefresh()>:
c00187de:	55                   	push   ebp
c00187df:	57                   	push   edi
c00187e0:	56                   	push   esi
c00187e1:	53                   	push   ebx
c00187e2:	83 ec 3c             	sub    esp,0x3c
c00187e5:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00187eb:	83 ec 0c             	sub    esp,0xc
c00187ee:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187f2:	e8 cd ff ff ff       	call   c00187c4 <RTC::get_update_in_progress_flag()>
c00187f7:	83 c4 10             	add    esp,0x10
c00187fa:	84 c0                	test   al,al
c00187fc:	74 0e                	je     c001880c <RTC::completeRTCRefresh()+0x2e>
c00187fe:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018804:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001880a:	73 df                	jae    c00187eb <RTC::completeRTCRefresh()+0xd>
c001880c:	50                   	push   eax
c001880d:	50                   	push   eax
c001880e:	6a 00                	push   0x0
c0018810:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018816:	e8 83 e9 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c001881b:	89 c7                	mov    edi,eax
c001881d:	58                   	pop    eax
c001881e:	5a                   	pop    edx
c001881f:	6a 02                	push   0x2
c0018821:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018827:	e8 72 e9 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c001882c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018830:	59                   	pop    ecx
c0018831:	5b                   	pop    ebx
c0018832:	6a 04                	push   0x4
c0018834:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001883a:	e8 5f e9 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c001883f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018843:	5e                   	pop    esi
c0018844:	5d                   	pop    ebp
c0018845:	6a 07                	push   0x7
c0018847:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001884d:	e8 4c e9 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c0018852:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018856:	58                   	pop    eax
c0018857:	5a                   	pop    edx
c0018858:	6a 08                	push   0x8
c001885a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018860:	e8 39 e9 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c0018865:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018869:	59                   	pop    ecx
c001886a:	5b                   	pop    ebx
c001886b:	6a 09                	push   0x9
c001886d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018873:	e8 26 e9 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c0018878:	0f b6 c0             	movzx  eax,al
c001887b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001887f:	83 c4 10             	add    esp,0x10
c0018882:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018888:	83 ec 0c             	sub    esp,0xc
c001888b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001888f:	e8 30 ff ff ff       	call   c00187c4 <RTC::get_update_in_progress_flag()>
c0018894:	83 c4 10             	add    esp,0x10
c0018897:	84 c0                	test   al,al
c0018899:	74 0e                	je     c00188a9 <RTC::completeRTCRefresh()+0xcb>
c001889b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00188a1:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00188a7:	73 df                	jae    c0018888 <RTC::completeRTCRefresh()+0xaa>
c00188a9:	51                   	push   ecx
c00188aa:	51                   	push   ecx
c00188ab:	6a 00                	push   0x0
c00188ad:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188b3:	e8 e6 e8 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c00188b8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00188bc:	5b                   	pop    ebx
c00188bd:	5e                   	pop    esi
c00188be:	6a 02                	push   0x2
c00188c0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188c6:	e8 d3 e8 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c00188cb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00188cf:	5d                   	pop    ebp
c00188d0:	58                   	pop    eax
c00188d1:	6a 04                	push   0x4
c00188d3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188d9:	e8 c0 e8 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c00188de:	88 c3                	mov    bl,al
c00188e0:	58                   	pop    eax
c00188e1:	5a                   	pop    edx
c00188e2:	6a 07                	push   0x7
c00188e4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188ea:	e8 af e8 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c00188ef:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00188f3:	59                   	pop    ecx
c00188f4:	5e                   	pop    esi
c00188f5:	6a 08                	push   0x8
c00188f7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188fd:	e8 9c e8 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c0018902:	5d                   	pop    ebp
c0018903:	89 c6                	mov    esi,eax
c0018905:	58                   	pop    eax
c0018906:	6a 09                	push   0x9
c0018908:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001890e:	e8 8b e8 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c0018913:	89 f9                	mov    ecx,edi
c0018915:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018919:	83 c4 10             	add    esp,0x10
c001891c:	0f b6 e8             	movzx  ebp,al
c001891f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018924:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018928:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001892c:	74 27                	je     c0018955 <RTC::completeRTCRefresh()+0x177>
c001892e:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018932:	89 f0                	mov    eax,esi
c0018934:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018938:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001893c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018940:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018944:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018948:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001894c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018950:	e9 2d ff ff ff       	jmp    c0018882 <RTC::completeRTCRefresh()+0xa4>
c0018955:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001895a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001895e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018962:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0018966:	75 c6                	jne    c001892e <RTC::completeRTCRefresh()+0x150>
c0018968:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001896d:	89 f1                	mov    ecx,esi
c001896f:	0f b6 fb             	movzx  edi,bl
c0018972:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018976:	0f b6 c9             	movzx  ecx,cl
c0018979:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001897d:	89 f1                	mov    ecx,esi
c001897f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018983:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018987:	0f 94 c2             	sete   dl
c001898a:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001898e:	0f 94 c0             	sete   al
c0018991:	21 d0                	and    eax,edx
c0018993:	31 d2                	xor    edx,edx
c0018995:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018999:	0f 94 c2             	sete   dl
c001899c:	85 c2                	test   edx,eax
c001899e:	74 8e                	je     c001892e <RTC::completeRTCRefresh()+0x150>
c00189a0:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00189a4:	75 88                	jne    c001892e <RTC::completeRTCRefresh()+0x150>
c00189a6:	52                   	push   edx
c00189a7:	52                   	push   edx
c00189a8:	6a 0b                	push   0xb
c00189aa:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189b0:	e8 e9 e7 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c00189b5:	83 c4 10             	add    esp,0x10
c00189b8:	a8 04                	test   al,0x4
c00189ba:	75 7a                	jne    c0018a36 <RTC::completeRTCRefresh()+0x258>
c00189bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189c0:	c1 ef 04             	shr    edi,0x4
c00189c3:	83 e6 0f             	and    esi,0xf
c00189c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00189ca:	c1 ed 04             	shr    ebp,0x4
c00189cd:	6b ed 0a             	imul   ebp,ebp,0xa
c00189d0:	c1 ea 04             	shr    edx,0x4
c00189d3:	6b d2 0a             	imul   edx,edx,0xa
c00189d6:	83 e1 0f             	and    ecx,0xf
c00189d9:	01 d1                	add    ecx,edx
c00189db:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00189df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00189e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189e7:	c1 ea 04             	shr    edx,0x4
c00189ea:	6b d2 0a             	imul   edx,edx,0xa
c00189ed:	83 e1 0f             	and    ecx,0xf
c00189f0:	01 d1                	add    ecx,edx
c00189f2:	89 fa                	mov    edx,edi
c00189f4:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00189f8:	83 e2 07             	and    edx,0x7
c00189fb:	89 d9                	mov    ecx,ebx
c00189fd:	6b d2 0a             	imul   edx,edx,0xa
c0018a00:	83 e1 0f             	and    ecx,0xf
c0018a03:	83 e3 80             	and    ebx,0xffffff80
c0018a06:	01 d1                	add    ecx,edx
c0018a08:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a0c:	09 cb                	or     ebx,ecx
c0018a0e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018a12:	c1 ea 04             	shr    edx,0x4
c0018a15:	6b d2 0a             	imul   edx,edx,0xa
c0018a18:	83 e1 0f             	and    ecx,0xf
c0018a1b:	01 d1                	add    ecx,edx
c0018a1d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a21:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018a25:	c1 ea 04             	shr    edx,0x4
c0018a28:	6b d2 0a             	imul   edx,edx,0xa
c0018a2b:	01 d6                	add    esi,edx
c0018a2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a31:	83 e2 0f             	and    edx,0xf
c0018a34:	01 d5                	add    ebp,edx
c0018a36:	a8 02                	test   al,0x2
c0018a38:	75 15                	jne    c0018a4f <RTC::completeRTCRefresh()+0x271>
c0018a3a:	f6 c3 80             	test   bl,0x80
c0018a3d:	74 10                	je     c0018a4f <RTC::completeRTCRefresh()+0x271>
c0018a3f:	83 e3 7f             	and    ebx,0x7f
c0018a42:	b9 18 00 00 00       	mov    ecx,0x18
c0018a47:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018a4a:	99                   	cdq    
c0018a4b:	f7 f9                	idiv   ecx
c0018a4d:	88 d3                	mov    bl,dl
c0018a4f:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018a55:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018a5b:	77 06                	ja     c0018a63 <RTC::completeRTCRefresh()+0x285>
c0018a5d:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018a63:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a68:	31 c9                	xor    ecx,ecx
c0018a6a:	31 d2                	xor    edx,edx
c0018a6c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0018a70:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018a74:	89 cd                	mov    ebp,ecx
c0018a76:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018a7a:	c1 e7 10             	shl    edi,0x10
c0018a7d:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018a83:	c1 e0 10             	shl    eax,0x10
c0018a86:	09 c5                	or     ebp,eax
c0018a88:	89 e9                	mov    ecx,ebp
c0018a8a:	0f b7 c2             	movzx  eax,dx
c0018a8d:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018a91:	09 f8                	or     eax,edi
c0018a93:	89 c2                	mov    edx,eax
c0018a95:	50                   	push   eax
c0018a96:	50                   	push   eax
c0018a97:	88 d9                	mov    cl,bl
c0018a99:	51                   	push   ecx
c0018a9a:	52                   	push   edx
c0018a9b:	e8 f3 3a ff ff       	call   c000c593 <datetimeToSeconds(datetime_t)>
c0018aa0:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018aa4:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018aaa:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018ab0:	83 c4 4c             	add    esp,0x4c
c0018ab3:	5b                   	pop    ebx
c0018ab4:	5e                   	pop    esi
c0018ab5:	5f                   	pop    edi
c0018ab6:	5d                   	pop    ebp
c0018ab7:	c3                   	ret    

c0018ab8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018ab8:	55                   	push   ebp
c0018ab9:	57                   	push   edi
c0018aba:	56                   	push   esi
c0018abb:	53                   	push   ebx
c0018abc:	83 ec 30             	sub    esp,0x30
c0018abf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018ac3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018ac7:	6a 00                	push   0x0
c0018ac9:	6a 00                	push   0x0
c0018acb:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ad1:	e8 e0 e7 fe ff       	call   c00072b6 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ad6:	83 c4 0c             	add    esp,0xc
c0018ad9:	6a 00                	push   0x0
c0018adb:	6a 02                	push   0x2
c0018add:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ae3:	e8 ce e7 fe ff       	call   c00072b6 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ae8:	89 f8                	mov    eax,edi
c0018aea:	89 f9                	mov    ecx,edi
c0018aec:	0f b6 c4             	movzx  eax,ah
c0018aef:	31 d2                	xor    edx,edx
c0018af1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018af5:	c1 e9 10             	shr    ecx,0x10
c0018af8:	89 f0                	mov    eax,esi
c0018afa:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018afe:	89 f0                	mov    eax,esi
c0018b00:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018b04:	0f b6 c4             	movzx  eax,ah
c0018b07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b0b:	89 f0                	mov    eax,esi
c0018b0d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018b11:	c1 e8 10             	shr    eax,0x10
c0018b14:	b9 64 00 00 00       	mov    ecx,0x64
c0018b19:	f7 f1                	div    ecx
c0018b1b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018b1f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018b23:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018b27:	59                   	pop    ecx
c0018b28:	5b                   	pop    ebx
c0018b29:	89 fb                	mov    ebx,edi
c0018b2b:	6a 0b                	push   0xb
c0018b2d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b33:	e8 66 e6 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c0018b38:	83 c4 10             	add    esp,0x10
c0018b3b:	a8 04                	test   al,0x4
c0018b3d:	89 c5                	mov    ebp,eax
c0018b3f:	75 6e                	jne    c0018baf <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018b41:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b45:	31 d2                	xor    edx,edx
c0018b47:	0f b6 c1             	movzx  eax,cl
c0018b4a:	b9 0a 00 00 00       	mov    ecx,0xa
c0018b4f:	f7 f1                	div    ecx
c0018b51:	c1 e0 04             	shl    eax,0x4
c0018b54:	09 d0                	or     eax,edx
c0018b56:	31 d2                	xor    edx,edx
c0018b58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b5c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018b61:	f7 f1                	div    ecx
c0018b63:	c1 e0 04             	shl    eax,0x4
c0018b66:	09 d0                	or     eax,edx
c0018b68:	31 d2                	xor    edx,edx
c0018b6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b6e:	0f b6 c3             	movzx  eax,bl
c0018b71:	f7 f1                	div    ecx
c0018b73:	c1 e0 04             	shl    eax,0x4
c0018b76:	09 d0                	or     eax,edx
c0018b78:	31 d2                	xor    edx,edx
c0018b7a:	89 c3                	mov    ebx,eax
c0018b7c:	89 f0                	mov    eax,esi
c0018b7e:	0f b6 c0             	movzx  eax,al
c0018b81:	f7 f1                	div    ecx
c0018b83:	c1 e0 04             	shl    eax,0x4
c0018b86:	09 d0                	or     eax,edx
c0018b88:	31 d2                	xor    edx,edx
c0018b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018b8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b93:	f7 f1                	div    ecx
c0018b95:	c1 e0 04             	shl    eax,0x4
c0018b98:	09 d0                	or     eax,edx
c0018b9a:	31 d2                	xor    edx,edx
c0018b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ba0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ba4:	f7 f1                	div    ecx
c0018ba6:	c1 e0 04             	shl    eax,0x4
c0018ba9:	09 d0                	or     eax,edx
c0018bab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018baf:	83 e5 02             	and    ebp,0x2
c0018bb2:	75 1e                	jne    c0018bd2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bb4:	0f b6 c3             	movzx  eax,bl
c0018bb7:	83 f8 0b             	cmp    eax,0xb
c0018bba:	76 10                	jbe    c0018bcc <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018bbc:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018bbf:	84 d2                	test   dl,dl
c0018bc1:	88 d3                	mov    bl,dl
c0018bc3:	75 02                	jne    c0018bc7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018bc5:	b3 0c                	mov    bl,0xc
c0018bc7:	83 cb 80             	or     ebx,0xffffff80
c0018bca:	eb 06                	jmp    c0018bd2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bcc:	85 c0                	test   eax,eax
c0018bce:	75 02                	jne    c0018bd2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bd0:	b3 0c                	mov    bl,0xc
c0018bd2:	50                   	push   eax
c0018bd3:	0f b6 db             	movzx  ebx,bl
c0018bd6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018bdb:	52                   	push   edx
c0018bdc:	6a 00                	push   0x0
c0018bde:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018be4:	e8 cd e6 fe ff       	call   c00072b6 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018be9:	83 c4 0c             	add    esp,0xc
c0018bec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018bf1:	50                   	push   eax
c0018bf2:	6a 02                	push   0x2
c0018bf4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bfa:	e8 b7 e6 fe ff       	call   c00072b6 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bff:	83 c4 0c             	add    esp,0xc
c0018c02:	53                   	push   ebx
c0018c03:	6a 04                	push   0x4
c0018c05:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c0b:	e8 a6 e6 fe ff       	call   c00072b6 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c10:	83 c4 0c             	add    esp,0xc
c0018c13:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018c18:	52                   	push   edx
c0018c19:	6a 07                	push   0x7
c0018c1b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c21:	e8 90 e6 fe ff       	call   c00072b6 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c26:	83 c4 0c             	add    esp,0xc
c0018c29:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018c2e:	50                   	push   eax
c0018c2f:	6a 08                	push   0x8
c0018c31:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c37:	e8 7a e6 fe ff       	call   c00072b6 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c3c:	83 c4 0c             	add    esp,0xc
c0018c3f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018c44:	55                   	push   ebp
c0018c45:	6a 09                	push   0x9
c0018c47:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c4d:	e8 64 e6 fe ff       	call   c00072b6 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c52:	5a                   	pop    edx
c0018c53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018c57:	e8 82 fb ff ff       	call   c00187de <RTC::completeRTCRefresh()>
c0018c5c:	83 c4 3c             	add    esp,0x3c
c0018c5f:	b0 01                	mov    al,0x1
c0018c61:	5b                   	pop    ebx
c0018c62:	5e                   	pop    esi
c0018c63:	5f                   	pop    edi
c0018c64:	5d                   	pop    ebp
c0018c65:	c3                   	ret    

c0018c66 <rtcIRQHandler(regs*, void*)>:
c0018c66:	53                   	push   ebx
c0018c67:	83 ec 10             	sub    esp,0x10
c0018c6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018c6e:	6a 0c                	push   0xc
c0018c70:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c76:	e8 23 e5 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c0018c7b:	83 c4 10             	add    esp,0x10
c0018c7e:	a8 80                	test   al,0x80
c0018c80:	74 24                	je     c0018ca6 <rtcIRQHandler(regs*, void*)+0x40>
c0018c82:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018c89:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018c90:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018c97:	75 0d                	jne    c0018ca6 <rtcIRQHandler(regs*, void*)+0x40>
c0018c99:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018c9d:	83 c4 08             	add    esp,0x8
c0018ca0:	5b                   	pop    ebx
c0018ca1:	e9 38 fb ff ff       	jmp    c00187de <RTC::completeRTCRefresh()>
c0018ca6:	83 c4 08             	add    esp,0x8
c0018ca9:	5b                   	pop    ebx
c0018caa:	c3                   	ret    
c0018cab:	90                   	nop

c0018cac <RTC::RTC()>:
c0018cac:	83 ec 1c             	sub    esp,0x1c
c0018caf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cb3:	83 ec 08             	sub    esp,0x8
c0018cb6:	68 e3 2e 02 c0       	push   0xc0022ee3
c0018cbb:	50                   	push   eax
c0018cbc:	e8 ad 37 ff ff       	call   c000c46e <Clock::Clock(char const*)>
c0018cc1:	83 c4 10             	add    esp,0x10
c0018cc4:	ba 00 2f 02 c0       	mov    edx,0xc0022f00
c0018cc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ccd:	89 10                	mov    DWORD PTR [eax],edx
c0018ccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cd3:	83 ec 0c             	sub    esp,0xc
c0018cd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018cda:	6a 01                	push   0x1
c0018cdc:	68 66 8c 01 c0       	push   0xc0018c66
c0018ce1:	6a 08                	push   0x8
c0018ce3:	50                   	push   eax
c0018ce4:	e8 67 3c ff ff       	call   c000c950 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018ce9:	83 c4 20             	add    esp,0x20
c0018cec:	89 c2                	mov    edx,eax
c0018cee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cf2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018cf8:	fa                   	cli    
c0018cf9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cfe:	83 c0 01             	add    eax,0x1
c0018d01:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d06:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d0b:	83 ec 08             	sub    esp,0x8
c0018d0e:	6a 0b                	push   0xb
c0018d10:	50                   	push   eax
c0018d11:	e8 88 e4 fe ff       	call   c000719e <Computer::readCMOS(unsigned char)>
c0018d16:	83 c4 10             	add    esp,0x10
c0018d19:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d1d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d22:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d26:	83 ca 10             	or     edx,0x10
c0018d29:	0f b6 d2             	movzx  edx,dl
c0018d2c:	83 ec 04             	sub    esp,0x4
c0018d2f:	52                   	push   edx
c0018d30:	6a 0b                	push   0xb
c0018d32:	50                   	push   eax
c0018d33:	e8 7e e5 fe ff       	call   c00072b6 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d38:	83 c4 10             	add    esp,0x10
c0018d3b:	83 ec 0c             	sub    esp,0xc
c0018d3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d42:	e8 97 fa ff ff       	call   c00187de <RTC::completeRTCRefresh()>
c0018d47:	83 c4 10             	add    esp,0x10
c0018d4a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d4f:	83 e8 01             	sub    eax,0x1
c0018d52:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d57:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d5c:	85 c0                	test   eax,eax
c0018d5e:	75 01                	jne    c0018d61 <RTC::RTC()+0xb5>
c0018d60:	fb                   	sti    
c0018d61:	90                   	nop
c0018d62:	83 c4 1c             	add    esp,0x1c
c0018d65:	c3                   	ret    
c0018d66:	66 90                	xchg   ax,ax

c0018d68 <HalConsoleScroll(int, int)>:
c0018d68:	83 ec 10             	sub    esp,0x10
c0018d6b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018d73:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018d7b:	90                   	nop
c0018d7c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d81:	0f 8f e1 00 00 00    	jg     c0018e68 <HalConsoleScroll(int, int)+0x100>
c0018d87:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d8f:	90                   	nop
c0018d90:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018d98:	0f 8f be 00 00 00    	jg     c0018e5c <HalConsoleScroll(int, int)+0xf4>
c0018d9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018da2:	89 d0                	mov    eax,edx
c0018da4:	c1 e0 02             	shl    eax,0x2
c0018da7:	01 d0                	add    eax,edx
c0018da9:	c1 e0 05             	shl    eax,0x5
c0018dac:	89 c2                	mov    edx,eax
c0018dae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018db2:	01 d0                	add    eax,edx
c0018db4:	89 c2                	mov    edx,eax
c0018db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018dbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018dc1:	89 d0                	mov    eax,edx
c0018dc3:	c1 e0 02             	shl    eax,0x2
c0018dc6:	01 d0                	add    eax,edx
c0018dc8:	c1 e0 05             	shl    eax,0x5
c0018dcb:	89 c2                	mov    edx,eax
c0018dcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dd1:	01 d0                	add    eax,edx
c0018dd3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018dd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ddd:	01 d0                	add    eax,edx
c0018ddf:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018de1:	88 10                	mov    BYTE PTR [eax],dl
c0018de3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018de8:	75 66                	jne    c0018e50 <HalConsoleScroll(int, int)+0xe8>
c0018dea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dee:	83 e0 01             	and    eax,0x1
c0018df1:	74 39                	je     c0018e2c <HalConsoleScroll(int, int)+0xc4>
c0018df3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018df7:	83 e0 0f             	and    eax,0xf
c0018dfa:	88 c2                	mov    dl,al
c0018dfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e00:	c1 e0 04             	shl    eax,0x4
c0018e03:	09 d0                	or     eax,edx
c0018e05:	88 c1                	mov    cl,al
c0018e07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e0b:	89 d0                	mov    eax,edx
c0018e0d:	c1 e0 02             	shl    eax,0x2
c0018e10:	01 d0                	add    eax,edx
c0018e12:	c1 e0 05             	shl    eax,0x5
c0018e15:	89 c2                	mov    edx,eax
c0018e17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e1b:	01 d0                	add    eax,edx
c0018e1d:	89 c2                	mov    edx,eax
c0018e1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e23:	01 d0                	add    eax,edx
c0018e25:	88 ca                	mov    dl,cl
c0018e27:	88 10                	mov    BYTE PTR [eax],dl
c0018e29:	eb 25                	jmp    c0018e50 <HalConsoleScroll(int, int)+0xe8>
c0018e2b:	90                   	nop
c0018e2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e30:	89 d0                	mov    eax,edx
c0018e32:	c1 e0 02             	shl    eax,0x2
c0018e35:	01 d0                	add    eax,edx
c0018e37:	c1 e0 05             	shl    eax,0x5
c0018e3a:	89 c2                	mov    edx,eax
c0018e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e40:	01 d0                	add    eax,edx
c0018e42:	89 c2                	mov    edx,eax
c0018e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e48:	01 d0                	add    eax,edx
c0018e4a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e50:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018e55:	e9 36 ff ff ff       	jmp    c0018d90 <HalConsoleScroll(int, int)+0x28>
c0018e5a:	66 90                	xchg   ax,ax
c0018e5c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018e61:	e9 16 ff ff ff       	jmp    c0018d7c <HalConsoleScroll(int, int)+0x14>
c0018e66:	66 90                	xchg   ax,ax
c0018e68:	90                   	nop
c0018e69:	83 c4 10             	add    esp,0x10
c0018e6c:	c3                   	ret    
c0018e6d:	8d 76 00             	lea    esi,[esi+0x0]

c0018e70 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018e70:	83 ec 14             	sub    esp,0x14
c0018e73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e77:	88 04 24             	mov    BYTE PTR [esp],al
c0018e7a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018e7d:	0f b6 c0             	movzx  eax,al
c0018e80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e84:	89 d1                	mov    ecx,edx
c0018e86:	83 e1 0f             	and    ecx,0xf
c0018e89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e8d:	c1 e2 04             	shl    edx,0x4
c0018e90:	0f b6 d2             	movzx  edx,dl
c0018e93:	09 ca                	or     edx,ecx
c0018e95:	c1 e2 08             	shl    edx,0x8
c0018e98:	09 d0                	or     eax,edx
c0018e9a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018e9f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018ea7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018eab:	89 d0                	mov    eax,edx
c0018ead:	c1 e0 02             	shl    eax,0x2
c0018eb0:	01 d0                	add    eax,edx
c0018eb2:	c1 e0 04             	shl    eax,0x4
c0018eb5:	89 c2                	mov    edx,eax
c0018eb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ebb:	01 d0                	add    eax,edx
c0018ebd:	d1 e0                	shl    eax,1
c0018ebf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018ec3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ec7:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018ecc:	66 89 10             	mov    WORD PTR [eax],dx
c0018ecf:	90                   	nop
c0018ed0:	83 c4 14             	add    esp,0x14
c0018ed3:	c3                   	ret    

c0018ed4 <HalConsoleCursorUpdate(int, int)>:
c0018ed4:	83 ec 20             	sub    esp,0x20
c0018ed7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018edb:	89 c2                	mov    edx,eax
c0018edd:	c1 e2 02             	shl    edx,0x2
c0018ee0:	01 d0                	add    eax,edx
c0018ee2:	c1 e0 04             	shl    eax,0x4
c0018ee5:	89 c2                	mov    edx,eax
c0018ee7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018eeb:	01 d0                	add    eax,edx
c0018eed:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018ef2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018ef9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f06:	ee                   	out    dx,al
c0018f07:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f0c:	0f b6 c0             	movzx  eax,al
c0018f0f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018f16:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018f1a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018f1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f22:	ee                   	out    dx,al
c0018f23:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018f2a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018f2f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018f33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f37:	ee                   	out    dx,al
c0018f38:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018f3d:	c1 e8 08             	shr    eax,0x8
c0018f40:	0f b6 c0             	movzx  eax,al
c0018f43:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018f4a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018f4e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018f52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f56:	ee                   	out    dx,al
c0018f57:	90                   	nop
c0018f58:	83 c4 20             	add    esp,0x20
c0018f5b:	c3                   	ret    

c0018f5c <FAT::getName()>:
c0018f5c:	b8 34 2f 02 c0       	mov    eax,0xc0022f34
c0018f61:	c3                   	ret    
c0018f62:	66 90                	xchg   ax,ax

c0018f64 <FAT::tell(void*, unsigned long long*)>:
c0018f64:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f69:	75 09                	jne    c0018f74 <FAT::tell(void*, unsigned long long*)+0x10>
c0018f6b:	b8 04 00 00 00       	mov    eax,0x4
c0018f70:	c3                   	ret    
c0018f71:	8d 76 00             	lea    esi,[esi+0x0]
c0018f74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f79:	75 09                	jne    c0018f84 <FAT::tell(void*, unsigned long long*)+0x20>
c0018f7b:	b8 04 00 00 00       	mov    eax,0x4
c0018f80:	c3                   	ret    
c0018f81:	8d 76 00             	lea    esi,[esi+0x0]
c0018f84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f88:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f8b:	ba 00 00 00 00       	mov    edx,0x0
c0018f90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f94:	89 01                	mov    DWORD PTR [ecx],eax
c0018f96:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f99:	b8 00 00 00 00       	mov    eax,0x0
c0018f9e:	c3                   	ret    
c0018f9f:	90                   	nop

c0018fa0 <FAT::stat(void*, unsigned long long*)>:
c0018fa0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018fa5:	75 09                	jne    c0018fb0 <FAT::stat(void*, unsigned long long*)+0x10>
c0018fa7:	b8 04 00 00 00       	mov    eax,0x4
c0018fac:	c3                   	ret    
c0018fad:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fb5:	75 09                	jne    c0018fc0 <FAT::stat(void*, unsigned long long*)+0x20>
c0018fb7:	b8 04 00 00 00       	mov    eax,0x4
c0018fbc:	c3                   	ret    
c0018fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0018fc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018fc7:	ba 00 00 00 00       	mov    edx,0x0
c0018fcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fd0:	89 01                	mov    DWORD PTR [ecx],eax
c0018fd2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018fd5:	b8 00 00 00 00       	mov    eax,0x0
c0018fda:	c3                   	ret    
c0018fdb:	90                   	nop

c0018fdc <FAT::~FAT()>:
c0018fdc:	83 ec 0c             	sub    esp,0xc
c0018fdf:	ba 80 2f 02 c0       	mov    edx,0xc0022f80
c0018fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fe8:	89 10                	mov    DWORD PTR [eax],edx
c0018fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fee:	83 ec 0c             	sub    esp,0xc
c0018ff1:	50                   	push   eax
c0018ff2:	e8 9d 27 ff ff       	call   c000b794 <Filesystem::~Filesystem()>
c0018ff7:	83 c4 10             	add    esp,0x10
c0018ffa:	90                   	nop
c0018ffb:	83 c4 0c             	add    esp,0xc
c0018ffe:	c3                   	ret    
c0018fff:	90                   	nop

c0019000 <FAT::~FAT()>:
c0019000:	83 ec 0c             	sub    esp,0xc
c0019003:	83 ec 0c             	sub    esp,0xc
c0019006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001900a:	e8 cd ff ff ff       	call   c0018fdc <FAT::~FAT()>
c001900f:	83 c4 10             	add    esp,0x10
c0019012:	83 ec 08             	sub    esp,0x8
c0019015:	6a 08                	push   0x8
c0019017:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001901b:	e8 f0 17 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c0019020:	83 c4 10             	add    esp,0x10
c0019023:	83 c4 0c             	add    esp,0xc
c0019026:	c3                   	ret    
c0019027:	90                   	nop

c0019028 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019028:	83 ec 1c             	sub    esp,0x1c
c001902b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019032:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001903b:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019042:	83 f8 ff             	cmp    eax,0xffffffff
c0019045:	75 35                	jne    c001907c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019047:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001904b:	88 c2                	mov    dl,al
c001904d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019052:	01 d0                	add    eax,edx
c0019054:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019058:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001905e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019062:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019069:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001906e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019072:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019079:	eb 19                	jmp    c0019094 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001907b:	90                   	nop
c001907c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019080:	88 c2                	mov    dl,al
c0019082:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019086:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001908d:	01 d0                	add    eax,edx
c001908f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019093:	90                   	nop
c0019094:	83 ec 04             	sub    esp,0x4
c0019097:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001909b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001909f:	8d 44 24 15          	lea    eax,[esp+0x15]
c00190a3:	50                   	push   eax
c00190a4:	e8 4a bf fe ff       	call   c0004ff3 <f_getlabel>
c00190a9:	83 c4 10             	add    esp,0x10
c00190ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00190b5:	75 09                	jne    c00190c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00190b7:	b8 00 00 00 00       	mov    eax,0x0
c00190bc:	eb 0a                	jmp    c00190c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00190be:	66 90                	xchg   ax,ax
c00190c0:	b8 01 00 00 00       	mov    eax,0x1
c00190c5:	8d 76 00             	lea    esi,[esi+0x0]
c00190c8:	83 c4 1c             	add    esp,0x1c
c00190cb:	c3                   	ret    

c00190cc <FAT::setlabel(LogicalDisk*, int, char*)>:
c00190cc:	53                   	push   ebx
c00190cd:	83 ec 58             	sub    esp,0x58
c00190d0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00190d8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00190dc:	b9 00 00 00 00       	mov    ecx,0x0
c00190e1:	b8 3c 00 00 00       	mov    eax,0x3c
c00190e6:	83 e0 f8             	and    eax,0xfffffff8
c00190e9:	89 c3                	mov    ebx,eax
c00190eb:	b8 00 00 00 00       	mov    eax,0x0
c00190f0:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c00190f4:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c00190f8:	83 c0 08             	add    eax,0x8
c00190fb:	39 d8                	cmp    eax,ebx
c00190fd:	72 f1                	jb     c00190f0 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c00190ff:	01 c2                	add    edx,eax
c0019101:	89 0a                	mov    DWORD PTR [edx],ecx
c0019103:	83 c2 04             	add    edx,0x4
c0019106:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001910a:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019111:	83 f8 ff             	cmp    eax,0xffffffff
c0019114:	75 36                	jne    c001914c <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0019116:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001911a:	88 c2                	mov    dl,al
c001911c:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019121:	01 d0                	add    eax,edx
c0019123:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019127:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001912d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019131:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019138:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001913d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019141:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019148:	eb 1a                	jmp    c0019164 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001914a:	66 90                	xchg   ax,ax
c001914c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019150:	88 c2                	mov    dl,al
c0019152:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019156:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001915d:	01 d0                	add    eax,edx
c001915f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019163:	90                   	nop
c0019164:	83 ec 08             	sub    esp,0x8
c0019167:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001916b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001916f:	50                   	push   eax
c0019170:	e8 fb 76 fe ff       	call   c0000870 <strcat>
c0019175:	83 c4 10             	add    esp,0x10
c0019178:	83 ec 0c             	sub    esp,0xc
c001917b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001917f:	50                   	push   eax
c0019180:	e8 c2 bf fe ff       	call   c0005147 <f_setlabel>
c0019185:	83 c4 10             	add    esp,0x10
c0019188:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001918c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019191:	75 09                	jne    c001919c <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0019193:	b8 00 00 00 00       	mov    eax,0x0
c0019198:	eb 0a                	jmp    c00191a4 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001919a:	66 90                	xchg   ax,ax
c001919c:	b8 01 00 00 00       	mov    eax,0x1
c00191a1:	8d 76 00             	lea    esi,[esi+0x0]
c00191a4:	83 c4 58             	add    esp,0x58
c00191a7:	5b                   	pop    ebx
c00191a8:	c3                   	ret    
c00191a9:	90                   	nop
c00191aa:	66 90                	xchg   ax,ax

c00191ac <FAT::format(LogicalDisk*, int, char const*, int)>:
c00191ac:	83 ec 2c             	sub    esp,0x2c
c00191af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00191b7:	83 ec 08             	sub    esp,0x8
c00191ba:	68 58 2f 02 c0       	push   0xc0022f58
c00191bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191c3:	e8 b8 75 fe ff       	call   c0000780 <strcmp>
c00191c8:	83 c4 10             	add    esp,0x10
c00191cb:	85 c0                	test   eax,eax
c00191cd:	0f 94 c0             	sete   al
c00191d0:	0f b6 c0             	movzx  eax,al
c00191d3:	85 c0                	test   eax,eax
c00191d5:	74 0d                	je     c00191e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00191d7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191df:	e9 c0 00 00 00       	jmp    c00192a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191e4:	83 ec 08             	sub    esp,0x8
c00191e7:	68 4a 2f 02 c0       	push   0xc0022f4a
c00191ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191f0:	e8 8b 75 fe ff       	call   c0000780 <strcmp>
c00191f5:	83 c4 10             	add    esp,0x10
c00191f8:	85 c0                	test   eax,eax
c00191fa:	0f 94 c0             	sete   al
c00191fd:	0f b6 c0             	movzx  eax,al
c0019200:	85 c0                	test   eax,eax
c0019202:	74 10                	je     c0019214 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019204:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001920c:	e9 93 00 00 00       	jmp    c00192a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019211:	8d 76 00             	lea    esi,[esi+0x0]
c0019214:	83 ec 08             	sub    esp,0x8
c0019217:	68 50 2f 02 c0       	push   0xc0022f50
c001921c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019220:	e8 5b 75 fe ff       	call   c0000780 <strcmp>
c0019225:	83 c4 10             	add    esp,0x10
c0019228:	85 c0                	test   eax,eax
c001922a:	0f 94 c0             	sete   al
c001922d:	0f b6 c0             	movzx  eax,al
c0019230:	85 c0                	test   eax,eax
c0019232:	74 0c                	je     c0019240 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019234:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001923c:	eb 66                	jmp    c00192a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001923e:	66 90                	xchg   ax,ax
c0019240:	83 ec 08             	sub    esp,0x8
c0019243:	68 dc 05 02 c0       	push   0xc00205dc
c0019248:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001924c:	e8 2f 75 fe ff       	call   c0000780 <strcmp>
c0019251:	83 c4 10             	add    esp,0x10
c0019254:	85 c0                	test   eax,eax
c0019256:	0f 94 c0             	sete   al
c0019259:	0f b6 c0             	movzx  eax,al
c001925c:	85 c0                	test   eax,eax
c001925e:	74 0c                	je     c001926c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019260:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019268:	eb 3a                	jmp    c00192a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001926a:	66 90                	xchg   ax,ax
c001926c:	83 ec 08             	sub    esp,0x8
c001926f:	68 56 2f 02 c0       	push   0xc0022f56
c0019274:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019278:	e8 03 75 fe ff       	call   c0000780 <strcmp>
c001927d:	83 c4 10             	add    esp,0x10
c0019280:	85 c0                	test   eax,eax
c0019282:	0f 94 c0             	sete   al
c0019285:	0f b6 c0             	movzx  eax,al
c0019288:	85 c0                	test   eax,eax
c001928a:	74 0c                	je     c0019298 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001928c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019294:	eb 0e                	jmp    c00192a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019296:	66 90                	xchg   ax,ax
c0019298:	b8 08 00 00 00       	mov    eax,0x8
c001929d:	e9 ea 00 00 00       	jmp    c001938c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192a2:	66 90                	xchg   ax,ax
c00192a4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00192ab:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00192b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192b4:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192bb:	83 f8 ff             	cmp    eax,0xffffffff
c00192be:	75 34                	jne    c00192f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00192c0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00192c4:	88 c2                	mov    dl,al
c00192c6:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192cb:	01 d0                	add    eax,edx
c00192cd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00192d1:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00192d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192db:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00192e2:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192e7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00192eb:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00192f2:	eb 18                	jmp    c001930c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00192f4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00192f8:	88 c2                	mov    dl,al
c00192fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192fe:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019305:	01 d0                	add    eax,edx
c0019307:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001930b:	90                   	nop
c001930c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019310:	88 04 24             	mov    BYTE PTR [esp],al
c0019313:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019317:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001931b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019323:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019328:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019330:	83 ec 0c             	sub    esp,0xc
c0019333:	68 00 20 00 00       	push   0x2000
c0019338:	e8 9a e7 fe ff       	call   c0007ad7 <malloc>
c001933d:	83 c4 10             	add    esp,0x10
c0019340:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019344:	68 00 20 00 00       	push   0x2000
c0019349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001934d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019351:	50                   	push   eax
c0019352:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019356:	50                   	push   eax
c0019357:	e8 e8 c0 fe ff       	call   c0005444 <f_mkfs>
c001935c:	83 c4 10             	add    esp,0x10
c001935f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019363:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019368:	75 0a                	jne    c0019374 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001936a:	b8 00 00 00 00       	mov    eax,0x0
c001936f:	eb 1b                	jmp    c001938c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019371:	8d 76 00             	lea    esi,[esi+0x0]
c0019374:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019379:	75 09                	jne    c0019384 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001937b:	b8 09 00 00 00       	mov    eax,0x9
c0019380:	eb 0a                	jmp    c001938c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019382:	66 90                	xchg   ax,ax
c0019384:	b8 01 00 00 00       	mov    eax,0x1
c0019389:	8d 76 00             	lea    esi,[esi+0x0]
c001938c:	83 c4 2c             	add    esp,0x2c
c001938f:	c3                   	ret    

c0019390 <FAT::tryMount(LogicalDisk*, int)>:
c0019390:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019396:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001939b:	83 f8 14             	cmp    eax,0x14
c001939e:	75 18                	jne    c00193b8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00193a0:	83 ec 0c             	sub    esp,0xc
c00193a3:	68 5c 2f 02 c0       	push   0xc0022f5c
c00193a8:	e8 5a 82 ff ff       	call   c0011607 <KePanic(char const*)>
c00193ad:	83 c4 10             	add    esp,0x10
c00193b0:	b0 00                	mov    al,0x0
c00193b2:	e9 ed 01 00 00       	jmp    c00195a4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193b7:	90                   	nop
c00193b8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00193bf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00193c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00193cb:	3d 00 02 00 00       	cmp    eax,0x200
c00193d0:	74 0a                	je     c00193dc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00193d2:	b0 00                	mov    al,0x0
c00193d4:	e9 cb 01 00 00       	jmp    c00195a4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193d9:	8d 76 00             	lea    esi,[esi+0x0]
c00193dc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00193e4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00193eb:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00193f2:	83 f8 ff             	cmp    eax,0xffffffff
c00193f5:	74 09                	je     c0019400 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00193f7:	b0 01                	mov    al,0x1
c00193f9:	e9 a6 01 00 00       	jmp    c00195a4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193fe:	66 90                	xchg   ax,ax
c0019400:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001940a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019412:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019419:	88 c2                	mov    dl,al
c001941b:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019420:	01 d0                	add    eax,edx
c0019422:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019429:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001942f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019436:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001943d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019442:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019449:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019450:	83 ec 0c             	sub    esp,0xc
c0019453:	68 34 02 00 00       	push   0x234
c0019458:	e8 7a e6 fe ff       	call   c0007ad7 <malloc>
c001945d:	83 c4 10             	add    esp,0x10
c0019460:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019467:	83 ec 04             	sub    esp,0x4
c001946a:	6a 00                	push   0x0
c001946c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019473:	50                   	push   eax
c0019474:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001947b:	e8 be a7 fe ff       	call   c0003c3e <f_mount>
c0019480:	83 c4 10             	add    esp,0x10
c0019483:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001948a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019492:	74 1c                	je     c00194b0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019494:	83 ec 0c             	sub    esp,0xc
c0019497:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001949e:	e8 54 e6 fe ff       	call   c0007af7 <rfree>
c00194a3:	83 c4 10             	add    esp,0x10
c00194a6:	b0 00                	mov    al,0x0
c00194a8:	e9 f7 00 00 00       	jmp    c00195a4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194ad:	8d 76 00             	lea    esi,[esi+0x0]
c00194b0:	83 ec 04             	sub    esp,0x4
c00194b3:	68 00 01 00 00       	push   0x100
c00194b8:	6a 00                	push   0x0
c00194ba:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194c1:	50                   	push   eax
c00194c2:	e8 29 70 fe ff       	call   c00004f0 <memset>
c00194c7:	83 c4 10             	add    esp,0x10
c00194ca:	83 ec 08             	sub    esp,0x8
c00194cd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194d4:	50                   	push   eax
c00194d5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194dc:	50                   	push   eax
c00194dd:	e8 8e 73 fe ff       	call   c0000870 <strcat>
c00194e2:	83 c4 10             	add    esp,0x10
c00194e5:	83 ec 08             	sub    esp,0x8
c00194e8:	68 6a 2f 02 c0       	push   0xc0022f6a
c00194ed:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194f4:	50                   	push   eax
c00194f5:	e8 76 73 fe ff       	call   c0000870 <strcat>
c00194fa:	83 c4 10             	add    esp,0x10
c00194fd:	83 ec 04             	sub    esp,0x4
c0019500:	6a 01                	push   0x1
c0019502:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019509:	50                   	push   eax
c001950a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001950e:	50                   	push   eax
c001950f:	e8 8c a7 fe ff       	call   c0003ca0 <f_open>
c0019514:	83 c4 10             	add    esp,0x10
c0019517:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001951e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019525:	85 c0                	test   eax,eax
c0019527:	74 0b                	je     c0019534 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019529:	78 31                	js     c001955c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001952b:	83 e8 04             	sub    eax,0x4
c001952e:	83 f8 01             	cmp    eax,0x1
c0019531:	77 29                	ja     c001955c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019533:	90                   	nop
c0019534:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001953c:	83 ec 0c             	sub    esp,0xc
c001953f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019543:	50                   	push   eax
c0019544:	e8 07 af fe ff       	call   c0004450 <f_close>
c0019549:	83 c4 10             	add    esp,0x10
c001954c:	90                   	nop
c001954d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019555:	85 c0                	test   eax,eax
c0019557:	74 43                	je     c001959c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019559:	eb 31                	jmp    c001958c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001955b:	90                   	nop
c001955c:	83 ec 0c             	sub    esp,0xc
c001955f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019566:	e8 8c e5 fe ff       	call   c0007af7 <rfree>
c001956b:	83 c4 10             	add    esp,0x10
c001956e:	83 ec 04             	sub    esp,0x4
c0019571:	6a 00                	push   0x0
c0019573:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001957a:	50                   	push   eax
c001957b:	6a 00                	push   0x0
c001957d:	e8 bc a6 fe ff       	call   c0003c3e <f_mount>
c0019582:	83 c4 10             	add    esp,0x10
c0019585:	b0 00                	mov    al,0x0
c0019587:	eb 1b                	jmp    c00195a4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019589:	8d 76 00             	lea    esi,[esi+0x0]
c001958c:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019591:	83 c0 01             	add    eax,0x1
c0019594:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019599:	8d 76 00             	lea    esi,[esi+0x0]
c001959c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00195a3:	90                   	nop
c00195a4:	81 c4 4c 03 00 00    	add    esp,0x34c
c00195aa:	c3                   	ret    
c00195ab:	90                   	nop

c00195ac <FAT::allocateSwapfile(char const*, int)>:
c00195ac:	55                   	push   ebp
c00195ad:	57                   	push   edi
c00195ae:	56                   	push   esi
c00195af:	53                   	push   ebx
c00195b0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00195b6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00195c1:	83 ec 0c             	sub    esp,0xc
c00195c4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00195cb:	e8 07 e5 fe ff       	call   c0007ad7 <malloc>
c00195d0:	83 c4 10             	add    esp,0x10
c00195d3:	89 c7                	mov    edi,eax
c00195d5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00195da:	83 ec 04             	sub    esp,0x4
c00195dd:	50                   	push   eax
c00195de:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00195e5:	57                   	push   edi
c00195e6:	e8 3b 25 ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c00195eb:	83 c4 10             	add    esp,0x10
c00195ee:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00195f5:	83 ec 04             	sub    esp,0x4
c00195f8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00195fc:	50                   	push   eax
c00195fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019601:	50                   	push   eax
c0019602:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019609:	e8 38 28 ff ff       	call   c000be46 <File::stat(unsigned long long*, bool*)>
c001960e:	83 c4 10             	add    esp,0x10
c0019611:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019618:	c1 e0 14             	shl    eax,0x14
c001961b:	89 c7                	mov    edi,eax
c001961d:	89 c5                	mov    ebp,eax
c001961f:	c1 fd 1f             	sar    ebp,0x1f
c0019622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019626:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001962a:	89 f9                	mov    ecx,edi
c001962c:	31 c1                	xor    ecx,eax
c001962e:	89 cb                	mov    ebx,ecx
c0019630:	89 e9                	mov    ecx,ebp
c0019632:	31 d1                	xor    ecx,edx
c0019634:	89 ce                	mov    esi,ecx
c0019636:	89 f0                	mov    eax,esi
c0019638:	09 d8                	or     eax,ebx
c001963a:	0f 84 9c 00 00 00    	je     c00196dc <FAT::allocateSwapfile(char const*, int)+0x130>
c0019640:	83 ec 0c             	sub    esp,0xc
c0019643:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001964a:	e8 c3 26 ff ff       	call   c000bd12 <File::unlink()>
c001964f:	83 c4 10             	add    esp,0x10
c0019652:	83 ec 08             	sub    esp,0x8
c0019655:	6a 12                	push   0x12
c0019657:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001965e:	e8 e1 24 ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c0019663:	83 c4 10             	add    esp,0x10
c0019666:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001966d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019673:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001967a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019681:	c1 e0 14             	shl    eax,0x14
c0019684:	83 ec 04             	sub    esp,0x4
c0019687:	6a 01                	push   0x1
c0019689:	50                   	push   eax
c001968a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019691:	e8 41 bc fe ff       	call   c00052d7 <f_expand>
c0019696:	83 c4 10             	add    esp,0x10
c0019699:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00196a2:	83 c0 10             	add    eax,0x10
c00196a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00196a7:	83 ec 0c             	sub    esp,0xc
c00196aa:	8d 54 24 24          	lea    edx,[esp+0x24]
c00196ae:	52                   	push   edx
c00196af:	8d 54 24 30          	lea    edx,[esp+0x30]
c00196b3:	52                   	push   edx
c00196b4:	6a 00                	push   0x0
c00196b6:	68 00 04 00 00       	push   0x400
c00196bb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00196c2:	ff d0                	call   eax
c00196c4:	83 c4 20             	add    esp,0x20
c00196c7:	83 ec 0c             	sub    esp,0xc
c00196ca:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196d1:	e8 cc 24 ff ff       	call   c000bba2 <File::close()>
c00196d6:	83 c4 10             	add    esp,0x10
c00196d9:	8d 76 00             	lea    esi,[esi+0x0]
c00196dc:	83 ec 08             	sub    esp,0x8
c00196df:	6a 01                	push   0x1
c00196e1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196e8:	e8 57 24 ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c00196ed:	83 c4 10             	add    esp,0x10
c00196f0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00196f9:	83 c0 0c             	add    eax,0xc
c00196fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00196fe:	83 ec 0c             	sub    esp,0xc
c0019701:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019705:	52                   	push   edx
c0019706:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001970a:	52                   	push   edx
c001970b:	6a 00                	push   0x0
c001970d:	6a 04                	push   0x4
c001970f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019716:	ff d0                	call   eax
c0019718:	83 c4 20             	add    esp,0x20
c001971b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019722:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019728:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001972f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019736:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019739:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019740:	83 ec 0c             	sub    esp,0xc
c0019743:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001974a:	e8 53 24 ff ff       	call   c000bba2 <File::close()>
c001974f:	83 c4 10             	add    esp,0x10
c0019752:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019759:	ba 00 00 00 00       	mov    edx,0x0
c001975e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019764:	5b                   	pop    ebx
c0019765:	5e                   	pop    esi
c0019766:	5f                   	pop    edi
c0019767:	5d                   	pop    ebp
c0019768:	c3                   	ret    
c0019769:	90                   	nop
c001976a:	66 90                	xchg   ax,ax

c001976c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001976c:	57                   	push   edi
c001976d:	56                   	push   esi
c001976e:	53                   	push   ebx
c001976f:	81 ec 50 02 00 00    	sub    esp,0x250
c0019775:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001977d:	74 0d                	je     c001978c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001977f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019787:	75 0f                	jne    c0019798 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019789:	8d 76 00             	lea    esi,[esi+0x0]
c001978c:	b8 04 00 00 00       	mov    eax,0x4
c0019791:	e9 3a 01 00 00       	jmp    c00198d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019796:	66 90                	xchg   ax,ax
c0019798:	83 ec 08             	sub    esp,0x8
c001979b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00197a2:	50                   	push   eax
c00197a3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00197aa:	e8 6d af fe ff       	call   c000471c <f_readdir>
c00197af:	83 c4 10             	add    esp,0x10
c00197b2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00197b9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00197c0:	83 ec 0c             	sub    esp,0xc
c00197c3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00197ca:	83 c0 16             	add    eax,0x16
c00197cd:	50                   	push   eax
c00197ce:	e8 ad 6d fe ff       	call   c0000580 <strlen>
c00197d3:	83 c4 10             	add    esp,0x10
c00197d6:	ba 00 00 00 00       	mov    edx,0x0
c00197db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197df:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00197e3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00197ea:	0f b6 c0             	movzx  eax,al
c00197ed:	83 e0 10             	and    eax,0x10
c00197f0:	74 0a                	je     c00197fc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00197f2:	b8 02 00 00 00       	mov    eax,0x2
c00197f7:	eb 0b                	jmp    c0019804 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00197f9:	8d 76 00             	lea    esi,[esi+0x0]
c00197fc:	b8 01 00 00 00       	mov    eax,0x1
c0019801:	8d 76 00             	lea    esi,[esi+0x0]
c0019804:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019808:	83 ec 08             	sub    esp,0x8
c001980b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019812:	83 c0 16             	add    eax,0x16
c0019815:	50                   	push   eax
c0019816:	8d 44 24 14          	lea    eax,[esp+0x14]
c001981a:	83 c0 10             	add    eax,0x10
c001981d:	50                   	push   eax
c001981e:	e8 2d 6e fe ff       	call   c0000650 <strcpy>
c0019823:	83 c4 10             	add    esp,0x10
c0019826:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001982d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019834:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019838:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001983f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019846:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001984d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019854:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001985b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019862:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019869:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019870:	89 c6                	mov    esi,eax
c0019872:	89 d7                	mov    edi,edx
c0019874:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019876:	89 c8                	mov    eax,ecx
c0019878:	89 fa                	mov    edx,edi
c001987a:	89 f3                	mov    ebx,esi
c001987c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019883:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001988a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019891:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019898:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001989e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00198a5:	0f be c0             	movsx  eax,al
c00198a8:	85 c0                	test   eax,eax
c00198aa:	75 08                	jne    c00198b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00198ac:	b8 07 00 00 00       	mov    eax,0x7
c00198b1:	eb 1d                	jmp    c00198d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00198b3:	90                   	nop
c00198b4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00198bb:	85 c0                	test   eax,eax
c00198bd:	75 09                	jne    c00198c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00198bf:	b8 00 00 00 00       	mov    eax,0x0
c00198c4:	eb 0a                	jmp    c00198d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00198c6:	66 90                	xchg   ax,ax
c00198c8:	b8 01 00 00 00       	mov    eax,0x1
c00198cd:	8d 76 00             	lea    esi,[esi+0x0]
c00198d0:	81 c4 50 02 00 00    	add    esp,0x250
c00198d6:	5b                   	pop    ebx
c00198d7:	5e                   	pop    esi
c00198d8:	5f                   	pop    edi
c00198d9:	c3                   	ret    
c00198da:	66 90                	xchg   ax,ax

c00198dc <FAT::read(void*, unsigned long, void*, int*)>:
c00198dc:	83 ec 1c             	sub    esp,0x1c
c00198df:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198e4:	74 0a                	je     c00198f0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00198e6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00198eb:	75 0b                	jne    c00198f8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00198ed:	8d 76 00             	lea    esi,[esi+0x0]
c00198f0:	b8 04 00 00 00       	mov    eax,0x4
c00198f5:	eb 41                	jmp    c0019938 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00198f7:	90                   	nop
c00198f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198fc:	50                   	push   eax
c00198fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019901:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019905:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019909:	e8 55 a6 fe ff       	call   c0003f63 <f_read>
c001990e:	83 c4 10             	add    esp,0x10
c0019911:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019915:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019919:	89 c2                	mov    edx,eax
c001991b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001991f:	89 10                	mov    DWORD PTR [eax],edx
c0019921:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019925:	85 c0                	test   eax,eax
c0019927:	75 07                	jne    c0019930 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019929:	b8 00 00 00 00       	mov    eax,0x0
c001992e:	eb 08                	jmp    c0019938 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019930:	b8 01 00 00 00       	mov    eax,0x1
c0019935:	8d 76 00             	lea    esi,[esi+0x0]
c0019938:	83 c4 1c             	add    esp,0x1c
c001993b:	c3                   	ret    

c001993c <FAT::write(void*, unsigned long, void*, int*)>:
c001993c:	83 ec 1c             	sub    esp,0x1c
c001993f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019944:	74 0a                	je     c0019950 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019946:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001994b:	75 0b                	jne    c0019958 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001994d:	8d 76 00             	lea    esi,[esi+0x0]
c0019950:	b8 04 00 00 00       	mov    eax,0x4
c0019955:	eb 41                	jmp    c0019998 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019957:	90                   	nop
c0019958:	8d 44 24 08          	lea    eax,[esp+0x8]
c001995c:	50                   	push   eax
c001995d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019961:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019965:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019969:	e8 d6 a7 fe ff       	call   c0004144 <f_write>
c001996e:	83 c4 10             	add    esp,0x10
c0019971:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019975:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019979:	89 c2                	mov    edx,eax
c001997b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001997f:	89 10                	mov    DWORD PTR [eax],edx
c0019981:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019985:	85 c0                	test   eax,eax
c0019987:	75 07                	jne    c0019990 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019989:	b8 00 00 00 00       	mov    eax,0x0
c001998e:	eb 08                	jmp    c0019998 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019990:	b8 01 00 00 00       	mov    eax,0x1
c0019995:	8d 76 00             	lea    esi,[esi+0x0]
c0019998:	83 c4 1c             	add    esp,0x1c
c001999b:	c3                   	ret    

c001999c <FAT::close(void*)>:
c001999c:	83 ec 1c             	sub    esp,0x1c
c001999f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199a4:	75 0a                	jne    c00199b0 <FAT::close(void*)+0x14>
c00199a6:	b8 04 00 00 00       	mov    eax,0x4
c00199ab:	eb 3f                	jmp    c00199ec <FAT::close(void*)+0x50>
c00199ad:	8d 76 00             	lea    esi,[esi+0x0]
c00199b0:	83 ec 0c             	sub    esp,0xc
c00199b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199b7:	e8 94 aa fe ff       	call   c0004450 <f_close>
c00199bc:	83 c4 10             	add    esp,0x10
c00199bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199c3:	83 ec 0c             	sub    esp,0xc
c00199c6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199ca:	e8 18 e1 fe ff       	call   c0007ae7 <free>
c00199cf:	83 c4 10             	add    esp,0x10
c00199d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199d6:	85 c0                	test   eax,eax
c00199d8:	75 0a                	jne    c00199e4 <FAT::close(void*)+0x48>
c00199da:	b8 00 00 00 00       	mov    eax,0x0
c00199df:	eb 0b                	jmp    c00199ec <FAT::close(void*)+0x50>
c00199e1:	8d 76 00             	lea    esi,[esi+0x0]
c00199e4:	b8 01 00 00 00       	mov    eax,0x1
c00199e9:	8d 76 00             	lea    esi,[esi+0x0]
c00199ec:	83 c4 1c             	add    esp,0x1c
c00199ef:	c3                   	ret    

c00199f0 <FAT::closeDir(void*)>:
c00199f0:	83 ec 1c             	sub    esp,0x1c
c00199f3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199f8:	75 0a                	jne    c0019a04 <FAT::closeDir(void*)+0x14>
c00199fa:	b8 04 00 00 00       	mov    eax,0x4
c00199ff:	eb 3f                	jmp    c0019a40 <FAT::closeDir(void*)+0x50>
c0019a01:	8d 76 00             	lea    esi,[esi+0x0]
c0019a04:	83 ec 0c             	sub    esp,0xc
c0019a07:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a0b:	e8 ea ac fe ff       	call   c00046fa <f_closedir>
c0019a10:	83 c4 10             	add    esp,0x10
c0019a13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a17:	83 ec 0c             	sub    esp,0xc
c0019a1a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a1e:	e8 c4 e0 fe ff       	call   c0007ae7 <free>
c0019a23:	83 c4 10             	add    esp,0x10
c0019a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a2a:	85 c0                	test   eax,eax
c0019a2c:	75 0a                	jne    c0019a38 <FAT::closeDir(void*)+0x48>
c0019a2e:	b8 00 00 00 00       	mov    eax,0x0
c0019a33:	eb 0b                	jmp    c0019a40 <FAT::closeDir(void*)+0x50>
c0019a35:	8d 76 00             	lea    esi,[esi+0x0]
c0019a38:	b8 01 00 00 00       	mov    eax,0x1
c0019a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a40:	83 c4 1c             	add    esp,0x1c
c0019a43:	c3                   	ret    

c0019a44 <FAT::truncate(void*, unsigned long long)>:
c0019a44:	83 ec 2c             	sub    esp,0x2c
c0019a47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a57:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a5c:	75 0a                	jne    c0019a68 <FAT::truncate(void*, unsigned long long)+0x24>
c0019a5e:	b8 04 00 00 00       	mov    eax,0x4
c0019a63:	eb 47                	jmp    c0019aac <FAT::truncate(void*, unsigned long long)+0x68>
c0019a65:	8d 76 00             	lea    esi,[esi+0x0]
c0019a68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019a6c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019a6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019a7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a7f:	83 ec 08             	sub    esp,0x8
c0019a82:	50                   	push   eax
c0019a83:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a87:	e8 f3 a9 fe ff       	call   c000447f <f_lseek>
c0019a8c:	83 c4 10             	add    esp,0x10
c0019a8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a97:	85 c0                	test   eax,eax
c0019a99:	75 09                	jne    c0019aa4 <FAT::truncate(void*, unsigned long long)+0x60>
c0019a9b:	b8 00 00 00 00       	mov    eax,0x0
c0019aa0:	eb 0a                	jmp    c0019aac <FAT::truncate(void*, unsigned long long)+0x68>
c0019aa2:	66 90                	xchg   ax,ax
c0019aa4:	b8 01 00 00 00       	mov    eax,0x1
c0019aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aac:	83 c4 2c             	add    esp,0x2c
c0019aaf:	c3                   	ret    

c0019ab0 <FAT::seek(void*, unsigned long long)>:
c0019ab0:	83 ec 2c             	sub    esp,0x2c
c0019ab3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ab7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019abb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019abf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ac3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019ac8:	75 0a                	jne    c0019ad4 <FAT::seek(void*, unsigned long long)+0x24>
c0019aca:	b8 04 00 00 00       	mov    eax,0x4
c0019acf:	eb 33                	jmp    c0019b04 <FAT::seek(void*, unsigned long long)+0x54>
c0019ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ad4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ad8:	83 ec 08             	sub    esp,0x8
c0019adb:	50                   	push   eax
c0019adc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019ae0:	e8 9a a9 fe ff       	call   c000447f <f_lseek>
c0019ae5:	83 c4 10             	add    esp,0x10
c0019ae8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019aec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019af0:	85 c0                	test   eax,eax
c0019af2:	75 08                	jne    c0019afc <FAT::seek(void*, unsigned long long)+0x4c>
c0019af4:	b8 00 00 00 00       	mov    eax,0x0
c0019af9:	eb 09                	jmp    c0019b04 <FAT::seek(void*, unsigned long long)+0x54>
c0019afb:	90                   	nop
c0019afc:	b8 01 00 00 00       	mov    eax,0x1
c0019b01:	8d 76 00             	lea    esi,[esi+0x0]
c0019b04:	83 c4 2c             	add    esp,0x2c
c0019b07:	c3                   	ret    

c0019b08 <fatWrapperReadDisk>:
c0019b08:	53                   	push   ebx
c0019b09:	83 ec 18             	sub    esp,0x18
c0019b0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b10:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b19:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b20:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b28:	ba 00 00 00 00       	mov    edx,0x0
c0019b2d:	83 ec 0c             	sub    esp,0xc
c0019b30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b34:	53                   	push   ebx
c0019b35:	52                   	push   edx
c0019b36:	50                   	push   eax
c0019b37:	51                   	push   ecx
c0019b38:	e8 65 42 ff ff       	call   c000dda2 <LogicalDisk::read(unsigned long long, int, void*)>
c0019b3d:	83 c4 20             	add    esp,0x20
c0019b40:	83 c4 18             	add    esp,0x18
c0019b43:	5b                   	pop    ebx
c0019b44:	c3                   	ret    
c0019b45:	8d 76 00             	lea    esi,[esi+0x0]

c0019b48 <fatWrapperWriteDisk>:
c0019b48:	53                   	push   ebx
c0019b49:	83 ec 18             	sub    esp,0x18
c0019b4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b50:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b59:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b60:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b68:	ba 00 00 00 00       	mov    edx,0x0
c0019b6d:	83 ec 0c             	sub    esp,0xc
c0019b70:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b74:	53                   	push   ebx
c0019b75:	52                   	push   edx
c0019b76:	50                   	push   eax
c0019b77:	51                   	push   ecx
c0019b78:	e8 91 42 ff ff       	call   c000de0e <LogicalDisk::write(unsigned long long, int, void*)>
c0019b7d:	83 c4 20             	add    esp,0x20
c0019b80:	83 c4 18             	add    esp,0x18
c0019b83:	5b                   	pop    ebx
c0019b84:	c3                   	ret    
c0019b85:	8d 76 00             	lea    esi,[esi+0x0]

c0019b88 <fatWrapperIoctl>:
c0019b88:	53                   	push   ebx
c0019b89:	83 ec 28             	sub    esp,0x28
c0019b8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019b90:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019b94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b98:	88 d0                	mov    al,dl
c0019b9a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ba3:	83 f8 02             	cmp    eax,0x2
c0019ba6:	75 34                	jne    c0019bdc <fatWrapperIoctl+0x54>
c0019ba8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019bb0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bb5:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019bbc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bc2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019bc8:	89 c2                	mov    edx,eax
c0019bca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bce:	66 89 10             	mov    WORD PTR [eax],dx
c0019bd1:	b8 00 00 00 00       	mov    eax,0x0
c0019bd6:	e9 c5 00 00 00       	jmp    c0019ca0 <fatWrapperIoctl+0x118>
c0019bdb:	90                   	nop
c0019bdc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019be1:	83 f8 01             	cmp    eax,0x1
c0019be4:	75 6a                	jne    c0019c50 <fatWrapperIoctl+0xc8>
c0019be6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019bee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bf3:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019bfa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c00:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019c06:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019c0c:	89 c8                	mov    eax,ecx
c0019c0e:	89 da                	mov    edx,ebx
c0019c10:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019c14:	c1 e0 0a             	shl    eax,0xa
c0019c17:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c1c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019c23:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c29:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c2f:	89 cb                	mov    ebx,ecx
c0019c31:	c1 fb 1f             	sar    ebx,0x1f
c0019c34:	53                   	push   ebx
c0019c35:	51                   	push   ecx
c0019c36:	52                   	push   edx
c0019c37:	50                   	push   eax
c0019c38:	e8 b3 5b 00 00       	call   c001f7f0 <__udivdi3>
c0019c3d:	83 c4 10             	add    esp,0x10
c0019c40:	89 c2                	mov    edx,eax
c0019c42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c46:	89 10                	mov    DWORD PTR [eax],edx
c0019c48:	b8 00 00 00 00       	mov    eax,0x0
c0019c4d:	eb 51                	jmp    c0019ca0 <fatWrapperIoctl+0x118>
c0019c4f:	90                   	nop
c0019c50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c55:	85 c0                	test   eax,eax
c0019c57:	75 07                	jne    c0019c60 <fatWrapperIoctl+0xd8>
c0019c59:	b8 00 00 00 00       	mov    eax,0x0
c0019c5e:	eb 40                	jmp    c0019ca0 <fatWrapperIoctl+0x118>
c0019c60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c65:	83 f8 03             	cmp    eax,0x3
c0019c68:	75 1a                	jne    c0019c84 <fatWrapperIoctl+0xfc>
c0019c6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c76:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019c7c:	b8 00 00 00 00       	mov    eax,0x0
c0019c81:	eb 1d                	jmp    c0019ca0 <fatWrapperIoctl+0x118>
c0019c83:	90                   	nop
c0019c84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c89:	83 f8 04             	cmp    eax,0x4
c0019c8c:	75 0a                	jne    c0019c98 <fatWrapperIoctl+0x110>
c0019c8e:	b8 00 00 00 00       	mov    eax,0x0
c0019c93:	eb 0b                	jmp    c0019ca0 <fatWrapperIoctl+0x118>
c0019c95:	8d 76 00             	lea    esi,[esi+0x0]
c0019c98:	b8 04 00 00 00       	mov    eax,0x4
c0019c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ca0:	83 c4 28             	add    esp,0x28
c0019ca3:	5b                   	pop    ebx
c0019ca4:	c3                   	ret    
c0019ca5:	90                   	nop
c0019ca6:	66 90                	xchg   ax,ax

c0019ca8 <FAT::FAT()>:
c0019ca8:	83 ec 1c             	sub    esp,0x1c
c0019cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019caf:	83 ec 0c             	sub    esp,0xc
c0019cb2:	50                   	push   eax
c0019cb3:	e8 b8 1a ff ff       	call   c000b770 <Filesystem::Filesystem()>
c0019cb8:	83 c4 10             	add    esp,0x10
c0019cbb:	ba 80 2f 02 c0       	mov    edx,0xc0022f80
c0019cc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cc4:	89 10                	mov    DWORD PTR [eax],edx
c0019cc6:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019cd0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cd8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019cdd:	7f 19                	jg     c0019cf8 <FAT::FAT()+0x50>
c0019cdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ce3:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019cee:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019cf3:	eb e3                	jmp    c0019cd8 <FAT::FAT()+0x30>
c0019cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cf8:	90                   	nop
c0019cf9:	83 c4 1c             	add    esp,0x1c
c0019cfc:	c3                   	ret    
c0019cfd:	90                   	nop
c0019cfe:	66 90                	xchg   ax,ax

c0019d00 <FAT::fixFilepath(char*)>:
c0019d00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d04:	8a 00                	mov    al,BYTE PTR [eax]
c0019d06:	0f be c0             	movsx  eax,al
c0019d09:	83 f8 40             	cmp    eax,0x40
c0019d0c:	7e 2e                	jle    c0019d3c <FAT::fixFilepath(char*)+0x3c>
c0019d0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d12:	8a 00                	mov    al,BYTE PTR [eax]
c0019d14:	83 e8 41             	sub    eax,0x41
c0019d17:	88 c2                	mov    dl,al
c0019d19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d1d:	88 10                	mov    BYTE PTR [eax],dl
c0019d1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d23:	8a 00                	mov    al,BYTE PTR [eax]
c0019d25:	0f be c0             	movsx  eax,al
c0019d28:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019d2f:	83 c0 30             	add    eax,0x30
c0019d32:	88 c2                	mov    dl,al
c0019d34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d38:	88 10                	mov    BYTE PTR [eax],dl
c0019d3a:	66 90                	xchg   ax,ax
c0019d3c:	90                   	nop
c0019d3d:	c3                   	ret    
c0019d3e:	66 90                	xchg   ax,ax

c0019d40 <FAT::open(char const*, void**, FileOpenMode)>:
c0019d40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d4e:	74 0c                	je     c0019d5c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019d50:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d58:	75 0e                	jne    c0019d68 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019d5a:	66 90                	xchg   ax,ax
c0019d5c:	b8 04 00 00 00       	mov    eax,0x4
c0019d61:	e9 46 01 00 00       	jmp    c0019eac <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d66:	66 90                	xchg   ax,ax
c0019d68:	83 ec 08             	sub    esp,0x8
c0019d6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d72:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d76:	50                   	push   eax
c0019d77:	e8 d4 68 fe ff       	call   c0000650 <strcpy>
c0019d7c:	83 c4 10             	add    esp,0x10
c0019d7f:	83 ec 08             	sub    esp,0x8
c0019d82:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d86:	50                   	push   eax
c0019d87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d8e:	e8 6d ff ff ff       	call   c0019d00 <FAT::fixFilepath(char*)>
c0019d93:	83 c4 10             	add    esp,0x10
c0019d96:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019d9e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019da5:	83 e0 01             	and    eax,0x1
c0019da8:	74 12                	je     c0019dbc <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019daa:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019db1:	83 c8 01             	or     eax,0x1
c0019db4:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dbb:	90                   	nop
c0019dbc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dc3:	83 e0 04             	and    eax,0x4
c0019dc6:	74 24                	je     c0019dec <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019dc8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dcf:	83 c8 30             	or     eax,0x30
c0019dd2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dd9:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019de0:	83 c8 02             	or     eax,0x2
c0019de3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dea:	66 90                	xchg   ax,ax
c0019dec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019df3:	83 e0 02             	and    eax,0x2
c0019df6:	74 14                	je     c0019e0c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019df8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dff:	83 c8 02             	or     eax,0x2
c0019e02:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e09:	8d 76 00             	lea    esi,[esi+0x0]
c0019e0c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e13:	83 e0 08             	and    eax,0x8
c0019e16:	74 14                	je     c0019e2c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019e18:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e1f:	83 c8 04             	or     eax,0x4
c0019e22:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e29:	8d 76 00             	lea    esi,[esi+0x0]
c0019e2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e33:	83 e0 10             	and    eax,0x10
c0019e36:	74 14                	je     c0019e4c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019e38:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e3f:	83 c8 08             	or     eax,0x8
c0019e42:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e49:	8d 76 00             	lea    esi,[esi+0x0]
c0019e4c:	83 ec 0c             	sub    esp,0xc
c0019e4f:	68 28 02 00 00       	push   0x228
c0019e54:	e8 7e dc fe ff       	call   c0007ad7 <malloc>
c0019e59:	83 c4 10             	add    esp,0x10
c0019e5c:	89 c2                	mov    edx,eax
c0019e5e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e65:	89 10                	mov    DWORD PTR [eax],edx
c0019e67:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019e6f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e76:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e78:	83 ec 04             	sub    esp,0x4
c0019e7b:	52                   	push   edx
c0019e7c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e80:	52                   	push   edx
c0019e81:	50                   	push   eax
c0019e82:	e8 19 9e fe ff       	call   c0003ca0 <f_open>
c0019e87:	83 c4 10             	add    esp,0x10
c0019e8a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e91:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e99:	74 09                	je     c0019ea4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019e9b:	b8 01 00 00 00       	mov    eax,0x1
c0019ea0:	eb 0a                	jmp    c0019eac <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019ea2:	66 90                	xchg   ax,ax
c0019ea4:	b8 00 00 00 00       	mov    eax,0x0
c0019ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0019eac:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019eb2:	c3                   	ret    
c0019eb3:	90                   	nop

c0019eb4 <FAT::openDir(char const*, void**)>:
c0019eb4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019eba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019ec2:	74 0c                	je     c0019ed0 <FAT::openDir(char const*, void**)+0x1c>
c0019ec4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019ecc:	75 0e                	jne    c0019edc <FAT::openDir(char const*, void**)+0x28>
c0019ece:	66 90                	xchg   ax,ax
c0019ed0:	b8 04 00 00 00       	mov    eax,0x4
c0019ed5:	e9 82 00 00 00       	jmp    c0019f5c <FAT::openDir(char const*, void**)+0xa8>
c0019eda:	66 90                	xchg   ax,ax
c0019edc:	83 ec 08             	sub    esp,0x8
c0019edf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ee6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019eea:	50                   	push   eax
c0019eeb:	e8 60 67 fe ff       	call   c0000650 <strcpy>
c0019ef0:	83 c4 10             	add    esp,0x10
c0019ef3:	83 ec 08             	sub    esp,0x8
c0019ef6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019efa:	50                   	push   eax
c0019efb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f02:	e8 f9 fd ff ff       	call   c0019d00 <FAT::fixFilepath(char*)>
c0019f07:	83 c4 10             	add    esp,0x10
c0019f0a:	83 ec 0c             	sub    esp,0xc
c0019f0d:	6a 30                	push   0x30
c0019f0f:	e8 c3 db fe ff       	call   c0007ad7 <malloc>
c0019f14:	83 c4 10             	add    esp,0x10
c0019f17:	89 c2                	mov    edx,eax
c0019f19:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f20:	89 10                	mov    DWORD PTR [eax],edx
c0019f22:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f29:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f2b:	83 ec 08             	sub    esp,0x8
c0019f2e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019f32:	52                   	push   edx
c0019f33:	50                   	push   eax
c0019f34:	e8 f6 a6 fe ff       	call   c000462f <f_opendir>
c0019f39:	83 c4 10             	add    esp,0x10
c0019f3c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f43:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f4b:	74 07                	je     c0019f54 <FAT::openDir(char const*, void**)+0xa0>
c0019f4d:	b8 01 00 00 00       	mov    eax,0x1
c0019f52:	eb 08                	jmp    c0019f5c <FAT::openDir(char const*, void**)+0xa8>
c0019f54:	b8 00 00 00 00       	mov    eax,0x0
c0019f59:	8d 76 00             	lea    esi,[esi+0x0]
c0019f5c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f62:	c3                   	ret    
c0019f63:	90                   	nop

c0019f64 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019f64:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f6a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019f72:	75 0c                	jne    c0019f80 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019f74:	b8 04 00 00 00       	mov    eax,0x4
c0019f79:	e9 d6 00 00 00       	jmp    c001a054 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f7e:	66 90                	xchg   ax,ax
c0019f80:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f88:	75 0a                	jne    c0019f94 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019f8a:	b8 04 00 00 00       	mov    eax,0x4
c0019f8f:	e9 c0 00 00 00       	jmp    c001a054 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f94:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f9c:	75 0a                	jne    c0019fa8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019f9e:	b8 04 00 00 00       	mov    eax,0x4
c0019fa3:	e9 ac 00 00 00       	jmp    c001a054 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fa8:	83 ec 08             	sub    esp,0x8
c0019fab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fb2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019fb9:	50                   	push   eax
c0019fba:	e8 91 66 fe ff       	call   c0000650 <strcpy>
c0019fbf:	83 c4 10             	add    esp,0x10
c0019fc2:	83 ec 08             	sub    esp,0x8
c0019fc5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019fcc:	50                   	push   eax
c0019fcd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fd4:	e8 27 fd ff ff       	call   c0019d00 <FAT::fixFilepath(char*)>
c0019fd9:	83 c4 10             	add    esp,0x10
c0019fdc:	83 ec 08             	sub    esp,0x8
c0019fdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019fe3:	50                   	push   eax
c0019fe4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019feb:	50                   	push   eax
c0019fec:	e8 bd a7 fe ff       	call   c00047ae <f_stat>
c0019ff1:	83 c4 10             	add    esp,0x10
c0019ff4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019ffb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a002:	85 c0                	test   eax,eax
c001a004:	74 0a                	je     c001a010 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a006:	83 f8 04             	cmp    eax,0x4
c001a009:	74 39                	je     c001a044 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a00b:	eb 3f                	jmp    c001a04c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a00d:	8d 76 00             	lea    esi,[esi+0x0]
c001a010:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a014:	0f b6 c0             	movzx  eax,al
c001a017:	83 e0 10             	and    eax,0x10
c001a01a:	0f 95 c2             	setne  dl
c001a01d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a024:	88 10                	mov    BYTE PTR [eax],dl
c001a026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a02a:	ba 00 00 00 00       	mov    edx,0x0
c001a02f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a036:	89 01                	mov    DWORD PTR [ecx],eax
c001a038:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a03b:	b8 00 00 00 00       	mov    eax,0x0
c001a040:	eb 12                	jmp    c001a054 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a042:	66 90                	xchg   ax,ax
c001a044:	b8 02 00 00 00       	mov    eax,0x2
c001a049:	eb 09                	jmp    c001a054 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a04b:	90                   	nop
c001a04c:	b8 01 00 00 00       	mov    eax,0x1
c001a051:	8d 76 00             	lea    esi,[esi+0x0]
c001a054:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a05a:	c3                   	ret    
c001a05b:	90                   	nop

c001a05c <FAT::unlink(char const*)>:
c001a05c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a062:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a06a:	75 08                	jne    c001a074 <FAT::unlink(char const*)+0x18>
c001a06c:	b8 04 00 00 00       	mov    eax,0x4
c001a071:	eb 61                	jmp    c001a0d4 <FAT::unlink(char const*)+0x78>
c001a073:	90                   	nop
c001a074:	83 ec 08             	sub    esp,0x8
c001a077:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a07e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a082:	50                   	push   eax
c001a083:	e8 c8 65 fe ff       	call   c0000650 <strcpy>
c001a088:	83 c4 10             	add    esp,0x10
c001a08b:	83 ec 08             	sub    esp,0x8
c001a08e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a092:	50                   	push   eax
c001a093:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a09a:	e8 61 fc ff ff       	call   c0019d00 <FAT::fixFilepath(char*)>
c001a09f:	83 c4 10             	add    esp,0x10
c001a0a2:	83 ec 0c             	sub    esp,0xc
c001a0a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0a9:	50                   	push   eax
c001a0aa:	e8 71 a9 fe ff       	call   c0004a20 <f_unlink>
c001a0af:	83 c4 10             	add    esp,0x10
c001a0b2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a0b9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a0c0:	85 c0                	test   eax,eax
c001a0c2:	75 08                	jne    c001a0cc <FAT::unlink(char const*)+0x70>
c001a0c4:	b8 00 00 00 00       	mov    eax,0x0
c001a0c9:	eb 09                	jmp    c001a0d4 <FAT::unlink(char const*)+0x78>
c001a0cb:	90                   	nop
c001a0cc:	b8 01 00 00 00       	mov    eax,0x1
c001a0d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0d4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a0da:	c3                   	ret    
c001a0db:	90                   	nop

c001a0dc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a0dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0e2:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a0e9:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a0f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0f4:	88 d0                	mov    al,dl
c001a0f6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a0fa:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a102:	75 0c                	jne    c001a110 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a104:	b8 04 00 00 00       	mov    eax,0x4
c001a109:	e9 7e 01 00 00       	jmp    c001a28c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a10e:	66 90                	xchg   ax,ax
c001a110:	83 ec 08             	sub    esp,0x8
c001a113:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a11a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a11e:	50                   	push   eax
c001a11f:	e8 2c 65 fe ff       	call   c0000650 <strcpy>
c001a124:	83 c4 10             	add    esp,0x10
c001a127:	83 ec 08             	sub    esp,0x8
c001a12a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a12e:	50                   	push   eax
c001a12f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a136:	e8 c5 fb ff ff       	call   c0019d00 <FAT::fixFilepath(char*)>
c001a13b:	83 c4 10             	add    esp,0x10
c001a13e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a146:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a14e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a153:	83 e0 01             	and    eax,0x1
c001a156:	74 14                	je     c001a16c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a158:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a15f:	83 c8 01             	or     eax,0x1
c001a162:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a169:	8d 76 00             	lea    esi,[esi+0x0]
c001a16c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a171:	83 e0 02             	and    eax,0x2
c001a174:	74 12                	je     c001a188 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a176:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a17d:	83 c8 20             	or     eax,0x20
c001a180:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a187:	90                   	nop
c001a188:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a18d:	83 e0 04             	and    eax,0x4
c001a190:	74 12                	je     c001a1a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a192:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a199:	83 c8 04             	or     eax,0x4
c001a19c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1a3:	90                   	nop
c001a1a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1a9:	83 e0 08             	and    eax,0x8
c001a1ac:	74 12                	je     c001a1c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a1ae:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1b5:	83 c8 02             	or     eax,0x2
c001a1b8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1bf:	90                   	nop
c001a1c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1c5:	83 e0 01             	and    eax,0x1
c001a1c8:	74 12                	je     c001a1dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a1ca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1d1:	83 c8 01             	or     eax,0x1
c001a1d4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1db:	90                   	nop
c001a1dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1e1:	83 e0 02             	and    eax,0x2
c001a1e4:	74 12                	je     c001a1f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a1e6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1ed:	83 c8 20             	or     eax,0x20
c001a1f0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1f7:	90                   	nop
c001a1f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1fd:	83 e0 04             	and    eax,0x4
c001a200:	74 12                	je     c001a214 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a202:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a209:	83 c8 04             	or     eax,0x4
c001a20c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a213:	90                   	nop
c001a214:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a219:	83 e0 08             	and    eax,0x8
c001a21c:	74 12                	je     c001a230 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a21e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a225:	83 c8 02             	or     eax,0x2
c001a228:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a22f:	90                   	nop
c001a230:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a237:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a23e:	09 d0                	or     eax,edx
c001a240:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a247:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a24f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a257:	83 ec 04             	sub    esp,0x4
c001a25a:	52                   	push   edx
c001a25b:	50                   	push   eax
c001a25c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a260:	50                   	push   eax
c001a261:	e8 2d ac fe ff       	call   c0004e93 <f_chmod>
c001a266:	83 c4 10             	add    esp,0x10
c001a269:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a270:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a277:	85 c0                	test   eax,eax
c001a279:	75 09                	jne    c001a284 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a27b:	b8 00 00 00 00       	mov    eax,0x0
c001a280:	eb 0a                	jmp    c001a28c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a282:	66 90                	xchg   ax,ax
c001a284:	b8 01 00 00 00       	mov    eax,0x1
c001a289:	8d 76 00             	lea    esi,[esi+0x0]
c001a28c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a292:	c3                   	ret    
c001a293:	90                   	nop

c001a294 <FAT::rename(char const*, char const*)>:
c001a294:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a29a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a2a2:	74 0c                	je     c001a2b0 <FAT::rename(char const*, char const*)+0x1c>
c001a2a4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a2ac:	75 0e                	jne    c001a2bc <FAT::rename(char const*, char const*)+0x28>
c001a2ae:	66 90                	xchg   ax,ax
c001a2b0:	b8 04 00 00 00       	mov    eax,0x4
c001a2b5:	e9 9e 00 00 00       	jmp    c001a358 <FAT::rename(char const*, char const*)+0xc4>
c001a2ba:	66 90                	xchg   ax,ax
c001a2bc:	83 ec 08             	sub    esp,0x8
c001a2bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2c6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a2cd:	50                   	push   eax
c001a2ce:	e8 7d 63 fe ff       	call   c0000650 <strcpy>
c001a2d3:	83 c4 10             	add    esp,0x10
c001a2d6:	83 ec 08             	sub    esp,0x8
c001a2d9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a2e0:	50                   	push   eax
c001a2e1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2e8:	e8 13 fa ff ff       	call   c0019d00 <FAT::fixFilepath(char*)>
c001a2ed:	83 c4 10             	add    esp,0x10
c001a2f0:	83 ec 08             	sub    esp,0x8
c001a2f3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a2fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2fe:	50                   	push   eax
c001a2ff:	e8 4c 63 fe ff       	call   c0000650 <strcpy>
c001a304:	83 c4 10             	add    esp,0x10
c001a307:	83 ec 08             	sub    esp,0x8
c001a30a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a30e:	50                   	push   eax
c001a30f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a316:	e8 e5 f9 ff ff       	call   c0019d00 <FAT::fixFilepath(char*)>
c001a31b:	83 c4 10             	add    esp,0x10
c001a31e:	83 ec 08             	sub    esp,0x8
c001a321:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a325:	50                   	push   eax
c001a326:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a32d:	50                   	push   eax
c001a32e:	e8 a8 a9 fe ff       	call   c0004cdb <f_rename>
c001a333:	83 c4 10             	add    esp,0x10
c001a336:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a33d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a344:	85 c0                	test   eax,eax
c001a346:	75 08                	jne    c001a350 <FAT::rename(char const*, char const*)+0xbc>
c001a348:	b8 00 00 00 00       	mov    eax,0x0
c001a34d:	eb 09                	jmp    c001a358 <FAT::rename(char const*, char const*)+0xc4>
c001a34f:	90                   	nop
c001a350:	b8 01 00 00 00       	mov    eax,0x1
c001a355:	8d 76 00             	lea    esi,[esi+0x0]
c001a358:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a35e:	c3                   	ret    
c001a35f:	90                   	nop

c001a360 <FAT::mkdir(char const*)>:
c001a360:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a366:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a36e:	75 08                	jne    c001a378 <FAT::mkdir(char const*)+0x18>
c001a370:	b8 04 00 00 00       	mov    eax,0x4
c001a375:	eb 61                	jmp    c001a3d8 <FAT::mkdir(char const*)+0x78>
c001a377:	90                   	nop
c001a378:	83 ec 08             	sub    esp,0x8
c001a37b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a382:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a386:	50                   	push   eax
c001a387:	e8 c4 62 fe ff       	call   c0000650 <strcpy>
c001a38c:	83 c4 10             	add    esp,0x10
c001a38f:	83 ec 08             	sub    esp,0x8
c001a392:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a396:	50                   	push   eax
c001a397:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a39e:	e8 5d f9 ff ff       	call   c0019d00 <FAT::fixFilepath(char*)>
c001a3a3:	83 c4 10             	add    esp,0x10
c001a3a6:	83 ec 0c             	sub    esp,0xc
c001a3a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3ad:	50                   	push   eax
c001a3ae:	e8 8d a7 fe ff       	call   c0004b40 <f_mkdir>
c001a3b3:	83 c4 10             	add    esp,0x10
c001a3b6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a3bd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a3c4:	85 c0                	test   eax,eax
c001a3c6:	75 08                	jne    c001a3d0 <FAT::mkdir(char const*)+0x70>
c001a3c8:	b8 00 00 00 00       	mov    eax,0x0
c001a3cd:	eb 09                	jmp    c001a3d8 <FAT::mkdir(char const*)+0x78>
c001a3cf:	90                   	nop
c001a3d0:	b8 01 00 00 00       	mov    eax,0x1
c001a3d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a3de:	c3                   	ret    
c001a3df:	90                   	nop

c001a3e0 <FAT::exists(char const*)>:
c001a3e0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a3e6:	83 ec 08             	sub    esp,0x8
c001a3e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a3f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3f4:	50                   	push   eax
c001a3f5:	e8 56 62 fe ff       	call   c0000650 <strcpy>
c001a3fa:	83 c4 10             	add    esp,0x10
c001a3fd:	83 ec 08             	sub    esp,0x8
c001a400:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a404:	50                   	push   eax
c001a405:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a40c:	e8 ef f8 ff ff       	call   c0019d00 <FAT::fixFilepath(char*)>
c001a411:	83 c4 10             	add    esp,0x10
c001a414:	83 ec 08             	sub    esp,0x8
c001a417:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a41e:	50                   	push   eax
c001a41f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a423:	50                   	push   eax
c001a424:	e8 85 a3 fe ff       	call   c00047ae <f_stat>
c001a429:	83 c4 10             	add    esp,0x10
c001a42c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a433:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a43a:	85 c0                	test   eax,eax
c001a43c:	75 06                	jne    c001a444 <FAT::exists(char const*)+0x64>
c001a43e:	b0 01                	mov    al,0x1
c001a440:	eb 06                	jmp    c001a448 <FAT::exists(char const*)+0x68>
c001a442:	66 90                	xchg   ax,ax
c001a444:	b0 00                	mov    al,0x0
c001a446:	66 90                	xchg   ax,ax
c001a448:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a44e:	c3                   	ret    
c001a44f:	90                   	nop

c001a450 <isoReadDiscSectorHelper>:
c001a450:	83 ec 2c             	sub    esp,0x2c
c001a453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a457:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a45b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a460:	83 e8 41             	sub    eax,0x41
c001a463:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a46a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a46e:	ba 00 00 00 00       	mov    edx,0x0
c001a473:	83 ec 0c             	sub    esp,0xc
c001a476:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a47a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a47e:	52                   	push   edx
c001a47f:	50                   	push   eax
c001a480:	51                   	push   ecx
c001a481:	e8 1c 39 ff ff       	call   c000dda2 <LogicalDisk::read(unsigned long long, int, void*)>
c001a486:	83 c4 20             	add    esp,0x20
c001a489:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a48d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a492:	74 0c                	je     c001a4a0 <isoReadDiscSectorHelper+0x50>
c001a494:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a498:	c1 e0 0b             	shl    eax,0xb
c001a49b:	eb 0b                	jmp    c001a4a8 <isoReadDiscSectorHelper+0x58>
c001a49d:	8d 76 00             	lea    esi,[esi+0x0]
c001a4a0:	b8 00 00 00 00       	mov    eax,0x0
c001a4a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4a8:	83 c4 2c             	add    esp,0x2c
c001a4ab:	c3                   	ret    

c001a4ac <iso_kprintf>:
c001a4ac:	83 ec 0c             	sub    esp,0xc
c001a4af:	83 ec 08             	sub    esp,0x8
c001a4b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4b6:	68 2e 2d 02 c0       	push   0xc0022d2e
c001a4bb:	e8 4e 04 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001a4c0:	83 c4 10             	add    esp,0x10
c001a4c3:	90                   	nop
c001a4c4:	83 c4 0c             	add    esp,0xc
c001a4c7:	c3                   	ret    

c001a4c8 <iso_kprintfd>:
c001a4c8:	83 ec 0c             	sub    esp,0xc
c001a4cb:	83 ec 08             	sub    esp,0x8
c001a4ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4d2:	68 d2 13 02 c0       	push   0xc00213d2
c001a4d7:	e8 32 04 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001a4dc:	83 c4 10             	add    esp,0x10
c001a4df:	90                   	nop
c001a4e0:	83 c4 0c             	add    esp,0xc
c001a4e3:	c3                   	ret    

c001a4e4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a4e4:	b8 08 00 00 00       	mov    eax,0x8
c001a4e9:	c3                   	ret    

c001a4ea <ISO9660::truncate(void*, unsigned long long)>:
c001a4ea:	b8 01 00 00 00       	mov    eax,0x1
c001a4ef:	c3                   	ret    

c001a4f0 <ISO9660::getName()>:
c001a4f0:	b8 e4 2f 02 c0       	mov    eax,0xc0022fe4
c001a4f5:	c3                   	ret    

c001a4f6 <ISO9660::closeDir(void*)>:
c001a4f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4fa:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4fc:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a4ff:	90                   	nop

c001a500 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a500:	b8 01 00 00 00       	mov    eax,0x1
c001a505:	c3                   	ret    

c001a506 <ISO9660::unlink(char const*)>:
c001a506:	b8 01 00 00 00       	mov    eax,0x1
c001a50b:	c3                   	ret    

c001a50c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a50c:	b8 03 00 00 00       	mov    eax,0x3
c001a511:	c3                   	ret    

c001a512 <ISO9660::rename(char const*, char const*)>:
c001a512:	b8 01 00 00 00       	mov    eax,0x1
c001a517:	c3                   	ret    

c001a518 <ISO9660::mkdir(char const*)>:
c001a518:	b8 01 00 00 00       	mov    eax,0x1
c001a51d:	c3                   	ret    

c001a51e <ISO9660::~ISO9660()>:
c001a51e:	83 ec 0c             	sub    esp,0xc
c001a521:	ba 24 31 02 c0       	mov    edx,0xc0023124
c001a526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a52a:	89 10                	mov    DWORD PTR [eax],edx
c001a52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a530:	83 ec 0c             	sub    esp,0xc
c001a533:	50                   	push   eax
c001a534:	e8 5b 12 ff ff       	call   c000b794 <Filesystem::~Filesystem()>
c001a539:	83 c4 10             	add    esp,0x10
c001a53c:	90                   	nop
c001a53d:	83 c4 0c             	add    esp,0xc
c001a540:	c3                   	ret    
c001a541:	90                   	nop

c001a542 <ISO9660::~ISO9660()>:
c001a542:	83 ec 0c             	sub    esp,0xc
c001a545:	83 ec 0c             	sub    esp,0xc
c001a548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a54c:	e8 cd ff ff ff       	call   c001a51e <ISO9660::~ISO9660()>
c001a551:	83 c4 10             	add    esp,0x10
c001a554:	83 ec 08             	sub    esp,0x8
c001a557:	6a 08                	push   0x8
c001a559:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a55d:	e8 ae 02 ff ff       	call   c000a810 <operator delete(void*, unsigned long)>
c001a562:	83 c4 10             	add    esp,0x10
c001a565:	83 c4 0c             	add    esp,0xc
c001a568:	c3                   	ret    
c001a569:	90                   	nop

c001a56a <ISO9660::exists(char const*)>:
c001a56a:	83 ec 18             	sub    esp,0x18
c001a56d:	68 ff 2f 02 c0       	push   0xc0022fff
c001a572:	e8 90 70 ff ff       	call   c0011607 <KePanic(char const*)>
c001a577:	31 c0                	xor    eax,eax
c001a579:	83 c4 1c             	add    esp,0x1c
c001a57c:	c3                   	ret    
c001a57d:	90                   	nop

c001a57e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a57e:	56                   	push   esi
c001a57f:	53                   	push   ebx
c001a580:	53                   	push   ebx
c001a581:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a585:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a589:	85 db                	test   ebx,ebx
c001a58b:	0f 84 ca 00 00 00    	je     c001a65b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a591:	85 f6                	test   esi,esi
c001a593:	0f 84 c2 00 00 00    	je     c001a65b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a599:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a59e:	b8 03 00 00 00       	mov    eax,0x3
c001a5a3:	0f 85 b7 00 00 00    	jne    c001a660 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5a9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a5ab:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a5b1:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a5b8:	74 1b                	je     c001a5d5 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a5ba:	85 c0                	test   eax,eax
c001a5bc:	74 10                	je     c001a5ce <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a5be:	83 ec 0c             	sub    esp,0xc
c001a5c1:	68 1d 30 02 c0       	push   0xc002301d
c001a5c6:	e8 3c 70 ff ff       	call   c0011607 <KePanic(char const*)>
c001a5cb:	83 c4 10             	add    esp,0x10
c001a5ce:	8a 03                	mov    al,BYTE PTR [ebx]
c001a5d0:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a5d5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5d8:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a5df:	85 c0                	test   eax,eax
c001a5e1:	74 09                	je     c001a5ec <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a5e3:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a5ea:	74 48                	je     c001a634 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a5ec:	83 ec 0c             	sub    esp,0xc
c001a5ef:	68 2d 30 02 c0       	push   0xc002302d
c001a5f4:	e8 15 03 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001a5f9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5fc:	83 c4 10             	add    esp,0x10
c001a5ff:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a606:	85 c0                	test   eax,eax
c001a608:	74 17                	je     c001a621 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a60a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a611:	83 ec 0c             	sub    esp,0xc
c001a614:	68 4d 30 02 c0       	push   0xc002304d
c001a619:	e8 f0 02 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001a61e:	83 c4 10             	add    esp,0x10
c001a621:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a628:	83 ec 0c             	sub    esp,0xc
c001a62b:	50                   	push   eax
c001a62c:	e8 36 c4 fe ff       	call   c0006a67 <init_percd>
c001a631:	83 c4 10             	add    esp,0x10
c001a634:	51                   	push   ecx
c001a635:	83 c3 03             	add    ebx,0x3
c001a638:	51                   	push   ecx
c001a639:	6a 00                	push   0x0
c001a63b:	53                   	push   ebx
c001a63c:	e8 e9 be fe ff       	call   c000652a <iso_open>
c001a641:	83 c4 10             	add    esp,0x10
c001a644:	89 c2                	mov    edx,eax
c001a646:	b8 01 00 00 00       	mov    eax,0x1
c001a64b:	83 fa ff             	cmp    edx,0xffffffff
c001a64e:	74 10                	je     c001a660 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a650:	83 c2 32             	add    edx,0x32
c001a653:	31 c0                	xor    eax,eax
c001a655:	01 d2                	add    edx,edx
c001a657:	89 16                	mov    DWORD PTR [esi],edx
c001a659:	eb 05                	jmp    c001a660 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a65b:	b8 04 00 00 00       	mov    eax,0x4
c001a660:	5a                   	pop    edx
c001a661:	5b                   	pop    ebx
c001a662:	5e                   	pop    esi
c001a663:	c3                   	ret    

c001a664 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a664:	53                   	push   ebx
c001a665:	83 ec 08             	sub    esp,0x8
c001a668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a66c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a670:	85 c0                	test   eax,eax
c001a672:	74 2d                	je     c001a6a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a674:	85 db                	test   ebx,ebx
c001a676:	74 29                	je     c001a6a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a678:	52                   	push   edx
c001a679:	b9 02 00 00 00       	mov    ecx,0x2
c001a67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a682:	99                   	cdq    
c001a683:	f7 f9                	idiv   ecx
c001a685:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a689:	83 e8 32             	sub    eax,0x32
c001a68c:	50                   	push   eax
c001a68d:	e8 40 bf fe ff       	call   c00065d2 <iso_read>
c001a692:	83 c4 10             	add    esp,0x10
c001a695:	89 03                	mov    DWORD PTR [ebx],eax
c001a697:	09 d0                	or     eax,edx
c001a699:	0f 94 c0             	sete   al
c001a69c:	0f b6 c0             	movzx  eax,al
c001a69f:	eb 05                	jmp    c001a6a6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a6a1:	b8 04 00 00 00       	mov    eax,0x4
c001a6a6:	83 c4 08             	add    esp,0x8
c001a6a9:	5b                   	pop    ebx
c001a6aa:	c3                   	ret    
c001a6ab:	90                   	nop

c001a6ac <ISO9660::seek(void*, unsigned long long)>:
c001a6ac:	57                   	push   edi
c001a6ad:	b8 04 00 00 00       	mov    eax,0x4
c001a6b2:	56                   	push   esi
c001a6b3:	51                   	push   ecx
c001a6b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6b8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a6bc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a6c0:	85 d2                	test   edx,edx
c001a6c2:	74 26                	je     c001a6ea <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a6c4:	89 d0                	mov    eax,edx
c001a6c6:	b9 02 00 00 00       	mov    ecx,0x2
c001a6cb:	6a 00                	push   0x0
c001a6cd:	99                   	cdq    
c001a6ce:	f7 f9                	idiv   ecx
c001a6d0:	57                   	push   edi
c001a6d1:	56                   	push   esi
c001a6d2:	83 e8 32             	sub    eax,0x32
c001a6d5:	50                   	push   eax
c001a6d6:	e8 0d c0 fe ff       	call   c00066e8 <iso_seek>
c001a6db:	83 c4 10             	add    esp,0x10
c001a6de:	31 f0                	xor    eax,esi
c001a6e0:	31 fa                	xor    edx,edi
c001a6e2:	09 d0                	or     eax,edx
c001a6e4:	0f 95 c0             	setne  al
c001a6e7:	0f b6 c0             	movzx  eax,al
c001a6ea:	5a                   	pop    edx
c001a6eb:	5e                   	pop    esi
c001a6ec:	5f                   	pop    edi
c001a6ed:	c3                   	ret    

c001a6ee <ISO9660::tell(void*, unsigned long long*)>:
c001a6ee:	53                   	push   ebx
c001a6ef:	83 ec 08             	sub    esp,0x8
c001a6f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a6fa:	85 c0                	test   eax,eax
c001a6fc:	74 24                	je     c001a722 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a6fe:	85 db                	test   ebx,ebx
c001a700:	74 20                	je     c001a722 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a702:	b9 02 00 00 00       	mov    ecx,0x2
c001a707:	99                   	cdq    
c001a708:	f7 f9                	idiv   ecx
c001a70a:	83 ec 0c             	sub    esp,0xc
c001a70d:	83 e8 32             	sub    eax,0x32
c001a710:	50                   	push   eax
c001a711:	e8 56 c0 fe ff       	call   c000676c <iso_tell>
c001a716:	83 c4 10             	add    esp,0x10
c001a719:	89 03                	mov    DWORD PTR [ebx],eax
c001a71b:	31 c0                	xor    eax,eax
c001a71d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a720:	eb 05                	jmp    c001a727 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a722:	b8 04 00 00 00       	mov    eax,0x4
c001a727:	83 c4 08             	add    esp,0x8
c001a72a:	5b                   	pop    ebx
c001a72b:	c3                   	ret    

c001a72c <ISO9660::stat(void*, unsigned long long*)>:
c001a72c:	56                   	push   esi
c001a72d:	53                   	push   ebx
c001a72e:	83 ec 10             	sub    esp,0x10
c001a731:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a735:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a739:	68 71 30 02 c0       	push   0xc0023071
c001a73e:	e8 cb 01 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001a743:	83 c4 10             	add    esp,0x10
c001a746:	85 db                	test   ebx,ebx
c001a748:	74 2a                	je     c001a774 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a74a:	85 f6                	test   esi,esi
c001a74c:	74 26                	je     c001a774 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a74e:	89 d8                	mov    eax,ebx
c001a750:	b9 02 00 00 00       	mov    ecx,0x2
c001a755:	99                   	cdq    
c001a756:	83 ec 0c             	sub    esp,0xc
c001a759:	f7 f9                	idiv   ecx
c001a75b:	83 e8 32             	sub    eax,0x32
c001a75e:	50                   	push   eax
c001a75f:	e8 39 c0 fe ff       	call   c000679d <iso_total>
c001a764:	83 c4 10             	add    esp,0x10
c001a767:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a76e:	89 06                	mov    DWORD PTR [esi],eax
c001a770:	31 c0                	xor    eax,eax
c001a772:	eb 05                	jmp    c001a779 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a774:	b8 04 00 00 00       	mov    eax,0x4
c001a779:	5a                   	pop    edx
c001a77a:	5b                   	pop    ebx
c001a77b:	5e                   	pop    esi
c001a77c:	c3                   	ret    
c001a77d:	90                   	nop

c001a77e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a77e:	55                   	push   ebp
c001a77f:	57                   	push   edi
c001a780:	56                   	push   esi
c001a781:	53                   	push   ebx
c001a782:	83 ec 18             	sub    esp,0x18
c001a785:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a789:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a78d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a791:	68 79 30 02 c0       	push   0xc0023079
c001a796:	e8 73 01 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001a79b:	83 c4 10             	add    esp,0x10
c001a79e:	85 ff                	test   edi,edi
c001a7a0:	0f 94 c0             	sete   al
c001a7a3:	85 f6                	test   esi,esi
c001a7a5:	0f 94 c2             	sete   dl
c001a7a8:	09 d0                	or     eax,edx
c001a7aa:	a8 01                	test   al,0x1
c001a7ac:	0f 85 dd 00 00 00    	jne    c001a88f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a7b2:	85 db                	test   ebx,ebx
c001a7b4:	0f 84 d5 00 00 00    	je     c001a88f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a7ba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7bd:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a7c3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a7ca:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7d1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a7d3:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a7d9:	74 1b                	je     c001a7f6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a7db:	85 c0                	test   eax,eax
c001a7dd:	74 10                	je     c001a7ef <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a7df:	83 ec 0c             	sub    esp,0xc
c001a7e2:	68 1d 30 02 c0       	push   0xc002301d
c001a7e7:	e8 1b 6e ff ff       	call   c0011607 <KePanic(char const*)>
c001a7ec:	83 c4 10             	add    esp,0x10
c001a7ef:	8a 03                	mov    al,BYTE PTR [ebx]
c001a7f1:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a7f6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7f9:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a800:	85 c0                	test   eax,eax
c001a802:	74 09                	je     c001a80d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a804:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a80b:	74 51                	je     c001a85e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a80d:	83 ec 0c             	sub    esp,0xc
c001a810:	68 81 30 02 c0       	push   0xc0023081
c001a815:	e8 f4 00 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001a81a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a81d:	83 c4 10             	add    esp,0x10
c001a820:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a828:	74 21                	je     c001a84b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a82a:	83 ec 0c             	sub    esp,0xc
c001a82d:	68 a1 30 02 c0       	push   0xc00230a1
c001a832:	e8 d7 00 ff ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001a837:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a83a:	83 c4 10             	add    esp,0x10
c001a83d:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a844:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a84b:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a852:	83 ec 0c             	sub    esp,0xc
c001a855:	50                   	push   eax
c001a856:	e8 0c c2 fe ff       	call   c0006a67 <init_percd>
c001a85b:	83 c4 10             	add    esp,0x10
c001a85e:	52                   	push   edx
c001a85f:	83 c3 03             	add    ebx,0x3
c001a862:	52                   	push   edx
c001a863:	6a 00                	push   0x0
c001a865:	53                   	push   ebx
c001a866:	e8 bf bc fe ff       	call   c000652a <iso_open>
c001a86b:	83 c4 10             	add    esp,0x10
c001a86e:	83 f8 ff             	cmp    eax,0xffffffff
c001a871:	89 c5                	mov    ebp,eax
c001a873:	75 21                	jne    c001a896 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a875:	50                   	push   eax
c001a876:	50                   	push   eax
c001a877:	6a 01                	push   0x1
c001a879:	53                   	push   ebx
c001a87a:	e8 ab bc fe ff       	call   c000652a <iso_open>
c001a87f:	83 c4 10             	add    esp,0x10
c001a882:	ba 02 00 00 00       	mov    edx,0x2
c001a887:	40                   	inc    eax
c001a888:	74 2b                	je     c001a8b5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a88a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a88d:	eb 24                	jmp    c001a8b3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a88f:	ba 04 00 00 00       	mov    edx,0x4
c001a894:	eb 1f                	jmp    c001a8b5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a896:	83 ec 0c             	sub    esp,0xc
c001a899:	50                   	push   eax
c001a89a:	e8 fe be fe ff       	call   c000679d <iso_total>
c001a89f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a8a6:	89 07                	mov    DWORD PTR [edi],eax
c001a8a8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a8ab:	e8 04 bd fe ff       	call   c00065b4 <iso_close>
c001a8b0:	83 c4 10             	add    esp,0x10
c001a8b3:	31 d2                	xor    edx,edx
c001a8b5:	83 c4 0c             	add    esp,0xc
c001a8b8:	89 d0                	mov    eax,edx
c001a8ba:	5b                   	pop    ebx
c001a8bb:	5e                   	pop    esi
c001a8bc:	5f                   	pop    edi
c001a8bd:	5d                   	pop    ebp
c001a8be:	c3                   	ret    
c001a8bf:	90                   	nop

c001a8c0 <ISO9660::close(void*)>:
c001a8c0:	83 ec 0c             	sub    esp,0xc
c001a8c3:	b8 04 00 00 00       	mov    eax,0x4
c001a8c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8cc:	85 d2                	test   edx,edx
c001a8ce:	74 1b                	je     c001a8eb <ISO9660::close(void*)+0x2b>
c001a8d0:	89 d0                	mov    eax,edx
c001a8d2:	b9 02 00 00 00       	mov    ecx,0x2
c001a8d7:	99                   	cdq    
c001a8d8:	83 ec 0c             	sub    esp,0xc
c001a8db:	f7 f9                	idiv   ecx
c001a8dd:	83 e8 32             	sub    eax,0x32
c001a8e0:	50                   	push   eax
c001a8e1:	e8 ce bc fe ff       	call   c00065b4 <iso_close>
c001a8e6:	83 c4 10             	add    esp,0x10
c001a8e9:	31 c0                	xor    eax,eax
c001a8eb:	83 c4 0c             	add    esp,0xc
c001a8ee:	c3                   	ret    
c001a8ef:	90                   	nop

c001a8f0 <ISO9660::openDir(char const*, void**)>:
c001a8f0:	56                   	push   esi
c001a8f1:	53                   	push   ebx
c001a8f2:	50                   	push   eax
c001a8f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8f7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a8fb:	85 db                	test   ebx,ebx
c001a8fd:	0f 84 bd 00 00 00    	je     c001a9c0 <ISO9660::openDir(char const*, void**)+0xd0>
c001a903:	85 f6                	test   esi,esi
c001a905:	0f 84 b5 00 00 00    	je     c001a9c0 <ISO9660::openDir(char const*, void**)+0xd0>
c001a90b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a90d:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a913:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a91a:	74 1b                	je     c001a937 <ISO9660::openDir(char const*, void**)+0x47>
c001a91c:	85 c0                	test   eax,eax
c001a91e:	74 10                	je     c001a930 <ISO9660::openDir(char const*, void**)+0x40>
c001a920:	83 ec 0c             	sub    esp,0xc
c001a923:	68 1d 30 02 c0       	push   0xc002301d
c001a928:	e8 da 6c ff ff       	call   c0011607 <KePanic(char const*)>
c001a92d:	83 c4 10             	add    esp,0x10
c001a930:	8a 03                	mov    al,BYTE PTR [ebx]
c001a932:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a937:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a93a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a941:	85 c0                	test   eax,eax
c001a943:	74 10                	je     c001a955 <ISO9660::openDir(char const*, void**)+0x65>
c001a945:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a94c:	74 1a                	je     c001a968 <ISO9660::openDir(char const*, void**)+0x78>
c001a94e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a955:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a95c:	83 ec 0c             	sub    esp,0xc
c001a95f:	50                   	push   eax
c001a960:	e8 02 c1 fe ff       	call   c0006a67 <init_percd>
c001a965:	83 c4 10             	add    esp,0x10
c001a968:	50                   	push   eax
c001a969:	83 c3 03             	add    ebx,0x3
c001a96c:	50                   	push   eax
c001a96d:	6a 01                	push   0x1
c001a96f:	53                   	push   ebx
c001a970:	e8 b5 bb fe ff       	call   c000652a <iso_open>
c001a975:	83 c4 10             	add    esp,0x10
c001a978:	83 f8 ff             	cmp    eax,0xffffffff
c001a97b:	89 c3                	mov    ebx,eax
c001a97d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a982:	75 1c                	jne    c001a9a0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a984:	53                   	push   ebx
c001a985:	53                   	push   ebx
c001a986:	68 c5 30 02 c0       	push   0xc00230c5
c001a98b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a991:	e8 1a e1 fe ff       	call   c0008ab0 <VgaText::puts(char const*)>
c001a996:	83 c4 10             	add    esp,0x10
c001a999:	b8 01 00 00 00       	mov    eax,0x1
c001a99e:	eb 25                	jmp    c001a9c5 <ISO9660::openDir(char const*, void**)+0xd5>
c001a9a0:	51                   	push   ecx
c001a9a1:	01 db                	add    ebx,ebx
c001a9a3:	51                   	push   ecx
c001a9a4:	83 c3 65             	add    ebx,0x65
c001a9a7:	68 d8 30 02 c0       	push   0xc00230d8
c001a9ac:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9b2:	e8 f9 e0 fe ff       	call   c0008ab0 <VgaText::puts(char const*)>
c001a9b7:	83 c4 10             	add    esp,0x10
c001a9ba:	31 c0                	xor    eax,eax
c001a9bc:	89 1e                	mov    DWORD PTR [esi],ebx
c001a9be:	eb 05                	jmp    c001a9c5 <ISO9660::openDir(char const*, void**)+0xd5>
c001a9c0:	b8 04 00 00 00       	mov    eax,0x4
c001a9c5:	5a                   	pop    edx
c001a9c6:	5b                   	pop    ebx
c001a9c7:	5e                   	pop    esi
c001a9c8:	c3                   	ret    
c001a9c9:	90                   	nop

c001a9ca <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a9ca:	55                   	push   ebp
c001a9cb:	57                   	push   edi
c001a9cc:	56                   	push   esi
c001a9cd:	53                   	push   ebx
c001a9ce:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9d4:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a9db:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a9e2:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a9e9:	85 db                	test   ebx,ebx
c001a9eb:	0f 84 e4 00 00 00    	je     c001aad5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a9f1:	85 ed                	test   ebp,ebp
c001a9f3:	0f 84 dc 00 00 00    	je     c001aad5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a9f9:	83 ec 0c             	sub    esp,0xc
c001a9fc:	68 eb 30 02 c0       	push   0xc00230eb
c001aa01:	e8 08 ff fe ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001aa06:	89 d8                	mov    eax,ebx
c001aa08:	b9 02 00 00 00       	mov    ecx,0x2
c001aa0d:	99                   	cdq    
c001aa0e:	f7 f9                	idiv   ecx
c001aa10:	83 e8 32             	sub    eax,0x32
c001aa13:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa16:	e8 d4 bd fe ff       	call   c00067ef <iso_readdir>
c001aa1b:	83 c4 10             	add    esp,0x10
c001aa1e:	85 c0                	test   eax,eax
c001aa20:	89 c3                	mov    ebx,eax
c001aa22:	75 38                	jne    c001aa5c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001aa24:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa29:	53                   	push   ebx
c001aa2a:	53                   	push   ebx
c001aa2b:	68 f6 30 02 c0       	push   0xc00230f6
c001aa30:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa36:	e8 75 e0 fe ff       	call   c0008ab0 <VgaText::puts(char const*)>
c001aa3b:	83 c4 0c             	add    esp,0xc
c001aa3e:	68 10 01 00 00       	push   0x110
c001aa43:	6a 00                	push   0x0
c001aa45:	57                   	push   edi
c001aa46:	e8 a5 5a fe ff       	call   c00004f0 <memset>
c001aa4b:	83 c4 10             	add    esp,0x10
c001aa4e:	b8 01 00 00 00       	mov    eax,0x1
c001aa53:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001aa5a:	eb 7e                	jmp    c001aada <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aa5c:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aa62:	8d 70 08             	lea    esi,[eax+0x8]
c001aa65:	83 ec 0c             	sub    esp,0xc
c001aa68:	56                   	push   esi
c001aa69:	e8 12 5b fe ff       	call   c0000580 <strlen>
c001aa6e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aa76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa7a:	83 c4 10             	add    esp,0x10
c001aa7d:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001aa81:	75 0a                	jne    c001aa8d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001aa83:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001aa86:	b8 02 00 00 00       	mov    eax,0x2
c001aa8b:	74 05                	je     c001aa92 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001aa8d:	b8 01 00 00 00       	mov    eax,0x1
c001aa92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa96:	50                   	push   eax
c001aa97:	50                   	push   eax
c001aa98:	56                   	push   esi
c001aa99:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa9d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aaa1:	50                   	push   eax
c001aaa2:	e8 a9 5b fe ff       	call   c0000650 <strcpy>
c001aaa7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aaae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aab0:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001aab7:	5a                   	pop    edx
c001aab8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aabd:	59                   	pop    ecx
c001aabe:	68 09 31 02 c0       	push   0xc0023109
c001aac3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aac9:	e8 e2 df fe ff       	call   c0008ab0 <VgaText::puts(char const*)>
c001aace:	83 c4 10             	add    esp,0x10
c001aad1:	31 c0                	xor    eax,eax
c001aad3:	eb 05                	jmp    c001aada <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aad5:	b8 04 00 00 00       	mov    eax,0x4
c001aada:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aae0:	5b                   	pop    ebx
c001aae1:	5e                   	pop    esi
c001aae2:	5f                   	pop    edi
c001aae3:	5d                   	pop    ebp
c001aae4:	c3                   	ret    

c001aae5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aae5:	57                   	push   edi
c001aae6:	56                   	push   esi
c001aae7:	53                   	push   ebx
c001aae8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aaec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aaf0:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aaf6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aafa:	0f be cb             	movsx  ecx,bl
c001aafd:	75 0b                	jne    c001ab0a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aaff:	0f be 05 40 43 02 c0 	movsx  eax,BYTE PTR ds:0xc0024340
c001ab06:	39 c8                	cmp    eax,ecx
c001ab08:	74 47                	je     c001ab51 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab0a:	83 ec 0c             	sub    esp,0xc
c001ab0d:	31 d2                	xor    edx,edx
c001ab0f:	68 a0 c8 02 c0       	push   0xc002c8a0
c001ab14:	6a 01                	push   0x1
c001ab16:	52                   	push   edx
c001ab17:	56                   	push   esi
c001ab18:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001ab1f:	e8 7e 32 ff ff       	call   c000dda2 <LogicalDisk::read(unsigned long long, int, void*)>
c001ab24:	83 c4 20             	add    esp,0x20
c001ab27:	85 c0                	test   eax,eax
c001ab29:	75 0e                	jne    c001ab39 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001ab2b:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001ab31:	88 1d 40 43 02 c0    	mov    BYTE PTR ds:0xc0024340,bl
c001ab37:	eb 18                	jmp    c001ab51 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab39:	50                   	push   eax
c001ab3a:	68 00 08 00 00       	push   0x800
c001ab3f:	6a 00                	push   0x0
c001ab41:	57                   	push   edi
c001ab42:	e8 a9 59 fe ff       	call   c00004f0 <memset>
c001ab47:	83 c4 10             	add    esp,0x10
c001ab4a:	b8 01 00 00 00       	mov    eax,0x1
c001ab4f:	eb 0e                	jmp    c001ab5f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001ab51:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001ab56:	b9 00 08 00 00       	mov    ecx,0x800
c001ab5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab5d:	31 c0                	xor    eax,eax
c001ab5f:	5b                   	pop    ebx
c001ab60:	5e                   	pop    esi
c001ab61:	5f                   	pop    edi
c001ab62:	c3                   	ret    
c001ab63:	90                   	nop

c001ab64 <ISO9660::tryMount(LogicalDisk*, int)>:
c001ab64:	53                   	push   ebx
c001ab65:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ab6b:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001ab75:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ab7c:	8d 58 41             	lea    ebx,[eax+0x41]
c001ab7f:	0f be db             	movsx  ebx,bl
c001ab82:	53                   	push   ebx
c001ab83:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab87:	50                   	push   eax
c001ab88:	6a 10                	push   0x10
c001ab8a:	e8 56 ff ff ff       	call   c001aae5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab8f:	83 c4 10             	add    esp,0x10
c001ab92:	31 d2                	xor    edx,edx
c001ab94:	85 c0                	test   eax,eax
c001ab96:	75 33                	jne    c001abcb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab98:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ab9d:	75 2c                	jne    c001abcb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab9f:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001aba4:	75 25                	jne    c001abcb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aba6:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001abab:	75 1e                	jne    c001abcb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abad:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001abb2:	75 17                	jne    c001abcb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abb4:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001abb9:	75 10                	jne    c001abcb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abbb:	83 ec 0c             	sub    esp,0xc
c001abbe:	53                   	push   ebx
c001abbf:	e8 a3 be fe ff       	call   c0006a67 <init_percd>
c001abc4:	83 c4 10             	add    esp,0x10
c001abc7:	40                   	inc    eax
c001abc8:	0f 95 c2             	setne  dl
c001abcb:	81 c4 08 08 00 00    	add    esp,0x808
c001abd1:	88 d0                	mov    al,dl
c001abd3:	5b                   	pop    ebx
c001abd4:	c3                   	ret    
c001abd5:	90                   	nop

c001abd6 <ISO9660::ISO9660()>:
c001abd6:	83 ec 0c             	sub    esp,0xc
c001abd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abdd:	83 ec 0c             	sub    esp,0xc
c001abe0:	50                   	push   eax
c001abe1:	e8 8a 0b ff ff       	call   c000b770 <Filesystem::Filesystem()>
c001abe6:	83 c4 10             	add    esp,0x10
c001abe9:	ba 24 31 02 c0       	mov    edx,0xc0023124
c001abee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abf2:	89 10                	mov    DWORD PTR [eax],edx
c001abf4:	e8 80 bf fe ff       	call   c0006b79 <fs_iso9660_init>
c001abf9:	90                   	nop
c001abfa:	83 c4 0c             	add    esp,0xc
c001abfd:	c3                   	ret    

c001abfe <SoundCard::beginPlayback()>:
c001abfe:	c7 44 24 04 88 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023188
c001ac06:	e9 fc 69 ff ff       	jmp    c0011607 <KePanic(char const*)>
c001ac0b:	90                   	nop

c001ac0c <SoundCard::stopPlayback()>:
c001ac0c:	c7 44 24 04 88 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023188
c001ac14:	e9 ee 69 ff ff       	jmp    c0011607 <KePanic(char const*)>
c001ac19:	90                   	nop

c001ac1a <SoundCard::SoundCard(char const*)>:
c001ac1a:	83 ec 1c             	sub    esp,0x1c
c001ac1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac21:	83 ec 08             	sub    esp,0x8
c001ac24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac28:	50                   	push   eax
c001ac29:	e8 d8 1e ff ff       	call   c000cb06 <Device::Device(char const*)>
c001ac2e:	83 c4 10             	add    esp,0x10
c001ac31:	ba d4 31 02 c0       	mov    edx,0xc00231d4
c001ac36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac3a:	89 10                	mov    DWORD PTR [eax],edx
c001ac3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac40:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac4b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ac55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac59:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ac63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac67:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ac71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac75:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ac7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac87:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac8c:	7f 1a                	jg     c001aca8 <SoundCard::SoundCard(char const*)+0x8e>
c001ac8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac96:	83 c2 54             	add    edx,0x54
c001ac99:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001aca1:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001aca6:	eb df                	jmp    c001ac87 <SoundCard::SoundCard(char const*)+0x6d>
c001aca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acac:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001acb3:	90                   	nop
c001acb4:	83 c4 1c             	add    esp,0x1c
c001acb7:	c3                   	ret    

c001acb8 <SoundCard::~SoundCard()>:
c001acb8:	83 ec 0c             	sub    esp,0xc
c001acbb:	ba d4 31 02 c0       	mov    edx,0xc00231d4
c001acc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acc4:	89 10                	mov    DWORD PTR [eax],edx
c001acc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acca:	83 ec 0c             	sub    esp,0xc
c001accd:	50                   	push   eax
c001acce:	e8 d3 1b ff ff       	call   c000c8a6 <Device::~Device()>
c001acd3:	83 c4 10             	add    esp,0x10
c001acd6:	90                   	nop
c001acd7:	83 c4 0c             	add    esp,0xc
c001acda:	c3                   	ret    
c001acdb:	90                   	nop

c001acdc <SoundCard::~SoundCard()>:
c001acdc:	83 ec 0c             	sub    esp,0xc
c001acdf:	83 ec 0c             	sub    esp,0xc
c001ace2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ace6:	e8 cd ff ff ff       	call   c001acb8 <SoundCard::~SoundCard()>
c001aceb:	83 c4 10             	add    esp,0x10
c001acee:	83 ec 08             	sub    esp,0x8
c001acf1:	68 e8 01 00 00       	push   0x1e8
c001acf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acfa:	e8 11 fb fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c001acff:	83 c4 10             	add    esp,0x10
c001ad02:	83 c4 0c             	add    esp,0xc
c001ad05:	c3                   	ret    

c001ad06 <SoundCard::configureRates(int, int, int)>:
c001ad06:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad0a:	31 c0                	xor    eax,eax
c001ad0c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ad13:	75 20                	jne    c001ad35 <SoundCard::configureRates(int, int, int)+0x2f>
c001ad15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad19:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ad1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad23:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ad29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad2d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ad33:	b0 01                	mov    al,0x1
c001ad35:	c3                   	ret    

c001ad36 <SoundCard::getSamples16(int, short*)>:
c001ad36:	55                   	push   ebp
c001ad37:	57                   	push   edi
c001ad38:	31 ff                	xor    edi,edi
c001ad3a:	56                   	push   esi
c001ad3b:	53                   	push   ebx
c001ad3c:	31 db                	xor    ebx,ebx
c001ad3e:	83 ec 10             	sub    esp,0x10
c001ad41:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ad45:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad49:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad4c:	50                   	push   eax
c001ad4d:	6a 00                	push   0x0
c001ad4f:	55                   	push   ebp
c001ad50:	e8 9b 57 fe ff       	call   c00004f0 <memset>
c001ad55:	83 c4 10             	add    esp,0x10
c001ad58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad5c:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001ad63:	85 c0                	test   eax,eax
c001ad65:	74 1a                	je     c001ad81 <SoundCard::getSamples16(int, short*)+0x4b>
c001ad67:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad6b:	75 14                	jne    c001ad81 <SoundCard::getSamples16(int, short*)+0x4b>
c001ad6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad71:	55                   	push   ebp
c001ad72:	56                   	push   esi
c001ad73:	50                   	push   eax
c001ad74:	e8 f3 02 00 00       	call   c001b06c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ad79:	83 c4 10             	add    esp,0x10
c001ad7c:	39 c3                	cmp    ebx,eax
c001ad7e:	0f 4c d8             	cmovl  ebx,eax
c001ad81:	47                   	inc    edi
c001ad82:	83 ff 20             	cmp    edi,0x20
c001ad85:	75 d1                	jne    c001ad58 <SoundCard::getSamples16(int, short*)+0x22>
c001ad87:	83 c4 0c             	add    esp,0xc
c001ad8a:	89 d8                	mov    eax,ebx
c001ad8c:	5b                   	pop    ebx
c001ad8d:	5e                   	pop    esi
c001ad8e:	5f                   	pop    edi
c001ad8f:	5d                   	pop    ebp
c001ad90:	c3                   	ret    
c001ad91:	90                   	nop

c001ad92 <SoundCard::getSamples32(int, int*)>:
c001ad92:	55                   	push   ebp
c001ad93:	57                   	push   edi
c001ad94:	31 ff                	xor    edi,edi
c001ad96:	56                   	push   esi
c001ad97:	31 f6                	xor    esi,esi
c001ad99:	53                   	push   ebx
c001ad9a:	83 ec 10             	sub    esp,0x10
c001ad9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ada1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ada5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ada9:	c1 e0 02             	shl    eax,0x2
c001adac:	50                   	push   eax
c001adad:	6a 00                	push   0x0
c001adaf:	55                   	push   ebp
c001adb0:	e8 3b 57 fe ff       	call   c00004f0 <memset>
c001adb5:	83 c4 10             	add    esp,0x10
c001adb8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001adbf:	85 c0                	test   eax,eax
c001adc1:	74 1a                	je     c001addd <SoundCard::getSamples32(int, int*)+0x4b>
c001adc3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001adc7:	75 14                	jne    c001addd <SoundCard::getSamples32(int, int*)+0x4b>
c001adc9:	53                   	push   ebx
c001adca:	55                   	push   ebp
c001adcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adcf:	50                   	push   eax
c001add0:	e8 67 03 00 00       	call   c001b13c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001add5:	83 c4 10             	add    esp,0x10
c001add8:	39 c6                	cmp    esi,eax
c001adda:	0f 4c f0             	cmovl  esi,eax
c001addd:	47                   	inc    edi
c001adde:	83 ff 20             	cmp    edi,0x20
c001ade1:	75 d5                	jne    c001adb8 <SoundCard::getSamples32(int, int*)+0x26>
c001ade3:	85 f6                	test   esi,esi
c001ade5:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001adec:	75 0f                	jne    c001adfd <SoundCard::getSamples32(int, int*)+0x6b>
c001adee:	85 c0                	test   eax,eax
c001adf0:	74 1b                	je     c001ae0d <SoundCard::getSamples32(int, int*)+0x7b>
c001adf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adf4:	83 ec 0c             	sub    esp,0xc
c001adf7:	53                   	push   ebx
c001adf8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001adfb:	eb 0d                	jmp    c001ae0a <SoundCard::getSamples32(int, int*)+0x78>
c001adfd:	85 c0                	test   eax,eax
c001adff:	75 0c                	jne    c001ae0d <SoundCard::getSamples32(int, int*)+0x7b>
c001ae01:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae03:	83 ec 0c             	sub    esp,0xc
c001ae06:	53                   	push   ebx
c001ae07:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ae0a:	83 c4 10             	add    esp,0x10
c001ae0d:	83 c4 0c             	add    esp,0xc
c001ae10:	89 f0                	mov    eax,esi
c001ae12:	5b                   	pop    ebx
c001ae13:	5e                   	pop    esi
c001ae14:	5f                   	pop    edi
c001ae15:	5d                   	pop    ebp
c001ae16:	c3                   	ret    
c001ae17:	90                   	nop

c001ae18 <SoundCard::addChannel(SoundPort*)>:
c001ae18:	83 ec 0c             	sub    esp,0xc
c001ae1b:	31 c0                	xor    eax,eax
c001ae1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae21:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ae29:	74 1b                	je     c001ae46 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ae2b:	40                   	inc    eax
c001ae2c:	83 f8 20             	cmp    eax,0x20
c001ae2f:	75 f0                	jne    c001ae21 <SoundCard::addChannel(SoundPort*)+0x9>
c001ae31:	83 ec 0c             	sub    esp,0xc
c001ae34:	68 ad 31 02 c0       	push   0xc00231ad
c001ae39:	e8 c9 67 ff ff       	call   c0011607 <KePanic(char const*)>
c001ae3e:	83 c4 10             	add    esp,0x10
c001ae41:	83 c8 ff             	or     eax,0xffffffff
c001ae44:	eb 0b                	jmp    c001ae51 <SoundCard::addChannel(SoundPort*)+0x39>
c001ae46:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae4a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ae51:	83 c4 0c             	add    esp,0xc
c001ae54:	c3                   	ret    
c001ae55:	90                   	nop

c001ae56 <SoundCard::removeChannel(int)>:
c001ae56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae5e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ae69:	c3                   	ret    
c001ae6a:	66 90                	xchg   ax,ax

c001ae6c <SoundPort::SoundPort(int, int, int, int)>:
c001ae6c:	83 ec 0c             	sub    esp,0xc
c001ae6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae73:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae7e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae8a:	89 10                	mov    DWORD PTR [eax],edx
c001ae8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ae97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae9f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aea2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001aea7:	75 13                	jne    c001aebc <SoundPort::SoundPort(int, int, int, int)+0x50>
c001aea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aead:	8b 00                	mov    eax,DWORD PTR [eax]
c001aeaf:	05 a0 0f 00 00       	add    eax,0xfa0
c001aeb4:	d1 e0                	shl    eax,1
c001aeb6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aeba:	66 90                	xchg   ax,ax
c001aebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aec4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aecb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001aed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aed9:	c1 e0 02             	shl    eax,0x2
c001aedc:	83 ec 0c             	sub    esp,0xc
c001aedf:	50                   	push   eax
c001aee0:	e8 f2 cb fe ff       	call   c0007ad7 <malloc>
c001aee5:	83 c4 10             	add    esp,0x10
c001aee8:	89 c2                	mov    edx,eax
c001aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeee:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aef1:	90                   	nop
c001aef2:	83 c4 0c             	add    esp,0xc
c001aef5:	c3                   	ret    
c001aef6:	66 90                	xchg   ax,ax

c001aef8 <SoundPort::~SoundPort()>:
c001aef8:	83 ec 0c             	sub    esp,0xc
c001aefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af02:	85 c0                	test   eax,eax
c001af04:	74 1e                	je     c001af24 <SoundPort::~SoundPort()+0x2c>
c001af06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af0a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af0d:	83 ec 0c             	sub    esp,0xc
c001af10:	50                   	push   eax
c001af11:	e8 d1 cb fe ff       	call   c0007ae7 <free>
c001af16:	83 c4 10             	add    esp,0x10
c001af19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af1d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001af24:	90                   	nop
c001af25:	83 c4 0c             	add    esp,0xc
c001af28:	c3                   	ret    
c001af29:	90                   	nop
c001af2a:	66 90                	xchg   ax,ax

c001af2c <SoundPort::unpause()>:
c001af2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af30:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001af34:	c3                   	ret    
c001af35:	90                   	nop
c001af36:	66 90                	xchg   ax,ax

c001af38 <SoundPort::pause()>:
c001af38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af3c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001af40:	c3                   	ret    
c001af41:	90                   	nop
c001af42:	66 90                	xchg   ax,ax

c001af44 <SoundPort::getBufferUsed()>:
c001af44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af48:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af4b:	c3                   	ret    

c001af4c <SoundPort::getBufferSize()>:
c001af4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af53:	c3                   	ret    

c001af54 <SoundPort::buffer16(short*, int)>:
c001af54:	55                   	push   ebp
c001af55:	57                   	push   edi
c001af56:	56                   	push   esi
c001af57:	53                   	push   ebx
c001af58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af5c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001af60:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001af63:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001af66:	74 68                	je     c001afd0 <SoundPort::buffer16(short*, int)+0x7c>
c001af68:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af6c:	85 c9                	test   ecx,ecx
c001af6e:	7e 60                	jle    c001afd0 <SoundPort::buffer16(short*, int)+0x7c>
c001af70:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001af74:	8d 70 01             	lea    esi,[eax+0x1]
c001af77:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af7a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af7d:	c1 e1 0f             	shl    ecx,0xf
c001af80:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001af83:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af86:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af89:	74 4d                	je     c001afd8 <SoundPort::buffer16(short*, int)+0x84>
c001af8b:	31 f6                	xor    esi,esi
c001af8d:	eb 21                	jmp    c001afb0 <SoundPort::buffer16(short*, int)+0x5c>
c001af8f:	90                   	nop
c001af90:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001af95:	8d 79 01             	lea    edi,[ecx+0x1]
c001af98:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001af9b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001af9e:	c1 e3 0f             	shl    ebx,0xf
c001afa1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001afa4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afa7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afaa:	74 1c                	je     c001afc8 <SoundPort::buffer16(short*, int)+0x74>
c001afac:	89 c6                	mov    esi,eax
c001afae:	66 90                	xchg   ax,ax
c001afb0:	8d 46 01             	lea    eax,[esi+0x1]
c001afb3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001afb7:	75 d7                	jne    c001af90 <SoundPort::buffer16(short*, int)+0x3c>
c001afb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afbd:	8d 76 00             	lea    esi,[esi+0x0]
c001afc0:	5b                   	pop    ebx
c001afc1:	5e                   	pop    esi
c001afc2:	5f                   	pop    edi
c001afc3:	5d                   	pop    ebp
c001afc4:	c3                   	ret    
c001afc5:	8d 76 00             	lea    esi,[esi+0x0]
c001afc8:	5b                   	pop    ebx
c001afc9:	8d 46 02             	lea    eax,[esi+0x2]
c001afcc:	5e                   	pop    esi
c001afcd:	5f                   	pop    edi
c001afce:	5d                   	pop    ebp
c001afcf:	c3                   	ret    
c001afd0:	5b                   	pop    ebx
c001afd1:	31 c0                	xor    eax,eax
c001afd3:	5e                   	pop    esi
c001afd4:	5f                   	pop    edi
c001afd5:	5d                   	pop    ebp
c001afd6:	c3                   	ret    
c001afd7:	90                   	nop
c001afd8:	b8 01 00 00 00       	mov    eax,0x1
c001afdd:	eb e1                	jmp    c001afc0 <SoundPort::buffer16(short*, int)+0x6c>
c001afdf:	90                   	nop

c001afe0 <SoundPort::buffer32(int*, int)>:
c001afe0:	55                   	push   ebp
c001afe1:	57                   	push   edi
c001afe2:	56                   	push   esi
c001afe3:	53                   	push   ebx
c001afe4:	83 ec 04             	sub    esp,0x4
c001afe7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001afeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afef:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aff3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aff6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aff9:	89 04 24             	mov    DWORD PTR [esp],eax
c001affc:	74 5a                	je     c001b058 <SoundPort::buffer32(int*, int)+0x78>
c001affe:	85 c0                	test   eax,eax
c001b000:	7e 56                	jle    c001b058 <SoundPort::buffer32(int*, int)+0x78>
c001b002:	8d 71 01             	lea    esi,[ecx+0x1]
c001b005:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b008:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b00b:	8b 37                	mov    esi,DWORD PTR [edi]
c001b00d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b010:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b013:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b016:	74 4c                	je     c001b064 <SoundPort::buffer32(int*, int)+0x84>
c001b018:	31 f6                	xor    esi,esi
c001b01a:	eb 1c                	jmp    c001b038 <SoundPort::buffer32(int*, int)+0x58>
c001b01c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b01f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b022:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b025:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b028:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b02c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b02f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b032:	74 18                	je     c001b04c <SoundPort::buffer32(int*, int)+0x6c>
c001b034:	89 de                	mov    esi,ebx
c001b036:	66 90                	xchg   ax,ax
c001b038:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b03b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b03e:	75 dc                	jne    c001b01c <SoundPort::buffer32(int*, int)+0x3c>
c001b040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b043:	90                   	nop
c001b044:	83 c4 04             	add    esp,0x4
c001b047:	5b                   	pop    ebx
c001b048:	5e                   	pop    esi
c001b049:	5f                   	pop    edi
c001b04a:	5d                   	pop    ebp
c001b04b:	c3                   	ret    
c001b04c:	8d 46 02             	lea    eax,[esi+0x2]
c001b04f:	83 c4 04             	add    esp,0x4
c001b052:	5b                   	pop    ebx
c001b053:	5e                   	pop    esi
c001b054:	5f                   	pop    edi
c001b055:	5d                   	pop    ebp
c001b056:	c3                   	ret    
c001b057:	90                   	nop
c001b058:	83 c4 04             	add    esp,0x4
c001b05b:	31 c0                	xor    eax,eax
c001b05d:	5b                   	pop    ebx
c001b05e:	5e                   	pop    esi
c001b05f:	5f                   	pop    edi
c001b060:	5d                   	pop    ebp
c001b061:	c3                   	ret    
c001b062:	66 90                	xchg   ax,ax
c001b064:	b8 01 00 00 00       	mov    eax,0x1
c001b069:	eb d9                	jmp    c001b044 <SoundPort::buffer32(int*, int)+0x64>
c001b06b:	90                   	nop

c001b06c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b06c:	55                   	push   ebp
c001b06d:	57                   	push   edi
c001b06e:	56                   	push   esi
c001b06f:	53                   	push   ebx
c001b070:	83 ec 0c             	sub    esp,0xc
c001b073:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b077:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b07b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b07f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b083:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b089:	39 03                	cmp    DWORD PTR [ebx],eax
c001b08b:	74 13                	je     c001b0a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001b08d:	83 ec 0c             	sub    esp,0xc
c001b090:	68 00 32 02 c0       	push   0xc0023200
c001b095:	e8 6d 65 ff ff       	call   c0011607 <KePanic(char const*)>
c001b09a:	83 c4 10             	add    esp,0x10
c001b09d:	8d 76 00             	lea    esi,[esi+0x0]
c001b0a0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b0a6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b0a9:	74 11                	je     c001b0bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001b0ab:	83 ec 0c             	sub    esp,0xc
c001b0ae:	68 3f 32 02 c0       	push   0xc002323f
c001b0b3:	e8 4f 65 ff ff       	call   c0011607 <KePanic(char const*)>
c001b0b8:	83 c4 10             	add    esp,0x10
c001b0bb:	90                   	nop
c001b0bc:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b0c2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b0c5:	74 11                	je     c001b0d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b0c7:	83 ec 0c             	sub    esp,0xc
c001b0ca:	68 3f 32 02 c0       	push   0xc002323f
c001b0cf:	e8 33 65 ff ff       	call   c0011607 <KePanic(char const*)>
c001b0d4:	83 c4 10             	add    esp,0x10
c001b0d7:	90                   	nop
c001b0d8:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b0db:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b0df:	85 f6                	test   esi,esi
c001b0e1:	7e 2d                	jle    c001b110 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b0e3:	31 c0                	xor    eax,eax
c001b0e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b0e8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0eb:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b0ee:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b0f4:	85 c9                	test   ecx,ecx
c001b0f6:	0f 49 d1             	cmovns edx,ecx
c001b0f9:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b0fd:	c1 fa 0f             	sar    edx,0xf
c001b100:	01 d1                	add    ecx,edx
c001b102:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b106:	83 c0 01             	add    eax,0x1
c001b109:	39 f0                	cmp    eax,esi
c001b10b:	75 db                	jne    c001b0e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b10d:	8d 76 00             	lea    esi,[esi+0x0]
c001b110:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b113:	83 ec 04             	sub    esp,0x4
c001b116:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b119:	29 f0                	sub    eax,esi
c001b11b:	c1 e0 02             	shl    eax,0x2
c001b11e:	50                   	push   eax
c001b11f:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b122:	50                   	push   eax
c001b123:	52                   	push   edx
c001b124:	e8 a7 52 fe ff       	call   c00003d0 <memmove>
c001b129:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b12c:	29 f0                	sub    eax,esi
c001b12e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b131:	83 c4 1c             	add    esp,0x1c
c001b134:	89 f0                	mov    eax,esi
c001b136:	5b                   	pop    ebx
c001b137:	5e                   	pop    esi
c001b138:	5f                   	pop    edi
c001b139:	5d                   	pop    ebp
c001b13a:	c3                   	ret    
c001b13b:	90                   	nop

c001b13c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b13c:	55                   	push   ebp
c001b13d:	57                   	push   edi
c001b13e:	56                   	push   esi
c001b13f:	53                   	push   ebx
c001b140:	83 ec 0c             	sub    esp,0xc
c001b143:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b147:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b14b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b14f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b153:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b159:	39 03                	cmp    DWORD PTR [ebx],eax
c001b15b:	74 13                	je     c001b170 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b15d:	83 ec 0c             	sub    esp,0xc
c001b160:	68 20 32 02 c0       	push   0xc0023220
c001b165:	e8 9d 64 ff ff       	call   c0011607 <KePanic(char const*)>
c001b16a:	83 c4 10             	add    esp,0x10
c001b16d:	8d 76 00             	lea    esi,[esi+0x0]
c001b170:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b176:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b179:	74 11                	je     c001b18c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b17b:	83 ec 0c             	sub    esp,0xc
c001b17e:	68 5b 32 02 c0       	push   0xc002325b
c001b183:	e8 7f 64 ff ff       	call   c0011607 <KePanic(char const*)>
c001b188:	83 c4 10             	add    esp,0x10
c001b18b:	90                   	nop
c001b18c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b192:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b195:	74 11                	je     c001b1a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b197:	83 ec 0c             	sub    esp,0xc
c001b19a:	68 5b 32 02 c0       	push   0xc002325b
c001b19f:	e8 63 64 ff ff       	call   c0011607 <KePanic(char const*)>
c001b1a4:	83 c4 10             	add    esp,0x10
c001b1a7:	90                   	nop
c001b1a8:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b1ab:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b1af:	85 ff                	test   edi,edi
c001b1b1:	7e 21                	jle    c001b1d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b1b3:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b1ba:	31 c0                	xor    eax,eax
c001b1bc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b1bf:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b1c2:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b1c5:	01 d5                	add    ebp,edx
c001b1c7:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b1ca:	83 c0 04             	add    eax,0x4
c001b1cd:	39 c1                	cmp    ecx,eax
c001b1cf:	75 eb                	jne    c001b1bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b1d4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b1d7:	83 ec 04             	sub    esp,0x4
c001b1da:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b1dd:	29 f8                	sub    eax,edi
c001b1df:	c1 e0 02             	shl    eax,0x2
c001b1e2:	50                   	push   eax
c001b1e3:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b1e6:	50                   	push   eax
c001b1e7:	52                   	push   edx
c001b1e8:	e8 e3 51 fe ff       	call   c00003d0 <memmove>
c001b1ed:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b1f0:	29 f8                	sub    eax,edi
c001b1f2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b1f5:	83 c4 1c             	add    esp,0x1c
c001b1f8:	89 f8                	mov    eax,edi
c001b1fa:	5b                   	pop    ebx
c001b1fb:	5e                   	pop    esi
c001b1fc:	5f                   	pop    edi
c001b1fd:	5d                   	pop    ebp
c001b1fe:	c3                   	ret    
c001b1ff:	90                   	nop

c001b200 <PCI::open(int, int, void*)>:
c001b200:	83 ec 18             	sub    esp,0x18
c001b203:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b207:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b20b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b211:	8b 10                	mov    edx,DWORD PTR [eax]
c001b213:	50                   	push   eax
c001b214:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b217:	31 c0                	xor    eax,eax
c001b219:	83 c4 1c             	add    esp,0x1c
c001b21c:	c3                   	ret    
c001b21d:	90                   	nop

c001b21e <PCI::close(int, int, void*)>:
c001b21e:	31 c0                	xor    eax,eax
c001b220:	c3                   	ret    
c001b221:	90                   	nop

c001b222 <PCI::PCI()>:
c001b222:	83 ec 0c             	sub    esp,0xc
c001b225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b229:	83 ec 08             	sub    esp,0x8
c001b22c:	68 77 32 02 c0       	push   0xc0023277
c001b231:	50                   	push   eax
c001b232:	e8 c9 10 ff ff       	call   c000c300 <Bus::Bus(char const*)>
c001b237:	83 c4 10             	add    esp,0x10
c001b23a:	ba 20 33 02 c0       	mov    edx,0xc0023320
c001b23f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b243:	89 10                	mov    DWORD PTR [eax],edx
c001b245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b249:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b257:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b260:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b266:	0f b6 d0             	movzx  edx,al
c001b269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b26d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b278:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b27e:	0f b6 d0             	movzx  edx,al
c001b281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b285:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b28e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b294:	8d 50 01             	lea    edx,[eax+0x1]
c001b297:	88 d1                	mov    cl,dl
c001b299:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b29d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b2a3:	0f b6 d0             	movzx  edx,al
c001b2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2aa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b2ae:	83 c9 c0             	or     ecx,0xffffffc0
c001b2b1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b2b5:	90                   	nop
c001b2b6:	83 c4 0c             	add    esp,0xc
c001b2b9:	c3                   	ret    

c001b2ba <PCI::readBAR8(unsigned int, int)>:
c001b2ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2c2:	f6 c2 01             	test   dl,0x1
c001b2c5:	74 07                	je     c001b2ce <PCI::readBAR8(unsigned int, int)+0x14>
c001b2c7:	83 e2 fc             	and    edx,0xfffffffc
c001b2ca:	01 c2                	add    edx,eax
c001b2cc:	ec                   	in     al,dx
c001b2cd:	c3                   	ret    
c001b2ce:	83 e2 f0             	and    edx,0xfffffff0
c001b2d1:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b2d4:	c3                   	ret    
c001b2d5:	90                   	nop

c001b2d6 <PCI::readBAR16(unsigned int, int)>:
c001b2d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2de:	f6 c2 01             	test   dl,0x1
c001b2e1:	74 08                	je     c001b2eb <PCI::readBAR16(unsigned int, int)+0x15>
c001b2e3:	83 e2 fc             	and    edx,0xfffffffc
c001b2e6:	01 c2                	add    edx,eax
c001b2e8:	66 ed                	in     ax,dx
c001b2ea:	c3                   	ret    
c001b2eb:	83 e2 f0             	and    edx,0xfffffff0
c001b2ee:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b2f2:	c3                   	ret    
c001b2f3:	90                   	nop

c001b2f4 <PCI::readBAR32(unsigned int, int)>:
c001b2f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2fc:	f6 c2 01             	test   dl,0x1
c001b2ff:	74 07                	je     c001b308 <PCI::readBAR32(unsigned int, int)+0x14>
c001b301:	83 e2 fc             	and    edx,0xfffffffc
c001b304:	01 c2                	add    edx,eax
c001b306:	ed                   	in     eax,dx
c001b307:	c3                   	ret    
c001b308:	83 e2 f0             	and    edx,0xfffffff0
c001b30b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b30e:	c3                   	ret    
c001b30f:	90                   	nop

c001b310 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b310:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b318:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b31c:	f6 c2 01             	test   dl,0x1
c001b31f:	74 07                	je     c001b328 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b321:	83 e2 fc             	and    edx,0xfffffffc
c001b324:	01 ca                	add    edx,ecx
c001b326:	ee                   	out    dx,al
c001b327:	c3                   	ret    
c001b328:	83 e2 f0             	and    edx,0xfffffff0
c001b32b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b32e:	c3                   	ret    
c001b32f:	90                   	nop

c001b330 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b330:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b334:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b338:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b33c:	f6 c2 01             	test   dl,0x1
c001b33f:	74 08                	je     c001b349 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b341:	83 e2 fc             	and    edx,0xfffffffc
c001b344:	01 ca                	add    edx,ecx
c001b346:	66 ef                	out    dx,ax
c001b348:	c3                   	ret    
c001b349:	83 e2 f0             	and    edx,0xfffffff0
c001b34c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b350:	c3                   	ret    
c001b351:	90                   	nop

c001b352 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b352:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b356:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b35a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b35e:	f6 c2 01             	test   dl,0x1
c001b361:	74 07                	je     c001b36a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b363:	83 e2 fc             	and    edx,0xfffffffc
c001b366:	01 ca                	add    edx,ecx
c001b368:	ef                   	out    dx,eax
c001b369:	c3                   	ret    
c001b36a:	83 e2 f0             	and    edx,0xfffffff0
c001b36d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b370:	c3                   	ret    
c001b371:	90                   	nop

c001b372 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b372:	55                   	push   ebp
c001b373:	57                   	push   edi
c001b374:	56                   	push   esi
c001b375:	53                   	push   ebx
c001b376:	83 ec 0c             	sub    esp,0xc
c001b379:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b37e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b382:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b386:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b38a:	83 fe 07             	cmp    esi,0x7
c001b38d:	76 10                	jbe    c001b39f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b38f:	83 ec 0c             	sub    esp,0xc
c001b392:	68 7f 32 02 c0       	push   0xc002327f
c001b397:	e8 6b 62 ff ff       	call   c0011607 <KePanic(char const*)>
c001b39c:	83 c4 10             	add    esp,0x10
c001b39f:	0f b6 db             	movzx  ebx,bl
c001b3a2:	83 fb 0f             	cmp    ebx,0xf
c001b3a5:	76 10                	jbe    c001b3b7 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b3a7:	83 ec 0c             	sub    esp,0xc
c001b3aa:	68 af 32 02 c0       	push   0xc00232af
c001b3af:	e8 53 62 ff ff       	call   c0011607 <KePanic(char const*)>
c001b3b4:	83 c4 10             	add    esp,0x10
c001b3b7:	8d 04 36             	lea    eax,[esi+esi*1]
c001b3ba:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3bf:	83 c8 f0             	or     eax,0xfffffff0
c001b3c2:	ee                   	out    dx,al
c001b3c3:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b3c8:	89 e8                	mov    eax,ebp
c001b3ca:	ee                   	out    dx,al
c001b3cb:	89 f9                	mov    ecx,edi
c001b3cd:	89 d8                	mov    eax,ebx
c001b3cf:	0f b6 d9             	movzx  ebx,cl
c001b3d2:	83 c4 0c             	add    esp,0xc
c001b3d5:	c1 e0 08             	shl    eax,0x8
c001b3d8:	83 e3 fc             	and    ebx,0xfffffffc
c001b3db:	09 d8                	or     eax,ebx
c001b3dd:	5b                   	pop    ebx
c001b3de:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b3e3:	5e                   	pop    esi
c001b3e4:	5f                   	pop    edi
c001b3e5:	5d                   	pop    ebp
c001b3e6:	c3                   	ret    
c001b3e7:	90                   	nop

c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b3e8:	57                   	push   edi
c001b3e9:	56                   	push   esi
c001b3ea:	53                   	push   ebx
c001b3eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b3f7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b3fb:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b401:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b405:	83 ff 01             	cmp    edi,0x1
c001b408:	75 3f                	jne    c001b449 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b40a:	89 de                	mov    esi,ebx
c001b40c:	0f b6 c0             	movzx  eax,al
c001b40f:	c1 e0 10             	shl    eax,0x10
c001b412:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b418:	0f b6 c9             	movzx  ecx,cl
c001b41b:	09 f0                	or     eax,esi
c001b41d:	c1 e1 08             	shl    ecx,0x8
c001b420:	0f b6 d2             	movzx  edx,dl
c001b423:	c1 e2 0b             	shl    edx,0xb
c001b426:	09 c8                	or     eax,ecx
c001b428:	09 d0                	or     eax,edx
c001b42a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b42f:	0d 00 00 00 80       	or     eax,0x80000000
c001b434:	ef                   	out    dx,eax
c001b435:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b43a:	ed                   	in     eax,dx
c001b43b:	83 e3 02             	and    ebx,0x2
c001b43e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b445:	d3 e8                	shr    eax,cl
c001b447:	eb 44                	jmp    c001b48d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b449:	83 ff 02             	cmp    edi,0x2
c001b44c:	75 2d                	jne    c001b47b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b44e:	83 ec 0c             	sub    esp,0xc
c001b451:	0f b6 fb             	movzx  edi,bl
c001b454:	57                   	push   edi
c001b455:	0f b6 c9             	movzx  ecx,cl
c001b458:	51                   	push   ecx
c001b459:	0f b6 d2             	movzx  edx,dl
c001b45c:	52                   	push   edx
c001b45d:	0f b6 c0             	movzx  eax,al
c001b460:	50                   	push   eax
c001b461:	56                   	push   esi
c001b462:	e8 0b ff ff ff       	call   c001b372 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b467:	89 c2                	mov    edx,eax
c001b469:	ed                   	in     eax,dx
c001b46a:	83 e3 02             	and    ebx,0x2
c001b46d:	83 c4 20             	add    esp,0x20
c001b470:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b477:	d3 e8                	shr    eax,cl
c001b479:	eb 12                	jmp    c001b48d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b47b:	83 ec 0c             	sub    esp,0xc
c001b47e:	68 df 32 02 c0       	push   0xc00232df
c001b483:	e8 7f 61 ff ff       	call   c0011607 <KePanic(char const*)>
c001b488:	83 c4 10             	add    esp,0x10
c001b48b:	31 c0                	xor    eax,eax
c001b48d:	5b                   	pop    ebx
c001b48e:	5e                   	pop    esi
c001b48f:	5f                   	pop    edi
c001b490:	c3                   	ret    
c001b491:	90                   	nop

c001b492 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b492:	83 ec 18             	sub    esp,0x18
c001b495:	6a 00                	push   0x0
c001b497:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b49c:	50                   	push   eax
c001b49d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a2:	50                   	push   eax
c001b4a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a8:	50                   	push   eax
c001b4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4ad:	e8 36 ff ff ff       	call   c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4b2:	83 c4 2c             	add    esp,0x2c
c001b4b5:	c3                   	ret    

c001b4b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b4b6:	83 ec 18             	sub    esp,0x18
c001b4b9:	6a 0e                	push   0xe
c001b4bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4c0:	50                   	push   eax
c001b4c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4c6:	50                   	push   eax
c001b4c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4cc:	50                   	push   eax
c001b4cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4d1:	e8 12 ff ff ff       	call   c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4d6:	83 c4 2c             	add    esp,0x2c
c001b4d9:	0f b6 c0             	movzx  eax,al
c001b4dc:	c3                   	ret    
c001b4dd:	90                   	nop

c001b4de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b4de:	55                   	push   ebp
c001b4df:	57                   	push   edi
c001b4e0:	56                   	push   esi
c001b4e1:	53                   	push   ebx
c001b4e2:	83 ec 18             	sub    esp,0x18
c001b4e5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b4ea:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b4ef:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b4f4:	6a 0a                	push   0xa
c001b4f6:	56                   	push   esi
c001b4f7:	55                   	push   ebp
c001b4f8:	57                   	push   edi
c001b4f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b4fd:	e8 e6 fe ff ff       	call   c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b502:	83 c4 14             	add    esp,0x14
c001b505:	6a 0a                	push   0xa
c001b507:	56                   	push   esi
c001b508:	55                   	push   ebp
c001b509:	57                   	push   edi
c001b50a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b50e:	89 c3                	mov    ebx,eax
c001b510:	0f b6 db             	movzx  ebx,bl
c001b513:	e8 d0 fe ff ff       	call   c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b518:	83 c4 2c             	add    esp,0x2c
c001b51b:	25 00 ff 00 00       	and    eax,0xff00
c001b520:	09 d8                	or     eax,ebx
c001b522:	5b                   	pop    ebx
c001b523:	5e                   	pop    esi
c001b524:	5f                   	pop    edi
c001b525:	5d                   	pop    ebp
c001b526:	c3                   	ret    
c001b527:	90                   	nop

c001b528 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b528:	83 ec 18             	sub    esp,0x18
c001b52b:	6a 08                	push   0x8
c001b52d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b532:	50                   	push   eax
c001b533:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b538:	50                   	push   eax
c001b539:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b53e:	50                   	push   eax
c001b53f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b543:	e8 a0 fe ff ff       	call   c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b548:	83 c4 2c             	add    esp,0x2c
c001b54b:	0f b6 c4             	movzx  eax,ah
c001b54e:	c3                   	ret    
c001b54f:	90                   	nop

c001b550 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b550:	83 ec 18             	sub    esp,0x18
c001b553:	6a 08                	push   0x8
c001b555:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b55a:	50                   	push   eax
c001b55b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b560:	50                   	push   eax
c001b561:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b566:	50                   	push   eax
c001b567:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b56b:	e8 78 fe ff ff       	call   c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b570:	83 c4 2c             	add    esp,0x2c
c001b573:	c3                   	ret    

c001b574 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b574:	83 ec 18             	sub    esp,0x18
c001b577:	6a 3c                	push   0x3c
c001b579:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b57e:	50                   	push   eax
c001b57f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b584:	50                   	push   eax
c001b585:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b58a:	50                   	push   eax
c001b58b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b58f:	e8 54 fe ff ff       	call   c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b594:	83 c4 2c             	add    esp,0x2c
c001b597:	c3                   	ret    

c001b598 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b598:	83 ec 18             	sub    esp,0x18
c001b59b:	6a 18                	push   0x18
c001b59d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5a2:	50                   	push   eax
c001b5a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5a8:	50                   	push   eax
c001b5a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5ae:	50                   	push   eax
c001b5af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5b3:	e8 30 fe ff ff       	call   c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5b8:	83 c4 2c             	add    esp,0x2c
c001b5bb:	0f b6 c4             	movzx  eax,ah
c001b5be:	c3                   	ret    
c001b5bf:	90                   	nop

c001b5c0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b5c0:	55                   	push   ebp
c001b5c1:	57                   	push   edi
c001b5c2:	56                   	push   esi
c001b5c3:	53                   	push   ebx
c001b5c4:	83 ec 28             	sub    esp,0x28
c001b5c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b5cb:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b5d0:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b5d5:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b5da:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b5e1:	8d 43 12             	lea    eax,[ebx+0x12]
c001b5e4:	83 c3 10             	add    ebx,0x10
c001b5e7:	0f b6 c0             	movzx  eax,al
c001b5ea:	0f b6 db             	movzx  ebx,bl
c001b5ed:	50                   	push   eax
c001b5ee:	51                   	push   ecx
c001b5ef:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b5f3:	57                   	push   edi
c001b5f4:	55                   	push   ebp
c001b5f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b5f9:	e8 ea fd ff ff       	call   c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5fe:	83 c4 14             	add    esp,0x14
c001b601:	53                   	push   ebx
c001b602:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b606:	51                   	push   ecx
c001b607:	89 c6                	mov    esi,eax
c001b609:	57                   	push   edi
c001b60a:	55                   	push   ebp
c001b60b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b60f:	c1 e6 10             	shl    esi,0x10
c001b612:	e8 d1 fd ff ff       	call   c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b617:	83 c4 3c             	add    esp,0x3c
c001b61a:	5b                   	pop    ebx
c001b61b:	0f b7 c0             	movzx  eax,ax
c001b61e:	09 f0                	or     eax,esi
c001b620:	5e                   	pop    esi
c001b621:	5f                   	pop    edi
c001b622:	5d                   	pop    ebp
c001b623:	c3                   	ret    

c001b624 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b624:	55                   	push   ebp
c001b625:	57                   	push   edi
c001b626:	56                   	push   esi
c001b627:	53                   	push   ebx
c001b628:	83 ec 0c             	sub    esp,0xc
c001b62b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b62f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b633:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b637:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b63b:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b641:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b645:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b649:	83 f9 01             	cmp    ecx,0x1
c001b64c:	75 5d                	jne    c001b6ab <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b64e:	0f b6 c8             	movzx  ecx,al
c001b651:	89 f0                	mov    eax,esi
c001b653:	25 fc 00 00 00       	and    eax,0xfc
c001b658:	0f b6 d2             	movzx  edx,dl
c001b65b:	c1 e1 10             	shl    ecx,0x10
c001b65e:	c1 e2 0b             	shl    edx,0xb
c001b661:	09 c1                	or     ecx,eax
c001b663:	89 f8                	mov    eax,edi
c001b665:	0f b6 f8             	movzx  edi,al
c001b668:	c1 e7 08             	shl    edi,0x8
c001b66b:	09 f9                	or     ecx,edi
c001b66d:	09 d1                	or     ecx,edx
c001b66f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b674:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b67a:	89 c8                	mov    eax,ecx
c001b67c:	ef                   	out    dx,eax
c001b67d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b682:	ed                   	in     eax,dx
c001b683:	83 e6 02             	and    esi,0x2
c001b686:	0f b7 db             	movzx  ebx,bx
c001b689:	74 0a                	je     c001b695 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b68b:	c1 e3 10             	shl    ebx,0x10
c001b68e:	0f b7 d0             	movzx  edx,ax
c001b691:	09 d3                	or     ebx,edx
c001b693:	eb 05                	jmp    c001b69a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b695:	66 31 c0             	xor    ax,ax
c001b698:	09 c3                	or     ebx,eax
c001b69a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b69f:	89 c8                	mov    eax,ecx
c001b6a1:	ef                   	out    dx,eax
c001b6a2:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6a7:	89 d8                	mov    eax,ebx
c001b6a9:	eb 41                	jmp    c001b6ec <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b6ab:	83 f9 02             	cmp    ecx,0x2
c001b6ae:	75 45                	jne    c001b6f5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b6b0:	89 f1                	mov    ecx,esi
c001b6b2:	83 ec 0c             	sub    esp,0xc
c001b6b5:	0f b6 f1             	movzx  esi,cl
c001b6b8:	89 f9                	mov    ecx,edi
c001b6ba:	56                   	push   esi
c001b6bb:	0f b6 f9             	movzx  edi,cl
c001b6be:	57                   	push   edi
c001b6bf:	0f b6 d2             	movzx  edx,dl
c001b6c2:	52                   	push   edx
c001b6c3:	0f b6 c0             	movzx  eax,al
c001b6c6:	50                   	push   eax
c001b6c7:	55                   	push   ebp
c001b6c8:	e8 a5 fc ff ff       	call   c001b372 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6cd:	89 c2                	mov    edx,eax
c001b6cf:	ed                   	in     eax,dx
c001b6d0:	83 c4 20             	add    esp,0x20
c001b6d3:	f6 c2 02             	test   dl,0x2
c001b6d6:	0f b7 db             	movzx  ebx,bx
c001b6d9:	74 0c                	je     c001b6e7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b6db:	0f b7 c8             	movzx  ecx,ax
c001b6de:	89 d8                	mov    eax,ebx
c001b6e0:	c1 e0 10             	shl    eax,0x10
c001b6e3:	09 c8                	or     eax,ecx
c001b6e5:	eb 05                	jmp    c001b6ec <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b6e7:	66 31 c0             	xor    ax,ax
c001b6ea:	09 d8                	or     eax,ebx
c001b6ec:	ef                   	out    dx,eax
c001b6ed:	83 c4 0c             	add    esp,0xc
c001b6f0:	5b                   	pop    ebx
c001b6f1:	5e                   	pop    esi
c001b6f2:	5f                   	pop    edi
c001b6f3:	5d                   	pop    ebp
c001b6f4:	c3                   	ret    
c001b6f5:	c7 44 24 20 df 32 02 c0 	mov    DWORD PTR [esp+0x20],0xc00232df
c001b6fd:	83 c4 0c             	add    esp,0xc
c001b700:	5b                   	pop    ebx
c001b701:	5e                   	pop    esi
c001b702:	5f                   	pop    edi
c001b703:	5d                   	pop    ebp
c001b704:	e9 fe 5e ff ff       	jmp    c0011607 <KePanic(char const*)>
c001b709:	90                   	nop

c001b70a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b70a:	55                   	push   ebp
c001b70b:	57                   	push   edi
c001b70c:	56                   	push   esi
c001b70d:	53                   	push   ebx
c001b70e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b714:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b71b:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b722:	0f 85 bd 00 00 00    	jne    c001b7e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b728:	83 ec 0c             	sub    esp,0xc
c001b72b:	68 14 01 00 00       	push   0x114
c001b730:	e8 a2 c3 fe ff       	call   c0007ad7 <malloc>
c001b735:	83 c4 0c             	add    esp,0xc
c001b738:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b73e:	68 e5 32 02 c0       	push   0xc00232e5
c001b743:	50                   	push   eax
c001b744:	89 c3                	mov    ebx,eax
c001b746:	e8 db 03 ff ff       	call   c000bb26 <File::File(char const*, Process*)>
c001b74b:	83 c4 10             	add    esp,0x10
c001b74e:	85 db                	test   ebx,ebx
c001b750:	0f 84 6b 02 00 00    	je     c001b9c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b756:	57                   	push   edi
c001b757:	57                   	push   edi
c001b758:	6a 01                	push   0x1
c001b75a:	53                   	push   ebx
c001b75b:	e8 e4 03 ff ff       	call   c000bb44 <File::open(FileOpenMode)>
c001b760:	83 c4 10             	add    esp,0x10
c001b763:	85 c0                	test   eax,eax
c001b765:	0f 85 56 02 00 00    	jne    c001b9c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b76b:	52                   	push   edx
c001b76c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b770:	50                   	push   eax
c001b771:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b775:	50                   	push   eax
c001b776:	53                   	push   ebx
c001b777:	e8 ca 06 ff ff       	call   c000be46 <File::stat(unsigned long long*, bool*)>
c001b77c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b780:	40                   	inc    eax
c001b781:	89 04 24             	mov    DWORD PTR [esp],eax
c001b784:	e8 4e c3 fe ff       	call   c0007ad7 <malloc>
c001b789:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b78d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b791:	59                   	pop    ecx
c001b792:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b797:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b799:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b79d:	51                   	push   ecx
c001b79e:	50                   	push   eax
c001b79f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7a3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7a7:	53                   	push   ebx
c001b7a8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7ab:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b7af:	83 c4 20             	add    esp,0x20
c001b7b2:	89 c8                	mov    eax,ecx
c001b7b4:	99                   	cdq    
c001b7b5:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b7b9:	0f 85 02 02 00 00    	jne    c001b9c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b7bf:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b7c3:	0f 85 f8 01 00 00    	jne    c001b9c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b7c9:	83 ec 0c             	sub    esp,0xc
c001b7cc:	53                   	push   ebx
c001b7cd:	e8 d0 03 ff ff       	call   c000bba2 <File::close()>
c001b7d2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b7d6:	83 c4 10             	add    esp,0x10
c001b7d9:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b7e0:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b7e5:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b7ed:	31 c9                	xor    ecx,ecx
c001b7ef:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b7f6:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b7fc:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b803:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b809:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b80e:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b816:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b81b:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b827:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b82f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b833:	39 cd                	cmp    ebp,ecx
c001b835:	0f 8e 86 01 00 00    	jle    c001b9c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b83b:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b83e:	d4 40                	aam    0x40
c001b840:	d5 39                	aad    0x39
c001b842:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b846:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b84a:	d4 40                	aam    0x40
c001b84c:	d5 39                	aad    0x39
c001b84e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b852:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b856:	d4 40                	aam    0x40
c001b858:	d5 39                	aad    0x39
c001b85a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b85e:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b862:	d4 40                	aam    0x40
c001b864:	d5 39                	aad    0x39
c001b866:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b86a:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b86e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b872:	3c 56                	cmp    al,0x56
c001b874:	74 47                	je     c001b8bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b876:	d4 40                	aam    0x40
c001b878:	d5 39                	aad    0x39
c001b87a:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b87d:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b881:	0f b6 db             	movzx  ebx,bl
c001b884:	c1 e3 04             	shl    ebx,0x4
c001b887:	d4 40                	aam    0x40
c001b889:	d5 39                	aad    0x39
c001b88b:	83 e8 30             	sub    eax,0x30
c001b88e:	0f b6 c0             	movzx  eax,al
c001b891:	09 c3                	or     ebx,eax
c001b893:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b897:	c1 e3 04             	shl    ebx,0x4
c001b89a:	d4 40                	aam    0x40
c001b89c:	d5 39                	aad    0x39
c001b89e:	83 e8 30             	sub    eax,0x30
c001b8a1:	0f b6 c0             	movzx  eax,al
c001b8a4:	09 c3                	or     ebx,eax
c001b8a6:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b8aa:	c1 e3 04             	shl    ebx,0x4
c001b8ad:	d4 40                	aam    0x40
c001b8af:	d5 39                	aad    0x39
c001b8b1:	83 e8 30             	sub    eax,0x30
c001b8b4:	0f b6 c0             	movzx  eax,al
c001b8b7:	09 c3                	or     ebx,eax
c001b8b9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b8bd:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b8c1:	80 fb 58             	cmp    bl,0x58
c001b8c4:	74 49                	je     c001b90f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b8c6:	88 d8                	mov    al,bl
c001b8c8:	d4 40                	aam    0x40
c001b8ca:	d5 39                	aad    0x39
c001b8cc:	83 e8 30             	sub    eax,0x30
c001b8cf:	0f b6 f8             	movzx  edi,al
c001b8d2:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b8d6:	c1 e7 04             	shl    edi,0x4
c001b8d9:	d4 40                	aam    0x40
c001b8db:	d5 39                	aad    0x39
c001b8dd:	83 e8 30             	sub    eax,0x30
c001b8e0:	0f b6 c0             	movzx  eax,al
c001b8e3:	09 c7                	or     edi,eax
c001b8e5:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b8e9:	c1 e7 04             	shl    edi,0x4
c001b8ec:	d4 40                	aam    0x40
c001b8ee:	d5 39                	aad    0x39
c001b8f0:	83 e8 30             	sub    eax,0x30
c001b8f3:	0f b6 c0             	movzx  eax,al
c001b8f6:	09 c7                	or     edi,eax
c001b8f8:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b8fc:	c1 e7 04             	shl    edi,0x4
c001b8ff:	d4 40                	aam    0x40
c001b901:	d5 39                	aad    0x39
c001b903:	83 e8 30             	sub    eax,0x30
c001b906:	0f b6 c0             	movzx  eax,al
c001b909:	09 c7                	or     edi,eax
c001b90b:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b90f:	8d 41 10             	lea    eax,[ecx+0x10]
c001b912:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b916:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b91a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b91e:	83 f9 0a             	cmp    ecx,0xa
c001b921:	74 07                	je     c001b92a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b923:	47                   	inc    edi
c001b924:	39 c5                	cmp    ebp,eax
c001b926:	75 16                	jne    c001b93e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b928:	89 e8                	mov    eax,ebp
c001b92a:	83 f9 0a             	cmp    ecx,0xa
c001b92d:	0f 94 c1             	sete   cl
c001b930:	0f b6 c9             	movzx  ecx,cl
c001b933:	01 c1                	add    ecx,eax
c001b935:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b93a:	75 0f                	jne    c001b94b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b93c:	eb 1c                	jmp    c001b95a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b93e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b941:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b945:	40                   	inc    eax
c001b946:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b949:	eb cb                	jmp    c001b916 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b94b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b94f:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b954:	0f 85 d9 fe ff ff    	jne    c001b833 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b95a:	80 fb 58             	cmp    bl,0x58
c001b95d:	74 10                	je     c001b96f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b95f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b964:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b969:	0f 85 c4 fe ff ff    	jne    c001b833 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b96f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b973:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b977:	83 e8 30             	sub    eax,0x30
c001b97a:	c1 e0 04             	shl    eax,0x4
c001b97d:	83 eb 30             	sub    ebx,0x30
c001b980:	09 d8                	or     eax,ebx
c001b982:	0f b6 c0             	movzx  eax,al
c001b985:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b989:	0f 85 a4 fe ff ff    	jne    c001b833 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b98f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b993:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b997:	83 e8 30             	sub    eax,0x30
c001b99a:	c1 e0 04             	shl    eax,0x4
c001b99d:	83 eb 30             	sub    ebx,0x30
c001b9a0:	09 d8                	or     eax,ebx
c001b9a2:	0f b6 c0             	movzx  eax,al
c001b9a5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b9a9:	0f 85 84 fe ff ff    	jne    c001b833 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b9af:	50                   	push   eax
c001b9b0:	50                   	push   eax
c001b9b1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b9b5:	50                   	push   eax
c001b9b6:	56                   	push   esi
c001b9b7:	e8 94 4c fe ff       	call   c0000650 <strcpy>
c001b9bc:	83 c4 10             	add    esp,0x10
c001b9bf:	eb 05                	jmp    c001b9c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b9c1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9c4:	31 f6                	xor    esi,esi
c001b9c6:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b9cc:	89 f0                	mov    eax,esi
c001b9ce:	5b                   	pop    ebx
c001b9cf:	5e                   	pop    esi
c001b9d0:	5f                   	pop    edi
c001b9d1:	5d                   	pop    ebp
c001b9d2:	c3                   	ret    
c001b9d3:	90                   	nop

c001b9d4 <PCI::checkBus(unsigned char)>:
c001b9d4:	56                   	push   esi
c001b9d5:	53                   	push   ebx
c001b9d6:	31 db                	xor    ebx,ebx
c001b9d8:	51                   	push   ecx
c001b9d9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b9de:	52                   	push   edx
c001b9df:	53                   	push   ebx
c001b9e0:	43                   	inc    ebx
c001b9e1:	56                   	push   esi
c001b9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9e6:	e8 0f 03 00 00       	call   c001bcfa <PCI::checkDevice(unsigned char, unsigned char)>
c001b9eb:	83 c4 10             	add    esp,0x10
c001b9ee:	83 fb 20             	cmp    ebx,0x20
c001b9f1:	75 eb                	jne    c001b9de <PCI::checkBus(unsigned char)+0xa>
c001b9f3:	58                   	pop    eax
c001b9f4:	5b                   	pop    ebx
c001b9f5:	5e                   	pop    esi
c001b9f6:	c3                   	ret    
c001b9f7:	90                   	nop

c001b9f8 <PCI::foundDevice(PCIDeviceInfo)>:
c001b9f8:	55                   	push   ebp
c001b9f9:	57                   	push   edi
c001b9fa:	56                   	push   esi
c001b9fb:	53                   	push   ebx
c001b9fc:	83 ec 1c             	sub    esp,0x1c
c001b9ff:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ba04:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba08:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba0d:	0f 84 63 01 00 00    	je     c001bb76 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ba13:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ba18:	66 3d 06 04          	cmp    ax,0x406
c001ba1c:	75 2c                	jne    c001ba4a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ba1e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ba23:	50                   	push   eax
c001ba24:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001ba29:	50                   	push   eax
c001ba2a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001ba2f:	50                   	push   eax
c001ba30:	53                   	push   ebx
c001ba31:	e8 62 fb ff ff       	call   c001b598 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ba36:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ba3a:	0f b6 c0             	movzx  eax,al
c001ba3d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ba41:	83 c4 2c             	add    esp,0x2c
c001ba44:	5b                   	pop    ebx
c001ba45:	5e                   	pop    esi
c001ba46:	5f                   	pop    edi
c001ba47:	5d                   	pop    ebp
c001ba48:	eb 8a                	jmp    c001b9d4 <PCI::checkBus(unsigned char)>
c001ba4a:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001ba4f:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ba55:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ba59:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ba5d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ba61:	85 d2                	test   edx,edx
c001ba63:	74 34                	je     c001ba99 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001ba65:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ba68:	85 c9                	test   ecx,ecx
c001ba6a:	74 29                	je     c001ba95 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba6c:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001ba72:	31 f5                	xor    ebp,esi
c001ba74:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001ba7a:	75 19                	jne    c001ba95 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba7c:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001ba82:	75 11                	jne    c001ba95 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ba84:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001ba8b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001ba8f:	0f 84 e1 00 00 00    	je     c001bb76 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ba95:	8b 12                	mov    edx,DWORD PTR [edx]
c001ba97:	eb c8                	jmp    c001ba61 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ba99:	3d 01 06 00 00       	cmp    eax,0x601
c001ba9e:	75 19                	jne    c001bab9 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001baa0:	83 ec 0c             	sub    esp,0xc
c001baa3:	68 64 01 00 00       	push   0x164
c001baa8:	e8 2a c0 fe ff       	call   c0007ad7 <malloc>
c001baad:	89 04 24             	mov    DWORD PTR [esp],eax
c001bab0:	89 c5                	mov    ebp,eax
c001bab2:	e8 ab 0e 00 00       	call   c001c962 <SATABus::SATABus()>
c001bab7:	eb 1e                	jmp    c001bad7 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001bab9:	3d 01 01 00 00       	cmp    eax,0x101
c001babe:	75 62                	jne    c001bb22 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001bac0:	83 ec 0c             	sub    esp,0xc
c001bac3:	68 70 02 00 00       	push   0x270
c001bac8:	e8 0a c0 fe ff       	call   c0007ad7 <malloc>
c001bacd:	89 04 24             	mov    DWORD PTR [esp],eax
c001bad0:	89 c5                	mov    ebp,eax
c001bad2:	e8 f3 02 00 00       	call   c001bdca <IDE::IDE()>
c001bad7:	58                   	pop    eax
c001bad8:	5a                   	pop    edx
c001bad9:	55                   	push   ebp
c001bada:	53                   	push   ebx
c001badb:	e8 c4 0e ff ff       	call   c000c9a4 <Device::addChild(Device*)>
c001bae0:	83 ec 1c             	sub    esp,0x1c
c001bae3:	b9 09 00 00 00       	mov    ecx,0x9
c001bae8:	fc                   	cld    
c001bae9:	8d 74 24 60          	lea    esi,[esp+0x60]
c001baed:	89 e7                	mov    edi,esp
c001baef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001baf1:	55                   	push   ebp
c001baf2:	e8 f3 0d ff ff       	call   c000c8ea <Device::preOpenPCI(PCIDeviceInfo)>
c001baf7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bafa:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bafe:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bb06:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bb0e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bb16:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bb19:	83 c4 4c             	add    esp,0x4c
c001bb1c:	5b                   	pop    ebx
c001bb1d:	5e                   	pop    esi
c001bb1e:	5f                   	pop    edi
c001bb1f:	5d                   	pop    ebp
c001bb20:	ff e0                	jmp    eax
c001bb22:	83 ec 0c             	sub    esp,0xc
c001bb25:	68 58 01 00 00       	push   0x158
c001bb2a:	e8 a8 bf fe ff       	call   c0007ad7 <malloc>
c001bb2f:	5a                   	pop    edx
c001bb30:	59                   	pop    ecx
c001bb31:	68 fe 32 02 c0       	push   0xc00232fe
c001bb36:	50                   	push   eax
c001bb37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb3b:	e8 18 11 ff ff       	call   c000cc58 <DriverlessDevice::DriverlessDevice(char const*)>
c001bb40:	5e                   	pop    esi
c001bb41:	5f                   	pop    edi
c001bb42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb46:	50                   	push   eax
c001bb47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb4b:	53                   	push   ebx
c001bb4c:	e8 53 0e ff ff       	call   c000c9a4 <Device::addChild(Device*)>
c001bb51:	83 c4 10             	add    esp,0x10
c001bb54:	b9 09 00 00 00       	mov    ecx,0x9
c001bb59:	fc                   	cld    
c001bb5a:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bb5e:	89 fe                	mov    esi,edi
c001bb60:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb66:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb6a:	83 c4 1c             	add    esp,0x1c
c001bb6d:	5b                   	pop    ebx
c001bb6e:	5e                   	pop    esi
c001bb6f:	5f                   	pop    edi
c001bb70:	5d                   	pop    ebp
c001bb71:	e9 74 0d ff ff       	jmp    c000c8ea <Device::preOpenPCI(PCIDeviceInfo)>
c001bb76:	83 c4 1c             	add    esp,0x1c
c001bb79:	5b                   	pop    ebx
c001bb7a:	5e                   	pop    esi
c001bb7b:	5f                   	pop    edi
c001bb7c:	5d                   	pop    ebp
c001bb7d:	c3                   	ret    

c001bb7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bb7e:	55                   	push   ebp
c001bb7f:	57                   	push   edi
c001bb80:	56                   	push   esi
c001bb81:	53                   	push   ebx
c001bb82:	83 ec 68             	sub    esp,0x68
c001bb85:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bb8c:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bb90:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb94:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bb9b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bba0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bba4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bbab:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bbb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bbb4:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bbb9:	6a 0c                	push   0xc
c001bbbb:	57                   	push   edi
c001bbbc:	53                   	push   ebx
c001bbbd:	56                   	push   esi
c001bbbe:	55                   	push   ebp
c001bbbf:	e8 24 f8 ff ff       	call   c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbc4:	83 c4 20             	add    esp,0x20
c001bbc7:	57                   	push   edi
c001bbc8:	53                   	push   ebx
c001bbc9:	56                   	push   esi
c001bbca:	55                   	push   ebp
c001bbcb:	e8 0e f9 ff ff       	call   c001b4de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bbd0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bbd5:	57                   	push   edi
c001bbd6:	53                   	push   ebx
c001bbd7:	56                   	push   esi
c001bbd8:	55                   	push   ebp
c001bbd9:	e8 96 f9 ff ff       	call   c001b574 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bbde:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bbe2:	83 c4 14             	add    esp,0x14
c001bbe5:	6a 3c                	push   0x3c
c001bbe7:	57                   	push   edi
c001bbe8:	53                   	push   ebx
c001bbe9:	56                   	push   esi
c001bbea:	55                   	push   ebp
c001bbeb:	e8 f8 f7 ff ff       	call   c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbf0:	0f b6 c4             	movzx  eax,ah
c001bbf3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bbf7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bbfb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bbff:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bc04:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bc0a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bc10:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bc14:	83 c4 20             	add    esp,0x20
c001bc17:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bc1c:	74 30                	je     c001bc4e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc1e:	31 c0                	xor    eax,eax
c001bc20:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bc24:	7e 28                	jle    c001bc4e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc26:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bc2e:	39 cb                	cmp    ebx,ecx
c001bc30:	75 19                	jne    c001bc4b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc32:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bc3a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bc3e:	75 0b                	jne    c001bc4b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc40:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bc47:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bc4b:	40                   	inc    eax
c001bc4c:	eb d2                	jmp    c001bc20 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bc4e:	31 d2                	xor    edx,edx
c001bc50:	83 ec 0c             	sub    esp,0xc
c001bc53:	57                   	push   edi
c001bc54:	53                   	push   ebx
c001bc55:	56                   	push   esi
c001bc56:	52                   	push   edx
c001bc57:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bc5b:	55                   	push   ebp
c001bc5c:	e8 5f f9 ff ff       	call   c001b5c0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc61:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bc65:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bc69:	42                   	inc    edx
c001bc6a:	83 c4 20             	add    esp,0x20
c001bc6d:	83 fa 06             	cmp    edx,0x6
c001bc70:	75 de                	jne    c001bc50 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bc72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc76:	83 ec 0c             	sub    esp,0xc
c001bc79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc7d:	c1 e2 08             	shl    edx,0x8
c001bc80:	0f b6 c4             	movzx  eax,ah
c001bc83:	09 d0                	or     eax,edx
c001bc85:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bc8a:	6a 02                	push   0x2
c001bc8c:	57                   	push   edi
c001bc8d:	53                   	push   ebx
c001bc8e:	56                   	push   esi
c001bc8f:	55                   	push   ebp
c001bc90:	e8 53 f7 ff ff       	call   c001b3e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc95:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bc9a:	83 c4 20             	add    esp,0x20
c001bc9d:	57                   	push   edi
c001bc9e:	53                   	push   ebx
c001bc9f:	56                   	push   esi
c001bca0:	55                   	push   ebp
c001bca1:	e8 82 f8 ff ff       	call   c001b528 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bca6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bcaa:	57                   	push   edi
c001bcab:	53                   	push   ebx
c001bcac:	56                   	push   esi
c001bcad:	55                   	push   ebp
c001bcae:	e8 df f7 ff ff       	call   c001b492 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcb3:	b9 09 00 00 00       	mov    ecx,0x9
c001bcb8:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bcbd:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bcc1:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bcc5:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bcc9:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bccd:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bcd1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bcd5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bcd9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bcdd:	83 ec 0c             	sub    esp,0xc
c001bce0:	fc                   	cld    
c001bce1:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bce5:	89 e7                	mov    edi,esp
c001bce7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bce9:	55                   	push   ebp
c001bcea:	e8 09 fd ff ff       	call   c001b9f8 <PCI::foundDevice(PCIDeviceInfo)>
c001bcef:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bcf5:	5b                   	pop    ebx
c001bcf6:	5e                   	pop    esi
c001bcf7:	5f                   	pop    edi
c001bcf8:	5d                   	pop    ebp
c001bcf9:	c3                   	ret    

c001bcfa <PCI::checkDevice(unsigned char, unsigned char)>:
c001bcfa:	55                   	push   ebp
c001bcfb:	57                   	push   edi
c001bcfc:	56                   	push   esi
c001bcfd:	53                   	push   ebx
c001bcfe:	83 ec 0c             	sub    esp,0xc
c001bd01:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bd06:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bd0b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bd0f:	6a 00                	push   0x0
c001bd11:	56                   	push   esi
c001bd12:	57                   	push   edi
c001bd13:	55                   	push   ebp
c001bd14:	e8 79 f7 ff ff       	call   c001b492 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd19:	6a 00                	push   0x0
c001bd1b:	56                   	push   esi
c001bd1c:	57                   	push   edi
c001bd1d:	55                   	push   ebp
c001bd1e:	e8 5b fe ff ff       	call   c001bb7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd23:	83 c4 20             	add    esp,0x20
c001bd26:	6a 00                	push   0x0
c001bd28:	56                   	push   esi
c001bd29:	57                   	push   edi
c001bd2a:	55                   	push   ebp
c001bd2b:	e8 86 f7 ff ff       	call   c001b4b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd30:	83 c4 10             	add    esp,0x10
c001bd33:	a8 80                	test   al,0x80
c001bd35:	74 2d                	je     c001bd64 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bd37:	bb 01 00 00 00       	mov    ebx,0x1
c001bd3c:	53                   	push   ebx
c001bd3d:	56                   	push   esi
c001bd3e:	57                   	push   edi
c001bd3f:	55                   	push   ebp
c001bd40:	e8 4d f7 ff ff       	call   c001b492 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd45:	83 c4 10             	add    esp,0x10
c001bd48:	0f b7 c0             	movzx  eax,ax
c001bd4b:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd50:	74 0c                	je     c001bd5e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bd52:	53                   	push   ebx
c001bd53:	56                   	push   esi
c001bd54:	57                   	push   edi
c001bd55:	55                   	push   ebp
c001bd56:	e8 23 fe ff ff       	call   c001bb7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd5b:	83 c4 10             	add    esp,0x10
c001bd5e:	43                   	inc    ebx
c001bd5f:	83 fb 08             	cmp    ebx,0x8
c001bd62:	75 d8                	jne    c001bd3c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bd64:	83 c4 0c             	add    esp,0xc
c001bd67:	5b                   	pop    ebx
c001bd68:	5e                   	pop    esi
c001bd69:	5f                   	pop    edi
c001bd6a:	5d                   	pop    ebp
c001bd6b:	c3                   	ret    

c001bd6c <PCI::detect()>:
c001bd6c:	56                   	push   esi
c001bd6d:	53                   	push   ebx
c001bd6e:	53                   	push   ebx
c001bd6f:	31 db                	xor    ebx,ebx
c001bd71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd75:	6a 00                	push   0x0
c001bd77:	6a 00                	push   0x0
c001bd79:	6a 00                	push   0x0
c001bd7b:	56                   	push   esi
c001bd7c:	e8 35 f7 ff ff       	call   c001b4b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd81:	83 c4 10             	add    esp,0x10
c001bd84:	a8 80                	test   al,0x80
c001bd86:	75 21                	jne    c001bda9 <PCI::detect()+0x3d>
c001bd88:	51                   	push   ecx
c001bd89:	51                   	push   ecx
c001bd8a:	6a 00                	push   0x0
c001bd8c:	56                   	push   esi
c001bd8d:	e8 42 fc ff ff       	call   c001b9d4 <PCI::checkBus(unsigned char)>
c001bd92:	83 c4 10             	add    esp,0x10
c001bd95:	eb 2a                	jmp    c001bdc1 <PCI::detect()+0x55>
c001bd97:	52                   	push   edx
c001bd98:	52                   	push   edx
c001bd99:	53                   	push   ebx
c001bd9a:	43                   	inc    ebx
c001bd9b:	56                   	push   esi
c001bd9c:	e8 33 fc ff ff       	call   c001b9d4 <PCI::checkBus(unsigned char)>
c001bda1:	83 c4 10             	add    esp,0x10
c001bda4:	83 fb 08             	cmp    ebx,0x8
c001bda7:	74 18                	je     c001bdc1 <PCI::detect()+0x55>
c001bda9:	53                   	push   ebx
c001bdaa:	6a 00                	push   0x0
c001bdac:	6a 00                	push   0x0
c001bdae:	56                   	push   esi
c001bdaf:	e8 de f6 ff ff       	call   c001b492 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bdb4:	83 c4 10             	add    esp,0x10
c001bdb7:	0f b7 c0             	movzx  eax,ax
c001bdba:	3d ff ff 00 00       	cmp    eax,0xffff
c001bdbf:	74 d6                	je     c001bd97 <PCI::detect()+0x2b>
c001bdc1:	58                   	pop    eax
c001bdc2:	5b                   	pop    ebx
c001bdc3:	5e                   	pop    esi
c001bdc4:	c3                   	ret    
c001bdc5:	90                   	nop

c001bdc6 <IDE::close(int, int, void*)>:
c001bdc6:	83 c8 ff             	or     eax,0xffffffff
c001bdc9:	c3                   	ret    

c001bdca <IDE::IDE()>:
c001bdca:	83 ec 0c             	sub    esp,0xc
c001bdcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdd1:	83 ec 08             	sub    esp,0x8
c001bdd4:	68 44 33 02 c0       	push   0xc0023344
c001bdd9:	50                   	push   eax
c001bdda:	e8 1d 0f ff ff       	call   c000ccfc <HardDiskController::HardDiskController(char const*)>
c001bddf:	83 c4 10             	add    esp,0x10
c001bde2:	ba d4 33 02 c0       	mov    edx,0xc00233d4
c001bde7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdeb:	89 10                	mov    DWORD PTR [eax],edx
c001bded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdf1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bdf8:	90                   	nop
c001bdf9:	83 c4 0c             	add    esp,0xc
c001bdfc:	c3                   	ret    
c001bdfd:	90                   	nop

c001bdfe <IDE::prepareInterrupt(unsigned char)>:
c001bdfe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be03:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be07:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001be0f:	c3                   	ret    

c001be10 <selectDrive(unsigned char, unsigned char)>:
c001be10:	c3                   	ret    
c001be11:	90                   	nop

c001be12 <IDE::getBase(unsigned char)>:
c001be12:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001be17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be1b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001be23:	c3                   	ret    

c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001be24:	55                   	push   ebp
c001be25:	57                   	push   edi
c001be26:	56                   	push   esi
c001be27:	53                   	push   ebx
c001be28:	83 ec 1c             	sub    esp,0x1c
c001be2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be2f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be33:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001be37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001be3b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001be3e:	80 f9 03             	cmp    cl,0x3
c001be41:	77 4f                	ja     c001be92 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001be43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be47:	0f b6 f2             	movzx  esi,dl
c001be4a:	0f b6 db             	movzx  ebx,bl
c001be4d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001be50:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001be55:	80 ca 80             	or     dl,0x80
c001be58:	52                   	push   edx
c001be59:	6a 0c                	push   0xc
c001be5b:	56                   	push   esi
c001be5c:	57                   	push   edi
c001be5d:	e8 c2 ff ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be62:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001be67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be6b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001be6f:	ee                   	out    dx,al
c001be70:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001be75:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001be79:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001be7d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be85:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be89:	83 c4 2c             	add    esp,0x2c
c001be8c:	5b                   	pop    ebx
c001be8d:	5e                   	pop    esi
c001be8e:	5f                   	pop    edi
c001be8f:	5d                   	pop    ebp
c001be90:	eb 92                	jmp    c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be92:	0f b6 cb             	movzx  ecx,bl
c001be95:	83 f9 07             	cmp    ecx,0x7
c001be98:	77 12                	ja     c001beac <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001be9a:	0f b6 d2             	movzx  edx,dl
c001be9d:	0f b6 db             	movzx  ebx,bl
c001bea0:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001bea8:	01 da                	add    edx,ebx
c001beaa:	eb 2f                	jmp    c001bedb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001beac:	83 f9 0d             	cmp    ecx,0xd
c001beaf:	77 13                	ja     c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001beb1:	0f b6 d2             	movzx  edx,dl
c001beb4:	0f b6 db             	movzx  ebx,bl
c001beb7:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bebe:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bec2:	eb 17                	jmp    c001bedb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bec4:	83 f9 15             	cmp    ecx,0x15
c001bec7:	77 13                	ja     c001bedc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bec9:	0f b6 d2             	movzx  edx,dl
c001becc:	0f b6 db             	movzx  ebx,bl
c001becf:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bed7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bedb:	ee                   	out    dx,al
c001bedc:	83 c4 1c             	add    esp,0x1c
c001bedf:	5b                   	pop    ebx
c001bee0:	5e                   	pop    esi
c001bee1:	5f                   	pop    edi
c001bee2:	5d                   	pop    ebp
c001bee3:	c3                   	ret    

c001bee4 <IDE::read(unsigned char, unsigned char)>:
c001bee4:	57                   	push   edi
c001bee5:	56                   	push   esi
c001bee6:	53                   	push   ebx
c001bee7:	83 ec 10             	sub    esp,0x10
c001beea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001beee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bef2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bef6:	8d 42 f8             	lea    eax,[edx-0x8]
c001bef9:	3c 03                	cmp    al,0x3
c001befb:	77 48                	ja     c001bf45 <IDE::read(unsigned char, unsigned char)+0x61>
c001befd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf01:	0f b6 f1             	movzx  esi,cl
c001bf04:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001bf07:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001bf0c:	0c 80                	or     al,0x80
c001bf0e:	50                   	push   eax
c001bf0f:	6a 0c                	push   0xc
c001bf11:	56                   	push   esi
c001bf12:	53                   	push   ebx
c001bf13:	e8 0c ff ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf18:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf1c:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001bf21:	0f b6 d2             	movzx  edx,dl
c001bf24:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bf28:	ec                   	in     al,dx
c001bf29:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bf2d:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001bf32:	52                   	push   edx
c001bf33:	6a 0c                	push   0xc
c001bf35:	56                   	push   esi
c001bf36:	53                   	push   ebx
c001bf37:	e8 e8 fe ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf3c:	83 c4 20             	add    esp,0x20
c001bf3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bf43:	eb 4c                	jmp    c001bf91 <IDE::read(unsigned char, unsigned char)+0xad>
c001bf45:	0f b6 f2             	movzx  esi,dl
c001bf48:	83 fe 07             	cmp    esi,0x7
c001bf4b:	77 12                	ja     c001bf5f <IDE::read(unsigned char, unsigned char)+0x7b>
c001bf4d:	0f b6 c9             	movzx  ecx,cl
c001bf50:	0f b6 d2             	movzx  edx,dl
c001bf53:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001bf5b:	01 c2                	add    edx,eax
c001bf5d:	eb 31                	jmp    c001bf90 <IDE::read(unsigned char, unsigned char)+0xac>
c001bf5f:	83 fe 0d             	cmp    esi,0xd
c001bf62:	77 13                	ja     c001bf77 <IDE::read(unsigned char, unsigned char)+0x93>
c001bf64:	0f b6 c9             	movzx  ecx,cl
c001bf67:	0f b6 d2             	movzx  edx,dl
c001bf6a:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001bf71:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf75:	eb 19                	jmp    c001bf90 <IDE::read(unsigned char, unsigned char)+0xac>
c001bf77:	31 c0                	xor    eax,eax
c001bf79:	83 fe 15             	cmp    esi,0x15
c001bf7c:	77 13                	ja     c001bf91 <IDE::read(unsigned char, unsigned char)+0xad>
c001bf7e:	0f b6 c9             	movzx  ecx,cl
c001bf81:	0f b6 d2             	movzx  edx,dl
c001bf84:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001bf8c:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf90:	ec                   	in     al,dx
c001bf91:	83 c4 10             	add    esp,0x10
c001bf94:	5b                   	pop    ebx
c001bf95:	5e                   	pop    esi
c001bf96:	5f                   	pop    edi
c001bf97:	c3                   	ret    

c001bf98 <IDE::waitInterrupt(unsigned char)>:
c001bf98:	55                   	push   ebp
c001bf99:	57                   	push   edi
c001bf9a:	56                   	push   esi
c001bf9b:	53                   	push   ebx
c001bf9c:	31 db                	xor    ebx,ebx
c001bf9e:	83 ec 0c             	sub    esp,0xc
c001bfa1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bfa5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bfaa:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bfb2:	89 e8                	mov    eax,ebp
c001bfb4:	84 c0                	test   al,al
c001bfb6:	75 30                	jne    c001bfe8 <IDE::waitInterrupt(unsigned char)+0x50>
c001bfb8:	50                   	push   eax
c001bfb9:	6a 0c                	push   0xc
c001bfbb:	56                   	push   esi
c001bfbc:	57                   	push   edi
c001bfbd:	e8 22 ff ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001bfc2:	83 c4 10             	add    esp,0x10
c001bfc5:	a8 01                	test   al,0x1
c001bfc7:	75 27                	jne    c001bff0 <IDE::waitInterrupt(unsigned char)+0x58>
c001bfc9:	f6 c3 04             	test   bl,0x4
c001bfcc:	75 12                	jne    c001bfe0 <IDE::waitInterrupt(unsigned char)+0x48>
c001bfce:	83 fb 32             	cmp    ebx,0x32
c001bfd1:	7e 0d                	jle    c001bfe0 <IDE::waitInterrupt(unsigned char)+0x48>
c001bfd3:	83 ec 0c             	sub    esp,0xc
c001bfd6:	6a 64                	push   0x64
c001bfd8:	e8 73 a4 ff ff       	call   c0016450 <milliTenthSleep(unsigned int)>
c001bfdd:	83 c4 10             	add    esp,0x10
c001bfe0:	83 fb 3c             	cmp    ebx,0x3c
c001bfe3:	74 0b                	je     c001bff0 <IDE::waitInterrupt(unsigned char)+0x58>
c001bfe5:	43                   	inc    ebx
c001bfe6:	eb c2                	jmp    c001bfaa <IDE::waitInterrupt(unsigned char)+0x12>
c001bfe8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bff0:	83 c4 0c             	add    esp,0xc
c001bff3:	89 e8                	mov    eax,ebp
c001bff5:	5b                   	pop    ebx
c001bff6:	5e                   	pop    esi
c001bff7:	5f                   	pop    edi
c001bff8:	5d                   	pop    ebp
c001bff9:	c3                   	ret    

c001bffa <ideChannel0IRQHandler(regs*, void*)>:
c001bffa:	83 ec 10             	sub    esp,0x10
c001bffd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c001:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c008:	6a 07                	push   0x7
c001c00a:	6a 00                	push   0x0
c001c00c:	50                   	push   eax
c001c00d:	e8 d2 fe ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c012:	83 c4 1c             	add    esp,0x1c
c001c015:	c3                   	ret    

c001c016 <ideChannel1IRQHandler(regs*, void*)>:
c001c016:	83 ec 10             	sub    esp,0x10
c001c019:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c01d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c024:	6a 07                	push   0x7
c001c026:	6a 01                	push   0x1
c001c028:	50                   	push   eax
c001c029:	e8 b6 fe ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c02e:	83 c4 1c             	add    esp,0x1c
c001c031:	c3                   	ret    

c001c032 <IDE::enableIRQs(unsigned char, bool)>:
c001c032:	57                   	push   edi
c001c033:	b8 02 00 00 00       	mov    eax,0x2
c001c038:	56                   	push   esi
c001c039:	53                   	push   ebx
c001c03a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c03f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c043:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c047:	74 02                	je     c001c04b <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c049:	31 c0                	xor    eax,eax
c001c04b:	0f b6 db             	movzx  ebx,bl
c001c04e:	bf 04 00 00 00       	mov    edi,0x4
c001c053:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c05a:	50                   	push   eax
c001c05b:	6a 0c                	push   0xc
c001c05d:	53                   	push   ebx
c001c05e:	56                   	push   esi
c001c05f:	e8 c0 fd ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c064:	83 c4 10             	add    esp,0x10
c001c067:	50                   	push   eax
c001c068:	6a 0c                	push   0xc
c001c06a:	53                   	push   ebx
c001c06b:	56                   	push   esi
c001c06c:	e8 73 fe ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c071:	83 c4 10             	add    esp,0x10
c001c074:	4f                   	dec    edi
c001c075:	75 f0                	jne    c001c067 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c077:	5b                   	pop    ebx
c001c078:	5e                   	pop    esi
c001c079:	5f                   	pop    edi
c001c07a:	c3                   	ret    
c001c07b:	90                   	nop

c001c07c <IDE::open(int, int, void*)>:
c001c07c:	55                   	push   ebp
c001c07d:	57                   	push   edi
c001c07e:	56                   	push   esi
c001c07f:	53                   	push   ebx
c001c080:	83 ec 1c             	sub    esp,0x1c
c001c083:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c087:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c08e:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c097:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c0a0:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c0a7:	0f 85 da 02 00 00    	jne    c001c387 <IDE::open(int, int, void*)+0x30b>
c001c0ad:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c0b3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c0b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0bb:	83 e0 7f             	and    eax,0x7f
c001c0be:	83 f8 05             	cmp    eax,0x5
c001c0c1:	74 05                	je     c001c0c8 <IDE::open(int, int, void*)+0x4c>
c001c0c3:	83 f8 0f             	cmp    eax,0xf
c001c0c6:	75 32                	jne    c001c0fa <IDE::open(int, int, void*)+0x7e>
c001c0c8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c0ce:	83 e0 fc             	and    eax,0xfffffffc
c001c0d1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c0d8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c0de:	83 e0 fc             	and    eax,0xfffffffc
c001c0e1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c0e8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c0ee:	83 e0 fc             	and    eax,0xfffffffc
c001c0f1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c0f8:	eb 14                	jmp    c001c10e <IDE::open(int, int, void*)+0x92>
c001c0fa:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c104:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c10e:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001c115:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c11a:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c121:	89 fa                	mov    edx,edi
c001c123:	89 f1                	mov    ecx,esi
c001c125:	c1 e1 10             	shl    ecx,0x10
c001c128:	89 e8                	mov    eax,ebp
c001c12a:	c1 e0 0b             	shl    eax,0xb
c001c12d:	09 c1                	or     ecx,eax
c001c12f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c136:	c1 e0 08             	shl    eax,0x8
c001c139:	09 c1                	or     ecx,eax
c001c13b:	89 c8                	mov    eax,ecx
c001c13d:	0d 08 00 00 80       	or     eax,0x80000008
c001c142:	ef                   	out    dx,eax
c001c143:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c148:	ed                   	in     eax,dx
c001c149:	c1 e8 10             	shr    eax,0x10
c001c14c:	3d ff ff 00 00       	cmp    eax,0xffff
c001c151:	0f 84 f9 00 00 00    	je     c001c250 <IDE::open(int, int, void*)+0x1d4>
c001c157:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c15d:	89 fa                	mov    edx,edi
c001c15f:	89 c8                	mov    eax,ecx
c001c161:	ef                   	out    dx,eax
c001c162:	b0 fe                	mov    al,0xfe
c001c164:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c169:	ee                   	out    dx,al
c001c16a:	89 c8                	mov    eax,ecx
c001c16c:	89 fa                	mov    edx,edi
c001c16e:	ef                   	out    dx,eax
c001c16f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c174:	ed                   	in     eax,dx
c001c175:	3c fe                	cmp    al,0xfe
c001c177:	0f 85 a4 00 00 00    	jne    c001c221 <IDE::open(int, int, void*)+0x1a5>
c001c17d:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c183:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c18a:	74 30                	je     c001c1bc <IDE::open(int, int, void*)+0x140>
c001c18c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c192:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c196:	83 ec 0c             	sub    esp,0xc
c001c199:	40                   	inc    eax
c001c19a:	0f b6 c0             	movzx  eax,al
c001c19d:	50                   	push   eax
c001c19e:	55                   	push   ebp
c001c19f:	56                   	push   esi
c001c1a0:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c1a6:	51                   	push   ecx
c001c1a7:	e8 30 38 ff ff       	call   c000f9dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c1ac:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c1b1:	83 c4 1c             	add    esp,0x1c
c001c1b4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c1ba:	eb 0a                	jmp    c001c1c6 <IDE::open(int, int, void*)+0x14a>
c001c1bc:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c1c6:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c1cd:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c1d2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c1d9:	89 ea                	mov    edx,ebp
c001c1db:	c1 e1 10             	shl    ecx,0x10
c001c1de:	c1 e0 08             	shl    eax,0x8
c001c1e1:	09 c1                	or     ecx,eax
c001c1e3:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c1ea:	c1 e0 0b             	shl    eax,0xb
c001c1ed:	09 c1                	or     ecx,eax
c001c1ef:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c1f5:	89 c8                	mov    eax,ecx
c001c1f7:	ef                   	out    dx,eax
c001c1f8:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c1fe:	be fc 0c 00 00       	mov    esi,0xcfc
c001c203:	89 f2                	mov    edx,esi
c001c205:	89 f8                	mov    eax,edi
c001c207:	ee                   	out    dx,al
c001c208:	89 c8                	mov    eax,ecx
c001c20a:	89 ea                	mov    edx,ebp
c001c20c:	ef                   	out    dx,eax
c001c20d:	89 f2                	mov    edx,esi
c001c20f:	ed                   	in     eax,dx
c001c210:	0f b6 c0             	movzx  eax,al
c001c213:	39 f8                	cmp    eax,edi
c001c215:	74 49                	je     c001c260 <IDE::open(int, int, void*)+0x1e4>
c001c217:	83 ec 0c             	sub    esp,0xc
c001c21a:	68 5c 33 02 c0       	push   0xc002335c
c001c21f:	eb 37                	jmp    c001c258 <IDE::open(int, int, void*)+0x1dc>
c001c221:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c22a:	75 1a                	jne    c001c246 <IDE::open(int, int, void*)+0x1ca>
c001c22c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c231:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c236:	74 05                	je     c001c23d <IDE::open(int, int, void*)+0x1c1>
c001c238:	83 c0 80             	add    eax,0xffffff80
c001c23b:	75 09                	jne    c001c246 <IDE::open(int, int, void*)+0x1ca>
c001c23d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c244:	eb 1a                	jmp    c001c260 <IDE::open(int, int, void*)+0x1e4>
c001c246:	83 ec 0c             	sub    esp,0xc
c001c249:	68 64 33 02 c0       	push   0xc0023364
c001c24e:	eb 08                	jmp    c001c258 <IDE::open(int, int, void*)+0x1dc>
c001c250:	83 ec 0c             	sub    esp,0xc
c001c253:	68 95 33 02 c0       	push   0xc0023395
c001c258:	e8 aa 53 ff ff       	call   c0011607 <KePanic(char const*)>
c001c25d:	83 c4 10             	add    esp,0x10
c001c260:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c267:	74 1a                	je     c001c283 <IDE::open(int, int, void*)+0x207>
c001c269:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c26f:	83 e0 fc             	and    eax,0xfffffffc
c001c272:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c279:	83 c0 08             	add    eax,0x8
c001c27c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c283:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c289:	89 c2                	mov    edx,eax
c001c28b:	83 e2 0f             	and    edx,0xf
c001c28e:	83 fa 08             	cmp    edx,0x8
c001c291:	75 0a                	jne    c001c29d <IDE::open(int, int, void*)+0x221>
c001c293:	83 e8 02             	sub    eax,0x2
c001c296:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c29d:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c2a3:	89 c2                	mov    edx,eax
c001c2a5:	83 e2 0f             	and    edx,0xf
c001c2a8:	83 fa 08             	cmp    edx,0x8
c001c2ab:	75 0a                	jne    c001c2b7 <IDE::open(int, int, void*)+0x23b>
c001c2ad:	83 e8 02             	sub    eax,0x2
c001c2b0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c2b7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c2be:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c2c5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2c8:	89 d0                	mov    eax,edx
c001c2ca:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2ce:	8d 7a 01             	lea    edi,[edx+0x1]
c001c2d1:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c2d5:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c2d9:	83 e1 3f             	and    ecx,0x3f
c001c2dc:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c2e0:	89 f9                	mov    ecx,edi
c001c2e2:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c2e9:	8d 78 02             	lea    edi,[eax+0x2]
c001c2ec:	0f b6 c9             	movzx  ecx,cl
c001c2ef:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c2f2:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c2f6:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c2fa:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c2fe:	83 e2 3f             	and    edx,0x3f
c001c301:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c305:	89 f9                	mov    ecx,edi
c001c307:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c30d:	8d 78 03             	lea    edi,[eax+0x3]
c001c310:	0f b6 d1             	movzx  edx,cl
c001c313:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c316:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c31a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c31e:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c322:	83 e1 3f             	and    ecx,0x3f
c001c325:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c329:	89 f9                	mov    ecx,edi
c001c32b:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c331:	8d 78 04             	lea    edi,[eax+0x4]
c001c334:	0f b6 c9             	movzx  ecx,cl
c001c337:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c33a:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c33e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c342:	89 fa                	mov    edx,edi
c001c344:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c34a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c34e:	83 e2 3f             	and    edx,0x3f
c001c351:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c355:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c35c:	66 85 f6             	test   si,si
c001c35f:	74 65                	je     c001c3c6 <IDE::open(int, int, void*)+0x34a>
c001c361:	89 f9                	mov    ecx,edi
c001c363:	83 c0 05             	add    eax,0x5
c001c366:	0f b6 d1             	movzx  edx,cl
c001c369:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c36c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c370:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c374:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c37a:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c37e:	83 e0 3f             	and    eax,0x3f
c001c381:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c385:	eb 3f                	jmp    c001c3c6 <IDE::open(int, int, void*)+0x34a>
c001c387:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c38e:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c394:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c39b:	05 06 02 00 00       	add    eax,0x206
c001c3a0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c3a7:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c3ae:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c3b5:	05 06 02 00 00       	add    eax,0x206
c001c3ba:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c3c1:	e9 bd fe ff ff       	jmp    c001c283 <IDE::open(int, int, void*)+0x207>
c001c3c6:	50                   	push   eax
c001c3c7:	50                   	push   eax
c001c3c8:	6a 00                	push   0x0
c001c3ca:	53                   	push   ebx
c001c3cb:	e8 2e fa ff ff       	call   c001bdfe <IDE::prepareInterrupt(unsigned char)>
c001c3d0:	5a                   	pop    edx
c001c3d1:	59                   	pop    ecx
c001c3d2:	6a 01                	push   0x1
c001c3d4:	53                   	push   ebx
c001c3d5:	e8 24 fa ff ff       	call   c001bdfe <IDE::prepareInterrupt(unsigned char)>
c001c3da:	83 c4 0c             	add    esp,0xc
c001c3dd:	6a 00                	push   0x0
c001c3df:	6a 00                	push   0x0
c001c3e1:	53                   	push   ebx
c001c3e2:	e8 4b fc ff ff       	call   c001c032 <IDE::enableIRQs(unsigned char, bool)>
c001c3e7:	83 c4 0c             	add    esp,0xc
c001c3ea:	6a 00                	push   0x0
c001c3ec:	6a 01                	push   0x1
c001c3ee:	53                   	push   ebx
c001c3ef:	e8 3e fc ff ff       	call   c001c032 <IDE::enableIRQs(unsigned char, bool)>
c001c3f4:	83 c4 10             	add    esp,0x10
c001c3f7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c3fe:	74 34                	je     c001c434 <IDE::open(int, int, void*)+0x3b8>
c001c400:	83 ec 0c             	sub    esp,0xc
c001c403:	53                   	push   ebx
c001c404:	6a 01                	push   0x1
c001c406:	68 fa bf 01 c0       	push   0xc001bffa
c001c40b:	6a 0e                	push   0xe
c001c40d:	53                   	push   ebx
c001c40e:	e8 3d 05 ff ff       	call   c000c950 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c413:	83 c4 14             	add    esp,0x14
c001c416:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c41c:	53                   	push   ebx
c001c41d:	6a 01                	push   0x1
c001c41f:	68 16 c0 01 c0       	push   0xc001c016
c001c424:	6a 0f                	push   0xf
c001c426:	53                   	push   ebx
c001c427:	e8 24 05 ff ff       	call   c000c950 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c42c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c432:	eb 38                	jmp    c001c46c <IDE::open(int, int, void*)+0x3f0>
c001c434:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c43e:	83 ec 0c             	sub    esp,0xc
c001c441:	53                   	push   ebx
c001c442:	6a 00                	push   0x0
c001c444:	68 fa bf 01 c0       	push   0xc001bffa
c001c449:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c44f:	53                   	push   ebx
c001c450:	e8 fb 04 ff ff       	call   c000c950 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c455:	83 c4 14             	add    esp,0x14
c001c458:	53                   	push   ebx
c001c459:	6a 00                	push   0x0
c001c45b:	68 16 c0 01 c0       	push   0xc001c016
c001c460:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c466:	53                   	push   ebx
c001c467:	e8 e4 04 ff ff       	call   c000c950 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c46c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c46e:	83 c4 20             	add    esp,0x20
c001c471:	83 ec 0c             	sub    esp,0xc
c001c474:	53                   	push   ebx
c001c475:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c478:	83 c4 0c             	add    esp,0xc
c001c47b:	6a 07                	push   0x7
c001c47d:	6a 00                	push   0x0
c001c47f:	53                   	push   ebx
c001c480:	e8 5f fa ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c485:	83 c4 0c             	add    esp,0xc
c001c488:	6a 07                	push   0x7
c001c48a:	6a 01                	push   0x1
c001c48c:	53                   	push   ebx
c001c48d:	e8 52 fa ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c492:	83 c4 0c             	add    esp,0xc
c001c495:	6a 01                	push   0x1
c001c497:	6a 00                	push   0x0
c001c499:	53                   	push   ebx
c001c49a:	e8 93 fb ff ff       	call   c001c032 <IDE::enableIRQs(unsigned char, bool)>
c001c49f:	83 c4 0c             	add    esp,0xc
c001c4a2:	6a 01                	push   0x1
c001c4a4:	6a 01                	push   0x1
c001c4a6:	53                   	push   ebx
c001c4a7:	e8 86 fb ff ff       	call   c001c032 <IDE::enableIRQs(unsigned char, bool)>
c001c4ac:	83 c4 2c             	add    esp,0x2c
c001c4af:	31 c0                	xor    eax,eax
c001c4b1:	5b                   	pop    ebx
c001c4b2:	5e                   	pop    esi
c001c4b3:	5f                   	pop    edi
c001c4b4:	5d                   	pop    ebp
c001c4b5:	c3                   	ret    

c001c4b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c4b6:	55                   	push   ebp
c001c4b7:	57                   	push   edi
c001c4b8:	56                   	push   esi
c001c4b9:	53                   	push   ebx
c001c4ba:	83 ec 1c             	sub    esp,0x1c
c001c4bd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c4c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c4c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c4c9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c4cd:	8d 42 f8             	lea    eax,[edx-0x8]
c001c4d0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c4d4:	3c 03                	cmp    al,0x3
c001c4d6:	77 5a                	ja     c001c532 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c4d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c4dc:	0f b6 db             	movzx  ebx,bl
c001c4df:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c4e3:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c4e6:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c4eb:	0c 80                	or     al,0x80
c001c4ed:	50                   	push   eax
c001c4ee:	6a 0c                	push   0xc
c001c4f0:	53                   	push   ebx
c001c4f1:	56                   	push   esi
c001c4f2:	e8 2d f9 ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4fb:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c500:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c504:	0f b6 d2             	movzx  edx,dl
c001c507:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c50b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c50d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c512:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c516:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c51a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c522:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c526:	83 c4 2c             	add    esp,0x2c
c001c529:	5b                   	pop    ebx
c001c52a:	5e                   	pop    esi
c001c52b:	5f                   	pop    edi
c001c52c:	5d                   	pop    ebp
c001c52d:	e9 f2 f8 ff ff       	jmp    c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c532:	0f b6 c2             	movzx  eax,dl
c001c535:	83 f8 07             	cmp    eax,0x7
c001c538:	77 12                	ja     c001c54c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c53a:	0f b6 db             	movzx  ebx,bl
c001c53d:	0f b6 c2             	movzx  eax,dl
c001c540:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c548:	01 c2                	add    edx,eax
c001c54a:	eb 2f                	jmp    c001c57b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c54c:	83 f8 0d             	cmp    eax,0xd
c001c54f:	77 13                	ja     c001c564 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c551:	0f b6 db             	movzx  ebx,bl
c001c554:	0f b6 d2             	movzx  edx,dl
c001c557:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c55e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c562:	eb 17                	jmp    c001c57b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c564:	83 f8 15             	cmp    eax,0x15
c001c567:	77 14                	ja     c001c57d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c569:	0f b6 db             	movzx  ebx,bl
c001c56c:	0f b6 d2             	movzx  edx,dl
c001c56f:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c577:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c57b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c57d:	83 c4 1c             	add    esp,0x1c
c001c580:	5b                   	pop    ebx
c001c581:	5e                   	pop    esi
c001c582:	5f                   	pop    edi
c001c583:	5d                   	pop    ebp
c001c584:	c3                   	ret    
c001c585:	90                   	nop

c001c586 <IDE::detect()>:
c001c586:	55                   	push   ebp
c001c587:	57                   	push   edi
c001c588:	56                   	push   esi
c001c589:	53                   	push   ebx
c001c58a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c590:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c597:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c59e:	0f 85 9e 02 00 00    	jne    c001c842 <IDE::detect()+0x2bc>
c001c5a4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c5ab:	31 f6                	xor    esi,esi
c001c5ad:	31 ff                	xor    edi,edi
c001c5af:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c5b7:	89 f8                	mov    eax,edi
c001c5b9:	c1 e0 06             	shl    eax,0x6
c001c5bc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c5c4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c5c8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c5cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d0:	c1 e0 04             	shl    eax,0x4
c001c5d3:	83 c8 a0             	or     eax,0xffffffa0
c001c5d6:	0f b6 c0             	movzx  eax,al
c001c5d9:	50                   	push   eax
c001c5da:	6a 06                	push   0x6
c001c5dc:	56                   	push   esi
c001c5dd:	53                   	push   ebx
c001c5de:	e8 41 f8 ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5e3:	83 c4 0c             	add    esp,0xc
c001c5e6:	6a 0c                	push   0xc
c001c5e8:	56                   	push   esi
c001c5e9:	53                   	push   ebx
c001c5ea:	e8 f5 f8 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c5ef:	83 c4 0c             	add    esp,0xc
c001c5f2:	6a 0c                	push   0xc
c001c5f4:	56                   	push   esi
c001c5f5:	53                   	push   ebx
c001c5f6:	e8 e9 f8 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c5fb:	83 c4 0c             	add    esp,0xc
c001c5fe:	6a 0c                	push   0xc
c001c600:	56                   	push   esi
c001c601:	53                   	push   ebx
c001c602:	e8 dd f8 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c607:	83 c4 0c             	add    esp,0xc
c001c60a:	6a 0c                	push   0xc
c001c60c:	56                   	push   esi
c001c60d:	53                   	push   ebx
c001c60e:	e8 d1 f8 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c613:	68 ec 00 00 00       	push   0xec
c001c618:	6a 07                	push   0x7
c001c61a:	56                   	push   esi
c001c61b:	53                   	push   ebx
c001c61c:	e8 03 f8 ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c621:	83 c4 1c             	add    esp,0x1c
c001c624:	6a 0c                	push   0xc
c001c626:	56                   	push   esi
c001c627:	53                   	push   ebx
c001c628:	e8 b7 f8 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c62d:	83 c4 0c             	add    esp,0xc
c001c630:	6a 0c                	push   0xc
c001c632:	56                   	push   esi
c001c633:	53                   	push   ebx
c001c634:	e8 ab f8 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c639:	83 c4 0c             	add    esp,0xc
c001c63c:	6a 0c                	push   0xc
c001c63e:	56                   	push   esi
c001c63f:	53                   	push   ebx
c001c640:	e8 9f f8 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c645:	83 c4 0c             	add    esp,0xc
c001c648:	6a 0c                	push   0xc
c001c64a:	56                   	push   esi
c001c64b:	53                   	push   ebx
c001c64c:	e8 93 f8 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c651:	83 c4 0c             	add    esp,0xc
c001c654:	6a 0c                	push   0xc
c001c656:	56                   	push   esi
c001c657:	53                   	push   ebx
c001c658:	e8 87 f8 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c65d:	83 c4 10             	add    esp,0x10
c001c660:	84 c0                	test   al,al
c001c662:	0f 84 61 01 00 00    	je     c001c7c9 <IDE::detect()+0x243>
c001c668:	31 ed                	xor    ebp,ebp
c001c66a:	50                   	push   eax
c001c66b:	6a 0c                	push   0xc
c001c66d:	56                   	push   esi
c001c66e:	53                   	push   ebx
c001c66f:	e8 70 f8 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c674:	83 c4 10             	add    esp,0x10
c001c677:	a8 01                	test   al,0x1
c001c679:	0f 85 6b 01 00 00    	jne    c001c7ea <IDE::detect()+0x264>
c001c67f:	a8 80                	test   al,0x80
c001c681:	75 04                	jne    c001c687 <IDE::detect()+0x101>
c001c683:	a8 08                	test   al,0x8
c001c685:	75 23                	jne    c001c6aa <IDE::detect()+0x124>
c001c687:	45                   	inc    ebp
c001c688:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c68e:	7e da                	jle    c001c66a <IDE::detect()+0xe4>
c001c690:	83 ec 0c             	sub    esp,0xc
c001c693:	6a 32                	push   0x32
c001c695:	e8 b6 9d ff ff       	call   c0016450 <milliTenthSleep(unsigned int)>
c001c69a:	83 c4 10             	add    esp,0x10
c001c69d:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c6a3:	75 c5                	jne    c001c66a <IDE::detect()+0xe4>
c001c6a5:	e9 40 01 00 00       	jmp    c001c7ea <IDE::detect()+0x264>
c001c6aa:	31 c9                	xor    ecx,ecx
c001c6ac:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c6b0:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c6b4:	83 ec 0c             	sub    esp,0xc
c001c6b7:	68 80 00 00 00       	push   0x80
c001c6bc:	55                   	push   ebp
c001c6bd:	6a 00                	push   0x0
c001c6bf:	56                   	push   esi
c001c6c0:	53                   	push   ebx
c001c6c1:	e8 f0 fd ff ff       	call   c001c4b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c6c6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c6cb:	89 f8                	mov    eax,edi
c001c6cd:	c1 e0 06             	shl    eax,0x6
c001c6d0:	01 d8                	add    eax,ebx
c001c6d2:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c6d9:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c6e0:	89 d1                	mov    ecx,edx
c001c6e2:	89 f2                	mov    edx,esi
c001c6e4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c6ea:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c6ee:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c6f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c6f8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c6ff:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c707:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c70e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c716:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c71c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c723:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c729:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c72d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c731:	83 c4 20             	add    esp,0x20
c001c734:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c737:	83 c5 02             	add    ebp,0x2
c001c73a:	83 c0 02             	add    eax,0x2
c001c73d:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c743:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c746:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c74c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c750:	75 e2                	jne    c001c734 <IDE::detect()+0x1ae>
c001c752:	89 f8                	mov    eax,edi
c001c754:	c1 e0 06             	shl    eax,0x6
c001c757:	01 d8                	add    eax,ebx
c001c759:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c760:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c767:	c1 ea 09             	shr    edx,0x9
c001c76a:	83 e2 01             	and    edx,0x1
c001c76d:	80 e1 01             	and    cl,0x1
c001c770:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c776:	75 22                	jne    c001c79a <IDE::detect()+0x214>
c001c778:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c77f:	74 47                	je     c001c7c8 <IDE::detect()+0x242>
c001c781:	83 ec 0c             	sub    esp,0xc
c001c784:	68 7c 01 00 00       	push   0x17c
c001c789:	e8 49 b3 fe ff       	call   c0007ad7 <malloc>
c001c78e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c791:	89 c5                	mov    ebp,eax
c001c793:	e8 16 05 00 00       	call   c001ccae <ATA::ATA()>
c001c798:	eb 17                	jmp    c001c7b1 <IDE::detect()+0x22b>
c001c79a:	83 ec 0c             	sub    esp,0xc
c001c79d:	68 84 01 00 00       	push   0x184
c001c7a2:	e8 30 b3 fe ff       	call   c0007ad7 <malloc>
c001c7a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7aa:	89 c5                	mov    ebp,eax
c001c7ac:	e8 6f 0e 00 00       	call   c001d620 <ATAPI::ATAPI()>
c001c7b1:	5a                   	pop    edx
c001c7b2:	59                   	pop    ecx
c001c7b3:	55                   	push   ebp
c001c7b4:	53                   	push   ebx
c001c7b5:	e8 ea 01 ff ff       	call   c000c9a4 <Device::addChild(Device*)>
c001c7ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c7bd:	53                   	push   ebx
c001c7be:	57                   	push   edi
c001c7bf:	6a 00                	push   0x0
c001c7c1:	55                   	push   ebp
c001c7c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c7c5:	83 c4 20             	add    esp,0x20
c001c7c8:	47                   	inc    edi
c001c7c9:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c7ce:	74 0d                	je     c001c7dd <IDE::detect()+0x257>
c001c7d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c7d8:	e9 da fd ff ff       	jmp    c001c5b7 <IDE::detect()+0x31>
c001c7dd:	4e                   	dec    esi
c001c7de:	74 62                	je     c001c842 <IDE::detect()+0x2bc>
c001c7e0:	be 01 00 00 00       	mov    esi,0x1
c001c7e5:	e9 c5 fd ff ff       	jmp    c001c5af <IDE::detect()+0x29>
c001c7ea:	50                   	push   eax
c001c7eb:	6a 04                	push   0x4
c001c7ed:	56                   	push   esi
c001c7ee:	53                   	push   ebx
c001c7ef:	e8 f0 f6 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c7f4:	83 c4 0c             	add    esp,0xc
c001c7f7:	6a 05                	push   0x5
c001c7f9:	56                   	push   esi
c001c7fa:	53                   	push   ebx
c001c7fb:	89 c5                	mov    ebp,eax
c001c7fd:	e8 e2 f6 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c802:	89 e9                	mov    ecx,ebp
c001c804:	83 c4 10             	add    esp,0x10
c001c807:	0f b6 e9             	movzx  ebp,cl
c001c80a:	83 fd 14             	cmp    ebp,0x14
c001c80d:	74 2d                	je     c001c83c <IDE::detect()+0x2b6>
c001c80f:	83 fd 69             	cmp    ebp,0x69
c001c812:	75 b5                	jne    c001c7c9 <IDE::detect()+0x243>
c001c814:	3c 96                	cmp    al,0x96
c001c816:	75 b1                	jne    c001c7c9 <IDE::detect()+0x243>
c001c818:	68 a1 00 00 00       	push   0xa1
c001c81d:	6a 07                	push   0x7
c001c81f:	56                   	push   esi
c001c820:	53                   	push   ebx
c001c821:	e8 fe f5 ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c826:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c82d:	e8 1e 9c ff ff       	call   c0016450 <milliTenthSleep(unsigned int)>
c001c832:	83 c4 10             	add    esp,0x10
c001c835:	b1 01                	mov    cl,0x1
c001c837:	e9 70 fe ff ff       	jmp    c001c6ac <IDE::detect()+0x126>
c001c83c:	3c eb                	cmp    al,0xeb
c001c83e:	75 cf                	jne    c001c80f <IDE::detect()+0x289>
c001c840:	eb d6                	jmp    c001c818 <IDE::detect()+0x292>
c001c842:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c848:	5b                   	pop    ebx
c001c849:	5e                   	pop    esi
c001c84a:	5f                   	pop    edi
c001c84b:	5d                   	pop    ebp
c001c84c:	c3                   	ret    
c001c84d:	90                   	nop

c001c84e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c84e:	55                   	push   ebp
c001c84f:	57                   	push   edi
c001c850:	56                   	push   esi
c001c851:	53                   	push   ebx
c001c852:	83 ec 1c             	sub    esp,0x1c
c001c855:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c859:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c85d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c861:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c865:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c869:	88 c3                	mov    bl,al
c001c86b:	25 ff 00 00 00       	and    eax,0xff
c001c870:	0f 84 88 00 00 00    	je     c001c8fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c876:	83 ec 0c             	sub    esp,0xc
c001c879:	89 c7                	mov    edi,eax
c001c87b:	68 bf 33 02 c0       	push   0xc00233bf
c001c880:	e8 89 e0 fe ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001c885:	83 c4 10             	add    esp,0x10
c001c888:	83 ff 01             	cmp    edi,0x1
c001c88b:	74 6b                	je     c001c8f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c88d:	83 ff 02             	cmp    edi,0x2
c001c890:	75 58                	jne    c001c8ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c892:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c897:	50                   	push   eax
c001c898:	6a 01                	push   0x1
c001c89a:	01 ff                	add    edi,edi
c001c89c:	09 fe                	or     esi,edi
c001c89e:	89 f0                	mov    eax,esi
c001c8a0:	0f b6 f0             	movzx  esi,al
c001c8a3:	c1 e6 06             	shl    esi,0x6
c001c8a6:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c8ae:	50                   	push   eax
c001c8af:	55                   	push   ebp
c001c8b0:	e8 2f f6 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c8b5:	83 c4 10             	add    esp,0x10
c001c8b8:	a8 01                	test   al,0x1
c001c8ba:	74 02                	je     c001c8be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c8bc:	b3 07                	mov    bl,0x7
c001c8be:	a8 02                	test   al,0x2
c001c8c0:	74 02                	je     c001c8c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c8c2:	b3 03                	mov    bl,0x3
c001c8c4:	a8 04                	test   al,0x4
c001c8c6:	74 02                	je     c001c8ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c8c8:	b3 14                	mov    bl,0x14
c001c8ca:	a8 08                	test   al,0x8
c001c8cc:	74 02                	je     c001c8d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c8ce:	b3 03                	mov    bl,0x3
c001c8d0:	a8 10                	test   al,0x10
c001c8d2:	74 02                	je     c001c8d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c8d4:	b3 15                	mov    bl,0x15
c001c8d6:	a8 20                	test   al,0x20
c001c8d8:	74 02                	je     c001c8dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c8da:	b3 03                	mov    bl,0x3
c001c8dc:	a8 40                	test   al,0x40
c001c8de:	74 02                	je     c001c8e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c8e0:	b3 16                	mov    bl,0x16
c001c8e2:	a8 80                	test   al,0x80
c001c8e4:	74 18                	je     c001c8fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8e6:	b3 0d                	mov    bl,0xd
c001c8e8:	eb 14                	jmp    c001c8fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8ea:	83 ff 03             	cmp    edi,0x3
c001c8ed:	74 0d                	je     c001c8fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c8ef:	83 ff 04             	cmp    edi,0x4
c001c8f2:	75 0a                	jne    c001c8fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8f4:	b3 08                	mov    bl,0x8
c001c8f6:	eb 06                	jmp    c001c8fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8f8:	b3 13                	mov    bl,0x13
c001c8fa:	eb 02                	jmp    c001c8fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8fc:	b3 17                	mov    bl,0x17
c001c8fe:	83 c4 1c             	add    esp,0x1c
c001c901:	88 d8                	mov    al,bl
c001c903:	5b                   	pop    ebx
c001c904:	5e                   	pop    esi
c001c905:	5f                   	pop    edi
c001c906:	5d                   	pop    ebp
c001c907:	c3                   	ret    

c001c908 <IDE::polling(unsigned char, unsigned int)>:
c001c908:	57                   	push   edi
c001c909:	56                   	push   esi
c001c90a:	53                   	push   ebx
c001c90b:	bb 04 00 00 00       	mov    ebx,0x4
c001c910:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c914:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c919:	52                   	push   edx
c001c91a:	6a 0c                	push   0xc
c001c91c:	56                   	push   esi
c001c91d:	57                   	push   edi
c001c91e:	e8 c1 f5 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c923:	83 c4 10             	add    esp,0x10
c001c926:	4b                   	dec    ebx
c001c927:	75 f0                	jne    c001c919 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c929:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c92e:	50                   	push   eax
c001c92f:	6a 0c                	push   0xc
c001c931:	56                   	push   esi
c001c932:	57                   	push   edi
c001c933:	e8 ac f5 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001c938:	83 c4 10             	add    esp,0x10
c001c93b:	a8 01                	test   al,0x1
c001c93d:	75 17                	jne    c001c956 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c93f:	a8 20                	test   al,0x20
c001c941:	75 0f                	jne    c001c952 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c943:	4b                   	dec    ebx
c001c944:	74 10                	je     c001c956 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c946:	a8 80                	test   al,0x80
c001c948:	75 e4                	jne    c001c92e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c94a:	a8 08                	test   al,0x8
c001c94c:	74 e0                	je     c001c92e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c94e:	31 c0                	xor    eax,eax
c001c950:	eb 06                	jmp    c001c958 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c952:	b0 01                	mov    al,0x1
c001c954:	eb 02                	jmp    c001c958 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c956:	b0 02                	mov    al,0x2
c001c958:	5b                   	pop    ebx
c001c959:	5e                   	pop    esi
c001c95a:	5f                   	pop    edi
c001c95b:	c3                   	ret    

c001c95c <SATABus::close(int, int, void*)>:
c001c95c:	31 c0                	xor    eax,eax
c001c95e:	c3                   	ret    
c001c95f:	90                   	nop

c001c960 <SATABus::detect()>:
c001c960:	c3                   	ret    
c001c961:	90                   	nop

c001c962 <SATABus::SATABus()>:
c001c962:	83 ec 0c             	sub    esp,0xc
c001c965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c969:	83 ec 08             	sub    esp,0x8
c001c96c:	68 f8 33 02 c0       	push   0xc00233f8
c001c971:	50                   	push   eax
c001c972:	e8 85 03 ff ff       	call   c000ccfc <HardDiskController::HardDiskController(char const*)>
c001c977:	83 c4 10             	add    esp,0x10
c001c97a:	ba 24 34 02 c0       	mov    edx,0xc0023424
c001c97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c983:	89 10                	mov    DWORD PTR [eax],edx
c001c985:	83 ec 0c             	sub    esp,0xc
c001c988:	6a 50                	push   0x50
c001c98a:	e8 26 b5 fe ff       	call   c0007eb5 <Phys::allocateContiguousPages(int)>
c001c98f:	83 c4 10             	add    esp,0x10
c001c992:	89 c2                	mov    edx,eax
c001c994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c998:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c99e:	83 ec 0c             	sub    esp,0xc
c001c9a1:	6a 50                	push   0x50
c001c9a3:	e8 51 cc fe ff       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c001c9a8:	83 c4 10             	add    esp,0x10
c001c9ab:	89 c2                	mov    edx,eax
c001c9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c9b7:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c9bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9c0:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c9c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9ca:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c9d0:	83 ec 0c             	sub    esp,0xc
c001c9d3:	6a 03                	push   0x3
c001c9d5:	6a 50                	push   0x50
c001c9d7:	51                   	push   ecx
c001c9d8:	52                   	push   edx
c001c9d9:	50                   	push   eax
c001c9da:	e8 2d d5 fe ff       	call   c0009f0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c9df:	83 c4 20             	add    esp,0x20
c001c9e2:	90                   	nop
c001c9e3:	83 c4 0c             	add    esp,0xc
c001c9e6:	c3                   	ret    
c001c9e7:	90                   	nop

c001c9e8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c9e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9ec:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c9ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c9f2:	09 c2                	or     edx,eax
c001c9f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c9fe:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ca00:	31 c0                	xor    eax,eax
c001ca02:	c1 e9 08             	shr    ecx,0x8
c001ca05:	83 e1 0f             	and    ecx,0xf
c001ca08:	39 c8                	cmp    eax,ecx
c001ca0a:	74 0a                	je     c001ca16 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ca0c:	f6 c2 01             	test   dl,0x1
c001ca0f:	74 08                	je     c001ca19 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ca11:	d1 ea                	shr    edx,1
c001ca13:	40                   	inc    eax
c001ca14:	eb f2                	jmp    c001ca08 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ca16:	83 c8 ff             	or     eax,0xffffffff
c001ca19:	c3                   	ret    

c001ca1a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ca1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca1e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ca21:	89 c2                	mov    edx,eax
c001ca23:	c1 ea 08             	shr    edx,0x8
c001ca26:	83 e2 0f             	and    edx,0xf
c001ca29:	4a                   	dec    edx
c001ca2a:	75 32                	jne    c001ca5e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca2c:	83 e0 0f             	and    eax,0xf
c001ca2f:	83 f8 03             	cmp    eax,0x3
c001ca32:	75 2a                	jne    c001ca5e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca34:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ca37:	b8 02 00 00 00       	mov    eax,0x2
c001ca3c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ca42:	74 1c                	je     c001ca60 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca44:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ca4a:	b8 04 00 00 00       	mov    eax,0x4
c001ca4f:	74 0f                	je     c001ca60 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca51:	31 c0                	xor    eax,eax
c001ca53:	83 fa 03             	cmp    edx,0x3
c001ca56:	0f 94 c0             	sete   al
c001ca59:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ca5d:	c3                   	ret    
c001ca5e:	31 c0                	xor    eax,eax
c001ca60:	c3                   	ret    
c001ca61:	90                   	nop

c001ca62 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca66:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca69:	0f ba e2 0f          	bt     edx,0xf
c001ca6d:	72 f7                	jb     c001ca66 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ca6f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca72:	83 ca 10             	or     edx,0x10
c001ca75:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca78:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca7b:	83 ca 01             	or     edx,0x1
c001ca7e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca81:	c3                   	ret    

c001ca82 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca86:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca89:	83 e2 fe             	and    edx,0xfffffffe
c001ca8c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca8f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca92:	83 e2 ef             	and    edx,0xffffffef
c001ca95:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca98:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca9b:	0f ba e2 0e          	bt     edx,0xe
c001ca9f:	72 f7                	jb     c001ca98 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001caa1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caa4:	0f ba e2 0f          	bt     edx,0xf
c001caa8:	72 ee                	jb     c001ca98 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001caaa:	c3                   	ret    
c001caab:	90                   	nop

c001caac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001caac:	55                   	push   ebp
c001caad:	57                   	push   edi
c001caae:	56                   	push   esi
c001caaf:	53                   	push   ebx
c001cab0:	83 ec 1c             	sub    esp,0x1c
c001cab3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cab7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cabb:	53                   	push   ebx
c001cabc:	57                   	push   edi
c001cabd:	e8 c0 ff ff ff       	call   c001ca82 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cac2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001cac6:	83 ec 0c             	sub    esp,0xc
c001cac9:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cacf:	c1 e5 0a             	shl    ebp,0xa
c001cad2:	01 e8                	add    eax,ebp
c001cad4:	89 03                	mov    DWORD PTR [ebx],eax
c001cad6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cad8:	68 00 04 00 00       	push   0x400
c001cadd:	6a 00                	push   0x0
c001cadf:	50                   	push   eax
c001cae0:	e8 0b 3a fe ff       	call   c00004f0 <memset>
c001cae5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001caeb:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001caef:	83 c4 1c             	add    esp,0x1c
c001caf2:	01 e8                	add    eax,ebp
c001caf4:	89 03                	mov    DWORD PTR [ebx],eax
c001caf6:	c1 e6 08             	shl    esi,0x8
c001caf9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb00:	81 c6 00 80 00 00    	add    esi,0x8000
c001cb06:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cb0c:	01 f0                	add    eax,esi
c001cb0e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb11:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb14:	68 00 01 00 00       	push   0x100
c001cb19:	6a 00                	push   0x0
c001cb1b:	50                   	push   eax
c001cb1c:	e8 cf 39 fe ff       	call   c00004f0 <memset>
c001cb21:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cb27:	31 d2                	xor    edx,edx
c001cb29:	01 f0                	add    eax,esi
c001cb2b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb2e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cb35:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001cb3b:	01 ee                	add    esi,ebp
c001cb3d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001cb41:	83 c4 10             	add    esp,0x10
c001cb44:	c1 e5 0d             	shl    ebp,0xd
c001cb47:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001cb4d:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001cb53:	83 c6 20             	add    esi,0x20
c001cb56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cb5a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cb60:	01 e8                	add    eax,ebp
c001cb62:	01 d0                	add    eax,edx
c001cb64:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cb67:	52                   	push   edx
c001cb68:	68 00 01 00 00       	push   0x100
c001cb6d:	6a 00                	push   0x0
c001cb6f:	50                   	push   eax
c001cb70:	e8 7b 39 fe ff       	call   c00004f0 <memset>
c001cb75:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cb7b:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001cb82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb86:	83 c4 10             	add    esp,0x10
c001cb89:	01 e8                	add    eax,ebp
c001cb8b:	01 d0                	add    eax,edx
c001cb8d:	81 c2 00 01 00 00    	add    edx,0x100
c001cb93:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cb96:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001cb9c:	75 af                	jne    c001cb4d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001cb9e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cba5:	50                   	push   eax
c001cba6:	50                   	push   eax
c001cba7:	53                   	push   ebx
c001cba8:	57                   	push   edi
c001cba9:	e8 b4 fe ff ff       	call   c001ca62 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cbae:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cbb5:	83 c4 2c             	add    esp,0x2c
c001cbb8:	5b                   	pop    ebx
c001cbb9:	5e                   	pop    esi
c001cbba:	5f                   	pop    edi
c001cbbb:	5d                   	pop    ebp
c001cbbc:	c3                   	ret    
c001cbbd:	90                   	nop

c001cbbe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cbbe:	55                   	push   ebp
c001cbbf:	57                   	push   edi
c001cbc0:	56                   	push   esi
c001cbc1:	53                   	push   ebx
c001cbc2:	31 db                	xor    ebx,ebx
c001cbc4:	83 ec 0c             	sub    esp,0xc
c001cbc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbcb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cbcf:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cbd2:	f7 c7 01 00 00 00    	test   edi,0x1
c001cbd8:	74 7a                	je     c001cc54 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cbda:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cbde:	89 d8                	mov    eax,ebx
c001cbe0:	c1 e0 07             	shl    eax,0x7
c001cbe3:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cbea:	55                   	push   ebp
c001cbeb:	56                   	push   esi
c001cbec:	e8 29 fe ff ff       	call   c001ca1a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cbf1:	5a                   	pop    edx
c001cbf2:	59                   	pop    ecx
c001cbf3:	83 f8 01             	cmp    eax,0x1
c001cbf6:	75 21                	jne    c001cc19 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cbf8:	50                   	push   eax
c001cbf9:	53                   	push   ebx
c001cbfa:	55                   	push   ebp
c001cbfb:	56                   	push   esi
c001cbfc:	e8 ab fe ff ff       	call   c001caac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc01:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cc08:	e8 ca ae fe ff       	call   c0007ad7 <malloc>
c001cc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc10:	89 c5                	mov    ebp,eax
c001cc12:	e8 c1 10 00 00       	call   c001dcd8 <SATA::SATA()>
c001cc17:	eb 24                	jmp    c001cc3d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cc19:	83 f8 04             	cmp    eax,0x4
c001cc1c:	75 36                	jne    c001cc54 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc1e:	51                   	push   ecx
c001cc1f:	53                   	push   ebx
c001cc20:	55                   	push   ebp
c001cc21:	56                   	push   esi
c001cc22:	e8 85 fe ff ff       	call   c001caac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc27:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cc2e:	e8 a4 ae fe ff       	call   c0007ad7 <malloc>
c001cc33:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc36:	89 c5                	mov    ebp,eax
c001cc38:	e8 f5 17 00 00       	call   c001e432 <SATAPI::SATAPI()>
c001cc3d:	58                   	pop    eax
c001cc3e:	5a                   	pop    edx
c001cc3f:	55                   	push   ebp
c001cc40:	56                   	push   esi
c001cc41:	e8 5e fd fe ff       	call   c000c9a4 <Device::addChild(Device*)>
c001cc46:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cc49:	56                   	push   esi
c001cc4a:	6a 00                	push   0x0
c001cc4c:	53                   	push   ebx
c001cc4d:	55                   	push   ebp
c001cc4e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cc51:	83 c4 20             	add    esp,0x20
c001cc54:	d1 ef                	shr    edi,1
c001cc56:	43                   	inc    ebx
c001cc57:	83 fb 20             	cmp    ebx,0x20
c001cc5a:	0f 85 72 ff ff ff    	jne    c001cbd2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cc60:	83 c4 0c             	add    esp,0xc
c001cc63:	5b                   	pop    ebx
c001cc64:	5e                   	pop    esi
c001cc65:	5f                   	pop    edi
c001cc66:	5d                   	pop    ebp
c001cc67:	c3                   	ret    

c001cc68 <SATABus::open(int, int, void*)>:
c001cc68:	83 ec 14             	sub    esp,0x14
c001cc6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc6f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cc75:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cc7b:	52                   	push   edx
c001cc7c:	50                   	push   eax
c001cc7d:	e8 3c ff ff ff       	call   c001cbbe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cc82:	31 c0                	xor    eax,eax
c001cc84:	83 c4 1c             	add    esp,0x1c
c001cc87:	c3                   	ret    

c001cc88 <ATA::close(int, int, void*)>:
c001cc88:	83 ec 0c             	sub    esp,0xc
c001cc8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc95:	85 c0                	test   eax,eax
c001cc97:	74 0c                	je     c001cca5 <ATA::close(int, int, void*)+0x1d>
c001cc99:	8b 10                	mov    edx,DWORD PTR [eax]
c001cc9b:	83 ec 0c             	sub    esp,0xc
c001cc9e:	50                   	push   eax
c001cc9f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cca2:	83 c4 10             	add    esp,0x10
c001cca5:	31 c0                	xor    eax,eax
c001cca7:	83 c4 0c             	add    esp,0xc
c001ccaa:	c3                   	ret    
c001ccab:	90                   	nop

c001ccac <ATA::powerSaving(PowerSavingLevel)>:
c001ccac:	c3                   	ret    
c001ccad:	90                   	nop

c001ccae <ATA::ATA()>:
c001ccae:	83 ec 0c             	sub    esp,0xc
c001ccb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb5:	83 ec 04             	sub    esp,0x4
c001ccb8:	68 00 02 00 00       	push   0x200
c001ccbd:	68 f1 34 02 c0       	push   0xc00234f1
c001ccc2:	50                   	push   eax
c001ccc3:	e8 be 00 ff ff       	call   c000cd86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ccc8:	83 c4 10             	add    esp,0x10
c001cccb:	ba 64 34 02 c0       	mov    edx,0xc0023464
c001ccd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd4:	89 10                	mov    DWORD PTR [eax],edx
c001ccd6:	90                   	nop
c001ccd7:	83 c4 0c             	add    esp,0xc
c001ccda:	c3                   	ret    
c001ccdb:	90                   	nop

c001ccdc <ATA::flush(bool)>:
c001ccdc:	53                   	push   ebx
c001ccdd:	83 ec 08             	sub    esp,0x8
c001cce0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cce5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cce9:	83 f8 01             	cmp    eax,0x1
c001ccec:	19 c0                	sbb    eax,eax
c001ccee:	83 e0 fd             	and    eax,0xfffffffd
c001ccf1:	05 ea 00 00 00       	add    eax,0xea
c001ccf6:	50                   	push   eax
c001ccf7:	6a 07                	push   0x7
c001ccf9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd00:	50                   	push   eax
c001cd01:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd07:	e8 18 f1 ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd0c:	83 c4 0c             	add    esp,0xc
c001cd0f:	6a 00                	push   0x0
c001cd11:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd18:	50                   	push   eax
c001cd19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd1f:	e8 e4 fb ff ff       	call   c001c908 <IDE::polling(unsigned char, unsigned int)>
c001cd24:	83 c4 18             	add    esp,0x18
c001cd27:	5b                   	pop    ebx
c001cd28:	c3                   	ret    
c001cd29:	90                   	nop

c001cd2a <ATA::readyForCommand()>:
c001cd2a:	56                   	push   esi
c001cd2b:	53                   	push   ebx
c001cd2c:	53                   	push   ebx
c001cd2d:	31 db                	xor    ebx,ebx
c001cd2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd33:	51                   	push   ecx
c001cd34:	6a 0c                	push   0xc
c001cd36:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cd3d:	50                   	push   eax
c001cd3e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cd44:	e8 9b f1 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001cd49:	83 c4 10             	add    esp,0x10
c001cd4c:	a8 88                	test   al,0x88
c001cd4e:	74 1f                	je     c001cd6f <ATA::readyForCommand()+0x45>
c001cd50:	43                   	inc    ebx
c001cd51:	83 fb 63             	cmp    ebx,0x63
c001cd54:	7e dd                	jle    c001cd33 <ATA::readyForCommand()+0x9>
c001cd56:	83 ec 0c             	sub    esp,0xc
c001cd59:	6a 0a                	push   0xa
c001cd5b:	e8 f0 96 ff ff       	call   c0016450 <milliTenthSleep(unsigned int)>
c001cd60:	83 c4 10             	add    esp,0x10
c001cd63:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cd69:	75 c8                	jne    c001cd33 <ATA::readyForCommand()+0x9>
c001cd6b:	31 c0                	xor    eax,eax
c001cd6d:	eb 02                	jmp    c001cd71 <ATA::readyForCommand()+0x47>
c001cd6f:	b0 01                	mov    al,0x1
c001cd71:	5a                   	pop    edx
c001cd72:	5b                   	pop    ebx
c001cd73:	5e                   	pop    esi
c001cd74:	c3                   	ret    
c001cd75:	90                   	nop

c001cd76 <ATA::access(unsigned long long, int, void*, bool)>:
c001cd76:	55                   	push   ebp
c001cd77:	57                   	push   edi
c001cd78:	56                   	push   esi
c001cd79:	53                   	push   ebx
c001cd7a:	83 ec 2c             	sub    esp,0x2c
c001cd7d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cd81:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cd85:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cd89:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cd8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd91:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cd95:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cd99:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cd9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cda3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cda9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cdad:	c1 e0 06             	shl    eax,0x6
c001cdb0:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cdb8:	74 5b                	je     c001ce15 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001cdba:	89 fa                	mov    edx,edi
c001cdbc:	89 f0                	mov    eax,esi
c001cdbe:	c1 ea 1c             	shr    edx,0x1c
c001cdc1:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001cdc5:	89 d1                	mov    ecx,edx
c001cdc7:	09 c1                	or     ecx,eax
c001cdc9:	74 25                	je     c001cdf0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cdcb:	31 ed                	xor    ebp,ebp
c001cdcd:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cdd4:	89 fa                	mov    edx,edi
c001cdd6:	89 f0                	mov    eax,esi
c001cdd8:	0f ad d0             	shrd   eax,edx,cl
c001cddb:	d3 ea                	shr    edx,cl
c001cddd:	f6 c1 20             	test   cl,0x20
c001cde0:	74 02                	je     c001cde4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cde2:	89 d0                	mov    eax,edx
c001cde4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cde8:	45                   	inc    ebp
c001cde9:	83 fd 06             	cmp    ebp,0x6
c001cdec:	75 df                	jne    c001cdcd <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cdee:	eb 71                	jmp    c001ce61 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001cdf0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cdf5:	89 f0                	mov    eax,esi
c001cdf7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cdfe:	0f ac f8 10          	shrd   eax,edi,0x10
c001ce02:	bf 01 00 00 00       	mov    edi,0x1
c001ce07:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ce0b:	c1 ee 18             	shr    esi,0x18
c001ce0e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce13:	eb 53                	jmp    c001ce68 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ce15:	6a 00                	push   0x0
c001ce17:	6a 3f                	push   0x3f
c001ce19:	57                   	push   edi
c001ce1a:	56                   	push   esi
c001ce1b:	e8 d0 2a 00 00       	call   c001f8f0 <__umoddi3>
c001ce20:	83 c4 10             	add    esp,0x10
c001ce23:	40                   	inc    eax
c001ce24:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ce28:	6a 00                	push   0x0
c001ce2a:	68 f0 03 00 00       	push   0x3f0
c001ce2f:	57                   	push   edi
c001ce30:	56                   	push   esi
c001ce31:	e8 ba 29 00 00       	call   c001f7f0 <__udivdi3>
c001ce36:	83 c4 10             	add    esp,0x10
c001ce39:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ce3e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce45:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce4a:	6a 00                	push   0x0
c001ce4c:	6a 3f                	push   0x3f
c001ce4e:	57                   	push   edi
c001ce4f:	31 ff                	xor    edi,edi
c001ce51:	56                   	push   esi
c001ce52:	e8 99 29 00 00       	call   c001f7f0 <__udivdi3>
c001ce57:	83 c4 10             	add    esp,0x10
c001ce5a:	83 e0 0f             	and    eax,0xf
c001ce5d:	89 c6                	mov    esi,eax
c001ce5f:	eb 07                	jmp    c001ce68 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ce61:	31 f6                	xor    esi,esi
c001ce63:	bf 02 00 00 00       	mov    edi,0x2
c001ce68:	50                   	push   eax
c001ce69:	6a 00                	push   0x0
c001ce6b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce72:	50                   	push   eax
c001ce73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce77:	e8 b6 f1 ff ff       	call   c001c032 <IDE::enableIRQs(unsigned char, bool)>
c001ce7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce7f:	e8 a6 fe ff ff       	call   c001cd2a <ATA::readyForCommand()>
c001ce84:	83 c4 10             	add    esp,0x10
c001ce87:	84 c0                	test   al,al
c001ce89:	75 0a                	jne    c001ce95 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001ce8b:	be 01 00 00 00       	mov    esi,0x1
c001ce90:	e9 9b 02 00 00       	jmp    c001d130 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001ce95:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ce9b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cea1:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cea8:	c1 e0 04             	shl    eax,0x4
c001ceab:	09 c6                	or     esi,eax
c001cead:	f7 c7 03 00 00 00    	test   edi,0x3
c001ceb3:	75 05                	jne    c001ceba <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001ceb5:	83 ce a0             	or     esi,0xffffffa0
c001ceb8:	eb 03                	jmp    c001cebd <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ceba:	83 ce e0             	or     esi,0xffffffe0
c001cebd:	89 f0                	mov    eax,esi
c001cebf:	0f b6 f0             	movzx  esi,al
c001cec2:	56                   	push   esi
c001cec3:	6a 06                	push   0x6
c001cec5:	51                   	push   ecx
c001cec6:	52                   	push   edx
c001cec7:	e8 58 ef ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cecc:	83 c4 10             	add    esp,0x10
c001cecf:	6a 00                	push   0x0
c001ced1:	6a 01                	push   0x1
c001ced3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ceda:	50                   	push   eax
c001cedb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cee1:	e8 3e ef ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee6:	89 f8                	mov    eax,edi
c001cee8:	83 c4 10             	add    esp,0x10
c001ceeb:	0f b6 f0             	movzx  esi,al
c001ceee:	83 fe 02             	cmp    esi,0x2
c001cef1:	75 6e                	jne    c001cf61 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001cef3:	6a 00                	push   0x0
c001cef5:	6a 08                	push   0x8
c001cef7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cefe:	50                   	push   eax
c001ceff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf05:	e8 1a ef ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf0a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cf0f:	50                   	push   eax
c001cf10:	6a 09                	push   0x9
c001cf12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf19:	50                   	push   eax
c001cf1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf20:	e8 ff ee ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf25:	83 c4 20             	add    esp,0x20
c001cf28:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cf2d:	50                   	push   eax
c001cf2e:	6a 0a                	push   0xa
c001cf30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf37:	50                   	push   eax
c001cf38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf3e:	e8 e1 ee ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf43:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cf48:	50                   	push   eax
c001cf49:	6a 0b                	push   0xb
c001cf4b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf52:	50                   	push   eax
c001cf53:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf59:	e8 c6 ee ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf5e:	83 c4 20             	add    esp,0x20
c001cf61:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cf66:	50                   	push   eax
c001cf67:	6a 02                	push   0x2
c001cf69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf70:	50                   	push   eax
c001cf71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf77:	e8 a8 ee ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf7c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cf81:	50                   	push   eax
c001cf82:	6a 03                	push   0x3
c001cf84:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf8b:	50                   	push   eax
c001cf8c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf92:	e8 8d ee ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf97:	83 c4 20             	add    esp,0x20
c001cf9a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cf9f:	50                   	push   eax
c001cfa0:	6a 04                	push   0x4
c001cfa2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfa9:	50                   	push   eax
c001cfaa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfb0:	e8 6f ee ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cfba:	50                   	push   eax
c001cfbb:	6a 05                	push   0x5
c001cfbd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfc4:	50                   	push   eax
c001cfc5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfcb:	e8 54 ee ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfd0:	83 c4 20             	add    esp,0x20
c001cfd3:	83 fe 02             	cmp    esi,0x2
c001cfd6:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001cfdb:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cfe0:	85 c9                	test   ecx,ecx
c001cfe2:	74 07                	je     c001cfeb <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cfe4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cfe9:	75 47                	jne    c001d032 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001cfeb:	89 f8                	mov    eax,edi
c001cfed:	0f b6 f8             	movzx  edi,al
c001cff0:	31 c0                	xor    eax,eax
c001cff2:	83 ff 02             	cmp    edi,0x2
c001cff5:	0f 95 c0             	setne  al
c001cff8:	89 c6                	mov    esi,eax
c001cffa:	74 0c                	je     c001d008 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cffc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d001:	b8 30 00 00 00       	mov    eax,0x30
c001d006:	75 2f                	jne    c001d037 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001d008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d00c:	83 f2 01             	xor    edx,0x1
c001d00f:	85 c9                	test   ecx,ecx
c001d011:	74 09                	je     c001d01c <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001d013:	84 d2                	test   dl,dl
c001d015:	b8 24 00 00 00       	mov    eax,0x24
c001d01a:	75 1b                	jne    c001d037 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001d01c:	85 f6                	test   esi,esi
c001d01e:	0f 84 67 fe ff ff    	je     c001ce8b <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d024:	84 d2                	test   dl,dl
c001d026:	b8 20 00 00 00       	mov    eax,0x20
c001d02b:	75 0a                	jne    c001d037 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001d02d:	e9 59 fe ff ff       	jmp    c001ce8b <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d032:	b8 34 00 00 00       	mov    eax,0x34
c001d037:	50                   	push   eax
c001d038:	6a 07                	push   0x7
c001d03a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d041:	50                   	push   eax
c001d042:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d048:	e8 d7 ed ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d04d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d051:	83 c4 10             	add    esp,0x10
c001d054:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001d059:	85 f6                	test   esi,esi
c001d05b:	0f 84 b5 00 00 00    	je     c001d116 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001d061:	50                   	push   eax
c001d062:	6a 01                	push   0x1
c001d064:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d06b:	50                   	push   eax
c001d06c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d072:	e8 91 f8 ff ff       	call   c001c908 <IDE::polling(unsigned char, unsigned int)>
c001d077:	83 c4 10             	add    esp,0x10
c001d07a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d080:	0f b6 c0             	movzx  eax,al
c001d083:	85 c0                	test   eax,eax
c001d085:	74 1f                	je     c001d0a6 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001d087:	50                   	push   eax
c001d088:	89 c6                	mov    esi,eax
c001d08a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d091:	0f b6 d2             	movzx  edx,dl
c001d094:	50                   	push   eax
c001d095:	52                   	push   edx
c001d096:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d09c:	e8 ad f7 ff ff       	call   c001c84e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d0a1:	e9 87 00 00 00       	jmp    c001d12d <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001d0a6:	85 ed                	test   ebp,ebp
c001d0a8:	74 3b                	je     c001d0e5 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001d0aa:	31 ff                	xor    edi,edi
c001d0ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d0b0:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001d0b4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001d0b9:	50                   	push   eax
c001d0ba:	50                   	push   eax
c001d0bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0c2:	50                   	push   eax
c001d0c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0c9:	e8 44 ed ff ff       	call   c001be12 <IDE::getBase(unsigned char)>
c001d0ce:	89 c2                	mov    edx,eax
c001d0d0:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001d0d5:	66 ef                	out    dx,ax
c001d0d7:	47                   	inc    edi
c001d0d8:	83 c4 10             	add    esp,0x10
c001d0db:	81 ff 00 01 00 00    	cmp    edi,0x100
c001d0e1:	75 c9                	jne    c001d0ac <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001d0e3:	eb 23                	jmp    c001d108 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001d0e5:	51                   	push   ecx
c001d0e6:	0f b6 d2             	movzx  edx,dl
c001d0e9:	51                   	push   ecx
c001d0ea:	52                   	push   edx
c001d0eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0f1:	e8 1c ed ff ff       	call   c001be12 <IDE::getBase(unsigned char)>
c001d0f6:	b9 00 01 00 00       	mov    ecx,0x100
c001d0fb:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d0ff:	89 c2                	mov    edx,eax
c001d101:	fc                   	cld    
c001d102:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d105:	83 c4 10             	add    esp,0x10
c001d108:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d110:	4e                   	dec    esi
c001d111:	e9 43 ff ff ff       	jmp    c001d059 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001d116:	31 f6                	xor    esi,esi
c001d118:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d11d:	74 11                	je     c001d130 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001d11f:	50                   	push   eax
c001d120:	50                   	push   eax
c001d121:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d126:	50                   	push   eax
c001d127:	53                   	push   ebx
c001d128:	e8 af fb ff ff       	call   c001ccdc <ATA::flush(bool)>
c001d12d:	83 c4 10             	add    esp,0x10
c001d130:	83 c4 2c             	add    esp,0x2c
c001d133:	89 f0                	mov    eax,esi
c001d135:	5b                   	pop    ebx
c001d136:	5e                   	pop    esi
c001d137:	5f                   	pop    edi
c001d138:	5d                   	pop    ebp
c001d139:	c3                   	ret    

c001d13a <ATA::detectCHS()>:
c001d13a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d13e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d144:	c1 e0 06             	shl    eax,0x6
c001d147:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d14d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d157:	c7 44 24 04 48 34 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023448
c001d15f:	e9 a3 44 ff ff       	jmp    c0011607 <KePanic(char const*)>

c001d164 <ATA::open(int, int, void*)>:
c001d164:	53                   	push   ebx
c001d165:	83 ec 08             	sub    esp,0x8
c001d168:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d16c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d170:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d174:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d17a:	c1 e0 06             	shl    eax,0x6
c001d17d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d183:	01 d0                	add    eax,edx
c001d185:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d18c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d192:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d199:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d1a3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d1aa:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d1b0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d1b7:	75 0c                	jne    c001d1c5 <ATA::open(int, int, void*)+0x61>
c001d1b9:	83 ec 0c             	sub    esp,0xc
c001d1bc:	53                   	push   ebx
c001d1bd:	e8 78 ff ff ff       	call   c001d13a <ATA::detectCHS()>
c001d1c2:	83 c4 10             	add    esp,0x10
c001d1c5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d1cb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d1d1:	c1 e0 06             	shl    eax,0x6
c001d1d4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d1db:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d1e5:	d1 e8                	shr    eax,1
c001d1e7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d1ed:	6a 04                	push   0x4
c001d1ef:	6a 0c                	push   0xc
c001d1f1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1f8:	50                   	push   eax
c001d1f9:	52                   	push   edx
c001d1fa:	e8 25 ec ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1ff:	90                   	nop
c001d200:	90                   	nop
c001d201:	6a 00                	push   0x0
c001d203:	6a 0c                	push   0xc
c001d205:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d20c:	50                   	push   eax
c001d20d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d213:	e8 0c ec ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d218:	83 c4 14             	add    esp,0x14
c001d21b:	53                   	push   ebx
c001d21c:	e8 cd fb fe ff       	call   c000cdee <PhysicalDisk::startCache()>
c001d221:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d224:	e8 11 0e ff ff       	call   c000e03a <createPartitionsForDisk(PhysicalDisk*)>
c001d229:	83 c4 18             	add    esp,0x18
c001d22c:	31 c0                	xor    eax,eax
c001d22e:	5b                   	pop    ebx
c001d22f:	c3                   	ret    

c001d230 <combineCharAndColour(char, unsigned char)>:
c001d230:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d235:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d23b:	c1 e0 08             	shl    eax,0x8
c001d23e:	09 d0                	or     eax,edx
c001d240:	c3                   	ret    

c001d241 <combineColours(unsigned char, unsigned char)>:
c001d241:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d246:	c1 e0 04             	shl    eax,0x4
c001d249:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d24d:	c3                   	ret    

c001d24e <ATA::read(unsigned long long, int, void*)>:
c001d24e:	55                   	push   ebp
c001d24f:	57                   	push   edi
c001d250:	56                   	push   esi
c001d251:	be 04 00 00 00       	mov    esi,0x4
c001d256:	53                   	push   ebx
c001d257:	83 ec 0c             	sub    esp,0xc
c001d25a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d25e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d262:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d266:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d26a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d26d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d273:	0f 87 a1 01 00 00    	ja     c001d41a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d279:	85 c9                	test   ecx,ecx
c001d27b:	be 06 00 00 00       	mov    esi,0x6
c001d280:	0f 84 94 01 00 00    	je     c001d41a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d286:	55                   	push   ebp
c001d287:	55                   	push   ebp
c001d288:	6a 00                	push   0x0
c001d28a:	51                   	push   ecx
c001d28b:	53                   	push   ebx
c001d28c:	52                   	push   edx
c001d28d:	50                   	push   eax
c001d28e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d292:	e8 df fa ff ff       	call   c001cd76 <ATA::access(unsigned long long, int, void*, bool)>
c001d297:	83 c4 20             	add    esp,0x20
c001d29a:	85 c0                	test   eax,eax
c001d29c:	89 c6                	mov    esi,eax
c001d29e:	0f 85 71 01 00 00    	jne    c001d415 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d2a4:	50                   	push   eax
c001d2a5:	bd 10 27 00 00       	mov    ebp,0x2710
c001d2aa:	50                   	push   eax
c001d2ab:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d2b1:	6a 0f                	push   0xf
c001d2b3:	6a 00                	push   0x0
c001d2b5:	89 da                	mov    edx,ebx
c001d2b7:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d2bd:	e8 7f ff ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001d2c2:	59                   	pop    ecx
c001d2c3:	b9 0a 00 00 00       	mov    ecx,0xa
c001d2c8:	5b                   	pop    ebx
c001d2c9:	0f b6 d8             	movzx  ebx,al
c001d2cc:	89 d0                	mov    eax,edx
c001d2ce:	53                   	push   ebx
c001d2cf:	99                   	cdq    
c001d2d0:	f7 fd                	idiv   ebp
c001d2d2:	99                   	cdq    
c001d2d3:	f7 f9                	idiv   ecx
c001d2d5:	83 c2 30             	add    edx,0x30
c001d2d8:	0f b6 d2             	movzx  edx,dl
c001d2db:	52                   	push   edx
c001d2dc:	e8 4f ff ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d2e1:	5f                   	pop    edi
c001d2e2:	bf e8 03 00 00       	mov    edi,0x3e8
c001d2e7:	5a                   	pop    edx
c001d2e8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d2ee:	53                   	push   ebx
c001d2ef:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2f4:	99                   	cdq    
c001d2f5:	f7 ff                	idiv   edi
c001d2f7:	99                   	cdq    
c001d2f8:	f7 f9                	idiv   ecx
c001d2fa:	8d 42 30             	lea    eax,[edx+0x30]
c001d2fd:	0f b6 c0             	movzx  eax,al
c001d300:	50                   	push   eax
c001d301:	e8 2a ff ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d306:	5f                   	pop    edi
c001d307:	bf 64 00 00 00       	mov    edi,0x64
c001d30c:	5a                   	pop    edx
c001d30d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d313:	53                   	push   ebx
c001d314:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d319:	99                   	cdq    
c001d31a:	f7 ff                	idiv   edi
c001d31c:	99                   	cdq    
c001d31d:	f7 f9                	idiv   ecx
c001d31f:	8d 42 30             	lea    eax,[edx+0x30]
c001d322:	0f b6 c0             	movzx  eax,al
c001d325:	50                   	push   eax
c001d326:	e8 05 ff ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d32b:	5a                   	pop    edx
c001d32c:	5a                   	pop    edx
c001d32d:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d333:	53                   	push   ebx
c001d334:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d339:	99                   	cdq    
c001d33a:	f7 f9                	idiv   ecx
c001d33c:	99                   	cdq    
c001d33d:	f7 f9                	idiv   ecx
c001d33f:	8d 42 30             	lea    eax,[edx+0x30]
c001d342:	0f b6 c0             	movzx  eax,al
c001d345:	50                   	push   eax
c001d346:	e8 e5 fe ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d34b:	5a                   	pop    edx
c001d34c:	5a                   	pop    edx
c001d34d:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d353:	53                   	push   ebx
c001d354:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d359:	99                   	cdq    
c001d35a:	f7 f9                	idiv   ecx
c001d35c:	83 c2 30             	add    edx,0x30
c001d35f:	0f b6 d2             	movzx  edx,dl
c001d362:	52                   	push   edx
c001d363:	e8 c8 fe ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d368:	5a                   	pop    edx
c001d369:	5a                   	pop    edx
c001d36a:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d370:	53                   	push   ebx
c001d371:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d376:	99                   	cdq    
c001d377:	f7 fd                	idiv   ebp
c001d379:	99                   	cdq    
c001d37a:	f7 f9                	idiv   ecx
c001d37c:	8d 42 30             	lea    eax,[edx+0x30]
c001d37f:	0f b6 c0             	movzx  eax,al
c001d382:	50                   	push   eax
c001d383:	e8 a8 fe ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d388:	5d                   	pop    ebp
c001d389:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d38e:	5a                   	pop    edx
c001d38f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d395:	53                   	push   ebx
c001d396:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d39b:	99                   	cdq    
c001d39c:	f7 fd                	idiv   ebp
c001d39e:	99                   	cdq    
c001d39f:	f7 f9                	idiv   ecx
c001d3a1:	8d 42 30             	lea    eax,[edx+0x30]
c001d3a4:	0f b6 c0             	movzx  eax,al
c001d3a7:	50                   	push   eax
c001d3a8:	e8 83 fe ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d3ad:	5d                   	pop    ebp
c001d3ae:	5a                   	pop    edx
c001d3af:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d3b5:	53                   	push   ebx
c001d3b6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3bb:	99                   	cdq    
c001d3bc:	f7 ff                	idiv   edi
c001d3be:	99                   	cdq    
c001d3bf:	f7 f9                	idiv   ecx
c001d3c1:	8d 42 30             	lea    eax,[edx+0x30]
c001d3c4:	0f b6 c0             	movzx  eax,al
c001d3c7:	50                   	push   eax
c001d3c8:	e8 63 fe ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d3cd:	5f                   	pop    edi
c001d3ce:	5d                   	pop    ebp
c001d3cf:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d3d5:	53                   	push   ebx
c001d3d6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3db:	99                   	cdq    
c001d3dc:	f7 f9                	idiv   ecx
c001d3de:	99                   	cdq    
c001d3df:	f7 f9                	idiv   ecx
c001d3e1:	8d 42 30             	lea    eax,[edx+0x30]
c001d3e4:	0f b6 c0             	movzx  eax,al
c001d3e7:	50                   	push   eax
c001d3e8:	e8 43 fe ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d3ed:	5a                   	pop    edx
c001d3ee:	5f                   	pop    edi
c001d3ef:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d3f5:	53                   	push   ebx
c001d3f6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3fb:	99                   	cdq    
c001d3fc:	f7 f9                	idiv   ecx
c001d3fe:	83 c2 30             	add    edx,0x30
c001d401:	0f b6 d2             	movzx  edx,dl
c001d404:	52                   	push   edx
c001d405:	e8 26 fe ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d40a:	83 c4 10             	add    esp,0x10
c001d40d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d413:	eb 05                	jmp    c001d41a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d415:	be 01 00 00 00       	mov    esi,0x1
c001d41a:	83 c4 0c             	add    esp,0xc
c001d41d:	89 f0                	mov    eax,esi
c001d41f:	5b                   	pop    ebx
c001d420:	5e                   	pop    esi
c001d421:	5f                   	pop    edi
c001d422:	5d                   	pop    ebp
c001d423:	c3                   	ret    

c001d424 <ATA::write(unsigned long long, int, void*)>:
c001d424:	55                   	push   ebp
c001d425:	57                   	push   edi
c001d426:	56                   	push   esi
c001d427:	be 04 00 00 00       	mov    esi,0x4
c001d42c:	53                   	push   ebx
c001d42d:	83 ec 0c             	sub    esp,0xc
c001d430:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d434:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d438:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d43c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d440:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d443:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d449:	0f 87 9c 01 00 00    	ja     c001d5eb <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d44f:	85 c9                	test   ecx,ecx
c001d451:	be 06 00 00 00       	mov    esi,0x6
c001d456:	0f 84 8f 01 00 00    	je     c001d5eb <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d45c:	55                   	push   ebp
c001d45d:	55                   	push   ebp
c001d45e:	6a 01                	push   0x1
c001d460:	51                   	push   ecx
c001d461:	53                   	push   ebx
c001d462:	52                   	push   edx
c001d463:	50                   	push   eax
c001d464:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d468:	e8 09 f9 ff ff       	call   c001cd76 <ATA::access(unsigned long long, int, void*, bool)>
c001d46d:	83 c4 20             	add    esp,0x20
c001d470:	85 c0                	test   eax,eax
c001d472:	89 c6                	mov    esi,eax
c001d474:	0f 85 6c 01 00 00    	jne    c001d5e6 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d47a:	50                   	push   eax
c001d47b:	bd 10 27 00 00       	mov    ebp,0x2710
c001d480:	50                   	push   eax
c001d481:	6a 0f                	push   0xf
c001d483:	6a 00                	push   0x0
c001d485:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d48b:	e8 b1 fd ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001d490:	5a                   	pop    edx
c001d491:	59                   	pop    ecx
c001d492:	b9 0a 00 00 00       	mov    ecx,0xa
c001d497:	0f b6 d8             	movzx  ebx,al
c001d49a:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d49f:	53                   	push   ebx
c001d4a0:	99                   	cdq    
c001d4a1:	f7 fd                	idiv   ebp
c001d4a3:	99                   	cdq    
c001d4a4:	f7 f9                	idiv   ecx
c001d4a6:	8d 42 30             	lea    eax,[edx+0x30]
c001d4a9:	0f b6 c0             	movzx  eax,al
c001d4ac:	50                   	push   eax
c001d4ad:	e8 7e fd ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d4b2:	5f                   	pop    edi
c001d4b3:	bf e8 03 00 00       	mov    edi,0x3e8
c001d4b8:	5a                   	pop    edx
c001d4b9:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d4bf:	53                   	push   ebx
c001d4c0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4c5:	99                   	cdq    
c001d4c6:	f7 ff                	idiv   edi
c001d4c8:	99                   	cdq    
c001d4c9:	f7 f9                	idiv   ecx
c001d4cb:	8d 42 30             	lea    eax,[edx+0x30]
c001d4ce:	0f b6 c0             	movzx  eax,al
c001d4d1:	50                   	push   eax
c001d4d2:	e8 59 fd ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d4d7:	5f                   	pop    edi
c001d4d8:	bf 64 00 00 00       	mov    edi,0x64
c001d4dd:	5a                   	pop    edx
c001d4de:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d4e4:	53                   	push   ebx
c001d4e5:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4ea:	99                   	cdq    
c001d4eb:	f7 ff                	idiv   edi
c001d4ed:	99                   	cdq    
c001d4ee:	f7 f9                	idiv   ecx
c001d4f0:	8d 42 30             	lea    eax,[edx+0x30]
c001d4f3:	0f b6 c0             	movzx  eax,al
c001d4f6:	50                   	push   eax
c001d4f7:	e8 34 fd ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d4fc:	5a                   	pop    edx
c001d4fd:	5a                   	pop    edx
c001d4fe:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d504:	53                   	push   ebx
c001d505:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d50a:	99                   	cdq    
c001d50b:	f7 f9                	idiv   ecx
c001d50d:	99                   	cdq    
c001d50e:	f7 f9                	idiv   ecx
c001d510:	8d 42 30             	lea    eax,[edx+0x30]
c001d513:	0f b6 c0             	movzx  eax,al
c001d516:	50                   	push   eax
c001d517:	e8 14 fd ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d51c:	5a                   	pop    edx
c001d51d:	5a                   	pop    edx
c001d51e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d524:	53                   	push   ebx
c001d525:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d52a:	99                   	cdq    
c001d52b:	f7 f9                	idiv   ecx
c001d52d:	83 c2 30             	add    edx,0x30
c001d530:	0f b6 d2             	movzx  edx,dl
c001d533:	52                   	push   edx
c001d534:	e8 f7 fc ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d539:	5a                   	pop    edx
c001d53a:	5a                   	pop    edx
c001d53b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d541:	53                   	push   ebx
c001d542:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d547:	99                   	cdq    
c001d548:	f7 fd                	idiv   ebp
c001d54a:	99                   	cdq    
c001d54b:	f7 f9                	idiv   ecx
c001d54d:	8d 42 30             	lea    eax,[edx+0x30]
c001d550:	0f b6 c0             	movzx  eax,al
c001d553:	50                   	push   eax
c001d554:	e8 d7 fc ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d559:	5d                   	pop    ebp
c001d55a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d55f:	5a                   	pop    edx
c001d560:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d566:	53                   	push   ebx
c001d567:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d56c:	99                   	cdq    
c001d56d:	f7 fd                	idiv   ebp
c001d56f:	99                   	cdq    
c001d570:	f7 f9                	idiv   ecx
c001d572:	8d 42 30             	lea    eax,[edx+0x30]
c001d575:	0f b6 c0             	movzx  eax,al
c001d578:	50                   	push   eax
c001d579:	e8 b2 fc ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d57e:	5d                   	pop    ebp
c001d57f:	5a                   	pop    edx
c001d580:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d586:	53                   	push   ebx
c001d587:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d58c:	99                   	cdq    
c001d58d:	f7 ff                	idiv   edi
c001d58f:	99                   	cdq    
c001d590:	f7 f9                	idiv   ecx
c001d592:	8d 42 30             	lea    eax,[edx+0x30]
c001d595:	0f b6 c0             	movzx  eax,al
c001d598:	50                   	push   eax
c001d599:	e8 92 fc ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d59e:	5f                   	pop    edi
c001d59f:	5d                   	pop    ebp
c001d5a0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d5a6:	53                   	push   ebx
c001d5a7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5ac:	99                   	cdq    
c001d5ad:	f7 f9                	idiv   ecx
c001d5af:	99                   	cdq    
c001d5b0:	f7 f9                	idiv   ecx
c001d5b2:	8d 42 30             	lea    eax,[edx+0x30]
c001d5b5:	0f b6 c0             	movzx  eax,al
c001d5b8:	50                   	push   eax
c001d5b9:	e8 72 fc ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d5be:	5a                   	pop    edx
c001d5bf:	5f                   	pop    edi
c001d5c0:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d5c6:	53                   	push   ebx
c001d5c7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5cc:	99                   	cdq    
c001d5cd:	f7 f9                	idiv   ecx
c001d5cf:	83 c2 30             	add    edx,0x30
c001d5d2:	0f b6 d2             	movzx  edx,dl
c001d5d5:	52                   	push   edx
c001d5d6:	e8 55 fc ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001d5db:	83 c4 10             	add    esp,0x10
c001d5de:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d5e4:	eb 05                	jmp    c001d5eb <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d5e6:	be 01 00 00 00       	mov    esi,0x1
c001d5eb:	83 c4 0c             	add    esp,0xc
c001d5ee:	89 f0                	mov    eax,esi
c001d5f0:	5b                   	pop    ebx
c001d5f1:	5e                   	pop    esi
c001d5f2:	5f                   	pop    edi
c001d5f3:	5d                   	pop    ebp
c001d5f4:	c3                   	ret    
c001d5f5:	90                   	nop

c001d5f6 <ATAPI::write(unsigned long long, int, void*)>:
c001d5f6:	b8 03 00 00 00       	mov    eax,0x3
c001d5fb:	c3                   	ret    

c001d5fc <ATAPI::close(int, int, void*)>:
c001d5fc:	83 ec 0c             	sub    esp,0xc
c001d5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d603:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d609:	85 c0                	test   eax,eax
c001d60b:	74 0c                	je     c001d619 <ATAPI::close(int, int, void*)+0x1d>
c001d60d:	8b 10                	mov    edx,DWORD PTR [eax]
c001d60f:	83 ec 0c             	sub    esp,0xc
c001d612:	50                   	push   eax
c001d613:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d616:	83 c4 10             	add    esp,0x10
c001d619:	31 c0                	xor    eax,eax
c001d61b:	83 c4 0c             	add    esp,0xc
c001d61e:	c3                   	ret    
c001d61f:	90                   	nop

c001d620 <ATAPI::ATAPI()>:
c001d620:	83 ec 0c             	sub    esp,0xc
c001d623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d627:	83 ec 04             	sub    esp,0x4
c001d62a:	68 00 08 00 00       	push   0x800
c001d62f:	68 91 35 02 c0       	push   0xc0023591
c001d634:	50                   	push   eax
c001d635:	e8 4c f7 fe ff       	call   c000cd86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d63a:	83 c4 10             	add    esp,0x10
c001d63d:	ba ac 34 02 c0       	mov    edx,0xc00234ac
c001d642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d646:	89 10                	mov    DWORD PTR [eax],edx
c001d648:	90                   	nop
c001d649:	83 c4 0c             	add    esp,0xc
c001d64c:	c3                   	ret    
c001d64d:	90                   	nop

c001d64e <ATAPI::readyForCommand()>:
c001d64e:	56                   	push   esi
c001d64f:	53                   	push   ebx
c001d650:	53                   	push   ebx
c001d651:	31 db                	xor    ebx,ebx
c001d653:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d657:	51                   	push   ecx
c001d658:	6a 0c                	push   0xc
c001d65a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d661:	50                   	push   eax
c001d662:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d668:	e8 77 e8 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001d66d:	83 c4 10             	add    esp,0x10
c001d670:	a8 88                	test   al,0x88
c001d672:	74 25                	je     c001d699 <ATAPI::readyForCommand()+0x4b>
c001d674:	43                   	inc    ebx
c001d675:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d67b:	7e da                	jle    c001d657 <ATAPI::readyForCommand()+0x9>
c001d67d:	83 ec 0c             	sub    esp,0xc
c001d680:	68 5e 01 00 00       	push   0x15e
c001d685:	e8 c6 8d ff ff       	call   c0016450 <milliTenthSleep(unsigned int)>
c001d68a:	83 c4 10             	add    esp,0x10
c001d68d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d693:	75 c2                	jne    c001d657 <ATAPI::readyForCommand()+0x9>
c001d695:	31 c0                	xor    eax,eax
c001d697:	eb 02                	jmp    c001d69b <ATAPI::readyForCommand()+0x4d>
c001d699:	b0 01                	mov    al,0x1
c001d69b:	5a                   	pop    edx
c001d69c:	5b                   	pop    ebx
c001d69d:	5e                   	pop    esi
c001d69e:	c3                   	ret    
c001d69f:	90                   	nop

c001d6a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d6a0:	55                   	push   ebp
c001d6a1:	57                   	push   edi
c001d6a2:	56                   	push   esi
c001d6a3:	53                   	push   ebx
c001d6a4:	83 ec 20             	sub    esp,0x20
c001d6a7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d6ab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d6af:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d6b3:	6a 01                	push   0x1
c001d6b5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6bc:	50                   	push   eax
c001d6bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6c3:	e8 6a e9 ff ff       	call   c001c032 <IDE::enableIRQs(unsigned char, bool)>
c001d6c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6cf:	59                   	pop    ecx
c001d6d0:	5e                   	pop    esi
c001d6d1:	50                   	push   eax
c001d6d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6d8:	e8 21 e7 ff ff       	call   c001bdfe <IDE::prepareInterrupt(unsigned char)>
c001d6dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6e0:	e8 69 ff ff ff       	call   c001d64e <ATAPI::readyForCommand()>
c001d6e5:	83 c4 10             	add    esp,0x10
c001d6e8:	84 c0                	test   al,al
c001d6ea:	75 0a                	jne    c001d6f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d6ec:	bb 01 00 00 00       	mov    ebx,0x1
c001d6f1:	e9 5f 02 00 00       	jmp    c001d955 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d6f6:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d6fc:	c1 e0 04             	shl    eax,0x4
c001d6ff:	0f b6 c0             	movzx  eax,al
c001d702:	50                   	push   eax
c001d703:	6a 06                	push   0x6
c001d705:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d70c:	50                   	push   eax
c001d70d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d713:	e8 0c e7 ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d718:	6a 00                	push   0x0
c001d71a:	6a 01                	push   0x1
c001d71c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d723:	50                   	push   eax
c001d724:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d72a:	e8 f5 e6 ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d72f:	83 c4 20             	add    esp,0x20
c001d732:	0f b6 c3             	movzx  eax,bl
c001d735:	50                   	push   eax
c001d736:	0f b6 df             	movzx  ebx,bh
c001d739:	6a 04                	push   0x4
c001d73b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d742:	50                   	push   eax
c001d743:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d749:	e8 d6 e6 ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d74e:	53                   	push   ebx
c001d74f:	6a 05                	push   0x5
c001d751:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d758:	50                   	push   eax
c001d759:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d75f:	e8 c0 e6 ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d764:	83 c4 20             	add    esp,0x20
c001d767:	68 a0 00 00 00       	push   0xa0
c001d76c:	6a 07                	push   0x7
c001d76e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d775:	50                   	push   eax
c001d776:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d77c:	e8 a3 e6 ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d781:	83 c4 0c             	add    esp,0xc
c001d784:	6a 01                	push   0x1
c001d786:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d78d:	50                   	push   eax
c001d78e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d794:	e8 6f f1 ff ff       	call   c001c908 <IDE::polling(unsigned char, unsigned int)>
c001d799:	83 c4 10             	add    esp,0x10
c001d79c:	0f b6 d8             	movzx  ebx,al
c001d79f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d7a5:	85 db                	test   ebx,ebx
c001d7a7:	74 20                	je     c001d7c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d7a9:	53                   	push   ebx
c001d7aa:	0f b6 c0             	movzx  eax,al
c001d7ad:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d7b4:	52                   	push   edx
c001d7b5:	50                   	push   eax
c001d7b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7bc:	e8 8d f0 ff ff       	call   c001c84e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d7c1:	83 c4 10             	add    esp,0x10
c001d7c4:	e9 8c 01 00 00       	jmp    c001d955 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d7c9:	52                   	push   edx
c001d7ca:	0f b6 c0             	movzx  eax,al
c001d7cd:	52                   	push   edx
c001d7ce:	50                   	push   eax
c001d7cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7d5:	e8 38 e6 ff ff       	call   c001be12 <IDE::getBase(unsigned char)>
c001d7da:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d7de:	b9 06 00 00 00       	mov    ecx,0x6
c001d7e3:	89 c2                	mov    edx,eax
c001d7e5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d7e8:	89 e8                	mov    eax,ebp
c001d7ea:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d7ee:	83 c4 10             	add    esp,0x10
c001d7f1:	0f b6 c0             	movzx  eax,al
c001d7f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d7f8:	85 db                	test   ebx,ebx
c001d7fa:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d800:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d807:	0f 84 eb 00 00 00    	je     c001d8f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d80d:	55                   	push   ebp
c001d80e:	55                   	push   ebp
c001d80f:	52                   	push   edx
c001d810:	50                   	push   eax
c001d811:	e8 82 e7 ff ff       	call   c001bf98 <IDE::waitInterrupt(unsigned char)>
c001d816:	83 c4 10             	add    esp,0x10
c001d819:	84 c0                	test   al,al
c001d81b:	0f 84 cb fe ff ff    	je     c001d6ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d821:	56                   	push   esi
c001d822:	56                   	push   esi
c001d823:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d82a:	50                   	push   eax
c001d82b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d831:	e8 c8 e5 ff ff       	call   c001bdfe <IDE::prepareInterrupt(unsigned char)>
c001d836:	83 c4 0c             	add    esp,0xc
c001d839:	6a 04                	push   0x4
c001d83b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d842:	50                   	push   eax
c001d843:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d849:	e8 96 e6 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001d84e:	83 c4 0c             	add    esp,0xc
c001d851:	6a 05                	push   0x5
c001d853:	89 c6                	mov    esi,eax
c001d855:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d85c:	50                   	push   eax
c001d85d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d863:	e8 7c e6 ff ff       	call   c001bee4 <IDE::read(unsigned char, unsigned char)>
c001d868:	83 c4 10             	add    esp,0x10
c001d86b:	0f b6 e8             	movzx  ebp,al
c001d86e:	89 f0                	mov    eax,esi
c001d870:	c1 e5 08             	shl    ebp,0x8
c001d873:	0f b6 f0             	movzx  esi,al
c001d876:	09 f5                	or     ebp,esi
c001d878:	31 f6                	xor    esi,esi
c001d87a:	d1 fd                	sar    ebp,1
c001d87c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d881:	74 5c                	je     c001d8df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d883:	39 ee                	cmp    esi,ebp
c001d885:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d88b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d892:	75 0d                	jne    c001d8a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d894:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d897:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d89b:	4b                   	dec    ebx
c001d89c:	e9 57 ff ff ff       	jmp    c001d7f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d8a1:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d8a5:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d8a9:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d8ae:	51                   	push   ecx
c001d8af:	51                   	push   ecx
c001d8b0:	52                   	push   edx
c001d8b1:	50                   	push   eax
c001d8b2:	e8 5b e5 ff ff       	call   c001be12 <IDE::getBase(unsigned char)>
c001d8b7:	89 c2                	mov    edx,eax
c001d8b9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d8be:	66 ef                	out    dx,ax
c001d8c0:	46                   	inc    esi
c001d8c1:	83 c4 10             	add    esp,0x10
c001d8c4:	eb bd                	jmp    c001d883 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d8c6:	51                   	push   ecx
c001d8c7:	51                   	push   ecx
c001d8c8:	52                   	push   edx
c001d8c9:	50                   	push   eax
c001d8ca:	e8 43 e5 ff ff       	call   c001be12 <IDE::getBase(unsigned char)>
c001d8cf:	89 c2                	mov    edx,eax
c001d8d1:	66 ed                	in     ax,dx
c001d8d3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d8d7:	83 c4 10             	add    esp,0x10
c001d8da:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d8de:	46                   	inc    esi
c001d8df:	39 ee                	cmp    esi,ebp
c001d8e1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8e7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8ee:	75 d6                	jne    c001d8c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d8f0:	01 f6                	add    esi,esi
c001d8f2:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d8f6:	eb a3                	jmp    c001d89b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d8f8:	51                   	push   ecx
c001d8f9:	51                   	push   ecx
c001d8fa:	52                   	push   edx
c001d8fb:	50                   	push   eax
c001d8fc:	e8 97 e6 ff ff       	call   c001bf98 <IDE::waitInterrupt(unsigned char)>
c001d901:	83 c4 10             	add    esp,0x10
c001d904:	84 c0                	test   al,al
c001d906:	0f 84 e0 fd ff ff    	je     c001d6ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d90c:	52                   	push   edx
c001d90d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d912:	52                   	push   edx
c001d913:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d91a:	50                   	push   eax
c001d91b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d921:	e8 d8 e4 ff ff       	call   c001bdfe <IDE::prepareInterrupt(unsigned char)>
c001d926:	83 c4 10             	add    esp,0x10
c001d929:	50                   	push   eax
c001d92a:	50                   	push   eax
c001d92b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d932:	50                   	push   eax
c001d933:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d939:	e8 d4 e4 ff ff       	call   c001be12 <IDE::getBase(unsigned char)>
c001d93e:	8d 50 07             	lea    edx,[eax+0x7]
c001d941:	ec                   	in     al,dx
c001d942:	83 c4 10             	add    esp,0x10
c001d945:	a8 88                	test   al,0x88
c001d947:	74 0a                	je     c001d953 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d949:	4b                   	dec    ebx
c001d94a:	75 dd                	jne    c001d929 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d94c:	bb 02 00 00 00       	mov    ebx,0x2
c001d951:	eb 02                	jmp    c001d955 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d953:	31 db                	xor    ebx,ebx
c001d955:	83 c4 1c             	add    esp,0x1c
c001d958:	89 d8                	mov    eax,ebx
c001d95a:	5b                   	pop    ebx
c001d95b:	5e                   	pop    esi
c001d95c:	5f                   	pop    edi
c001d95d:	5d                   	pop    ebp
c001d95e:	c3                   	ret    
c001d95f:	90                   	nop

c001d960 <ATAPI::diskRemoved()>:
c001d960:	53                   	push   ebx
c001d961:	83 ec 14             	sub    esp,0x14
c001d964:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d968:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d96f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d975:	e8 ae 03 ff ff       	call   c000dd28 <LogicalDisk::unmount()>
c001d97a:	58                   	pop    eax
c001d97b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d981:	e8 86 0d ff ff       	call   c000e70c <VCache::writeWriteBuffer()>
c001d986:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d98c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d990:	83 c4 18             	add    esp,0x18
c001d993:	5b                   	pop    ebx
c001d994:	e9 63 0d ff ff       	jmp    c000e6fc <VCache::invalidateReadBuffer()>
c001d999:	90                   	nop

c001d99a <ATAPI::eject()>:
c001d99a:	57                   	push   edi
c001d99b:	b9 03 00 00 00       	mov    ecx,0x3
c001d9a0:	53                   	push   ebx
c001d9a1:	83 ec 14             	sub    esp,0x14
c001d9a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d9a8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d9ac:	fc                   	cld    
c001d9ad:	31 c0                	xor    eax,eax
c001d9af:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d9b1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d9b6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d9bb:	50                   	push   eax
c001d9bc:	50                   	push   eax
c001d9bd:	6a 00                	push   0x0
c001d9bf:	6a 00                	push   0x0
c001d9c1:	6a 00                	push   0x0
c001d9c3:	6a 02                	push   0x2
c001d9c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d9c9:	50                   	push   eax
c001d9ca:	53                   	push   ebx
c001d9cb:	e8 d0 fc ff ff       	call   c001d6a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9d0:	83 c4 14             	add    esp,0x14
c001d9d3:	53                   	push   ebx
c001d9d4:	e8 87 ff ff ff       	call   c001d960 <ATAPI::diskRemoved()>
c001d9d9:	83 c4 24             	add    esp,0x24
c001d9dc:	31 c0                	xor    eax,eax
c001d9de:	5b                   	pop    ebx
c001d9df:	5f                   	pop    edi
c001d9e0:	c3                   	ret    
c001d9e1:	90                   	nop

c001d9e2 <ATAPI::diskInserted()>:
c001d9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9e6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d9ed:	c3                   	ret    

c001d9ee <ATAPI::detectMedia()>:
c001d9ee:	56                   	push   esi
c001d9ef:	53                   	push   ebx
c001d9f0:	83 ec 28             	sub    esp,0x28
c001d9f3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d9f7:	6a 0c                	push   0xc
c001d9f9:	6a 00                	push   0x0
c001d9fb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d9ff:	56                   	push   esi
c001da00:	e8 eb 2a fe ff       	call   c00004f0 <memset>
c001da05:	58                   	pop    eax
c001da06:	5a                   	pop    edx
c001da07:	6a 00                	push   0x0
c001da09:	6a 00                	push   0x0
c001da0b:	6a 00                	push   0x0
c001da0d:	6a 00                	push   0x0
c001da0f:	56                   	push   esi
c001da10:	53                   	push   ebx
c001da11:	e8 8a fc ff ff       	call   c001d6a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da16:	83 c4 1c             	add    esp,0x1c
c001da19:	6a 0c                	push   0xc
c001da1b:	6a 00                	push   0x0
c001da1d:	56                   	push   esi
c001da1e:	e8 cd 2a fe ff       	call   c00004f0 <memset>
c001da23:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001da28:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001da2d:	59                   	pop    ecx
c001da2e:	58                   	pop    eax
c001da2f:	6a 01                	push   0x1
c001da31:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001da35:	50                   	push   eax
c001da36:	6a 00                	push   0x0
c001da38:	6a 12                	push   0x12
c001da3a:	56                   	push   esi
c001da3b:	53                   	push   ebx
c001da3c:	e8 5f fc ff ff       	call   c001d6a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da41:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001da45:	83 c4 20             	add    esp,0x20
c001da48:	83 e0 7f             	and    eax,0x7f
c001da4b:	83 f8 70             	cmp    eax,0x70
c001da4e:	74 15                	je     c001da65 <ATAPI::detectMedia()+0x77>
c001da50:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da57:	75 0c                	jne    c001da65 <ATAPI::detectMedia()+0x77>
c001da59:	83 ec 0c             	sub    esp,0xc
c001da5c:	53                   	push   ebx
c001da5d:	e8 80 ff ff ff       	call   c001d9e2 <ATAPI::diskInserted()>
c001da62:	83 c4 10             	add    esp,0x10
c001da65:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001da69:	83 e0 0f             	and    eax,0xf
c001da6c:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001da71:	0f b6 c0             	movzx  eax,al
c001da74:	75 19                	jne    c001da8f <ATAPI::detectMedia()+0xa1>
c001da76:	83 f8 02             	cmp    eax,0x2
c001da79:	75 14                	jne    c001da8f <ATAPI::detectMedia()+0xa1>
c001da7b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da82:	74 24                	je     c001daa8 <ATAPI::detectMedia()+0xba>
c001da84:	83 ec 0c             	sub    esp,0xc
c001da87:	53                   	push   ebx
c001da88:	e8 d3 fe ff ff       	call   c001d960 <ATAPI::diskRemoved()>
c001da8d:	eb 16                	jmp    c001daa5 <ATAPI::detectMedia()+0xb7>
c001da8f:	85 c0                	test   eax,eax
c001da91:	75 15                	jne    c001daa8 <ATAPI::detectMedia()+0xba>
c001da93:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da9a:	75 0c                	jne    c001daa8 <ATAPI::detectMedia()+0xba>
c001da9c:	83 ec 0c             	sub    esp,0xc
c001da9f:	53                   	push   ebx
c001daa0:	e8 3d ff ff ff       	call   c001d9e2 <ATAPI::diskInserted()>
c001daa5:	83 c4 10             	add    esp,0x10
c001daa8:	83 c4 24             	add    esp,0x24
c001daab:	5b                   	pop    ebx
c001daac:	5e                   	pop    esi
c001daad:	c3                   	ret    

c001daae <ATAPI::open(int, int, void*)>:
c001daae:	56                   	push   esi
c001daaf:	53                   	push   ebx
c001dab0:	50                   	push   eax
c001dab1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dab5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dab9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dabd:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dac3:	c1 e0 06             	shl    eax,0x6
c001dac6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dacc:	01 d0                	add    eax,edx
c001dace:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001dad5:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001dadb:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001dae2:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001daec:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001daf3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001daf9:	6a 04                	push   0x4
c001dafb:	6a 0c                	push   0xc
c001dafd:	51                   	push   ecx
c001dafe:	52                   	push   edx
c001daff:	e8 20 e3 ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db04:	90                   	nop
c001db05:	90                   	nop
c001db06:	6a 00                	push   0x0
c001db08:	6a 0c                	push   0xc
c001db0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db11:	50                   	push   eax
c001db12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db18:	e8 07 e3 ff ff       	call   c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db1d:	83 c4 14             	add    esp,0x14
c001db20:	68 78 01 00 00       	push   0x178
c001db25:	e8 ad 9f fe ff       	call   c0007ad7 <malloc>
c001db2a:	83 c4 0c             	add    esp,0xc
c001db2d:	6a 00                	push   0x0
c001db2f:	68 ff ff ff 7f       	push   0x7fffffff
c001db34:	6a 00                	push   0x0
c001db36:	6a 00                	push   0x0
c001db38:	53                   	push   ebx
c001db39:	68 43 36 02 c0       	push   0xc0023643
c001db3e:	89 c6                	mov    esi,eax
c001db40:	50                   	push   eax
c001db41:	e8 20 00 ff ff       	call   c000db66 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001db46:	83 c4 14             	add    esp,0x14
c001db49:	56                   	push   esi
c001db4a:	e8 d7 00 ff ff       	call   c000dc26 <LogicalDisk::assignDriveLetter()>
c001db4f:	5a                   	pop    edx
c001db50:	59                   	pop    ecx
c001db51:	0f be c0             	movsx  eax,al
c001db54:	50                   	push   eax
c001db55:	68 94 34 02 c0       	push   0xc0023494
c001db5a:	e8 af cd fe ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001db5f:	58                   	pop    eax
c001db60:	5a                   	pop    edx
c001db61:	56                   	push   esi
c001db62:	53                   	push   ebx
c001db63:	e8 3c ee fe ff       	call   c000c9a4 <Device::addChild(Device*)>
c001db68:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001db6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db71:	e8 78 f2 fe ff       	call   c000cdee <PhysicalDisk::startCache()>
c001db76:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001db7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db80:	e8 69 fe ff ff       	call   c001d9ee <ATAPI::detectMedia()>
c001db85:	83 c4 14             	add    esp,0x14
c001db88:	31 c0                	xor    eax,eax
c001db8a:	5b                   	pop    ebx
c001db8b:	5e                   	pop    esi
c001db8c:	c3                   	ret    
c001db8d:	90                   	nop

c001db8e <ATAPI::read(unsigned long long, int, void*)>:
c001db8e:	55                   	push   ebp
c001db8f:	57                   	push   edi
c001db90:	56                   	push   esi
c001db91:	53                   	push   ebx
c001db92:	83 ec 1c             	sub    esp,0x1c
c001db95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db99:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001db9d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dba1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dba8:	74 3c                	je     c001dbe6 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dbaa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dbae:	b9 03 00 00 00       	mov    ecx,0x3
c001dbb3:	fc                   	cld    
c001dbb4:	31 c0                	xor    eax,eax
c001dbb6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dbb8:	89 e8                	mov    eax,ebp
c001dbba:	0f ce                	bswap  esi
c001dbbc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dbc0:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dbc5:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dbc9:	50                   	push   eax
c001dbca:	50                   	push   eax
c001dbcb:	55                   	push   ebp
c001dbcc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dbd0:	c1 e5 0b             	shl    ebp,0xb
c001dbd3:	6a 00                	push   0x0
c001dbd5:	55                   	push   ebp
c001dbd6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dbda:	50                   	push   eax
c001dbdb:	53                   	push   ebx
c001dbdc:	e8 bf fa ff ff       	call   c001d6a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dbe1:	83 c4 20             	add    esp,0x20
c001dbe4:	eb 1a                	jmp    c001dc00 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dbe6:	83 ec 0c             	sub    esp,0xc
c001dbe9:	53                   	push   ebx
c001dbea:	e8 ff fd ff ff       	call   c001d9ee <ATAPI::detectMedia()>
c001dbef:	83 c4 10             	add    esp,0x10
c001dbf2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dbf9:	75 af                	jne    c001dbaa <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dbfb:	b8 02 00 00 00       	mov    eax,0x2
c001dc00:	83 c4 1c             	add    esp,0x1c
c001dc03:	5b                   	pop    ebx
c001dc04:	5e                   	pop    esi
c001dc05:	5f                   	pop    edi
c001dc06:	5d                   	pop    ebp
c001dc07:	c3                   	ret    

c001dc08 <SATA::close(int, int, void*)>:
c001dc08:	83 ec 0c             	sub    esp,0xc
c001dc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc0f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dc15:	85 c0                	test   eax,eax
c001dc17:	74 0c                	je     c001dc25 <SATA::close(int, int, void*)+0x1d>
c001dc19:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc1b:	83 ec 0c             	sub    esp,0xc
c001dc1e:	50                   	push   eax
c001dc1f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dc22:	83 c4 10             	add    esp,0x10
c001dc25:	31 c0                	xor    eax,eax
c001dc27:	83 c4 0c             	add    esp,0xc
c001dc2a:	c3                   	ret    
c001dc2b:	90                   	nop

c001dc2c <SATA::powerSaving(PowerSavingLevel)>:
c001dc2c:	c3                   	ret    
c001dc2d:	90                   	nop

c001dc2e <SATA::open(int, int, void*)>:
c001dc2e:	56                   	push   esi
c001dc2f:	53                   	push   ebx
c001dc30:	50                   	push   eax
c001dc31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc39:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc43:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dc49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc4d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dc57:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc61:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc68:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dc6e:	e8 73 a1 fe ff       	call   c0007de6 <Phys::allocatePage()>
c001dc73:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dc79:	89 c6                	mov    esi,eax
c001dc7b:	e8 66 a1 fe ff       	call   c0007de6 <Phys::allocatePage()>
c001dc80:	81 c6 00 10 00 00    	add    esi,0x1000
c001dc86:	39 c6                	cmp    esi,eax
c001dc88:	74 10                	je     c001dc9a <SATA::open(int, int, void*)+0x6c>
c001dc8a:	83 ec 0c             	sub    esp,0xc
c001dc8d:	68 dc 34 02 c0       	push   0xc00234dc
c001dc92:	e8 70 39 ff ff       	call   c0011607 <KePanic(char const*)>
c001dc97:	83 c4 10             	add    esp,0x10
c001dc9a:	83 ec 0c             	sub    esp,0xc
c001dc9d:	6a 02                	push   0x2
c001dc9f:	e8 55 b9 fe ff       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c001dca4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dcaa:	6a 03                	push   0x3
c001dcac:	50                   	push   eax
c001dcad:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dcb3:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dcb9:	e8 44 c0 fe ff       	call   c0009d02 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dcbe:	83 c4 14             	add    esp,0x14
c001dcc1:	53                   	push   ebx
c001dcc2:	e8 27 f1 fe ff       	call   c000cdee <PhysicalDisk::startCache()>
c001dcc7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dcca:	e8 6b 03 ff ff       	call   c000e03a <createPartitionsForDisk(PhysicalDisk*)>
c001dccf:	83 c4 14             	add    esp,0x14
c001dcd2:	31 c0                	xor    eax,eax
c001dcd4:	5b                   	pop    ebx
c001dcd5:	5e                   	pop    esi
c001dcd6:	c3                   	ret    
c001dcd7:	90                   	nop

c001dcd8 <SATA::SATA()>:
c001dcd8:	83 ec 0c             	sub    esp,0xc
c001dcdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcdf:	83 ec 04             	sub    esp,0x4
c001dce2:	68 00 02 00 00       	push   0x200
c001dce7:	68 f0 34 02 c0       	push   0xc00234f0
c001dcec:	50                   	push   eax
c001dced:	e8 94 f0 fe ff       	call   c000cd86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dcf2:	83 c4 10             	add    esp,0x10
c001dcf5:	ba 60 35 02 c0       	mov    edx,0xc0023560
c001dcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcfe:	89 10                	mov    DWORD PTR [eax],edx
c001dd00:	90                   	nop
c001dd01:	83 c4 0c             	add    esp,0xc
c001dd04:	c3                   	ret    
c001dd05:	90                   	nop

c001dd06 <SATA::access(unsigned long long, int, void*, bool)>:
c001dd06:	55                   	push   ebp
c001dd07:	57                   	push   edi
c001dd08:	56                   	push   esi
c001dd09:	53                   	push   ebx
c001dd0a:	83 ec 2c             	sub    esp,0x2c
c001dd0d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dd11:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dd16:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dd1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dd1e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dd22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd26:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd2e:	7e 10                	jle    c001dd40 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dd30:	83 ec 0c             	sub    esp,0xc
c001dd33:	68 00 35 02 c0       	push   0xc0023500
c001dd38:	e8 ca 38 ff ff       	call   c0011607 <KePanic(char const*)>
c001dd3d:	83 c4 10             	add    esp,0x10
c001dd40:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dd46:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dd4c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dd52:	89 e8                	mov    eax,ebp
c001dd54:	c1 e0 07             	shl    eax,0x7
c001dd57:	01 d0                	add    eax,edx
c001dd59:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dd63:	8d 45 02             	lea    eax,[ebp+0x2]
c001dd66:	51                   	push   ecx
c001dd67:	c1 e0 07             	shl    eax,0x7
c001dd6a:	51                   	push   ecx
c001dd6b:	01 d0                	add    eax,edx
c001dd6d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dd71:	50                   	push   eax
c001dd72:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dd78:	e8 6b ec ff ff       	call   c001c9e8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dd7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dd81:	83 c4 10             	add    esp,0x10
c001dd84:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001dd89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd8d:	0f 84 5b 01 00 00    	je     c001deee <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dd93:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd97:	c1 e0 09             	shl    eax,0x9
c001dd9a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dd9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dda3:	74 0e                	je     c001ddb3 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001dda5:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ddab:	89 c1                	mov    ecx,eax
c001ddad:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ddb1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ddb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ddb7:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ddbd:	8d 45 02             	lea    eax,[ebp+0x2]
c001ddc0:	c1 e0 07             	shl    eax,0x7
c001ddc3:	01 d0                	add    eax,edx
c001ddc5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddc7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ddcd:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ddd3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ddd7:	c1 e1 05             	shl    ecx,0x5
c001ddda:	01 c8                	add    eax,ecx
c001dddc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dde0:	83 e1 01             	and    ecx,0x1
c001dde3:	89 ce                	mov    esi,ecx
c001dde5:	8a 08                	mov    cl,BYTE PTR [eax]
c001dde7:	c1 e6 06             	shl    esi,0x6
c001ddea:	83 e1 bf             	and    ecx,0xffffffbf
c001dded:	09 f1                	or     ecx,esi
c001ddef:	88 08                	mov    BYTE PTR [eax],cl
c001ddf1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ddf3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ddf9:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ddff:	89 08                	mov    DWORD PTR [eax],ecx
c001de01:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001de07:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001de0d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001de13:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001de16:	50                   	push   eax
c001de17:	68 90 00 00 00       	push   0x90
c001de1c:	6a 00                	push   0x0
c001de1e:	56                   	push   esi
c001de1f:	e8 cc 26 fe ff       	call   c00004f0 <memset>
c001de24:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001de2a:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001de30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de34:	83 c4 10             	add    esp,0x10
c001de37:	48                   	dec    eax
c001de38:	25 ff ff 3f 00       	and    eax,0x3fffff
c001de3d:	89 c1                	mov    ecx,eax
c001de3f:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001de45:	25 00 00 c0 ff       	and    eax,0xffc00000
c001de4a:	09 c8                	or     eax,ecx
c001de4c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001de52:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001de58:	83 c8 80             	or     eax,0xffffff80
c001de5b:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001de61:	66 8b 06             	mov    ax,WORD PTR [esi]
c001de64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de68:	25 00 7f 00 00       	and    eax,0x7f00
c001de6d:	0d 27 80 ff ff       	or     eax,0xffff8027
c001de72:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001de77:	66 89 06             	mov    WORD PTR [esi],ax
c001de7a:	b0 35                	mov    al,0x35
c001de7c:	75 02                	jne    c001de80 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001de7e:	b0 25                	mov    al,0x25
c001de80:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001de83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de87:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001de8b:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001de8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de93:	c1 e8 10             	shr    eax,0x10
c001de96:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001de99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de9d:	c1 e8 18             	shr    eax,0x18
c001dea0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001dea3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001dea7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001deaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001deae:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001deb1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001deb5:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001deb9:	89 ee                	mov    esi,ebp
c001debb:	31 c0                	xor    eax,eax
c001debd:	c1 e6 07             	shl    esi,0x7
c001dec0:	01 d6                	add    esi,edx
c001dec2:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001dec8:	80 e1 88             	and    cl,0x88
c001decb:	74 0a                	je     c001ded7 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001decd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ded2:	74 0a                	je     c001dede <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ded4:	40                   	inc    eax
c001ded5:	eb eb                	jmp    c001dec2 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001ded7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dedc:	75 17                	jne    c001def5 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001dede:	83 ec 0c             	sub    esp,0xc
c001dee1:	68 39 35 02 c0       	push   0xc0023539
c001dee6:	e8 23 ca fe ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001deeb:	83 c4 10             	add    esp,0x10
c001deee:	b8 01 00 00 00       	mov    eax,0x1
c001def3:	eb 5b                	jmp    c001df50 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001def5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001def9:	c1 e5 07             	shl    ebp,0x7
c001defc:	b8 01 00 00 00       	mov    eax,0x1
c001df01:	01 ea                	add    edx,ebp
c001df03:	d3 e0                	shl    eax,cl
c001df05:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001df0b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001df11:	85 c8                	test   eax,ecx
c001df13:	74 16                	je     c001df2b <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001df15:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001df1b:	0f ba e1 1e          	bt     ecx,0x1e
c001df1f:	73 ea                	jae    c001df0b <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001df21:	83 ec 0c             	sub    esp,0xc
c001df24:	68 47 35 02 c0       	push   0xc0023547
c001df29:	eb bb                	jmp    c001dee6 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001df2b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001df31:	0f ba e0 1e          	bt     eax,0x1e
c001df35:	72 b7                	jb     c001deee <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001df37:	31 c0                	xor    eax,eax
c001df39:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001df3e:	75 10                	jne    c001df50 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001df40:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001df46:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df4a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df50:	83 c4 2c             	add    esp,0x2c
c001df53:	5b                   	pop    ebx
c001df54:	5e                   	pop    esi
c001df55:	5f                   	pop    edi
c001df56:	5d                   	pop    ebp
c001df57:	c3                   	ret    

c001df58 <SATA::read(unsigned long long, int, void*)>:
c001df58:	55                   	push   ebp
c001df59:	57                   	push   edi
c001df5a:	56                   	push   esi
c001df5b:	be 04 00 00 00       	mov    esi,0x4
c001df60:	53                   	push   ebx
c001df61:	83 ec 0c             	sub    esp,0xc
c001df64:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001df68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001df6c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df70:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001df74:	8d 7b ff             	lea    edi,[ebx-0x1]
c001df77:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001df7d:	0f 87 1a 02 00 00    	ja     c001e19d <SATA::read(unsigned long long, int, void*)+0x245>
c001df83:	85 c9                	test   ecx,ecx
c001df85:	be 06 00 00 00       	mov    esi,0x6
c001df8a:	0f 84 0d 02 00 00    	je     c001e19d <SATA::read(unsigned long long, int, void*)+0x245>
c001df90:	56                   	push   esi
c001df91:	56                   	push   esi
c001df92:	6a 00                	push   0x0
c001df94:	51                   	push   ecx
c001df95:	53                   	push   ebx
c001df96:	52                   	push   edx
c001df97:	50                   	push   eax
c001df98:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df9c:	e8 65 fd ff ff       	call   c001dd06 <SATA::access(unsigned long long, int, void*, bool)>
c001dfa1:	83 c4 20             	add    esp,0x20
c001dfa4:	85 c0                	test   eax,eax
c001dfa6:	89 c6                	mov    esi,eax
c001dfa8:	0f 85 ea 01 00 00    	jne    c001e198 <SATA::read(unsigned long long, int, void*)+0x240>
c001dfae:	50                   	push   eax
c001dfaf:	50                   	push   eax
c001dfb0:	6a 0f                	push   0xf
c001dfb2:	6a 00                	push   0x0
c001dfb4:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001dfba:	bb 0a 00 00 00       	mov    ebx,0xa
c001dfbf:	e8 7d f2 ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001dfc4:	5a                   	pop    edx
c001dfc5:	59                   	pop    ecx
c001dfc6:	b9 10 27 00 00       	mov    ecx,0x2710
c001dfcb:	0f b6 c0             	movzx  eax,al
c001dfce:	50                   	push   eax
c001dfcf:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfd4:	99                   	cdq    
c001dfd5:	f7 f9                	idiv   ecx
c001dfd7:	99                   	cdq    
c001dfd8:	f7 fb                	idiv   ebx
c001dfda:	8d 42 30             	lea    eax,[edx+0x30]
c001dfdd:	0f b6 c0             	movzx  eax,al
c001dfe0:	50                   	push   eax
c001dfe1:	e8 4a f2 ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001dfe6:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dfec:	5f                   	pop    edi
c001dfed:	5d                   	pop    ebp
c001dfee:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dff3:	6a 0f                	push   0xf
c001dff5:	6a 00                	push   0x0
c001dff7:	e8 45 f2 ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001dffc:	5a                   	pop    edx
c001dffd:	59                   	pop    ecx
c001dffe:	0f b6 c0             	movzx  eax,al
c001e001:	50                   	push   eax
c001e002:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e007:	99                   	cdq    
c001e008:	f7 fd                	idiv   ebp
c001e00a:	99                   	cdq    
c001e00b:	f7 fb                	idiv   ebx
c001e00d:	8d 42 30             	lea    eax,[edx+0x30]
c001e010:	0f b6 c0             	movzx  eax,al
c001e013:	50                   	push   eax
c001e014:	e8 17 f2 ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e019:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e01f:	5f                   	pop    edi
c001e020:	bf 64 00 00 00       	mov    edi,0x64
c001e025:	58                   	pop    eax
c001e026:	6a 0f                	push   0xf
c001e028:	6a 00                	push   0x0
c001e02a:	e8 12 f2 ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e02f:	5a                   	pop    edx
c001e030:	59                   	pop    ecx
c001e031:	0f b6 c0             	movzx  eax,al
c001e034:	50                   	push   eax
c001e035:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e03a:	99                   	cdq    
c001e03b:	f7 ff                	idiv   edi
c001e03d:	99                   	cdq    
c001e03e:	f7 fb                	idiv   ebx
c001e040:	8d 42 30             	lea    eax,[edx+0x30]
c001e043:	0f b6 c0             	movzx  eax,al
c001e046:	50                   	push   eax
c001e047:	e8 e4 f1 ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e04c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e052:	58                   	pop    eax
c001e053:	5a                   	pop    edx
c001e054:	6a 0f                	push   0xf
c001e056:	6a 00                	push   0x0
c001e058:	e8 e4 f1 ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e05d:	59                   	pop    ecx
c001e05e:	5a                   	pop    edx
c001e05f:	0f b6 c0             	movzx  eax,al
c001e062:	50                   	push   eax
c001e063:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e068:	99                   	cdq    
c001e069:	f7 fb                	idiv   ebx
c001e06b:	99                   	cdq    
c001e06c:	f7 fb                	idiv   ebx
c001e06e:	8d 42 30             	lea    eax,[edx+0x30]
c001e071:	0f b6 c0             	movzx  eax,al
c001e074:	50                   	push   eax
c001e075:	e8 b6 f1 ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e07a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e080:	59                   	pop    ecx
c001e081:	58                   	pop    eax
c001e082:	6a 0f                	push   0xf
c001e084:	6a 00                	push   0x0
c001e086:	e8 b6 f1 ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e08b:	5a                   	pop    edx
c001e08c:	59                   	pop    ecx
c001e08d:	0f b6 c0             	movzx  eax,al
c001e090:	50                   	push   eax
c001e091:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e096:	99                   	cdq    
c001e097:	f7 fb                	idiv   ebx
c001e099:	83 c2 30             	add    edx,0x30
c001e09c:	0f b6 d2             	movzx  edx,dl
c001e09f:	52                   	push   edx
c001e0a0:	e8 8b f1 ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e0a5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e0ab:	58                   	pop    eax
c001e0ac:	5a                   	pop    edx
c001e0ad:	6a 0f                	push   0xf
c001e0af:	6a 00                	push   0x0
c001e0b1:	e8 8b f1 ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e0b6:	59                   	pop    ecx
c001e0b7:	b9 10 27 00 00       	mov    ecx,0x2710
c001e0bc:	5a                   	pop    edx
c001e0bd:	0f b6 c0             	movzx  eax,al
c001e0c0:	50                   	push   eax
c001e0c1:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0c6:	99                   	cdq    
c001e0c7:	f7 f9                	idiv   ecx
c001e0c9:	99                   	cdq    
c001e0ca:	f7 fb                	idiv   ebx
c001e0cc:	8d 42 30             	lea    eax,[edx+0x30]
c001e0cf:	0f b6 c0             	movzx  eax,al
c001e0d2:	50                   	push   eax
c001e0d3:	e8 58 f1 ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e0d8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e0de:	59                   	pop    ecx
c001e0df:	58                   	pop    eax
c001e0e0:	6a 0f                	push   0xf
c001e0e2:	6a 00                	push   0x0
c001e0e4:	e8 58 f1 ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e0e9:	5a                   	pop    edx
c001e0ea:	59                   	pop    ecx
c001e0eb:	0f b6 c0             	movzx  eax,al
c001e0ee:	50                   	push   eax
c001e0ef:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0f4:	99                   	cdq    
c001e0f5:	f7 fd                	idiv   ebp
c001e0f7:	99                   	cdq    
c001e0f8:	f7 fb                	idiv   ebx
c001e0fa:	8d 42 30             	lea    eax,[edx+0x30]
c001e0fd:	0f b6 c0             	movzx  eax,al
c001e100:	50                   	push   eax
c001e101:	e8 2a f1 ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e106:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e10c:	5d                   	pop    ebp
c001e10d:	58                   	pop    eax
c001e10e:	6a 0f                	push   0xf
c001e110:	6a 00                	push   0x0
c001e112:	e8 2a f1 ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e117:	5a                   	pop    edx
c001e118:	59                   	pop    ecx
c001e119:	0f b6 c0             	movzx  eax,al
c001e11c:	50                   	push   eax
c001e11d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e122:	99                   	cdq    
c001e123:	f7 ff                	idiv   edi
c001e125:	99                   	cdq    
c001e126:	f7 fb                	idiv   ebx
c001e128:	8d 42 30             	lea    eax,[edx+0x30]
c001e12b:	0f b6 c0             	movzx  eax,al
c001e12e:	50                   	push   eax
c001e12f:	e8 fc f0 ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e134:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e13a:	5f                   	pop    edi
c001e13b:	5d                   	pop    ebp
c001e13c:	6a 0f                	push   0xf
c001e13e:	6a 00                	push   0x0
c001e140:	e8 fc f0 ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e145:	5a                   	pop    edx
c001e146:	59                   	pop    ecx
c001e147:	0f b6 c0             	movzx  eax,al
c001e14a:	50                   	push   eax
c001e14b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e150:	99                   	cdq    
c001e151:	f7 fb                	idiv   ebx
c001e153:	99                   	cdq    
c001e154:	f7 fb                	idiv   ebx
c001e156:	8d 42 30             	lea    eax,[edx+0x30]
c001e159:	0f b6 c0             	movzx  eax,al
c001e15c:	50                   	push   eax
c001e15d:	e8 ce f0 ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e162:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e168:	5f                   	pop    edi
c001e169:	5d                   	pop    ebp
c001e16a:	6a 0f                	push   0xf
c001e16c:	6a 00                	push   0x0
c001e16e:	e8 ce f0 ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e173:	5a                   	pop    edx
c001e174:	59                   	pop    ecx
c001e175:	0f b6 c0             	movzx  eax,al
c001e178:	50                   	push   eax
c001e179:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e17e:	99                   	cdq    
c001e17f:	f7 fb                	idiv   ebx
c001e181:	83 c2 30             	add    edx,0x30
c001e184:	0f b6 d2             	movzx  edx,dl
c001e187:	52                   	push   edx
c001e188:	e8 a3 f0 ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e18d:	83 c4 10             	add    esp,0x10
c001e190:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e196:	eb 05                	jmp    c001e19d <SATA::read(unsigned long long, int, void*)+0x245>
c001e198:	be 01 00 00 00       	mov    esi,0x1
c001e19d:	83 c4 0c             	add    esp,0xc
c001e1a0:	89 f0                	mov    eax,esi
c001e1a2:	5b                   	pop    ebx
c001e1a3:	5e                   	pop    esi
c001e1a4:	5f                   	pop    edi
c001e1a5:	5d                   	pop    ebp
c001e1a6:	c3                   	ret    
c001e1a7:	90                   	nop

c001e1a8 <SATA::write(unsigned long long, int, void*)>:
c001e1a8:	55                   	push   ebp
c001e1a9:	57                   	push   edi
c001e1aa:	56                   	push   esi
c001e1ab:	53                   	push   ebx
c001e1ac:	83 ec 0c             	sub    esp,0xc
c001e1af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e1b7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e1bf:	8d 70 ff             	lea    esi,[eax-0x1]
c001e1c2:	b8 04 00 00 00       	mov    eax,0x4
c001e1c7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e1cd:	0f 87 2c 02 00 00    	ja     c001e3ff <SATA::write(unsigned long long, int, void*)+0x257>
c001e1d3:	85 db                	test   ebx,ebx
c001e1d5:	b8 06 00 00 00       	mov    eax,0x6
c001e1da:	0f 84 1f 02 00 00    	je     c001e3ff <SATA::write(unsigned long long, int, void*)+0x257>
c001e1e0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e1e4:	c1 e6 09             	shl    esi,0x9
c001e1e7:	01 de                	add    esi,ebx
c001e1e9:	50                   	push   eax
c001e1ea:	89 d7                	mov    edi,edx
c001e1ec:	50                   	push   eax
c001e1ed:	83 c7 01             	add    edi,0x1
c001e1f0:	6a 01                	push   0x1
c001e1f2:	89 cd                	mov    ebp,ecx
c001e1f4:	53                   	push   ebx
c001e1f5:	83 d5 00             	adc    ebp,0x0
c001e1f8:	6a 01                	push   0x1
c001e1fa:	81 c3 00 02 00 00    	add    ebx,0x200
c001e200:	51                   	push   ecx
c001e201:	52                   	push   edx
c001e202:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e206:	e8 fb fa ff ff       	call   c001dd06 <SATA::access(unsigned long long, int, void*, bool)>
c001e20b:	83 c4 20             	add    esp,0x20
c001e20e:	39 f3                	cmp    ebx,esi
c001e210:	89 fa                	mov    edx,edi
c001e212:	89 e9                	mov    ecx,ebp
c001e214:	75 d3                	jne    c001e1e9 <SATA::write(unsigned long long, int, void*)+0x41>
c001e216:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e21a:	bd 10 27 00 00       	mov    ebp,0x2710
c001e21f:	bb 0a 00 00 00       	mov    ebx,0xa
c001e224:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e22a:	50                   	push   eax
c001e22b:	50                   	push   eax
c001e22c:	6a 0f                	push   0xf
c001e22e:	6a 00                	push   0x0
c001e230:	e8 0c f0 ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e235:	5a                   	pop    edx
c001e236:	59                   	pop    ecx
c001e237:	0f b6 c0             	movzx  eax,al
c001e23a:	50                   	push   eax
c001e23b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e240:	99                   	cdq    
c001e241:	f7 fd                	idiv   ebp
c001e243:	99                   	cdq    
c001e244:	f7 fb                	idiv   ebx
c001e246:	8d 42 30             	lea    eax,[edx+0x30]
c001e249:	0f b6 c0             	movzx  eax,al
c001e24c:	50                   	push   eax
c001e24d:	e8 de ef ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e252:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e258:	5e                   	pop    esi
c001e259:	5f                   	pop    edi
c001e25a:	bf e8 03 00 00       	mov    edi,0x3e8
c001e25f:	6a 0f                	push   0xf
c001e261:	6a 00                	push   0x0
c001e263:	e8 d9 ef ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e268:	5a                   	pop    edx
c001e269:	59                   	pop    ecx
c001e26a:	0f b6 c0             	movzx  eax,al
c001e26d:	50                   	push   eax
c001e26e:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e273:	99                   	cdq    
c001e274:	f7 ff                	idiv   edi
c001e276:	99                   	cdq    
c001e277:	f7 fb                	idiv   ebx
c001e279:	8d 42 30             	lea    eax,[edx+0x30]
c001e27c:	0f b6 c0             	movzx  eax,al
c001e27f:	50                   	push   eax
c001e280:	e8 ab ef ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e285:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e28b:	5e                   	pop    esi
c001e28c:	be 64 00 00 00       	mov    esi,0x64
c001e291:	58                   	pop    eax
c001e292:	6a 0f                	push   0xf
c001e294:	6a 00                	push   0x0
c001e296:	e8 a6 ef ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e29b:	5a                   	pop    edx
c001e29c:	59                   	pop    ecx
c001e29d:	0f b6 c0             	movzx  eax,al
c001e2a0:	50                   	push   eax
c001e2a1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2a6:	99                   	cdq    
c001e2a7:	f7 fe                	idiv   esi
c001e2a9:	99                   	cdq    
c001e2aa:	f7 fb                	idiv   ebx
c001e2ac:	8d 42 30             	lea    eax,[edx+0x30]
c001e2af:	0f b6 c0             	movzx  eax,al
c001e2b2:	50                   	push   eax
c001e2b3:	e8 78 ef ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e2b8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e2be:	58                   	pop    eax
c001e2bf:	5a                   	pop    edx
c001e2c0:	6a 0f                	push   0xf
c001e2c2:	6a 00                	push   0x0
c001e2c4:	e8 78 ef ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e2c9:	59                   	pop    ecx
c001e2ca:	5a                   	pop    edx
c001e2cb:	0f b6 c0             	movzx  eax,al
c001e2ce:	50                   	push   eax
c001e2cf:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2d4:	99                   	cdq    
c001e2d5:	f7 fb                	idiv   ebx
c001e2d7:	99                   	cdq    
c001e2d8:	f7 fb                	idiv   ebx
c001e2da:	8d 42 30             	lea    eax,[edx+0x30]
c001e2dd:	0f b6 c0             	movzx  eax,al
c001e2e0:	50                   	push   eax
c001e2e1:	e8 4a ef ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e2e6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e2ec:	59                   	pop    ecx
c001e2ed:	58                   	pop    eax
c001e2ee:	6a 0f                	push   0xf
c001e2f0:	6a 00                	push   0x0
c001e2f2:	e8 4a ef ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e2f7:	5a                   	pop    edx
c001e2f8:	59                   	pop    ecx
c001e2f9:	0f b6 c0             	movzx  eax,al
c001e2fc:	50                   	push   eax
c001e2fd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e302:	99                   	cdq    
c001e303:	f7 fb                	idiv   ebx
c001e305:	83 c2 30             	add    edx,0x30
c001e308:	0f b6 d2             	movzx  edx,dl
c001e30b:	52                   	push   edx
c001e30c:	e8 1f ef ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e311:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e317:	58                   	pop    eax
c001e318:	5a                   	pop    edx
c001e319:	6a 0f                	push   0xf
c001e31b:	6a 00                	push   0x0
c001e31d:	e8 1f ef ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e322:	59                   	pop    ecx
c001e323:	5a                   	pop    edx
c001e324:	0f b6 c0             	movzx  eax,al
c001e327:	50                   	push   eax
c001e328:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e32d:	99                   	cdq    
c001e32e:	f7 fd                	idiv   ebp
c001e330:	99                   	cdq    
c001e331:	f7 fb                	idiv   ebx
c001e333:	8d 42 30             	lea    eax,[edx+0x30]
c001e336:	0f b6 c0             	movzx  eax,al
c001e339:	50                   	push   eax
c001e33a:	e8 f1 ee ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e33f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e345:	59                   	pop    ecx
c001e346:	5d                   	pop    ebp
c001e347:	6a 0f                	push   0xf
c001e349:	6a 00                	push   0x0
c001e34b:	e8 f1 ee ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e350:	5a                   	pop    edx
c001e351:	59                   	pop    ecx
c001e352:	0f b6 c0             	movzx  eax,al
c001e355:	50                   	push   eax
c001e356:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e35b:	99                   	cdq    
c001e35c:	f7 ff                	idiv   edi
c001e35e:	99                   	cdq    
c001e35f:	f7 fb                	idiv   ebx
c001e361:	8d 42 30             	lea    eax,[edx+0x30]
c001e364:	0f b6 c0             	movzx  eax,al
c001e367:	50                   	push   eax
c001e368:	e8 c3 ee ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e36d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e373:	5f                   	pop    edi
c001e374:	5d                   	pop    ebp
c001e375:	6a 0f                	push   0xf
c001e377:	6a 00                	push   0x0
c001e379:	e8 c3 ee ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e37e:	5a                   	pop    edx
c001e37f:	59                   	pop    ecx
c001e380:	0f b6 c0             	movzx  eax,al
c001e383:	50                   	push   eax
c001e384:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e389:	99                   	cdq    
c001e38a:	f7 fe                	idiv   esi
c001e38c:	99                   	cdq    
c001e38d:	f7 fb                	idiv   ebx
c001e38f:	8d 42 30             	lea    eax,[edx+0x30]
c001e392:	0f b6 c0             	movzx  eax,al
c001e395:	50                   	push   eax
c001e396:	e8 95 ee ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e39b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e3a1:	5e                   	pop    esi
c001e3a2:	5f                   	pop    edi
c001e3a3:	6a 0f                	push   0xf
c001e3a5:	6a 00                	push   0x0
c001e3a7:	e8 95 ee ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e3ac:	5d                   	pop    ebp
c001e3ad:	5a                   	pop    edx
c001e3ae:	0f b6 c0             	movzx  eax,al
c001e3b1:	50                   	push   eax
c001e3b2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3b7:	99                   	cdq    
c001e3b8:	f7 fb                	idiv   ebx
c001e3ba:	99                   	cdq    
c001e3bb:	f7 fb                	idiv   ebx
c001e3bd:	8d 42 30             	lea    eax,[edx+0x30]
c001e3c0:	0f b6 c0             	movzx  eax,al
c001e3c3:	50                   	push   eax
c001e3c4:	e8 67 ee ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e3c9:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e3cf:	59                   	pop    ecx
c001e3d0:	5e                   	pop    esi
c001e3d1:	6a 0f                	push   0xf
c001e3d3:	6a 00                	push   0x0
c001e3d5:	e8 67 ee ff ff       	call   c001d241 <combineColours(unsigned char, unsigned char)>
c001e3da:	5f                   	pop    edi
c001e3db:	5d                   	pop    ebp
c001e3dc:	0f b6 c0             	movzx  eax,al
c001e3df:	50                   	push   eax
c001e3e0:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3e5:	99                   	cdq    
c001e3e6:	f7 fb                	idiv   ebx
c001e3e8:	83 c2 30             	add    edx,0x30
c001e3eb:	0f b6 d2             	movzx  edx,dl
c001e3ee:	52                   	push   edx
c001e3ef:	e8 3c ee ff ff       	call   c001d230 <combineCharAndColour(char, unsigned char)>
c001e3f4:	83 c4 10             	add    esp,0x10
c001e3f7:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e3fd:	31 c0                	xor    eax,eax
c001e3ff:	83 c4 0c             	add    esp,0xc
c001e402:	5b                   	pop    ebx
c001e403:	5e                   	pop    esi
c001e404:	5f                   	pop    edi
c001e405:	5d                   	pop    ebp
c001e406:	c3                   	ret    
c001e407:	90                   	nop

c001e408 <SATAPI::write(unsigned long long, int, void*)>:
c001e408:	b8 03 00 00 00       	mov    eax,0x3
c001e40d:	c3                   	ret    

c001e40e <SATAPI::close(int, int, void*)>:
c001e40e:	83 ec 0c             	sub    esp,0xc
c001e411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e415:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e41b:	85 c0                	test   eax,eax
c001e41d:	74 0c                	je     c001e42b <SATAPI::close(int, int, void*)+0x1d>
c001e41f:	8b 10                	mov    edx,DWORD PTR [eax]
c001e421:	83 ec 0c             	sub    esp,0xc
c001e424:	50                   	push   eax
c001e425:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e428:	83 c4 10             	add    esp,0x10
c001e42b:	31 c0                	xor    eax,eax
c001e42d:	83 c4 0c             	add    esp,0xc
c001e430:	c3                   	ret    
c001e431:	90                   	nop

c001e432 <SATAPI::SATAPI()>:
c001e432:	83 ec 0c             	sub    esp,0xc
c001e435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e439:	83 ec 04             	sub    esp,0x4
c001e43c:	68 00 08 00 00       	push   0x800
c001e441:	68 90 35 02 c0       	push   0xc0023590
c001e446:	50                   	push   eax
c001e447:	e8 3a e9 fe ff       	call   c000cd86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e44c:	83 c4 10             	add    esp,0x10
c001e44f:	ba 84 36 02 c0       	mov    edx,0xc0023684
c001e454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e458:	89 10                	mov    DWORD PTR [eax],edx
c001e45a:	90                   	nop
c001e45b:	83 c4 0c             	add    esp,0xc
c001e45e:	c3                   	ret    
c001e45f:	90                   	nop

c001e460 <SATAPI::diskRemoved()>:
c001e460:	c3                   	ret    
c001e461:	90                   	nop

c001e462 <SATAPI::diskInserted()>:
c001e462:	83 ec 18             	sub    esp,0x18
c001e465:	68 9c 35 02 c0       	push   0xc002359c
c001e46a:	e8 9f c4 fe ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001e46f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e473:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e47a:	83 c4 1c             	add    esp,0x1c
c001e47d:	c3                   	ret    

c001e47e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e47e:	55                   	push   ebp
c001e47f:	57                   	push   edi
c001e480:	56                   	push   esi
c001e481:	53                   	push   ebx
c001e482:	83 ec 34             	sub    esp,0x34
c001e485:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e489:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e48d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e491:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e495:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e499:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e49f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e4a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e4a9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e4af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e4b3:	83 c0 02             	add    eax,0x2
c001e4b6:	c1 e0 07             	shl    eax,0x7
c001e4b9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4c5:	c1 e0 07             	shl    eax,0x7
c001e4c8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e4d0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e4da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e4de:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e4e4:	e8 ff e4 ff ff       	call   c001c9e8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e4e9:	83 c4 10             	add    esp,0x10
c001e4ec:	89 c2                	mov    edx,eax
c001e4ee:	b8 01 00 00 00       	mov    eax,0x1
c001e4f3:	83 fa ff             	cmp    edx,0xffffffff
c001e4f6:	0f 84 5f 02 00 00    	je     c001e75b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e4fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e504:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e50a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e50c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e512:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e518:	89 d1                	mov    ecx,edx
c001e51a:	c1 e1 05             	shl    ecx,0x5
c001e51d:	01 c8                	add    eax,ecx
c001e51f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e521:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e527:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e52d:	89 08                	mov    DWORD PTR [eax],ecx
c001e52f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e535:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e53b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e541:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e544:	50                   	push   eax
c001e545:	68 90 00 00 00       	push   0x90
c001e54a:	6a 00                	push   0x0
c001e54c:	53                   	push   ebx
c001e54d:	e8 9e 1f fe ff       	call   c00004f0 <memset>
c001e552:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e555:	b9 0c 00 00 00       	mov    ecx,0xc
c001e55a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e55e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e560:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e566:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e56a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e56e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e574:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e578:	48                   	dec    eax
c001e579:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e57e:	89 c1                	mov    ecx,eax
c001e580:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e586:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e58b:	09 c8                	or     eax,ecx
c001e58d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e593:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e599:	83 c8 80             	or     eax,0xffffff80
c001e59c:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e5a2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e5a5:	25 00 7f 00 00       	and    eax,0x7f00
c001e5aa:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e5af:	66 89 03             	mov    WORD PTR [ebx],ax
c001e5b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5b6:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e5ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5be:	c1 e8 10             	shr    eax,0x10
c001e5c1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e5c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5c8:	c1 e8 18             	shr    eax,0x18
c001e5cb:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e5ce:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e5d2:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e5d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5d9:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e5dc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e5e0:	83 c4 10             	add    esp,0x10
c001e5e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e5e7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e5eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e5ef:	31 c0                	xor    eax,eax
c001e5f1:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e5f7:	80 e1 88             	and    cl,0x88
c001e5fa:	74 0a                	je     c001e606 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e5fc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e601:	74 0a                	je     c001e60d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e603:	40                   	inc    eax
c001e604:	eb eb                	jmp    c001e5f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e606:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e60b:	75 43                	jne    c001e650 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e60d:	83 ec 0c             	sub    esp,0xc
c001e610:	68 b4 35 02 c0       	push   0xc00235b4
c001e615:	e8 f4 c2 fe ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001e61a:	58                   	pop    eax
c001e61b:	5a                   	pop    edx
c001e61c:	68 c9 35 02 c0       	push   0xc00235c9
c001e621:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e627:	e8 84 a4 fe ff       	call   c0008ab0 <VgaText::puts(char const*)>
c001e62c:	59                   	pop    ecx
c001e62d:	5b                   	pop    ebx
c001e62e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e632:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e638:	e8 45 e4 ff ff       	call   c001ca82 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e63d:	5e                   	pop    esi
c001e63e:	5f                   	pop    edi
c001e63f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e643:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e649:	e8 14 e4 ff ff       	call   c001ca62 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e64e:	eb 48                	jmp    c001e698 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e650:	b8 01 00 00 00       	mov    eax,0x1
c001e655:	88 d1                	mov    cl,dl
c001e657:	d3 e0                	shl    eax,cl
c001e659:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e65e:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e664:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e668:	89 c7                	mov    edi,eax
c001e66a:	c1 e3 07             	shl    ebx,0x7
c001e66d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e671:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e677:	85 c7                	test   edi,eax
c001e679:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e67f:	0f 84 a3 00 00 00    	je     c001e728 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e685:	0f ba e0 1e          	bt     eax,0x1e
c001e689:	73 1a                	jae    c001e6a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e68b:	83 ec 0c             	sub    esp,0xc
c001e68e:	68 db 35 02 c0       	push   0xc00235db
c001e693:	e8 76 c2 fe ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001e698:	83 c4 10             	add    esp,0x10
c001e69b:	b8 01 00 00 00       	mov    eax,0x1
c001e6a0:	e9 b6 00 00 00       	jmp    c001e75b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e6a5:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e6ab:	83 f8 0d             	cmp    eax,0xd
c001e6ae:	77 0a                	ja     c001e6ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e6b0:	83 ec 0c             	sub    esp,0xc
c001e6b3:	68 c8 00 00 00       	push   0xc8
c001e6b8:	eb 28                	jmp    c001e6e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e6ba:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e6c0:	83 f8 0d             	cmp    eax,0xd
c001e6c3:	77 0a                	ja     c001e6cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e6c5:	83 ec 0c             	sub    esp,0xc
c001e6c8:	68 58 02 00 00       	push   0x258
c001e6cd:	eb 13                	jmp    c001e6e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e6cf:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e6d5:	83 f8 06             	cmp    eax,0x6
c001e6d8:	77 10                	ja     c001e6ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e6da:	83 ec 0c             	sub    esp,0xc
c001e6dd:	68 dc 05 00 00       	push   0x5dc
c001e6e2:	e8 69 7d ff ff       	call   c0016450 <milliTenthSleep(unsigned int)>
c001e6e7:	83 c4 10             	add    esp,0x10
c001e6ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e6ee:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e6f1:	75 06                	jne    c001e6f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e6f3:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e6f7:	74 15                	je     c001e70e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e6f9:	83 fe 06             	cmp    esi,0x6
c001e6fc:	77 10                	ja     c001e70e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e6fe:	83 ec 0c             	sub    esp,0xc
c001e701:	68 c4 09 00 00       	push   0x9c4
c001e706:	e8 45 7d ff ff       	call   c0016450 <milliTenthSleep(unsigned int)>
c001e70b:	83 c4 10             	add    esp,0x10
c001e70e:	46                   	inc    esi
c001e70f:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e715:	0f 85 56 ff ff ff    	jne    c001e671 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e71b:	83 ec 0c             	sub    esp,0xc
c001e71e:	68 ee 35 02 c0       	push   0xc00235ee
c001e723:	e9 6b ff ff ff       	jmp    c001e693 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e728:	0f ba e0 1e          	bt     eax,0x1e
c001e72c:	73 0d                	jae    c001e73b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e72e:	83 ec 0c             	sub    esp,0xc
c001e731:	68 02 36 02 c0       	push   0xc0023602
c001e736:	e9 58 ff ff ff       	jmp    c001e693 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e73b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e740:	74 17                	je     c001e759 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e742:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e747:	74 10                	je     c001e759 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e749:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e74f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e753:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e757:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e759:	31 c0                	xor    eax,eax
c001e75b:	83 c4 2c             	add    esp,0x2c
c001e75e:	5b                   	pop    ebx
c001e75f:	5e                   	pop    esi
c001e760:	5f                   	pop    edi
c001e761:	5d                   	pop    ebp
c001e762:	c3                   	ret    
c001e763:	90                   	nop

c001e764 <SATAPI::eject()>:
c001e764:	57                   	push   edi
c001e765:	b9 03 00 00 00       	mov    ecx,0x3
c001e76a:	83 ec 18             	sub    esp,0x18
c001e76d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e771:	fc                   	cld    
c001e772:	31 c0                	xor    eax,eax
c001e774:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e776:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e77b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e780:	50                   	push   eax
c001e781:	6a 00                	push   0x0
c001e783:	6a 00                	push   0x0
c001e785:	6a 00                	push   0x0
c001e787:	6a 00                	push   0x0
c001e789:	6a 02                	push   0x2
c001e78b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e78f:	50                   	push   eax
c001e790:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e794:	e8 e5 fc ff ff       	call   c001e47e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e799:	83 c4 38             	add    esp,0x38
c001e79c:	31 c0                	xor    eax,eax
c001e79e:	5f                   	pop    edi
c001e79f:	c3                   	ret    

c001e7a0 <SATAPI::detectMedia()>:
c001e7a0:	53                   	push   ebx
c001e7a1:	83 ec 14             	sub    esp,0x14
c001e7a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e7a8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e7ae:	e8 59 ff fe ff       	call   c000e70c <VCache::writeWriteBuffer()>
c001e7b3:	59                   	pop    ecx
c001e7b4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e7ba:	e8 3d ff fe ff       	call   c000e6fc <VCache::invalidateReadBuffer()>
c001e7bf:	c7 04 24 17 36 02 c0 	mov    DWORD PTR [esp],0xc0023617
c001e7c6:	e8 43 c1 fe ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001e7cb:	83 c4 10             	add    esp,0x10
c001e7ce:	31 c0                	xor    eax,eax
c001e7d0:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e7d7:	85 d2                	test   edx,edx
c001e7d9:	74 0f                	je     c001e7ea <SATAPI::detectMedia()+0x4a>
c001e7db:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e7e1:	75 07                	jne    c001e7ea <SATAPI::detectMedia()+0x4a>
c001e7e3:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e7ea:	40                   	inc    eax
c001e7eb:	83 f8 1a             	cmp    eax,0x1a
c001e7ee:	75 e0                	jne    c001e7d0 <SATAPI::detectMedia()+0x30>
c001e7f0:	83 c4 08             	add    esp,0x8
c001e7f3:	5b                   	pop    ebx
c001e7f4:	c3                   	ret    
c001e7f5:	90                   	nop

c001e7f6 <SATAPI::open(int, int, void*)>:
c001e7f6:	56                   	push   esi
c001e7f7:	53                   	push   ebx
c001e7f8:	51                   	push   ecx
c001e7f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e7fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e801:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e80b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e811:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e815:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e81f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e829:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e830:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e836:	e8 ab 95 fe ff       	call   c0007de6 <Phys::allocatePage()>
c001e83b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e841:	89 c6                	mov    esi,eax
c001e843:	e8 9e 95 fe ff       	call   c0007de6 <Phys::allocatePage()>
c001e848:	81 c6 00 10 00 00    	add    esi,0x1000
c001e84e:	39 c6                	cmp    esi,eax
c001e850:	74 10                	je     c001e862 <SATAPI::open(int, int, void*)+0x6c>
c001e852:	83 ec 0c             	sub    esp,0xc
c001e855:	68 2c 36 02 c0       	push   0xc002362c
c001e85a:	e8 a8 2d ff ff       	call   c0011607 <KePanic(char const*)>
c001e85f:	83 c4 10             	add    esp,0x10
c001e862:	83 ec 0c             	sub    esp,0xc
c001e865:	6a 02                	push   0x2
c001e867:	e8 8d ad fe ff       	call   c00095f9 <Virt::allocateKernelVirtualPages(int)>
c001e86c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e872:	6a 03                	push   0x3
c001e874:	50                   	push   eax
c001e875:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e87b:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e881:	e8 7c b4 fe ff       	call   c0009d02 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e886:	83 c4 14             	add    esp,0x14
c001e889:	68 78 01 00 00       	push   0x178
c001e88e:	e8 44 92 fe ff       	call   c0007ad7 <malloc>
c001e893:	83 c4 0c             	add    esp,0xc
c001e896:	6a 00                	push   0x0
c001e898:	68 ff ff ff 7f       	push   0x7fffffff
c001e89d:	6a 00                	push   0x0
c001e89f:	6a 00                	push   0x0
c001e8a1:	53                   	push   ebx
c001e8a2:	68 42 36 02 c0       	push   0xc0023642
c001e8a7:	89 c6                	mov    esi,eax
c001e8a9:	50                   	push   eax
c001e8aa:	e8 b7 f2 fe ff       	call   c000db66 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e8af:	83 c4 14             	add    esp,0x14
c001e8b2:	56                   	push   esi
c001e8b3:	e8 6e f3 fe ff       	call   c000dc26 <LogicalDisk::assignDriveLetter()>
c001e8b8:	5a                   	pop    edx
c001e8b9:	59                   	pop    ecx
c001e8ba:	0f be c0             	movsx  eax,al
c001e8bd:	50                   	push   eax
c001e8be:	68 94 34 02 c0       	push   0xc0023494
c001e8c3:	e8 46 c0 fe ff       	call   c000a90e <Dbg::kprintf(char const*, ...)>
c001e8c8:	58                   	pop    eax
c001e8c9:	5a                   	pop    edx
c001e8ca:	56                   	push   esi
c001e8cb:	53                   	push   ebx
c001e8cc:	e8 d3 e0 fe ff       	call   c000c9a4 <Device::addChild(Device*)>
c001e8d1:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e8d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8da:	e8 0f e5 fe ff       	call   c000cdee <PhysicalDisk::startCache()>
c001e8df:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e8e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8e9:	e8 b2 fe ff ff       	call   c001e7a0 <SATAPI::detectMedia()>
c001e8ee:	83 c4 14             	add    esp,0x14
c001e8f1:	31 c0                	xor    eax,eax
c001e8f3:	5b                   	pop    ebx
c001e8f4:	5e                   	pop    esi
c001e8f5:	c3                   	ret    

c001e8f6 <SATAPI::read(unsigned long long, int, void*)>:
c001e8f6:	55                   	push   ebp
c001e8f7:	57                   	push   edi
c001e8f8:	56                   	push   esi
c001e8f9:	53                   	push   ebx
c001e8fa:	83 ec 3c             	sub    esp,0x3c
c001e8fd:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e901:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e905:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e909:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e90d:	83 fd 04             	cmp    ebp,0x4
c001e910:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e914:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e918:	7e 10                	jle    c001e92a <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e91a:	83 ec 0c             	sub    esp,0xc
c001e91d:	68 50 36 02 c0       	push   0xc0023650
c001e922:	e8 e0 2c ff ff       	call   c0011607 <KePanic(char const*)>
c001e927:	83 c4 10             	add    esp,0x10
c001e92a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e930:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e936:	51                   	push   ecx
c001e937:	50                   	push   eax
c001e938:	83 c0 02             	add    eax,0x2
c001e93b:	c1 e0 07             	shl    eax,0x7
c001e93e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e944:	50                   	push   eax
c001e945:	52                   	push   edx
c001e946:	e8 61 e1 ff ff       	call   c001caac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e94b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e94f:	b9 03 00 00 00       	mov    ecx,0x3
c001e954:	fc                   	cld    
c001e955:	31 c0                	xor    eax,eax
c001e957:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e959:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e95e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e963:	83 c4 0c             	add    esp,0xc
c001e966:	6a 00                	push   0x0
c001e968:	6a 00                	push   0x0
c001e96a:	6a 00                	push   0x0
c001e96c:	6a 00                	push   0x0
c001e96e:	6a 02                	push   0x2
c001e970:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e974:	50                   	push   eax
c001e975:	53                   	push   ebx
c001e976:	e8 03 fb ff ff       	call   c001e47e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e97b:	83 c4 20             	add    esp,0x20
c001e97e:	85 c0                	test   eax,eax
c001e980:	89 c6                	mov    esi,eax
c001e982:	75 46                	jne    c001e9ca <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e984:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e988:	b9 03 00 00 00       	mov    ecx,0x3
c001e98d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e98f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e993:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e998:	0f c8                	bswap  eax
c001e99a:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e99e:	89 e8                	mov    eax,ebp
c001e9a0:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e9a4:	50                   	push   eax
c001e9a5:	55                   	push   ebp
c001e9a6:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e9aa:	c1 e5 0b             	shl    ebp,0xb
c001e9ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e9b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e9b5:	55                   	push   ebp
c001e9b6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e9ba:	50                   	push   eax
c001e9bb:	53                   	push   ebx
c001e9bc:	e8 bd fa ff ff       	call   c001e47e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e9c1:	83 c4 20             	add    esp,0x20
c001e9c4:	85 c0                	test   eax,eax
c001e9c6:	89 c6                	mov    esi,eax
c001e9c8:	74 0c                	je     c001e9d6 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e9ca:	83 ec 0c             	sub    esp,0xc
c001e9cd:	53                   	push   ebx
c001e9ce:	e8 cd fd ff ff       	call   c001e7a0 <SATAPI::detectMedia()>
c001e9d3:	83 c4 10             	add    esp,0x10
c001e9d6:	83 c4 3c             	add    esp,0x3c
c001e9d9:	89 f0                	mov    eax,esi
c001e9db:	5b                   	pop    ebx
c001e9dc:	5e                   	pop    esi
c001e9dd:	5f                   	pop    edi
c001e9de:	5d                   	pop    ebp
c001e9df:	c3                   	ret    

c001e9e0 <IOAPIC::close(int, int, void*)>:
c001e9e0:	b8 00 00 00 00       	mov    eax,0x0
c001e9e5:	c3                   	ret    

c001e9e6 <apicGetBase()>:
c001e9e6:	55                   	push   ebp
c001e9e7:	89 e5                	mov    ebp,esp
c001e9e9:	83 ec 18             	sub    esp,0x18
c001e9ec:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9f1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e9f7:	83 e0 08             	and    eax,0x8
c001e9fa:	0f b6 c0             	movzx  eax,al
c001e9fd:	85 c0                	test   eax,eax
c001e9ff:	75 07                	jne    c001ea08 <apicGetBase()+0x22>
c001ea01:	b8 00 00 00 00       	mov    eax,0x0
c001ea06:	eb 21                	jmp    c001ea29 <apicGetBase()+0x43>
c001ea08:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea0d:	83 ec 08             	sub    esp,0x8
c001ea10:	6a 1b                	push   0x1b
c001ea12:	50                   	push   eax
c001ea13:	e8 ce 86 fe ff       	call   c00070e6 <Computer::rdmsr(unsigned int)>
c001ea18:	83 c4 10             	add    esp,0x10
c001ea1b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ea1e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001ea21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea24:	25 00 00 ff ff       	and    eax,0xffff0000
c001ea29:	c9                   	leave  
c001ea2a:	c3                   	ret    
c001ea2b:	90                   	nop

c001ea2c <IOAPIC::IOAPIC()>:
c001ea2c:	83 ec 0c             	sub    esp,0xc
c001ea2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea33:	83 ec 08             	sub    esp,0x8
c001ea36:	68 b4 36 02 c0       	push   0xc00236b4
c001ea3b:	50                   	push   eax
c001ea3c:	e8 c5 e0 fe ff       	call   c000cb06 <Device::Device(char const*)>
c001ea41:	83 c4 10             	add    esp,0x10
c001ea44:	ba c4 36 02 c0       	mov    edx,0xc00236c4
c001ea49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4d:	89 10                	mov    DWORD PTR [eax],edx
c001ea4f:	90                   	nop
c001ea50:	83 c4 0c             	add    esp,0xc
c001ea53:	c3                   	ret    

c001ea54 <apicOpen()>:
c001ea54:	55                   	push   ebp
c001ea55:	89 e5                	mov    ebp,esp
c001ea57:	53                   	push   ebx
c001ea58:	83 ec 34             	sub    esp,0x34
c001ea5b:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001ea60:	83 f0 01             	xor    eax,0x1
c001ea63:	0f b6 c0             	movzx  eax,al
c001ea66:	85 c0                	test   eax,eax
c001ea68:	0f 84 a3 00 00 00    	je     c001eb11 <apicOpen()+0xbd>
c001ea6e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ea72:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001ea77:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea7b:	0f b6 c0             	movzx  eax,al
c001ea7e:	39 c2                	cmp    edx,eax
c001ea80:	0f 83 84 00 00 00    	jae    c001eb0a <apicOpen()+0xb6>
c001ea86:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ea8d:	83 ec 0c             	sub    esp,0xc
c001ea90:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ea93:	e8 3f 90 fe ff       	call   c0007ad7 <malloc>
c001ea98:	83 c4 10             	add    esp,0x10
c001ea9b:	89 c3                	mov    ebx,eax
c001ea9d:	83 ec 0c             	sub    esp,0xc
c001eaa0:	53                   	push   ebx
c001eaa1:	e8 86 ff ff ff       	call   c001ea2c <IOAPIC::IOAPIC()>
c001eaa6:	83 c4 10             	add    esp,0x10
c001eaa9:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001eaac:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001eab0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001eab3:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001eaba:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001eabf:	83 c0 01             	add    eax,0x1
c001eac2:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001eac7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001eacc:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ead2:	83 ec 08             	sub    esp,0x8
c001ead5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ead8:	50                   	push   eax
c001ead9:	e8 c6 de fe ff       	call   c000c9a4 <Device::addChild(Device*)>
c001eade:	83 c4 10             	add    esp,0x10
c001eae1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eae4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae6:	83 c0 08             	add    eax,0x8
c001eae9:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaeb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eaef:	6a 00                	push   0x0
c001eaf1:	6a 00                	push   0x0
c001eaf3:	52                   	push   edx
c001eaf4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eaf7:	ff d0                	call   eax
c001eaf9:	83 c4 10             	add    esp,0x10
c001eafc:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eaff:	83 c0 01             	add    eax,0x1
c001eb02:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001eb05:	e9 68 ff ff ff       	jmp    c001ea72 <apicOpen()+0x1e>
c001eb0a:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eb11:	e8 d0 fe ff ff       	call   c001e9e6 <apicGetBase()>
c001eb16:	05 f0 00 00 00       	add    eax,0xf0
c001eb1b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eb1e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb21:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb23:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eb26:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eb2d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eb34:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb37:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb3a:	89 10                	mov    DWORD PTR [eax],edx
c001eb3c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eb43:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eb48:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eb4b:	7d 7c                	jge    c001ebc9 <apicOpen()+0x175>
c001eb4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb50:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb57:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eb5a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb5d:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb64:	c1 e8 08             	shr    eax,0x8
c001eb67:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eb6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb6e:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb75:	c1 e8 18             	shr    eax,0x18
c001eb78:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eb7b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eb7f:	3d ff 00 00 00       	cmp    eax,0xff
c001eb84:	75 3a                	jne    c001ebc0 <apicOpen()+0x16c>
c001eb86:	e8 5b fe ff ff       	call   c001e9e6 <apicGetBase()>
c001eb8b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eb8f:	83 fa 01             	cmp    edx,0x1
c001eb92:	75 07                	jne    c001eb9b <apicOpen()+0x147>
c001eb94:	ba 60 03 00 00       	mov    edx,0x360
c001eb99:	eb 05                	jmp    c001eba0 <apicOpen()+0x14c>
c001eb9b:	ba 50 03 00 00       	mov    edx,0x350
c001eba0:	01 d0                	add    eax,edx
c001eba2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eba5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eba8:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebaa:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ebad:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ebb4:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ebb8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ebbb:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ebbe:	89 10                	mov    DWORD PTR [eax],edx
c001ebc0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ebc4:	e9 7a ff ff ff       	jmp    c001eb43 <apicOpen()+0xef>
c001ebc9:	90                   	nop
c001ebca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ebcd:	c9                   	leave  
c001ebce:	c3                   	ret    
c001ebcf:	90                   	nop

c001ebd0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ebd0:	55                   	push   ebp
c001ebd1:	89 e5                	mov    ebp,esp
c001ebd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebd6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ebdc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ebdf:	72 1d                	jb     c001ebfe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ebe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebe4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ebea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebed:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ebf3:	01 d0                	add    eax,edx
c001ebf5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ebf8:	73 04                	jae    c001ebfe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ebfa:	b0 01                	mov    al,0x1
c001ebfc:	eb 02                	jmp    c001ec00 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ebfe:	b0 00                	mov    al,0x0
c001ec00:	5d                   	pop    ebp
c001ec01:	c3                   	ret    

c001ec02 <IOAPIC::read(int)>:
c001ec02:	55                   	push   ebp
c001ec03:	89 e5                	mov    ebp,esp
c001ec05:	83 ec 10             	sub    esp,0x10
c001ec08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec0b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec11:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec17:	0f b6 d0             	movzx  edx,al
c001ec1a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec1d:	89 10                	mov    DWORD PTR [eax],edx
c001ec1f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec22:	83 c0 10             	add    eax,0x10
c001ec25:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec27:	c9                   	leave  
c001ec28:	c3                   	ret    
c001ec29:	90                   	nop

c001ec2a <IOAPIC::open(int, int, void*)>:
c001ec2a:	55                   	push   ebp
c001ec2b:	89 e5                	mov    ebp,esp
c001ec2d:	57                   	push   edi
c001ec2e:	56                   	push   esi
c001ec2f:	53                   	push   ebx
c001ec30:	83 ec 04             	sub    esp,0x4
c001ec33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec36:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ec39:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec42:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec48:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ec4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec52:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec5b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec61:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ec68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec6b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ec71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec74:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ec7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec7d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec83:	0f b6 f0             	movzx  esi,al
c001ec86:	89 d0                	mov    eax,edx
c001ec88:	ba 00 00 00 00       	mov    edx,0x0
c001ec8d:	89 c7                	mov    edi,eax
c001ec8f:	83 e7 ff             	and    edi,0xffffffff
c001ec92:	89 f9                	mov    ecx,edi
c001ec94:	0f b6 da             	movzx  ebx,dl
c001ec97:	89 c8                	mov    eax,ecx
c001ec99:	89 da                	mov    edx,ebx
c001ec9b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ec9e:	8d 5e 08             	lea    ebx,[esi+0x8]
c001eca1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001eca5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001eca9:	83 e0 00             	and    eax,0x0
c001ecac:	09 d0                	or     eax,edx
c001ecae:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ecb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecb5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ecbb:	8d 50 01             	lea    edx,[eax+0x1]
c001ecbe:	88 d1                	mov    cl,dl
c001ecc0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ecc3:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ecc9:	0f b6 d0             	movzx  edx,al
c001eccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eccf:	83 c2 08             	add    edx,0x8
c001ecd2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ecd6:	0f b6 c9             	movzx  ecx,cl
c001ecd9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ecdf:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ece3:	6a 01                	push   0x1
c001ece5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ece8:	e8 15 ff ff ff       	call   c001ec02 <IOAPIC::read(int)>
c001eced:	83 c4 08             	add    esp,0x8
c001ecf0:	c1 f8 10             	sar    eax,0x10
c001ecf3:	0f b6 c0             	movzx  eax,al
c001ecf6:	8d 50 01             	lea    edx,[eax+0x1]
c001ecf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecfc:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ed02:	b8 00 00 00 00       	mov    eax,0x0
c001ed07:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ed0a:	5b                   	pop    ebx
c001ed0b:	5e                   	pop    esi
c001ed0c:	5f                   	pop    edi
c001ed0d:	5d                   	pop    ebp
c001ed0e:	c3                   	ret    
c001ed0f:	90                   	nop

c001ed10 <IOAPIC::write(int, int)>:
c001ed10:	55                   	push   ebp
c001ed11:	89 e5                	mov    ebp,esp
c001ed13:	83 ec 10             	sub    esp,0x10
c001ed16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed19:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed1f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ed22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed25:	0f b6 d0             	movzx  edx,al
c001ed28:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed2b:	89 10                	mov    DWORD PTR [eax],edx
c001ed2d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed30:	8d 50 10             	lea    edx,[eax+0x10]
c001ed33:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed36:	89 02                	mov    DWORD PTR [edx],eax
c001ed38:	90                   	nop
c001ed39:	c9                   	leave  
c001ed3a:	c3                   	ret    
c001ed3b:	90                   	nop

c001ed3c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ed3c:	55                   	push   ebp
c001ed3d:	89 e5                	mov    ebp,esp
c001ed3f:	53                   	push   ebx
c001ed40:	83 ec 2c             	sub    esp,0x2c
c001ed43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed46:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ed49:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ed4c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ed4f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ed52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed55:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ed58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ed5b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ed5e:	88 d8                	mov    al,bl
c001ed60:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ed63:	88 c8                	mov    al,cl
c001ed65:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ed68:	88 d0                	mov    al,dl
c001ed6a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ed6d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed71:	83 c0 08             	add    eax,0x8
c001ed74:	d1 e0                	shl    eax,1
c001ed76:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ed79:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed7d:	83 c0 08             	add    eax,0x8
c001ed80:	d1 e0                	shl    eax,1
c001ed82:	83 c0 01             	add    eax,0x1
c001ed85:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ed88:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed8b:	50                   	push   eax
c001ed8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed8f:	e8 6e fe ff ff       	call   c001ec02 <IOAPIC::read(int)>
c001ed94:	83 c4 08             	add    esp,0x8
c001ed97:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ed9a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001eda1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eda4:	c1 e0 18             	shl    eax,0x18
c001eda7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001edaa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001edad:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001edb0:	52                   	push   edx
c001edb1:	50                   	push   eax
c001edb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edb5:	e8 56 ff ff ff       	call   c001ed10 <IOAPIC::write(int, int)>
c001edba:	83 c4 0c             	add    esp,0xc
c001edbd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edc0:	50                   	push   eax
c001edc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edc4:	e8 39 fe ff ff       	call   c001ec02 <IOAPIC::read(int)>
c001edc9:	83 c4 08             	add    esp,0x8
c001edcc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001edcf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001edd6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001eddd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ede4:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ede8:	85 c0                	test   eax,eax
c001edea:	74 09                	je     c001edf5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001edec:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001edf3:	eb 07                	jmp    c001edfc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001edf5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001edfc:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ee00:	85 c0                	test   eax,eax
c001ee02:	74 09                	je     c001ee0d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ee04:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ee0b:	eb 07                	jmp    c001ee14 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ee0d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ee14:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ee1b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ee1f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ee22:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ee25:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee28:	52                   	push   edx
c001ee29:	50                   	push   eax
c001ee2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee2d:	e8 de fe ff ff       	call   c001ed10 <IOAPIC::write(int, int)>
c001ee32:	83 c4 0c             	add    esp,0xc
c001ee35:	90                   	nop
c001ee36:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee39:	c9                   	leave  
c001ee3a:	c3                   	ret    
c001ee3b:	90                   	nop

c001ee3c <APICTimer::close(int, int, void*)>:
c001ee3c:	b8 00 00 00 00       	mov    eax,0x0
c001ee41:	c3                   	ret    
c001ee42:	66 90                	xchg   ax,ax

c001ee44 <apicTimerHandler(regs*, void*)>:
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee4b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ee4d:	b8 10 27 00 00       	mov    eax,0x2710
c001ee52:	ba 00 00 00 00       	mov    edx,0x0
c001ee57:	f7 f1                	div    ecx
c001ee59:	83 ec 0c             	sub    esp,0xc
c001ee5c:	50                   	push   eax
c001ee5d:	e8 c2 f5 fe ff       	call   c000e424 <timerHandler(unsigned int)>
c001ee62:	83 c4 10             	add    esp,0x10
c001ee65:	90                   	nop
c001ee66:	83 c4 0c             	add    esp,0xc
c001ee69:	c3                   	ret    
c001ee6a:	66 90                	xchg   ax,ax

c001ee6c <APICTimer::open(int, int, void*)>:
c001ee6c:	83 ec 0c             	sub    esp,0xc
c001ee6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee73:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee75:	83 c0 24             	add    eax,0x24
c001ee78:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee7a:	83 ec 08             	sub    esp,0x8
c001ee7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee85:	ff d0                	call   eax
c001ee87:	83 c4 10             	add    esp,0x10
c001ee8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee92:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eea0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001eea6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eeaa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001eeb0:	83 ec 0c             	sub    esp,0xc
c001eeb3:	51                   	push   ecx
c001eeb4:	6a 01                	push   0x1
c001eeb6:	68 44 ee 01 c0       	push   0xc001ee44
c001eebb:	52                   	push   edx
c001eebc:	50                   	push   eax
c001eebd:	e8 8e da fe ff       	call   c000c950 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eec2:	83 c4 20             	add    esp,0x20
c001eec5:	89 c2                	mov    edx,eax
c001eec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eed1:	b8 00 00 00 00       	mov    eax,0x0
c001eed6:	83 c4 0c             	add    esp,0xc
c001eed9:	c3                   	ret    
c001eeda:	66 90                	xchg   ax,ax

c001eedc <APICTimer::write(int)>:
c001eedc:	83 ec 0c             	sub    esp,0xc
c001eedf:	83 ec 0c             	sub    esp,0xc
c001eee2:	68 e8 36 02 c0       	push   0xc00236e8
c001eee7:	e8 1b 27 ff ff       	call   c0011607 <KePanic(char const*)>
c001eeec:	83 c4 10             	add    esp,0x10
c001eeef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eef7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eefd:	90                   	nop
c001eefe:	83 c4 0c             	add    esp,0xc
c001ef01:	c3                   	ret    
c001ef02:	66 90                	xchg   ax,ax

c001ef04 <APICTimer::APICTimer()>:
c001ef04:	83 ec 0c             	sub    esp,0xc
c001ef07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0b:	83 ec 08             	sub    esp,0x8
c001ef0e:	68 f8 36 02 c0       	push   0xc00236f8
c001ef13:	50                   	push   eax
c001ef14:	e8 3f f4 fe ff       	call   c000e358 <Timer::Timer(char const*)>
c001ef19:	83 c4 10             	add    esp,0x10
c001ef1c:	ba 0c 37 02 c0       	mov    edx,0xc002370c
c001ef21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef25:	89 10                	mov    DWORD PTR [eax],edx
c001ef27:	90                   	nop
c001ef28:	83 c4 0c             	add    esp,0xc
c001ef2b:	c3                   	ret    

c001ef2c <PIT::write(int)>:
c001ef2c:	83 ec 10             	sub    esp,0x10
c001ef2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef37:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef41:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ef46:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ef4b:	89 c2                	mov    edx,eax
c001ef4d:	c1 fa 1f             	sar    edx,0x1f
c001ef50:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ef54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef58:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ef5f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ef64:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ef68:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ef6d:	ee                   	out    dx,al
c001ef6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef72:	0f b6 c0             	movzx  eax,al
c001ef75:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ef7c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ef80:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ef84:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ef89:	ee                   	out    dx,al
c001ef8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef8e:	c1 f8 08             	sar    eax,0x8
c001ef91:	0f b6 c0             	movzx  eax,al
c001ef94:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ef9b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ef9f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001efa3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001efa8:	ee                   	out    dx,al
c001efa9:	90                   	nop
c001efaa:	83 c4 10             	add    esp,0x10
c001efad:	c3                   	ret    
c001efae:	66 90                	xchg   ax,ax

c001efb0 <pitHandler(regs*, void*)>:
c001efb0:	83 ec 0c             	sub    esp,0xc
c001efb3:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001efb9:	b8 10 27 00 00       	mov    eax,0x2710
c001efbe:	89 c2                	mov    edx,eax
c001efc0:	c1 fa 1f             	sar    edx,0x1f
c001efc3:	f7 f9                	idiv   ecx
c001efc5:	83 ec 0c             	sub    esp,0xc
c001efc8:	50                   	push   eax
c001efc9:	e8 56 f4 fe ff       	call   c000e424 <timerHandler(unsigned int)>
c001efce:	83 c4 10             	add    esp,0x10
c001efd1:	90                   	nop
c001efd2:	83 c4 0c             	add    esp,0xc
c001efd5:	c3                   	ret    
c001efd6:	66 90                	xchg   ax,ax

c001efd8 <PIT::open(int, int, void*)>:
c001efd8:	83 ec 0c             	sub    esp,0xc
c001efdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efdf:	8b 00                	mov    eax,DWORD PTR [eax]
c001efe1:	83 c0 24             	add    eax,0x24
c001efe4:	8b 00                	mov    eax,DWORD PTR [eax]
c001efe6:	83 ec 08             	sub    esp,0x8
c001efe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff1:	ff d0                	call   eax
c001eff3:	83 c4 10             	add    esp,0x10
c001eff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001effa:	83 ec 0c             	sub    esp,0xc
c001effd:	6a 00                	push   0x0
c001efff:	6a 01                	push   0x1
c001f001:	68 b0 ef 01 c0       	push   0xc001efb0
c001f006:	6a 00                	push   0x0
c001f008:	50                   	push   eax
c001f009:	e8 42 d9 fe ff       	call   c000c950 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f00e:	83 c4 20             	add    esp,0x20
c001f011:	89 c2                	mov    edx,eax
c001f013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f017:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f01d:	b8 00 00 00 00       	mov    eax,0x0
c001f022:	83 c4 0c             	add    esp,0xc
c001f025:	c3                   	ret    
c001f026:	66 90                	xchg   ax,ax

c001f028 <PIT::close(int, int, void*)>:
c001f028:	83 ec 0c             	sub    esp,0xc
c001f02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f03d:	6a 01                	push   0x1
c001f03f:	68 b0 ef 01 c0       	push   0xc001efb0
c001f044:	6a 00                	push   0x0
c001f046:	50                   	push   eax
c001f047:	e8 3a d9 fe ff       	call   c000c986 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f04c:	83 c4 10             	add    esp,0x10
c001f04f:	b8 00 00 00 00       	mov    eax,0x0
c001f054:	83 c4 0c             	add    esp,0xc
c001f057:	c3                   	ret    

c001f058 <PIT::PIT()>:
c001f058:	83 ec 0c             	sub    esp,0xc
c001f05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05f:	83 ec 08             	sub    esp,0x8
c001f062:	68 34 37 02 c0       	push   0xc0023734
c001f067:	50                   	push   eax
c001f068:	e8 eb f2 fe ff       	call   c000e358 <Timer::Timer(char const*)>
c001f06d:	83 c4 10             	add    esp,0x10
c001f070:	ba 5c 37 02 c0       	mov    edx,0xc002375c
c001f075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f079:	89 10                	mov    DWORD PTR [eax],edx
c001f07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f085:	0f b6 d0             	movzx  edx,al
c001f088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f097:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f09d:	0f b6 d0             	movzx  edx,al
c001f0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0b3:	8d 50 01             	lea    edx,[eax+0x1]
c001f0b6:	88 d1                	mov    cl,dl
c001f0b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0bc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f0c2:	0f b6 d0             	movzx  edx,al
c001f0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f0cd:	83 e1 3f             	and    ecx,0x3f
c001f0d0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f0d4:	90                   	nop
c001f0d5:	83 c4 0c             	add    esp,0xc
c001f0d8:	c3                   	ret    
c001f0d9:	66 90                	xchg   ax,ax
c001f0db:	66 90                	xchg   ax,ax
c001f0dd:	66 90                	xchg   ax,ax
c001f0df:	90                   	nop

c001f0e0 <avxDetect>:
c001f0e0:	b8 01 00 00 00       	mov    eax,0x1
c001f0e5:	0f a2                	cpuid  
c001f0e7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f0ed:	74 15                	je     c001f104 <avxDetect.noAVX>
c001f0ef:	b8 01 00 00 00       	mov    eax,0x1
c001f0f4:	0f a2                	cpuid  
c001f0f6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f0fc:	74 06                	je     c001f104 <avxDetect.noAVX>
c001f0fe:	b8 01 00 00 00       	mov    eax,0x1
c001f103:	c3                   	ret    

c001f104 <avxDetect.noAVX>:
c001f104:	b8 00 00 00 00       	mov    eax,0x0
c001f109:	c3                   	ret    

c001f10a <avxSave>:
c001f10a:	53                   	push   ebx
c001f10b:	52                   	push   edx
c001f10c:	31 c0                	xor    eax,eax
c001f10e:	48                   	dec    eax
c001f10f:	89 c2                	mov    edx,eax
c001f111:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f115:	0f ae 23             	xsave  [ebx]
c001f118:	5a                   	pop    edx
c001f119:	5b                   	pop    ebx
c001f11a:	c3                   	ret    

c001f11b <avxLoad>:
c001f11b:	53                   	push   ebx
c001f11c:	52                   	push   edx
c001f11d:	31 c0                	xor    eax,eax
c001f11f:	48                   	dec    eax
c001f120:	89 c2                	mov    edx,eax
c001f122:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f126:	0f ae 2b             	xrstor [ebx]
c001f129:	5a                   	pop    edx
c001f12a:	5b                   	pop    ebx
c001f12b:	c3                   	ret    

c001f12c <avxInit>:
c001f12c:	e8 67 03 00 00       	call   c001f498 <sseInit>
c001f131:	50                   	push   eax
c001f132:	51                   	push   ecx
c001f133:	0f 20 e0             	mov    eax,cr4
c001f136:	0d 00 00 04 00       	or     eax,0x40000
c001f13b:	0f 22 e0             	mov    cr4,eax
c001f13e:	31 c9                	xor    ecx,ecx
c001f140:	0f 01 d0             	xgetbv 
c001f143:	0d 07 00 00 00       	or     eax,0x7
c001f148:	0f 01 d1             	xsetbv 
c001f14b:	59                   	pop    ecx
c001f14c:	58                   	pop    eax
c001f14d:	c3                   	ret    

c001f14e <avxClose>:
c001f14e:	c3                   	ret    

c001f14f <wouldSheSayYes>:
c001f14f:	c3                   	ret    
c001f150:	49                   	dec    ecx
c001f151:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f155:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f159:	75 20                	jne    c001f17b <isr0+0xb>
c001f15b:	4e                   	dec    esi
c001f15c:	79 61                	jns    c001f1bf <isr7+0x3>
c001f15e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f163:	66 90                	xchg   ax,ax
c001f165:	66 90                	xchg   ax,ax
c001f167:	66 90                	xchg   ax,ax
c001f169:	66 90                	xchg   ax,ax
c001f16b:	66 90                	xchg   ax,ax
c001f16d:	66 90                	xchg   ax,ax
c001f16f:	90                   	nop

c001f170 <isr0>:
c001f170:	fa                   	cli    
c001f171:	68 00 00 00 00       	push   0x0
c001f176:	68 00 00 00 00       	push   0x0
c001f17b:	e9 56 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f180 <isr1>:
c001f180:	fa                   	cli    
c001f181:	6a 00                	push   0x0
c001f183:	6a 01                	push   0x1
c001f185:	e9 4c 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f18a <isr2>:
c001f18a:	fa                   	cli    
c001f18b:	6a 00                	push   0x0
c001f18d:	6a 02                	push   0x2
c001f18f:	e9 42 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f194 <isr3>:
c001f194:	fa                   	cli    
c001f195:	6a 00                	push   0x0
c001f197:	6a 03                	push   0x3
c001f199:	e9 38 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f19e <isr4>:
c001f19e:	fa                   	cli    
c001f19f:	6a 00                	push   0x0
c001f1a1:	6a 04                	push   0x4
c001f1a3:	e9 2e 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1a8 <isr5>:
c001f1a8:	fa                   	cli    
c001f1a9:	6a 00                	push   0x0
c001f1ab:	6a 05                	push   0x5
c001f1ad:	e9 24 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1b2 <isr6>:
c001f1b2:	fa                   	cli    
c001f1b3:	6a 00                	push   0x0
c001f1b5:	6a 06                	push   0x6
c001f1b7:	e9 1a 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1bc <isr7>:
c001f1bc:	fa                   	cli    
c001f1bd:	6a 00                	push   0x0
c001f1bf:	6a 07                	push   0x7
c001f1c1:	e9 10 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1c6 <isr8>:
c001f1c6:	fa                   	cli    
c001f1c7:	6a 08                	push   0x8
c001f1c9:	e9 08 01 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1ce <isr9>:
c001f1ce:	fa                   	cli    
c001f1cf:	6a 00                	push   0x0
c001f1d1:	6a 09                	push   0x9
c001f1d3:	e9 fe 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1d8 <isr10>:
c001f1d8:	fa                   	cli    
c001f1d9:	6a 0a                	push   0xa
c001f1db:	e9 f6 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1e0 <isr11>:
c001f1e0:	fa                   	cli    
c001f1e1:	6a 0b                	push   0xb
c001f1e3:	e9 ee 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1e8 <isr12>:
c001f1e8:	fa                   	cli    
c001f1e9:	6a 0c                	push   0xc
c001f1eb:	e9 e6 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f1f0 <isr13>:
c001f1f0:	fa                   	cli    
c001f1f1:	6a 0d                	push   0xd
c001f1f3:	53                   	push   ebx
c001f1f4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1f8:	81 fb c6 f3 01 c0    	cmp    ebx,0xc001f3c6
c001f1fe:	5b                   	pop    ebx
c001f1ff:	0f 84 c3 01 00 00    	je     c001f3c8 <finishSignal2>
c001f205:	e9 cc 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f20a <isr14>:
c001f20a:	fa                   	cli    
c001f20b:	6a 0e                	push   0xe
c001f20d:	e9 c4 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f212 <isr15>:
c001f212:	fa                   	cli    
c001f213:	6a 00                	push   0x0
c001f215:	6a 0f                	push   0xf
c001f217:	e9 ba 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f21c <isr16>:
c001f21c:	fa                   	cli    
c001f21d:	6a 00                	push   0x0
c001f21f:	6a 10                	push   0x10
c001f221:	e9 b0 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f226 <isr17>:
c001f226:	fa                   	cli    
c001f227:	6a 00                	push   0x0
c001f229:	6a 11                	push   0x11
c001f22b:	e9 a6 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f230 <isr18>:
c001f230:	fa                   	cli    
c001f231:	6a 00                	push   0x0
c001f233:	6a 12                	push   0x12
c001f235:	e9 9c 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f23a <irq3>:
c001f23a:	fa                   	cli    
c001f23b:	6a 00                	push   0x0
c001f23d:	6a 23                	push   0x23
c001f23f:	e9 92 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f244 <irq4>:
c001f244:	fa                   	cli    
c001f245:	6a 00                	push   0x0
c001f247:	6a 24                	push   0x24
c001f249:	e9 88 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f24e <irq5>:
c001f24e:	fa                   	cli    
c001f24f:	6a 00                	push   0x0
c001f251:	6a 25                	push   0x25
c001f253:	e9 7e 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f258 <irq6>:
c001f258:	fa                   	cli    
c001f259:	6a 00                	push   0x0
c001f25b:	6a 26                	push   0x26
c001f25d:	e9 74 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f262 <irq7>:
c001f262:	fa                   	cli    
c001f263:	6a 00                	push   0x0
c001f265:	6a 27                	push   0x27
c001f267:	e9 6a 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f26c <irq8>:
c001f26c:	fa                   	cli    
c001f26d:	6a 00                	push   0x0
c001f26f:	6a 28                	push   0x28
c001f271:	e9 60 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f276 <irq9>:
c001f276:	fa                   	cli    
c001f277:	6a 00                	push   0x0
c001f279:	6a 29                	push   0x29
c001f27b:	e9 56 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f280 <irq10>:
c001f280:	fa                   	cli    
c001f281:	6a 00                	push   0x0
c001f283:	6a 2a                	push   0x2a
c001f285:	e9 4c 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f28a <irq11>:
c001f28a:	fa                   	cli    
c001f28b:	6a 00                	push   0x0
c001f28d:	6a 2b                	push   0x2b
c001f28f:	e9 42 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f294 <irq12>:
c001f294:	fa                   	cli    
c001f295:	6a 00                	push   0x0
c001f297:	6a 2c                	push   0x2c
c001f299:	e9 38 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f29e <irq13>:
c001f29e:	fa                   	cli    
c001f29f:	6a 00                	push   0x0
c001f2a1:	6a 2d                	push   0x2d
c001f2a3:	e9 2e 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f2a8 <irq14>:
c001f2a8:	fa                   	cli    
c001f2a9:	6a 00                	push   0x0
c001f2ab:	6a 2e                	push   0x2e
c001f2ad:	e9 24 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f2b2 <irq15>:
c001f2b2:	fa                   	cli    
c001f2b3:	6a 00                	push   0x0
c001f2b5:	6a 2f                	push   0x2f
c001f2b7:	e9 1a 00 00 00       	jmp    c001f2d6 <int_common_stub>

c001f2bc <irq1>:
c001f2bc:	fa                   	cli    
c001f2bd:	6a 00                	push   0x0
c001f2bf:	6a 21                	push   0x21
c001f2c1:	eb 13                	jmp    c001f2d6 <int_common_stub>

c001f2c3 <irq2>:
c001f2c3:	fa                   	cli    
c001f2c4:	6a 00                	push   0x0
c001f2c6:	6a 22                	push   0x22
c001f2c8:	eb 0c                	jmp    c001f2d6 <int_common_stub>

c001f2ca <isr96>:
c001f2ca:	6a 00                	push   0x0
c001f2cc:	6a 60                	push   0x60
c001f2ce:	fb                   	sti    
c001f2cf:	eb 37                	jmp    c001f308 <syscall_common_stub>

c001f2d1 <irq0>:
c001f2d1:	fa                   	cli    
c001f2d2:	6a 00                	push   0x0
c001f2d4:	6a 20                	push   0x20

c001f2d6 <int_common_stub>:
c001f2d6:	60                   	pusha  
c001f2d7:	1e                   	push   ds
c001f2d8:	06                   	push   es
c001f2d9:	0f a0                	push   fs
c001f2db:	0f a8                	push   gs
c001f2dd:	66 b8 10 00          	mov    ax,0x10
c001f2e1:	66 8e d8             	mov    ds,ax
c001f2e4:	66 8e c0             	mov    es,ax
c001f2e7:	66 8e e0             	mov    fs,ax
c001f2ea:	66 8e e8             	mov    gs,ax
c001f2ed:	54                   	push   esp
c001f2ee:	fc                   	cld    
c001f2ef:	e8 70 db fe ff       	call   c000ce64 <int_handler>
c001f2f4:	81 c4 04 00 00 00    	add    esp,0x4
c001f2fa:	0f a9                	pop    gs
c001f2fc:	0f a1                	pop    fs
c001f2fe:	07                   	pop    es
c001f2ff:	1f                   	pop    ds
c001f300:	61                   	popa   
c001f301:	81 c4 08 00 00 00    	add    esp,0x8
c001f307:	cf                   	iret   

c001f308 <syscall_common_stub>:
c001f308:	60                   	pusha  
c001f309:	1e                   	push   ds
c001f30a:	06                   	push   es
c001f30b:	0f a0                	push   fs
c001f30d:	0f a8                	push   gs
c001f30f:	66 b8 10 00          	mov    ax,0x10
c001f313:	66 8e d8             	mov    ds,ax
c001f316:	66 8e c0             	mov    es,ax
c001f319:	66 8e e0             	mov    fs,ax
c001f31c:	66 8e e8             	mov    gs,ax
c001f31f:	54                   	push   esp
c001f320:	fc                   	cld    
c001f321:	e8 3e db fe ff       	call   c000ce64 <int_handler>
c001f326:	81 c4 04 00 00 00    	add    esp,0x4
c001f32c:	0f a9                	pop    gs
c001f32e:	0f a1                	pop    fs
c001f330:	07                   	pop    es
c001f331:	1f                   	pop    ds
c001f332:	e8 e0 28 ff ff       	call   c0011c17 <KiCheckSignalZ>
c001f337:	3d 00 00 00 00       	cmp    eax,0x0
c001f33c:	0f 84 c0 00 00 00    	je     c001f402 <skipSignals>
c001f342:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f347:	61                   	popa   
c001f348:	53                   	push   ebx
c001f349:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f34f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f352:	5b                   	pop    ebx
c001f353:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f358:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f35b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f35e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f361:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f364:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f367:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f36a:	81 c4 08 00 00 00    	add    esp,0x8
c001f370:	5e                   	pop    esi
c001f371:	5b                   	pop    ebx
c001f372:	59                   	pop    ecx
c001f373:	5a                   	pop    edx
c001f374:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f377:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f37a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f37d:	52                   	push   edx
c001f37e:	51                   	push   ecx
c001f37f:	53                   	push   ebx
c001f380:	56                   	push   esi
c001f381:	81 ec 08 00 00 00    	sub    esp,0x8
c001f387:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f38a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f38d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f390:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f393:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f396:	60                   	pusha  
c001f397:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f39d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f3a0:	89 e3                	mov    ebx,esp
c001f3a2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f3a5:	52                   	push   edx
c001f3a6:	68 c6 f3 01 c0       	push   0xc001f3c6
c001f3ab:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f3ae:	89 dc                	mov    esp,ebx
c001f3b0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f3b3:	68 23 00 00 00       	push   0x23
c001f3b8:	51                   	push   ecx
c001f3b9:	68 02 02 00 00       	push   0x202
c001f3be:	68 1b 00 00 00       	push   0x1b
c001f3c3:	ff 36                	push   DWORD PTR [esi]
c001f3c5:	cf                   	iret   

c001f3c6 <finishSignal>:
c001f3c6:	cd 0f                	int    0xf

c001f3c8 <finishSignal2>:
c001f3c8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f3ce:	e8 c1 28 ff ff       	call   c0011c94 <KiFinishSignalZ>
c001f3d3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f3d9:	68 23 00 00 00       	push   0x23
c001f3de:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f3e1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f3e4:	68 1b 00 00 00       	push   0x1b
c001f3e9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f3ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f3ef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f3f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f3f5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f3f8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f3fb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f3fe:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f401:	cf                   	iret   

c001f402 <skipSignals>:
c001f402:	61                   	popa   
c001f403:	81 c4 08 00 00 00    	add    esp,0x8
c001f409:	cf                   	iret   
c001f40a:	90                   	nop
c001f40b:	90                   	nop

c001f40c <irq16>:
c001f40c:	fa                   	cli    
c001f40d:	6a 00                	push   0x0
c001f40f:	6a 30                	push   0x30
c001f411:	e9 c0 fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f416 <irq17>:
c001f416:	fa                   	cli    
c001f417:	6a 00                	push   0x0
c001f419:	6a 31                	push   0x31
c001f41b:	e9 b6 fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f420 <irq18>:
c001f420:	fa                   	cli    
c001f421:	6a 00                	push   0x0
c001f423:	6a 32                	push   0x32
c001f425:	e9 ac fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f42a <irq19>:
c001f42a:	fa                   	cli    
c001f42b:	6a 00                	push   0x0
c001f42d:	6a 33                	push   0x33
c001f42f:	e9 a2 fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f434 <irq20>:
c001f434:	fa                   	cli    
c001f435:	6a 00                	push   0x0
c001f437:	6a 34                	push   0x34
c001f439:	e9 98 fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f43e <irq21>:
c001f43e:	fa                   	cli    
c001f43f:	6a 00                	push   0x0
c001f441:	6a 35                	push   0x35
c001f443:	e9 8e fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f448 <irq22>:
c001f448:	fa                   	cli    
c001f449:	6a 00                	push   0x0
c001f44b:	6a 36                	push   0x36
c001f44d:	e9 84 fe ff ff       	jmp    c001f2d6 <int_common_stub>

c001f452 <irq23>:
c001f452:	fa                   	cli    
c001f453:	6a 00                	push   0x0
c001f455:	6a 37                	push   0x37
c001f457:	e9 7a fe ff ff       	jmp    c001f2d6 <int_common_stub>
c001f45c:	66 90                	xchg   ax,ax
c001f45e:	66 90                	xchg   ax,ax

c001f460 <i386GetRDRAND>:
c001f460:	b9 64 00 00 00       	mov    ecx,0x64

c001f465 <retry>:
c001f465:	0f c7 f0             	rdrand eax
c001f468:	72 05                	jb     c001f46f <retry.done>
c001f46a:	e2 f9                	loop   c001f465 <retry>

c001f46c <retry.fail>:
c001f46c:	31 c0                	xor    eax,eax
c001f46e:	c3                   	ret    

c001f46f <retry.done>:
c001f46f:	c3                   	ret    

c001f470 <absolutelyNoChanceInHell>:
c001f470:	b8 01 00 00 00       	mov    eax,0x1
c001f475:	0f a2                	cpuid  
c001f477:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f47d:	74 06                	je     c001f485 <sseDetect.noSSE>
c001f47f:	b8 01 00 00 00       	mov    eax,0x1
c001f484:	c3                   	ret    

c001f485 <sseDetect.noSSE>:
c001f485:	31 c0                	xor    eax,eax
c001f487:	c3                   	ret    

c001f488 <sseSave>:
c001f488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f48c:	0f ae 00             	fxsave [eax]
c001f48f:	c3                   	ret    

c001f490 <sseLoad>:
c001f490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f494:	0f ae 08             	fxrstor [eax]
c001f497:	c3                   	ret    

c001f498 <sseInit>:
c001f498:	e8 42 00 00 00       	call   c001f4df <x87Init>
c001f49d:	0f 20 e0             	mov    eax,cr4
c001f4a0:	66 0d 00 06          	or     ax,0x600
c001f4a4:	0f 22 e0             	mov    cr4,eax
c001f4a7:	c3                   	ret    

c001f4a8 <sseClose>:
c001f4a8:	c3                   	ret    
c001f4a9:	66 90                	xchg   ax,ax
c001f4ab:	66 90                	xchg   ax,ax
c001f4ad:	66 90                	xchg   ax,ax
c001f4af:	90                   	nop

c001f4b0 <value_37F>:
c001f4b0:	7f 03                	jg     c001f4b5 <value_37A+0x1>

c001f4b2 <value_37E>:
c001f4b2:	7e 03                	jle    c001f4b7 <x87Detect+0x1>

c001f4b4 <value_37A>:
c001f4b4:	7a 03                	jp     c001f4b9 <x87Detect+0x3>

c001f4b6 <x87Detect>:
c001f4b6:	b8 01 00 00 00       	mov    eax,0x1
c001f4bb:	0f a2                	cpuid  
c001f4bd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f4c3:	74 06                	je     c001f4cb <x87Detect.nox87>
c001f4c5:	b8 01 00 00 00       	mov    eax,0x1
c001f4ca:	c3                   	ret    

c001f4cb <x87Detect.nox87>:
c001f4cb:	b8 00 00 00 00       	mov    eax,0x0
c001f4d0:	c3                   	ret    

c001f4d1 <x87Save>:
c001f4d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4d5:	dd 30                	fnsave [eax]
c001f4d7:	c3                   	ret    

c001f4d8 <x87Load>:
c001f4d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4dc:	dd 20                	frstor [eax]
c001f4de:	c3                   	ret    

c001f4df <x87Init>:
c001f4df:	0f 20 c0             	mov    eax,cr0
c001f4e2:	66 25 fb ff          	and    ax,0xfffb
c001f4e6:	66 0d 22 00          	or     ax,0x22
c001f4ea:	0f 22 c0             	mov    cr0,eax
c001f4ed:	db e3                	fninit 
c001f4ef:	0f 06                	clts   
c001f4f1:	d9 2d b4 f4 01 c0    	fldcw  WORD PTR ds:0xc001f4b4
c001f4f7:	c3                   	ret    

c001f4f8 <x87Close>:
c001f4f8:	c3                   	ret    
c001f4f9:	66 90                	xchg   ax,ax
c001f4fb:	90                   	nop

c001f4fc <__do_global_ctors_aux>:
c001f4fc:	a1 b0 04 02 c0       	mov    eax,ds:0xc00204b0
c001f501:	83 f8 ff             	cmp    eax,0xffffffff
c001f504:	74 1a                	je     c001f520 <__do_global_ctors_aux+0x24>
c001f506:	55                   	push   ebp
c001f507:	89 e5                	mov    ebp,esp
c001f509:	53                   	push   ebx
c001f50a:	52                   	push   edx
c001f50b:	bb b0 04 02 c0       	mov    ebx,0xc00204b0
c001f510:	ff d0                	call   eax
c001f512:	83 eb 04             	sub    ebx,0x4
c001f515:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f517:	83 f8 ff             	cmp    eax,0xffffffff
c001f51a:	75 f4                	jne    c001f510 <__do_global_ctors_aux+0x14>
c001f51c:	58                   	pop    eax
c001f51d:	5b                   	pop    ebx
c001f51e:	5d                   	pop    ebp
c001f51f:	c3                   	ret    
c001f520:	c3                   	ret    
c001f521:	66 90                	xchg   ax,ax
c001f523:	90                   	nop

c001f524 <__divdi3>:
c001f524:	55                   	push   ebp
c001f525:	57                   	push   edi
c001f526:	56                   	push   esi
c001f527:	53                   	push   ebx
c001f528:	83 ec 1c             	sub    esp,0x1c
c001f52b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f52f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f533:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f536:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f53a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f53e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f542:	85 db                	test   ebx,ebx
c001f544:	0f 88 8e 00 00 00    	js     c001f5d8 <__divdi3+0xb4>
c001f54a:	89 dd                	mov    ebp,ebx
c001f54c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f554:	89 d3                	mov    ebx,edx
c001f556:	85 d2                	test   edx,edx
c001f558:	79 0d                	jns    c001f567 <__divdi3+0x43>
c001f55a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f55e:	f7 d8                	neg    eax
c001f560:	83 d2 00             	adc    edx,0x0
c001f563:	f7 da                	neg    edx
c001f565:	89 d3                	mov    ebx,edx
c001f567:	89 c7                	mov    edi,eax
c001f569:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f56c:	85 db                	test   ebx,ebx
c001f56e:	75 48                	jne    c001f5b8 <__divdi3+0x94>
c001f570:	39 ef                	cmp    edi,ebp
c001f572:	76 24                	jbe    c001f598 <__divdi3+0x74>
c001f574:	89 ea                	mov    edx,ebp
c001f576:	f7 f7                	div    edi
c001f578:	89 c1                	mov    ecx,eax
c001f57a:	31 f6                	xor    esi,esi
c001f57c:	89 c8                	mov    eax,ecx
c001f57e:	89 f2                	mov    edx,esi
c001f580:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f584:	85 c9                	test   ecx,ecx
c001f586:	74 07                	je     c001f58f <__divdi3+0x6b>
c001f588:	f7 d8                	neg    eax
c001f58a:	83 d2 00             	adc    edx,0x0
c001f58d:	f7 da                	neg    edx
c001f58f:	83 c4 1c             	add    esp,0x1c
c001f592:	5b                   	pop    ebx
c001f593:	5e                   	pop    esi
c001f594:	5f                   	pop    edi
c001f595:	5d                   	pop    ebp
c001f596:	c3                   	ret    
c001f597:	90                   	nop
c001f598:	85 ff                	test   edi,edi
c001f59a:	75 0b                	jne    c001f5a7 <__divdi3+0x83>
c001f59c:	b8 01 00 00 00       	mov    eax,0x1
c001f5a1:	31 d2                	xor    edx,edx
c001f5a3:	f7 f3                	div    ebx
c001f5a5:	89 c7                	mov    edi,eax
c001f5a7:	31 d2                	xor    edx,edx
c001f5a9:	89 e8                	mov    eax,ebp
c001f5ab:	f7 f7                	div    edi
c001f5ad:	89 c6                	mov    esi,eax
c001f5af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f5b2:	f7 f7                	div    edi
c001f5b4:	89 c1                	mov    ecx,eax
c001f5b6:	eb c4                	jmp    c001f57c <__divdi3+0x58>
c001f5b8:	39 eb                	cmp    ebx,ebp
c001f5ba:	77 3c                	ja     c001f5f8 <__divdi3+0xd4>
c001f5bc:	0f bd f3             	bsr    esi,ebx
c001f5bf:	83 f6 1f             	xor    esi,0x1f
c001f5c2:	75 40                	jne    c001f604 <__divdi3+0xe0>
c001f5c4:	39 eb                	cmp    ebx,ebp
c001f5c6:	72 09                	jb     c001f5d1 <__divdi3+0xad>
c001f5c8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f5cb:	0f 87 97 00 00 00    	ja     c001f668 <__divdi3+0x144>
c001f5d1:	b9 01 00 00 00       	mov    ecx,0x1
c001f5d6:	eb a4                	jmp    c001f57c <__divdi3+0x58>
c001f5d8:	f7 d9                	neg    ecx
c001f5da:	83 d3 00             	adc    ebx,0x0
c001f5dd:	f7 db                	neg    ebx
c001f5df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f5e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f5e6:	89 dd                	mov    ebp,ebx
c001f5e8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f5f0:	e9 5f ff ff ff       	jmp    c001f554 <__divdi3+0x30>
c001f5f5:	8d 76 00             	lea    esi,[esi+0x0]
c001f5f8:	31 f6                	xor    esi,esi
c001f5fa:	31 c9                	xor    ecx,ecx
c001f5fc:	e9 7b ff ff ff       	jmp    c001f57c <__divdi3+0x58>
c001f601:	8d 76 00             	lea    esi,[esi+0x0]
c001f604:	b8 20 00 00 00       	mov    eax,0x20
c001f609:	29 f0                	sub    eax,esi
c001f60b:	89 f1                	mov    ecx,esi
c001f60d:	d3 e3                	shl    ebx,cl
c001f60f:	89 fa                	mov    edx,edi
c001f611:	88 c1                	mov    cl,al
c001f613:	d3 ea                	shr    edx,cl
c001f615:	09 da                	or     edx,ebx
c001f617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f61b:	89 f1                	mov    ecx,esi
c001f61d:	d3 e7                	shl    edi,cl
c001f61f:	89 eb                	mov    ebx,ebp
c001f621:	88 c1                	mov    cl,al
c001f623:	d3 eb                	shr    ebx,cl
c001f625:	89 f1                	mov    ecx,esi
c001f627:	d3 e5                	shl    ebp,cl
c001f629:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f62c:	88 c1                	mov    cl,al
c001f62e:	d3 ea                	shr    edx,cl
c001f630:	09 d5                	or     ebp,edx
c001f632:	89 e8                	mov    eax,ebp
c001f634:	89 da                	mov    edx,ebx
c001f636:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f63a:	89 d3                	mov    ebx,edx
c001f63c:	89 c5                	mov    ebp,eax
c001f63e:	f7 e7                	mul    edi
c001f640:	39 d3                	cmp    ebx,edx
c001f642:	72 18                	jb     c001f65c <__divdi3+0x138>
c001f644:	74 0a                	je     c001f650 <__divdi3+0x12c>
c001f646:	89 e9                	mov    ecx,ebp
c001f648:	31 f6                	xor    esi,esi
c001f64a:	e9 2d ff ff ff       	jmp    c001f57c <__divdi3+0x58>
c001f64f:	90                   	nop
c001f650:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f653:	89 f1                	mov    ecx,esi
c001f655:	d3 e7                	shl    edi,cl
c001f657:	39 c7                	cmp    edi,eax
c001f659:	73 eb                	jae    c001f646 <__divdi3+0x122>
c001f65b:	90                   	nop
c001f65c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f65f:	31 f6                	xor    esi,esi
c001f661:	e9 16 ff ff ff       	jmp    c001f57c <__divdi3+0x58>
c001f666:	66 90                	xchg   ax,ax
c001f668:	31 c9                	xor    ecx,ecx
c001f66a:	e9 0d ff ff ff       	jmp    c001f57c <__divdi3+0x58>
c001f66f:	90                   	nop

c001f670 <__moddi3>:
c001f670:	55                   	push   ebp
c001f671:	57                   	push   edi
c001f672:	56                   	push   esi
c001f673:	53                   	push   ebx
c001f674:	83 ec 2c             	sub    esp,0x2c
c001f677:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f67b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f67f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f683:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f687:	85 db                	test   ebx,ebx
c001f689:	0f 88 85 00 00 00    	js     c001f714 <__moddi3+0xa4>
c001f68f:	89 de                	mov    esi,ebx
c001f691:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f699:	89 d7                	mov    edi,edx
c001f69b:	85 d2                	test   edx,edx
c001f69d:	79 09                	jns    c001f6a8 <__moddi3+0x38>
c001f69f:	f7 d8                	neg    eax
c001f6a1:	83 d2 00             	adc    edx,0x0
c001f6a4:	f7 da                	neg    edx
c001f6a6:	89 d7                	mov    edi,edx
c001f6a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6ac:	89 cd                	mov    ebp,ecx
c001f6ae:	85 ff                	test   edi,edi
c001f6b0:	75 52                	jne    c001f704 <__moddi3+0x94>
c001f6b2:	89 c3                	mov    ebx,eax
c001f6b4:	39 f0                	cmp    eax,esi
c001f6b6:	76 24                	jbe    c001f6dc <__moddi3+0x6c>
c001f6b8:	89 c8                	mov    eax,ecx
c001f6ba:	89 f2                	mov    edx,esi
c001f6bc:	f7 f3                	div    ebx
c001f6be:	89 d6                	mov    esi,edx
c001f6c0:	89 f0                	mov    eax,esi
c001f6c2:	31 d2                	xor    edx,edx
c001f6c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6c8:	85 c9                	test   ecx,ecx
c001f6ca:	74 07                	je     c001f6d3 <__moddi3+0x63>
c001f6cc:	f7 d8                	neg    eax
c001f6ce:	83 d2 00             	adc    edx,0x0
c001f6d1:	f7 da                	neg    edx
c001f6d3:	83 c4 2c             	add    esp,0x2c
c001f6d6:	5b                   	pop    ebx
c001f6d7:	5e                   	pop    esi
c001f6d8:	5f                   	pop    edi
c001f6d9:	5d                   	pop    ebp
c001f6da:	c3                   	ret    
c001f6db:	90                   	nop
c001f6dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f6e0:	85 db                	test   ebx,ebx
c001f6e2:	75 0d                	jne    c001f6f1 <__moddi3+0x81>
c001f6e4:	b8 01 00 00 00       	mov    eax,0x1
c001f6e9:	31 d2                	xor    edx,edx
c001f6eb:	f7 f7                	div    edi
c001f6ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6f1:	89 f0                	mov    eax,esi
c001f6f3:	31 d2                	xor    edx,edx
c001f6f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f6f9:	f7 f7                	div    edi
c001f6fb:	89 e8                	mov    eax,ebp
c001f6fd:	f7 f7                	div    edi
c001f6ff:	89 d6                	mov    esi,edx
c001f701:	eb bd                	jmp    c001f6c0 <__moddi3+0x50>
c001f703:	90                   	nop
c001f704:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f708:	39 f7                	cmp    edi,esi
c001f70a:	76 20                	jbe    c001f72c <__moddi3+0xbc>
c001f70c:	89 c8                	mov    eax,ecx
c001f70e:	89 f2                	mov    edx,esi
c001f710:	eb b2                	jmp    c001f6c4 <__moddi3+0x54>
c001f712:	66 90                	xchg   ax,ax
c001f714:	f7 d9                	neg    ecx
c001f716:	83 d3 00             	adc    ebx,0x0
c001f719:	f7 db                	neg    ebx
c001f71b:	89 de                	mov    esi,ebx
c001f71d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f725:	e9 6f ff ff ff       	jmp    c001f699 <__moddi3+0x29>
c001f72a:	66 90                	xchg   ax,ax
c001f72c:	0f bd c7             	bsr    eax,edi
c001f72f:	83 f0 1f             	xor    eax,0x1f
c001f732:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f736:	75 24                	jne    c001f75c <__moddi3+0xec>
c001f738:	39 f7                	cmp    edi,esi
c001f73a:	72 06                	jb     c001f742 <__moddi3+0xd2>
c001f73c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f740:	77 0c                	ja     c001f74e <__moddi3+0xde>
c001f742:	89 e9                	mov    ecx,ebp
c001f744:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f748:	19 fe                	sbb    esi,edi
c001f74a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f74e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f752:	89 f2                	mov    edx,esi
c001f754:	e9 6b ff ff ff       	jmp    c001f6c4 <__moddi3+0x54>
c001f759:	8d 76 00             	lea    esi,[esi+0x0]
c001f75c:	b8 20 00 00 00       	mov    eax,0x20
c001f761:	89 c2                	mov    edx,eax
c001f763:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f767:	29 da                	sub    edx,ebx
c001f769:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f76d:	88 d9                	mov    cl,bl
c001f76f:	d3 e7                	shl    edi,cl
c001f771:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f775:	88 d1                	mov    cl,dl
c001f777:	d3 e8                	shr    eax,cl
c001f779:	09 c7                	or     edi,eax
c001f77b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f77f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f783:	89 d8                	mov    eax,ebx
c001f785:	88 d9                	mov    cl,bl
c001f787:	d3 e7                	shl    edi,cl
c001f789:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f78d:	89 f3                	mov    ebx,esi
c001f78f:	88 d1                	mov    cl,dl
c001f791:	d3 eb                	shr    ebx,cl
c001f793:	89 c7                	mov    edi,eax
c001f795:	88 c1                	mov    cl,al
c001f797:	d3 e6                	shl    esi,cl
c001f799:	89 e8                	mov    eax,ebp
c001f79b:	88 d1                	mov    cl,dl
c001f79d:	d3 e8                	shr    eax,cl
c001f79f:	09 f0                	or     eax,esi
c001f7a1:	89 f9                	mov    ecx,edi
c001f7a3:	d3 e5                	shl    ebp,cl
c001f7a5:	89 da                	mov    edx,ebx
c001f7a7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f7ab:	89 d3                	mov    ebx,edx
c001f7ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f7b1:	89 c6                	mov    esi,eax
c001f7b3:	89 d1                	mov    ecx,edx
c001f7b5:	39 d3                	cmp    ebx,edx
c001f7b7:	72 27                	jb     c001f7e0 <__moddi3+0x170>
c001f7b9:	74 21                	je     c001f7dc <__moddi3+0x16c>
c001f7bb:	29 f5                	sub    ebp,esi
c001f7bd:	19 cb                	sbb    ebx,ecx
c001f7bf:	89 de                	mov    esi,ebx
c001f7c1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f7c5:	d3 e6                	shl    esi,cl
c001f7c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f7cb:	89 f9                	mov    ecx,edi
c001f7cd:	d3 ed                	shr    ebp,cl
c001f7cf:	09 ee                	or     esi,ebp
c001f7d1:	89 f0                	mov    eax,esi
c001f7d3:	d3 eb                	shr    ebx,cl
c001f7d5:	89 da                	mov    edx,ebx
c001f7d7:	e9 e8 fe ff ff       	jmp    c001f6c4 <__moddi3+0x54>
c001f7dc:	39 c5                	cmp    ebp,eax
c001f7de:	73 db                	jae    c001f7bb <__moddi3+0x14b>
c001f7e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f7e4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f7e8:	89 d1                	mov    ecx,edx
c001f7ea:	89 c6                	mov    esi,eax
c001f7ec:	eb cd                	jmp    c001f7bb <__moddi3+0x14b>
c001f7ee:	66 90                	xchg   ax,ax

c001f7f0 <__udivdi3>:
c001f7f0:	55                   	push   ebp
c001f7f1:	57                   	push   edi
c001f7f2:	56                   	push   esi
c001f7f3:	53                   	push   ebx
c001f7f4:	83 ec 1c             	sub    esp,0x1c
c001f7f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f7fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f7ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f803:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f807:	85 d2                	test   edx,edx
c001f809:	75 41                	jne    c001f84c <__udivdi3+0x5c>
c001f80b:	39 f7                	cmp    edi,esi
c001f80d:	76 15                	jbe    c001f824 <__udivdi3+0x34>
c001f80f:	89 e8                	mov    eax,ebp
c001f811:	89 f2                	mov    edx,esi
c001f813:	f7 f7                	div    edi
c001f815:	31 db                	xor    ebx,ebx
c001f817:	89 da                	mov    edx,ebx
c001f819:	83 c4 1c             	add    esp,0x1c
c001f81c:	5b                   	pop    ebx
c001f81d:	5e                   	pop    esi
c001f81e:	5f                   	pop    edi
c001f81f:	5d                   	pop    ebp
c001f820:	c3                   	ret    
c001f821:	8d 76 00             	lea    esi,[esi+0x0]
c001f824:	89 f9                	mov    ecx,edi
c001f826:	85 ff                	test   edi,edi
c001f828:	75 0b                	jne    c001f835 <__udivdi3+0x45>
c001f82a:	b8 01 00 00 00       	mov    eax,0x1
c001f82f:	31 d2                	xor    edx,edx
c001f831:	f7 f7                	div    edi
c001f833:	89 c1                	mov    ecx,eax
c001f835:	31 d2                	xor    edx,edx
c001f837:	89 f0                	mov    eax,esi
c001f839:	f7 f1                	div    ecx
c001f83b:	89 c3                	mov    ebx,eax
c001f83d:	89 e8                	mov    eax,ebp
c001f83f:	f7 f1                	div    ecx
c001f841:	89 da                	mov    edx,ebx
c001f843:	83 c4 1c             	add    esp,0x1c
c001f846:	5b                   	pop    ebx
c001f847:	5e                   	pop    esi
c001f848:	5f                   	pop    edi
c001f849:	5d                   	pop    ebp
c001f84a:	c3                   	ret    
c001f84b:	90                   	nop
c001f84c:	39 f2                	cmp    edx,esi
c001f84e:	77 1c                	ja     c001f86c <__udivdi3+0x7c>
c001f850:	0f bd da             	bsr    ebx,edx
c001f853:	83 f3 1f             	xor    ebx,0x1f
c001f856:	75 24                	jne    c001f87c <__udivdi3+0x8c>
c001f858:	39 f2                	cmp    edx,esi
c001f85a:	72 08                	jb     c001f864 <__udivdi3+0x74>
c001f85c:	39 ef                	cmp    edi,ebp
c001f85e:	0f 87 84 00 00 00    	ja     c001f8e8 <__udivdi3+0xf8>
c001f864:	b8 01 00 00 00       	mov    eax,0x1
c001f869:	eb ac                	jmp    c001f817 <__udivdi3+0x27>
c001f86b:	90                   	nop
c001f86c:	31 db                	xor    ebx,ebx
c001f86e:	31 c0                	xor    eax,eax
c001f870:	89 da                	mov    edx,ebx
c001f872:	83 c4 1c             	add    esp,0x1c
c001f875:	5b                   	pop    ebx
c001f876:	5e                   	pop    esi
c001f877:	5f                   	pop    edi
c001f878:	5d                   	pop    ebp
c001f879:	c3                   	ret    
c001f87a:	66 90                	xchg   ax,ax
c001f87c:	b8 20 00 00 00       	mov    eax,0x20
c001f881:	29 d8                	sub    eax,ebx
c001f883:	88 d9                	mov    cl,bl
c001f885:	d3 e2                	shl    edx,cl
c001f887:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f88b:	89 fa                	mov    edx,edi
c001f88d:	88 c1                	mov    cl,al
c001f88f:	d3 ea                	shr    edx,cl
c001f891:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f895:	09 d1                	or     ecx,edx
c001f897:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f89b:	88 d9                	mov    cl,bl
c001f89d:	d3 e7                	shl    edi,cl
c001f89f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8a3:	89 f7                	mov    edi,esi
c001f8a5:	88 c1                	mov    cl,al
c001f8a7:	d3 ef                	shr    edi,cl
c001f8a9:	88 d9                	mov    cl,bl
c001f8ab:	d3 e6                	shl    esi,cl
c001f8ad:	89 ea                	mov    edx,ebp
c001f8af:	88 c1                	mov    cl,al
c001f8b1:	d3 ea                	shr    edx,cl
c001f8b3:	09 d6                	or     esi,edx
c001f8b5:	89 f0                	mov    eax,esi
c001f8b7:	89 fa                	mov    edx,edi
c001f8b9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f8bd:	89 d7                	mov    edi,edx
c001f8bf:	89 c6                	mov    esi,eax
c001f8c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f8c5:	39 d7                	cmp    edi,edx
c001f8c7:	72 13                	jb     c001f8dc <__udivdi3+0xec>
c001f8c9:	74 09                	je     c001f8d4 <__udivdi3+0xe4>
c001f8cb:	89 f0                	mov    eax,esi
c001f8cd:	31 db                	xor    ebx,ebx
c001f8cf:	e9 43 ff ff ff       	jmp    c001f817 <__udivdi3+0x27>
c001f8d4:	88 d9                	mov    cl,bl
c001f8d6:	d3 e5                	shl    ebp,cl
c001f8d8:	39 c5                	cmp    ebp,eax
c001f8da:	73 ef                	jae    c001f8cb <__udivdi3+0xdb>
c001f8dc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f8df:	31 db                	xor    ebx,ebx
c001f8e1:	e9 31 ff ff ff       	jmp    c001f817 <__udivdi3+0x27>
c001f8e6:	66 90                	xchg   ax,ax
c001f8e8:	31 c0                	xor    eax,eax
c001f8ea:	e9 28 ff ff ff       	jmp    c001f817 <__udivdi3+0x27>
c001f8ef:	90                   	nop

c001f8f0 <__umoddi3>:
c001f8f0:	55                   	push   ebp
c001f8f1:	57                   	push   edi
c001f8f2:	56                   	push   esi
c001f8f3:	53                   	push   ebx
c001f8f4:	83 ec 1c             	sub    esp,0x1c
c001f8f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f8fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f903:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f907:	89 da                	mov    edx,ebx
c001f909:	85 c0                	test   eax,eax
c001f90b:	75 37                	jne    c001f944 <__umoddi3+0x54>
c001f90d:	39 df                	cmp    edi,ebx
c001f90f:	76 13                	jbe    c001f924 <__umoddi3+0x34>
c001f911:	89 f0                	mov    eax,esi
c001f913:	f7 f7                	div    edi
c001f915:	89 d0                	mov    eax,edx
c001f917:	31 d2                	xor    edx,edx
c001f919:	83 c4 1c             	add    esp,0x1c
c001f91c:	5b                   	pop    ebx
c001f91d:	5e                   	pop    esi
c001f91e:	5f                   	pop    edi
c001f91f:	5d                   	pop    ebp
c001f920:	c3                   	ret    
c001f921:	8d 76 00             	lea    esi,[esi+0x0]
c001f924:	89 fd                	mov    ebp,edi
c001f926:	85 ff                	test   edi,edi
c001f928:	75 0b                	jne    c001f935 <__umoddi3+0x45>
c001f92a:	b8 01 00 00 00       	mov    eax,0x1
c001f92f:	31 d2                	xor    edx,edx
c001f931:	f7 f7                	div    edi
c001f933:	89 c5                	mov    ebp,eax
c001f935:	89 d8                	mov    eax,ebx
c001f937:	31 d2                	xor    edx,edx
c001f939:	f7 f5                	div    ebp
c001f93b:	89 f0                	mov    eax,esi
c001f93d:	f7 f5                	div    ebp
c001f93f:	89 d0                	mov    eax,edx
c001f941:	eb d4                	jmp    c001f917 <__umoddi3+0x27>
c001f943:	90                   	nop
c001f944:	89 f1                	mov    ecx,esi
c001f946:	39 d8                	cmp    eax,ebx
c001f948:	76 0a                	jbe    c001f954 <__umoddi3+0x64>
c001f94a:	89 f0                	mov    eax,esi
c001f94c:	83 c4 1c             	add    esp,0x1c
c001f94f:	5b                   	pop    ebx
c001f950:	5e                   	pop    esi
c001f951:	5f                   	pop    edi
c001f952:	5d                   	pop    ebp
c001f953:	c3                   	ret    
c001f954:	0f bd e8             	bsr    ebp,eax
c001f957:	83 f5 1f             	xor    ebp,0x1f
c001f95a:	75 1c                	jne    c001f978 <__umoddi3+0x88>
c001f95c:	39 d8                	cmp    eax,ebx
c001f95e:	72 04                	jb     c001f964 <__umoddi3+0x74>
c001f960:	39 f7                	cmp    edi,esi
c001f962:	77 08                	ja     c001f96c <__umoddi3+0x7c>
c001f964:	89 da                	mov    edx,ebx
c001f966:	29 fe                	sub    esi,edi
c001f968:	19 c2                	sbb    edx,eax
c001f96a:	89 f1                	mov    ecx,esi
c001f96c:	89 c8                	mov    eax,ecx
c001f96e:	83 c4 1c             	add    esp,0x1c
c001f971:	5b                   	pop    ebx
c001f972:	5e                   	pop    esi
c001f973:	5f                   	pop    edi
c001f974:	5d                   	pop    ebp
c001f975:	c3                   	ret    
c001f976:	66 90                	xchg   ax,ax
c001f978:	ba 20 00 00 00       	mov    edx,0x20
c001f97d:	29 ea                	sub    edx,ebp
c001f97f:	89 e9                	mov    ecx,ebp
c001f981:	d3 e0                	shl    eax,cl
c001f983:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f987:	89 f8                	mov    eax,edi
c001f989:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f98d:	88 d1                	mov    cl,dl
c001f98f:	d3 e8                	shr    eax,cl
c001f991:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f995:	09 c1                	or     ecx,eax
c001f997:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f99b:	89 e9                	mov    ecx,ebp
c001f99d:	d3 e7                	shl    edi,cl
c001f99f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f9a3:	89 d8                	mov    eax,ebx
c001f9a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9a9:	88 d1                	mov    cl,dl
c001f9ab:	d3 e8                	shr    eax,cl
c001f9ad:	89 c7                	mov    edi,eax
c001f9af:	89 e9                	mov    ecx,ebp
c001f9b1:	d3 e3                	shl    ebx,cl
c001f9b3:	89 f0                	mov    eax,esi
c001f9b5:	88 d1                	mov    cl,dl
c001f9b7:	d3 e8                	shr    eax,cl
c001f9b9:	09 d8                	or     eax,ebx
c001f9bb:	89 e9                	mov    ecx,ebp
c001f9bd:	d3 e6                	shl    esi,cl
c001f9bf:	89 f3                	mov    ebx,esi
c001f9c1:	89 fa                	mov    edx,edi
c001f9c3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f9c7:	89 d1                	mov    ecx,edx
c001f9c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f9cd:	89 c6                	mov    esi,eax
c001f9cf:	89 d7                	mov    edi,edx
c001f9d1:	39 d1                	cmp    ecx,edx
c001f9d3:	72 27                	jb     c001f9fc <__umoddi3+0x10c>
c001f9d5:	74 21                	je     c001f9f8 <__umoddi3+0x108>
c001f9d7:	89 ca                	mov    edx,ecx
c001f9d9:	29 f3                	sub    ebx,esi
c001f9db:	19 fa                	sbb    edx,edi
c001f9dd:	89 d0                	mov    eax,edx
c001f9df:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f9e3:	d3 e0                	shl    eax,cl
c001f9e5:	89 e9                	mov    ecx,ebp
c001f9e7:	d3 eb                	shr    ebx,cl
c001f9e9:	09 d8                	or     eax,ebx
c001f9eb:	d3 ea                	shr    edx,cl
c001f9ed:	83 c4 1c             	add    esp,0x1c
c001f9f0:	5b                   	pop    ebx
c001f9f1:	5e                   	pop    esi
c001f9f2:	5f                   	pop    edi
c001f9f3:	5d                   	pop    ebp
c001f9f4:	c3                   	ret    
c001f9f5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9f8:	39 c3                	cmp    ebx,eax
c001f9fa:	73 db                	jae    c001f9d7 <__umoddi3+0xe7>
c001f9fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa00:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fa04:	89 d7                	mov    edi,edx
c001fa06:	89 c6                	mov    esi,eax
c001fa08:	eb cd                	jmp    c001f9d7 <__umoddi3+0xe7>

Disassembly of section .init:

c001fa0a <_init>:
c001fa0a:	55                   	push   ebp
c001fa0b:	89 e5                	mov    ebp,esp
c001fa0d:	e8 e2 06 fe ff       	call   c00000f4 <frame_dummy>
c001fa12:	e8 e5 fa ff ff       	call   c001f4fc <__do_global_ctors_aux>
c001fa17:	5d                   	pop    ebp
c001fa18:	c3                   	ret    

Disassembly of section .fini:

c001fa19 <_fini>:
c001fa19:	55                   	push   ebp
c001fa1a:	89 e5                	mov    ebp,esp
c001fa1c:	e8 63 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fa21:	5d                   	pop    ebp
c001fa22:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001fa24 <Computer::~Computer()>:
c001fa24:	83 ec 0c             	sub    esp,0xc
c001fa27:	ba 4c 0d 02 c0       	mov    edx,0xc0020d4c
c001fa2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa30:	89 10                	mov    DWORD PTR [eax],edx
c001fa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa36:	83 ec 0c             	sub    esp,0xc
c001fa39:	50                   	push   eax
c001fa3a:	e8 67 ce fe ff       	call   c000c8a6 <Device::~Device()>
c001fa3f:	83 c4 10             	add    esp,0x10
c001fa42:	90                   	nop
c001fa43:	83 c4 0c             	add    esp,0xc
c001fa46:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001fa48 <Computer::~Computer()>:
c001fa48:	83 ec 0c             	sub    esp,0xc
c001fa4b:	83 ec 0c             	sub    esp,0xc
c001fa4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa52:	e8 cd ff ff ff       	call   c001fa24 <Computer::~Computer()>
c001fa57:	83 c4 10             	add    esp,0x10
c001fa5a:	83 ec 08             	sub    esp,0x8
c001fa5d:	68 70 01 00 00       	push   0x170
c001fa62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa66:	e8 a5 ad fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c001fa6b:	83 c4 10             	add    esp,0x10
c001fa6e:	83 c4 0c             	add    esp,0xc
c001fa71:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fa72 <idleCommon()>:
c001fa72:	83 ec 0c             	sub    esp,0xc
c001fa75:	fa                   	cli    
c001fa76:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001fa7c:	e8 b3 66 ff ff       	call   c0016134 <schedule()>
c001fa81:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fa86:	48                   	dec    eax
c001fa87:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fa8c:	75 01                	jne    c001fa8f <idleCommon()+0x1d>
c001fa8e:	fb                   	sti    
c001fa8f:	83 c4 0c             	add    esp,0xc
c001fa92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fa94 <LinkedList<UnixFile>::~LinkedList()>:
c001fa94:	90                   	nop
c001fa95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fa96 <LinkedList<UnixFile>::LinkedList()>:
c001fa96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faaf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001facb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001facf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fad6:	90                   	nop
c001fad7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fad8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fad8:	83 ec 0c             	sub    esp,0xc
c001fadb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fae0:	75 10                	jne    c001faf2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fae2:	83 ec 0c             	sub    esp,0xc
c001fae5:	68 60 0f 02 c0       	push   0xc0020f60
c001faea:	e8 18 1b ff ff       	call   c0011607 <KePanic(char const*)>
c001faef:	83 c4 10             	add    esp,0x10
c001faf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf6:	8b 00                	mov    eax,DWORD PTR [eax]
c001faf8:	85 c0                	test   eax,eax
c001fafa:	74 34                	je     c001fb30 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb03:	85 c0                	test   eax,eax
c001fb05:	74 29                	je     c001fb30 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb1d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb2e:	eb 65                	jmp    c001fb95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb36:	85 c0                	test   eax,eax
c001fb38:	75 4b                	jne    c001fb85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb41:	85 c0                	test   eax,eax
c001fb43:	75 40                	jne    c001fb85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb4d:	89 10                	mov    DWORD PTR [eax],edx
c001fb4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb61:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb6f:	85 c0                	test   eax,eax
c001fb71:	74 22                	je     c001fb95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb73:	83 ec 0c             	sub    esp,0xc
c001fb76:	68 82 0f 02 c0       	push   0xc0020f82
c001fb7b:	e8 87 1a ff ff       	call   c0011607 <KePanic(char const*)>
c001fb80:	83 c4 10             	add    esp,0x10
c001fb83:	eb 10                	jmp    c001fb95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb85:	83 ec 0c             	sub    esp,0xc
c001fb88:	68 8c 0f 02 c0       	push   0xc0020f8c
c001fb8d:	e8 75 1a ff ff       	call   c0011607 <KePanic(char const*)>
c001fb92:	83 c4 10             	add    esp,0x10
c001fb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb99:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb9c:	8d 50 01             	lea    edx,[eax+0x1]
c001fb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fba6:	90                   	nop
c001fba7:	83 c4 0c             	add    esp,0xc
c001fbaa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fbac <LinkedList<UnixFile>::getFirstElement()>:
c001fbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbb2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fbb4 <LinkedList<UnixFile>::removeFirst()>:
c001fbb4:	83 ec 0c             	sub    esp,0xc
c001fbb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbbd:	85 c0                	test   eax,eax
c001fbbf:	75 12                	jne    c001fbd3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fbc1:	83 ec 0c             	sub    esp,0xc
c001fbc4:	68 98 0f 02 c0       	push   0xc0020f98
c001fbc9:	e8 39 1a ff ff       	call   c0011607 <KePanic(char const*)>
c001fbce:	83 c4 10             	add    esp,0x10
c001fbd1:	eb 7e                	jmp    c001fc51 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fbd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbda:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbdd:	85 c0                	test   eax,eax
c001fbdf:	74 10                	je     c001fbf1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fbe1:	83 ec 0c             	sub    esp,0xc
c001fbe4:	68 e3 0f 02 c0       	push   0xc0020fe3
c001fbe9:	e8 19 1a ff ff       	call   c0011607 <KePanic(char const*)>
c001fbee:	83 c4 10             	add    esp,0x10
c001fbf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbf7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbfa:	85 c0                	test   eax,eax
c001fbfc:	75 33                	jne    c001fc31 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fbfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc1a:	83 f8 01             	cmp    eax,0x1
c001fc1d:	74 21                	je     c001fc40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc1f:	83 ec 0c             	sub    esp,0xc
c001fc22:	68 bc 0f 02 c0       	push   0xc0020fbc
c001fc27:	e8 db 19 ff ff       	call   c0011607 <KePanic(char const*)>
c001fc2c:	83 c4 10             	add    esp,0x10
c001fc2f:	eb 0f                	jmp    c001fc40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc35:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc37:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3e:	89 10                	mov    DWORD PTR [eax],edx
c001fc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc47:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc51:	83 c4 0c             	add    esp,0xc
c001fc54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fc56 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fc56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc5d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fc5e <DriverlessDevice::~DriverlessDevice()>:
c001fc5e:	ba 08 1c 02 c0       	mov    edx,0xc0021c08
c001fc63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc67:	89 10                	mov    DWORD PTR [eax],edx
c001fc69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc6d:	50                   	push   eax
c001fc6e:	e8 33 cc fe ff       	call   c000c8a6 <Device::~Device()>
c001fc73:	83 c4 04             	add    esp,0x4
c001fc76:	90                   	nop
c001fc77:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fc78 <DriverlessDevice::~DriverlessDevice()>:
c001fc78:	83 ec 0c             	sub    esp,0xc
c001fc7b:	83 ec 0c             	sub    esp,0xc
c001fc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc82:	e8 d7 ff ff ff       	call   c001fc5e <DriverlessDevice::~DriverlessDevice()>
c001fc87:	83 c4 10             	add    esp,0x10
c001fc8a:	83 ec 08             	sub    esp,0x8
c001fc8d:	68 58 01 00 00       	push   0x158
c001fc92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc96:	e8 75 ab fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c001fc9b:	83 c4 10             	add    esp,0x10
c001fc9e:	83 c4 0c             	add    esp,0xc
c001fca1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fca2 <LinkedList<Device>::addElement(Device*)>:
c001fca2:	83 ec 0c             	sub    esp,0xc
c001fca5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcaa:	75 10                	jne    c001fcbc <LinkedList<Device>::addElement(Device*)+0x1a>
c001fcac:	83 ec 0c             	sub    esp,0xc
c001fcaf:	68 60 0f 02 c0       	push   0xc0020f60
c001fcb4:	e8 4e 19 ff ff       	call   c0011607 <KePanic(char const*)>
c001fcb9:	83 c4 10             	add    esp,0x10
c001fcbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcc2:	85 c0                	test   eax,eax
c001fcc4:	74 3a                	je     c001fd00 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fccd:	85 c0                	test   eax,eax
c001fccf:	74 2f                	je     c001fd00 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fcd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcdc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcf4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fcfe:	eb 68                	jmp    c001fd68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd06:	85 c0                	test   eax,eax
c001fd08:	75 4e                	jne    c001fd58 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd11:	85 c0                	test   eax,eax
c001fd13:	75 43                	jne    c001fd58 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd1d:	89 10                	mov    DWORD PTR [eax],edx
c001fd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd31:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd42:	85 c0                	test   eax,eax
c001fd44:	74 22                	je     c001fd68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd46:	83 ec 0c             	sub    esp,0xc
c001fd49:	68 82 0f 02 c0       	push   0xc0020f82
c001fd4e:	e8 b4 18 ff ff       	call   c0011607 <KePanic(char const*)>
c001fd53:	83 c4 10             	add    esp,0x10
c001fd56:	eb 10                	jmp    c001fd68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd58:	83 ec 0c             	sub    esp,0xc
c001fd5b:	68 8c 0f 02 c0       	push   0xc0020f8c
c001fd60:	e8 a2 18 ff ff       	call   c0011607 <KePanic(char const*)>
c001fd65:	83 c4 10             	add    esp,0x10
c001fd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd6f:	8d 50 01             	lea    edx,[eax+0x1]
c001fd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd79:	90                   	nop
c001fd7a:	83 c4 0c             	add    esp,0xc
c001fd7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fd7e <LinkedList<Device>::LinkedList()>:
c001fd7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fda2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fda8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdbe:	90                   	nop
c001fdbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fdc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fdc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdc6:	85 c0                	test   eax,eax
c001fdc8:	75 0e                	jne    c001fdd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fdca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdd1:	85 c0                	test   eax,eax
c001fdd3:	75 03                	jne    c001fdd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fdd5:	b0 01                	mov    al,0x1
c001fdd7:	c3                   	ret    
c001fdd8:	b0 00                	mov    al,0x0
c001fdda:	90                   	nop
c001fddb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fddc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fde0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fde2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fde4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fde4:	83 ec 0c             	sub    esp,0xc
c001fde7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fded:	85 c0                	test   eax,eax
c001fdef:	75 17                	jne    c001fe08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fdf1:	83 ec 0c             	sub    esp,0xc
c001fdf4:	68 98 0f 02 c0       	push   0xc0020f98
c001fdf9:	e8 09 18 ff ff       	call   c0011607 <KePanic(char const*)>
c001fdfe:	83 c4 10             	add    esp,0x10
c001fe01:	e9 96 00 00 00       	jmp    c001fe9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fe06:	66 90                	xchg   ax,ax
c001fe08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe12:	85 c0                	test   eax,eax
c001fe14:	0f 95 c0             	setne  al
c001fe17:	0f b6 c0             	movzx  eax,al
c001fe1a:	85 c0                	test   eax,eax
c001fe1c:	74 12                	je     c001fe30 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fe1e:	83 ec 0c             	sub    esp,0xc
c001fe21:	68 e3 0f 02 c0       	push   0xc0020fe3
c001fe26:	e8 dc 17 ff ff       	call   c0011607 <KePanic(char const*)>
c001fe2b:	83 c4 10             	add    esp,0x10
c001fe2e:	66 90                	xchg   ax,ax
c001fe30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe36:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe39:	85 c0                	test   eax,eax
c001fe3b:	0f 94 c0             	sete   al
c001fe3e:	0f b6 c0             	movzx  eax,al
c001fe41:	85 c0                	test   eax,eax
c001fe43:	74 33                	je     c001fe78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fe45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe61:	83 f8 01             	cmp    eax,0x1
c001fe64:	74 22                	je     c001fe88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe66:	83 ec 0c             	sub    esp,0xc
c001fe69:	68 bc 0f 02 c0       	push   0xc0020fbc
c001fe6e:	e8 94 17 ff ff       	call   c0011607 <KePanic(char const*)>
c001fe73:	83 c4 10             	add    esp,0x10
c001fe76:	eb 10                	jmp    c001fe88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe7e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fe81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe85:	89 10                	mov    DWORD PTR [eax],edx
c001fe87:	90                   	nop
c001fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe8f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fe92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe99:	8d 76 00             	lea    esi,[esi+0x0]
c001fe9c:	83 c4 0c             	add    esp,0xc
c001fe9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fea0:	83 ec 0c             	sub    esp,0xc
c001fea3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fea8:	75 12                	jne    c001febc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001feaa:	83 ec 0c             	sub    esp,0xc
c001fead:	68 60 0f 02 c0       	push   0xc0020f60
c001feb2:	e8 50 17 ff ff       	call   c0011607 <KePanic(char const*)>
c001feb7:	83 c4 10             	add    esp,0x10
c001feba:	66 90                	xchg   ax,ax
c001febc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fec2:	85 c0                	test   eax,eax
c001fec4:	74 36                	je     c001fefc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fecd:	85 c0                	test   eax,eax
c001fecf:	74 2b                	je     c001fefc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fed8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fedc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fee7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001feea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fef1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fef8:	eb 6a                	jmp    c001ff64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fefa:	66 90                	xchg   ax,ax
c001fefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff02:	85 c0                	test   eax,eax
c001ff04:	75 4e                	jne    c001ff54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff0d:	85 c0                	test   eax,eax
c001ff0f:	75 43                	jne    c001ff54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff15:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff19:	89 10                	mov    DWORD PTR [eax],edx
c001ff1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff2d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff3b:	85 c0                	test   eax,eax
c001ff3d:	74 25                	je     c001ff64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff3f:	83 ec 0c             	sub    esp,0xc
c001ff42:	68 82 0f 02 c0       	push   0xc0020f82
c001ff47:	e8 bb 16 ff ff       	call   c0011607 <KePanic(char const*)>
c001ff4c:	83 c4 10             	add    esp,0x10
c001ff4f:	eb 13                	jmp    c001ff64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff51:	8d 76 00             	lea    esi,[esi+0x0]
c001ff54:	83 ec 0c             	sub    esp,0xc
c001ff57:	68 8c 0f 02 c0       	push   0xc0020f8c
c001ff5c:	e8 a6 16 ff ff       	call   c0011607 <KePanic(char const*)>
c001ff61:	83 c4 10             	add    esp,0x10
c001ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff6b:	8d 50 01             	lea    edx,[eax+0x1]
c001ff6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff75:	90                   	nop
c001ff76:	83 c4 0c             	add    esp,0xc
c001ff79:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ff7c <ACPI::~ACPI()>:
c001ff7c:	83 ec 0c             	sub    esp,0xc
c001ff7f:	ba 98 22 02 c0       	mov    edx,0xc0022298
c001ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff88:	89 10                	mov    DWORD PTR [eax],edx
c001ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8e:	83 ec 0c             	sub    esp,0xc
c001ff91:	50                   	push   eax
c001ff92:	e8 0f c9 fe ff       	call   c000c8a6 <Device::~Device()>
c001ff97:	83 c4 10             	add    esp,0x10
c001ff9a:	90                   	nop
c001ff9b:	83 c4 0c             	add    esp,0xc
c001ff9e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ffa0 <ACPI::~ACPI()>:
c001ffa0:	83 ec 0c             	sub    esp,0xc
c001ffa3:	83 ec 0c             	sub    esp,0xc
c001ffa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffaa:	e8 cd ff ff ff       	call   c001ff7c <ACPI::~ACPI()>
c001ffaf:	83 c4 10             	add    esp,0x10
c001ffb2:	83 ec 08             	sub    esp,0x8
c001ffb5:	68 64 12 00 00       	push   0x1264
c001ffba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffbe:	e8 4d a8 fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c001ffc3:	83 c4 10             	add    esp,0x10
c001ffc6:	83 c4 0c             	add    esp,0xc
c001ffc9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ffcc <LinkedList<Device>::~LinkedList()>:
c001ffcc:	90                   	nop
c001ffcd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ffd0 <LinkedList<Device>::isEmpty()>:
c001ffd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffd6:	85 c0                	test   eax,eax
c001ffd8:	75 0e                	jne    c001ffe8 <LinkedList<Device>::isEmpty()+0x18>
c001ffda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffe1:	85 c0                	test   eax,eax
c001ffe3:	75 03                	jne    c001ffe8 <LinkedList<Device>::isEmpty()+0x18>
c001ffe5:	b0 01                	mov    al,0x1
c001ffe7:	c3                   	ret    
c001ffe8:	b0 00                	mov    al,0x0
c001ffea:	90                   	nop
c001ffeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ffec <LinkedList<Device>::getFirstElement()>:
c001ffec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fff0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fff2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fff4 <LinkedList<Device>::removeFirst()>:
c001fff4:	83 ec 0c             	sub    esp,0xc
c001fff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fffd:	85 c0                	test   eax,eax
c001ffff:	75 17                	jne    c0020018 <LinkedList<Device>::removeFirst()+0x24>
c0020001:	83 ec 0c             	sub    esp,0xc
c0020004:	68 98 0f 02 c0       	push   0xc0020f98
c0020009:	e8 f9 15 ff ff       	call   c0011607 <KePanic(char const*)>
c002000e:	83 c4 10             	add    esp,0x10
c0020011:	e9 92 00 00 00       	jmp    c00200a8 <LinkedList<Device>::removeFirst()+0xb4>
c0020016:	66 90                	xchg   ax,ax
c0020018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002001c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002001f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020025:	85 c0                	test   eax,eax
c0020027:	74 13                	je     c002003c <LinkedList<Device>::removeFirst()+0x48>
c0020029:	83 ec 0c             	sub    esp,0xc
c002002c:	68 e3 0f 02 c0       	push   0xc0020fe3
c0020031:	e8 d1 15 ff ff       	call   c0011607 <KePanic(char const*)>
c0020036:	83 c4 10             	add    esp,0x10
c0020039:	8d 76 00             	lea    esi,[esi+0x0]
c002003c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020040:	8b 00                	mov    eax,DWORD PTR [eax]
c0020042:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020048:	85 c0                	test   eax,eax
c002004a:	75 34                	jne    c0020080 <LinkedList<Device>::removeFirst()+0x8c>
c002004c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020050:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002005a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020065:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020068:	83 f8 01             	cmp    eax,0x1
c002006b:	74 27                	je     c0020094 <LinkedList<Device>::removeFirst()+0xa0>
c002006d:	83 ec 0c             	sub    esp,0xc
c0020070:	68 bc 0f 02 c0       	push   0xc0020fbc
c0020075:	e8 8d 15 ff ff       	call   c0011607 <KePanic(char const*)>
c002007a:	83 c4 10             	add    esp,0x10
c002007d:	eb 15                	jmp    c0020094 <LinkedList<Device>::removeFirst()+0xa0>
c002007f:	90                   	nop
c0020080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020084:	8b 00                	mov    eax,DWORD PTR [eax]
c0020086:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002008c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020090:	89 10                	mov    DWORD PTR [eax],edx
c0020092:	66 90                	xchg   ax,ax
c0020094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020098:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002009b:	8d 50 ff             	lea    edx,[eax-0x1]
c002009e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00200a5:	8d 76 00             	lea    esi,[esi+0x0]
c00200a8:	83 c4 0c             	add    esp,0xc
c00200ab:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00200ac <CPU::~CPU()>:
c00200ac:	83 ec 0c             	sub    esp,0xc
c00200af:	ba 40 24 02 c0       	mov    edx,0xc0022440
c00200b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b8:	89 10                	mov    DWORD PTR [eax],edx
c00200ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200be:	83 ec 0c             	sub    esp,0xc
c00200c1:	50                   	push   eax
c00200c2:	e8 df c7 fe ff       	call   c000c8a6 <Device::~Device()>
c00200c7:	83 c4 10             	add    esp,0x10
c00200ca:	90                   	nop
c00200cb:	83 c4 0c             	add    esp,0xc
c00200ce:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00200d0 <CPU::~CPU()>:
c00200d0:	83 ec 0c             	sub    esp,0xc
c00200d3:	83 ec 0c             	sub    esp,0xc
c00200d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200da:	e8 cd ff ff ff       	call   c00200ac <CPU::~CPU()>
c00200df:	83 c4 10             	add    esp,0x10
c00200e2:	83 ec 08             	sub    esp,0x8
c00200e5:	68 94 11 00 00       	push   0x1194
c00200ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ee:	e8 1d a7 fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c00200f3:	83 c4 10             	add    esp,0x10
c00200f6:	83 c4 0c             	add    esp,0xc
c00200f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00200fc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00200fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020100:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020103:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020104 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020104:	90                   	nop
c0020105:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020108 <ThreadControlBlock::ThreadControlBlock()>:
c0020108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002010c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020113:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020117:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002011e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020122:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020129:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002012d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020138:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002013f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020143:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020147:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002014b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002014f:	90                   	nop
c0020150:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020154 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020158:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002015e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020162:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020169:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002016d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020178:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002017e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020182:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020189:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002018d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020194:	90                   	nop
c0020195:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020196 <PCI::~PCI()>:
c0020196:	83 ec 0c             	sub    esp,0xc
c0020199:	ba 20 33 02 c0       	mov    edx,0xc0023320
c002019e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a2:	89 10                	mov    DWORD PTR [eax],edx
c00201a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a8:	83 ec 0c             	sub    esp,0xc
c00201ab:	50                   	push   eax
c00201ac:	e8 87 c1 fe ff       	call   c000c338 <Bus::~Bus()>
c00201b1:	83 c4 10             	add    esp,0x10
c00201b4:	90                   	nop
c00201b5:	83 c4 0c             	add    esp,0xc
c00201b8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00201ba <PCI::~PCI()>:
c00201ba:	83 ec 0c             	sub    esp,0xc
c00201bd:	83 ec 0c             	sub    esp,0xc
c00201c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201c4:	e8 cd ff ff ff       	call   c0020196 <PCI::~PCI()>
c00201c9:	83 c4 10             	add    esp,0x10
c00201cc:	83 ec 08             	sub    esp,0x8
c00201cf:	68 5c 01 00 00       	push   0x15c
c00201d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d8:	e8 33 a6 fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c00201dd:	83 c4 10             	add    esp,0x10
c00201e0:	83 c4 0c             	add    esp,0xc
c00201e3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00201e4 <IDE::~IDE()>:
c00201e4:	83 ec 0c             	sub    esp,0xc
c00201e7:	ba d4 33 02 c0       	mov    edx,0xc00233d4
c00201ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f0:	89 10                	mov    DWORD PTR [eax],edx
c00201f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f6:	83 ec 0c             	sub    esp,0xc
c00201f9:	50                   	push   eax
c00201fa:	e8 35 cb fe ff       	call   c000cd34 <HardDiskController::~HardDiskController()>
c00201ff:	83 c4 10             	add    esp,0x10
c0020202:	90                   	nop
c0020203:	83 c4 0c             	add    esp,0xc
c0020206:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020208 <IDE::~IDE()>:
c0020208:	83 ec 0c             	sub    esp,0xc
c002020b:	83 ec 0c             	sub    esp,0xc
c002020e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020212:	e8 cd ff ff ff       	call   c00201e4 <IDE::~IDE()>
c0020217:	83 c4 10             	add    esp,0x10
c002021a:	83 ec 08             	sub    esp,0x8
c002021d:	68 70 02 00 00       	push   0x270
c0020222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020226:	e8 e5 a5 fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c002022b:	83 c4 10             	add    esp,0x10
c002022e:	83 c4 0c             	add    esp,0xc
c0020231:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020232 <SATABus::~SATABus()>:
c0020232:	83 ec 0c             	sub    esp,0xc
c0020235:	ba 24 34 02 c0       	mov    edx,0xc0023424
c002023a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002023e:	89 10                	mov    DWORD PTR [eax],edx
c0020240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020244:	83 ec 0c             	sub    esp,0xc
c0020247:	50                   	push   eax
c0020248:	e8 e7 ca fe ff       	call   c000cd34 <HardDiskController::~HardDiskController()>
c002024d:	83 c4 10             	add    esp,0x10
c0020250:	90                   	nop
c0020251:	83 c4 0c             	add    esp,0xc
c0020254:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020256 <SATABus::~SATABus()>:
c0020256:	83 ec 0c             	sub    esp,0xc
c0020259:	83 ec 0c             	sub    esp,0xc
c002025c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020260:	e8 cd ff ff ff       	call   c0020232 <SATABus::~SATABus()>
c0020265:	83 c4 10             	add    esp,0x10
c0020268:	83 ec 08             	sub    esp,0x8
c002026b:	68 64 01 00 00       	push   0x164
c0020270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020274:	e8 97 a5 fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c0020279:	83 c4 10             	add    esp,0x10
c002027c:	83 c4 0c             	add    esp,0xc
c002027f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020280 <ATA::~ATA()>:
c0020280:	83 ec 0c             	sub    esp,0xc
c0020283:	ba 64 34 02 c0       	mov    edx,0xc0023464
c0020288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002028c:	89 10                	mov    DWORD PTR [eax],edx
c002028e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020292:	83 ec 0c             	sub    esp,0xc
c0020295:	50                   	push   eax
c0020296:	e8 7b cb fe ff       	call   c000ce16 <PhysicalDisk::~PhysicalDisk()>
c002029b:	83 c4 10             	add    esp,0x10
c002029e:	90                   	nop
c002029f:	83 c4 0c             	add    esp,0xc
c00202a2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00202a4 <ATA::~ATA()>:
c00202a4:	83 ec 0c             	sub    esp,0xc
c00202a7:	83 ec 0c             	sub    esp,0xc
c00202aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ae:	e8 cd ff ff ff       	call   c0020280 <ATA::~ATA()>
c00202b3:	83 c4 10             	add    esp,0x10
c00202b6:	83 ec 08             	sub    esp,0x8
c00202b9:	68 7c 01 00 00       	push   0x17c
c00202be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202c2:	e8 49 a5 fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c00202c7:	83 c4 10             	add    esp,0x10
c00202ca:	83 c4 0c             	add    esp,0xc
c00202cd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00202ce <ATAPI::~ATAPI()>:
c00202ce:	83 ec 0c             	sub    esp,0xc
c00202d1:	ba ac 34 02 c0       	mov    edx,0xc00234ac
c00202d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202da:	89 10                	mov    DWORD PTR [eax],edx
c00202dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e0:	83 ec 0c             	sub    esp,0xc
c00202e3:	50                   	push   eax
c00202e4:	e8 2d cb fe ff       	call   c000ce16 <PhysicalDisk::~PhysicalDisk()>
c00202e9:	83 c4 10             	add    esp,0x10
c00202ec:	90                   	nop
c00202ed:	83 c4 0c             	add    esp,0xc
c00202f0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00202f2 <ATAPI::~ATAPI()>:
c00202f2:	83 ec 0c             	sub    esp,0xc
c00202f5:	83 ec 0c             	sub    esp,0xc
c00202f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202fc:	e8 cd ff ff ff       	call   c00202ce <ATAPI::~ATAPI()>
c0020301:	83 c4 10             	add    esp,0x10
c0020304:	83 ec 08             	sub    esp,0x8
c0020307:	68 84 01 00 00       	push   0x184
c002030c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020310:	e8 fb a4 fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c0020315:	83 c4 10             	add    esp,0x10
c0020318:	83 c4 0c             	add    esp,0xc
c002031b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002031c <SATA::~SATA()>:
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	ba 60 35 02 c0       	mov    edx,0xc0023560
c0020324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020328:	89 10                	mov    DWORD PTR [eax],edx
c002032a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002032e:	83 ec 0c             	sub    esp,0xc
c0020331:	50                   	push   eax
c0020332:	e8 df ca fe ff       	call   c000ce16 <PhysicalDisk::~PhysicalDisk()>
c0020337:	83 c4 10             	add    esp,0x10
c002033a:	90                   	nop
c002033b:	83 c4 0c             	add    esp,0xc
c002033e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020340 <SATA::~SATA()>:
c0020340:	83 ec 0c             	sub    esp,0xc
c0020343:	83 ec 0c             	sub    esp,0xc
c0020346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002034a:	e8 cd ff ff ff       	call   c002031c <SATA::~SATA()>
c002034f:	83 c4 10             	add    esp,0x10
c0020352:	83 ec 08             	sub    esp,0x8
c0020355:	68 7c 01 00 00       	push   0x17c
c002035a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002035e:	e8 ad a4 fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c0020363:	83 c4 10             	add    esp,0x10
c0020366:	83 c4 0c             	add    esp,0xc
c0020369:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002036a <SATAPI::~SATAPI()>:
c002036a:	83 ec 0c             	sub    esp,0xc
c002036d:	ba 84 36 02 c0       	mov    edx,0xc0023684
c0020372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020376:	89 10                	mov    DWORD PTR [eax],edx
c0020378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002037c:	83 ec 0c             	sub    esp,0xc
c002037f:	50                   	push   eax
c0020380:	e8 91 ca fe ff       	call   c000ce16 <PhysicalDisk::~PhysicalDisk()>
c0020385:	83 c4 10             	add    esp,0x10
c0020388:	90                   	nop
c0020389:	83 c4 0c             	add    esp,0xc
c002038c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002038e <SATAPI::~SATAPI()>:
c002038e:	83 ec 0c             	sub    esp,0xc
c0020391:	83 ec 0c             	sub    esp,0xc
c0020394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020398:	e8 cd ff ff ff       	call   c002036a <SATAPI::~SATAPI()>
c002039d:	83 c4 10             	add    esp,0x10
c00203a0:	83 ec 08             	sub    esp,0x8
c00203a3:	68 84 01 00 00       	push   0x184
c00203a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203ac:	e8 5f a4 fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c00203b1:	83 c4 10             	add    esp,0x10
c00203b4:	83 c4 0c             	add    esp,0xc
c00203b7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00203b8 <IOAPIC::~IOAPIC()>:
c00203b8:	83 ec 0c             	sub    esp,0xc
c00203bb:	ba c4 36 02 c0       	mov    edx,0xc00236c4
c00203c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203c4:	89 10                	mov    DWORD PTR [eax],edx
c00203c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ca:	83 ec 0c             	sub    esp,0xc
c00203cd:	50                   	push   eax
c00203ce:	e8 d3 c4 fe ff       	call   c000c8a6 <Device::~Device()>
c00203d3:	83 c4 10             	add    esp,0x10
c00203d6:	90                   	nop
c00203d7:	83 c4 0c             	add    esp,0xc
c00203da:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00203dc <IOAPIC::~IOAPIC()>:
c00203dc:	83 ec 0c             	sub    esp,0xc
c00203df:	83 ec 0c             	sub    esp,0xc
c00203e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203e6:	e8 cd ff ff ff       	call   c00203b8 <IOAPIC::~IOAPIC()>
c00203eb:	83 c4 10             	add    esp,0x10
c00203ee:	83 ec 08             	sub    esp,0x8
c00203f1:	68 68 01 00 00       	push   0x168
c00203f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203fa:	e8 11 a4 fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c00203ff:	83 c4 10             	add    esp,0x10
c0020402:	83 c4 0c             	add    esp,0xc
c0020405:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020408 <APICTimer::~APICTimer()>:
c0020408:	83 ec 0c             	sub    esp,0xc
c002040b:	ba 0c 37 02 c0       	mov    edx,0xc002370c
c0020410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020414:	89 10                	mov    DWORD PTR [eax],edx
c0020416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002041a:	83 ec 0c             	sub    esp,0xc
c002041d:	50                   	push   eax
c002041e:	e8 6d df fe ff       	call   c000e390 <Timer::~Timer()>
c0020423:	83 c4 10             	add    esp,0x10
c0020426:	90                   	nop
c0020427:	83 c4 0c             	add    esp,0xc
c002042a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002042c <APICTimer::~APICTimer()>:
c002042c:	83 ec 0c             	sub    esp,0xc
c002042f:	83 ec 0c             	sub    esp,0xc
c0020432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020436:	e8 cd ff ff ff       	call   c0020408 <APICTimer::~APICTimer()>
c002043b:	83 c4 10             	add    esp,0x10
c002043e:	83 ec 08             	sub    esp,0x8
c0020441:	68 60 01 00 00       	push   0x160
c0020446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002044a:	e8 c1 a3 fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c002044f:	83 c4 10             	add    esp,0x10
c0020452:	83 c4 0c             	add    esp,0xc
c0020455:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020458 <PIT::~PIT()>:
c0020458:	83 ec 0c             	sub    esp,0xc
c002045b:	ba 5c 37 02 c0       	mov    edx,0xc002375c
c0020460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020464:	89 10                	mov    DWORD PTR [eax],edx
c0020466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002046a:	83 ec 0c             	sub    esp,0xc
c002046d:	50                   	push   eax
c002046e:	e8 1d df fe ff       	call   c000e390 <Timer::~Timer()>
c0020473:	83 c4 10             	add    esp,0x10
c0020476:	90                   	nop
c0020477:	83 c4 0c             	add    esp,0xc
c002047a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002047c <PIT::~PIT()>:
c002047c:	83 ec 0c             	sub    esp,0xc
c002047f:	83 ec 0c             	sub    esp,0xc
c0020482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020486:	e8 cd ff ff ff       	call   c0020458 <PIT::~PIT()>
c002048b:	83 c4 10             	add    esp,0x10
c002048e:	83 ec 08             	sub    esp,0x8
c0020491:	68 5c 01 00 00       	push   0x15c
c0020496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002049a:	e8 71 a3 fe ff       	call   c000a810 <operator delete(void*, unsigned long)>
c002049f:	83 c4 10             	add    esp,0x10
c00204a2:	83 c4 0c             	add    esp,0xc
c00204a5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 71 25 02 c0       	mov    esi,0xc0022571
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 8d 25 02 c0       	mov    esi,0xc002258d
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
