
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 04 37 02 c0       	mov    eax,0xc0023704
c0000025:	3d 04 37 02 c0       	cmp    eax,0xc0023704
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 04 37 02 c0       	push   0xc0023704
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 04 37 02 c0       	mov    eax,0xc0023704
c0000051:	2d 04 37 02 c0       	sub    eax,0xc0023704
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 04 37 02 c0       	push   0xc0023704
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 4c fe 01 c0       	mov    ebx,0xc001fe4c
c0000097:	81 eb 48 fe 01 c0    	sub    ebx,0xc001fe48
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 48 fe 01 c0       	mov    esi,0xc001fe48
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 04 37 02 c0       	push   0xc0023704
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 04 37 02 c0       	push   0xc0023704
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 53 50 01 00       	call   c0015300 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 31 50 01 00       	call   c0015300 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 3e 55 01 00       	call   c001582c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 d9 5b 01 00       	call   c0015ed0 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 31 0e 01 00       	jmp    c00111b0 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 60 fe 01 c0 02 	test   BYTE PTR [edx-0x3ffe01a0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 60 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe01a0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 60 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe01a0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 60 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe01a0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 60 fe 01 c0 04 	test   BYTE PTR [ecx-0x3ffe01a0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 60 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe01a0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 64 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe009c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 c2 76 01 00       	jmp    c001949c <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 ec 76 01 00       	jmp    c00194dc <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 0d 77 01 00       	jmp    c001951c <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 c0 00 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdff40]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 c0 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdff40]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 24 27 02 c0       	mov    edx,0xc0022724
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 7c ff 01 c0       	mov    edx,0xc001ff7c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 82 ff 01 c0       	mov    eax,0xc001ff82
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 40 00 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdffc0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 8b ff 01 c0       	mov    eax,0xc001ff8b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 c0 00 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdff40]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 10 00 02 c0       	mov    eax,0xc0020010
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 00 00 02 c0       	mov    ebx,0xc0020000
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 e0 ff 01 c0       	mov    eax,0xc001ffe0
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 f0 ff 01 c0       	mov    eax,0xc001fff0
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 92 ff 01 c0       	mov    edx,0xc001ff92
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 9e ff 01 c0       	mov    edx,0xc001ff9e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba b2 ff 01 c0       	mov    edx,0xc001ffb2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c e0 03 02 c0 	mov    DWORD PTR [esp+0xc],0xc00203e0
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 e0 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc00203e0
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 e0 01 02 c0       	mov    eax,0xc00201e0
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 20 01 02 c0       	mov    eax,0xc0020120
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 e0 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff20]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 e0 04 02 c0       	push   0xc00204e0
c0006147:	e8 f4 3c 01 00       	call   c0019e40 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 ee 04 02 c0       	push   0xc00204ee
c000617f:	e8 bc 3c 01 00       	call   c0019e40 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 25 3c 01 00       	call   c0019de4 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 fd 04 02 c0       	push   0xc00204fd
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 00 05 02 c0       	push   0xc0020500
c000682f:	e8 0c 36 01 00       	call   c0019e40 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 1a 36 01 00       	call   c0019e5c <iso_kprintfd>
c0006842:	c7 04 24 05 05 02 c0 	mov    DWORD PTR [esp],0xc0020505
c0006849:	e8 f2 35 01 00       	call   c0019e40 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 02 36 01 00       	call   c0019e5c <iso_kprintfd>
c000685a:	c7 04 24 0b 05 02 c0 	mov    DWORD PTR [esp],0xc002050b
c0006861:	e8 da 35 01 00       	call   c0019e40 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 ea 35 01 00       	call   c0019e5c <iso_kprintfd>
c0006872:	c7 04 24 11 05 02 c0 	mov    DWORD PTR [esp],0xc0020511
c0006879:	e8 c2 35 01 00       	call   c0019e40 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 d2 35 01 00       	call   c0019e5c <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 fd 04 02 c0       	push   0xc00204fd
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 1a 05 02 c0       	push   0xc002051a
c0006a52:	e8 e9 33 01 00       	call   c0019e40 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 25 05 02 c0       	push   0xc0020525
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 2c 05 02 c0       	push   0xc002052c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 33 05 02 c0       	push   0xc0020533
c0006b69:	e8 d2 32 01 00       	call   c0019e40 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 3e 05 02 c0       	push   0xc002053e
c0006b84:	e8 b7 32 01 00       	call   c0019e40 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 7e 9d 00 00       	call   c0010a12 <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 a3 5a 00 00       	call   c000c746 <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 4f 05 02 c0       	push   0xc002054f
c0006cd4:	e8 18 9e 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 68 05 02 c0       	push   0xc0020568
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 57 e9 00 00       	call   c0015658 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 66 eb 00 00       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 40 63 01 c0       	push   0xc0016340
c0006d25:	52                   	push   edx
c0006d26:	e8 51 eb 00 00       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 64 06 02 c0       	push   0xc0020664
c0006d33:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d38:	e8 b4 9d 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d44:	e8 33 a6 00 00       	call   c001137c <KeInitRand()>
c0006d49:	e8 15 fa 00 00       	call   c0016763 <Vm::initialise8086()>
c0006d4e:	e8 a7 47 00 00       	call   c000b4fa <Fs::initVFS()>
c0006d53:	c7 04 24 75 05 02 c0 	mov    DWORD PTR [esp],0xc0020575
c0006d5a:	e8 92 9d 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 64 06 02 c0       	push   0xc0020664
c0006d7e:	e8 6e 9d 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c0006d83:	e8 50 44 00 00       	call   c000b1d8 <KeInitialiseSymlinks()>
c0006d88:	e8 9b a2 00 00       	call   c0011028 <KeLoadSystemEnv()>
c0006d8d:	e8 f8 a4 00 00       	call   c001128a <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 8f 05 02 c0       	push   0xc002058f
c0006d9c:	68 98 05 02 c0       	push   0xc0020598
c0006da1:	e8 e0 ca 00 00       	call   c0013886 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 f2 52 00 00       	call   c000c0a0 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 88 06 02 c0 	mov    DWORD PTR [esp],0xc0020688
c0006db5:	e8 37 9d 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 78 59 00 00       	call   c000c744 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 a0 05 02 c0 	mov    DWORD PTR [esp],0xc00205a0
c0006dd3:	e8 19 9d 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 b1 05 02 c0       	push   0xc00205b1
c0006de7:	e8 70 e2 00 00       	call   c001505c <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 a7 e4 00 00       	call   c001529c <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 c6 ee 00 00       	call   c0015cc8 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 cd 05 02 c0       	push   0xc00205cd
c0006e17:	50                   	push   eax
c0006e18:	e8 a3 59 00 00       	call   c000c7c0 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba d4 06 02 c0       	mov    edx,0xc00206d4
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 2f 7f 01 00       	call   c001ee46 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 d5 8f 00 00       	call   c000ff2a <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 ae 8f 00 00       	call   c000ff2a <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 8c 8f 00 00       	call   c000ff2a <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 6a 8f 00 00       	call   c000ff2a <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 77 8e 00 00       	call   c000fea6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 52 8e 00 00       	call   c000fea6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 8e 7d 01 00       	call   c001ee00 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 dc 79 01 00       	call   c001ea70 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 68 8e 00 00       	call   c000ff2a <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 d6 05 02 c0       	push   0xc00205d6
c0007104:	e8 bc a0 00 00       	call   c00111c5 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 dc 05 02 c0       	push   0xc00205dc
c0007140:	e8 80 a0 00 00       	call   c00111c5 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 6f 88 00 00       	jmp    c000f9fc <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 e2 05 02 c0       	push   0xc00205e2
c00071e3:	0f 94 05 60 2f 02 c0 	sete   BYTE PTR ds:0xc0022f60
c00071ea:	e8 02 99 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 6b 83 00 00       	call   c000f570 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 14 54 00 00       	call   c000c628 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 fa 05 02 c0 	mov    DWORD PTR [esp],0xc00205fa
c000722d:	e8 bf 98 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 9a 8d 00 00       	call   c000ffe2 <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 d1 53 00 00       	call   c000c628 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 a8 06 02 c0       	push   0xc00206a8
c0007274:	e8 78 98 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c0007279:	e8 2c 07 01 00       	call   c00179aa <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 14 06 02 c0 	mov    DWORD PTR [esp],0xc0020614
c0007285:	e8 67 98 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 0e e7 00 00       	call   c00159a4 <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 2f 06 02 c0       	push   0xc002062f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 40 06 02 c0       	push   0xc0020640
c000730d:	e8 b3 9e 00 00       	call   c00111c5 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 4d 06 02 c0       	push   0xc002064d
c0007322:	e8 9e 9e 00 00       	call   c00111c5 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 57 06 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020657
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 84 9e 00 00       	jmp    c00111c5 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 43 01 01 00       	call   c0017676 <HalSystemIdle()>
c0007533:	e8 ca 7e 01 00       	call   c001f402 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 00 eb 01 c0       	push   0xc001eb00
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 10 eb 01 c0       	push   0xc001eb10
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 1a eb 01 c0       	push   0xc001eb1a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 24 eb 01 c0       	push   0xc001eb24
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 2e eb 01 c0       	push   0xc001eb2e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 38 eb 01 c0       	push   0xc001eb38
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 42 eb 01 c0       	push   0xc001eb42
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 4c eb 01 c0       	push   0xc001eb4c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 56 eb 01 c0       	push   0xc001eb56
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 5e eb 01 c0       	push   0xc001eb5e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 68 eb 01 c0       	push   0xc001eb68
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 70 eb 01 c0       	push   0xc001eb70
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 78 eb 01 c0       	push   0xc001eb78
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 80 eb 01 c0       	push   0xc001eb80
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 9a eb 01 c0       	push   0xc001eb9a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 a2 eb 01 c0       	push   0xc001eba2
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 ac eb 01 c0       	push   0xc001ebac
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 b6 eb 01 c0       	push   0xc001ebb6
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 c0 eb 01 c0       	push   0xc001ebc0
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 5a ec 01 c0       	push   0xc001ec5a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 61 ec 01 c0       	push   0xc001ec61
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 4c ec 01 c0       	push   0xc001ec4c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 53 ec 01 c0       	push   0xc001ec53
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 ca eb 01 c0       	push   0xc001ebca
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 d4 eb 01 c0       	push   0xc001ebd4
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 de eb 01 c0       	push   0xc001ebde
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 e8 eb 01 c0       	push   0xc001ebe8
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 f2 eb 01 c0       	push   0xc001ebf2
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 fc eb 01 c0       	push   0xc001ebfc
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 06 ec 01 c0       	push   0xc001ec06
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 10 ec 01 c0       	push   0xc001ec10
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 1a ec 01 c0       	push   0xc001ec1a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 24 ec 01 c0       	push   0xc001ec24
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 2e ec 01 c0       	push   0xc001ec2e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 38 ec 01 c0       	push   0xc001ec38
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 42 ec 01 c0       	push   0xc001ec42
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 9c ed 01 c0       	push   0xc001ed9c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 a6 ed 01 c0       	push   0xc001eda6
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 b0 ed 01 c0       	push   0xc001edb0
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 ba ed 01 c0       	push   0xc001edba
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 c4 ed 01 c0       	push   0xc001edc4
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 ce ed 01 c0       	push   0xc001edce
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 d8 ed 01 c0       	push   0xc001edd8
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 e2 ed 01 c0       	push   0xc001ede2
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 56 eb 01 c0       	push   0xc001eb56
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 54 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f54
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d 54 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f54
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 54 2f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022f54,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 54 2f 02 c0       	mov    eax,ds:0xc0022f54
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 f8 06 02 c0       	push   0xc00206f8
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 28 07 02 c0       	push   0xc0020728
c0007a44:	e8 7c 97 00 00       	call   c00111c5 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 2d 07 02 c0       	push   0xc002072d
c0007a5a:	e8 66 97 00 00       	call   c00111c5 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 34 07 02 c0       	push   0xc0020734
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 ef 8e 00 00       	call   c0010a75 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 18 8e 00 00       	call   c00109bf <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 dd 77 01 00       	call   c001f39a <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 4c 07 02 c0       	push   0xc002074c
c0007c4b:	e8 75 95 00 00       	call   c00111c5 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 4c 07 02 c0       	push   0xc002074c
c0007cc5:	e8 fb 94 00 00       	call   c00111c5 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 58 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f58
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 58 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f58
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 58 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f58
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 f1 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc00207f1
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 f5 93 00 00       	jmp    c00111c5 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 74 07 02 c0       	push   0xc0020774
c0007e54:	e8 6c 93 00 00       	call   c00111c5 <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 07 08 02 c0       	push   0xc0020807
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 a4 07 02 c0       	push   0xc00207a4
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 1f 08 02 c0       	push   0xc002081f
c000810a:	e8 b6 90 00 00       	call   c00111c5 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 c8 07 02 c0       	push   0xc00207c8
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 2d 08 02 c0       	push   0xc002082d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 8c 08 02 c0       	mov    edx,0xc002088c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 49 08 02 c0       	push   0xc0020849
c0008331:	e8 8f 8e 00 00       	call   c00111c5 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000837a:	e8 49 d7 00 00       	call   c0015ac8 <schedule()>
c000837f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 73 6e 01 00       	call   c001f280 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 66 08 02 c0       	push   0xc0020866
c0008422:	e8 9e 8d 00 00       	call   c00111c5 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 8c 08 02 c0       	mov    edx,0xc002088c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba d4 08 02 c0       	mov    edx,0xc00208d4
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 fe 4f 00 00       	call   c000d50a <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 36 03 01 00       	call   c0018868 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d 80 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd080]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d 80 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd080]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 38 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1c8]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 10 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1f0]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 68 00 01 00       	call   c00186fc <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 c5 00 01 00       	jmp    c0018804 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 a0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208a0
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 39 8a 00 00       	jmp    c00111c5 <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 5e 37 00 00       	jmp    c000c047 <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be ae 08 02 c0       	mov    esi,0xc00208ae
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 dc fb 00 00       	call   c0018804 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba d4 08 02 c0       	mov    edx,0xc00208d4
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 bf 08 02 c0       	push   0xc00208bf
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 c5 08 02 c0       	push   0xc00208c5
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 9c 09 02 c0       	mov    edx,0xc002099c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 c0 2f 02 c0       	mov    eax,ds:0xc0022fc0
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 c0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fc0,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 7f 62 01 00       	call   c001f468 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba b8 09 02 c0       	mov    edx,0xc00209b8
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 9c 09 02 c0       	mov    edx,0xc002099c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 7f 61 01 00       	call   c001f53c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 73 61 01 00       	call   c001f544 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 79 60 01 00       	call   c001f468 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 74 09 02 c0       	push   0xc0020974
c0009414:	e8 ac 7d 00 00       	call   c00111c5 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba b8 09 02 c0       	mov    edx,0xc00209b8
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 7e 60 01 00       	call   c001f53c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 0b 61 01 00       	call   c001f5e6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 c9 5e 01 00       	call   c001f426 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 50 2f 02 c0       	push   0xc0022f50
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 24 f4 01 c0       	push   0xc001f424
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 c8 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fc8
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d c8 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fc8
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d c4 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022fc4
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 c4 2f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022fc4,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d c4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fc4,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 cc 09 02 c0       	push   0xc00209cc
c0009674:	e8 4c 7b 00 00       	call   c00111c5 <KePanic(char const*)>
c0009679:	8b 2d c4 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022fc4
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 c4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fc4,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 c4 2f 02 c0       	mov    eax,ds:0xc0022fc4
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 c4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fc4,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 c4 2f 02 c0       	mov    ds:0xc0022fc4,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 cc 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fcc
c000973e:	8b 0d d4 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fd4
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d d0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fd0
c0009759:	8b 0d cc 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fcc
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 60 0c 02 c0       	push   0xc0020c60
c000979e:	e8 22 7a 00 00       	call   c00111c5 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 77 0c 02 c0       	push   0xc0020c77
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d d0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fd0,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 d8 2f 02 c0 43 	mov    BYTE PTR ds:0xc0022fd8,0x43
c000984f:	c7 05 cc 2f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0022fcc,0x8
c0009859:	a3 d4 2f 02 c0       	mov    ds:0xc0022fd4,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 d0 2f 02 c0       	mov    eax,ds:0xc0022fd0
c0009874:	f7 35 cc 2f 02 c0    	div    DWORD PTR ds:0xc0022fcc
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 ec 09 02 c0       	push   0xc00209ec
c00098af:	e8 11 79 00 00       	call   c00111c5 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 8e 0c 02 c0       	push   0xc0020c8e
c0009981:	e8 3f 78 00 00       	call   c00111c5 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 10 0a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020a10
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 dc 77 00 00       	jmp    c00111c5 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 aa 0c 02 c0       	push   0xc0020caa
c00099f6:	e8 ca 77 00 00       	call   c00111c5 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 c6 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020cc6
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 80 77 00 00       	jmp    c00111c5 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 34 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a34
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009cee:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 58 0a 02 c0       	push   0xc0020a58
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 c0 0a 02 c0       	push   0xc0020ac0
c0009d87:	e8 39 74 00 00       	call   c00111c5 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 e4 0a 02 c0       	push   0xc0020ae4
c0009e7b:	e8 45 73 00 00       	call   c00111c5 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 10 0b 02 c0       	push   0xc0020b10
c0009fd9:	e8 e7 71 00 00       	call   c00111c5 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 ae 26 00 00       	call   c000c8bc <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 e0 0c 02 c0       	push   0xc0020ce0
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 d8 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022fd8
c000a2e7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 8a 37 00 00       	call   c000da7e <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d cc 2f 02 c0    	cmp    DWORD PTR ds:0xc0022fcc,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 34 0b 02 c0       	push   0xc0020b34
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 ee 0c 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020cee
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 11 0d 02 c0       	push   0xc0020d11
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 ff 0c 02 c0       	push   0xc0020cff
c000a413:	e8 ad 6d 00 00       	call   c00111c5 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 64 0b 02 c0       	push   0xc0020b64
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 d8 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022fd8
c000a4bf:	8b 2c 85 7c 87 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 46 35 00 00       	call   c000da12 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 cc 2f 02 c0    	cmp    DWORD PTR ds:0xc0022fcc,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 24 0d 02 c0       	push   0xc0020d24
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 84 0b 02 c0       	push   0xc0020b84
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 e4 0b 02 c0 	mov    DWORD PTR [esp],0xc0020be4
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 39 0d 02 c0       	push   0xc0020d39
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 4d 0d 02 c0       	push   0xc0020d4d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 60 0d 02 c0       	push   0xc0020d60
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 6d 0d 02 c0       	push   0xc0020d6d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 86 0d 02 c0       	push   0xc0020d86
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 86 0d 02 c0       	push   0xc0020d86
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 8e 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d8e
c000a7ec:	e8 d4 69 00 00       	call   c00111c5 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 a6 0d 02 c0       	push   0xc0020da6
c000a7fe:	e8 c2 69 00 00       	call   c00111c5 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 bc 0d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf244]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 0c 0f 02 c0       	push   0xc0020f0c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 20 0f 02 c0       	push   0xc0020f20
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 2a 0f 02 c0       	push   0xc0020f2a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 34 0f 02 c0       	push   0xc0020f34
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 78 10 02 c0       	push   0xc0021078
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 3e 0f 02 c0       	push   0xc0020f3e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 98 10 02 c0       	push   0xc0021098
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 53 0f 02 c0       	push   0xc0020f53
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 6d 0f 02 c0       	push   0xc0020f6d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 e0 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd020]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 c0 10 02 c0       	push   0xc00210c0
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 78 10 02 c0       	push   0xc0021078
c000ab78:	e8 48 66 00 00       	call   c00111c5 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 08 11 02 c0       	push   0xc0021108
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 08 11 02 c0       	push   0xc0021108
c000aba7:	e8 19 66 00 00       	call   c00111c5 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 78 0f 02 c0       	push   0xc0020f78
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 78 0f 02 c0       	push   0xc0020f78
c000abd3:	e8 ed 65 00 00       	call   c00111c5 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 95 0f 02 c0       	push   0xc0020f95
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 95 0f 02 c0       	push   0xc0020f95
c000abff:	e8 c1 65 00 00       	call   c00111c5 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 28 11 02 c0       	push   0xc0021128
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 28 11 02 c0       	push   0xc0021128
c000ac2b:	e8 95 65 00 00       	call   c00111c5 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 4c 11 02 c0       	push   0xc002114c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 4c 11 02 c0       	push   0xc002114c
c000ac57:	e8 69 65 00 00       	call   c00111c5 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 b1 0f 02 c0       	push   0xc0020fb1
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 b1 0f 02 c0       	push   0xc0020fb1
c000ac83:	e8 3d 65 00 00       	call   c00111c5 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 cd 0f 02 c0       	push   0xc0020fcd
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 cd 0f 02 c0       	push   0xc0020fcd
c000acaf:	e8 11 65 00 00       	call   c00111c5 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 6c 11 02 c0       	push   0xc002116c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 6c 11 02 c0       	push   0xc002116c
c000acdb:	e8 e5 64 00 00       	call   c00111c5 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 90 11 02 c0       	push   0xc0021190
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 90 11 02 c0       	push   0xc0021190
c000ad07:	e8 b9 64 00 00       	call   c00111c5 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateSymlinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 f1 65 00 00       	call   c0011313 <KeRand()>
c000ad22:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateSymlinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 af 11 02 c0       	push   0xc00211af
c000ad57:	e8 69 64 00 00       	call   c00111c5 <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateSymlinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateSymlinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000ad97:	68 b8 11 02 c0       	push   0xc00211b8
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 74 09 00 00       	call   c000b718 <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3c>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 d6 11 02 c0       	push   0xc00211d6
c000adb3:	e8 0d 64 00 00       	call   c00111c5 <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 06                	push   0x6
c000adbf:	53                   	push   ebx
c000adc0:	e8 0f 0a 00 00       	call   c000b7d4 <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5d>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 f0 11 02 c0       	push   0xc00211f0
c000add4:	e8 ec 63 00 00       	call   c00111c5 <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade4:	7e 40                	jle    c000ae26 <KiFlushSymlinkChanges()+0xa7>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adef:	50                   	push   eax
c000adf0:	89 f0                	mov    eax,esi
c000adf2:	c1 e0 08             	shl    eax,0x8
c000adf5:	05 00 60 02 c0       	add    eax,0xc0026000
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa4>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 0a 12 02 c0       	push   0xc002120a
c000ae1b:	e8 a5 63 00 00       	call   c00111c5 <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	46                   	inc    esi
c000ae24:	eb b8                	jmp    c000adde <KiFlushSymlinkChanges()+0x5f>
c000ae26:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	53                   	push   ebx
c000ae34:	e8 f9 09 00 00       	call   c000b832 <File::close()>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 db                	test   ebx,ebx
c000ae3e:	74 0c                	je     c000ae4c <KiFlushSymlinkChanges()+0xcd>
c000ae40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	83 c4 14             	add    esp,0x14
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	c3                   	ret    

c000ae52 <KiDeinitialiseSymlinks(void*)>:
c000ae52:	e9 28 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae57:	53                   	push   ebx
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae63:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6c:	68 00 01 00 00       	push   0x100
c000ae71:	6a 00                	push   0x0
c000ae73:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae7a:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae81:	c1 e0 08             	shl    eax,0x8
c000ae84:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae89:	50                   	push   eax
c000ae8a:	e8 61 56 ff ff       	call   c00004f0 <memset>
c000ae8f:	58                   	pop    eax
c000ae90:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae95:	5a                   	pop    edx
c000ae96:	c1 e0 08             	shl    eax,0x8
c000ae99:	53                   	push   ebx
c000ae9a:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae9f:	50                   	push   eax
c000aea0:	e8 ab 57 ff ff       	call   c0000650 <strcpy>
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	40                   	inc    eax
c000aeae:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb3:	83 f8 03             	cmp    eax,0x3
c000aeb6:	7e 09                	jle    c000aec1 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb8:	83 c4 08             	add    esp,0x8
c000aebb:	5b                   	pop    ebx
c000aebc:	e9 be fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec1:	83 c4 08             	add    esp,0x8
c000aec4:	5b                   	pop    ebx
c000aec5:	c3                   	ret    

c000aec6 <KiIsSymlinkRegistered(char const*)>:
c000aec6:	53                   	push   ebx
c000aec7:	31 db                	xor    ebx,ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000aed2:	7e 30                	jle    c000af04 <KiIsSymlinkRegistered(char const*)+0x3e>
c000aed4:	50                   	push   eax
c000aed5:	50                   	push   eax
c000aed6:	89 d8                	mov    eax,ebx
c000aed8:	c1 e0 08             	shl    eax,0x8
c000aedb:	05 00 60 02 c0       	add    eax,0xc0026000
c000aee0:	50                   	push   eax
c000aee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee5:	e8 96 58 ff ff       	call   c0000780 <strcmp>
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	85 c0                	test   eax,eax
c000aeef:	75 10                	jne    c000af01 <KiIsSymlinkRegistered(char const*)+0x3b>
c000aef1:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000aef8:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000aeff:	eb 07                	jmp    c000af08 <KiIsSymlinkRegistered(char const*)+0x42>
c000af01:	43                   	inc    ebx
c000af02:	eb c8                	jmp    c000aecc <KiIsSymlinkRegistered(char const*)+0x6>
c000af04:	31 c0                	xor    eax,eax
c000af06:	31 d2                	xor    edx,edx
c000af08:	83 c4 08             	add    esp,0x8
c000af0b:	5b                   	pop    ebx
c000af0c:	c3                   	ret    

c000af0d <KeDereferenceSymlink(char const*, char*)>:
c000af0d:	55                   	push   ebp
c000af0e:	57                   	push   edi
c000af0f:	56                   	push   esi
c000af10:	53                   	push   ebx
c000af11:	83 ec 48             	sub    esp,0x48
c000af14:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000af18:	56                   	push   esi
c000af19:	e8 a8 ff ff ff       	call   c000aec6 <KiIsSymlinkRegistered(char const*)>
c000af1e:	83 c4 10             	add    esp,0x10
c000af21:	89 c7                	mov    edi,eax
c000af23:	89 d0                	mov    eax,edx
c000af25:	09 f8                	or     eax,edi
c000af27:	0f 84 64 01 00 00    	je     c000b091 <KeDereferenceSymlink(char const*, char*)+0x184>
c000af2d:	83 ec 0c             	sub    esp,0xc
c000af30:	89 d5                	mov    ebp,edx
c000af32:	68 14 01 00 00       	push   0x114
c000af37:	e8 97 cb ff ff       	call   c0007ad3 <malloc>
c000af3c:	83 c4 0c             	add    esp,0xc
c000af3f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af45:	56                   	push   esi
c000af46:	50                   	push   eax
c000af47:	89 c3                	mov    ebx,eax
c000af49:	e8 ca 07 00 00       	call   c000b718 <File::File(char const*, Process*)>
c000af4e:	83 c4 10             	add    esp,0x10
c000af51:	85 db                	test   ebx,ebx
c000af53:	0f 84 1f 01 00 00    	je     c000b078 <KeDereferenceSymlink(char const*, char*)+0x16b>
c000af59:	52                   	push   edx
c000af5a:	52                   	push   edx
c000af5b:	6a 01                	push   0x1
c000af5d:	53                   	push   ebx
c000af5e:	e8 71 08 00 00       	call   c000b7d4 <File::open(FileOpenMode)>
c000af63:	83 c4 10             	add    esp,0x10
c000af66:	85 c0                	test   eax,eax
c000af68:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af6a:	74 09                	je     c000af75 <KeDereferenceSymlink(char const*, char*)+0x68>
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	53                   	push   ebx
c000af70:	e9 fd 00 00 00       	jmp    c000b072 <KeDereferenceSymlink(char const*, char*)+0x165>
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 74 24 18          	lea    esi,[esp+0x18]
c000af7c:	56                   	push   esi
c000af7d:	8d 54 24 37          	lea    edx,[esp+0x37]
c000af81:	52                   	push   edx
c000af82:	6a 00                	push   0x0
c000af84:	6a 08                	push   0x8
c000af86:	53                   	push   ebx
c000af87:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000af8a:	83 c4 20             	add    esp,0x20
c000af8d:	85 c0                	test   eax,eax
c000af8f:	0f 85 cf 00 00 00    	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000af95:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000af9a:	0f 85 c4 00 00 00    	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000afa0:	83 ec 0c             	sub    esp,0xc
c000afa3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afa5:	56                   	push   esi
c000afa6:	8d 54 24 20          	lea    edx,[esp+0x20]
c000afaa:	52                   	push   edx
c000afab:	6a 00                	push   0x0
c000afad:	6a 08                	push   0x8
c000afaf:	53                   	push   ebx
c000afb0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afb3:	83 c4 20             	add    esp,0x20
c000afb6:	85 c0                	test   eax,eax
c000afb8:	0f 85 a6 00 00 00    	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000afbe:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000afc3:	0f 85 9b 00 00 00    	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000afc9:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000afcd:	0f 85 be 00 00 00    	jne    c000b091 <KeDereferenceSymlink(char const*, char*)+0x184>
c000afd3:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000afd7:	0f 85 b4 00 00 00    	jne    c000b091 <KeDereferenceSymlink(char const*, char*)+0x184>
c000afdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000afe5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000afed:	50                   	push   eax
c000afee:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000aff2:	50                   	push   eax
c000aff3:	8d 44 24 20          	lea    eax,[esp+0x20]
c000aff7:	50                   	push   eax
c000aff8:	53                   	push   ebx
c000aff9:	e8 d8 0a 00 00       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c000affe:	83 c4 10             	add    esp,0x10
c000b001:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b006:	75 5c                	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b008:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b00c:	31 c9                	xor    ecx,ecx
c000b00e:	bf 0f 00 00 00       	mov    edi,0xf
c000b013:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b017:	39 c7                	cmp    edi,eax
c000b019:	89 cf                	mov    edi,ecx
c000b01b:	19 d7                	sbb    edi,edx
c000b01d:	73 45                	jae    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b01f:	83 c0 f0             	add    eax,0xfffffff0
c000b022:	bf ff 00 00 00       	mov    edi,0xff
c000b027:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b02b:	83 d2 ff             	adc    edx,0xffffffff
c000b02e:	39 c7                	cmp    edi,eax
c000b030:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b034:	19 d1                	sbb    ecx,edx
c000b036:	72 40                	jb     c000b078 <KeDereferenceSymlink(char const*, char*)+0x16b>
c000b038:	83 ec 0c             	sub    esp,0xc
c000b03b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b03d:	56                   	push   esi
c000b03e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b042:	52                   	push   edx
c000b043:	50                   	push   eax
c000b044:	53                   	push   ebx
c000b045:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b048:	83 c4 20             	add    esp,0x20
c000b04b:	85 c0                	test   eax,eax
c000b04d:	75 15                	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b04f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b053:	89 c7                	mov    edi,eax
c000b055:	c1 ff 1f             	sar    edi,0x1f
c000b058:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b05c:	75 06                	jne    c000b064 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b05e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b062:	74 19                	je     c000b07d <KeDereferenceSymlink(char const*, char*)+0x170>
c000b064:	83 ec 0c             	sub    esp,0xc
c000b067:	53                   	push   ebx
c000b068:	e8 c5 07 00 00       	call   c000b832 <File::close()>
c000b06d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b06f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b072:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	83 c8 ff             	or     eax,0xffffffff
c000b07b:	eb 16                	jmp    c000b093 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b07d:	83 ec 0c             	sub    esp,0xc
c000b080:	53                   	push   ebx
c000b081:	e8 ac 07 00 00       	call   c000b832 <File::close()>
c000b086:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b088:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b08b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b08e:	83 c4 10             	add    esp,0x10
c000b091:	31 c0                	xor    eax,eax
c000b093:	83 c4 3c             	add    esp,0x3c
c000b096:	5b                   	pop    ebx
c000b097:	5e                   	pop    esi
c000b098:	5f                   	pop    edi
c000b099:	5d                   	pop    ebp
c000b09a:	c3                   	ret    

c000b09b <KeCreateSymlink(char const*, char const*)>:
c000b09b:	55                   	push   ebp
c000b09c:	57                   	push   edi
c000b09d:	56                   	push   esi
c000b09e:	53                   	push   ebx
c000b09f:	83 ec 38             	sub    esp,0x38
c000b0a2:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b0a6:	68 14 01 00 00       	push   0x114
c000b0ab:	e8 23 ca ff ff       	call   c0007ad3 <malloc>
c000b0b0:	83 c4 0c             	add    esp,0xc
c000b0b3:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b0b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0bd:	89 c3                	mov    ebx,eax
c000b0bf:	50                   	push   eax
c000b0c0:	e8 53 06 00 00       	call   c000b718 <File::File(char const*, Process*)>
c000b0c5:	83 c4 10             	add    esp,0x10
c000b0c8:	85 db                	test   ebx,ebx
c000b0ca:	b8 01 00 00 00       	mov    eax,0x1
c000b0cf:	0f 84 fb 00 00 00    	je     c000b1d0 <KeCreateSymlink(char const*, char const*)+0x135>
c000b0d5:	52                   	push   edx
c000b0d6:	52                   	push   edx
c000b0d7:	6a 12                	push   0x12
c000b0d9:	53                   	push   ebx
c000b0da:	e8 f5 06 00 00       	call   c000b7d4 <File::open(FileOpenMode)>
c000b0df:	83 c4 10             	add    esp,0x10
c000b0e2:	85 c0                	test   eax,eax
c000b0e4:	74 0b                	je     c000b0f1 <KeCreateSymlink(char const*, char const*)+0x56>
c000b0e6:	83 ec 0c             	sub    esp,0xc
c000b0e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0eb:	53                   	push   ebx
c000b0ec:	e9 d4 00 00 00       	jmp    c000b1c5 <KeCreateSymlink(char const*, char const*)+0x12a>
c000b0f1:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b0f5:	be 24 12 02 c0       	mov    esi,0xc0021224
c000b0fa:	b9 09 00 00 00       	mov    ecx,0x9
c000b0ff:	fc                   	cld    
c000b100:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b102:	83 ec 0c             	sub    esp,0xc
c000b105:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b109:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b10b:	56                   	push   esi
c000b10c:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b110:	52                   	push   edx
c000b111:	6a 00                	push   0x0
c000b113:	6a 08                	push   0x8
c000b115:	53                   	push   ebx
c000b116:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b119:	83 c4 20             	add    esp,0x20
c000b11c:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b121:	0f 85 90 00 00 00    	jne    c000b1b7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b127:	85 c0                	test   eax,eax
c000b129:	0f 85 88 00 00 00    	jne    c000b1b7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b12f:	e8 e0 fb ff ff       	call   c000ad14 <KiCreateSymlinkID()>
c000b134:	83 ec 0c             	sub    esp,0xc
c000b137:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b13b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b13f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b141:	56                   	push   esi
c000b142:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b146:	52                   	push   edx
c000b147:	6a 00                	push   0x0
c000b149:	6a 08                	push   0x8
c000b14b:	53                   	push   ebx
c000b14c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b14f:	83 c4 20             	add    esp,0x20
c000b152:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b157:	75 5e                	jne    c000b1b7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b159:	85 c0                	test   eax,eax
c000b15b:	75 5a                	jne    c000b1b7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b15d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b165:	55                   	push   ebp
c000b166:	e8 15 54 ff ff       	call   c0000580 <strlen>
c000b16b:	31 d2                	xor    edx,edx
c000b16d:	89 34 24             	mov    DWORD PTR [esp],esi
c000b170:	55                   	push   ebp
c000b171:	52                   	push   edx
c000b172:	50                   	push   eax
c000b173:	53                   	push   ebx
c000b174:	ff d7                	call   edi
c000b176:	83 c4 14             	add    esp,0x14
c000b179:	55                   	push   ebp
c000b17a:	89 c6                	mov    esi,eax
c000b17c:	e8 ff 53 ff ff       	call   c0000580 <strlen>
c000b181:	83 c4 10             	add    esp,0x10
c000b184:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b188:	75 2d                	jne    c000b1b7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b18a:	85 f6                	test   esi,esi
c000b18c:	75 29                	jne    c000b1b7 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b18e:	50                   	push   eax
c000b18f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b193:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b197:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b19b:	e8 b7 fc ff ff       	call   c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>
c000b1a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1a3:	e8 8a 06 00 00       	call   c000b832 <File::close()>
c000b1a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	31 c0                	xor    eax,eax
c000b1b5:	eb 19                	jmp    c000b1d0 <KeCreateSymlink(char const*, char const*)+0x135>
c000b1b7:	83 ec 0c             	sub    esp,0xc
c000b1ba:	53                   	push   ebx
c000b1bb:	e8 72 06 00 00       	call   c000b832 <File::close()>
c000b1c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	b8 01 00 00 00       	mov    eax,0x1
c000b1d0:	83 c4 2c             	add    esp,0x2c
c000b1d3:	5b                   	pop    ebx
c000b1d4:	5e                   	pop    esi
c000b1d5:	5f                   	pop    edi
c000b1d6:	5d                   	pop    ebp
c000b1d7:	c3                   	ret    

c000b1d8 <KeInitialiseSymlinks()>:
c000b1d8:	53                   	push   ebx
c000b1d9:	83 ec 10             	sub    esp,0x10
c000b1dc:	6a 00                	push   0x0
c000b1de:	68 52 ae 00 c0       	push   0xc000ae52
c000b1e3:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b1ed:	e8 ec 57 00 00       	call   c00109de <KeRegisterAtexit(void (*)(void*), void*)>
c000b1f2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b1f9:	e8 d5 c8 ff ff       	call   c0007ad3 <malloc>
c000b1fe:	83 c4 0c             	add    esp,0xc
c000b201:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b207:	68 b8 11 02 c0       	push   0xc00211b8
c000b20c:	50                   	push   eax
c000b20d:	89 c3                	mov    ebx,eax
c000b20f:	e8 04 05 00 00       	call   c000b718 <File::File(char const*, Process*)>
c000b214:	83 c4 10             	add    esp,0x10
c000b217:	85 db                	test   ebx,ebx
c000b219:	75 10                	jne    c000b22b <KeInitialiseSymlinks()+0x53>
c000b21b:	83 ec 0c             	sub    esp,0xc
c000b21e:	68 2d 12 02 c0       	push   0xc002122d
c000b223:	e8 9d 5f 00 00       	call   c00111c5 <KePanic(char const*)>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	83 ec 0c             	sub    esp,0xc
c000b22e:	53                   	push   ebx
c000b22f:	e8 64 08 00 00       	call   c000ba98 <File::exists()>
c000b234:	83 c4 10             	add    esp,0x10
c000b237:	84 c0                	test   al,al
c000b239:	75 2d                	jne    c000b268 <KeInitialiseSymlinks()+0x90>
c000b23b:	52                   	push   edx
c000b23c:	52                   	push   edx
c000b23d:	6a 12                	push   0x12
c000b23f:	53                   	push   ebx
c000b240:	e8 8f 05 00 00       	call   c000b7d4 <File::open(FileOpenMode)>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	85 c0                	test   eax,eax
c000b24a:	74 10                	je     c000b25c <KeInitialiseSymlinks()+0x84>
c000b24c:	83 ec 0c             	sub    esp,0xc
c000b24f:	68 4a 12 02 c0       	push   0xc002124a
c000b254:	e8 6c 5f 00 00       	call   c00111c5 <KePanic(char const*)>
c000b259:	83 c4 10             	add    esp,0x10
c000b25c:	83 ec 0c             	sub    esp,0xc
c000b25f:	53                   	push   ebx
c000b260:	e8 cd 05 00 00       	call   c000b832 <File::close()>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	85 db                	test   ebx,ebx
c000b26a:	74 0c                	je     c000b278 <KeInitialiseSymlinks()+0xa0>
c000b26c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b26e:	83 ec 0c             	sub    esp,0xc
c000b271:	53                   	push   ebx
c000b272:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b275:	83 c4 10             	add    esp,0x10
c000b278:	50                   	push   eax
c000b279:	50                   	push   eax
c000b27a:	68 67 12 02 c0       	push   0xc0021267
c000b27f:	68 75 12 02 c0       	push   0xc0021275
c000b284:	e8 12 fe ff ff       	call   c000b09b <KeCreateSymlink(char const*, char const*)>
c000b289:	83 c4 18             	add    esp,0x18
c000b28c:	5b                   	pop    ebx
c000b28d:	c3                   	ret    

c000b28e <File::read(unsigned long long, void*, int*)>:
c000b28e:	53                   	push   ebx
c000b28f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b293:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b297:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b29e:	83 f8 19             	cmp    eax,0x19
c000b2a1:	77 35                	ja     c000b2d8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2a3:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b2aa:	85 c0                	test   eax,eax
c000b2ac:	74 2a                	je     c000b2d8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2ae:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2b4:	85 c0                	test   eax,eax
c000b2b6:	74 20                	je     c000b2d8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2b8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2bc:	74 21                	je     c000b2df <File::read(unsigned long long, void*, int*)+0x51>
c000b2be:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2c0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b2c4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b2ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b2ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b2d2:	5b                   	pop    ebx
c000b2d3:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b2d6:	ff e0                	jmp    eax
c000b2d8:	b8 0b 00 00 00       	mov    eax,0xb
c000b2dd:	eb 05                	jmp    c000b2e4 <File::read(unsigned long long, void*, int*)+0x56>
c000b2df:	b8 05 00 00 00       	mov    eax,0x5
c000b2e4:	5b                   	pop    ebx
c000b2e5:	c3                   	ret    

c000b2e6 <File::write(unsigned long long, void*, int*)>:
c000b2e6:	53                   	push   ebx
c000b2e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b2eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b2ef:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b2f6:	83 f8 19             	cmp    eax,0x19
c000b2f9:	77 35                	ja     c000b330 <File::write(unsigned long long, void*, int*)+0x4a>
c000b2fb:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b302:	85 c0                	test   eax,eax
c000b304:	74 2a                	je     c000b330 <File::write(unsigned long long, void*, int*)+0x4a>
c000b306:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b30c:	85 c0                	test   eax,eax
c000b30e:	74 20                	je     c000b330 <File::write(unsigned long long, void*, int*)+0x4a>
c000b310:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b314:	74 21                	je     c000b337 <File::write(unsigned long long, void*, int*)+0x51>
c000b316:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b318:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b31c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b322:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b326:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b32a:	5b                   	pop    ebx
c000b32b:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b32e:	ff e0                	jmp    eax
c000b330:	b8 0b 00 00 00       	mov    eax,0xb
c000b335:	eb 05                	jmp    c000b33c <File::write(unsigned long long, void*, int*)+0x56>
c000b337:	b8 05 00 00 00       	mov    eax,0x5
c000b33c:	5b                   	pop    ebx
c000b33d:	c3                   	ret    

c000b33e <Directory::read(unsigned long long, void*, int*)>:
c000b33e:	53                   	push   ebx
c000b33f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b343:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b347:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b34e:	83 f8 19             	cmp    eax,0x19
c000b351:	77 35                	ja     c000b388 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b353:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b35a:	85 c0                	test   eax,eax
c000b35c:	74 2a                	je     c000b388 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b35e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b364:	85 c0                	test   eax,eax
c000b366:	74 20                	je     c000b388 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b368:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b36c:	74 21                	je     c000b38f <Directory::read(unsigned long long, void*, int*)+0x51>
c000b36e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b370:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b374:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b37a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b37e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b382:	5b                   	pop    ebx
c000b383:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b386:	ff e0                	jmp    eax
c000b388:	b8 0b 00 00 00       	mov    eax,0xb
c000b38d:	eb 05                	jmp    c000b394 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b38f:	b8 05 00 00 00       	mov    eax,0x5
c000b394:	5b                   	pop    ebx
c000b395:	c3                   	ret    

c000b396 <Directory::write(unsigned long long, void*, int*)>:
c000b396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b39a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b3a1:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a6:	83 fa 19             	cmp    edx,0x19
c000b3a9:	77 18                	ja     c000b3c3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3ab:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b3b2:	85 d2                	test   edx,edx
c000b3b4:	74 0d                	je     c000b3c3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3b6:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b3bd:	19 c0                	sbb    eax,eax
c000b3bf:	83 e0 0a             	and    eax,0xa
c000b3c2:	40                   	inc    eax
c000b3c3:	c3                   	ret    

c000b3c4 <File::isAtty()>:
c000b3c4:	31 c0                	xor    eax,eax
c000b3c6:	c3                   	ret    
c000b3c7:	90                   	nop

c000b3c8 <Directory::isAtty()>:
c000b3c8:	31 c0                	xor    eax,eax
c000b3ca:	c3                   	ret    
c000b3cb:	90                   	nop

c000b3cc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b3cc:	b8 0a 00 00 00       	mov    eax,0xa
c000b3d1:	c3                   	ret    

c000b3d2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b3d2:	b8 0a 00 00 00       	mov    eax,0xa
c000b3d7:	c3                   	ret    

c000b3d8 <Filesystem::allocateSwapfile(char const*, int)>:
c000b3d8:	31 c0                	xor    eax,eax
c000b3da:	31 d2                	xor    edx,edx
c000b3dc:	c3                   	ret    
c000b3dd:	90                   	nop

c000b3de <File::~File()>:
c000b3de:	83 ec 0c             	sub    esp,0xc
c000b3e1:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000b3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ea:	89 10                	mov    DWORD PTR [eax],edx
c000b3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f0:	83 ec 0c             	sub    esp,0xc
c000b3f3:	50                   	push   eax
c000b3f4:	e8 93 df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b3f9:	83 c4 10             	add    esp,0x10
c000b3fc:	90                   	nop
c000b3fd:	83 c4 0c             	add    esp,0xc
c000b400:	c3                   	ret    
c000b401:	90                   	nop

c000b402 <File::~File()>:
c000b402:	83 ec 0c             	sub    esp,0xc
c000b405:	83 ec 0c             	sub    esp,0xc
c000b408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40c:	e8 cd ff ff ff       	call   c000b3de <File::~File()>
c000b411:	83 c4 10             	add    esp,0x10
c000b414:	83 ec 08             	sub    esp,0x8
c000b417:	68 14 01 00 00       	push   0x114
c000b41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b420:	e8 e7 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	83 c4 0c             	add    esp,0xc
c000b42b:	c3                   	ret    

c000b42c <Directory::~Directory()>:
c000b42c:	83 ec 0c             	sub    esp,0xc
c000b42f:	ba 24 13 02 c0       	mov    edx,0xc0021324
c000b434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b438:	89 10                	mov    DWORD PTR [eax],edx
c000b43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b43e:	83 ec 0c             	sub    esp,0xc
c000b441:	50                   	push   eax
c000b442:	e8 45 df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b447:	83 c4 10             	add    esp,0x10
c000b44a:	90                   	nop
c000b44b:	83 c4 0c             	add    esp,0xc
c000b44e:	c3                   	ret    
c000b44f:	90                   	nop

c000b450 <Directory::~Directory()>:
c000b450:	83 ec 0c             	sub    esp,0xc
c000b453:	83 ec 0c             	sub    esp,0xc
c000b456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45a:	e8 cd ff ff ff       	call   c000b42c <Directory::~Directory()>
c000b45f:	83 c4 10             	add    esp,0x10
c000b462:	83 ec 08             	sub    esp,0x8
c000b465:	68 14 01 00 00       	push   0x114
c000b46a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46e:	e8 99 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b473:	83 c4 10             	add    esp,0x10
c000b476:	83 c4 0c             	add    esp,0xc
c000b479:	c3                   	ret    

c000b47a <Filesystem::Filesystem()>:
c000b47a:	ba 9c 12 02 c0       	mov    edx,0xc002129c
c000b47f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b483:	89 10                	mov    DWORD PTR [eax],edx
c000b485:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b48b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b496:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b49b:	90                   	nop
c000b49c:	c3                   	ret    
c000b49d:	90                   	nop

c000b49e <Filesystem::~Filesystem()>:
c000b49e:	ba 9c 12 02 c0       	mov    edx,0xc002129c
c000b4a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a7:	89 10                	mov    DWORD PTR [eax],edx
c000b4a9:	90                   	nop
c000b4aa:	c3                   	ret    
c000b4ab:	90                   	nop

c000b4ac <Filesystem::~Filesystem()>:
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b4b3:	e8 e6 ff ff ff       	call   c000b49e <Filesystem::~Filesystem()>
c000b4b8:	83 c4 04             	add    esp,0x4
c000b4bb:	83 ec 08             	sub    esp,0x8
c000b4be:	6a 08                	push   0x8
c000b4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c4:	e8 43 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4c9:	83 c4 10             	add    esp,0x10
c000b4cc:	83 c4 0c             	add    esp,0xc
c000b4cf:	c3                   	ret    

c000b4d0 <Fs::getcwd(Process*, char*, int)>:
c000b4d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b4d4:	31 c0                	xor    eax,eax
c000b4d6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b4da:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b4dd:	7d 15                	jge    c000b4f4 <Fs::getcwd(Process*, char*, int)+0x24>
c000b4df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b4e3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b4ea:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b4ed:	84 c9                	test   cl,cl
c000b4ef:	74 06                	je     c000b4f7 <Fs::getcwd(Process*, char*, int)+0x27>
c000b4f1:	40                   	inc    eax
c000b4f2:	eb e2                	jmp    c000b4d6 <Fs::getcwd(Process*, char*, int)+0x6>
c000b4f4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b4f7:	31 c0                	xor    eax,eax
c000b4f9:	c3                   	ret    

c000b4fa <Fs::initVFS()>:
c000b4fa:	83 ec 18             	sub    esp,0x18
c000b4fd:	6a 08                	push   0x8
c000b4ff:	e8 cf c5 ff ff       	call   c0007ad3 <malloc>
c000b504:	89 04 24             	mov    DWORD PTR [esp],eax
c000b507:	e8 30 e1 00 00       	call   c001963c <FAT::FAT()>
c000b50c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b513:	e8 bb c5 ff ff       	call   c0007ad3 <malloc>
c000b518:	89 04 24             	mov    DWORD PTR [esp],eax
c000b51b:	e8 4a f0 00 00       	call   c001a56a <ISO9660::ISO9660()>
c000b520:	83 c4 1c             	add    esp,0x1c
c000b523:	c3                   	ret    

c000b524 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b524:	55                   	push   ebp
c000b525:	57                   	push   edi
c000b526:	56                   	push   esi
c000b527:	53                   	push   ebx
c000b528:	81 ec 20 04 00 00    	sub    esp,0x420
c000b52e:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000b535:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b53c:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b543:	68 00 04 00 00       	push   0x400
c000b548:	6a 00                	push   0x0
c000b54a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b54e:	56                   	push   esi
c000b54f:	e8 9c 4f ff ff       	call   c00004f0 <memset>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b55b:	75 0b                	jne    c000b568 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b55d:	50                   	push   eax
c000b55e:	50                   	push   eax
c000b55f:	57                   	push   edi
c000b560:	56                   	push   esi
c000b561:	e8 ea 50 ff ff       	call   c0000650 <strcpy>
c000b566:	eb 45                	jmp    c000b5ad <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000b568:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b56b:	83 f8 2f             	cmp    eax,0x2f
c000b56e:	74 05                	je     c000b575 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b570:	83 f8 5c             	cmp    eax,0x5c
c000b573:	75 19                	jne    c000b58e <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000b575:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b578:	3c 60                	cmp    al,0x60
c000b57a:	7e 03                	jle    c000b57f <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b57c:	83 e8 20             	sub    eax,0x20
c000b57f:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b583:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b58a:	50                   	push   eax
c000b58b:	50                   	push   eax
c000b58c:	eb 18                	jmp    c000b5a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000b58e:	50                   	push   eax
c000b58f:	50                   	push   eax
c000b590:	55                   	push   ebp
c000b591:	56                   	push   esi
c000b592:	e8 b9 50 ff ff       	call   c0000650 <strcpy>
c000b597:	58                   	pop    eax
c000b598:	5a                   	pop    edx
c000b599:	68 43 22 02 c0       	push   0xc0022243
c000b59e:	56                   	push   esi
c000b59f:	e8 cc 52 ff ff       	call   c0000870 <strcat>
c000b5a4:	59                   	pop    ecx
c000b5a5:	5d                   	pop    ebp
c000b5a6:	57                   	push   edi
c000b5a7:	56                   	push   esi
c000b5a8:	e8 c3 52 ff ff       	call   c0000870 <strcat>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b5b4:	3c 60                	cmp    al,0x60
c000b5b6:	7e 03                	jle    c000b5bb <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000b5b8:	83 e8 20             	sub    eax,0x20
c000b5bb:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b5bf:	88 03                	mov    BYTE PTR [ebx],al
c000b5c1:	b8 03 00 00 00       	mov    eax,0x3
c000b5c6:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b5cd:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b5d3:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b5d7:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000b5df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b5e3:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000b5e8:	89 fa                	mov    edx,edi
c000b5ea:	0f be ea             	movsx  ebp,dl
c000b5ed:	85 ed                	test   ebp,ebp
c000b5ef:	0f 84 af 00 00 00    	je     c000b6a4 <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000b5f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b5f9:	42                   	inc    edx
c000b5fa:	83 fd 2f             	cmp    ebp,0x2f
c000b5fd:	74 05                	je     c000b604 <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000b5ff:	83 fd 5c             	cmp    ebp,0x5c
c000b602:	75 14                	jne    c000b618 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b604:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b609:	89 c5                	mov    ebp,eax
c000b60b:	74 0b                	je     c000b618 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b60d:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b611:	40                   	inc    eax
c000b612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b616:	eb c7                	jmp    c000b5df <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000b618:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b61c:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000b621:	89 f9                	mov    ecx,edi
c000b623:	0f be e9             	movsx  ebp,cl
c000b626:	75 63                	jne    c000b68b <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b628:	83 fd 2e             	cmp    ebp,0x2e
c000b62b:	75 5e                	jne    c000b68b <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b62d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b631:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b636:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000b63b:	74 18                	je     c000b655 <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000b63d:	83 fd 2e             	cmp    ebp,0x2e
c000b640:	74 57                	je     c000b699 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b642:	89 ca                	mov    edx,ecx
c000b644:	42                   	inc    edx
c000b645:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b649:	83 f9 2f             	cmp    ecx,0x2f
c000b64c:	74 f6                	je     c000b644 <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b64e:	83 f9 5c             	cmp    ecx,0x5c
c000b651:	74 f1                	je     c000b644 <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b653:	eb bd                	jmp    c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b655:	83 fd 2e             	cmp    ebp,0x2e
c000b658:	74 3f                	je     c000b699 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b65a:	83 f8 03             	cmp    eax,0x3
c000b65d:	74 b3                	je     c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b65f:	42                   	inc    edx
c000b660:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b664:	83 f9 2f             	cmp    ecx,0x2f
c000b667:	74 f6                	je     c000b65f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b669:	83 f9 5c             	cmp    ecx,0x5c
c000b66c:	74 f1                	je     c000b65f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b66e:	48                   	dec    eax
c000b66f:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b673:	75 06                	jne    c000b67b <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b675:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b679:	eb f3                	jmp    c000b66e <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b67b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b67f:	74 07                	je     c000b688 <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000b681:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b685:	48                   	dec    eax
c000b686:	eb f3                	jmp    c000b67b <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b688:	40                   	inc    eax
c000b689:	eb 87                	jmp    c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b68b:	83 fd 2f             	cmp    ebp,0x2f
c000b68e:	74 82                	je     c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b690:	83 fd 5c             	cmp    ebp,0x5c
c000b693:	0f 84 79 ff ff ff    	je     c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b699:	89 f9                	mov    ecx,edi
c000b69b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b69e:	40                   	inc    eax
c000b69f:	e9 6e ff ff ff       	jmp    c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b6a4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6a8:	83 ec 0c             	sub    esp,0xc
c000b6ab:	53                   	push   ebx
c000b6ac:	e8 cf 4e ff ff       	call   c0000580 <strlen>
c000b6b1:	83 c4 10             	add    esp,0x10
c000b6b4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b6b9:	75 26                	jne    c000b6e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000b6bb:	83 ec 0c             	sub    esp,0xc
c000b6be:	53                   	push   ebx
c000b6bf:	e8 bc 4e ff ff       	call   c0000580 <strlen>
c000b6c4:	83 c4 10             	add    esp,0x10
c000b6c7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b6cc:	74 26                	je     c000b6f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000b6ce:	83 ec 0c             	sub    esp,0xc
c000b6d1:	53                   	push   ebx
c000b6d2:	e8 a9 4e ff ff       	call   c0000580 <strlen>
c000b6d7:	83 c4 10             	add    esp,0x10
c000b6da:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b6df:	eb c7                	jmp    c000b6a8 <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000b6e1:	83 ec 0c             	sub    esp,0xc
c000b6e4:	53                   	push   ebx
c000b6e5:	e8 96 4e ff ff       	call   c0000580 <strlen>
c000b6ea:	83 c4 10             	add    esp,0x10
c000b6ed:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b6f2:	74 c7                	je     c000b6bb <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b6f4:	50                   	push   eax
c000b6f5:	50                   	push   eax
c000b6f6:	53                   	push   ebx
c000b6f7:	56                   	push   esi
c000b6f8:	e8 53 4f ff ff       	call   c0000650 <strcpy>
c000b6fd:	5a                   	pop    edx
c000b6fe:	59                   	pop    ecx
c000b6ff:	53                   	push   ebx
c000b700:	56                   	push   esi
c000b701:	e8 07 f8 ff ff       	call   c000af0d <KeDereferenceSymlink(char const*, char*)>
c000b706:	83 c4 10             	add    esp,0x10
c000b709:	48                   	dec    eax
c000b70a:	74 e8                	je     c000b6f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000b70c:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b712:	5b                   	pop    ebx
c000b713:	5e                   	pop    esi
c000b714:	5f                   	pop    edi
c000b715:	5d                   	pop    ebp
c000b716:	c3                   	ret    
c000b717:	90                   	nop

c000b718 <File::File(char const*, Process*)>:
c000b718:	83 ec 0c             	sub    esp,0xc
c000b71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71f:	83 ec 08             	sub    esp,0x8
c000b722:	6a 00                	push   0x0
c000b724:	50                   	push   eax
c000b725:	e8 7c da ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b72a:	83 c4 10             	add    esp,0x10
c000b72d:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000b732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b736:	89 10                	mov    DWORD PTR [eax],edx
c000b738:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b73c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b746:	83 c0 0d             	add    eax,0xd
c000b749:	83 ec 04             	sub    esp,0x4
c000b74c:	52                   	push   edx
c000b74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b751:	50                   	push   eax
c000b752:	e8 cd fd ff ff       	call   c000b524 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b757:	83 c4 10             	add    esp,0x10
c000b75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b761:	83 e8 41             	sub    eax,0x41
c000b764:	88 c2                	mov    dl,al
c000b766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b76a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b774:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b77c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b782:	0f b6 c0             	movzx  eax,al
c000b785:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b78c:	85 c0                	test   eax,eax
c000b78e:	74 3e                	je     c000b7ce <File::File(char const*, Process*)+0xb6>
c000b790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b794:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b79a:	0f b6 c0             	movzx  eax,al
c000b79d:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7a4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b7aa:	85 c0                	test   eax,eax
c000b7ac:	75 20                	jne    c000b7ce <File::File(char const*, Process*)+0xb6>
c000b7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7b2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b7b8:	0f b6 c0             	movzx  eax,al
c000b7bb:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7c2:	83 ec 0c             	sub    esp,0xc
c000b7c5:	50                   	push   eax
c000b7c6:	e8 85 21 00 00       	call   c000d950 <LogicalDisk::mount()>
c000b7cb:	83 c4 10             	add    esp,0x10
c000b7ce:	90                   	nop
c000b7cf:	83 c4 0c             	add    esp,0xc
c000b7d2:	c3                   	ret    
c000b7d3:	90                   	nop

c000b7d4 <File::open(FileOpenMode)>:
c000b7d4:	53                   	push   ebx
c000b7d5:	b8 0b 00 00 00       	mov    eax,0xb
c000b7da:	83 ec 08             	sub    esp,0x8
c000b7dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7e1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b7e8:	83 fa 19             	cmp    edx,0x19
c000b7eb:	77 40                	ja     c000b82d <File::open(FileOpenMode)+0x59>
c000b7ed:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b7f4:	85 d2                	test   edx,edx
c000b7f6:	74 35                	je     c000b82d <File::open(FileOpenMode)+0x59>
c000b7f8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b7fe:	85 d2                	test   edx,edx
c000b800:	74 2b                	je     c000b82d <File::open(FileOpenMode)+0x59>
c000b802:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b806:	b8 06 00 00 00       	mov    eax,0x6
c000b80b:	75 20                	jne    c000b82d <File::open(FileOpenMode)+0x59>
c000b80d:	8b 02                	mov    eax,DWORD PTR [edx]
c000b80f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	51                   	push   ecx
c000b81a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b81d:	51                   	push   ecx
c000b81e:	52                   	push   edx
c000b81f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b822:	83 c4 10             	add    esp,0x10
c000b825:	85 c0                	test   eax,eax
c000b827:	75 04                	jne    c000b82d <File::open(FileOpenMode)+0x59>
c000b829:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b82d:	83 c4 08             	add    esp,0x8
c000b830:	5b                   	pop    ebx
c000b831:	c3                   	ret    

c000b832 <File::close()>:
c000b832:	53                   	push   ebx
c000b833:	b8 0b 00 00 00       	mov    eax,0xb
c000b838:	83 ec 08             	sub    esp,0x8
c000b83b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b83f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b846:	83 f9 19             	cmp    ecx,0x19
c000b849:	77 41                	ja     c000b88c <File::close()+0x5a>
c000b84b:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b852:	85 db                	test   ebx,ebx
c000b854:	74 36                	je     c000b88c <File::close()+0x5a>
c000b856:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b85d:	74 2d                	je     c000b88c <File::close()+0x5a>
c000b85f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b863:	b8 05 00 00 00       	mov    eax,0x5
c000b868:	74 22                	je     c000b88c <File::close()+0x5a>
c000b86a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b86e:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b875:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b87b:	53                   	push   ebx
c000b87c:	53                   	push   ebx
c000b87d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b87f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b885:	50                   	push   eax
c000b886:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b889:	83 c4 10             	add    esp,0x10
c000b88c:	83 c4 08             	add    esp,0x8
c000b88f:	5b                   	pop    ebx
c000b890:	c3                   	ret    
c000b891:	90                   	nop

c000b892 <File::seek(unsigned long long)>:
c000b892:	56                   	push   esi
c000b893:	b8 0b 00 00 00       	mov    eax,0xb
c000b898:	53                   	push   ebx
c000b899:	51                   	push   ecx
c000b89a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b89e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8a2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8a6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b8ad:	83 fa 19             	cmp    edx,0x19
c000b8b0:	77 31                	ja     c000b8e3 <File::seek(unsigned long long)+0x51>
c000b8b2:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b8b9:	85 d2                	test   edx,edx
c000b8bb:	74 26                	je     c000b8e3 <File::seek(unsigned long long)+0x51>
c000b8bd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8c3:	85 d2                	test   edx,edx
c000b8c5:	74 1c                	je     c000b8e3 <File::seek(unsigned long long)+0x51>
c000b8c7:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b8cb:	b8 05 00 00 00       	mov    eax,0x5
c000b8d0:	74 11                	je     c000b8e3 <File::seek(unsigned long long)+0x51>
c000b8d2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8d4:	53                   	push   ebx
c000b8d5:	51                   	push   ecx
c000b8d6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b8dc:	52                   	push   edx
c000b8dd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	5a                   	pop    edx
c000b8e4:	5b                   	pop    ebx
c000b8e5:	5e                   	pop    esi
c000b8e6:	c3                   	ret    
c000b8e7:	90                   	nop

c000b8e8 <File::truncate(unsigned long long)>:
c000b8e8:	56                   	push   esi
c000b8e9:	b8 0b 00 00 00       	mov    eax,0xb
c000b8ee:	53                   	push   ebx
c000b8ef:	51                   	push   ecx
c000b8f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8fc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b903:	83 fa 19             	cmp    edx,0x19
c000b906:	77 31                	ja     c000b939 <File::truncate(unsigned long long)+0x51>
c000b908:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b90f:	85 d2                	test   edx,edx
c000b911:	74 26                	je     c000b939 <File::truncate(unsigned long long)+0x51>
c000b913:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b919:	85 d2                	test   edx,edx
c000b91b:	74 1c                	je     c000b939 <File::truncate(unsigned long long)+0x51>
c000b91d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b921:	b8 05 00 00 00       	mov    eax,0x5
c000b926:	74 11                	je     c000b939 <File::truncate(unsigned long long)+0x51>
c000b928:	8b 02                	mov    eax,DWORD PTR [edx]
c000b92a:	53                   	push   ebx
c000b92b:	51                   	push   ecx
c000b92c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b932:	52                   	push   edx
c000b933:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b936:	83 c4 10             	add    esp,0x10
c000b939:	5a                   	pop    edx
c000b93a:	5b                   	pop    ebx
c000b93b:	5e                   	pop    esi
c000b93c:	c3                   	ret    
c000b93d:	90                   	nop

c000b93e <File::tell(unsigned long long*)>:
c000b93e:	83 ec 0c             	sub    esp,0xc
c000b941:	b8 0b 00 00 00       	mov    eax,0xb
c000b946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b94a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b951:	83 fa 19             	cmp    edx,0x19
c000b954:	77 34                	ja     c000b98a <File::tell(unsigned long long*)+0x4c>
c000b956:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b95d:	85 d2                	test   edx,edx
c000b95f:	74 29                	je     c000b98a <File::tell(unsigned long long*)+0x4c>
c000b961:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b967:	85 d2                	test   edx,edx
c000b969:	74 1f                	je     c000b98a <File::tell(unsigned long long*)+0x4c>
c000b96b:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b96f:	b8 05 00 00 00       	mov    eax,0x5
c000b974:	74 14                	je     c000b98a <File::tell(unsigned long long*)+0x4c>
c000b976:	50                   	push   eax
c000b977:	8b 02                	mov    eax,DWORD PTR [edx]
c000b979:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b97d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b983:	52                   	push   edx
c000b984:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b987:	83 c4 10             	add    esp,0x10
c000b98a:	83 c4 0c             	add    esp,0xc
c000b98d:	c3                   	ret    

c000b98e <File::rewind()>:
c000b98e:	83 ec 10             	sub    esp,0x10
c000b991:	6a 00                	push   0x0
c000b993:	6a 00                	push   0x0
c000b995:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b999:	e8 f4 fe ff ff       	call   c000b892 <File::seek(unsigned long long)>
c000b99e:	83 c4 1c             	add    esp,0x1c
c000b9a1:	c3                   	ret    

c000b9a2 <File::unlink()>:
c000b9a2:	83 ec 0c             	sub    esp,0xc
c000b9a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b9aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9b5:	83 f9 19             	cmp    ecx,0x19
c000b9b8:	77 2f                	ja     c000b9e9 <File::unlink()+0x47>
c000b9ba:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000b9c1:	85 c9                	test   ecx,ecx
c000b9c3:	74 24                	je     c000b9e9 <File::unlink()+0x47>
c000b9c5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9cb:	85 c9                	test   ecx,ecx
c000b9cd:	74 1a                	je     c000b9e9 <File::unlink()+0x47>
c000b9cf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9d3:	b8 06 00 00 00       	mov    eax,0x6
c000b9d8:	75 0f                	jne    c000b9e9 <File::unlink()+0x47>
c000b9da:	50                   	push   eax
c000b9db:	83 c2 0d             	add    edx,0xd
c000b9de:	50                   	push   eax
c000b9df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9e1:	52                   	push   edx
c000b9e2:	51                   	push   ecx
c000b9e3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	83 c4 0c             	add    esp,0xc
c000b9ec:	c3                   	ret    
c000b9ed:	90                   	nop

c000b9ee <File::rename(char const*)>:
c000b9ee:	83 ec 0c             	sub    esp,0xc
c000b9f1:	b8 0b 00 00 00       	mov    eax,0xb
c000b9f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba01:	83 f9 19             	cmp    ecx,0x19
c000ba04:	77 32                	ja     c000ba38 <File::rename(char const*)+0x4a>
c000ba06:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba0d:	85 c9                	test   ecx,ecx
c000ba0f:	74 27                	je     c000ba38 <File::rename(char const*)+0x4a>
c000ba11:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba17:	85 c9                	test   ecx,ecx
c000ba19:	74 1d                	je     c000ba38 <File::rename(char const*)+0x4a>
c000ba1b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba1f:	b8 06 00 00 00       	mov    eax,0x6
c000ba24:	75 12                	jne    c000ba38 <File::rename(char const*)+0x4a>
c000ba26:	50                   	push   eax
c000ba27:	83 c2 0d             	add    edx,0xd
c000ba2a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba30:	52                   	push   edx
c000ba31:	51                   	push   ecx
c000ba32:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ba35:	83 c4 10             	add    esp,0x10
c000ba38:	83 c4 0c             	add    esp,0xc
c000ba3b:	c3                   	ret    

c000ba3c <File::chfatattr(unsigned char, unsigned char)>:
c000ba3c:	57                   	push   edi
c000ba3d:	b8 0b 00 00 00       	mov    eax,0xb
c000ba42:	56                   	push   esi
c000ba43:	53                   	push   ebx
c000ba44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ba4c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba50:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba57:	83 f9 19             	cmp    ecx,0x19
c000ba5a:	77 37                	ja     c000ba93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba5c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba63:	85 c9                	test   ecx,ecx
c000ba65:	74 2c                	je     c000ba93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba67:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba6d:	85 c9                	test   ecx,ecx
c000ba6f:	74 22                	je     c000ba93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba71:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba75:	b8 06 00 00 00       	mov    eax,0x6
c000ba7a:	75 17                	jne    c000ba93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba7c:	89 f0                	mov    eax,esi
c000ba7e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ba80:	0f b6 db             	movzx  ebx,bl
c000ba83:	0f b6 f0             	movzx  esi,al
c000ba86:	83 c2 0d             	add    edx,0xd
c000ba89:	56                   	push   esi
c000ba8a:	53                   	push   ebx
c000ba8b:	52                   	push   edx
c000ba8c:	51                   	push   ecx
c000ba8d:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000ba90:	83 c4 10             	add    esp,0x10
c000ba93:	5b                   	pop    ebx
c000ba94:	5e                   	pop    esi
c000ba95:	5f                   	pop    edi
c000ba96:	c3                   	ret    
c000ba97:	90                   	nop

c000ba98 <File::exists()>:
c000ba98:	83 ec 0c             	sub    esp,0xc
c000ba9b:	31 c0                	xor    eax,eax
c000ba9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baa1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baa8:	83 f9 19             	cmp    ecx,0x19
c000baab:	77 24                	ja     c000bad1 <File::exists()+0x39>
c000baad:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bab4:	85 c9                	test   ecx,ecx
c000bab6:	74 19                	je     c000bad1 <File::exists()+0x39>
c000bab8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000babe:	85 c9                	test   ecx,ecx
c000bac0:	74 0f                	je     c000bad1 <File::exists()+0x39>
c000bac2:	50                   	push   eax
c000bac3:	83 c2 0d             	add    edx,0xd
c000bac6:	50                   	push   eax
c000bac7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bac9:	52                   	push   edx
c000baca:	51                   	push   ecx
c000bacb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bace:	83 c4 10             	add    esp,0x10
c000bad1:	83 c4 0c             	add    esp,0xc
c000bad4:	c3                   	ret    
c000bad5:	90                   	nop

c000bad6 <File::stat(unsigned long long*, bool*)>:
c000bad6:	56                   	push   esi
c000bad7:	53                   	push   ebx
c000bad8:	50                   	push   eax
c000bad9:	b8 0b 00 00 00       	mov    eax,0xb
c000bade:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bae2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bae6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000baea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baf1:	83 f9 19             	cmp    ecx,0x19
c000baf4:	77 3d                	ja     c000bb33 <File::stat(unsigned long long*, bool*)+0x5d>
c000baf6:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bafd:	85 c9                	test   ecx,ecx
c000baff:	74 32                	je     c000bb33 <File::stat(unsigned long long*, bool*)+0x5d>
c000bb01:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb07:	85 c9                	test   ecx,ecx
c000bb09:	74 28                	je     c000bb33 <File::stat(unsigned long long*, bool*)+0x5d>
c000bb0b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb0f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb11:	74 13                	je     c000bb26 <File::stat(unsigned long long*, bool*)+0x50>
c000bb13:	83 ec 04             	sub    esp,0x4
c000bb16:	56                   	push   esi
c000bb17:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bb1d:	51                   	push   ecx
c000bb1e:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bb21:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bb24:	eb 0a                	jmp    c000bb30 <File::stat(unsigned long long*, bool*)+0x5a>
c000bb26:	53                   	push   ebx
c000bb27:	83 c2 0d             	add    edx,0xd
c000bb2a:	56                   	push   esi
c000bb2b:	52                   	push   edx
c000bb2c:	51                   	push   ecx
c000bb2d:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bb30:	83 c4 10             	add    esp,0x10
c000bb33:	5a                   	pop    edx
c000bb34:	5b                   	pop    ebx
c000bb35:	5e                   	pop    esi
c000bb36:	c3                   	ret    

c000bb37 <Fs::setcwd(Process*, char*)>:
c000bb37:	55                   	push   ebp
c000bb38:	57                   	push   edi
c000bb39:	56                   	push   esi
c000bb3a:	53                   	push   ebx
c000bb3b:	81 ec 20 02 00 00    	sub    esp,0x220
c000bb41:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000bb48:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bb4e:	57                   	push   edi
c000bb4f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bb56:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bb5a:	56                   	push   esi
c000bb5b:	e8 c4 f9 ff ff       	call   c000b524 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bb60:	89 34 24             	mov    DWORD PTR [esp],esi
c000bb63:	e8 18 4a ff ff       	call   c0000580 <strlen>
c000bb68:	83 c4 10             	add    esp,0x10
c000bb6b:	83 f8 02             	cmp    eax,0x2
c000bb6e:	77 15                	ja     c000bb85 <Fs::setcwd(Process*, char*)+0x4e>
c000bb70:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bb75:	83 eb 41             	sub    ebx,0x41
c000bb78:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bb7f:	85 c0                	test   eax,eax
c000bb81:	75 1c                	jne    c000bb9f <Fs::setcwd(Process*, char*)+0x68>
c000bb83:	eb 2f                	jmp    c000bbb4 <Fs::setcwd(Process*, char*)+0x7d>
c000bb85:	83 ec 0c             	sub    esp,0xc
c000bb88:	56                   	push   esi
c000bb89:	e8 f2 49 ff ff       	call   c0000580 <strlen>
c000bb8e:	83 c4 10             	add    esp,0x10
c000bb91:	83 f8 03             	cmp    eax,0x3
c000bb94:	75 57                	jne    c000bbed <Fs::setcwd(Process*, char*)+0xb6>
c000bb96:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bb9b:	75 50                	jne    c000bbed <Fs::setcwd(Process*, char*)+0xb6>
c000bb9d:	eb d1                	jmp    c000bb70 <Fs::setcwd(Process*, char*)+0x39>
c000bb9f:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bba6:	75 0c                	jne    c000bbb4 <Fs::setcwd(Process*, char*)+0x7d>
c000bba8:	83 ec 0c             	sub    esp,0xc
c000bbab:	50                   	push   eax
c000bbac:	e8 9f 1d 00 00       	call   c000d950 <LogicalDisk::mount()>
c000bbb1:	83 c4 10             	add    esp,0x10
c000bbb4:	83 fb 19             	cmp    ebx,0x19
c000bbb7:	b8 03 00 00 00       	mov    eax,0x3
c000bbbc:	0f 87 c6 00 00 00    	ja     c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bbc2:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bbc9:	b8 05 00 00 00       	mov    eax,0x5
c000bbce:	85 d2                	test   edx,edx
c000bbd0:	0f 84 b2 00 00 00    	je     c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bbd6:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bbdd:	b8 06 00 00 00       	mov    eax,0x6
c000bbe2:	0f 85 92 00 00 00    	jne    c000bc7a <Fs::setcwd(Process*, char*)+0x143>
c000bbe8:	e9 9b 00 00 00       	jmp    c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bbed:	83 ec 0c             	sub    esp,0xc
c000bbf0:	68 14 01 00 00       	push   0x114
c000bbf5:	e8 d9 be ff ff       	call   c0007ad3 <malloc>
c000bbfa:	83 c4 0c             	add    esp,0xc
c000bbfd:	55                   	push   ebp
c000bbfe:	56                   	push   esi
c000bbff:	50                   	push   eax
c000bc00:	89 c3                	mov    ebx,eax
c000bc02:	e8 11 fb ff ff       	call   c000b718 <File::File(char const*, Process*)>
c000bc07:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bc0c:	83 c4 0c             	add    esp,0xc
c000bc0f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bc13:	50                   	push   eax
c000bc14:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bc18:	50                   	push   eax
c000bc19:	53                   	push   ebx
c000bc1a:	e8 b7 fe ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c000bc1f:	83 c4 10             	add    esp,0x10
c000bc22:	83 f8 02             	cmp    eax,0x2
c000bc25:	74 27                	je     c000bc4e <Fs::setcwd(Process*, char*)+0x117>
c000bc27:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bc2c:	75 1c                	jne    c000bc4a <Fs::setcwd(Process*, char*)+0x113>
c000bc2e:	85 db                	test   ebx,ebx
c000bc30:	b8 02 00 00 00       	mov    eax,0x2
c000bc35:	74 51                	je     c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bc37:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc39:	83 ec 0c             	sub    esp,0xc
c000bc3c:	53                   	push   ebx
c000bc3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc40:	83 c4 10             	add    esp,0x10
c000bc43:	b8 02 00 00 00       	mov    eax,0x2
c000bc48:	eb 3e                	jmp    c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bc4a:	85 c0                	test   eax,eax
c000bc4c:	74 1c                	je     c000bc6a <Fs::setcwd(Process*, char*)+0x133>
c000bc4e:	85 db                	test   ebx,ebx
c000bc50:	b8 01 00 00 00       	mov    eax,0x1
c000bc55:	74 31                	je     c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bc57:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc59:	83 ec 0c             	sub    esp,0xc
c000bc5c:	53                   	push   ebx
c000bc5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc60:	83 c4 10             	add    esp,0x10
c000bc63:	b8 01 00 00 00       	mov    eax,0x1
c000bc68:	eb 1e                	jmp    c000bc88 <Fs::setcwd(Process*, char*)+0x151>
c000bc6a:	85 db                	test   ebx,ebx
c000bc6c:	74 0c                	je     c000bc7a <Fs::setcwd(Process*, char*)+0x143>
c000bc6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc70:	83 ec 0c             	sub    esp,0xc
c000bc73:	53                   	push   ebx
c000bc74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc77:	83 c4 10             	add    esp,0x10
c000bc7a:	50                   	push   eax
c000bc7b:	50                   	push   eax
c000bc7c:	56                   	push   esi
c000bc7d:	57                   	push   edi
c000bc7e:	e8 cd 49 ff ff       	call   c0000650 <strcpy>
c000bc83:	83 c4 10             	add    esp,0x10
c000bc86:	31 c0                	xor    eax,eax
c000bc88:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bc8e:	5b                   	pop    ebx
c000bc8f:	5e                   	pop    esi
c000bc90:	5f                   	pop    edi
c000bc91:	5d                   	pop    ebp
c000bc92:	c3                   	ret    
c000bc93:	90                   	nop

c000bc94 <Directory::Directory(char const*, Process*)>:
c000bc94:	83 ec 0c             	sub    esp,0xc
c000bc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9b:	83 ec 08             	sub    esp,0x8
c000bc9e:	6a 00                	push   0x0
c000bca0:	50                   	push   eax
c000bca1:	e8 00 d5 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bca6:	83 c4 10             	add    esp,0x10
c000bca9:	ba 24 13 02 c0       	mov    edx,0xc0021324
c000bcae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb2:	89 10                	mov    DWORD PTR [eax],edx
c000bcb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bcb8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bcbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc2:	83 c0 0d             	add    eax,0xd
c000bcc5:	83 ec 04             	sub    esp,0x4
c000bcc8:	52                   	push   edx
c000bcc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bccd:	50                   	push   eax
c000bcce:	e8 51 f8 ff ff       	call   c000b524 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bcd3:	83 c4 10             	add    esp,0x10
c000bcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcda:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bcdd:	83 e8 41             	sub    eax,0x41
c000bce0:	88 c2                	mov    dl,al
c000bce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bcec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcfe:	0f b6 c0             	movzx  eax,al
c000bd01:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd08:	85 c0                	test   eax,eax
c000bd0a:	74 3e                	je     c000bd4a <Directory::Directory(char const*, Process*)+0xb6>
c000bd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd10:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd16:	0f b6 c0             	movzx  eax,al
c000bd19:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd20:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bd26:	85 c0                	test   eax,eax
c000bd28:	75 20                	jne    c000bd4a <Directory::Directory(char const*, Process*)+0xb6>
c000bd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd2e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd34:	0f b6 c0             	movzx  eax,al
c000bd37:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd3e:	83 ec 0c             	sub    esp,0xc
c000bd41:	50                   	push   eax
c000bd42:	e8 09 1c 00 00       	call   c000d950 <LogicalDisk::mount()>
c000bd47:	83 c4 10             	add    esp,0x10
c000bd4a:	90                   	nop
c000bd4b:	83 c4 0c             	add    esp,0xc
c000bd4e:	c3                   	ret    
c000bd4f:	90                   	nop

c000bd50 <Directory::open()>:
c000bd50:	53                   	push   ebx
c000bd51:	b8 0b 00 00 00       	mov    eax,0xb
c000bd56:	83 ec 08             	sub    esp,0x8
c000bd59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd5d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bd64:	83 fa 19             	cmp    edx,0x19
c000bd67:	77 3d                	ja     c000bda6 <Directory::open()+0x56>
c000bd69:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000bd70:	85 d2                	test   edx,edx
c000bd72:	74 32                	je     c000bda6 <Directory::open()+0x56>
c000bd74:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd7a:	85 d2                	test   edx,edx
c000bd7c:	74 28                	je     c000bda6 <Directory::open()+0x56>
c000bd7e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bd82:	b8 06 00 00 00       	mov    eax,0x6
c000bd87:	75 1d                	jne    c000bda6 <Directory::open()+0x56>
c000bd89:	50                   	push   eax
c000bd8a:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd8c:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bd92:	51                   	push   ecx
c000bd93:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bd96:	51                   	push   ecx
c000bd97:	52                   	push   edx
c000bd98:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bd9b:	83 c4 10             	add    esp,0x10
c000bd9e:	85 c0                	test   eax,eax
c000bda0:	75 04                	jne    c000bda6 <Directory::open()+0x56>
c000bda2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bda6:	83 c4 08             	add    esp,0x8
c000bda9:	5b                   	pop    ebx
c000bdaa:	c3                   	ret    
c000bdab:	90                   	nop

c000bdac <Directory::close()>:
c000bdac:	53                   	push   ebx
c000bdad:	b8 0b 00 00 00       	mov    eax,0xb
c000bdb2:	83 ec 08             	sub    esp,0x8
c000bdb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdb9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdc0:	83 f9 19             	cmp    ecx,0x19
c000bdc3:	77 41                	ja     c000be06 <Directory::close()+0x5a>
c000bdc5:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bdcc:	85 db                	test   ebx,ebx
c000bdce:	74 36                	je     c000be06 <Directory::close()+0x5a>
c000bdd0:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bdd7:	74 2d                	je     c000be06 <Directory::close()+0x5a>
c000bdd9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bddd:	b8 05 00 00 00       	mov    eax,0x5
c000bde2:	74 22                	je     c000be06 <Directory::close()+0x5a>
c000bde4:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bde8:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bdef:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bdf5:	53                   	push   ebx
c000bdf6:	53                   	push   ebx
c000bdf7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bdf9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bdff:	50                   	push   eax
c000be00:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000be03:	83 c4 10             	add    esp,0x10
c000be06:	83 c4 08             	add    esp,0x8
c000be09:	5b                   	pop    ebx
c000be0a:	c3                   	ret    
c000be0b:	90                   	nop

c000be0c <Directory::unlink()>:
c000be0c:	83 ec 0c             	sub    esp,0xc
c000be0f:	b8 0b 00 00 00       	mov    eax,0xb
c000be14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be18:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be1f:	83 f9 19             	cmp    ecx,0x19
c000be22:	77 2f                	ja     c000be53 <Directory::unlink()+0x47>
c000be24:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000be2b:	85 c9                	test   ecx,ecx
c000be2d:	74 24                	je     c000be53 <Directory::unlink()+0x47>
c000be2f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be35:	85 c9                	test   ecx,ecx
c000be37:	74 1a                	je     c000be53 <Directory::unlink()+0x47>
c000be39:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be3d:	b8 06 00 00 00       	mov    eax,0x6
c000be42:	75 0f                	jne    c000be53 <Directory::unlink()+0x47>
c000be44:	50                   	push   eax
c000be45:	83 c2 0d             	add    edx,0xd
c000be48:	50                   	push   eax
c000be49:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be4b:	52                   	push   edx
c000be4c:	51                   	push   ecx
c000be4d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000be50:	83 c4 10             	add    esp,0x10
c000be53:	83 c4 0c             	add    esp,0xc
c000be56:	c3                   	ret    
c000be57:	90                   	nop

c000be58 <Directory::rename(char const*)>:
c000be58:	83 ec 0c             	sub    esp,0xc
c000be5b:	b8 0b 00 00 00       	mov    eax,0xb
c000be60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be64:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be6b:	83 f9 19             	cmp    ecx,0x19
c000be6e:	77 32                	ja     c000bea2 <Directory::rename(char const*)+0x4a>
c000be70:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000be77:	85 c9                	test   ecx,ecx
c000be79:	74 27                	je     c000bea2 <Directory::rename(char const*)+0x4a>
c000be7b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be81:	85 c9                	test   ecx,ecx
c000be83:	74 1d                	je     c000bea2 <Directory::rename(char const*)+0x4a>
c000be85:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be89:	b8 06 00 00 00       	mov    eax,0x6
c000be8e:	75 12                	jne    c000bea2 <Directory::rename(char const*)+0x4a>
c000be90:	50                   	push   eax
c000be91:	83 c2 0d             	add    edx,0xd
c000be94:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be9a:	52                   	push   edx
c000be9b:	51                   	push   ecx
c000be9c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be9f:	83 c4 10             	add    esp,0x10
c000bea2:	83 c4 0c             	add    esp,0xc
c000bea5:	c3                   	ret    

c000bea6 <Directory::exists()>:
c000bea6:	83 ec 0c             	sub    esp,0xc
c000bea9:	31 c0                	xor    eax,eax
c000beab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beaf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beb6:	83 f9 19             	cmp    ecx,0x19
c000beb9:	77 24                	ja     c000bedf <Directory::exists()+0x39>
c000bebb:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bec2:	85 c9                	test   ecx,ecx
c000bec4:	74 19                	je     c000bedf <Directory::exists()+0x39>
c000bec6:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000becc:	85 c9                	test   ecx,ecx
c000bece:	74 0f                	je     c000bedf <Directory::exists()+0x39>
c000bed0:	50                   	push   eax
c000bed1:	83 c2 0d             	add    edx,0xd
c000bed4:	50                   	push   eax
c000bed5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bed7:	52                   	push   edx
c000bed8:	51                   	push   ecx
c000bed9:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bedc:	83 c4 10             	add    esp,0x10
c000bedf:	83 c4 0c             	add    esp,0xc
c000bee2:	c3                   	ret    
c000bee3:	90                   	nop

c000bee4 <Directory::read(dirent*)>:
c000bee4:	83 ec 1c             	sub    esp,0x1c
c000bee7:	b8 0b 00 00 00       	mov    eax,0xb
c000beec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bef0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bef7:	83 f9 19             	cmp    ecx,0x19
c000befa:	77 30                	ja     c000bf2c <Directory::read(dirent*)+0x48>
c000befc:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf03:	85 c9                	test   ecx,ecx
c000bf05:	74 25                	je     c000bf2c <Directory::read(dirent*)+0x48>
c000bf07:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bf0e:	74 1c                	je     c000bf2c <Directory::read(dirent*)+0x48>
c000bf10:	83 ec 0c             	sub    esp,0xc
c000bf13:	8b 02                	mov    eax,DWORD PTR [edx]
c000bf15:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bf19:	51                   	push   ecx
c000bf1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf1e:	6a 00                	push   0x0
c000bf20:	68 10 01 00 00       	push   0x110
c000bf25:	52                   	push   edx
c000bf26:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf29:	83 c4 20             	add    esp,0x20
c000bf2c:	83 c4 1c             	add    esp,0x1c
c000bf2f:	c3                   	ret    

c000bf30 <Directory::create()>:
c000bf30:	83 ec 0c             	sub    esp,0xc
c000bf33:	b8 0b 00 00 00       	mov    eax,0xb
c000bf38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf3c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf43:	83 f9 19             	cmp    ecx,0x19
c000bf46:	77 2f                	ja     c000bf77 <Directory::create()+0x47>
c000bf48:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf4f:	85 c9                	test   ecx,ecx
c000bf51:	74 24                	je     c000bf77 <Directory::create()+0x47>
c000bf53:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf59:	85 c9                	test   ecx,ecx
c000bf5b:	74 1a                	je     c000bf77 <Directory::create()+0x47>
c000bf5d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf61:	b8 06 00 00 00       	mov    eax,0x6
c000bf66:	75 0f                	jne    c000bf77 <Directory::create()+0x47>
c000bf68:	50                   	push   eax
c000bf69:	83 c2 0d             	add    edx,0xd
c000bf6c:	50                   	push   eax
c000bf6d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf6f:	52                   	push   edx
c000bf70:	51                   	push   ecx
c000bf71:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000bf74:	83 c4 10             	add    esp,0x10
c000bf77:	83 c4 0c             	add    esp,0xc
c000bf7a:	c3                   	ret    
c000bf7b:	90                   	nop

c000bf7c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000bf7c:	b8 0a 00 00 00       	mov    eax,0xa
c000bf81:	c3                   	ret    
c000bf82:	66 90                	xchg   ax,ax

c000bf84 <Bus::Bus(char const*)>:
c000bf84:	83 ec 0c             	sub    esp,0xc
c000bf87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8b:	83 ec 08             	sub    esp,0x8
c000bf8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf92:	50                   	push   eax
c000bf93:	e8 28 08 00 00       	call   c000c7c0 <Device::Device(char const*)>
c000bf98:	83 c4 10             	add    esp,0x10
c000bf9b:	ba 40 13 02 c0       	mov    edx,0xc0021340
c000bfa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfa4:	89 10                	mov    DWORD PTR [eax],edx
c000bfa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfaa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000bfb4:	90                   	nop
c000bfb5:	83 c4 0c             	add    esp,0xc
c000bfb8:	c3                   	ret    
c000bfb9:	90                   	nop
c000bfba:	66 90                	xchg   ax,ax

c000bfbc <Bus::~Bus()>:
c000bfbc:	83 ec 0c             	sub    esp,0xc
c000bfbf:	ba 40 13 02 c0       	mov    edx,0xc0021340
c000bfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfc8:	89 10                	mov    DWORD PTR [eax],edx
c000bfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfce:	83 ec 0c             	sub    esp,0xc
c000bfd1:	50                   	push   eax
c000bfd2:	e8 53 05 00 00       	call   c000c52a <Device::~Device()>
c000bfd7:	83 c4 10             	add    esp,0x10
c000bfda:	90                   	nop
c000bfdb:	83 c4 0c             	add    esp,0xc
c000bfde:	c3                   	ret    
c000bfdf:	90                   	nop

c000bfe0 <Bus::~Bus()>:
c000bfe0:	83 ec 0c             	sub    esp,0xc
c000bfe3:	83 ec 0c             	sub    esp,0xc
c000bfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfea:	e8 cd ff ff ff       	call   c000bfbc <Bus::~Bus()>
c000bfef:	83 c4 10             	add    esp,0x10
c000bff2:	83 ec 08             	sub    esp,0x8
c000bff5:	68 58 01 00 00       	push   0x158
c000bffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bffe:	e8 09 e8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c003:	83 c4 10             	add    esp,0x10
c000c006:	83 c4 0c             	add    esp,0xc
c000c009:	c3                   	ret    

c000c00a <beepThread(void*)>:
c000c00a:	83 ec 0c             	sub    esp,0xc
c000c00d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c012:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c016:	48                   	dec    eax
c000c017:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c01c:	75 01                	jne    c000c01f <beepThread(void*)+0x15>
c000c01e:	fb                   	sti    
c000c01f:	6b c2 0a             	imul   eax,edx,0xa
c000c022:	83 ec 0c             	sub    esp,0xc
c000c025:	50                   	push   eax
c000c026:	e8 b9 9d 00 00       	call   c0015de4 <milliTenthSleep(unsigned int)>
c000c02b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c032:	e8 06 bd 00 00       	call   c0017d3d <HalMakeBeep(int)>
c000c037:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c03f:	83 c4 1c             	add    esp,0x1c
c000c042:	e9 81 9c 00 00       	jmp    c0015cc8 <blockTask(TaskState)>

c000c047 <Krnl::beep(int, int, bool)>:
c000c047:	56                   	push   esi
c000c048:	53                   	push   ebx
c000c049:	83 ec 10             	sub    esp,0x10
c000c04c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c050:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c058:	e8 e0 bc 00 00       	call   c0017d3d <HalMakeBeep(int)>
c000c05d:	89 f0                	mov    eax,esi
c000c05f:	83 c4 10             	add    esp,0x10
c000c062:	84 c0                	test   al,al
c000c064:	74 1e                	je     c000c084 <Krnl::beep(int, int, bool)+0x3d>
c000c066:	6b db 0a             	imul   ebx,ebx,0xa
c000c069:	83 ec 0c             	sub    esp,0xc
c000c06c:	53                   	push   ebx
c000c06d:	e8 72 9d 00 00       	call   c0015de4 <milliTenthSleep(unsigned int)>
c000c072:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c07a:	83 c4 14             	add    esp,0x14
c000c07d:	5b                   	pop    ebx
c000c07e:	5e                   	pop    esi
c000c07f:	e9 b9 bc 00 00       	jmp    c0017d3d <HalMakeBeep(int)>
c000c084:	68 e6 00 00 00       	push   0xe6
c000c089:	53                   	push   ebx
c000c08a:	68 0a c0 00 c0       	push   0xc000c00a
c000c08f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c095:	e8 e2 97 00 00       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c000c09a:	83 c4 14             	add    esp,0x14
c000c09d:	5b                   	pop    ebx
c000c09e:	5e                   	pop    esi
c000c09f:	c3                   	ret    

c000c0a0 <User::loadClockSettings(int)>:
c000c0a0:	53                   	push   ebx
c000c0a1:	83 ec 14             	sub    esp,0x14
c000c0a4:	68 14 01 00 00       	push   0x114
c000c0a9:	e8 25 ba ff ff       	call   c0007ad3 <malloc>
c000c0ae:	83 c4 0c             	add    esp,0xc
c000c0b1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c0b7:	68 64 13 02 c0       	push   0xc0021364
c000c0bc:	50                   	push   eax
c000c0bd:	89 c3                	mov    ebx,eax
c000c0bf:	e8 54 f6 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c000c0c4:	58                   	pop    eax
c000c0c5:	5a                   	pop    edx
c000c0c6:	6a 01                	push   0x1
c000c0c8:	53                   	push   ebx
c000c0c9:	e8 06 f7 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c000c0ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c0d1:	e8 5c f7 ff ff       	call   c000b832 <File::close()>
c000c0d6:	83 c4 10             	add    esp,0x10
c000c0d9:	85 db                	test   ebx,ebx
c000c0db:	74 0f                	je     c000c0ec <User::loadClockSettings(int)+0x4c>
c000c0dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c0e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c0e6:	83 c4 08             	add    esp,0x8
c000c0e9:	5b                   	pop    ebx
c000c0ea:	ff e0                	jmp    eax
c000c0ec:	83 c4 08             	add    esp,0x8
c000c0ef:	5b                   	pop    ebx
c000c0f0:	c3                   	ret    
c000c0f1:	90                   	nop

c000c0f2 <Clock::Clock(char const*)>:
c000c0f2:	83 ec 0c             	sub    esp,0xc
c000c0f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f9:	83 ec 08             	sub    esp,0x8
c000c0fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c100:	50                   	push   eax
c000c101:	e8 ba 06 00 00       	call   c000c7c0 <Device::Device(char const*)>
c000c106:	83 c4 10             	add    esp,0x10
c000c109:	ba 8c 13 02 c0       	mov    edx,0xc002138c
c000c10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c112:	89 10                	mov    DWORD PTR [eax],edx
c000c114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c118:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c122:	90                   	nop
c000c123:	83 c4 0c             	add    esp,0xc
c000c126:	c3                   	ret    
c000c127:	90                   	nop

c000c128 <Clock::~Clock()>:
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ba 8c 13 02 c0       	mov    edx,0xc002138c
c000c130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c134:	89 10                	mov    DWORD PTR [eax],edx
c000c136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13a:	83 ec 0c             	sub    esp,0xc
c000c13d:	50                   	push   eax
c000c13e:	e8 e7 03 00 00       	call   c000c52a <Device::~Device()>
c000c143:	83 c4 10             	add    esp,0x10
c000c146:	90                   	nop
c000c147:	83 c4 0c             	add    esp,0xc
c000c14a:	c3                   	ret    
c000c14b:	90                   	nop

c000c14c <Clock::~Clock()>:
c000c14c:	83 ec 0c             	sub    esp,0xc
c000c14f:	83 ec 0c             	sub    esp,0xc
c000c152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c156:	e8 cd ff ff ff       	call   c000c128 <Clock::~Clock()>
c000c15b:	83 c4 10             	add    esp,0x10
c000c15e:	83 ec 08             	sub    esp,0x8
c000c161:	68 58 01 00 00       	push   0x158
c000c166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c16a:	e8 9d e6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c16f:	83 c4 10             	add    esp,0x10
c000c172:	83 c4 0c             	add    esp,0xc
c000c175:	c3                   	ret    

c000c176 <Clock::timeInSecondsLocal()>:
c000c176:	53                   	push   ebx
c000c177:	83 ec 14             	sub    esp,0x14
c000c17a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c17e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c180:	50                   	push   eax
c000c181:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c184:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c18b:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c191:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c197:	89 cb                	mov    ebx,ecx
c000c199:	c1 fb 1f             	sar    ebx,0x1f
c000c19c:	01 c8                	add    eax,ecx
c000c19e:	11 da                	adc    edx,ebx
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	31 c9                	xor    ecx,ecx
c000c1a5:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c1ac:	74 05                	je     c000c1b3 <Clock::timeInSecondsLocal()+0x3d>
c000c1ae:	b9 08 07 00 00       	mov    ecx,0x708
c000c1b3:	31 db                	xor    ebx,ebx
c000c1b5:	01 c8                	add    eax,ecx
c000c1b7:	11 da                	adc    edx,ebx
c000c1b9:	83 c4 08             	add    esp,0x8
c000c1bc:	5b                   	pop    ebx
c000c1bd:	c3                   	ret    

c000c1be <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c1be:	57                   	push   edi
c000c1bf:	56                   	push   esi
c000c1c0:	53                   	push   ebx
c000c1c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c1c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c1c9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c1cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1cf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c1d2:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c1d9:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c1df:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c1e5:	99                   	cdq    
c000c1e6:	29 c6                	sub    esi,eax
c000c1e8:	19 d7                	sbb    edi,edx
c000c1ea:	89 f0                	mov    eax,esi
c000c1ec:	31 f6                	xor    esi,esi
c000c1ee:	89 fa                	mov    edx,edi
c000c1f0:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c1f7:	74 05                	je     c000c1fe <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c1f9:	be 08 07 00 00       	mov    esi,0x708
c000c1fe:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c202:	31 ff                	xor    edi,edi
c000c204:	29 f0                	sub    eax,esi
c000c206:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c20a:	19 fa                	sbb    edx,edi
c000c20c:	89 d8                	mov    eax,ebx
c000c20e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c212:	5b                   	pop    ebx
c000c213:	5e                   	pop    esi
c000c214:	5f                   	pop    edi
c000c215:	ff e0                	jmp    eax

c000c217 <datetimeToSeconds(datetime_t)>:
c000c217:	55                   	push   ebp
c000c218:	57                   	push   edi
c000c219:	56                   	push   esi
c000c21a:	53                   	push   ebx
c000c21b:	83 ec 0c             	sub    esp,0xc
c000c21e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c222:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c226:	89 f7                	mov    edi,esi
c000c228:	89 f0                	mov    eax,esi
c000c22a:	0f b6 cf             	movzx  ecx,bh
c000c22d:	0f b6 c4             	movzx  eax,ah
c000c230:	c1 ef 10             	shr    edi,0x10
c000c233:	89 da                	mov    edx,ebx
c000c235:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c238:	89 f9                	mov    ecx,edi
c000c23a:	0f b6 f9             	movzx  edi,cl
c000c23d:	89 f1                	mov    ecx,esi
c000c23f:	6b c0 3c             	imul   eax,eax,0x3c
c000c242:	0f b6 f1             	movzx  esi,cl
c000c245:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c24b:	0f b6 db             	movzx  ebx,bl
c000c24e:	c1 ea 10             	shr    edx,0x10
c000c251:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c257:	01 f8                	add    eax,edi
c000c259:	01 f0                	add    eax,esi
c000c25b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c25e:	c1 f8 1f             	sar    eax,0x1f
c000c261:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c265:	89 e8                	mov    eax,ebp
c000c267:	0f b6 c0             	movzx  eax,al
c000c26a:	8b 0c 85 c0 13 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdec40]
c000c271:	83 f8 01             	cmp    eax,0x1
c000c274:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c278:	0f b7 da             	movzx  ebx,dx
c000c27b:	76 27                	jbe    c000c2a4 <datetimeToSeconds(datetime_t)+0x8d>
c000c27d:	80 e2 03             	and    dl,0x3
c000c280:	75 22                	jne    c000c2a4 <datetimeToSeconds(datetime_t)+0x8d>
c000c282:	31 d2                	xor    edx,edx
c000c284:	be 64 00 00 00       	mov    esi,0x64
c000c289:	89 d8                	mov    eax,ebx
c000c28b:	f7 f6                	div    esi
c000c28d:	85 d2                	test   edx,edx
c000c28f:	75 12                	jne    c000c2a3 <datetimeToSeconds(datetime_t)+0x8c>
c000c291:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c297:	be 90 01 00 00       	mov    esi,0x190
c000c29c:	99                   	cdq    
c000c29d:	f7 fe                	idiv   esi
c000c29f:	85 d2                	test   edx,edx
c000c2a1:	75 01                	jne    c000c2a4 <datetimeToSeconds(datetime_t)+0x8d>
c000c2a3:	41                   	inc    ecx
c000c2a4:	83 fb 46             	cmp    ebx,0x46
c000c2a7:	76 48                	jbe    c000c2f1 <datetimeToSeconds(datetime_t)+0xda>
c000c2a9:	be 46 00 00 00       	mov    esi,0x46
c000c2ae:	bf 64 00 00 00       	mov    edi,0x64
c000c2b3:	bd 90 01 00 00       	mov    ebp,0x190
c000c2b8:	f7 c6 03 00 00 00    	test   esi,0x3
c000c2be:	b8 6d 01 00 00       	mov    eax,0x16d
c000c2c3:	75 23                	jne    c000c2e8 <datetimeToSeconds(datetime_t)+0xd1>
c000c2c5:	89 f0                	mov    eax,esi
c000c2c7:	99                   	cdq    
c000c2c8:	f7 ff                	idiv   edi
c000c2ca:	b8 6e 01 00 00       	mov    eax,0x16e
c000c2cf:	85 d2                	test   edx,edx
c000c2d1:	75 15                	jne    c000c2e8 <datetimeToSeconds(datetime_t)+0xd1>
c000c2d3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c2d9:	99                   	cdq    
c000c2da:	f7 fd                	idiv   ebp
c000c2dc:	83 fa 01             	cmp    edx,0x1
c000c2df:	19 c0                	sbb    eax,eax
c000c2e1:	f7 d0                	not    eax
c000c2e3:	05 6e 01 00 00       	add    eax,0x16e
c000c2e8:	46                   	inc    esi
c000c2e9:	01 c1                	add    ecx,eax
c000c2eb:	39 de                	cmp    esi,ebx
c000c2ed:	7c c9                	jl     c000c2b8 <datetimeToSeconds(datetime_t)+0xa1>
c000c2ef:	eb 34                	jmp    c000c325 <datetimeToSeconds(datetime_t)+0x10e>
c000c2f1:	74 32                	je     c000c325 <datetimeToSeconds(datetime_t)+0x10e>
c000c2f3:	b8 45 00 00 00       	mov    eax,0x45
c000c2f8:	89 c2                	mov    edx,eax
c000c2fa:	83 e2 03             	and    edx,0x3
c000c2fd:	39 d8                	cmp    eax,ebx
c000c2ff:	7e 0f                	jle    c000c310 <datetimeToSeconds(datetime_t)+0xf9>
c000c301:	83 fa 01             	cmp    edx,0x1
c000c304:	19 d2                	sbb    edx,edx
c000c306:	48                   	dec    eax
c000c307:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c30e:	eb e8                	jmp    c000c2f8 <datetimeToSeconds(datetime_t)+0xe1>
c000c310:	85 d2                	test   edx,edx
c000c312:	b8 6d 01 00 00       	mov    eax,0x16d
c000c317:	75 0a                	jne    c000c323 <datetimeToSeconds(datetime_t)+0x10c>
c000c319:	83 fb 01             	cmp    ebx,0x1
c000c31c:	19 c0                	sbb    eax,eax
c000c31e:	05 6e 01 00 00       	add    eax,0x16e
c000c323:	29 c1                	sub    ecx,eax
c000c325:	b8 80 51 01 00       	mov    eax,0x15180
c000c32a:	f7 e9                	imul   ecx
c000c32c:	03 04 24             	add    eax,DWORD PTR [esp]
c000c32f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c333:	83 c4 0c             	add    esp,0xc
c000c336:	5b                   	pop    ebx
c000c337:	5e                   	pop    esi
c000c338:	5f                   	pop    edi
c000c339:	5d                   	pop    ebp
c000c33a:	c3                   	ret    
c000c33b:	90                   	nop

c000c33c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c33c:	57                   	push   edi
c000c33d:	56                   	push   esi
c000c33e:	53                   	push   ebx
c000c33f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c343:	8b 06                	mov    eax,DWORD PTR [esi]
c000c345:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c348:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c34c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c350:	e8 c2 fe ff ff       	call   c000c217 <datetimeToSeconds(datetime_t)>
c000c355:	59                   	pop    ecx
c000c356:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c35d:	5b                   	pop    ebx
c000c35e:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c364:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c36a:	89 cb                	mov    ebx,ecx
c000c36c:	c1 fb 1f             	sar    ebx,0x1f
c000c36f:	29 c8                	sub    eax,ecx
c000c371:	19 da                	sbb    edx,ebx
c000c373:	31 c9                	xor    ecx,ecx
c000c375:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c37c:	74 05                	je     c000c383 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c37e:	b9 08 07 00 00       	mov    ecx,0x708
c000c383:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c387:	31 db                	xor    ebx,ebx
c000c389:	29 c8                	sub    eax,ecx
c000c38b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c38f:	19 da                	sbb    edx,ebx
c000c391:	89 f8                	mov    eax,edi
c000c393:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c397:	5b                   	pop    ebx
c000c398:	5e                   	pop    esi
c000c399:	5f                   	pop    edi
c000c39a:	ff e0                	jmp    eax

c000c39c <secondsToDatetime(unsigned long long)>:
c000c39c:	55                   	push   ebp
c000c39d:	57                   	push   edi
c000c39e:	56                   	push   esi
c000c39f:	53                   	push   ebx
c000c3a0:	83 ec 1c             	sub    esp,0x1c
c000c3a3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c3a7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c3ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c3af:	6a 00                	push   0x0
c000c3b1:	68 80 51 01 00       	push   0x15180
c000c3b6:	55                   	push   ebp
c000c3b7:	57                   	push   edi
c000c3b8:	e8 c3 2d 01 00       	call   c001f180 <__udivdi3>
c000c3bd:	83 c4 10             	add    esp,0x10
c000c3c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3c4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c3ca:	6a 00                	push   0x0
c000c3cc:	68 80 51 01 00       	push   0x15180
c000c3d1:	55                   	push   ebp
c000c3d2:	57                   	push   edi
c000c3d3:	bf 10 0e 00 00       	mov    edi,0xe10
c000c3d8:	e8 a3 2e 01 00       	call   c001f280 <__umoddi3>
c000c3dd:	83 c4 10             	add    esp,0x10
c000c3e0:	99                   	cdq    
c000c3e1:	f7 ff                	idiv   edi
c000c3e3:	bf 3c 00 00 00       	mov    edi,0x3c
c000c3e8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c3eb:	89 d0                	mov    eax,edx
c000c3ed:	99                   	cdq    
c000c3ee:	f7 ff                	idiv   edi
c000c3f0:	85 db                	test   ebx,ebx
c000c3f2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c3f5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c3f8:	79 11                	jns    c000c40b <secondsToDatetime(unsigned long long)+0x6f>
c000c3fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3fe:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c404:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c409:	eb 07                	jmp    c000c412 <secondsToDatetime(unsigned long long)+0x76>
c000c40b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c410:	89 d8                	mov    eax,ebx
c000c412:	99                   	cdq    
c000c413:	bf b4 05 00 00       	mov    edi,0x5b4
c000c418:	f7 f9                	idiv   ecx
c000c41a:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c41f:	31 d2                	xor    edx,edx
c000c421:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c426:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c42a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c432:	01 c3                	add    ebx,eax
c000c434:	89 d8                	mov    eax,ebx
c000c436:	f7 f1                	div    ecx
c000c438:	31 d2                	xor    edx,edx
c000c43a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c43d:	89 d8                	mov    eax,ebx
c000c43f:	f7 f7                	div    edi
c000c441:	31 d2                	xor    edx,edx
c000c443:	29 c1                	sub    ecx,eax
c000c445:	89 d8                	mov    eax,ebx
c000c447:	f7 f5                	div    ebp
c000c449:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c44e:	31 d2                	xor    edx,edx
c000c450:	29 c1                	sub    ecx,eax
c000c452:	89 c8                	mov    eax,ecx
c000c454:	f7 f5                	div    ebp
c000c456:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c45b:	31 d2                	xor    edx,edx
c000c45d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c461:	89 c8                	mov    eax,ecx
c000c463:	f7 f5                	div    ebp
c000c465:	31 d2                	xor    edx,edx
c000c467:	01 c3                	add    ebx,eax
c000c469:	89 c8                	mov    eax,ecx
c000c46b:	f7 f7                	div    edi
c000c46d:	bf 99 00 00 00       	mov    edi,0x99
c000c472:	31 d2                	xor    edx,edx
c000c474:	29 c3                	sub    ebx,eax
c000c476:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c47e:	29 c3                	sub    ebx,eax
c000c480:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c483:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c486:	83 c1 02             	add    ecx,0x2
c000c489:	89 c8                	mov    eax,ecx
c000c48b:	bb 05 00 00 00       	mov    ebx,0x5
c000c490:	f7 f7                	div    edi
c000c492:	31 d2                	xor    edx,edx
c000c494:	89 c7                	mov    edi,eax
c000c496:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c49c:	83 c0 02             	add    eax,0x2
c000c49f:	f7 f3                	div    ebx
c000c4a1:	89 eb                	mov    ebx,ebp
c000c4a3:	29 c3                	sub    ebx,eax
c000c4a5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c4ab:	88 1e                	mov    BYTE PTR [esi],bl
c000c4ad:	19 c0                	sbb    eax,eax
c000c4af:	31 d2                	xor    edx,edx
c000c4b1:	83 e0 0c             	and    eax,0xc
c000c4b4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c4b8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c4c0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c4c4:	83 f9 01             	cmp    ecx,0x1
c000c4c7:	0f 96 c2             	setbe  dl
c000c4ca:	41                   	inc    ecx
c000c4cb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c4ce:	01 d0                	add    eax,edx
c000c4d0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c4d4:	83 c4 1c             	add    esp,0x1c
c000c4d7:	89 f0                	mov    eax,esi
c000c4d9:	5b                   	pop    ebx
c000c4da:	5e                   	pop    esi
c000c4db:	5f                   	pop    edi
c000c4dc:	5d                   	pop    ebp
c000c4dd:	c2 04 00             	ret    0x4

c000c4e0 <Clock::timeInDatetimeLocal()>:
c000c4e0:	53                   	push   ebx
c000c4e1:	83 ec 14             	sub    esp,0x14
c000c4e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c4ec:	e8 85 fc ff ff       	call   c000c176 <Clock::timeInSecondsLocal()>
c000c4f1:	83 c4 0c             	add    esp,0xc
c000c4f4:	52                   	push   edx
c000c4f5:	50                   	push   eax
c000c4f6:	53                   	push   ebx
c000c4f7:	e8 a0 fe ff ff       	call   c000c39c <secondsToDatetime(unsigned long long)>
c000c4fc:	89 d8                	mov    eax,ebx
c000c4fe:	83 c4 14             	add    esp,0x14
c000c501:	5b                   	pop    ebx
c000c502:	c2 04 00             	ret    0x4
c000c505:	90                   	nop

c000c506 <Device::hibernate()>:
c000c506:	c3                   	ret    
c000c507:	90                   	nop

c000c508 <Device::wake()>:
c000c508:	c3                   	ret    
c000c509:	90                   	nop

c000c50a <Device::detect()>:
c000c50a:	c3                   	ret    
c000c50b:	90                   	nop

c000c50c <Device::disableLegacy()>:
c000c50c:	c3                   	ret    
c000c50d:	90                   	nop

c000c50e <Device::powerSaving(PowerSavingLevel)>:
c000c50e:	c3                   	ret    
c000c50f:	90                   	nop

c000c510 <DriverlessDevice::close(int, int, void*)>:
c000c510:	31 c0                	xor    eax,eax
c000c512:	c3                   	ret    
c000c513:	90                   	nop

c000c514 <DriverlessDevice::detect()>:
c000c514:	c3                   	ret    
c000c515:	90                   	nop

c000c516 <DriverlessDevice::open(int, int, void*)>:
c000c516:	83 ec 18             	sub    esp,0x18
c000c519:	68 f0 13 02 c0       	push   0xc00213f0
c000c51e:	e8 a2 4c 00 00       	call   c00111c5 <KePanic(char const*)>
c000c523:	83 c8 ff             	or     eax,0xffffffff
c000c526:	83 c4 1c             	add    esp,0x1c
c000c529:	c3                   	ret    

c000c52a <Device::~Device()>:
c000c52a:	ba 50 14 02 c0       	mov    edx,0xc0021450
c000c52f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c533:	89 10                	mov    DWORD PTR [eax],edx
c000c535:	90                   	nop
c000c536:	c3                   	ret    
c000c537:	90                   	nop

c000c538 <Device::~Device()>:
c000c538:	83 ec 0c             	sub    esp,0xc
c000c53b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c53f:	e8 e6 ff ff ff       	call   c000c52a <Device::~Device()>
c000c544:	83 c4 04             	add    esp,0x4
c000c547:	83 ec 08             	sub    esp,0x8
c000c54a:	68 58 01 00 00       	push   0x158
c000c54f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c553:	e8 b4 e2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c558:	83 c4 10             	add    esp,0x10
c000c55b:	83 c4 0c             	add    esp,0xc
c000c55e:	c3                   	ret    
c000c55f:	90                   	nop

c000c560 <Device::findAndLoadDriver()>:
c000c560:	c7 44 24 04 0e 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc002140e
c000c568:	e9 9d e3 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c56d:	90                   	nop

c000c56e <Device::preOpenPCI(PCIDeviceInfo)>:
c000c56e:	57                   	push   edi
c000c56f:	b9 09 00 00 00       	mov    ecx,0x9
c000c574:	56                   	push   esi
c000c575:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c579:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c57d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c587:	81 c7 18 01 00 00    	add    edi,0x118
c000c58d:	fc                   	cld    
c000c58e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c590:	5e                   	pop    esi
c000c591:	5f                   	pop    edi
c000c592:	c3                   	ret    
c000c593:	90                   	nop

c000c594 <Device::preOpenACPI(void*, char*, char*)>:
c000c594:	57                   	push   edi
c000c595:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c59a:	56                   	push   esi
c000c59b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c59f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5a7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c5b1:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c5b7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c5bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5bf:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c5c5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c5c9:	b9 0e 00 00 00       	mov    ecx,0xe
c000c5ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5d0:	5e                   	pop    esi
c000c5d1:	5f                   	pop    edi
c000c5d2:	c3                   	ret    
c000c5d3:	90                   	nop

c000c5d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5d4:	53                   	push   ebx
c000c5d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c5d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c5e5:	0f b6 c0             	movzx  eax,al
c000c5e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5f0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c5f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5f8:	5b                   	pop    ebx
c000c5f9:	e9 aa 05 00 00       	jmp    c000cba8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c5fe <Device::getParent()>:
c000c5fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c602:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c608:	c3                   	ret    
c000c609:	90                   	nop

c000c60a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c60a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c60e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c612:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c617:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c61b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c61f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c623:	e9 f7 06 00 00       	jmp    c000cd1f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c628 <Device::addChild(Device*)>:
c000c628:	53                   	push   ebx
c000c629:	83 ec 08             	sub    esp,0x8
c000c62c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c630:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c634:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c63a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c640:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c642:	85 d2                	test   edx,edx
c000c644:	74 04                	je     c000c64a <Device::addChild(Device*)+0x22>
c000c646:	89 d3                	mov    ebx,edx
c000c648:	eb f6                	jmp    c000c640 <Device::addChild(Device*)+0x18>
c000c64a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c64d:	83 ec 0c             	sub    esp,0xc
c000c650:	6a 08                	push   0x8
c000c652:	e8 7c b4 ff ff       	call   c0007ad3 <malloc>
c000c657:	89 03                	mov    DWORD PTR [ebx],eax
c000c659:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c65f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c666:	83 c4 18             	add    esp,0x18
c000c669:	5b                   	pop    ebx
c000c66a:	c3                   	ret    
c000c66b:	90                   	nop

c000c66c <Device::removeAllChildren()>:
c000c66c:	56                   	push   esi
c000c66d:	53                   	push   ebx
c000c66e:	52                   	push   edx
c000c66f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c673:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c679:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c67c:	74 17                	je     c000c695 <Device::removeAllChildren()+0x29>
c000c67e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c681:	85 c0                	test   eax,eax
c000c683:	74 0c                	je     c000c691 <Device::removeAllChildren()+0x25>
c000c685:	8b 10                	mov    edx,DWORD PTR [eax]
c000c687:	83 ec 0c             	sub    esp,0xc
c000c68a:	50                   	push   eax
c000c68b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c68e:	83 c4 10             	add    esp,0x10
c000c691:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c693:	eb e4                	jmp    c000c679 <Device::removeAllChildren()+0xd>
c000c695:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c69b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c6a1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c6a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c6ae:	58                   	pop    eax
c000c6af:	5b                   	pop    ebx
c000c6b0:	5e                   	pop    esi
c000c6b1:	c3                   	ret    

c000c6b2 <Device::hibernateAll()>:
c000c6b2:	53                   	push   ebx
c000c6b3:	83 ec 14             	sub    esp,0x14
c000c6b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6bc:	53                   	push   ebx
c000c6bd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c6c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6c6:	83 c4 10             	add    esp,0x10
c000c6c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6cc:	74 0f                	je     c000c6dd <Device::hibernateAll()+0x2b>
c000c6ce:	83 ec 0c             	sub    esp,0xc
c000c6d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6d4:	e8 d9 ff ff ff       	call   c000c6b2 <Device::hibernateAll()>
c000c6d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6db:	eb e9                	jmp    c000c6c6 <Device::hibernateAll()+0x14>
c000c6dd:	83 c4 08             	add    esp,0x8
c000c6e0:	5b                   	pop    ebx
c000c6e1:	c3                   	ret    

c000c6e2 <Device::wakeAll()>:
c000c6e2:	53                   	push   ebx
c000c6e3:	83 ec 14             	sub    esp,0x14
c000c6e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6ec:	53                   	push   ebx
c000c6ed:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c6f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6f6:	83 c4 10             	add    esp,0x10
c000c6f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6fc:	74 0f                	je     c000c70d <Device::wakeAll()+0x2b>
c000c6fe:	83 ec 0c             	sub    esp,0xc
c000c701:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c704:	e8 d9 ff ff ff       	call   c000c6e2 <Device::wakeAll()>
c000c709:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c70b:	eb e9                	jmp    c000c6f6 <Device::wakeAll()+0x14>
c000c70d:	83 c4 08             	add    esp,0x8
c000c710:	5b                   	pop    ebx
c000c711:	c3                   	ret    

c000c712 <Device::detectAll()>:
c000c712:	53                   	push   ebx
c000c713:	83 ec 14             	sub    esp,0x14
c000c716:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c71a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c71c:	53                   	push   ebx
c000c71d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c720:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c726:	83 c4 10             	add    esp,0x10
c000c729:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c72c:	74 0f                	je     c000c73d <Device::detectAll()+0x2b>
c000c72e:	83 ec 0c             	sub    esp,0xc
c000c731:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c734:	e8 d9 ff ff ff       	call   c000c712 <Device::detectAll()>
c000c739:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c73b:	eb e9                	jmp    c000c726 <Device::detectAll()+0x14>
c000c73d:	83 c4 08             	add    esp,0x8
c000c740:	5b                   	pop    ebx
c000c741:	c3                   	ret    

c000c742 <Device::disableLegacyAll()>:
c000c742:	c3                   	ret    
c000c743:	90                   	nop

c000c744 <Device::loadDriversForAll()>:
c000c744:	c3                   	ret    
c000c745:	90                   	nop

c000c746 <Device::closeAll()>:
c000c746:	53                   	push   ebx
c000c747:	83 ec 08             	sub    esp,0x8
c000c74a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c74e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c750:	6a 00                	push   0x0
c000c752:	6a 00                	push   0x0
c000c754:	6a 00                	push   0x0
c000c756:	53                   	push   ebx
c000c757:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c75a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c760:	83 c4 10             	add    esp,0x10
c000c763:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c766:	74 0f                	je     c000c777 <Device::closeAll()+0x31>
c000c768:	83 ec 0c             	sub    esp,0xc
c000c76b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c76e:	e8 d3 ff ff ff       	call   c000c746 <Device::closeAll()>
c000c773:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c775:	eb e9                	jmp    c000c760 <Device::closeAll()+0x1a>
c000c777:	83 c4 08             	add    esp,0x8
c000c77a:	5b                   	pop    ebx
c000c77b:	c3                   	ret    

c000c77c <Device::powerSavingAll(PowerSavingLevel)>:
c000c77c:	56                   	push   esi
c000c77d:	53                   	push   ebx
c000c77e:	83 ec 0c             	sub    esp,0xc
c000c781:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c785:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c789:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c78b:	56                   	push   esi
c000c78c:	53                   	push   ebx
c000c78d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c790:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c796:	83 c4 10             	add    esp,0x10
c000c799:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c79c:	74 0f                	je     c000c7ad <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c79e:	52                   	push   edx
c000c79f:	52                   	push   edx
c000c7a0:	56                   	push   esi
c000c7a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7a4:	e8 d3 ff ff ff       	call   c000c77c <Device::powerSavingAll(PowerSavingLevel)>
c000c7a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7ab:	eb e9                	jmp    c000c796 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c7ad:	58                   	pop    eax
c000c7ae:	5b                   	pop    ebx
c000c7af:	5e                   	pop    esi
c000c7b0:	c3                   	ret    
c000c7b1:	90                   	nop

c000c7b2 <Device::setName(char const*)>:
c000c7b2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c7ba:	e9 91 3e ff ff       	jmp    c0000650 <strcpy>
c000c7bf:	90                   	nop

c000c7c0 <Device::Device(char const*)>:
c000c7c0:	83 ec 1c             	sub    esp,0x1c
c000c7c3:	ba 50 14 02 c0       	mov    edx,0xc0021450
c000c7c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7cc:	89 10                	mov    DWORD PTR [eax],edx
c000c7ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7d2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c7dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7e0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c7ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7ee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c7f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7fc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c806:	83 ec 08             	sub    esp,0x8
c000c809:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c80d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c811:	e8 9c ff ff ff       	call   c000c7b2 <Device::setName(char const*)>
c000c816:	83 c4 10             	add    esp,0x10
c000c819:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c821:	83 ec 0c             	sub    esp,0xc
c000c824:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c828:	e8 a6 b2 ff ff       	call   c0007ad3 <malloc>
c000c82d:	83 c4 10             	add    esp,0x10
c000c830:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c836:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c83d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c841:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c847:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c84b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c851:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c85b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c861:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c86c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c877:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c87e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c882:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c88c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c890:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c89a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c89e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c8a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ac:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c8b6:	90                   	nop
c000c8b7:	83 c4 1c             	add    esp,0x1c
c000c8ba:	c3                   	ret    
c000c8bb:	90                   	nop

c000c8bc <Device::getName()>:
c000c8bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8c0:	05 d0 00 00 00       	add    eax,0xd0
c000c8c5:	c3                   	ret    

c000c8c6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c8c6:	83 ec 0c             	sub    esp,0xc
c000c8c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cd:	83 ec 08             	sub    esp,0x8
c000c8d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8d4:	50                   	push   eax
c000c8d5:	e8 e6 fe ff ff       	call   c000c7c0 <Device::Device(char const*)>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	ba 7c 14 02 c0       	mov    edx,0xc002147c
c000c8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8e6:	89 10                	mov    DWORD PTR [eax],edx
c000c8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8ec:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c8f6:	90                   	nop
c000c8f7:	83 c4 0c             	add    esp,0xc
c000c8fa:	c3                   	ret    
c000c8fb:	90                   	nop

c000c8fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c8fc:	57                   	push   edi
c000c8fd:	56                   	push   esi
c000c8fe:	53                   	push   ebx
c000c8ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c903:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c907:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c90b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c911:	75 0c                	jne    c000c91f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c913:	52                   	push   edx
c000c914:	52                   	push   edx
c000c915:	53                   	push   ebx
c000c916:	56                   	push   esi
c000c917:	e8 16 2d 01 00       	call   c001f632 <LinkedList<Device>::addElement(Device*)>
c000c91c:	83 c4 10             	add    esp,0x10
c000c91f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c925:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c928:	74 12                	je     c000c93c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c92a:	50                   	push   eax
c000c92b:	57                   	push   edi
c000c92c:	56                   	push   esi
c000c92d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c930:	e8 c7 ff ff ff       	call   c000c8fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c935:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c937:	83 c4 10             	add    esp,0x10
c000c93a:	eb e9                	jmp    c000c925 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c93c:	5b                   	pop    ebx
c000c93d:	5e                   	pop    esi
c000c93e:	5f                   	pop    edi
c000c93f:	c3                   	ret    

c000c940 <getDevicesOfType(DeviceType)>:
c000c940:	53                   	push   ebx
c000c941:	83 ec 14             	sub    esp,0x14
c000c944:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c948:	53                   	push   ebx
c000c949:	e8 c0 2d 01 00       	call   c001f70e <LinkedList<Device>::LinkedList()>
c000c94e:	83 c4 0c             	add    esp,0xc
c000c951:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c955:	53                   	push   ebx
c000c956:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c95c:	e8 9b ff ff ff       	call   c000c8fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c961:	83 c4 18             	add    esp,0x18
c000c964:	89 d8                	mov    eax,ebx
c000c966:	5b                   	pop    ebx
c000c967:	c2 04 00             	ret    0x4
c000c96a:	66 90                	xchg   ax,ax

c000c96c <HardDiskController::HardDiskController(char const*)>:
c000c96c:	83 ec 0c             	sub    esp,0xc
c000c96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c973:	83 ec 08             	sub    esp,0x8
c000c976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c97a:	50                   	push   eax
c000c97b:	e8 40 fe ff ff       	call   c000c7c0 <Device::Device(char const*)>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	ba a8 14 02 c0       	mov    edx,0xc00214a8
c000c988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c98c:	89 10                	mov    DWORD PTR [eax],edx
c000c98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c992:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c99c:	90                   	nop
c000c99d:	83 c4 0c             	add    esp,0xc
c000c9a0:	c3                   	ret    
c000c9a1:	90                   	nop
c000c9a2:	66 90                	xchg   ax,ax

c000c9a4 <HardDiskController::~HardDiskController()>:
c000c9a4:	83 ec 0c             	sub    esp,0xc
c000c9a7:	ba a8 14 02 c0       	mov    edx,0xc00214a8
c000c9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b0:	89 10                	mov    DWORD PTR [eax],edx
c000c9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b6:	83 ec 0c             	sub    esp,0xc
c000c9b9:	50                   	push   eax
c000c9ba:	e8 6b fb ff ff       	call   c000c52a <Device::~Device()>
c000c9bf:	83 c4 10             	add    esp,0x10
c000c9c2:	90                   	nop
c000c9c3:	83 c4 0c             	add    esp,0xc
c000c9c6:	c3                   	ret    
c000c9c7:	90                   	nop

c000c9c8 <HardDiskController::~HardDiskController()>:
c000c9c8:	83 ec 0c             	sub    esp,0xc
c000c9cb:	83 ec 0c             	sub    esp,0xc
c000c9ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9d2:	e8 cd ff ff ff       	call   c000c9a4 <HardDiskController::~HardDiskController()>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	83 ec 08             	sub    esp,0x8
c000c9dd:	68 58 01 00 00       	push   0x158
c000c9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9e6:	e8 21 de ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c9eb:	83 c4 10             	add    esp,0x10
c000c9ee:	83 c4 0c             	add    esp,0xc
c000c9f1:	c3                   	ret    

c000c9f2 <PhysicalDisk::eject()>:
c000c9f2:	83 c8 ff             	or     eax,0xffffffff
c000c9f5:	c3                   	ret    

c000c9f6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c9f6:	83 ec 0c             	sub    esp,0xc
c000c9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9fd:	83 ec 08             	sub    esp,0x8
c000ca00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca04:	50                   	push   eax
c000ca05:	e8 b6 fd ff ff       	call   c000c7c0 <Device::Device(char const*)>
c000ca0a:	83 c4 10             	add    esp,0x10
c000ca0d:	ba d4 14 02 c0       	mov    edx,0xc00214d4
c000ca12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca16:	89 10                	mov    DWORD PTR [eax],edx
c000ca18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca1c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca27:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ca2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca32:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ca3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ca44:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ca4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca4e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ca58:	90                   	nop
c000ca59:	83 c4 0c             	add    esp,0xc
c000ca5c:	c3                   	ret    
c000ca5d:	90                   	nop

c000ca5e <PhysicalDisk::startCache()>:
c000ca5e:	56                   	push   esi
c000ca5f:	53                   	push   ebx
c000ca60:	83 ec 10             	sub    esp,0x10
c000ca63:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca67:	6a 44                	push   0x44
c000ca69:	e8 65 b0 ff ff       	call   c0007ad3 <malloc>
c000ca6e:	89 c6                	mov    esi,eax
c000ca70:	58                   	pop    eax
c000ca71:	5a                   	pop    edx
c000ca72:	53                   	push   ebx
c000ca73:	56                   	push   esi
c000ca74:	e8 83 17 00 00       	call   c000e1fc <VCache::VCache(PhysicalDisk*)>
c000ca79:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ca7f:	83 c4 14             	add    esp,0x14
c000ca82:	5b                   	pop    ebx
c000ca83:	5e                   	pop    esi
c000ca84:	c3                   	ret    
c000ca85:	90                   	nop

c000ca86 <PhysicalDisk::~PhysicalDisk()>:
c000ca86:	83 ec 0c             	sub    esp,0xc
c000ca89:	ba d4 14 02 c0       	mov    edx,0xc00214d4
c000ca8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca92:	89 10                	mov    DWORD PTR [eax],edx
c000ca94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca98:	83 ec 0c             	sub    esp,0xc
c000ca9b:	50                   	push   eax
c000ca9c:	e8 89 fa ff ff       	call   c000c52a <Device::~Device()>
c000caa1:	83 c4 10             	add    esp,0x10
c000caa4:	90                   	nop
c000caa5:	83 c4 0c             	add    esp,0xc
c000caa8:	c3                   	ret    
c000caa9:	90                   	nop

c000caaa <PhysicalDisk::~PhysicalDisk()>:
c000caaa:	83 ec 0c             	sub    esp,0xc
c000caad:	83 ec 0c             	sub    esp,0xc
c000cab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab4:	e8 cd ff ff ff       	call   c000ca86 <PhysicalDisk::~PhysicalDisk()>
c000cab9:	83 c4 10             	add    esp,0x10
c000cabc:	83 ec 08             	sub    esp,0x8
c000cabf:	68 6c 01 00 00       	push   0x16c
c000cac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac8:	e8 3f dd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cacd:	83 c4 10             	add    esp,0x10
c000cad0:	83 c4 0c             	add    esp,0xc
c000cad3:	c3                   	ret    

c000cad4 <int_handler>:
c000cad4:	55                   	push   ebp
c000cad5:	57                   	push   edi
c000cad6:	56                   	push   esi
c000cad7:	53                   	push   ebx
c000cad8:	83 ec 0c             	sub    esp,0xc
c000cadb:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cae2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cae6:	74 0b                	je     c000caf3 <int_handler+0x1f>
c000cae8:	fa                   	cli    
c000cae9:	f4                   	hlt    
c000caea:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000caf1:	75 f5                	jne    c000cae8 <int_handler+0x14>
c000caf3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000caf6:	8d 46 e0             	lea    eax,[esi-0x20]
c000caf9:	83 f8 17             	cmp    eax,0x17
c000cafc:	76 40                	jbe    c000cb3e <int_handler+0x6a>
c000cafe:	c1 e6 04             	shl    esi,0x4
c000cb01:	31 db                	xor    ebx,ebx
c000cb03:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cb09:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cb0f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cb13:	85 c0                	test   eax,eax
c000cb15:	74 13                	je     c000cb2a <int_handler+0x56>
c000cb17:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cb1b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cb1e:	74 2c                	je     c000cb4c <int_handler+0x78>
c000cb20:	83 ec 08             	sub    esp,0x8
c000cb23:	52                   	push   edx
c000cb24:	57                   	push   edi
c000cb25:	ff d0                	call   eax
c000cb27:	83 c4 10             	add    esp,0x10
c000cb2a:	83 c3 01             	add    ebx,0x1
c000cb2d:	83 fb 04             	cmp    ebx,0x4
c000cb30:	75 dd                	jne    c000cb0f <int_handler+0x3b>
c000cb32:	83 c4 0c             	add    esp,0xc
c000cb35:	31 c0                	xor    eax,eax
c000cb37:	5b                   	pop    ebx
c000cb38:	31 d2                	xor    edx,edx
c000cb3a:	5e                   	pop    esi
c000cb3b:	5f                   	pop    edi
c000cb3c:	5d                   	pop    ebp
c000cb3d:	c3                   	ret    
c000cb3e:	83 ec 0c             	sub    esp,0xc
c000cb41:	50                   	push   eax
c000cb42:	e8 33 b2 00 00       	call   c0017d7a <HalEndOfInterrupt(int)>
c000cb47:	83 c4 10             	add    esp,0x10
c000cb4a:	eb b2                	jmp    c000cafe <int_handler+0x2a>
c000cb4c:	83 ec 08             	sub    esp,0x8
c000cb4f:	52                   	push   edx
c000cb50:	57                   	push   edi
c000cb51:	ff d0                	call   eax
c000cb53:	83 c4 10             	add    esp,0x10
c000cb56:	83 c4 0c             	add    esp,0xc
c000cb59:	5b                   	pop    ebx
c000cb5a:	5e                   	pop    esi
c000cb5b:	5f                   	pop    edi
c000cb5c:	5d                   	pop    ebp
c000cb5d:	c3                   	ret    

c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cb5e:	56                   	push   esi
c000cb5f:	31 c0                	xor    eax,eax
c000cb61:	53                   	push   ebx
c000cb62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb6a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb6e:	89 ca                	mov    edx,ecx
c000cb70:	c1 e2 04             	shl    edx,0x4
c000cb73:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cb7b:	74 17                	je     c000cb94 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cb7d:	83 c0 01             	add    eax,0x1
c000cb80:	83 f8 04             	cmp    eax,0x4
c000cb83:	75 ee                	jne    c000cb73 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cb85:	c7 44 24 0c 04 15 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021504
c000cb8d:	5b                   	pop    ebx
c000cb8e:	5e                   	pop    esi
c000cb8f:	e9 31 46 00 00       	jmp    c00111c5 <KePanic(char const*)>
c000cb94:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cb97:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cb9e:	5b                   	pop    ebx
c000cb9f:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cba6:	5e                   	pop    esi
c000cba7:	c3                   	ret    

c000cba8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cba8:	55                   	push   ebp
c000cba9:	57                   	push   edi
c000cbaa:	56                   	push   esi
c000cbab:	53                   	push   ebx
c000cbac:	83 ec 0c             	sub    esp,0xc
c000cbaf:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cbb5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cbb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbbd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cbc4:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cbc7:	74 57                	je     c000cc20 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cbc9:	84 c0                	test   al,al
c000cbcb:	89 c7                	mov    edi,eax
c000cbcd:	74 1d                	je     c000cbec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cbcf:	83 fe 0f             	cmp    esi,0xf
c000cbd2:	0f 8f d9 00 00 00    	jg     c000ccb1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cbd8:	0f b6 b6 08 30 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcff8]
c000cbdf:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cbe7:	d1 ef                	shr    edi,1
c000cbe9:	83 e7 01             	and    edi,0x1
c000cbec:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cbf1:	83 ec 08             	sub    esp,0x8
c000cbf4:	31 db                	xor    ebx,ebx
c000cbf6:	50                   	push   eax
c000cbf7:	68 11 15 02 c0       	push   0xc0021511
c000cbfc:	e8 09 dd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cc01:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cc06:	83 c4 10             	add    esp,0x10
c000cc09:	85 c0                	test   eax,eax
c000cc0b:	7f 59                	jg     c000cc66 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cc0d:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cc10:	83 ec 0c             	sub    esp,0xc
c000cc13:	68 28 15 02 c0       	push   0xc0021528
c000cc18:	e8 a8 45 00 00       	call   c00111c5 <KePanic(char const*)>
c000cc1d:	83 c4 10             	add    esp,0x10
c000cc20:	89 e8                	mov    eax,ebp
c000cc22:	31 d2                	xor    edx,edx
c000cc24:	c1 e0 04             	shl    eax,0x4
c000cc27:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cc2e:	85 c9                	test   ecx,ecx
c000cc30:	0f 84 92 00 00 00    	je     c000ccc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cc36:	83 c2 01             	add    edx,0x1
c000cc39:	83 fa 04             	cmp    edx,0x4
c000cc3c:	75 e9                	jne    c000cc27 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cc3e:	83 ec 0c             	sub    esp,0xc
c000cc41:	68 7c 15 02 c0       	push   0xc002157c
c000cc46:	e8 7a 45 00 00       	call   c00111c5 <KePanic(char const*)>
c000cc4b:	83 c4 10             	add    esp,0x10
c000cc4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cc53:	83 c4 0c             	add    esp,0xc
c000cc56:	5b                   	pop    ebx
c000cc57:	5e                   	pop    esi
c000cc58:	5f                   	pop    edi
c000cc59:	5d                   	pop    ebp
c000cc5a:	c3                   	ret    
c000cc5b:	83 c3 01             	add    ebx,0x1
c000cc5e:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cc64:	7e a7                	jle    c000cc0d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cc66:	8b 2c 9d e0 a0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5f20]
c000cc6d:	83 ec 08             	sub    esp,0x8
c000cc70:	56                   	push   esi
c000cc71:	55                   	push   ebp
c000cc72:	e8 ed 18 01 00       	call   c001e564 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cc77:	83 c4 10             	add    esp,0x10
c000cc7a:	84 c0                	test   al,al
c000cc7c:	74 dd                	je     c000cc5b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cc7e:	89 f8                	mov    eax,edi
c000cc80:	83 ec 04             	sub    esp,0x4
c000cc83:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cc8a:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cc8d:	0f b6 f8             	movzx  edi,al
c000cc90:	57                   	push   edi
c000cc91:	89 e8                	mov    eax,ebp
c000cc93:	6a 00                	push   0x0
c000cc95:	0f b6 c0             	movzx  eax,al
c000cc98:	50                   	push   eax
c000cc99:	89 f0                	mov    eax,esi
c000cc9b:	6a 00                	push   0x0
c000cc9d:	0f b6 c0             	movzx  eax,al
c000cca0:	6a 00                	push   0x0
c000cca2:	50                   	push   eax
c000cca3:	53                   	push   ebx
c000cca4:	e8 27 1a 01 00       	call   c001e6d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cca9:	83 c4 20             	add    esp,0x20
c000ccac:	e9 6f ff ff ff       	jmp    c000cc20 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000ccb1:	83 ec 0c             	sub    esp,0xc
c000ccb4:	31 ff                	xor    edi,edi
c000ccb6:	68 44 15 02 c0       	push   0xc0021544
c000ccbb:	e8 05 45 00 00       	call   c00111c5 <KePanic(char const*)>
c000ccc0:	83 c4 10             	add    esp,0x10
c000ccc3:	e9 24 ff ff ff       	jmp    c000cbec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000ccc8:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000cccb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cccf:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000ccd6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ccda:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cce1:	83 c4 0c             	add    esp,0xc
c000cce4:	89 f0                	mov    eax,esi
c000cce6:	5b                   	pop    ebx
c000cce7:	5e                   	pop    esi
c000cce8:	5f                   	pop    edi
c000cce9:	5d                   	pop    ebp
c000ccea:	c3                   	ret    

c000cceb <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cceb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ccf3:	c1 e0 04             	shl    eax,0x4
c000ccf6:	8d 50 10             	lea    edx,[eax+0x10]
c000ccf9:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000ccff:	74 08                	je     c000cd09 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000cd01:	83 c0 04             	add    eax,0x4
c000cd04:	39 d0                	cmp    eax,edx
c000cd06:	75 f1                	jne    c000ccf9 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000cd08:	c3                   	ret    
c000cd09:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd13:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cd1d:	eb e2                	jmp    c000cd01 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cd1f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cd1f:	56                   	push   esi
c000cd20:	53                   	push   ebx
c000cd21:	83 ec 04             	sub    esp,0x4
c000cd24:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cd29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd2d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cd31:	74 0e                	je     c000cd41 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cd33:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000cd38:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cd3f:	75 34                	jne    c000cd75 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000cd41:	8d 43 20             	lea    eax,[ebx+0x20]
c000cd44:	c1 e0 04             	shl    eax,0x4
c000cd47:	8d 50 10             	lea    edx,[eax+0x10]
c000cd4a:	39 b0 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],esi
c000cd50:	74 0d                	je     c000cd5f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000cd52:	83 c0 04             	add    eax,0x4
c000cd55:	39 d0                	cmp    eax,edx
c000cd57:	75 f1                	jne    c000cd4a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000cd59:	83 c4 04             	add    esp,0x4
c000cd5c:	5b                   	pop    ebx
c000cd5d:	5e                   	pop    esi
c000cd5e:	c3                   	ret    
c000cd5f:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd69:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cd73:	eb dd                	jmp    c000cd52 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000cd75:	83 fb 0f             	cmp    ebx,0xf
c000cd78:	7f 09                	jg     c000cd83 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000cd7a:	0f b6 9b 08 30 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdcff8]
c000cd81:	eb be                	jmp    c000cd41 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cd83:	83 ec 0c             	sub    esp,0xc
c000cd86:	68 35 15 02 c0       	push   0xc0021535
c000cd8b:	e8 35 44 00 00       	call   c00111c5 <KePanic(char const*)>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	eb ac                	jmp    c000cd41 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000cd95 <setupINTS()>:
c000cd95:	31 c0                	xor    eax,eax
c000cd97:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cda1:	83 c0 10             	add    eax,0x10
c000cda4:	c7 80 10 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bf0],0x0
c000cdae:	c7 80 14 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bec],0x0
c000cdb8:	c7 80 14 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bec],0x0
c000cdc2:	c7 80 18 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be8],0x0
c000cdcc:	c7 80 18 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be8],0x0
c000cdd6:	c7 80 1c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be4],0x0
c000cde0:	c7 80 1c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be4],0x0
c000cdea:	3d 00 10 00 00       	cmp    eax,0x1000
c000cdef:	75 a6                	jne    c000cd97 <setupINTS()+0x2>
c000cdf1:	c3                   	ret    

c000cdf2 <convertLegacyIRQNumber(int)>:
c000cdf2:	83 ec 0c             	sub    esp,0xc
c000cdf5:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cdfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdff:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000ce06:	74 0c                	je     c000ce14 <convertLegacyIRQNumber(int)+0x22>
c000ce08:	83 f8 0f             	cmp    eax,0xf
c000ce0b:	7f 0b                	jg     c000ce18 <convertLegacyIRQNumber(int)+0x26>
c000ce0d:	0f b6 80 08 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcff8]
c000ce14:	83 c4 0c             	add    esp,0xc
c000ce17:	c3                   	ret    
c000ce18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce1c:	83 ec 0c             	sub    esp,0xc
c000ce1f:	68 44 15 02 c0       	push   0xc0021544
c000ce24:	e8 9c 43 00 00       	call   c00111c5 <KePanic(char const*)>
c000ce29:	83 c4 10             	add    esp,0x10
c000ce2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce30:	83 c4 0c             	add    esp,0xc
c000ce33:	c3                   	ret    

c000ce34 <startGUI(void*)>:
c000ce34:	55                   	push   ebp
c000ce35:	89 e5                	mov    ebp,esp
c000ce37:	53                   	push   ebx
c000ce38:	83 ec 04             	sub    esp,0x4
c000ce3b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ce40:	83 e8 01             	sub    eax,0x1
c000ce43:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000ce48:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ce4d:	85 c0                	test   eax,eax
c000ce4f:	75 01                	jne    c000ce52 <startGUI(void*)+0x1e>
c000ce51:	fb                   	sti    
c000ce52:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce58:	83 ec 08             	sub    esp,0x8
c000ce5b:	6a 01                	push   0x1
c000ce5d:	68 a1 15 02 c0       	push   0xc00215a1
c000ce62:	e8 f5 81 00 00       	call   c001505c <Thr::loadDLL(char const*, bool)>
c000ce67:	83 c4 10             	add    esp,0x10
c000ce6a:	83 ec 08             	sub    esp,0x8
c000ce6d:	53                   	push   ebx
c000ce6e:	50                   	push   eax
c000ce6f:	e8 28 84 00 00       	call   c001529c <Thr::executeDLL(unsigned long, void*)>
c000ce74:	83 c4 10             	add    esp,0x10
c000ce77:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce7d:	83 ec 08             	sub    esp,0x8
c000ce80:	6a 01                	push   0x1
c000ce82:	68 bb 15 02 c0       	push   0xc00215bb
c000ce87:	e8 d0 81 00 00       	call   c001505c <Thr::loadDLL(char const*, bool)>
c000ce8c:	83 c4 10             	add    esp,0x10
c000ce8f:	83 ec 08             	sub    esp,0x8
c000ce92:	53                   	push   ebx
c000ce93:	50                   	push   eax
c000ce94:	e8 03 84 00 00       	call   c001529c <Thr::executeDLL(unsigned long, void*)>
c000ce99:	83 c4 10             	add    esp,0x10
c000ce9c:	90                   	nop
c000ce9d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cea0:	c9                   	leave  
c000cea1:	c3                   	ret    

c000cea2 <startGUIVESA(void*)>:
c000cea2:	55                   	push   ebp
c000cea3:	89 e5                	mov    ebp,esp
c000cea5:	53                   	push   ebx
c000cea6:	83 ec 04             	sub    esp,0x4
c000cea9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ceae:	83 e8 01             	sub    eax,0x1
c000ceb1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000ceb6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cebb:	85 c0                	test   eax,eax
c000cebd:	75 01                	jne    c000cec0 <startGUIVESA(void*)+0x1e>
c000cebf:	fb                   	sti    
c000cec0:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cec6:	83 ec 08             	sub    esp,0x8
c000cec9:	6a 01                	push   0x1
c000cecb:	68 d9 15 02 c0       	push   0xc00215d9
c000ced0:	e8 87 81 00 00       	call   c001505c <Thr::loadDLL(char const*, bool)>
c000ced5:	83 c4 10             	add    esp,0x10
c000ced8:	83 ec 08             	sub    esp,0x8
c000cedb:	53                   	push   ebx
c000cedc:	50                   	push   eax
c000cedd:	e8 ba 83 00 00       	call   c001529c <Thr::executeDLL(unsigned long, void*)>
c000cee2:	83 c4 10             	add    esp,0x10
c000cee5:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ceeb:	83 ec 08             	sub    esp,0x8
c000ceee:	6a 01                	push   0x1
c000cef0:	68 bb 15 02 c0       	push   0xc00215bb
c000cef5:	e8 62 81 00 00       	call   c001505c <Thr::loadDLL(char const*, bool)>
c000cefa:	83 c4 10             	add    esp,0x10
c000cefd:	83 ec 08             	sub    esp,0x8
c000cf00:	53                   	push   ebx
c000cf01:	50                   	push   eax
c000cf02:	e8 95 83 00 00       	call   c001529c <Thr::executeDLL(unsigned long, void*)>
c000cf07:	83 c4 10             	add    esp,0x10
c000cf0a:	90                   	nop
c000cf0b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf0e:	c9                   	leave  
c000cf0f:	c3                   	ret    

c000cf10 <sendKeyToTerminal(unsigned char)>:
c000cf10:	55                   	push   ebp
c000cf11:	89 e5                	mov    ebp,esp
c000cf13:	83 ec 28             	sub    esp,0x28
c000cf16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf19:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cf1c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cf21:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cf25:	83 ec 08             	sub    esp,0x8
c000cf28:	52                   	push   edx
c000cf29:	50                   	push   eax
c000cf2a:	e8 8d be ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000cf2f:	83 c4 10             	add    esp,0x10
c000cf32:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf36:	83 f8 0a             	cmp    eax,0xa
c000cf39:	74 16                	je     c000cf51 <sendKeyToTerminal(unsigned char)+0x41>
c000cf3b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf3f:	83 f8 03             	cmp    eax,0x3
c000cf42:	74 0d                	je     c000cf51 <sendKeyToTerminal(unsigned char)+0x41>
c000cf44:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf48:	83 f8 1c             	cmp    eax,0x1c
c000cf4b:	0f 85 97 00 00 00    	jne    c000cfe8 <sendKeyToTerminal(unsigned char)+0xd8>
c000cf51:	fa                   	cli    
c000cf52:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf57:	83 c0 01             	add    eax,0x1
c000cf5a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf5f:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cf64:	83 c0 01             	add    eax,0x1
c000cf67:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cf6c:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000cf71:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf74:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000cf7e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000cf82:	74 1f                	je     c000cfa3 <sendKeyToTerminal(unsigned char)+0x93>
c000cf84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf87:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000cf8a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cf8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000cf90:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf93:	83 ec 0c             	sub    esp,0xc
c000cf96:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cf99:	e8 22 90 00 00       	call   c0015fc0 <unblockTask(ThreadControlBlock*)>
c000cf9e:	83 c4 10             	add    esp,0x10
c000cfa1:	eb db                	jmp    c000cf7e <sendKeyToTerminal(unsigned char)+0x6e>
c000cfa3:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cfa8:	83 e8 01             	sub    eax,0x1
c000cfab:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cfb0:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cfb5:	85 c0                	test   eax,eax
c000cfb7:	75 18                	jne    c000cfd1 <sendKeyToTerminal(unsigned char)+0xc1>
c000cfb9:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000cfbe:	85 c0                	test   eax,eax
c000cfc0:	74 0f                	je     c000cfd1 <sendKeyToTerminal(unsigned char)+0xc1>
c000cfc2:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000cfcc:	e8 f7 8a 00 00       	call   c0015ac8 <schedule()>
c000cfd1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfd6:	83 e8 01             	sub    eax,0x1
c000cfd9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cfde:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfe3:	85 c0                	test   eax,eax
c000cfe5:	75 01                	jne    c000cfe8 <sendKeyToTerminal(unsigned char)+0xd8>
c000cfe7:	fb                   	sti    
c000cfe8:	90                   	nop
c000cfe9:	c9                   	leave  
c000cfea:	c3                   	ret    

c000cfeb <sendKeyboardToken(KeyboardToken)>:
c000cfeb:	55                   	push   ebp
c000cfec:	89 e5                	mov    ebp,esp
c000cfee:	83 ec 18             	sub    esp,0x18
c000cff1:	e8 1f 42 00 00       	call   c0011215 <KeUserIOReceived()>
c000cff6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000cff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cffc:	0f b7 c0             	movzx  eax,ax
c000cfff:	83 f2 01             	xor    edx,0x1
c000d002:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d008:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d00d:	85 c0                	test   eax,eax
c000d00f:	74 24                	je     c000d035 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d011:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d017:	83 ec 04             	sub    esp,0x4
c000d01a:	68 40 84 02 c0       	push   0xc0028440
c000d01f:	83 ec 08             	sub    esp,0x8
c000d022:	89 e0                	mov    eax,esp
c000d024:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d027:	89 08                	mov    DWORD PTR [eax],ecx
c000d029:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d02c:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d030:	ff d2                	call   edx
c000d032:	83 c4 10             	add    esp,0x10
c000d035:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d039:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d03c:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d041:	0f b6 d2             	movzx  edx,dl
c000d044:	0f b6 c0             	movzx  eax,al
c000d047:	39 c2                	cmp    edx,eax
c000d049:	74 1c                	je     c000d067 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d04b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d04e:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d053:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d058:	0f b6 c0             	movzx  eax,al
c000d05b:	83 ec 0c             	sub    esp,0xc
c000d05e:	50                   	push   eax
c000d05f:	e8 b4 b4 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d064:	83 c4 10             	add    esp,0x10
c000d067:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d06a:	0f b6 c0             	movzx  eax,al
c000d06d:	85 c0                	test   eax,eax
c000d06f:	0f 84 da 00 00 00    	je     c000d14f <sendKeyboardToken(KeyboardToken)+0x164>
c000d075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d078:	0f b7 c0             	movzx  eax,ax
c000d07b:	3d 18 03 00 00       	cmp    eax,0x318
c000d080:	75 06                	jne    c000d088 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d082:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d08b:	0f b7 c0             	movzx  eax,ax
c000d08e:	3d 19 03 00 00       	cmp    eax,0x319
c000d093:	75 06                	jne    c000d09b <sendKeyboardToken(KeyboardToken)+0xb0>
c000d095:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d09b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d09e:	0f b7 c0             	movzx  eax,ax
c000d0a1:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d0a6:	75 06                	jne    c000d0ae <sendKeyboardToken(KeyboardToken)+0xc3>
c000d0a8:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d0ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0b1:	0f b7 c0             	movzx  eax,ax
c000d0b4:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d0b9:	75 06                	jne    c000d0c1 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d0bb:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d0c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0c4:	0f b7 c0             	movzx  eax,ax
c000d0c7:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d0cc:	75 06                	jne    c000d0d4 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d0ce:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d0d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0d7:	0f b7 c0             	movzx  eax,ax
c000d0da:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d0df:	75 06                	jne    c000d0e7 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d0e1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d0e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0ea:	0f b7 c0             	movzx  eax,ax
c000d0ed:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d0f2:	75 06                	jne    c000d0fa <sendKeyboardToken(KeyboardToken)+0x10f>
c000d0f4:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d0fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0fd:	0f b7 c0             	movzx  eax,ax
c000d100:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d105:	75 06                	jne    c000d10d <sendKeyboardToken(KeyboardToken)+0x122>
c000d107:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d10d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d110:	0f b7 c0             	movzx  eax,ax
c000d113:	3d 20 03 00 00       	cmp    eax,0x320
c000d118:	75 06                	jne    c000d120 <sendKeyboardToken(KeyboardToken)+0x135>
c000d11a:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d120:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d123:	0f b7 c0             	movzx  eax,ax
c000d126:	3d 21 03 00 00       	cmp    eax,0x321
c000d12b:	75 06                	jne    c000d133 <sendKeyboardToken(KeyboardToken)+0x148>
c000d12d:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d136:	0f b7 c0             	movzx  eax,ax
c000d139:	3d 22 03 00 00       	cmp    eax,0x322
c000d13e:	0f 85 f1 00 00 00    	jne    c000d235 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d144:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d14a:	e9 e6 00 00 00       	jmp    c000d235 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d14f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d152:	0f b7 c0             	movzx  eax,ax
c000d155:	3d 18 03 00 00       	cmp    eax,0x318
c000d15a:	75 0a                	jne    c000d166 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d15c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d162:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d169:	0f b7 c0             	movzx  eax,ax
c000d16c:	3d 19 03 00 00       	cmp    eax,0x319
c000d171:	75 0a                	jne    c000d17d <sendKeyboardToken(KeyboardToken)+0x192>
c000d173:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d179:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d17d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d180:	0f b7 c0             	movzx  eax,ax
c000d183:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d188:	75 0a                	jne    c000d194 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d18a:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d190:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d194:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d197:	0f b7 c0             	movzx  eax,ax
c000d19a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d19f:	75 0a                	jne    c000d1ab <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d1a1:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d1a7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ae:	0f b7 c0             	movzx  eax,ax
c000d1b1:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1b6:	75 0a                	jne    c000d1c2 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d1b8:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d1be:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c5:	0f b7 c0             	movzx  eax,ax
c000d1c8:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1cd:	75 0a                	jne    c000d1d9 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d1cf:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1d5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1dc:	0f b7 c0             	movzx  eax,ax
c000d1df:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1e4:	75 0a                	jne    c000d1f0 <sendKeyboardToken(KeyboardToken)+0x205>
c000d1e6:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d1ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f3:	0f b7 c0             	movzx  eax,ax
c000d1f6:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d1fb:	75 0a                	jne    c000d207 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d1fd:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d203:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d20a:	0f b7 c0             	movzx  eax,ax
c000d20d:	3d 20 03 00 00       	cmp    eax,0x320
c000d212:	75 0a                	jne    c000d21e <sendKeyboardToken(KeyboardToken)+0x233>
c000d214:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d21a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d21e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d221:	0f b7 c0             	movzx  eax,ax
c000d224:	3d 21 03 00 00       	cmp    eax,0x321
c000d229:	75 0a                	jne    c000d235 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d22b:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d231:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d238:	0f b7 c0             	movzx  eax,ax
c000d23b:	3d 00 02 00 00       	cmp    eax,0x200
c000d240:	75 2f                	jne    c000d271 <sendKeyboardToken(KeyboardToken)+0x286>
c000d242:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d247:	83 f0 01             	xor    eax,0x1
c000d24a:	0f b6 c0             	movzx  eax,al
c000d24d:	85 c0                	test   eax,eax
c000d24f:	74 20                	je     c000d271 <sendKeyboardToken(KeyboardToken)+0x286>
c000d251:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d256:	6a 01                	push   0x1
c000d258:	6a 00                	push   0x0
c000d25a:	68 34 ce 00 c0       	push   0xc000ce34
c000d25f:	50                   	push   eax
c000d260:	e8 17 86 00 00       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c000d265:	83 c4 10             	add    esp,0x10
c000d268:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d26f:	eb 3a                	jmp    c000d2ab <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d274:	0f b7 c0             	movzx  eax,ax
c000d277:	3d 01 02 00 00       	cmp    eax,0x201
c000d27c:	75 2d                	jne    c000d2ab <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d27e:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d283:	83 f0 01             	xor    eax,0x1
c000d286:	0f b6 c0             	movzx  eax,al
c000d289:	85 c0                	test   eax,eax
c000d28b:	74 1e                	je     c000d2ab <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d28d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d292:	6a 01                	push   0x1
c000d294:	6a 00                	push   0x0
c000d296:	68 a2 ce 00 c0       	push   0xc000cea2
c000d29b:	50                   	push   eax
c000d29c:	e8 db 85 00 00       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c000d2a1:	83 c4 10             	add    esp,0x10
c000d2a4:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d2ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ae:	0f b7 c0             	movzx  eax,ax
c000d2b1:	3d 25 03 00 00       	cmp    eax,0x325
c000d2b6:	75 06                	jne    c000d2be <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d2b8:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d2be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c1:	0f b7 c0             	movzx  eax,ax
c000d2c4:	3d 24 03 00 00       	cmp    eax,0x324
c000d2c9:	75 06                	jne    c000d2d1 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d2cb:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d2d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2d4:	0f b7 c0             	movzx  eax,ax
c000d2d7:	3d 23 03 00 00       	cmp    eax,0x323
c000d2dc:	75 06                	jne    c000d2e4 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d2de:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d2e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2e7:	0f b7 c0             	movzx  eax,ax
c000d2ea:	3d 26 03 00 00       	cmp    eax,0x326
c000d2ef:	75 06                	jne    c000d2f7 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d2f1:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d2f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2fa:	0f b7 c0             	movzx  eax,ax
c000d2fd:	3d 27 03 00 00       	cmp    eax,0x327
c000d302:	75 06                	jne    c000d30a <sendKeyboardToken(KeyboardToken)+0x31f>
c000d304:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d30a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d30d:	0f b7 c0             	movzx  eax,ax
c000d310:	3d 22 03 00 00       	cmp    eax,0x322
c000d315:	75 06                	jne    c000d31d <sendKeyboardToken(KeyboardToken)+0x332>
c000d317:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d31d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d321:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d324:	83 f0 01             	xor    eax,0x1
c000d327:	0f b6 c0             	movzx  eax,al
c000d32a:	85 c0                	test   eax,eax
c000d32c:	74 7c                	je     c000d3aa <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d32e:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d333:	0f b6 c0             	movzx  eax,al
c000d336:	85 c0                	test   eax,eax
c000d338:	74 43                	je     c000d37d <sendKeyboardToken(KeyboardToken)+0x392>
c000d33a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d33e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d342:	85 c0                	test   eax,eax
c000d344:	74 2b                	je     c000d371 <sendKeyboardToken(KeyboardToken)+0x386>
c000d346:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d34c:	89 d0                	mov    eax,edx
c000d34e:	c1 e0 02             	shl    eax,0x2
c000d351:	01 d0                	add    eax,edx
c000d353:	d1 e0                	shl    eax,1
c000d355:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d35a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d35d:	0f b7 c0             	movzx  eax,ax
c000d360:	8d 50 d0             	lea    edx,[eax-0x30]
c000d363:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d368:	01 d0                	add    eax,edx
c000d36a:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d36f:	eb 71                	jmp    c000d3e2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d371:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d37b:	eb 65                	jmp    c000d3e2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d37d:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d382:	85 c0                	test   eax,eax
c000d384:	74 18                	je     c000d39e <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d386:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d38b:	0f b6 c0             	movzx  eax,al
c000d38e:	83 ec 0c             	sub    esp,0xc
c000d391:	50                   	push   eax
c000d392:	e8 79 fb ff ff       	call   c000cf10 <sendKeyToTerminal(unsigned char)>
c000d397:	83 c4 10             	add    esp,0x10
c000d39a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d39e:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d3a8:	eb 38                	jmp    c000d3e2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d3aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ad:	0f b7 c0             	movzx  eax,ax
c000d3b0:	3d 01 01 00 00       	cmp    eax,0x101
c000d3b5:	75 2b                	jne    c000d3e2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d3b7:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3bc:	85 c0                	test   eax,eax
c000d3be:	74 18                	je     c000d3d8 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d3c0:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3c5:	0f b6 c0             	movzx  eax,al
c000d3c8:	83 ec 0c             	sub    esp,0xc
c000d3cb:	50                   	push   eax
c000d3cc:	e8 3f fb ff ff       	call   c000cf10 <sendKeyToTerminal(unsigned char)>
c000d3d1:	83 c4 10             	add    esp,0x10
c000d3d4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d3d8:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d3e2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d3e5:	83 f0 01             	xor    eax,0x1
c000d3e8:	0f b6 c0             	movzx  eax,al
c000d3eb:	85 c0                	test   eax,eax
c000d3ed:	74 5a                	je     c000d449 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3ef:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d3f2:	83 f0 01             	xor    eax,0x1
c000d3f5:	0f b6 c0             	movzx  eax,al
c000d3f8:	85 c0                	test   eax,eax
c000d3fa:	74 4d                	je     c000d449 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3fc:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d401:	83 f0 01             	xor    eax,0x1
c000d404:	0f b6 c0             	movzx  eax,al
c000d407:	85 c0                	test   eax,eax
c000d409:	74 3e                	je     c000d449 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d40b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d40e:	0f b7 c0             	movzx  eax,ax
c000d411:	83 f8 1f             	cmp    eax,0x1f
c000d414:	76 0b                	jbe    c000d421 <sendKeyboardToken(KeyboardToken)+0x436>
c000d416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d419:	0f b7 c0             	movzx  eax,ax
c000d41c:	83 f8 7e             	cmp    eax,0x7e
c000d41f:	76 16                	jbe    c000d437 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d424:	0f b7 c0             	movzx  eax,ax
c000d427:	83 f8 0a             	cmp    eax,0xa
c000d42a:	74 0b                	je     c000d437 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d42c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42f:	0f b7 c0             	movzx  eax,ax
c000d432:	83 f8 08             	cmp    eax,0x8
c000d435:	75 12                	jne    c000d449 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d43a:	0f b6 c0             	movzx  eax,al
c000d43d:	83 ec 0c             	sub    esp,0xc
c000d440:	50                   	push   eax
c000d441:	e8 ca fa ff ff       	call   c000cf10 <sendKeyToTerminal(unsigned char)>
c000d446:	83 c4 10             	add    esp,0x10
c000d449:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d44c:	83 f0 01             	xor    eax,0x1
c000d44f:	0f b6 c0             	movzx  eax,al
c000d452:	85 c0                	test   eax,eax
c000d454:	74 5d                	je     c000d4b3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d456:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d459:	83 f0 01             	xor    eax,0x1
c000d45c:	0f b6 c0             	movzx  eax,al
c000d45f:	85 c0                	test   eax,eax
c000d461:	74 50                	je     c000d4b3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d463:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d468:	0f b6 c0             	movzx  eax,al
c000d46b:	85 c0                	test   eax,eax
c000d46d:	74 44                	je     c000d4b3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d46f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d472:	0f b7 c0             	movzx  eax,ax
c000d475:	83 f8 3f             	cmp    eax,0x3f
c000d478:	76 39                	jbe    c000d4b3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d47a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d47d:	0f b7 c0             	movzx  eax,ax
c000d480:	83 f8 7f             	cmp    eax,0x7f
c000d483:	77 2e                	ja     c000d4b3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d488:	88 c2                	mov    dl,al
c000d48a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d48d:	0f b7 c0             	movzx  eax,ax
c000d490:	83 f8 5f             	cmp    eax,0x5f
c000d493:	76 04                	jbe    c000d499 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d495:	b0 20                	mov    al,0x20
c000d497:	eb 02                	jmp    c000d49b <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d499:	b0 00                	mov    al,0x0
c000d49b:	89 d1                	mov    ecx,edx
c000d49d:	29 c1                	sub    ecx,eax
c000d49f:	89 c8                	mov    eax,ecx
c000d4a1:	83 e8 40             	sub    eax,0x40
c000d4a4:	0f b6 c0             	movzx  eax,al
c000d4a7:	83 ec 0c             	sub    esp,0xc
c000d4aa:	50                   	push   eax
c000d4ab:	e8 60 fa ff ff       	call   c000cf10 <sendKeyToTerminal(unsigned char)>
c000d4b0:	83 c4 10             	add    esp,0x10
c000d4b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b6:	0f b7 c0             	movzx  eax,ax
c000d4b9:	3d 00 03 00 00       	cmp    eax,0x300
c000d4be:	75 12                	jne    c000d4d2 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d4c0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4c3:	83 f0 01             	xor    eax,0x1
c000d4c6:	0f b6 c0             	movzx  eax,al
c000d4c9:	85 c0                	test   eax,eax
c000d4cb:	74 05                	je     c000d4d2 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d4cd:	e8 47 b0 ff ff       	call   c0008519 <doTerminalCycle()>
c000d4d2:	90                   	nop
c000d4d3:	c9                   	leave  
c000d4d4:	c3                   	ret    

c000d4d5 <clearInternalKeybuffer(VgaText*)>:
c000d4d5:	55                   	push   ebp
c000d4d6:	89 e5                	mov    ebp,esp
c000d4d8:	83 ec 08             	sub    esp,0x8
c000d4db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4de:	05 02 01 00 00       	add    eax,0x102
c000d4e3:	83 ec 0c             	sub    esp,0xc
c000d4e6:	50                   	push   eax
c000d4e7:	e8 94 30 ff ff       	call   c0000580 <strlen>
c000d4ec:	83 c4 10             	add    esp,0x10
c000d4ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d4f2:	81 c2 02 01 00 00    	add    edx,0x102
c000d4f8:	83 ec 04             	sub    esp,0x4
c000d4fb:	50                   	push   eax
c000d4fc:	6a 00                	push   0x0
c000d4fe:	52                   	push   edx
c000d4ff:	e8 ec 2f ff ff       	call   c00004f0 <memset>
c000d504:	83 c4 10             	add    esp,0x10
c000d507:	90                   	nop
c000d508:	c9                   	leave  
c000d509:	c3                   	ret    

c000d50a <readKeyboard(VgaText*, char*, unsigned long)>:
c000d50a:	55                   	push   ebp
c000d50b:	89 e5                	mov    ebp,esp
c000d50d:	83 ec 18             	sub    esp,0x18
c000d510:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d515:	85 c0                	test   eax,eax
c000d517:	74 2a                	je     c000d543 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d519:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d51f:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d525:	83 ec 04             	sub    esp,0x4
c000d528:	68 40 84 02 c0       	push   0xc0028440
c000d52d:	83 ec 08             	sub    esp,0x8
c000d530:	89 e0                	mov    eax,esp
c000d532:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d535:	89 08                	mov    DWORD PTR [eax],ecx
c000d537:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d53a:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d53e:	ff d2                	call   edx
c000d540:	83 c4 10             	add    esp,0x10
c000d543:	fb                   	sti    
c000d544:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d54b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d54f:	0f 84 0d 01 00 00    	je     c000d662 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d558:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d55e:	0f be c0             	movsx  eax,al
c000d561:	85 c0                	test   eax,eax
c000d563:	75 2c                	jne    c000d591 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d565:	fa                   	cli    
c000d566:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d56b:	83 c0 01             	add    eax,0x1
c000d56e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d573:	e8 50 85 00 00       	call   c0015ac8 <schedule()>
c000d578:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d57d:	83 e8 01             	sub    eax,0x1
c000d580:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d585:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d58a:	85 c0                	test   eax,eax
c000d58c:	75 c7                	jne    c000d555 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d58e:	fb                   	sti    
c000d58f:	eb c4                	jmp    c000d555 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d591:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d594:	8d 50 01             	lea    edx,[eax+0x1]
c000d597:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d59a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d59d:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d5a3:	88 10                	mov    BYTE PTR [eax],dl
c000d5a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a8:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d5ae:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d5b1:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5b5:	83 f8 03             	cmp    eax,0x3
c000d5b8:	75 1e                	jne    c000d5d8 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d5ba:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5c4:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5ca:	83 ec 08             	sub    esp,0x8
c000d5cd:	6a 02                	push   0x2
c000d5cf:	50                   	push   eax
c000d5d0:	e8 8e 40 00 00       	call   c0011663 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5d5:	83 c4 10             	add    esp,0x10
c000d5d8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5dc:	83 f8 1c             	cmp    eax,0x1c
c000d5df:	75 1e                	jne    c000d5ff <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d5e1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5eb:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5f1:	83 ec 08             	sub    esp,0x8
c000d5f4:	6a 09                	push   0x9
c000d5f6:	50                   	push   eax
c000d5f7:	e8 67 40 00 00       	call   c0011663 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5fc:	83 c4 10             	add    esp,0x10
c000d5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d602:	05 02 01 00 00       	add    eax,0x102
c000d607:	83 ec 0c             	sub    esp,0xc
c000d60a:	50                   	push   eax
c000d60b:	e8 70 2f ff ff       	call   c0000580 <strlen>
c000d610:	83 c4 10             	add    esp,0x10
c000d613:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d616:	81 c2 02 01 00 00    	add    edx,0x102
c000d61c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d61f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d622:	81 c2 02 01 00 00    	add    edx,0x102
c000d628:	83 ec 04             	sub    esp,0x4
c000d62b:	50                   	push   eax
c000d62c:	51                   	push   ecx
c000d62d:	52                   	push   edx
c000d62e:	e8 9d 2d ff ff       	call   c00003d0 <memmove>
c000d633:	83 c4 10             	add    esp,0x10
c000d636:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d63a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d63e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d642:	83 f8 0a             	cmp    eax,0xa
c000d645:	74 16                	je     c000d65d <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d647:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d64b:	83 f8 03             	cmp    eax,0x3
c000d64e:	74 0d                	je     c000d65d <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d650:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d654:	83 f8 1c             	cmp    eax,0x1c
c000d657:	0f 85 ee fe ff ff    	jne    c000d54b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d65d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d660:	eb 03                	jmp    c000d665 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d662:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d665:	c9                   	leave  
c000d666:	c3                   	ret    
c000d667:	90                   	nop

c000d668 <Keyboard::Keyboard(char const*)>:
c000d668:	83 ec 0c             	sub    esp,0xc
c000d66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d66f:	83 ec 08             	sub    esp,0x8
c000d672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d676:	50                   	push   eax
c000d677:	e8 44 f1 ff ff       	call   c000c7c0 <Device::Device(char const*)>
c000d67c:	83 c4 10             	add    esp,0x10
c000d67f:	ba fc 15 02 c0       	mov    edx,0xc00215fc
c000d684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d688:	89 10                	mov    DWORD PTR [eax],edx
c000d68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d698:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d69f:	90                   	nop
c000d6a0:	83 c4 0c             	add    esp,0xc
c000d6a3:	c3                   	ret    

c000d6a4 <Keyboard::~Keyboard()>:
c000d6a4:	83 ec 0c             	sub    esp,0xc
c000d6a7:	ba fc 15 02 c0       	mov    edx,0xc00215fc
c000d6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b0:	89 10                	mov    DWORD PTR [eax],edx
c000d6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b6:	83 ec 0c             	sub    esp,0xc
c000d6b9:	50                   	push   eax
c000d6ba:	e8 6b ee ff ff       	call   c000c52a <Device::~Device()>
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	90                   	nop
c000d6c3:	83 c4 0c             	add    esp,0xc
c000d6c6:	c3                   	ret    
c000d6c7:	90                   	nop

c000d6c8 <Keyboard::~Keyboard()>:
c000d6c8:	83 ec 0c             	sub    esp,0xc
c000d6cb:	83 ec 0c             	sub    esp,0xc
c000d6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6d2:	e8 cd ff ff ff       	call   c000d6a4 <Keyboard::~Keyboard()>
c000d6d7:	83 c4 10             	add    esp,0x10
c000d6da:	83 ec 08             	sub    esp,0x8
c000d6dd:	68 5c 01 00 00       	push   0x15c
c000d6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6e6:	e8 21 d1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d6eb:	83 c4 10             	add    esp,0x10
c000d6ee:	83 c4 0c             	add    esp,0xc
c000d6f1:	c3                   	ret    

c000d6f2 <LogicalDisk::close(int, int, void*)>:
c000d6f2:	83 c8 ff             	or     eax,0xffffffff
c000d6f5:	c3                   	ret    

c000d6f6 <LogicalDisk::~LogicalDisk()>:
c000d6f6:	83 ec 0c             	sub    esp,0xc
c000d6f9:	ba 74 16 02 c0       	mov    edx,0xc0021674
c000d6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d702:	89 10                	mov    DWORD PTR [eax],edx
c000d704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d708:	83 ec 0c             	sub    esp,0xc
c000d70b:	50                   	push   eax
c000d70c:	e8 19 ee ff ff       	call   c000c52a <Device::~Device()>
c000d711:	83 c4 10             	add    esp,0x10
c000d714:	90                   	nop
c000d715:	83 c4 0c             	add    esp,0xc
c000d718:	c3                   	ret    
c000d719:	90                   	nop

c000d71a <LogicalDisk::~LogicalDisk()>:
c000d71a:	83 ec 0c             	sub    esp,0xc
c000d71d:	83 ec 0c             	sub    esp,0xc
c000d720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d724:	e8 cd ff ff ff       	call   c000d6f6 <LogicalDisk::~LogicalDisk()>
c000d729:	83 c4 10             	add    esp,0x10
c000d72c:	83 ec 08             	sub    esp,0x8
c000d72f:	68 78 01 00 00       	push   0x178
c000d734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d738:	e8 cf d0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d73d:	83 c4 10             	add    esp,0x10
c000d740:	83 c4 0c             	add    esp,0xc
c000d743:	c3                   	ret    

c000d744 <LogicalDisk::open(int, int, void*)>:
c000d744:	83 ec 18             	sub    esp,0x18
c000d747:	68 28 16 02 c0       	push   0xc0021628
c000d74c:	e8 74 3a 00 00       	call   c00111c5 <KePanic(char const*)>
c000d751:	83 c8 ff             	or     eax,0xffffffff
c000d754:	83 c4 1c             	add    esp,0x1c
c000d757:	c3                   	ret    

c000d758 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d758:	53                   	push   ebx
c000d759:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d75d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d761:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d765:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d76b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d771:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d777:	77 10                	ja     c000d789 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d779:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d77f:	89 d3                	mov    ebx,edx
c000d781:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d787:	72 05                	jb     c000d78e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d789:	83 c8 ff             	or     eax,0xffffffff
c000d78c:	89 c2                	mov    edx,eax
c000d78e:	5b                   	pop    ebx
c000d78f:	c3                   	ret    

c000d790 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d790:	56                   	push   esi
c000d791:	83 c8 ff             	or     eax,0xffffffff
c000d794:	53                   	push   ebx
c000d795:	89 c2                	mov    edx,eax
c000d797:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d79b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d79f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7a3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d7a9:	77 27                	ja     c000d7d2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d7ab:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d7b1:	89 d8                	mov    eax,ebx
c000d7b3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d7b9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d7be:	89 c2                	mov    edx,eax
c000d7c0:	73 10                	jae    c000d7d2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d7c2:	89 c8                	mov    eax,ecx
c000d7c4:	89 da                	mov    edx,ebx
c000d7c6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d7cc:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d7d2:	5b                   	pop    ebx
c000d7d3:	5e                   	pop    esi
c000d7d4:	c3                   	ret    
c000d7d5:	90                   	nop

c000d7d6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d7d6:	83 ec 1c             	sub    esp,0x1c
c000d7d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7ed:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7f0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d7f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d7f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7fc:	83 ec 08             	sub    esp,0x8
c000d7ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d803:	50                   	push   eax
c000d804:	e8 b7 ef ff ff       	call   c000c7c0 <Device::Device(char const*)>
c000d809:	83 c4 10             	add    esp,0x10
c000d80c:	ba 74 16 02 c0       	mov    edx,0xc0021674
c000d811:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d815:	89 10                	mov    DWORD PTR [eax],edx
c000d817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d81b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d826:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d82d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d831:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d83c:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d846:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d84a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d84e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d852:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d858:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d85e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d862:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d865:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d869:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d86f:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d879:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d87d:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d883:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d887:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d891:	90                   	nop
c000d892:	83 c4 1c             	add    esp,0x1c
c000d895:	c3                   	ret    

c000d896 <LogicalDisk::assignDriveLetter()>:
c000d896:	55                   	push   ebp
c000d897:	57                   	push   edi
c000d898:	56                   	push   esi
c000d899:	53                   	push   ebx
c000d89a:	83 ec 14             	sub    esp,0x14
c000d89d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8a1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d8a7:	b0 41                	mov    al,0x41
c000d8a9:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d8af:	84 d2                	test   dl,dl
c000d8b1:	75 02                	jne    c000d8b5 <LogicalDisk::assignDriveLetter()+0x1f>
c000d8b3:	b0 43                	mov    al,0x43
c000d8b5:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d8bb:	0f b6 ca             	movzx  ecx,dl
c000d8be:	0f be e8             	movsx  ebp,al
c000d8c1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d8c5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d8c9:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d8cf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d8d3:	3c 43                	cmp    al,0x43
c000d8d5:	75 10                	jne    c000d8e7 <LogicalDisk::assignDriveLetter()+0x51>
c000d8d7:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d8de:	75 5a                	jne    c000d93a <LogicalDisk::assignDriveLetter()+0xa4>
c000d8e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d8e5:	75 53                	jne    c000d93a <LogicalDisk::assignDriveLetter()+0xa4>
c000d8e7:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d8ea:	ba 01 00 00 00       	mov    edx,0x1
c000d8ef:	89 34 24             	mov    DWORD PTR [esp],esi
c000d8f2:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d8f5:	d3 e2                	shl    edx,cl
c000d8f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d8fb:	89 d7                	mov    edi,edx
c000d8fd:	89 d6                	mov    esi,edx
c000d8ff:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d903:	c1 ff 1f             	sar    edi,0x1f
c000d906:	21 f9                	and    ecx,edi
c000d908:	09 d1                	or     ecx,edx
c000d90a:	75 2e                	jne    c000d93a <LogicalDisk::assignDriveLetter()+0xa4>
c000d90c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d910:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d914:	09 f2                	or     edx,esi
c000d916:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d919:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000d91f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d923:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d929:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000d930:	09 fa                	or     edx,edi
c000d932:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000d938:	eb 0d                	jmp    c000d947 <LogicalDisk::assignDriveLetter()+0xb1>
c000d93a:	8d 50 01             	lea    edx,[eax+0x1]
c000d93d:	45                   	inc    ebp
c000d93e:	80 fa 5b             	cmp    dl,0x5b
c000d941:	88 d0                	mov    al,dl
c000d943:	75 8e                	jne    c000d8d3 <LogicalDisk::assignDriveLetter()+0x3d>
c000d945:	31 c0                	xor    eax,eax
c000d947:	83 c4 14             	add    esp,0x14
c000d94a:	5b                   	pop    ebx
c000d94b:	5e                   	pop    esi
c000d94c:	5f                   	pop    edi
c000d94d:	5d                   	pop    ebp
c000d94e:	c3                   	ret    
c000d94f:	90                   	nop

c000d950 <LogicalDisk::mount()>:
c000d950:	56                   	push   esi
c000d951:	53                   	push   ebx
c000d952:	53                   	push   ebx
c000d953:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d957:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000d95d:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d967:	85 db                	test   ebx,ebx
c000d969:	74 27                	je     c000d992 <LogicalDisk::mount()+0x42>
c000d96b:	51                   	push   ecx
c000d96c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d973:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d975:	83 e8 41             	sub    eax,0x41
c000d978:	50                   	push   eax
c000d979:	56                   	push   esi
c000d97a:	53                   	push   ebx
c000d97b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d97e:	83 c4 10             	add    esp,0x10
c000d981:	84 c0                	test   al,al
c000d983:	74 08                	je     c000d98d <LogicalDisk::mount()+0x3d>
c000d985:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d98b:	eb 07                	jmp    c000d994 <LogicalDisk::mount()+0x44>
c000d98d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d990:	eb d5                	jmp    c000d967 <LogicalDisk::mount()+0x17>
c000d992:	31 c0                	xor    eax,eax
c000d994:	5a                   	pop    edx
c000d995:	5b                   	pop    ebx
c000d996:	5e                   	pop    esi
c000d997:	c3                   	ret    

c000d998 <LogicalDisk::unmount()>:
c000d998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d99c:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d9a6:	c3                   	ret    
c000d9a7:	90                   	nop

c000d9a8 <LogicalDisk::eject()>:
c000d9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9ac:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d9b2:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d9b8:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d9bb:	90                   	nop

c000d9bc <LogicalDisk::unassignDriveLetter()>:
c000d9bc:	57                   	push   edi
c000d9bd:	56                   	push   esi
c000d9be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d9c2:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d9c9:	85 c9                	test   ecx,ecx
c000d9cb:	75 0f                	jne    c000d9dc <LogicalDisk::unassignDriveLetter()+0x20>
c000d9cd:	c7 44 24 0c 4c 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc002164c
c000d9d5:	5e                   	pop    esi
c000d9d6:	5f                   	pop    edi
c000d9d7:	e9 e9 37 00 00       	jmp    c00111c5 <KePanic(char const*)>
c000d9dc:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d9e3:	83 e9 41             	sub    ecx,0x41
c000d9e6:	b8 01 00 00 00       	mov    eax,0x1
c000d9eb:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000d9f6:	d3 e0                	shl    eax,cl
c000d9f8:	89 c7                	mov    edi,eax
c000d9fa:	f7 d0                	not    eax
c000d9fc:	c1 ff 1f             	sar    edi,0x1f
c000d9ff:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000da05:	89 fe                	mov    esi,edi
c000da07:	f7 d6                	not    esi
c000da09:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000da0f:	5e                   	pop    esi
c000da10:	5f                   	pop    edi
c000da11:	c3                   	ret    

c000da12 <LogicalDisk::read(unsigned long long, int, void*)>:
c000da12:	57                   	push   edi
c000da13:	56                   	push   esi
c000da14:	53                   	push   ebx
c000da15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da1d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da25:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da2b:	77 41                	ja     c000da6e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000da2d:	99                   	cdq    
c000da2e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da34:	01 c8                	add    eax,ecx
c000da36:	11 da                	adc    edx,ebx
c000da38:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da3e:	19 d7                	sbb    edi,edx
c000da40:	72 33                	jb     c000da75 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000da42:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da48:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da52:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da56:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da5c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da66:	5b                   	pop    ebx
c000da67:	5e                   	pop    esi
c000da68:	5f                   	pop    edi
c000da69:	e9 d4 0a 00 00       	jmp    c000e542 <VCache::read(unsigned long long, int, void*)>
c000da6e:	b8 05 00 00 00       	mov    eax,0x5
c000da73:	eb 05                	jmp    c000da7a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000da75:	b8 07 00 00 00       	mov    eax,0x7
c000da7a:	5b                   	pop    ebx
c000da7b:	5e                   	pop    esi
c000da7c:	5f                   	pop    edi
c000da7d:	c3                   	ret    

c000da7e <LogicalDisk::write(unsigned long long, int, void*)>:
c000da7e:	57                   	push   edi
c000da7f:	56                   	push   esi
c000da80:	53                   	push   ebx
c000da81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da89:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da91:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da97:	77 41                	ja     c000dada <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000da99:	99                   	cdq    
c000da9a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000daa0:	01 c8                	add    eax,ecx
c000daa2:	11 da                	adc    edx,ebx
c000daa4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000daaa:	19 d7                	sbb    edi,edx
c000daac:	72 33                	jb     c000dae1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000daae:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dab4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000daba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dabe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dac2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dac8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dace:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dad2:	5b                   	pop    ebx
c000dad3:	5e                   	pop    esi
c000dad4:	5f                   	pop    edi
c000dad5:	e9 6e 09 00 00       	jmp    c000e448 <VCache::write(unsigned long long, int, void*)>
c000dada:	b8 05 00 00 00       	mov    eax,0x5
c000dadf:	eb 05                	jmp    c000dae6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dae1:	b8 07 00 00 00       	mov    eax,0x7
c000dae6:	5b                   	pop    ebx
c000dae7:	5e                   	pop    esi
c000dae8:	5f                   	pop    edi
c000dae9:	c3                   	ret    
c000daea:	66 90                	xchg   ax,ax

c000daec <Mouse::Mouse(char const*)>:
c000daec:	83 ec 0c             	sub    esp,0xc
c000daef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf3:	83 ec 08             	sub    esp,0x8
c000daf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dafa:	50                   	push   eax
c000dafb:	e8 c0 ec ff ff       	call   c000c7c0 <Device::Device(char const*)>
c000db00:	83 c4 10             	add    esp,0x10
c000db03:	ba a0 16 02 c0       	mov    edx,0xc00216a0
c000db08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db0c:	89 10                	mov    DWORD PTR [eax],edx
c000db0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db12:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000db1c:	90                   	nop
c000db1d:	83 c4 0c             	add    esp,0xc
c000db20:	c3                   	ret    
c000db21:	90                   	nop
c000db22:	66 90                	xchg   ax,ax

c000db24 <Mouse::~Mouse()>:
c000db24:	83 ec 0c             	sub    esp,0xc
c000db27:	ba a0 16 02 c0       	mov    edx,0xc00216a0
c000db2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db30:	89 10                	mov    DWORD PTR [eax],edx
c000db32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db36:	83 ec 0c             	sub    esp,0xc
c000db39:	50                   	push   eax
c000db3a:	e8 eb e9 ff ff       	call   c000c52a <Device::~Device()>
c000db3f:	83 c4 10             	add    esp,0x10
c000db42:	90                   	nop
c000db43:	83 c4 0c             	add    esp,0xc
c000db46:	c3                   	ret    
c000db47:	90                   	nop

c000db48 <Mouse::~Mouse()>:
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	83 ec 0c             	sub    esp,0xc
c000db4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db52:	e8 cd ff ff ff       	call   c000db24 <Mouse::~Mouse()>
c000db57:	83 c4 10             	add    esp,0x10
c000db5a:	83 ec 08             	sub    esp,0x8
c000db5d:	68 58 01 00 00       	push   0x158
c000db62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db66:	e8 a1 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000db6b:	83 c4 10             	add    esp,0x10
c000db6e:	83 c4 0c             	add    esp,0xc
c000db71:	c3                   	ret    

c000db72 <NIC::getMAC()>:
c000db72:	31 c0                	xor    eax,eax
c000db74:	31 d2                	xor    edx,edx
c000db76:	c3                   	ret    
c000db77:	90                   	nop

c000db78 <NIC::write(int, unsigned char*, int*)>:
c000db78:	b8 01 00 00 00       	mov    eax,0x1
c000db7d:	c3                   	ret    

c000db7e <NIC::NIC(char const*)>:
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db85:	83 ec 08             	sub    esp,0x8
c000db88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8c:	50                   	push   eax
c000db8d:	e8 2e ec ff ff       	call   c000c7c0 <Device::Device(char const*)>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba cc 16 02 c0       	mov    edx,0xc00216cc
c000db9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db9e:	89 10                	mov    DWORD PTR [eax],edx
c000dba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dbae:	90                   	nop
c000dbaf:	83 c4 0c             	add    esp,0xc
c000dbb2:	c3                   	ret    
c000dbb3:	90                   	nop

c000dbb4 <NIC::~NIC()>:
c000dbb4:	83 ec 0c             	sub    esp,0xc
c000dbb7:	ba cc 16 02 c0       	mov    edx,0xc00216cc
c000dbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc0:	89 10                	mov    DWORD PTR [eax],edx
c000dbc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc6:	83 ec 0c             	sub    esp,0xc
c000dbc9:	50                   	push   eax
c000dbca:	e8 5b e9 ff ff       	call   c000c52a <Device::~Device()>
c000dbcf:	83 c4 10             	add    esp,0x10
c000dbd2:	90                   	nop
c000dbd3:	83 c4 0c             	add    esp,0xc
c000dbd6:	c3                   	ret    
c000dbd7:	90                   	nop

c000dbd8 <NIC::~NIC()>:
c000dbd8:	83 ec 0c             	sub    esp,0xc
c000dbdb:	83 ec 0c             	sub    esp,0xc
c000dbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe2:	e8 cd ff ff ff       	call   c000dbb4 <NIC::~NIC()>
c000dbe7:	83 c4 10             	add    esp,0x10
c000dbea:	83 ec 08             	sub    esp,0x8
c000dbed:	68 58 01 00 00       	push   0x158
c000dbf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf6:	e8 11 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dbfb:	83 c4 10             	add    esp,0x10
c000dbfe:	83 c4 0c             	add    esp,0xc
c000dc01:	c3                   	ret    

c000dc02 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dc02:	55                   	push   ebp
c000dc03:	57                   	push   edi
c000dc04:	56                   	push   esi
c000dc05:	53                   	push   ebx
c000dc06:	81 ec 28 01 00 00    	sub    esp,0x128
c000dc0c:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dc13:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dc1a:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dc21:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dc28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc2c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc30:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc37:	e8 80 ec ff ff       	call   c000c8bc <Device::getName()>
c000dc3c:	5a                   	pop    edx
c000dc3d:	59                   	pop    ecx
c000dc3e:	50                   	push   eax
c000dc3f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dc43:	55                   	push   ebp
c000dc44:	e8 07 2a ff ff       	call   c0000650 <strcpy>
c000dc49:	5b                   	pop    ebx
c000dc4a:	58                   	pop    eax
c000dc4b:	68 f8 16 02 c0       	push   0xc00216f8
c000dc50:	55                   	push   ebp
c000dc51:	e8 1a 2c ff ff       	call   c0000870 <strcat>
c000dc56:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dc5d:	e8 71 9e ff ff       	call   c0007ad3 <malloc>
c000dc62:	83 c4 0c             	add    esp,0xc
c000dc65:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc69:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc6d:	89 c3                	mov    ebx,eax
c000dc6f:	57                   	push   edi
c000dc70:	56                   	push   esi
c000dc71:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dc78:	55                   	push   ebp
c000dc79:	50                   	push   eax
c000dc7a:	e8 57 fb ff ff       	call   c000d7d6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dc7f:	83 c4 14             	add    esp,0x14
c000dc82:	53                   	push   ebx
c000dc83:	e8 0e fc ff ff       	call   c000d896 <LogicalDisk::assignDriveLetter()>
c000dc88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc8b:	e8 c0 fc ff ff       	call   c000d950 <LogicalDisk::mount()>
c000dc90:	58                   	pop    eax
c000dc91:	5a                   	pop    edx
c000dc92:	53                   	push   ebx
c000dc93:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc9a:	e8 89 e9 ff ff       	call   c000c628 <Device::addChild(Device*)>
c000dc9f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dca5:	5b                   	pop    ebx
c000dca6:	5e                   	pop    esi
c000dca7:	5f                   	pop    edi
c000dca8:	5d                   	pop    ebp
c000dca9:	c3                   	ret    

c000dcaa <createPartitionsForDisk(PhysicalDisk*)>:
c000dcaa:	55                   	push   ebp
c000dcab:	57                   	push   edi
c000dcac:	56                   	push   esi
c000dcad:	53                   	push   ebx
c000dcae:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dcb4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dcbb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dcc1:	3d 00 02 00 00       	cmp    eax,0x200
c000dcc6:	74 27                	je     c000dcef <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dcc8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dcce:	83 ec 10             	sub    esp,0x10
c000dcd1:	99                   	cdq    
c000dcd2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dcd8:	52                   	push   edx
c000dcd9:	50                   	push   eax
c000dcda:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dcde:	c1 e6 0a             	shl    esi,0xa
c000dce1:	89 fd                	mov    ebp,edi
c000dce3:	55                   	push   ebp
c000dce4:	56                   	push   esi
c000dce5:	e8 96 14 01 00       	call   c001f180 <__udivdi3>
c000dcea:	e9 b9 00 00 00       	jmp    c000dda8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dcef:	83 ec 0c             	sub    esp,0xc
c000dcf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcf4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dcf8:	56                   	push   esi
c000dcf9:	6a 01                	push   0x1
c000dcfb:	6a 00                	push   0x0
c000dcfd:	6a 00                	push   0x0
c000dcff:	53                   	push   ebx
c000dd00:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dd03:	83 c4 20             	add    esp,0x20
c000dd06:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dd0e:	75 0a                	jne    c000dd1a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dd10:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dd18:	74 2c                	je     c000dd46 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dd1a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd20:	83 ec 10             	sub    esp,0x10
c000dd23:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd29:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd2f:	89 f7                	mov    edi,esi
c000dd31:	c1 ff 1f             	sar    edi,0x1f
c000dd34:	57                   	push   edi
c000dd35:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd39:	56                   	push   esi
c000dd3a:	c1 e0 0a             	shl    eax,0xa
c000dd3d:	52                   	push   edx
c000dd3e:	50                   	push   eax
c000dd3f:	e8 3c 14 01 00       	call   c001f180 <__udivdi3>
c000dd44:	eb 62                	jmp    c000dda8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd46:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dd4d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dd54:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dd5b:	89 cf                	mov    edi,ecx
c000dd5d:	83 e2 7f             	and    edx,0x7f
c000dd60:	83 e7 7f             	and    edi,0x7f
c000dd63:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dd66:	83 e0 7f             	and    eax,0x7f
c000dd69:	8d 14 01             	lea    edx,[ecx+eax*1]
c000dd6c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000dd73:	83 e0 7f             	and    eax,0x7f
c000dd76:	01 d0                	add    eax,edx
c000dd78:	84 c0                	test   al,al
c000dd7a:	89 c5                	mov    ebp,eax
c000dd7c:	74 41                	je     c000ddbf <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dd7e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd84:	83 ec 10             	sub    esp,0x10
c000dd87:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd8d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd93:	89 f7                	mov    edi,esi
c000dd95:	c1 ff 1f             	sar    edi,0x1f
c000dd98:	57                   	push   edi
c000dd99:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd9d:	56                   	push   esi
c000dd9e:	c1 e0 0a             	shl    eax,0xa
c000dda1:	52                   	push   edx
c000dda2:	50                   	push   eax
c000dda3:	e8 d8 13 01 00       	call   c001f180 <__udivdi3>
c000dda8:	83 c4 14             	add    esp,0x14
c000ddab:	52                   	push   edx
c000ddac:	50                   	push   eax
c000ddad:	6a 00                	push   0x0
c000ddaf:	6a 00                	push   0x0
c000ddb1:	53                   	push   ebx
c000ddb2:	e8 4b fe ff ff       	call   c000dc02 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ddb7:	83 c4 20             	add    esp,0x20
c000ddba:	e9 73 01 00 00       	jmp    c000df32 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ddbf:	89 f0                	mov    eax,esi
c000ddc1:	31 c9                	xor    ecx,ecx
c000ddc3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ddca:	75 02                	jne    c000ddce <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ddcc:	89 cd                	mov    ebp,ecx
c000ddce:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ddd6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000dddd:	83 c0 10             	add    eax,0x10
c000dde0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000dde8:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000ddef:	c1 e2 08             	shl    edx,0x8
c000ddf2:	c1 e6 10             	shl    esi,0x10
c000ddf5:	09 f2                	or     edx,esi
c000ddf7:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000ddfe:	09 f2                	or     edx,esi
c000de00:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000de07:	c1 e6 18             	shl    esi,0x18
c000de0a:	09 f2                	or     edx,esi
c000de0c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000de13:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000de17:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000de1e:	c1 e6 10             	shl    esi,0x10
c000de21:	c1 e2 08             	shl    edx,0x8
c000de24:	09 f2                	or     edx,esi
c000de26:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000de2d:	09 f2                	or     edx,esi
c000de2f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000de36:	c1 e6 18             	shl    esi,0x18
c000de39:	09 f2                	or     edx,esi
c000de3b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000de3f:	41                   	inc    ecx
c000de40:	83 f9 04             	cmp    ecx,0x4
c000de43:	0f 85 7a ff ff ff    	jne    c000ddc3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000de49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de4d:	83 f0 01             	xor    eax,0x1
c000de50:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000de54:	75 4f                	jne    c000dea5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de5a:	83 f0 01             	xor    eax,0x1
c000de5d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000de61:	75 42                	jne    c000dea5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de63:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de69:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000de71:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de77:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000de7f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de85:	89 f7                	mov    edi,esi
c000de87:	c1 ff 1f             	sar    edi,0x1f
c000de8a:	57                   	push   edi
c000de8b:	56                   	push   esi
c000de8c:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de90:	52                   	push   edx
c000de91:	c1 e0 0a             	shl    eax,0xa
c000de94:	50                   	push   eax
c000de95:	e8 e6 12 01 00       	call   c001f180 <__udivdi3>
c000de9a:	83 c4 10             	add    esp,0x10
c000de9d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dea1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dea5:	89 e8                	mov    eax,ebp
c000dea7:	0f b6 e8             	movzx  ebp,al
c000deaa:	85 ed                	test   ebp,ebp
c000deac:	74 50                	je     c000defe <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000deae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deb2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000deb6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000deba:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dec6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000deca:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dece:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ded6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000deda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dede:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000dee2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dee6:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000deea:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000deee:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000def2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000def6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000defa:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000defe:	31 ed                	xor    ebp,ebp
c000df00:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000df04:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000df08:	89 f8                	mov    eax,edi
c000df0a:	09 f0                	or     eax,esi
c000df0c:	74 1e                	je     c000df2c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000df0e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000df12:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000df16:	89 d1                	mov    ecx,edx
c000df18:	09 c1                	or     ecx,eax
c000df1a:	74 10                	je     c000df2c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000df1c:	83 ec 0c             	sub    esp,0xc
c000df1f:	57                   	push   edi
c000df20:	56                   	push   esi
c000df21:	52                   	push   edx
c000df22:	50                   	push   eax
c000df23:	53                   	push   ebx
c000df24:	e8 d9 fc ff ff       	call   c000dc02 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000df29:	83 c4 20             	add    esp,0x20
c000df2c:	45                   	inc    ebp
c000df2d:	83 fd 04             	cmp    ebp,0x4
c000df30:	75 ce                	jne    c000df00 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000df32:	81 c4 5c 02 00 00    	add    esp,0x25c
c000df38:	5b                   	pop    ebx
c000df39:	5e                   	pop    esi
c000df3a:	5f                   	pop    edi
c000df3b:	5d                   	pop    ebp
c000df3c:	c3                   	ret    
c000df3d:	66 90                	xchg   ax,ax
c000df3f:	90                   	nop

c000df40 <Serial::Serial(char const*)>:
c000df40:	83 ec 0c             	sub    esp,0xc
c000df43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df47:	83 ec 08             	sub    esp,0x8
c000df4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df4e:	50                   	push   eax
c000df4f:	e8 6c e8 ff ff       	call   c000c7c0 <Device::Device(char const*)>
c000df54:	83 c4 10             	add    esp,0x10
c000df57:	ba 0c 17 02 c0       	mov    edx,0xc002170c
c000df5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df60:	89 10                	mov    DWORD PTR [eax],edx
c000df62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df66:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000df70:	90                   	nop
c000df71:	83 c4 0c             	add    esp,0xc
c000df74:	c3                   	ret    
c000df75:	90                   	nop
c000df76:	66 90                	xchg   ax,ax

c000df78 <Serial::~Serial()>:
c000df78:	83 ec 0c             	sub    esp,0xc
c000df7b:	ba 0c 17 02 c0       	mov    edx,0xc002170c
c000df80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df84:	89 10                	mov    DWORD PTR [eax],edx
c000df86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8a:	83 ec 0c             	sub    esp,0xc
c000df8d:	50                   	push   eax
c000df8e:	e8 97 e5 ff ff       	call   c000c52a <Device::~Device()>
c000df93:	83 c4 10             	add    esp,0x10
c000df96:	90                   	nop
c000df97:	83 c4 0c             	add    esp,0xc
c000df9a:	c3                   	ret    
c000df9b:	90                   	nop

c000df9c <Serial::~Serial()>:
c000df9c:	83 ec 0c             	sub    esp,0xc
c000df9f:	83 ec 0c             	sub    esp,0xc
c000dfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa6:	e8 cd ff ff ff       	call   c000df78 <Serial::~Serial()>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	83 ec 08             	sub    esp,0x8
c000dfb1:	68 58 01 00 00       	push   0x158
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 4d c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dfbf:	83 c4 10             	add    esp,0x10
c000dfc2:	83 c4 0c             	add    esp,0xc
c000dfc5:	c3                   	ret    
c000dfc6:	66 90                	xchg   ax,ax

c000dfc8 <Timer::Timer(char const*)>:
c000dfc8:	83 ec 0c             	sub    esp,0xc
c000dfcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcf:	83 ec 08             	sub    esp,0x8
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	50                   	push   eax
c000dfd7:	e8 e4 e7 ff ff       	call   c000c7c0 <Device::Device(char const*)>
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	ba 50 17 02 c0       	mov    edx,0xc0021750
c000dfe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe8:	89 10                	mov    DWORD PTR [eax],edx
c000dfea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfee:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000dff8:	90                   	nop
c000dff9:	83 c4 0c             	add    esp,0xc
c000dffc:	c3                   	ret    
c000dffd:	90                   	nop
c000dffe:	66 90                	xchg   ax,ax

c000e000 <Timer::~Timer()>:
c000e000:	83 ec 0c             	sub    esp,0xc
c000e003:	ba 50 17 02 c0       	mov    edx,0xc0021750
c000e008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00c:	89 10                	mov    DWORD PTR [eax],edx
c000e00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e012:	83 ec 0c             	sub    esp,0xc
c000e015:	50                   	push   eax
c000e016:	e8 0f e5 ff ff       	call   c000c52a <Device::~Device()>
c000e01b:	83 c4 10             	add    esp,0x10
c000e01e:	90                   	nop
c000e01f:	83 c4 0c             	add    esp,0xc
c000e022:	c3                   	ret    
c000e023:	90                   	nop

c000e024 <Timer::~Timer()>:
c000e024:	83 ec 0c             	sub    esp,0xc
c000e027:	83 ec 0c             	sub    esp,0xc
c000e02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02e:	e8 cd ff ff ff       	call   c000e000 <Timer::~Timer()>
c000e033:	83 c4 10             	add    esp,0x10
c000e036:	83 ec 08             	sub    esp,0x8
c000e039:	68 5c 01 00 00       	push   0x15c
c000e03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e042:	e8 c5 c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e047:	83 c4 10             	add    esp,0x10
c000e04a:	83 c4 0c             	add    esp,0xc
c000e04d:	c3                   	ret    

c000e04e <Timer::read()>:
c000e04e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e052:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e058:	c3                   	ret    

c000e059 <setupTimer(int)>:
c000e059:	53                   	push   ebx
c000e05a:	83 ec 14             	sub    esp,0x14
c000e05d:	68 5c 01 00 00       	push   0x15c
c000e062:	e8 6c 9a ff ff       	call   c0007ad3 <malloc>
c000e067:	89 04 24             	mov    DWORD PTR [esp],eax
c000e06a:	89 c3                	mov    ebx,eax
c000e06c:	e8 7b 09 01 00       	call   c001e9ec <PIT::PIT()>
c000e071:	58                   	pop    eax
c000e072:	5a                   	pop    edx
c000e073:	53                   	push   ebx
c000e074:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e07a:	e8 a9 e5 ff ff       	call   c000c628 <Device::addChild(Device*)>
c000e07f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e081:	6a 00                	push   0x0
c000e083:	6a 00                	push   0x0
c000e085:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e089:	53                   	push   ebx
c000e08a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e08d:	83 c4 28             	add    esp,0x28
c000e090:	89 d8                	mov    eax,ebx
c000e092:	5b                   	pop    ebx
c000e093:	c3                   	ret    

c000e094 <timerHandler(unsigned int)>:
c000e094:	56                   	push   esi
c000e095:	53                   	push   ebx
c000e096:	51                   	push   ecx
c000e097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09b:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e0a1:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e0a8:	0f 84 4a 01 00 00    	je     c000e1f8 <timerHandler(unsigned int)+0x164>
c000e0ae:	fa                   	cli    
c000e0af:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e0b5:	83 ec 0c             	sub    esp,0xc
c000e0b8:	68 d8 96 02 c0       	push   0xc00296d8
c000e0bd:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e0c3:	e8 88 16 01 00       	call   c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e0c8:	83 c4 10             	add    esp,0x10
c000e0cb:	84 c0                	test   al,al
c000e0cd:	0f 85 a1 00 00 00    	jne    c000e174 <timerHandler(unsigned int)+0xe0>
c000e0d3:	83 ec 0c             	sub    esp,0xc
c000e0d6:	68 d8 96 02 c0       	push   0xc00296d8
c000e0db:	e8 8c 16 01 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 c6                	mov    esi,eax
c000e0e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e0e8:	83 ec 0c             	sub    esp,0xc
c000e0eb:	68 d8 96 02 c0       	push   0xc00296d8
c000e0f0:	e8 77 16 01 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0f5:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e0fc:	89 c3                	mov    ebx,eax
c000e0fe:	e8 71 16 01 00       	call   c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e103:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e106:	83 c4 10             	add    esp,0x10
c000e109:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e10f:	77 23                	ja     c000e134 <timerHandler(unsigned int)+0xa0>
c000e111:	83 ec 0c             	sub    esp,0xc
c000e114:	53                   	push   ebx
c000e115:	e8 a6 7e 00 00       	call   c0015fc0 <unblockTask(ThreadControlBlock*)>
c000e11a:	83 c4 10             	add    esp,0x10
c000e11d:	39 de                	cmp    esi,ebx
c000e11f:	75 27                	jne    c000e148 <timerHandler(unsigned int)+0xb4>
c000e121:	83 ec 0c             	sub    esp,0xc
c000e124:	68 d8 96 02 c0       	push   0xc00296d8
c000e129:	e8 3e 16 01 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e12e:	89 c6                	mov    esi,eax
c000e130:	eb 12                	jmp    c000e144 <timerHandler(unsigned int)+0xb0>
c000e132:	66 90                	xchg   ax,ax
c000e134:	52                   	push   edx
c000e135:	52                   	push   edx
c000e136:	53                   	push   ebx
c000e137:	68 d8 96 02 c0       	push   0xc00296d8
c000e13c:	e8 ef 16 01 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e141:	8d 76 00             	lea    esi,[esi+0x0]
c000e144:	83 c4 10             	add    esp,0x10
c000e147:	90                   	nop
c000e148:	83 ec 0c             	sub    esp,0xc
c000e14b:	68 d8 96 02 c0       	push   0xc00296d8
c000e150:	e8 fb 15 01 00       	call   c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e155:	83 c4 10             	add    esp,0x10
c000e158:	84 c0                	test   al,al
c000e15a:	75 18                	jne    c000e174 <timerHandler(unsigned int)+0xe0>
c000e15c:	83 ec 0c             	sub    esp,0xc
c000e15f:	68 d8 96 02 c0       	push   0xc00296d8
c000e164:	e8 03 16 01 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	39 f0                	cmp    eax,esi
c000e16e:	0f 85 74 ff ff ff    	jne    c000e0e8 <timerHandler(unsigned int)+0x54>
c000e174:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e179:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e17d:	74 41                	je     c000e1c0 <timerHandler(unsigned int)+0x12c>
c000e17f:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e186:	74 38                	je     c000e1c0 <timerHandler(unsigned int)+0x12c>
c000e188:	fa                   	cli    
c000e189:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e18f:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e194:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e19a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e19d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e1a3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e1a6:	72 08                	jb     c000e1b0 <timerHandler(unsigned int)+0x11c>
c000e1a8:	e8 1b 79 00 00       	call   c0015ac8 <schedule()>
c000e1ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e1b0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e1b5:	48                   	dec    eax
c000e1b6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e1bb:	75 03                	jne    c000e1c0 <timerHandler(unsigned int)+0x12c>
c000e1bd:	fb                   	sti    
c000e1be:	66 90                	xchg   ax,ax
c000e1c0:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e1c5:	48                   	dec    eax
c000e1c6:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e1cb:	75 1b                	jne    c000e1e8 <timerHandler(unsigned int)+0x154>
c000e1cd:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e1d4:	74 12                	je     c000e1e8 <timerHandler(unsigned int)+0x154>
c000e1d6:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e1e0:	e8 e3 78 00 00       	call   c0015ac8 <schedule()>
c000e1e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1e8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e1ed:	48                   	dec    eax
c000e1ee:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e1f3:	75 03                	jne    c000e1f8 <timerHandler(unsigned int)+0x164>
c000e1f5:	fb                   	sti    
c000e1f6:	66 90                	xchg   ax,ax
c000e1f8:	58                   	pop    eax
c000e1f9:	5b                   	pop    ebx
c000e1fa:	5e                   	pop    esi
c000e1fb:	c3                   	ret    

c000e1fc <VCache::VCache(PhysicalDisk*)>:
c000e1fc:	53                   	push   ebx
c000e1fd:	83 ec 18             	sub    esp,0x18
c000e200:	ba 80 17 02 c0       	mov    edx,0xc0021780
c000e205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e209:	89 10                	mov    DWORD PTR [eax],edx
c000e20b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e20f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e216:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e21a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e225:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e22c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e233:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e237:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e23e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e245:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e249:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e254:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e25c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e263:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e26a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e26e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e272:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e276:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e27a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e27e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e286:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e28d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e295:	83 ec 0c             	sub    esp,0xc
c000e298:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e29c:	e8 32 98 ff ff       	call   c0007ad3 <malloc>
c000e2a1:	83 c4 10             	add    esp,0x10
c000e2a4:	89 c3                	mov    ebx,eax
c000e2a6:	83 ec 0c             	sub    esp,0xc
c000e2a9:	53                   	push   ebx
c000e2aa:	e8 b9 75 00 00       	call   c0015868 <Mutex::Mutex()>
c000e2af:	83 c4 10             	add    esp,0x10
c000e2b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2b6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e2b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e2c1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e2c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2c8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e2cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2d3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e2d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2dd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2e4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e2ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e2f4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e2f7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e2fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e302:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e306:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e30c:	05 00 02 00 00       	add    eax,0x200
c000e311:	c1 e0 03             	shl    eax,0x3
c000e314:	83 ec 0c             	sub    esp,0xc
c000e317:	50                   	push   eax
c000e318:	e8 b6 97 ff ff       	call   c0007ad3 <malloc>
c000e31d:	83 c4 10             	add    esp,0x10
c000e320:	89 c2                	mov    edx,eax
c000e322:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e326:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e329:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e32d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e334:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e338:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e33c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e340:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e346:	89 d0                	mov    eax,edx
c000e348:	c1 e0 02             	shl    eax,0x2
c000e34b:	01 d0                	add    eax,edx
c000e34d:	c1 e0 04             	shl    eax,0x4
c000e350:	83 ec 0c             	sub    esp,0xc
c000e353:	50                   	push   eax
c000e354:	e8 7a 97 ff ff       	call   c0007ad3 <malloc>
c000e359:	83 c4 10             	add    esp,0x10
c000e35c:	89 c2                	mov    edx,eax
c000e35e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e362:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e365:	90                   	nop
c000e366:	83 c4 18             	add    esp,0x18
c000e369:	5b                   	pop    ebx
c000e36a:	c3                   	ret    
c000e36b:	90                   	nop

c000e36c <VCache::invalidateReadBuffer()>:
c000e36c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e370:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e376:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e37a:	c3                   	ret    
c000e37b:	90                   	nop

c000e37c <VCache::writeWriteBuffer()>:
c000e37c:	53                   	push   ebx
c000e37d:	83 ec 08             	sub    esp,0x8
c000e380:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e384:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e388:	74 1e                	je     c000e3a8 <VCache::writeWriteBuffer()+0x2c>
c000e38a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e38d:	83 ec 0c             	sub    esp,0xc
c000e390:	8b 10                	mov    edx,DWORD PTR [eax]
c000e392:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e395:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e398:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e39b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e39e:	50                   	push   eax
c000e39f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e3a2:	83 c4 20             	add    esp,0x20
c000e3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3a8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e3af:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e3b6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e3ba:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e3c1:	83 c4 08             	add    esp,0x8
c000e3c4:	5b                   	pop    ebx
c000e3c5:	c3                   	ret    
c000e3c6:	66 90                	xchg   ax,ax

c000e3c8 <VCache::~VCache()>:
c000e3c8:	83 ec 0c             	sub    esp,0xc
c000e3cb:	ba 80 17 02 c0       	mov    edx,0xc0021780
c000e3d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d4:	89 10                	mov    DWORD PTR [eax],edx
c000e3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3da:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e3dd:	0f b6 c0             	movzx  eax,al
c000e3e0:	85 c0                	test   eax,eax
c000e3e2:	74 10                	je     c000e3f4 <VCache::~VCache()+0x2c>
c000e3e4:	83 ec 0c             	sub    esp,0xc
c000e3e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3eb:	e8 8c ff ff ff       	call   c000e37c <VCache::writeWriteBuffer()>
c000e3f0:	83 c4 10             	add    esp,0x10
c000e3f3:	90                   	nop
c000e3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	50                   	push   eax
c000e3ff:	e8 df 96 ff ff       	call   c0007ae3 <free>
c000e404:	83 c4 10             	add    esp,0x10
c000e407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e40e:	83 ec 0c             	sub    esp,0xc
c000e411:	50                   	push   eax
c000e412:	e8 cc 96 ff ff       	call   c0007ae3 <free>
c000e417:	83 c4 10             	add    esp,0x10
c000e41a:	90                   	nop
c000e41b:	83 c4 0c             	add    esp,0xc
c000e41e:	c3                   	ret    
c000e41f:	90                   	nop

c000e420 <VCache::~VCache()>:
c000e420:	83 ec 0c             	sub    esp,0xc
c000e423:	83 ec 0c             	sub    esp,0xc
c000e426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42a:	e8 99 ff ff ff       	call   c000e3c8 <VCache::~VCache()>
c000e42f:	83 c4 10             	add    esp,0x10
c000e432:	83 ec 08             	sub    esp,0x8
c000e435:	6a 44                	push   0x44
c000e437:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e43b:	e8 cc c3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e440:	83 c4 10             	add    esp,0x10
c000e443:	83 c4 0c             	add    esp,0xc
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <VCache::write(unsigned long long, int, void*)>:
c000e448:	55                   	push   ebp
c000e449:	57                   	push   edi
c000e44a:	56                   	push   esi
c000e44b:	53                   	push   ebx
c000e44c:	83 ec 1c             	sub    esp,0x1c
c000e44f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e453:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e457:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e45b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e45f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e463:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e467:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e46b:	74 0f                	je     c000e47c <VCache::write(unsigned long long, int, void*)+0x34>
c000e46d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e471:	53                   	push   ebx
c000e472:	e8 f5 fe ff ff       	call   c000e36c <VCache::invalidateReadBuffer()>
c000e477:	58                   	pop    eax
c000e478:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e47c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e480:	74 66                	je     c000e4e8 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e482:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e485:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e489:	99                   	cdq    
c000e48a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e48d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e490:	89 c6                	mov    esi,eax
c000e492:	31 ce                	xor    esi,ecx
c000e494:	89 d0                	mov    eax,edx
c000e496:	31 e8                	xor    eax,ebp
c000e498:	09 c6                	or     esi,eax
c000e49a:	75 38                	jne    c000e4d4 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e49c:	83 ff 01             	cmp    edi,0x1
c000e49f:	75 33                	jne    c000e4d4 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e4a1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e4a8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4ac:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e4b2:	0f af f9             	imul   edi,ecx
c000e4b5:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e4b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4ba:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e4bd:	40                   	inc    eax
c000e4be:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e4c1:	83 f8 50             	cmp    eax,0x50
c000e4c4:	75 72                	jne    c000e538 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e4c6:	83 ec 0c             	sub    esp,0xc
c000e4c9:	53                   	push   ebx
c000e4ca:	e8 ad fe ff ff       	call   c000e37c <VCache::writeWriteBuffer()>
c000e4cf:	83 c4 10             	add    esp,0x10
c000e4d2:	eb 64                	jmp    c000e538 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e4d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e4d8:	83 ec 0c             	sub    esp,0xc
c000e4db:	53                   	push   ebx
c000e4dc:	e8 9b fe ff ff       	call   c000e37c <VCache::writeWriteBuffer()>
c000e4e1:	83 c4 10             	add    esp,0x10
c000e4e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4e8:	83 ff 4f             	cmp    edi,0x4f
c000e4eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4ee:	7f 20                	jg     c000e510 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e4f0:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e4f3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4f7:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e4fa:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e4fd:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e500:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e504:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e50a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e50c:	eb 2a                	jmp    c000e538 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e50e:	66 90                	xchg   ax,ax
c000e510:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e514:	8b 10                	mov    edx,DWORD PTR [eax]
c000e516:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e51a:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e51e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e522:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e526:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e52a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e52d:	83 c4 1c             	add    esp,0x1c
c000e530:	5b                   	pop    ebx
c000e531:	5e                   	pop    esi
c000e532:	5f                   	pop    edi
c000e533:	5d                   	pop    ebp
c000e534:	ff e0                	jmp    eax
c000e536:	66 90                	xchg   ax,ax
c000e538:	83 c4 1c             	add    esp,0x1c
c000e53b:	31 c0                	xor    eax,eax
c000e53d:	5b                   	pop    ebx
c000e53e:	5e                   	pop    esi
c000e53f:	5f                   	pop    edi
c000e540:	5d                   	pop    ebp
c000e541:	c3                   	ret    

c000e542 <VCache::read(unsigned long long, int, void*)>:
c000e542:	55                   	push   ebp
c000e543:	57                   	push   edi
c000e544:	56                   	push   esi
c000e545:	53                   	push   ebx
c000e546:	83 ec 1c             	sub    esp,0x1c
c000e549:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e54d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e551:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e555:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e559:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e55d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e561:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e565:	74 0d                	je     c000e574 <VCache::read(unsigned long long, int, void*)+0x32>
c000e567:	83 ec 0c             	sub    esp,0xc
c000e56a:	57                   	push   edi
c000e56b:	e8 0c fe ff ff       	call   c000e37c <VCache::writeWriteBuffer()>
c000e570:	83 c4 10             	add    esp,0x10
c000e573:	90                   	nop
c000e574:	83 fd 01             	cmp    ebp,0x1
c000e577:	0f 85 93 00 00 00    	jne    c000e610 <VCache::read(unsigned long long, int, void*)+0xce>
c000e57d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e580:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e587:	89 04 24             	mov    DWORD PTR [esp],eax
c000e58a:	0f 85 80 00 00 00    	jne    c000e610 <VCache::read(unsigned long long, int, void*)+0xce>
c000e590:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e593:	89 cd                	mov    ebp,ecx
c000e595:	f7 dd                	neg    ebp
c000e597:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e59b:	89 e8                	mov    eax,ebp
c000e59d:	21 dd                	and    ebp,ebx
c000e59f:	c1 f8 1f             	sar    eax,0x1f
c000e5a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5a6:	89 e8                	mov    eax,ebp
c000e5a8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e5ac:	21 f5                	and    ebp,esi
c000e5ae:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e5b2:	89 ea                	mov    edx,ebp
c000e5b4:	74 2e                	je     c000e5e4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5b6:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e5b9:	75 29                	jne    c000e5e4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5bb:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e5be:	75 24                	jne    c000e5e4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5c0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e5c3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5c9:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e5cc:	8d 70 ff             	lea    esi,[eax-0x1]
c000e5cf:	21 f3                	and    ebx,esi
c000e5d1:	0f af d9             	imul   ebx,ecx
c000e5d4:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e5d7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e5db:	89 de                	mov    esi,ebx
c000e5dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5df:	31 c0                	xor    eax,eax
c000e5e1:	eb 61                	jmp    c000e644 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5e3:	90                   	nop
c000e5e4:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e5e8:	83 ec 0c             	sub    esp,0xc
c000e5eb:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e5ee:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e5f2:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e5f5:	8b 36                	mov    esi,DWORD PTR [esi]
c000e5f7:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e5fa:	51                   	push   ecx
c000e5fb:	52                   	push   edx
c000e5fc:	50                   	push   eax
c000e5fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e601:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e604:	83 c4 20             	add    esp,0x20
c000e607:	85 c0                	test   eax,eax
c000e609:	75 39                	jne    c000e644 <VCache::read(unsigned long long, int, void*)+0x102>
c000e60b:	eb b3                	jmp    c000e5c0 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e60d:	8d 76 00             	lea    esi,[esi+0x0]
c000e610:	83 ec 0c             	sub    esp,0xc
c000e613:	57                   	push   edi
c000e614:	e8 53 fd ff ff       	call   c000e36c <VCache::invalidateReadBuffer()>
c000e619:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e61c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e620:	8b 10                	mov    edx,DWORD PTR [eax]
c000e622:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e626:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e62a:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e62e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e632:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e636:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e639:	83 c4 2c             	add    esp,0x2c
c000e63c:	5b                   	pop    ebx
c000e63d:	5e                   	pop    esi
c000e63e:	5f                   	pop    edi
c000e63f:	5d                   	pop    ebp
c000e640:	ff e0                	jmp    eax
c000e642:	66 90                	xchg   ax,ax
c000e644:	83 c4 1c             	add    esp,0x1c
c000e647:	5b                   	pop    ebx
c000e648:	5e                   	pop    esi
c000e649:	5f                   	pop    edi
c000e64a:	5d                   	pop    ebp
c000e64b:	c3                   	ret    

c000e64c <Video::putrect(int, int, int, int, unsigned int)>:
c000e64c:	55                   	push   ebp
c000e64d:	57                   	push   edi
c000e64e:	56                   	push   esi
c000e64f:	53                   	push   ebx
c000e650:	83 ec 1c             	sub    esp,0x1c
c000e653:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e657:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e65b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e65f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e663:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e667:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e66b:	01 df                	add    edi,ebx
c000e66d:	39 fb                	cmp    ebx,edi
c000e66f:	7d 1f                	jge    c000e690 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e671:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e675:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e679:	7d 12                	jge    c000e68d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e67b:	8b 16                	mov    edx,DWORD PTR [esi]
c000e67d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e681:	53                   	push   ebx
c000e682:	55                   	push   ebp
c000e683:	45                   	inc    ebp
c000e684:	56                   	push   esi
c000e685:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e688:	83 c4 10             	add    esp,0x10
c000e68b:	eb e8                	jmp    c000e675 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e68d:	43                   	inc    ebx
c000e68e:	eb dd                	jmp    c000e66d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e690:	83 c4 1c             	add    esp,0x1c
c000e693:	5b                   	pop    ebx
c000e694:	5e                   	pop    esi
c000e695:	5f                   	pop    edi
c000e696:	5d                   	pop    ebp
c000e697:	c3                   	ret    

c000e698 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e698:	55                   	push   ebp
c000e699:	57                   	push   edi
c000e69a:	31 ff                	xor    edi,edi
c000e69c:	56                   	push   esi
c000e69d:	53                   	push   ebx
c000e69e:	83 ec 1c             	sub    esp,0x1c
c000e6a1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e6a5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e6a9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e6b0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e6b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e6b9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e6bd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e6c1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e6c4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6c8:	01 f9                	add    ecx,edi
c000e6ca:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e6ce:	7d 2f                	jge    c000e6ff <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e6d0:	31 f6                	xor    esi,esi
c000e6d2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e6d6:	01 f2                	add    edx,esi
c000e6d8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e6dc:	7d 1a                	jge    c000e6f8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e6de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e6e1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e6e4:	46                   	inc    esi
c000e6e5:	51                   	push   ecx
c000e6e6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e6ea:	52                   	push   edx
c000e6eb:	55                   	push   ebp
c000e6ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e6ef:	83 c4 10             	add    esp,0x10
c000e6f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6f6:	eb da                	jmp    c000e6d2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e6f8:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e6fc:	47                   	inc    edi
c000e6fd:	eb c5                	jmp    c000e6c4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e6ff:	83 c4 1c             	add    esp,0x1c
c000e702:	5b                   	pop    ebx
c000e703:	5e                   	pop    esi
c000e704:	5f                   	pop    edi
c000e705:	5d                   	pop    ebp
c000e706:	c3                   	ret    
c000e707:	90                   	nop

c000e708 <Video::blit(unsigned int*, int, int, int, int)>:
c000e708:	55                   	push   ebp
c000e709:	ba 00 00 00 00       	mov    edx,0x0
c000e70e:	57                   	push   edi
c000e70f:	56                   	push   esi
c000e710:	53                   	push   ebx
c000e711:	83 ec 1c             	sub    esp,0x1c
c000e714:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e718:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e71c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e720:	85 c0                	test   eax,eax
c000e722:	0f 49 d0             	cmovns edx,eax
c000e725:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e72c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e730:	89 eb                	mov    ebx,ebp
c000e732:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e736:	01 ea                	add    edx,ebp
c000e738:	39 da                	cmp    edx,ebx
c000e73a:	7e 54                	jle    c000e790 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e73c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e742:	7c 4c                	jl     c000e790 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e744:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e748:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e74c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e750:	01 c1                	add    ecx,eax
c000e752:	39 f9                	cmp    ecx,edi
c000e754:	7e 2f                	jle    c000e785 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e756:	83 c2 04             	add    edx,0x4
c000e759:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e75f:	7c 21                	jl     c000e782 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e761:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e765:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e767:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e76a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e76e:	55                   	push   ebp
c000e76f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e773:	56                   	push   esi
c000e774:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e777:	83 c4 10             	add    esp,0x10
c000e77a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e77e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e782:	47                   	inc    edi
c000e783:	eb c7                	jmp    c000e74c <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e785:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e789:	43                   	inc    ebx
c000e78a:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e78e:	eb a2                	jmp    c000e732 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e790:	83 c4 1c             	add    esp,0x1c
c000e793:	5b                   	pop    ebx
c000e794:	5e                   	pop    esi
c000e795:	5f                   	pop    edi
c000e796:	5d                   	pop    ebp
c000e797:	c3                   	ret    

c000e798 <Video::clearScreen(unsigned int)>:
c000e798:	57                   	push   edi
c000e799:	56                   	push   esi
c000e79a:	53                   	push   ebx
c000e79b:	31 db                	xor    ebx,ebx
c000e79d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e7a1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e7a7:	7e 1f                	jle    c000e7c8 <Video::clearScreen(unsigned int)+0x30>
c000e7a9:	31 ff                	xor    edi,edi
c000e7ab:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e7b1:	7e 12                	jle    c000e7c5 <Video::clearScreen(unsigned int)+0x2d>
c000e7b3:	8b 06                	mov    eax,DWORD PTR [esi]
c000e7b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7b9:	53                   	push   ebx
c000e7ba:	57                   	push   edi
c000e7bb:	47                   	inc    edi
c000e7bc:	56                   	push   esi
c000e7bd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e7c0:	83 c4 10             	add    esp,0x10
c000e7c3:	eb e6                	jmp    c000e7ab <Video::clearScreen(unsigned int)+0x13>
c000e7c5:	43                   	inc    ebx
c000e7c6:	eb d9                	jmp    c000e7a1 <Video::clearScreen(unsigned int)+0x9>
c000e7c8:	5b                   	pop    ebx
c000e7c9:	5e                   	pop    esi
c000e7ca:	5f                   	pop    edi
c000e7cb:	c3                   	ret    

c000e7cc <Video::putpixel(int, int, unsigned int)>:
c000e7cc:	c7 44 24 04 88 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021788
c000e7d4:	e9 ec 29 00 00       	jmp    c00111c5 <KePanic(char const*)>
c000e7d9:	90                   	nop

c000e7da <Video::readPixelApprox(int, int)>:
c000e7da:	83 ec 18             	sub    esp,0x18
c000e7dd:	68 a9 17 02 c0       	push   0xc00217a9
c000e7e2:	e8 de 29 00 00       	call   c00111c5 <KePanic(char const*)>
c000e7e7:	31 c0                	xor    eax,eax
c000e7e9:	83 c4 1c             	add    esp,0x1c
c000e7ec:	c3                   	ret    
c000e7ed:	90                   	nop

c000e7ee <Video::Video(char const*)>:
c000e7ee:	83 ec 0c             	sub    esp,0xc
c000e7f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f5:	83 ec 08             	sub    esp,0x8
c000e7f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7fc:	50                   	push   eax
c000e7fd:	e8 be df ff ff       	call   c000c7c0 <Device::Device(char const*)>
c000e802:	83 c4 10             	add    esp,0x10
c000e805:	ba 24 18 02 c0       	mov    edx,0xc0021824
c000e80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80e:	89 10                	mov    DWORD PTR [eax],edx
c000e810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e814:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e81e:	90                   	nop
c000e81f:	83 c4 0c             	add    esp,0xc
c000e822:	c3                   	ret    
c000e823:	90                   	nop

c000e824 <Video::~Video()>:
c000e824:	83 ec 0c             	sub    esp,0xc
c000e827:	ba 24 18 02 c0       	mov    edx,0xc0021824
c000e82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e830:	89 10                	mov    DWORD PTR [eax],edx
c000e832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e836:	83 ec 0c             	sub    esp,0xc
c000e839:	50                   	push   eax
c000e83a:	e8 eb dc ff ff       	call   c000c52a <Device::~Device()>
c000e83f:	83 c4 10             	add    esp,0x10
c000e842:	90                   	nop
c000e843:	83 c4 0c             	add    esp,0xc
c000e846:	c3                   	ret    
c000e847:	90                   	nop

c000e848 <Video::~Video()>:
c000e848:	83 ec 0c             	sub    esp,0xc
c000e84b:	83 ec 0c             	sub    esp,0xc
c000e84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e852:	e8 cd ff ff ff       	call   c000e824 <Video::~Video()>
c000e857:	83 c4 10             	add    esp,0x10
c000e85a:	83 ec 08             	sub    esp,0x8
c000e85d:	68 64 01 00 00       	push   0x164
c000e862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e866:	e8 a1 bf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e86b:	83 c4 10             	add    esp,0x10
c000e86e:	83 c4 0c             	add    esp,0xc
c000e871:	c3                   	ret    

c000e872 <Video::isMonochrome()>:
c000e872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e876:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e87c:	c3                   	ret    
c000e87d:	90                   	nop

c000e87e <Video::getWidth()>:
c000e87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e882:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e888:	c3                   	ret    
c000e889:	90                   	nop

c000e88a <Video::getHeight()>:
c000e88a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e88e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e894:	c3                   	ret    
c000e895:	90                   	nop

c000e896 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e896:	55                   	push   ebp
c000e897:	57                   	push   edi
c000e898:	56                   	push   esi
c000e899:	53                   	push   ebx
c000e89a:	83 ec 2c             	sub    esp,0x2c
c000e89d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e8a1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e8a5:	83 f8 01             	cmp    eax,0x1
c000e8a8:	19 c9                	sbb    ecx,ecx
c000e8aa:	31 db                	xor    ebx,ebx
c000e8ac:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e8b0:	89 ce                	mov    esi,ecx
c000e8b2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e8ba:	f7 d6                	not    esi
c000e8bc:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e8c2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e8c6:	01 d8                	add    eax,ebx
c000e8c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8cc:	57                   	push   edi
c000e8cd:	e8 b8 ff ff ff       	call   c000e88a <Video::getHeight()>
c000e8d2:	59                   	pop    ecx
c000e8d3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e8d7:	7e 70                	jle    c000e949 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e8d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8dd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e8e1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e8e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8ec:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e8f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8f7:	89 e8                	mov    eax,ebp
c000e8f9:	83 c0 20             	add    eax,0x20
c000e8fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e900:	57                   	push   edi
c000e901:	e8 78 ff ff ff       	call   c000e87e <Video::getWidth()>
c000e906:	5a                   	pop    edx
c000e907:	39 c5                	cmp    ebp,eax
c000e909:	7d 34                	jge    c000e93f <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e90b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e910:	74 05                	je     c000e917 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e912:	8b 07                	mov    eax,DWORD PTR [edi]
c000e914:	56                   	push   esi
c000e915:	eb 0d                	jmp    c000e924 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e917:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e91c:	74 12                	je     c000e930 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e91e:	8b 07                	mov    eax,DWORD PTR [edi]
c000e920:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e924:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e928:	55                   	push   ebp
c000e929:	57                   	push   edi
c000e92a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e92d:	83 c4 10             	add    esp,0x10
c000e930:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e934:	45                   	inc    ebp
c000e935:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e939:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e93d:	75 c1                	jne    c000e900 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e93f:	43                   	inc    ebx
c000e940:	83 fb 20             	cmp    ebx,0x20
c000e943:	0f 85 79 ff ff ff    	jne    c000e8c2 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e949:	83 c4 2c             	add    esp,0x2c
c000e94c:	5b                   	pop    ebx
c000e94d:	5e                   	pop    esi
c000e94e:	5f                   	pop    edi
c000e94f:	5d                   	pop    ebp
c000e950:	c3                   	ret    
c000e951:	90                   	nop

c000e952 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e952:	55                   	push   ebp
c000e953:	57                   	push   edi
c000e954:	56                   	push   esi
c000e955:	53                   	push   ebx
c000e956:	83 ec 28             	sub    esp,0x28
c000e959:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e95d:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e961:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e965:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e969:	c1 e7 08             	shl    edi,0x8
c000e96c:	01 c7                	add    edi,eax
c000e96e:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e972:	c1 e6 08             	shl    esi,0x8
c000e975:	01 f0                	add    eax,esi
c000e977:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e97b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e97f:	0f af c7             	imul   eax,edi
c000e982:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e989:	50                   	push   eax
c000e98a:	e8 44 91 ff ff       	call   c0007ad3 <malloc>
c000e98f:	83 c4 10             	add    esp,0x10
c000e992:	85 c0                	test   eax,eax
c000e994:	89 c5                	mov    ebp,eax
c000e996:	75 10                	jne    c000e9a8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e998:	83 ec 0c             	sub    esp,0xc
c000e99b:	68 d4 17 02 c0       	push   0xc00217d4
c000e9a0:	e8 20 28 00 00       	call   c00111c5 <KePanic(char const*)>
c000e9a5:	83 c4 10             	add    esp,0x10
c000e9a8:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e9ac:	ba 12 00 00 00       	mov    edx,0x12
c000e9b1:	85 c0                	test   eax,eax
c000e9b3:	74 11                	je     c000e9c6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e9b5:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e9b9:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e9bd:	c1 fa 03             	sar    edx,0x3
c000e9c0:	0f af d1             	imul   edx,ecx
c000e9c3:	83 c2 12             	add    edx,0x12
c000e9c6:	85 ff                	test   edi,edi
c000e9c8:	74 06                	je     c000e9d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e9ca:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e9ce:	75 12                	jne    c000e9e2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e9d0:	83 ec 0c             	sub    esp,0xc
c000e9d3:	68 e4 17 02 c0       	push   0xc00217e4
c000e9d8:	e8 2d bf ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000e9dd:	e9 b8 00 00 00       	jmp    c000ea9a <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e9e2:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e9e6:	83 f9 02             	cmp    ecx,0x2
c000e9e9:	0f 85 96 00 00 00    	jne    c000ea85 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e9ef:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e9f4:	75 0e                	jne    c000ea04 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9f6:	85 c0                	test   eax,eax
c000e9f8:	75 0a                	jne    c000ea04 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e9fd:	83 e8 18             	sub    eax,0x18
c000ea00:	a8 f7                	test   al,0xf7
c000ea02:	74 0a                	je     c000ea0e <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ea04:	83 ec 0c             	sub    esp,0xc
c000ea07:	68 f9 17 02 c0       	push   0xc00217f9
c000ea0c:	eb 7f                	jmp    c000ea8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ea0e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ea16:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ea1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000ea22:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ea26:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ea2e:	75 0c                	jne    c000ea3c <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ea30:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000ea35:	c1 e1 18             	shl    ecx,0x18
c000ea38:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ea3c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ea41:	46                   	inc    esi
c000ea42:	89 c8                	mov    eax,ecx
c000ea44:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ea49:	c1 e0 10             	shl    eax,0x10
c000ea4c:	c1 e1 08             	shl    ecx,0x8
c000ea4f:	09 c1                	or     ecx,eax
c000ea51:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ea55:	09 c1                	or     ecx,eax
c000ea57:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ea5b:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ea5f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ea63:	c1 f8 03             	sar    eax,0x3
c000ea66:	01 c2                	add    edx,eax
c000ea68:	89 f0                	mov    eax,esi
c000ea6a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ea6e:	39 c7                	cmp    edi,eax
c000ea70:	7f b0                	jg     c000ea22 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ea72:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ea76:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea7a:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ea7d:	7e 22                	jle    c000eaa1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ea7f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ea83:	eb 99                	jmp    c000ea1e <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ea85:	50                   	push   eax
c000ea86:	50                   	push   eax
c000ea87:	51                   	push   ecx
c000ea88:	68 07 18 02 c0       	push   0xc0021807
c000ea8d:	e8 78 be ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ea92:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ea95:	e8 49 90 ff ff       	call   c0007ae3 <free>
c000ea9a:	83 c4 10             	add    esp,0x10
c000ea9d:	31 ed                	xor    ebp,ebp
c000ea9f:	eb 0f                	jmp    c000eab0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eaa1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eaa5:	89 38                	mov    DWORD PTR [eax],edi
c000eaa7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaab:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000eaae:	89 38                	mov    DWORD PTR [eax],edi
c000eab0:	83 c4 1c             	add    esp,0x1c
c000eab3:	89 e8                	mov    eax,ebp
c000eab5:	5b                   	pop    ebx
c000eab6:	5e                   	pop    esi
c000eab7:	5f                   	pop    edi
c000eab8:	5d                   	pop    ebp
c000eab9:	c3                   	ret    

c000eaba <Video::putTGA(int, int, unsigned char*, int)>:
c000eaba:	55                   	push   ebp
c000eabb:	57                   	push   edi
c000eabc:	56                   	push   esi
c000eabd:	53                   	push   ebx
c000eabe:	83 ec 28             	sub    esp,0x28
c000eac1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eac5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eac9:	50                   	push   eax
c000eaca:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eace:	50                   	push   eax
c000eacf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ead3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ead7:	57                   	push   edi
c000ead8:	e8 75 fe ff ff       	call   c000e952 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eadd:	83 c4 20             	add    esp,0x20
c000eae0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eae4:	85 c0                	test   eax,eax
c000eae6:	74 35                	je     c000eb1d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eae8:	89 c6                	mov    esi,eax
c000eaea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eaee:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eaf2:	39 d8                	cmp    eax,ebx
c000eaf4:	7e 27                	jle    c000eb1d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eaf6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eafa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eafe:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000eb02:	39 e9                	cmp    ecx,ebp
c000eb04:	7e 14                	jle    c000eb1a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eb06:	83 c6 04             	add    esi,0x4
c000eb09:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eb0b:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000eb0e:	53                   	push   ebx
c000eb0f:	55                   	push   ebp
c000eb10:	45                   	inc    ebp
c000eb11:	57                   	push   edi
c000eb12:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb15:	83 c4 10             	add    esp,0x10
c000eb18:	eb e0                	jmp    c000eafa <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eb1a:	43                   	inc    ebx
c000eb1b:	eb cd                	jmp    c000eaea <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eb1d:	83 c4 1c             	add    esp,0x1c
c000eb20:	5b                   	pop    ebx
c000eb21:	5e                   	pop    esi
c000eb22:	5f                   	pop    edi
c000eb23:	5d                   	pop    ebp
c000eb24:	c3                   	ret    
c000eb25:	66 90                	xchg   ax,ax
c000eb27:	90                   	nop

c000eb28 <ACPI::close(int, int, void*)>:
c000eb28:	83 ec 1c             	sub    esp,0x1c
c000eb2b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eb33:	74 0b                	je     c000eb40 <ACPI::close(int, int, void*)+0x18>
c000eb35:	b8 00 00 00 00       	mov    eax,0x0
c000eb3a:	e9 99 00 00 00       	jmp    c000ebd8 <ACPI::close(int, int, void*)+0xb0>
c000eb3f:	90                   	nop
c000eb40:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eb45:	75 29                	jne    c000eb70 <ACPI::close(int, int, void*)+0x48>
c000eb47:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000eb4c:	85 c0                	test   eax,eax
c000eb4e:	74 08                	je     c000eb58 <ACPI::close(int, int, void*)+0x30>
c000eb50:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000eb55:	ff d0                	call   eax
c000eb57:	90                   	nop
c000eb58:	83 ec 0c             	sub    esp,0xc
c000eb5b:	68 68 18 02 c0       	push   0xc0021868
c000eb60:	e8 60 26 00 00       	call   c00111c5 <KePanic(char const*)>
c000eb65:	83 c4 10             	add    esp,0x10
c000eb68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb6d:	eb 69                	jmp    c000ebd8 <ACPI::close(int, int, void*)+0xb0>
c000eb6f:	90                   	nop
c000eb70:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eb75:	75 59                	jne    c000ebd0 <ACPI::close(int, int, void*)+0xa8>
c000eb77:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eb7c:	85 c0                	test   eax,eax
c000eb7e:	74 08                	je     c000eb88 <ACPI::close(int, int, void*)+0x60>
c000eb80:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eb85:	ff d0                	call   eax
c000eb87:	90                   	nop
c000eb88:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eb8d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb90:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb95:	83 e0 02             	and    eax,0x2
c000eb98:	74 1e                	je     c000ebb8 <ACPI::close(int, int, void*)+0x90>
c000eb9a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eba5:	89 c2                	mov    edx,eax
c000eba7:	ec                   	in     al,dx
c000eba8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ebac:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ebb0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ebb4:	eb da                	jmp    c000eb90 <ACPI::close(int, int, void*)+0x68>
c000ebb6:	66 90                	xchg   ax,ax
c000ebb8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ebbf:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ebc4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ebc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebcc:	ee                   	out    dx,al
c000ebcd:	8d 76 00             	lea    esi,[esi+0x0]
c000ebd0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebd5:	8d 76 00             	lea    esi,[esi+0x0]
c000ebd8:	83 c4 1c             	add    esp,0x1c
c000ebdb:	c3                   	ret    

c000ebdc <findRSDP()>:
c000ebdc:	83 ec 1c             	sub    esp,0x1c
c000ebdf:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebe4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ebea:	83 e0 04             	and    eax,0x4
c000ebed:	0f b6 c0             	movzx  eax,al
c000ebf0:	85 c0                	test   eax,eax
c000ebf2:	75 08                	jne    c000ebfc <findRSDP()+0x20>
c000ebf4:	b8 00 00 00 00       	mov    eax,0x0
c000ebf9:	eb 75                	jmp    c000ec70 <findRSDP()+0x94>
c000ebfb:	90                   	nop
c000ebfc:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ec01:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ec06:	7f 1c                	jg     c000ec24 <findRSDP()+0x48>
c000ec08:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec0d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ec13:	83 e2 fb             	and    edx,0xfffffffb
c000ec16:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ec1c:	b8 00 00 00 00       	mov    eax,0x0
c000ec21:	eb 4d                	jmp    c000ec70 <findRSDP()+0x94>
c000ec23:	90                   	nop
c000ec24:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ec2c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ec34:	77 32                	ja     c000ec68 <findRSDP()+0x8c>
c000ec36:	83 ec 04             	sub    esp,0x4
c000ec39:	6a 08                	push   0x8
c000ec3b:	68 03 19 02 c0       	push   0xc0021903
c000ec40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec44:	e8 37 17 ff ff       	call   c0000380 <memcmp>
c000ec49:	83 c4 10             	add    esp,0x10
c000ec4c:	85 c0                	test   eax,eax
c000ec4e:	0f 94 c0             	sete   al
c000ec51:	0f b6 c0             	movzx  eax,al
c000ec54:	85 c0                	test   eax,eax
c000ec56:	74 08                	je     c000ec60 <findRSDP()+0x84>
c000ec58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec5c:	eb 12                	jmp    c000ec70 <findRSDP()+0x94>
c000ec5e:	66 90                	xchg   ax,ax
c000ec60:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ec65:	eb c5                	jmp    c000ec2c <findRSDP()+0x50>
c000ec67:	90                   	nop
c000ec68:	b8 00 00 00 00       	mov    eax,0x0
c000ec6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec70:	83 c4 1c             	add    esp,0x1c
c000ec73:	c3                   	ret    

c000ec74 <loadACPITables(unsigned char*)>:
c000ec74:	57                   	push   edi
c000ec75:	56                   	push   esi
c000ec76:	53                   	push   ebx
c000ec77:	83 ec 60             	sub    esp,0x60
c000ec7a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec7f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec85:	83 e0 04             	and    eax,0x4
c000ec88:	0f b6 c0             	movzx  eax,al
c000ec8b:	85 c0                	test   eax,eax
c000ec8d:	0f 84 41 02 00 00    	je     c000eed4 <loadACPITables(unsigned char*)+0x260>
c000ec93:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ec98:	0f b6 c0             	movzx  eax,al
c000ec9b:	85 c0                	test   eax,eax
c000ec9d:	74 79                	je     c000ed18 <loadACPITables(unsigned char*)+0xa4>
c000ec9f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000eca3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000eca7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ecab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ecae:	83 e8 24             	sub    eax,0x24
c000ecb1:	c1 e8 03             	shr    eax,0x3
c000ecb4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ecb8:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ecc0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ecc4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ecc8:	0f 8d ba 00 00 00    	jge    c000ed88 <loadACPITables(unsigned char*)+0x114>
c000ecce:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecd2:	83 c0 24             	add    eax,0x24
c000ecd5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ecd9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ecdd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ece1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ece5:	c1 e0 03             	shl    eax,0x3
c000ece8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ecec:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ecf0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ecf3:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecf5:	89 c1                	mov    ecx,eax
c000ecf7:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ecfc:	8d 50 01             	lea    edx,[eax+0x1]
c000ecff:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ed05:	89 ca                	mov    edx,ecx
c000ed07:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ed0e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ed13:	eb ab                	jmp    c000ecc0 <loadACPITables(unsigned char*)+0x4c>
c000ed15:	8d 76 00             	lea    esi,[esi+0x0]
c000ed18:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ed20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed27:	83 e8 24             	sub    eax,0x24
c000ed2a:	c1 e8 02             	shr    eax,0x2
c000ed2d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ed31:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ed39:	8d 76 00             	lea    esi,[esi+0x0]
c000ed3c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed40:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ed44:	7d 42                	jge    c000ed88 <loadACPITables(unsigned char*)+0x114>
c000ed46:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed4a:	83 c0 24             	add    eax,0x24
c000ed4d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ed51:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed55:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ed59:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed5d:	c1 e0 02             	shl    eax,0x2
c000ed60:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ed64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed68:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ed6a:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed6f:	8d 50 01             	lea    edx,[eax+0x1]
c000ed72:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ed78:	89 ca                	mov    edx,ecx
c000ed7a:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ed81:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ed86:	eb b4                	jmp    c000ed3c <loadACPITables(unsigned char*)+0xc8>
c000ed88:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ed90:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed95:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ed99:	0f 8d 39 01 00 00    	jge    c000eed8 <loadACPITables(unsigned char*)+0x264>
c000ed9f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eda3:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000edaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000edae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000edb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edba:	25 ff 0f 00 00       	and    eax,0xfff
c000edbf:	89 c6                	mov    esi,eax
c000edc1:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000edc7:	83 ec 0c             	sub    esp,0xc
c000edca:	6a 01                	push   0x1
c000edcc:	e8 24 a8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000edd1:	83 c4 10             	add    esp,0x10
c000edd4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000edd8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000edde:	83 ec 0c             	sub    esp,0xc
c000ede1:	6a 01                	push   0x1
c000ede3:	6a 01                	push   0x1
c000ede5:	50                   	push   eax
c000ede6:	52                   	push   edx
c000ede7:	53                   	push   ebx
c000ede8:	e8 1b b1 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eded:	83 c4 20             	add    esp,0x20
c000edf0:	09 f0                	or     eax,esi
c000edf2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000edf6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000edfa:	c1 e0 03             	shl    eax,0x3
c000edfd:	05 20 89 02 c0       	add    eax,0xc0028920
c000ee02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee0e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ee16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ee1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ee1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee2a:	89 c6                	mov    esi,eax
c000ee2c:	89 d7                	mov    edi,edx
c000ee2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ee30:	89 c8                	mov    eax,ecx
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	89 f3                	mov    ebx,esi
c000ee36:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ee3a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ee3e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ee4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee51:	05 00 10 00 00       	add    eax,0x1000
c000ee56:	c1 e8 0c             	shr    eax,0xc
c000ee59:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ee5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee61:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ee65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee69:	25 ff 0f 00 00       	and    eax,0xfff
c000ee6e:	89 c6                	mov    esi,eax
c000ee70:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee76:	83 ec 0c             	sub    esp,0xc
c000ee79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee7d:	e8 73 a7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ee82:	83 c4 10             	add    esp,0x10
c000ee85:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee89:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ee8f:	83 ec 0c             	sub    esp,0xc
c000ee92:	6a 01                	push   0x1
c000ee94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ee98:	50                   	push   eax
c000ee99:	52                   	push   edx
c000ee9a:	53                   	push   ebx
c000ee9b:	e8 68 b0 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eea0:	83 c4 20             	add    esp,0x20
c000eea3:	09 f0                	or     eax,esi
c000eea5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eead:	83 ec 0c             	sub    esp,0xc
c000eeb0:	50                   	push   eax
c000eeb1:	e8 53 aa ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000eeb6:	83 c4 10             	add    esp,0x10
c000eeb9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eebd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eec1:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000eec8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000eecd:	e9 be fe ff ff       	jmp    c000ed90 <loadACPITables(unsigned char*)+0x11c>
c000eed2:	66 90                	xchg   ax,ax
c000eed4:	90                   	nop
c000eed5:	8d 76 00             	lea    esi,[esi+0x0]
c000eed8:	83 c4 60             	add    esp,0x60
c000eedb:	5b                   	pop    ebx
c000eedc:	5e                   	pop    esi
c000eedd:	5f                   	pop    edi
c000eede:	c3                   	ret    
c000eedf:	90                   	nop

c000eee0 <findRSDT(unsigned char*)>:
c000eee0:	57                   	push   edi
c000eee1:	56                   	push   esi
c000eee2:	53                   	push   ebx
c000eee3:	83 ec 50             	sub    esp,0x50
c000eee6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eeeb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eef1:	83 e0 04             	and    eax,0x4
c000eef4:	0f b6 c0             	movzx  eax,al
c000eef7:	85 c0                	test   eax,eax
c000eef9:	75 0d                	jne    c000ef08 <findRSDT(unsigned char*)+0x28>
c000eefb:	b8 00 00 00 00       	mov    eax,0x0
c000ef00:	e9 2b 01 00 00       	jmp    c000f030 <findRSDT(unsigned char*)+0x150>
c000ef05:	8d 76 00             	lea    esi,[esi+0x0]
c000ef08:	89 e0                	mov    eax,esp
c000ef0a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef0e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef12:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ef16:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000ef1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ef2a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ef2e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ef32:	89 c6                	mov    esi,eax
c000ef34:	89 d7                	mov    edi,edx
c000ef36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef38:	89 c8                	mov    eax,ecx
c000ef3a:	89 fa                	mov    edx,edi
c000ef3c:	89 f3                	mov    ebx,esi
c000ef3e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000ef42:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ef46:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef4a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ef4e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000ef52:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef62:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef6a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef6e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef72:	25 ff 0f 00 00       	and    eax,0xfff
c000ef77:	89 c6                	mov    esi,eax
c000ef79:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef7f:	83 ec 0c             	sub    esp,0xc
c000ef82:	6a 02                	push   0x2
c000ef84:	e8 6c a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef89:	83 c4 10             	add    esp,0x10
c000ef8c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ef90:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef96:	83 ec 0c             	sub    esp,0xc
c000ef99:	6a 01                	push   0x1
c000ef9b:	6a 02                	push   0x2
c000ef9d:	50                   	push   eax
c000ef9e:	52                   	push   edx
c000ef9f:	53                   	push   ebx
c000efa0:	e8 63 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efa5:	83 c4 20             	add    esp,0x20
c000efa8:	09 f0                	or     eax,esi
c000efaa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000efae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000efb2:	25 ff 0f 00 00       	and    eax,0xfff
c000efb7:	89 c6                	mov    esi,eax
c000efb9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000efbf:	83 ec 0c             	sub    esp,0xc
c000efc2:	6a 02                	push   0x2
c000efc4:	e8 2c a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000efc9:	83 c4 10             	add    esp,0x10
c000efcc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000efd0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efd6:	83 ec 0c             	sub    esp,0xc
c000efd9:	6a 01                	push   0x1
c000efdb:	6a 02                	push   0x2
c000efdd:	50                   	push   eax
c000efde:	52                   	push   edx
c000efdf:	53                   	push   ebx
c000efe0:	e8 23 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efe5:	83 c4 20             	add    esp,0x20
c000efe8:	09 f0                	or     eax,esi
c000efea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000efee:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000eff3:	85 c0                	test   eax,eax
c000eff5:	75 11                	jne    c000f008 <findRSDT(unsigned char*)+0x128>
c000eff7:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000effe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f002:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f006:	eb 24                	jmp    c000f02c <findRSDT(unsigned char*)+0x14c>
c000f008:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f00d:	83 f8 02             	cmp    eax,0x2
c000f010:	75 12                	jne    c000f024 <findRSDT(unsigned char*)+0x144>
c000f012:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f019:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f01d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f021:	eb 09                	jmp    c000f02c <findRSDT(unsigned char*)+0x14c>
c000f023:	90                   	nop
c000f024:	b8 00 00 00 00       	mov    eax,0x0
c000f029:	eb 05                	jmp    c000f030 <findRSDT(unsigned char*)+0x150>
c000f02b:	90                   	nop
c000f02c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f030:	83 c4 50             	add    esp,0x50
c000f033:	5b                   	pop    ebx
c000f034:	5e                   	pop    esi
c000f035:	5f                   	pop    edi
c000f036:	c3                   	ret    
c000f037:	90                   	nop

c000f038 <findDataTable(unsigned char*, char*)>:
c000f038:	83 ec 1c             	sub    esp,0x1c
c000f03b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f040:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f046:	83 e0 04             	and    eax,0x4
c000f049:	0f b6 c0             	movzx  eax,al
c000f04c:	85 c0                	test   eax,eax
c000f04e:	75 08                	jne    c000f058 <findDataTable(unsigned char*, char*)+0x20>
c000f050:	b8 00 00 00 00       	mov    eax,0x0
c000f055:	eb 5d                	jmp    c000f0b4 <findDataTable(unsigned char*, char*)+0x7c>
c000f057:	90                   	nop
c000f058:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f060:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f065:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f069:	7d 41                	jge    c000f0ac <findDataTable(unsigned char*, char*)+0x74>
c000f06b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f06f:	c1 e0 03             	shl    eax,0x3
c000f072:	05 20 89 02 c0       	add    eax,0xc0028920
c000f077:	83 ec 04             	sub    esp,0x4
c000f07a:	6a 04                	push   0x4
c000f07c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f080:	50                   	push   eax
c000f081:	e8 fa 12 ff ff       	call   c0000380 <memcmp>
c000f086:	83 c4 10             	add    esp,0x10
c000f089:	85 c0                	test   eax,eax
c000f08b:	0f 94 c0             	sete   al
c000f08e:	0f b6 c0             	movzx  eax,al
c000f091:	85 c0                	test   eax,eax
c000f093:	74 0f                	je     c000f0a4 <findDataTable(unsigned char*, char*)+0x6c>
c000f095:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f099:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f0a0:	eb 12                	jmp    c000f0b4 <findDataTable(unsigned char*, char*)+0x7c>
c000f0a2:	66 90                	xchg   ax,ax
c000f0a4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f0a9:	eb b5                	jmp    c000f060 <findDataTable(unsigned char*, char*)+0x28>
c000f0ab:	90                   	nop
c000f0ac:	b8 00 00 00 00       	mov    eax,0x0
c000f0b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0b4:	83 c4 1c             	add    esp,0x1c
c000f0b7:	c3                   	ret    

c000f0b8 <scanMADT()>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 38             	sub    esp,0x38
c000f0bc:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f0c1:	25 00 04 00 00       	and    eax,0x400
c000f0c6:	74 14                	je     c000f0dc <scanMADT()+0x24>
c000f0c8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0cd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0d3:	83 e2 fb             	and    edx,0xfffffffb
c000f0d6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0dc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0e1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0e7:	83 e0 04             	and    eax,0x4
c000f0ea:	0f b6 c0             	movzx  eax,al
c000f0ed:	85 c0                	test   eax,eax
c000f0ef:	0f 84 6b 04 00 00    	je     c000f560 <scanMADT()+0x4a8>
c000f0f5:	e8 e2 fa ff ff       	call   c000ebdc <findRSDP()>
c000f0fa:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f0ff:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f104:	85 c0                	test   eax,eax
c000f106:	75 1c                	jne    c000f124 <scanMADT()+0x6c>
c000f108:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f10d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f113:	83 e2 fb             	and    edx,0xfffffffb
c000f116:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f11c:	e9 47 04 00 00       	jmp    c000f568 <scanMADT()+0x4b0>
c000f121:	8d 76 00             	lea    esi,[esi+0x0]
c000f124:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f129:	83 ec 0c             	sub    esp,0xc
c000f12c:	50                   	push   eax
c000f12d:	e8 ae fd ff ff       	call   c000eee0 <findRSDT(unsigned char*)>
c000f132:	83 c4 10             	add    esp,0x10
c000f135:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f13a:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f13f:	85 c0                	test   eax,eax
c000f141:	75 19                	jne    c000f15c <scanMADT()+0xa4>
c000f143:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f148:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f14e:	83 e2 fb             	and    edx,0xfffffffb
c000f151:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f157:	e9 0c 04 00 00       	jmp    c000f568 <scanMADT()+0x4b0>
c000f15c:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f161:	83 ec 0c             	sub    esp,0xc
c000f164:	50                   	push   eax
c000f165:	e8 0a fb ff ff       	call   c000ec74 <loadACPITables(unsigned char*)>
c000f16a:	83 c4 10             	add    esp,0x10
c000f16d:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f172:	83 ec 08             	sub    esp,0x8
c000f175:	68 0c 19 02 c0       	push   0xc002190c
c000f17a:	50                   	push   eax
c000f17b:	e8 b8 fe ff ff       	call   c000f038 <findDataTable(unsigned char*, char*)>
c000f180:	83 c4 10             	add    esp,0x10
c000f183:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f187:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f18c:	75 1a                	jne    c000f1a8 <scanMADT()+0xf0>
c000f18e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f193:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f199:	83 e2 fe             	and    edx,0xfffffffe
c000f19c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1a2:	e9 c1 03 00 00       	jmp    c000f568 <scanMADT()+0x4b0>
c000f1a7:	90                   	nop
c000f1a8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f1b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1b7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f1bb:	0f 87 a7 03 00 00    	ja     c000f568 <scanMADT()+0x4b0>
c000f1c1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f1c9:	0f 87 99 03 00 00    	ja     c000f568 <scanMADT()+0x4b0>
c000f1cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1d3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f1d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1db:	8d 50 01             	lea    edx,[eax+0x1]
c000f1de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1e6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1ea:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f1ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1f2:	8d 50 01             	lea    edx,[eax+0x1]
c000f1f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1fd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f201:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f205:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f20a:	83 f8 02             	cmp    eax,0x2
c000f20d:	0f 86 51 03 00 00    	jbe    c000f564 <scanMADT()+0x4ac>
c000f213:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f218:	85 c0                	test   eax,eax
c000f21a:	75 58                	jne    c000f274 <scanMADT()+0x1bc>
c000f21c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f220:	8d 50 01             	lea    edx,[eax+0x1]
c000f223:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f227:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f22d:	0f b6 d2             	movzx  edx,dl
c000f230:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f234:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f238:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f23e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f242:	8d 50 01             	lea    edx,[eax+0x1]
c000f245:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f249:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f24f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f252:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f258:	0f b6 d2             	movzx  edx,dl
c000f25b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f25f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f263:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f269:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f26e:	e9 d9 02 00 00       	jmp    c000f54c <scanMADT()+0x494>
c000f273:	90                   	nop
c000f274:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f279:	83 f8 01             	cmp    eax,0x1
c000f27c:	0f 85 1a 01 00 00    	jne    c000f39c <scanMADT()+0x2e4>
c000f282:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f286:	8d 50 01             	lea    edx,[eax+0x1]
c000f289:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f28d:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f293:	0f b6 d2             	movzx  edx,dl
c000f296:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f29a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f29e:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f2a4:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f2a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2b1:	01 d0                	add    eax,edx
c000f2b3:	83 c0 2c             	add    eax,0x2c
c000f2b6:	8a 00                	mov    al,BYTE PTR [eax]
c000f2b8:	0f b6 d0             	movzx  edx,al
c000f2bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2bf:	8d 48 01             	lea    ecx,[eax+0x1]
c000f2c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2c6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f2ca:	0f b6 c0             	movzx  eax,al
c000f2cd:	c1 e0 08             	shl    eax,0x8
c000f2d0:	89 d1                	mov    ecx,edx
c000f2d2:	09 c1                	or     ecx,eax
c000f2d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2d8:	8d 50 02             	lea    edx,[eax+0x2]
c000f2db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2df:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2e3:	0f b6 c0             	movzx  eax,al
c000f2e6:	c1 e0 10             	shl    eax,0x10
c000f2e9:	09 c1                	or     ecx,eax
c000f2eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ef:	8d 50 03             	lea    edx,[eax+0x3]
c000f2f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2fa:	0f b6 c0             	movzx  eax,al
c000f2fd:	c1 e0 18             	shl    eax,0x18
c000f300:	09 c1                	or     ecx,eax
c000f302:	89 ca                	mov    edx,ecx
c000f304:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f309:	0f b6 c0             	movzx  eax,al
c000f30c:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f313:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f318:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f31c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f320:	01 d0                	add    eax,edx
c000f322:	83 c0 2c             	add    eax,0x2c
c000f325:	8a 00                	mov    al,BYTE PTR [eax]
c000f327:	0f b6 d0             	movzx  edx,al
c000f32a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f32e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f331:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f335:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f339:	0f b6 c0             	movzx  eax,al
c000f33c:	c1 e0 08             	shl    eax,0x8
c000f33f:	89 d1                	mov    ecx,edx
c000f341:	09 c1                	or     ecx,eax
c000f343:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f347:	8d 50 02             	lea    edx,[eax+0x2]
c000f34a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f34e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f352:	0f b6 c0             	movzx  eax,al
c000f355:	c1 e0 10             	shl    eax,0x10
c000f358:	09 c1                	or     ecx,eax
c000f35a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f35e:	8d 50 03             	lea    edx,[eax+0x3]
c000f361:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f365:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f369:	0f b6 c0             	movzx  eax,al
c000f36c:	c1 e0 18             	shl    eax,0x18
c000f36f:	09 c1                	or     ecx,eax
c000f371:	89 ca                	mov    edx,ecx
c000f373:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f378:	0f b6 c0             	movzx  eax,al
c000f37b:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f382:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f387:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f38c:	83 c0 01             	add    eax,0x1
c000f38f:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f394:	e9 b3 01 00 00       	jmp    c000f54c <scanMADT()+0x494>
c000f399:	8d 76 00             	lea    esi,[esi+0x0]
c000f39c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f3a1:	83 f8 02             	cmp    eax,0x2
c000f3a4:	0f 85 ea 00 00 00    	jne    c000f494 <scanMADT()+0x3dc>
c000f3aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ae:	8d 50 01             	lea    edx,[eax+0x1]
c000f3b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3bd:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f3c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3c5:	8d 50 01             	lea    edx,[eax+0x1]
c000f3c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3d0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3d4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f3d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3e0:	01 d0                	add    eax,edx
c000f3e2:	83 c0 2c             	add    eax,0x2c
c000f3e5:	8a 00                	mov    al,BYTE PTR [eax]
c000f3e7:	0f b6 d0             	movzx  edx,al
c000f3ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ee:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3f5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3f9:	0f b6 c0             	movzx  eax,al
c000f3fc:	c1 e0 08             	shl    eax,0x8
c000f3ff:	89 d1                	mov    ecx,edx
c000f401:	09 c1                	or     ecx,eax
c000f403:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f407:	8d 50 02             	lea    edx,[eax+0x2]
c000f40a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f40e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f412:	0f b6 c0             	movzx  eax,al
c000f415:	c1 e0 10             	shl    eax,0x10
c000f418:	09 c1                	or     ecx,eax
c000f41a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f41e:	8d 50 03             	lea    edx,[eax+0x3]
c000f421:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f425:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f429:	0f b6 c0             	movzx  eax,al
c000f42c:	c1 e0 18             	shl    eax,0x18
c000f42f:	09 c8                	or     eax,ecx
c000f431:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f435:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f43a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f43e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f442:	01 d0                	add    eax,edx
c000f444:	83 c0 2c             	add    eax,0x2c
c000f447:	8a 00                	mov    al,BYTE PTR [eax]
c000f449:	0f b6 d0             	movzx  edx,al
c000f44c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f450:	8d 48 01             	lea    ecx,[eax+0x1]
c000f453:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f457:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f45b:	0f b6 c0             	movzx  eax,al
c000f45e:	c1 e0 08             	shl    eax,0x8
c000f461:	09 d0                	or     eax,edx
c000f463:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f468:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f46d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f472:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f476:	88 90 08 30 02 c0    	mov    BYTE PTR [eax-0x3ffdcff8],dl
c000f47c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f481:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f486:	66 89 94 00 c0 8b 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd7440],dx
c000f48e:	e9 b9 00 00 00       	jmp    c000f54c <scanMADT()+0x494>
c000f493:	90                   	nop
c000f494:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f499:	83 f8 04             	cmp    eax,0x4
c000f49c:	0f 85 9a 00 00 00    	jne    c000f53c <scanMADT()+0x484>
c000f4a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4a6:	8d 50 01             	lea    edx,[eax+0x1]
c000f4a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4b5:	0f b6 c0             	movzx  eax,al
c000f4b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f4bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4c4:	01 d0                	add    eax,edx
c000f4c6:	83 c0 2c             	add    eax,0x2c
c000f4c9:	8a 00                	mov    al,BYTE PTR [eax]
c000f4cb:	0f b6 d0             	movzx  edx,al
c000f4ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4d2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4d9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4dd:	0f b6 c0             	movzx  eax,al
c000f4e0:	c1 e0 08             	shl    eax,0x8
c000f4e3:	09 d0                	or     eax,edx
c000f4e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f4e9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f4ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4f2:	8d 50 01             	lea    edx,[eax+0x1]
c000f4f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4fd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f501:	0f b6 c0             	movzx  eax,al
c000f504:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f50c:	c1 e0 08             	shl    eax,0x8
c000f50f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f513:	89 c1                	mov    ecx,eax
c000f515:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f519:	c1 e0 18             	shl    eax,0x18
c000f51c:	89 c3                	mov    ebx,eax
c000f51e:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f523:	8d 50 01             	lea    edx,[eax+0x1]
c000f526:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f52c:	09 d9                	or     ecx,ebx
c000f52e:	89 ca                	mov    edx,ecx
c000f530:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f537:	eb 13                	jmp    c000f54c <scanMADT()+0x494>
c000f539:	8d 76 00             	lea    esi,[esi+0x0]
c000f53c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f541:	83 f8 05             	cmp    eax,0x5
c000f544:	75 06                	jne    c000f54c <scanMADT()+0x494>
c000f546:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f54b:	90                   	nop
c000f54c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f551:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f555:	01 d0                	add    eax,edx
c000f557:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f55b:	e9 50 fc ff ff       	jmp    c000f1b0 <scanMADT()+0xf8>
c000f560:	90                   	nop
c000f561:	eb 05                	jmp    c000f568 <scanMADT()+0x4b0>
c000f563:	90                   	nop
c000f564:	90                   	nop
c000f565:	8d 76 00             	lea    esi,[esi+0x0]
c000f568:	83 c4 38             	add    esp,0x38
c000f56b:	5b                   	pop    ebx
c000f56c:	c3                   	ret    
c000f56d:	90                   	nop
c000f56e:	66 90                	xchg   ax,ax

c000f570 <ACPI::ACPI()>:
c000f570:	83 ec 0c             	sub    esp,0xc
c000f573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f577:	83 ec 08             	sub    esp,0x8
c000f57a:	68 11 19 02 c0       	push   0xc0021911
c000f57f:	50                   	push   eax
c000f580:	e8 3b d2 ff ff       	call   c000c7c0 <Device::Device(char const*)>
c000f585:	83 c4 10             	add    esp,0x10
c000f588:	ba 64 1a 02 c0       	mov    edx,0xc0021a64
c000f58d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f591:	89 10                	mov    DWORD PTR [eax],edx
c000f593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f597:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5a2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f5ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5b0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f5ba:	e8 f9 fa ff ff       	call   c000f0b8 <scanMADT()>
c000f5bf:	90                   	nop
c000f5c0:	83 c4 0c             	add    esp,0xc
c000f5c3:	c3                   	ret    

c000f5c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f5c4:	83 ec 2c             	sub    esp,0x2c
c000f5c7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f5cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f5cf:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f5d3:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f5d7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f5dc:	88 c8                	mov    al,cl
c000f5de:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f5e2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f5e7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f5ef:	90                   	nop
c000f5f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5f4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f5fa:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f5fe:	0f 8d b0 00 00 00    	jge    c000f6b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f604:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f608:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f60c:	83 c2 2a             	add    edx,0x2a
c000f60f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f613:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f618:	0f b7 c0             	movzx  eax,ax
c000f61b:	39 c2                	cmp    edx,eax
c000f61d:	0f 85 85 00 00 00    	jne    c000f6a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f623:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f627:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f62b:	83 c2 2a             	add    edx,0x2a
c000f62e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f632:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f637:	0f b6 c0             	movzx  eax,al
c000f63a:	39 c2                	cmp    edx,eax
c000f63c:	75 6a                	jne    c000f6a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f63e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f643:	85 c0                	test   eax,eax
c000f645:	74 3d                	je     c000f684 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f647:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f64b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f64f:	83 c2 2a             	add    edx,0x2a
c000f652:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f656:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f65a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f65d:	39 c2                	cmp    edx,eax
c000f65f:	74 13                	je     c000f674 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f661:	83 ec 0c             	sub    esp,0xc
c000f664:	68 8c 18 02 c0       	push   0xc002188c
c000f669:	e8 57 1b 00 00       	call   c00111c5 <KePanic(char const*)>
c000f66e:	83 c4 10             	add    esp,0x10
c000f671:	8d 76 00             	lea    esi,[esi+0x0]
c000f674:	83 ec 0c             	sub    esp,0xc
c000f677:	68 16 19 02 c0       	push   0xc0021916
c000f67c:	e8 44 1b 00 00       	call   c00111c5 <KePanic(char const*)>
c000f681:	83 c4 10             	add    esp,0x10
c000f684:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f688:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f68c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f690:	83 c2 2a             	add    edx,0x2a
c000f693:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f697:	8b 02                	mov    eax,DWORD PTR [edx]
c000f699:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f69c:	89 01                	mov    DWORD PTR [ecx],eax
c000f69e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f6a1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f6a6:	66 90                	xchg   ax,ax
c000f6a8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f6ad:	e9 3e ff ff ff       	jmp    c000f5f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f6b2:	66 90                	xchg   ax,ax
c000f6b4:	90                   	nop
c000f6b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6b9:	83 c4 2c             	add    esp,0x2c
c000f6bc:	c2 04 00             	ret    0x4
c000f6bf:	90                   	nop

c000f6c0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f6c0:	83 ec 1c             	sub    esp,0x1c
c000f6c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6c7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f6cb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f6cf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f6d4:	88 c8                	mov    al,cl
c000f6d6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f6da:	88 d0                	mov    al,dl
c000f6dc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6e4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ee:	83 c2 2a             	add    edx,0x2a
c000f6f1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f6f5:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f6f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6fd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f703:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f707:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f70a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f70e:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f717:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f71d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f721:	83 c0 01             	add    eax,0x1
c000f724:	88 c1                	mov    cl,al
c000f726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f72a:	83 c2 2a             	add    edx,0x2a
c000f72d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f735:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f73b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f73f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f742:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f746:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f74a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f74e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f754:	8d 50 01             	lea    edx,[eax+0x1]
c000f757:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f75b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f765:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f76b:	3d 00 02 00 00       	cmp    eax,0x200
c000f770:	75 12                	jne    c000f784 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f772:	83 ec 0c             	sub    esp,0xc
c000f775:	68 25 19 02 c0       	push   0xc0021925
c000f77a:	e8 46 1a 00 00       	call   c00111c5 <KePanic(char const*)>
c000f77f:	83 c4 10             	add    esp,0x10
c000f782:	66 90                	xchg   ax,ax
c000f784:	90                   	nop
c000f785:	83 c4 1c             	add    esp,0x1c
c000f788:	c3                   	ret    
c000f789:	90                   	nop
c000f78a:	66 90                	xchg   ax,ax

c000f78c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f78c:	b8 00 00 00 00       	mov    eax,0x0
c000f791:	c3                   	ret    
c000f792:	66 90                	xchg   ax,ax

c000f794 <ACPI::detectPCI()>:
c000f794:	53                   	push   ebx
c000f795:	83 ec 28             	sub    esp,0x28
c000f798:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f79d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f7a2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f7a7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f7ad:	83 e0 04             	and    eax,0x4
c000f7b0:	0f b6 c0             	movzx  eax,al
c000f7b3:	85 c0                	test   eax,eax
c000f7b5:	74 2d                	je     c000f7e4 <ACPI::detectPCI()+0x50>
c000f7b7:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f7bc:	83 ec 08             	sub    esp,0x8
c000f7bf:	68 42 19 02 c0       	push   0xc0021942
c000f7c4:	50                   	push   eax
c000f7c5:	e8 6e f8 ff ff       	call   c000f038 <findDataTable(unsigned char*, char*)>
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f7d1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f7d6:	74 0c                	je     c000f7e4 <ACPI::detectPCI()+0x50>
c000f7d8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7dd:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7e2:	66 90                	xchg   ax,ax
c000f7e4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f7ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7f0:	8a 00                	mov    al,BYTE PTR [eax]
c000f7f2:	0f b6 c0             	movzx  eax,al
c000f7f5:	83 f8 01             	cmp    eax,0x1
c000f7f8:	75 0e                	jne    c000f808 <ACPI::detectPCI()+0x74>
c000f7fa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7ff:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f804:	eb 2e                	jmp    c000f834 <ACPI::detectPCI()+0xa0>
c000f806:	66 90                	xchg   ax,ax
c000f808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f80c:	8a 00                	mov    al,BYTE PTR [eax]
c000f80e:	0f b6 c0             	movzx  eax,al
c000f811:	83 f8 02             	cmp    eax,0x2
c000f814:	75 1e                	jne    c000f834 <ACPI::detectPCI()+0xa0>
c000f816:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f81b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f820:	85 c0                	test   eax,eax
c000f822:	74 10                	je     c000f834 <ACPI::detectPCI()+0xa0>
c000f824:	83 ec 0c             	sub    esp,0xc
c000f827:	68 bc 18 02 c0       	push   0xc00218bc
c000f82c:	e8 94 19 00 00       	call   c00111c5 <KePanic(char const*)>
c000f831:	83 c4 10             	add    esp,0x10
c000f834:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f838:	83 f0 01             	xor    eax,0x1
c000f83b:	0f b6 c0             	movzx  eax,al
c000f83e:	85 c0                	test   eax,eax
c000f840:	74 46                	je     c000f888 <ACPI::detectPCI()+0xf4>
c000f842:	e8 e9 08 ff ff       	call   c0000130 <manualPCIProbe>
c000f847:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f84b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f850:	75 0e                	jne    c000f860 <ACPI::detectPCI()+0xcc>
c000f852:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f857:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f85c:	eb 2a                	jmp    c000f888 <ACPI::detectPCI()+0xf4>
c000f85e:	66 90                	xchg   ax,ax
c000f860:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f865:	75 21                	jne    c000f888 <ACPI::detectPCI()+0xf4>
c000f867:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f86c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f871:	85 c0                	test   eax,eax
c000f873:	74 13                	je     c000f888 <ACPI::detectPCI()+0xf4>
c000f875:	83 ec 0c             	sub    esp,0xc
c000f878:	68 bc 18 02 c0       	push   0xc00218bc
c000f87d:	e8 43 19 00 00       	call   c00111c5 <KePanic(char const*)>
c000f882:	83 c4 10             	add    esp,0x10
c000f885:	8d 76 00             	lea    esi,[esi+0x0]
c000f888:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f88d:	85 c0                	test   eax,eax
c000f88f:	0f 84 87 00 00 00    	je     c000f91c <ACPI::detectPCI()+0x188>
c000f895:	83 ec 0c             	sub    esp,0xc
c000f898:	68 47 19 02 c0       	push   0xc0021947
c000f89d:	e8 4f 12 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c000f8a2:	83 c4 10             	add    esp,0x10
c000f8a5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f8ad:	83 ec 0c             	sub    esp,0xc
c000f8b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f8b4:	e8 1a 82 ff ff       	call   c0007ad3 <malloc>
c000f8b9:	83 c4 10             	add    esp,0x10
c000f8bc:	89 c3                	mov    ebx,eax
c000f8be:	83 ec 0c             	sub    esp,0xc
c000f8c1:	53                   	push   ebx
c000f8c2:	e8 ef b2 00 00       	call   c001abb6 <PCI::PCI()>
c000f8c7:	83 c4 10             	add    esp,0x10
c000f8ca:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f8ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8d2:	83 ec 08             	sub    esp,0x8
c000f8d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8d9:	50                   	push   eax
c000f8da:	e8 49 cd ff ff       	call   c000c628 <Device::addChild(Device*)>
c000f8df:	83 c4 10             	add    esp,0x10
c000f8e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8e8:	83 c0 08             	add    eax,0x8
c000f8eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ed:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f8f2:	85 d2                	test   edx,edx
c000f8f4:	74 0a                	je     c000f900 <ACPI::detectPCI()+0x16c>
c000f8f6:	ba 01 00 00 00       	mov    edx,0x1
c000f8fb:	eb 0b                	jmp    c000f908 <ACPI::detectPCI()+0x174>
c000f8fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f900:	ba 02 00 00 00       	mov    edx,0x2
c000f905:	8d 76 00             	lea    esi,[esi+0x0]
c000f908:	6a 00                	push   0x0
c000f90a:	6a 00                	push   0x0
c000f90c:	52                   	push   edx
c000f90d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f911:	ff d0                	call   eax
c000f913:	83 c4 10             	add    esp,0x10
c000f916:	e9 91 00 00 00       	jmp    c000f9ac <ACPI::detectPCI()+0x218>
c000f91b:	90                   	nop
c000f91c:	83 ec 0c             	sub    esp,0xc
c000f91f:	68 5f 19 02 c0       	push   0xc002195f
c000f924:	e8 c8 11 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c000f929:	83 c4 10             	add    esp,0x10
c000f92c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f933:	83 ec 0c             	sub    esp,0xc
c000f936:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f93a:	e8 94 81 ff ff       	call   c0007ad3 <malloc>
c000f93f:	83 c4 10             	add    esp,0x10
c000f942:	89 c3                	mov    ebx,eax
c000f944:	83 ec 0c             	sub    esp,0xc
c000f947:	53                   	push   ebx
c000f948:	e8 11 be 00 00       	call   c001b75e <IDE::IDE()>
c000f94d:	83 c4 10             	add    esp,0x10
c000f950:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f954:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f958:	83 ec 08             	sub    esp,0x8
c000f95b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f95f:	50                   	push   eax
c000f960:	e8 c3 cc ff ff       	call   c000c628 <Device::addChild(Device*)>
c000f965:	83 c4 10             	add    esp,0x10
c000f968:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f96c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f976:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f97a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f983:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f987:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f990:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f994:	8b 00                	mov    eax,DWORD PTR [eax]
c000f996:	83 c0 08             	add    eax,0x8
c000f999:	8b 00                	mov    eax,DWORD PTR [eax]
c000f99b:	6a 00                	push   0x0
c000f99d:	6a 00                	push   0x0
c000f99f:	6a 00                	push   0x0
c000f9a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9a5:	ff d0                	call   eax
c000f9a7:	83 c4 10             	add    esp,0x10
c000f9aa:	66 90                	xchg   ax,ax
c000f9ac:	90                   	nop
c000f9ad:	83 c4 28             	add    esp,0x28
c000f9b0:	5b                   	pop    ebx
c000f9b1:	c3                   	ret    
c000f9b2:	66 90                	xchg   ax,ax

c000f9b4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f9b4:	83 ec 1c             	sub    esp,0x1c
c000f9b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9bb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f9be:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f9c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f9c7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f9cc:	83 ec 08             	sub    esp,0x8
c000f9cf:	52                   	push   edx
c000f9d0:	50                   	push   eax
c000f9d1:	e8 c4 77 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000f9d6:	83 c4 10             	add    esp,0x10
c000f9d9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f9dd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f9e2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f9e7:	83 ec 04             	sub    esp,0x4
c000f9ea:	6a 01                	push   0x1
c000f9ec:	52                   	push   edx
c000f9ed:	50                   	push   eax
c000f9ee:	e8 bf 78 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	90                   	nop
c000f9f7:	83 c4 1c             	add    esp,0x1c
c000f9fa:	c3                   	ret    
c000f9fb:	90                   	nop

c000f9fc <ACPI::sleep()>:
c000f9fc:	83 ec 0c             	sub    esp,0xc
c000f9ff:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fa04:	85 c0                	test   eax,eax
c000fa06:	74 08                	je     c000fa10 <ACPI::sleep()+0x14>
c000fa08:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fa0d:	ff d0                	call   eax
c000fa0f:	90                   	nop
c000fa10:	90                   	nop
c000fa11:	83 c4 0c             	add    esp,0xc
c000fa14:	c3                   	ret    
c000fa15:	90                   	nop
c000fa16:	66 90                	xchg   ax,ax

c000fa18 <ACPI::open(int, int, void*)>:
c000fa18:	55                   	push   ebp
c000fa19:	89 e5                	mov    ebp,esp
c000fa1b:	53                   	push   ebx
c000fa1c:	81 ec 74 01 00 00    	sub    esp,0x174
c000fa22:	83 ec 0c             	sub    esp,0xc
c000fa25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fa28:	e8 67 fd ff ff       	call   c000f794 <ACPI::detectPCI()>
c000fa2d:	83 c4 10             	add    esp,0x10
c000fa30:	83 ec 0c             	sub    esp,0xc
c000fa33:	68 e4 18 02 c0       	push   0xc00218e4
c000fa38:	e8 b4 10 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c000fa3d:	83 c4 10             	add    esp,0x10
c000fa40:	b8 4c 05 00 00       	mov    eax,0x54c
c000fa45:	8a 00                	mov    al,BYTE PTR [eax]
c000fa47:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fa4a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fa4e:	83 f8 01             	cmp    eax,0x1
c000fa51:	75 15                	jne    c000fa68 <ACPI::open(int, int, void*)+0x50>
c000fa53:	83 ec 0c             	sub    esp,0xc
c000fa56:	68 75 12 02 c0       	push   0xc0021275
c000fa5b:	e8 7a 4b 00 00       	call   c00145da <Thr::loadKernelSymbolTable(char const*)>
c000fa60:	83 c4 10             	add    esp,0x10
c000fa63:	eb 33                	jmp    c000fa98 <ACPI::open(int, int, void*)+0x80>
c000fa65:	8d 76 00             	lea    esi,[esi+0x0]
c000fa68:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fa6c:	3d bb 00 00 00       	cmp    eax,0xbb
c000fa71:	75 15                	jne    c000fa88 <ACPI::open(int, int, void*)+0x70>
c000fa73:	83 ec 0c             	sub    esp,0xc
c000fa76:	68 74 19 02 c0       	push   0xc0021974
c000fa7b:	e8 5a 4b 00 00       	call   c00145da <Thr::loadKernelSymbolTable(char const*)>
c000fa80:	83 c4 10             	add    esp,0x10
c000fa83:	eb 13                	jmp    c000fa98 <ACPI::open(int, int, void*)+0x80>
c000fa85:	8d 76 00             	lea    esi,[esi+0x0]
c000fa88:	83 ec 0c             	sub    esp,0xc
c000fa8b:	68 92 19 02 c0       	push   0xc0021992
c000fa90:	e8 30 17 00 00       	call   c00111c5 <KePanic(char const*)>
c000fa95:	83 c4 10             	add    esp,0x10
c000fa98:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fa9c:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000faa3:	83 ec 0c             	sub    esp,0xc
c000faa6:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000faa9:	e8 25 80 ff ff       	call   c0007ad3 <malloc>
c000faae:	83 c4 10             	add    esp,0x10
c000fab1:	89 c3                	mov    ebx,eax
c000fab3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fab8:	83 ec 04             	sub    esp,0x4
c000fabb:	50                   	push   eax
c000fabc:	68 ac 19 02 c0       	push   0xc00219ac
c000fac1:	53                   	push   ebx
c000fac2:	e8 51 bc ff ff       	call   c000b718 <File::File(char const*, Process*)>
c000fac7:	83 c4 10             	add    esp,0x10
c000faca:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000facd:	83 ec 08             	sub    esp,0x8
c000fad0:	6a 01                	push   0x1
c000fad2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fad5:	e8 fa bc ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c000fada:	83 c4 10             	add    esp,0x10
c000fadd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fae0:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fae4:	75 12                	jne    c000faf8 <ACPI::open(int, int, void*)+0xe0>
c000fae6:	83 ec 0c             	sub    esp,0xc
c000fae9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000faec:	e8 41 bd ff ff       	call   c000b832 <File::close()>
c000faf1:	83 c4 10             	add    esp,0x10
c000faf4:	eb 06                	jmp    c000fafc <ACPI::open(int, int, void*)+0xe4>
c000faf6:	66 90                	xchg   ax,ax
c000faf8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fafc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fb00:	74 16                	je     c000fb18 <ACPI::open(int, int, void*)+0x100>
c000fb02:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fb05:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb07:	83 c0 08             	add    eax,0x8
c000fb0a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb0c:	83 ec 0c             	sub    esp,0xc
c000fb0f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fb12:	ff d0                	call   eax
c000fb14:	83 c4 10             	add    esp,0x10
c000fb17:	90                   	nop
c000fb18:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fb1b:	83 f0 01             	xor    eax,0x1
c000fb1e:	0f b6 c0             	movzx  eax,al
c000fb21:	85 c0                	test   eax,eax
c000fb23:	74 3b                	je     c000fb60 <ACPI::open(int, int, void*)+0x148>
c000fb25:	83 ec 0c             	sub    esp,0xc
c000fb28:	68 ca 19 02 c0       	push   0xc00219ca
c000fb2d:	e8 bf 0f 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c000fb32:	83 c4 10             	add    esp,0x10
c000fb35:	83 ec 04             	sub    esp,0x4
c000fb38:	6a 0c                	push   0xc
c000fb3a:	68 e5 19 02 c0       	push   0xc00219e5
c000fb3f:	68 f6 19 02 c0       	push   0xc00219f6
c000fb44:	e8 3d 3d 00 00       	call   c0013886 <Reg::readIntWithDefault(char*, char*, int)>
c000fb49:	83 c4 10             	add    esp,0x10
c000fb4c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fb4f:	83 ec 0c             	sub    esp,0xc
c000fb52:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fb55:	e8 c0 9c ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fb5a:	83 c4 10             	add    esp,0x10
c000fb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb60:	83 ec 0c             	sub    esp,0xc
c000fb63:	68 75 05 02 c0       	push   0xc0020575
c000fb68:	e8 84 0f 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c000fb6d:	83 c4 10             	add    esp,0x10
c000fb70:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb73:	83 ec 08             	sub    esp,0x8
c000fb76:	6a 13                	push   0x13
c000fb78:	50                   	push   eax
c000fb79:	e8 c2 cd ff ff       	call   c000c940 <getDevicesOfType(DeviceType)>
c000fb7e:	83 c4 0c             	add    esp,0xc
c000fb81:	8d 76 00             	lea    esi,[esi+0x0]
c000fb84:	83 ec 0c             	sub    esp,0xc
c000fb87:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb8a:	50                   	push   eax
c000fb8b:	e8 d0 fd 00 00       	call   c001f960 <LinkedList<Device>::isEmpty()>
c000fb90:	83 c4 10             	add    esp,0x10
c000fb93:	83 f0 01             	xor    eax,0x1
c000fb96:	0f b6 c0             	movzx  eax,al
c000fb99:	85 c0                	test   eax,eax
c000fb9b:	0f 84 1f 01 00 00    	je     c000fcc0 <ACPI::open(int, int, void*)+0x2a8>
c000fba1:	83 ec 0c             	sub    esp,0xc
c000fba4:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fba7:	50                   	push   eax
c000fba8:	e8 cf fd 00 00       	call   c001f97c <LinkedList<Device>::getFirstElement()>
c000fbad:	83 c4 10             	add    esp,0x10
c000fbb0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fbb3:	83 ec 0c             	sub    esp,0xc
c000fbb6:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fbb9:	50                   	push   eax
c000fbba:	e8 c5 fd 00 00       	call   c001f984 <LinkedList<Device>::removeFirst()>
c000fbbf:	83 c4 10             	add    esp,0x10
c000fbc2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fbc5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fbc8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fbcb:	b8 24 00 00 00       	mov    eax,0x24
c000fbd0:	83 e0 fc             	and    eax,0xfffffffc
c000fbd3:	89 c3                	mov    ebx,eax
c000fbd5:	b8 00 00 00 00       	mov    eax,0x0
c000fbda:	66 90                	xchg   ax,ax
c000fbdc:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fbe3:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fbea:	83 c0 04             	add    eax,0x4
c000fbed:	39 d8                	cmp    eax,ebx
c000fbef:	72 eb                	jb     c000fbdc <ACPI::open(int, int, void*)+0x1c4>
c000fbf1:	83 ec 08             	sub    esp,0x8
c000fbf4:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fbfa:	50                   	push   eax
c000fbfb:	83 ec 24             	sub    esp,0x24
c000fbfe:	89 e1                	mov    ecx,esp
c000fc00:	b8 24 00 00 00       	mov    eax,0x24
c000fc05:	83 e0 fc             	and    eax,0xfffffffc
c000fc08:	89 c3                	mov    ebx,eax
c000fc0a:	b8 00 00 00 00       	mov    eax,0x0
c000fc0f:	90                   	nop
c000fc10:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fc17:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fc1a:	83 c0 04             	add    eax,0x4
c000fc1d:	39 d8                	cmp    eax,ebx
c000fc1f:	72 ef                	jb     c000fc10 <ACPI::open(int, int, void*)+0x1f8>
c000fc21:	e8 78 b4 00 00       	call   c001b09e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fc26:	83 c4 30             	add    esp,0x30
c000fc29:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fc2c:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fc30:	0f 84 4e ff ff ff    	je     c000fb84 <ACPI::open(int, int, void*)+0x16c>
c000fc36:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fc3d:	83 ec 0c             	sub    esp,0xc
c000fc40:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fc43:	e8 8b 7e ff ff       	call   c0007ad3 <malloc>
c000fc48:	83 c4 10             	add    esp,0x10
c000fc4b:	89 c3                	mov    ebx,eax
c000fc4d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fc52:	83 ec 04             	sub    esp,0x4
c000fc55:	50                   	push   eax
c000fc56:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fc59:	53                   	push   ebx
c000fc5a:	e8 b9 ba ff ff       	call   c000b718 <File::File(char const*, Process*)>
c000fc5f:	83 c4 10             	add    esp,0x10
c000fc62:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fc65:	83 ec 0c             	sub    esp,0xc
c000fc68:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fc6b:	e8 28 be ff ff       	call   c000ba98 <File::exists()>
c000fc70:	83 c4 10             	add    esp,0x10
c000fc73:	0f b6 c0             	movzx  eax,al
c000fc76:	85 c0                	test   eax,eax
c000fc78:	74 22                	je     c000fc9c <ACPI::open(int, int, void*)+0x284>
c000fc7a:	83 ec 08             	sub    esp,0x8
c000fc7d:	6a 01                	push   0x1
c000fc7f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fc82:	e8 d5 53 00 00       	call   c001505c <Thr::loadDLL(char const*, bool)>
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	83 ec 08             	sub    esp,0x8
c000fc8d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fc90:	50                   	push   eax
c000fc91:	e8 06 56 00 00       	call   c001529c <Thr::executeDLL(unsigned long, void*)>
c000fc96:	83 c4 10             	add    esp,0x10
c000fc99:	8d 76 00             	lea    esi,[esi+0x0]
c000fc9c:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fca0:	0f 84 de fe ff ff    	je     c000fb84 <ACPI::open(int, int, void*)+0x16c>
c000fca6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fca9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcab:	83 c0 08             	add    eax,0x8
c000fcae:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcb0:	83 ec 0c             	sub    esp,0xc
c000fcb3:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fcb6:	ff d0                	call   eax
c000fcb8:	83 c4 10             	add    esp,0x10
c000fcbb:	e9 c4 fe ff ff       	jmp    c000fb84 <ACPI::open(int, int, void*)+0x16c>
c000fcc0:	83 ec 0c             	sub    esp,0xc
c000fcc3:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fcc6:	50                   	push   eax
c000fcc7:	e8 90 fc 00 00       	call   c001f95c <LinkedList<Device>::~LinkedList()>
c000fccc:	83 c4 10             	add    esp,0x10
c000fccf:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fcd5:	83 ec 08             	sub    esp,0x8
c000fcd8:	6a 01                	push   0x1
c000fcda:	68 fd 19 02 c0       	push   0xc00219fd
c000fcdf:	e8 78 53 00 00       	call   c001505c <Thr::loadDLL(char const*, bool)>
c000fce4:	83 c4 10             	add    esp,0x10
c000fce7:	83 ec 08             	sub    esp,0x8
c000fcea:	53                   	push   ebx
c000fceb:	50                   	push   eax
c000fcec:	e8 ab 55 00 00       	call   c001529c <Thr::executeDLL(unsigned long, void*)>
c000fcf1:	83 c4 10             	add    esp,0x10
c000fcf4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fcf9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fcff:	83 e0 04             	and    eax,0x4
c000fd02:	0f b6 c0             	movzx  eax,al
c000fd05:	85 c0                	test   eax,eax
c000fd07:	0f 84 e3 00 00 00    	je     c000fdf0 <ACPI::open(int, int, void*)+0x3d8>
c000fd0d:	83 ec 0c             	sub    esp,0xc
c000fd10:	68 1a 1a 02 c0       	push   0xc0021a1a
c000fd15:	e8 d7 0d 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c000fd1a:	83 c4 10             	add    esp,0x10
c000fd1d:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fd24:	83 ec 0c             	sub    esp,0xc
c000fd27:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fd2a:	e8 a4 7d ff ff       	call   c0007ad3 <malloc>
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	89 c3                	mov    ebx,eax
c000fd34:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd39:	83 ec 04             	sub    esp,0x4
c000fd3c:	50                   	push   eax
c000fd3d:	68 37 1a 02 c0       	push   0xc0021a37
c000fd42:	53                   	push   ebx
c000fd43:	e8 d0 b9 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c000fd48:	83 c4 10             	add    esp,0x10
c000fd4b:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fd4e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fd52:	74 1c                	je     c000fd70 <ACPI::open(int, int, void*)+0x358>
c000fd54:	83 ec 0c             	sub    esp,0xc
c000fd57:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fd5a:	e8 39 bd ff ff       	call   c000ba98 <File::exists()>
c000fd5f:	83 c4 10             	add    esp,0x10
c000fd62:	0f b6 c0             	movzx  eax,al
c000fd65:	85 c0                	test   eax,eax
c000fd67:	74 07                	je     c000fd70 <ACPI::open(int, int, void*)+0x358>
c000fd69:	b0 01                	mov    al,0x1
c000fd6b:	eb 07                	jmp    c000fd74 <ACPI::open(int, int, void*)+0x35c>
c000fd6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd70:	b0 00                	mov    al,0x0
c000fd72:	66 90                	xchg   ax,ax
c000fd74:	0f b6 c0             	movzx  eax,al
c000fd77:	85 c0                	test   eax,eax
c000fd79:	74 21                	je     c000fd9c <ACPI::open(int, int, void*)+0x384>
c000fd7b:	83 ec 08             	sub    esp,0x8
c000fd7e:	6a 01                	push   0x1
c000fd80:	68 37 1a 02 c0       	push   0xc0021a37
c000fd85:	e8 d2 52 00 00       	call   c001505c <Thr::loadDLL(char const*, bool)>
c000fd8a:	83 c4 10             	add    esp,0x10
c000fd8d:	83 ec 08             	sub    esp,0x8
c000fd90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd93:	50                   	push   eax
c000fd94:	e8 03 55 00 00       	call   c001529c <Thr::executeDLL(unsigned long, void*)>
c000fd99:	83 c4 10             	add    esp,0x10
c000fd9c:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fda0:	74 1e                	je     c000fdc0 <ACPI::open(int, int, void*)+0x3a8>
c000fda2:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fda6:	74 18                	je     c000fdc0 <ACPI::open(int, int, void*)+0x3a8>
c000fda8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000fdab:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdad:	83 c0 08             	add    eax,0x8
c000fdb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb2:	83 ec 0c             	sub    esp,0xc
c000fdb5:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fdb8:	ff d0                	call   eax
c000fdba:	83 c4 10             	add    esp,0x10
c000fdbd:	8d 76 00             	lea    esi,[esi+0x0]
c000fdc0:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fdc5:	83 ec 08             	sub    esp,0x8
c000fdc8:	68 54 1a 02 c0       	push   0xc0021a54
c000fdcd:	50                   	push   eax
c000fdce:	e8 65 f2 ff ff       	call   c000f038 <findDataTable(unsigned char*, char*)>
c000fdd3:	83 c4 10             	add    esp,0x10
c000fdd6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000fdd9:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000fddd:	74 11                	je     c000fdf0 <ACPI::open(int, int, void*)+0x3d8>
c000fddf:	83 ec 08             	sub    esp,0x8
c000fde2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000fde5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fde8:	e8 c7 fb ff ff       	call   c000f9b4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fded:	83 c4 10             	add    esp,0x10
c000fdf0:	b8 00 00 00 00       	mov    eax,0x0
c000fdf5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fdf8:	c9                   	leave  
c000fdf9:	c3                   	ret    

c000fdfa <CPU::close(int, int, void*)>:
c000fdfa:	31 c0                	xor    eax,eax
c000fdfc:	c3                   	ret    
c000fdfd:	90                   	nop

c000fdfe <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fdfe:	60                   	pusha  
c000fdff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe0b:	9c                   	pushf  
c000fe0c:	fa                   	cli    
c000fe0d:	0f 09                	wbinvd 
c000fe0f:	0f 30                	wrmsr  
c000fe11:	9d                   	popf   
c000fe12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe16:	89 02                	mov    DWORD PTR [edx],eax
c000fe18:	61                   	popa   
c000fe19:	c3                   	ret    

c000fe1a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fe1a:	60                   	pusha  
c000fe1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe1f:	9c                   	pushf  
c000fe20:	fa                   	cli    
c000fe21:	0f 09                	wbinvd 
c000fe23:	31 c0                	xor    eax,eax
c000fe25:	31 d2                	xor    edx,edx
c000fe27:	0f 32                	rdmsr  
c000fe29:	9d                   	popf   
c000fe2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe2e:	89 02                	mov    DWORD PTR [edx],eax
c000fe30:	61                   	popa   
c000fe31:	c3                   	ret    

c000fe32 <CPU::AMD_K6_writeback(int, int, int)>:
c000fe32:	56                   	push   esi
c000fe33:	53                   	push   ebx
c000fe34:	83 ec 10             	sub    esp,0x10
c000fe37:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fe3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe40:	75 5d                	jne    c000fe9f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe42:	83 f8 08             	cmp    eax,0x8
c000fe45:	75 09                	jne    c000fe50 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fe47:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000fe4c:	7e 13                	jle    c000fe61 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fe4e:	eb 30                	jmp    c000fe80 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fe50:	83 f8 06             	cmp    eax,0x6
c000fe53:	7c 4a                	jl     c000fe9f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe55:	83 f8 07             	cmp    eax,0x7
c000fe58:	7e 07                	jle    c000fe61 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fe5a:	83 f8 09             	cmp    eax,0x9
c000fe5d:	74 21                	je     c000fe80 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fe5f:	eb 3e                	jmp    c000fe9f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe61:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000fe67:	89 e6                	mov    esi,esp
c000fe69:	56                   	push   esi
c000fe6a:	68 82 00 00 c0       	push   0xc0000082
c000fe6f:	e8 a6 ff ff ff       	call   c000fe1a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fe74:	c1 eb 15             	shr    ebx,0x15
c000fe77:	56                   	push   esi
c000fe78:	83 e3 7e             	and    ebx,0x7e
c000fe7b:	6a 00                	push   0x0
c000fe7d:	53                   	push   ebx
c000fe7e:	eb 12                	jmp    c000fe92 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000fe80:	89 e3                	mov    ebx,esp
c000fe82:	53                   	push   ebx
c000fe83:	68 82 00 00 c0       	push   0xc0000082
c000fe88:	e8 8d ff ff ff       	call   c000fe1a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fe8d:	53                   	push   ebx
c000fe8e:	6a 00                	push   0x0
c000fe90:	6a 00                	push   0x0
c000fe92:	68 82 00 00 c0       	push   0xc0000082
c000fe97:	e8 62 ff ff ff       	call   c000fdfe <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000fe9c:	83 c4 18             	add    esp,0x18
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	5b                   	pop    ebx
c000fea3:	5e                   	pop    esi
c000fea4:	c3                   	ret    
c000fea5:	90                   	nop

c000fea6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000fea6:	55                   	push   ebp
c000fea7:	57                   	push   edi
c000fea8:	56                   	push   esi
c000fea9:	53                   	push   ebx
c000feaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000feae:	39 05 18 30 02 c0    	cmp    DWORD PTR ds:0xc0023018,eax
c000feb4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000feb8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000febc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000fec0:	75 23                	jne    c000fee5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000fec2:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000fec7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fecb:	89 06                	mov    DWORD PTR [esi],eax
c000fecd:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000fed2:	89 07                	mov    DWORD PTR [edi],eax
c000fed4:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000fed9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fedc:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c000fee1:	89 02                	mov    DWORD PTR [edx],eax
c000fee3:	eb 3f                	jmp    c000ff24 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000fee5:	31 c9                	xor    ecx,ecx
c000fee7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000feeb:	0f a2                	cpuid  
c000feed:	89 06                	mov    DWORD PTR [esi],eax
c000feef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fef3:	89 1f                	mov    DWORD PTR [edi],ebx
c000fef5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000fef8:	89 10                	mov    DWORD PTR [eax],edx
c000fefa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fefe:	a3 18 30 02 c0       	mov    ds:0xc0023018,eax
c000ff03:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff05:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c000ff0a:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff0c:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c000ff11:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff14:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c000ff19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff1f:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c000ff24:	5b                   	pop    ebx
c000ff25:	5e                   	pop    esi
c000ff26:	5f                   	pop    edi
c000ff27:	5d                   	pop    ebp
c000ff28:	c3                   	ret    
c000ff29:	90                   	nop

c000ff2a <CPU::cpuidCheckEDX(unsigned int)>:
c000ff2a:	83 ec 10             	sub    esp,0x10
c000ff2d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff31:	50                   	push   eax
c000ff32:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff36:	50                   	push   eax
c000ff37:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff3b:	50                   	push   eax
c000ff3c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff40:	50                   	push   eax
c000ff41:	6a 01                	push   0x1
c000ff43:	e8 5e ff ff ff       	call   c000fea6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff48:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff4c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000ff50:	0f 95 c0             	setne  al
c000ff53:	83 c4 24             	add    esp,0x24
c000ff56:	c3                   	ret    
c000ff57:	90                   	nop

c000ff58 <CPU::cpuidCheckECX(unsigned int)>:
c000ff58:	83 ec 10             	sub    esp,0x10
c000ff5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff5f:	50                   	push   eax
c000ff60:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff64:	50                   	push   eax
c000ff65:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff69:	50                   	push   eax
c000ff6a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff6e:	50                   	push   eax
c000ff6f:	6a 01                	push   0x1
c000ff71:	e8 30 ff ff ff       	call   c000fea6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff7a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ff7e:	0f 95 c0             	setne  al
c000ff81:	83 c4 24             	add    esp,0x24
c000ff84:	c3                   	ret    
c000ff85:	90                   	nop

c000ff86 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000ff86:	83 ec 10             	sub    esp,0x10
c000ff89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff8d:	50                   	push   eax
c000ff8e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff92:	50                   	push   eax
c000ff93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff97:	50                   	push   eax
c000ff98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff9c:	50                   	push   eax
c000ff9d:	6a 07                	push   0x7
c000ff9f:	e8 02 ff ff ff       	call   c000fea6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffa4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffa8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000ffac:	0f 95 c0             	setne  al
c000ffaf:	83 c4 24             	add    esp,0x24
c000ffb2:	c3                   	ret    
c000ffb3:	90                   	nop

c000ffb4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000ffb4:	83 ec 10             	sub    esp,0x10
c000ffb7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffbb:	50                   	push   eax
c000ffbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffc0:	50                   	push   eax
c000ffc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffc5:	50                   	push   eax
c000ffc6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffca:	50                   	push   eax
c000ffcb:	6a 07                	push   0x7
c000ffcd:	e8 d4 fe ff ff       	call   c000fea6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffd6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ffda:	0f 95 c0             	setne  al
c000ffdd:	83 c4 24             	add    esp,0x24
c000ffe0:	c3                   	ret    
c000ffe1:	90                   	nop

c000ffe2 <CPU::CPU()>:
c000ffe2:	83 ec 0c             	sub    esp,0xc
c000ffe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe9:	83 ec 08             	sub    esp,0x8
c000ffec:	68 79 1b 02 c0       	push   0xc0021b79
c000fff1:	50                   	push   eax
c000fff2:	e8 c9 c7 ff ff       	call   c000c7c0 <Device::Device(char const*)>
c000fff7:	83 c4 10             	add    esp,0x10
c000fffa:	ba 0c 1c 02 c0       	mov    edx,0xc0021c0c
c000ffff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010003:	89 10                	mov    DWORD PTR [eax],edx
c0010005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010009:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010017:	05 78 01 00 00       	add    eax,0x178
c001001c:	83 ec 0c             	sub    esp,0xc
c001001f:	50                   	push   eax
c0010020:	e8 57 73 ff ff       	call   c000737c <GDT::GDT()>
c0010025:	83 c4 10             	add    esp,0x10
c0010028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001002c:	05 7c 09 00 00       	add    eax,0x97c
c0010031:	83 ec 0c             	sub    esp,0xc
c0010034:	50                   	push   eax
c0010035:	e8 92 75 ff ff       	call   c00075cc <IDT::IDT()>
c001003a:	83 c4 10             	add    esp,0x10
c001003d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010041:	05 7c 11 00 00       	add    eax,0x117c
c0010046:	83 ec 0c             	sub    esp,0xc
c0010049:	50                   	push   eax
c001004a:	e8 dd 8e ff ff       	call   c0008f2c <TSS::TSS()>
c001004f:	83 c4 10             	add    esp,0x10
c0010052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010056:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001005d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010061:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001006b:	90                   	nop
c001006c:	83 c4 0c             	add    esp,0xc
c001006f:	c3                   	ret    

c0010070 <CPU::displayFeatures()>:
c0010070:	c3                   	ret    
c0010071:	90                   	nop

c0010072 <CPU::detectFeatures()>:
c0010072:	55                   	push   ebp
c0010073:	57                   	push   edi
c0010074:	56                   	push   esi
c0010075:	53                   	push   ebx
c0010076:	83 ec 30             	sub    esp,0x30
c0010079:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001007d:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010087:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001008d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010094:	6a 0d                	push   0xd
c0010096:	6a 00                	push   0x0
c0010098:	55                   	push   ebp
c0010099:	e8 52 04 ff ff       	call   c00004f0 <memset>
c001009e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00100a3:	83 c4 10             	add    esp,0x10
c00100a6:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00100ad:	0f 84 db 05 00 00    	je     c001068e <CPU::detectFeatures()+0x61c>
c00100b3:	83 ec 0c             	sub    esp,0xc
c00100b6:	89 ef                	mov    edi,ebp
c00100b8:	6a 10                	push   0x10
c00100ba:	e8 6b fe ff ff       	call   c000ff2a <CPU::cpuidCheckEDX(unsigned int)>
c00100bf:	83 e0 01             	and    eax,0x1
c00100c2:	8d 14 00             	lea    edx,[eax+eax*1]
c00100c5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00100cb:	83 e0 fd             	and    eax,0xfffffffd
c00100ce:	09 d0                	or     eax,edx
c00100d0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00100d6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00100dd:	e8 48 fe ff ff       	call   c000ff2a <CPU::cpuidCheckEDX(unsigned int)>
c00100e2:	83 e0 01             	and    eax,0x1
c00100e5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00100ec:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00100f2:	83 e0 fb             	and    eax,0xfffffffb
c00100f5:	09 d0                	or     eax,edx
c00100f7:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00100fd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010104:	e8 21 fe ff ff       	call   c000ff2a <CPU::cpuidCheckEDX(unsigned int)>
c0010109:	83 e0 01             	and    eax,0x1
c001010c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010113:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010119:	83 e0 f7             	and    eax,0xfffffff7
c001011c:	09 d0                	or     eax,edx
c001011e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010124:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001012b:	e8 fa fd ff ff       	call   c000ff2a <CPU::cpuidCheckEDX(unsigned int)>
c0010130:	83 e0 01             	and    eax,0x1
c0010133:	c1 e0 04             	shl    eax,0x4
c0010136:	89 c2                	mov    edx,eax
c0010138:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001013e:	83 e0 ef             	and    eax,0xffffffef
c0010141:	09 d0                	or     eax,edx
c0010143:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010149:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010150:	e8 d5 fd ff ff       	call   c000ff2a <CPU::cpuidCheckEDX(unsigned int)>
c0010155:	83 e0 01             	and    eax,0x1
c0010158:	c1 e0 05             	shl    eax,0x5
c001015b:	89 c2                	mov    edx,eax
c001015d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010163:	83 e0 df             	and    eax,0xffffffdf
c0010166:	09 d0                	or     eax,edx
c0010168:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001016e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010175:	e8 b0 fd ff ff       	call   c000ff2a <CPU::cpuidCheckEDX(unsigned int)>
c001017a:	83 e0 01             	and    eax,0x1
c001017d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010180:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010186:	83 e0 fd             	and    eax,0xfffffffd
c0010189:	09 d0                	or     eax,edx
c001018b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010191:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010198:	e8 8d fd ff ff       	call   c000ff2a <CPU::cpuidCheckEDX(unsigned int)>
c001019d:	83 e0 01             	and    eax,0x1
c00101a0:	c1 e0 06             	shl    eax,0x6
c00101a3:	89 c2                	mov    edx,eax
c00101a5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00101ab:	83 e0 bf             	and    eax,0xffffffbf
c00101ae:	09 d0                	or     eax,edx
c00101b0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00101b6:	58                   	pop    eax
c00101b7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00101bb:	50                   	push   eax
c00101bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00101c0:	50                   	push   eax
c00101c1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00101c5:	56                   	push   esi
c00101c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00101ca:	50                   	push   eax
c00101cb:	6a 00                	push   0x0
c00101cd:	e8 d4 fc ff ff       	call   c000fea6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00101d2:	b8 04 00 00 00       	mov    eax,0x4
c00101d7:	89 c1                	mov    ecx,eax
c00101d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101db:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00101e1:	89 c1                	mov    ecx,eax
c00101e3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00101e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101e9:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00101ef:	89 c1                	mov    ecx,eax
c00101f1:	8d 74 24 38          	lea    esi,[esp+0x38]
c00101f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101f7:	83 c4 18             	add    esp,0x18
c00101fa:	68 88 1a 02 c0       	push   0xc0021a88
c00101ff:	55                   	push   ebp
c0010200:	e8 7b 05 ff ff       	call   c0000780 <strcmp>
c0010205:	83 c4 10             	add    esp,0x10
c0010208:	85 c0                	test   eax,eax
c001020a:	75 0f                	jne    c001021b <CPU::detectFeatures()+0x1a9>
c001020c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010216:	e9 22 02 00 00       	jmp    c001043d <CPU::detectFeatures()+0x3cb>
c001021b:	50                   	push   eax
c001021c:	50                   	push   eax
c001021d:	68 95 1a 02 c0       	push   0xc0021a95
c0010222:	55                   	push   ebp
c0010223:	e8 58 05 ff ff       	call   c0000780 <strcmp>
c0010228:	83 c4 10             	add    esp,0x10
c001022b:	85 c0                	test   eax,eax
c001022d:	74 dd                	je     c001020c <CPU::detectFeatures()+0x19a>
c001022f:	50                   	push   eax
c0010230:	50                   	push   eax
c0010231:	68 a2 1a 02 c0       	push   0xc0021aa2
c0010236:	55                   	push   ebp
c0010237:	e8 44 05 ff ff       	call   c0000780 <strcmp>
c001023c:	83 c4 10             	add    esp,0x10
c001023f:	85 c0                	test   eax,eax
c0010241:	74 2a                	je     c001026d <CPU::detectFeatures()+0x1fb>
c0010243:	50                   	push   eax
c0010244:	50                   	push   eax
c0010245:	68 af 1a 02 c0       	push   0xc0021aaf
c001024a:	55                   	push   ebp
c001024b:	e8 30 05 ff ff       	call   c0000780 <strcmp>
c0010250:	83 c4 10             	add    esp,0x10
c0010253:	85 c0                	test   eax,eax
c0010255:	74 16                	je     c001026d <CPU::detectFeatures()+0x1fb>
c0010257:	50                   	push   eax
c0010258:	50                   	push   eax
c0010259:	68 bc 1a 02 c0       	push   0xc0021abc
c001025e:	55                   	push   ebp
c001025f:	e8 1c 05 ff ff       	call   c0000780 <strcmp>
c0010264:	83 c4 10             	add    esp,0x10
c0010267:	85 c0                	test   eax,eax
c0010269:	74 48                	je     c00102b3 <CPU::detectFeatures()+0x241>
c001026b:	eb 0f                	jmp    c001027c <CPU::detectFeatures()+0x20a>
c001026d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010277:	e9 c1 01 00 00       	jmp    c001043d <CPU::detectFeatures()+0x3cb>
c001027c:	50                   	push   eax
c001027d:	50                   	push   eax
c001027e:	68 c9 1a 02 c0       	push   0xc0021ac9
c0010283:	55                   	push   ebp
c0010284:	e8 f7 04 ff ff       	call   c0000780 <strcmp>
c0010289:	83 c4 10             	add    esp,0x10
c001028c:	85 c0                	test   eax,eax
c001028e:	74 23                	je     c00102b3 <CPU::detectFeatures()+0x241>
c0010290:	57                   	push   edi
c0010291:	57                   	push   edi
c0010292:	68 d6 1a 02 c0       	push   0xc0021ad6
c0010297:	55                   	push   ebp
c0010298:	e8 e3 04 ff ff       	call   c0000780 <strcmp>
c001029d:	83 c4 10             	add    esp,0x10
c00102a0:	85 c0                	test   eax,eax
c00102a2:	75 1e                	jne    c00102c2 <CPU::detectFeatures()+0x250>
c00102a4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00102ae:	e9 8a 01 00 00       	jmp    c001043d <CPU::detectFeatures()+0x3cb>
c00102b3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00102bd:	e9 7b 01 00 00       	jmp    c001043d <CPU::detectFeatures()+0x3cb>
c00102c2:	56                   	push   esi
c00102c3:	56                   	push   esi
c00102c4:	68 e3 1a 02 c0       	push   0xc0021ae3
c00102c9:	55                   	push   ebp
c00102ca:	e8 b1 04 ff ff       	call   c0000780 <strcmp>
c00102cf:	83 c4 10             	add    esp,0x10
c00102d2:	85 c0                	test   eax,eax
c00102d4:	75 0f                	jne    c00102e5 <CPU::detectFeatures()+0x273>
c00102d6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00102e0:	e9 58 01 00 00       	jmp    c001043d <CPU::detectFeatures()+0x3cb>
c00102e5:	51                   	push   ecx
c00102e6:	51                   	push   ecx
c00102e7:	68 a2 1a 02 c0       	push   0xc0021aa2
c00102ec:	55                   	push   ebp
c00102ed:	e8 8e 04 ff ff       	call   c0000780 <strcmp>
c00102f2:	83 c4 10             	add    esp,0x10
c00102f5:	85 c0                	test   eax,eax
c00102f7:	75 0f                	jne    c0010308 <CPU::detectFeatures()+0x296>
c00102f9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010303:	e9 35 01 00 00       	jmp    c001043d <CPU::detectFeatures()+0x3cb>
c0010308:	52                   	push   edx
c0010309:	52                   	push   edx
c001030a:	68 f0 1a 02 c0       	push   0xc0021af0
c001030f:	55                   	push   ebp
c0010310:	e8 6b 04 ff ff       	call   c0000780 <strcmp>
c0010315:	83 c4 10             	add    esp,0x10
c0010318:	85 c0                	test   eax,eax
c001031a:	75 0f                	jne    c001032b <CPU::detectFeatures()+0x2b9>
c001031c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010326:	e9 12 01 00 00       	jmp    c001043d <CPU::detectFeatures()+0x3cb>
c001032b:	50                   	push   eax
c001032c:	50                   	push   eax
c001032d:	68 fd 1a 02 c0       	push   0xc0021afd
c0010332:	55                   	push   ebp
c0010333:	e8 48 04 ff ff       	call   c0000780 <strcmp>
c0010338:	83 c4 10             	add    esp,0x10
c001033b:	85 c0                	test   eax,eax
c001033d:	75 0f                	jne    c001034e <CPU::detectFeatures()+0x2dc>
c001033f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010349:	e9 ef 00 00 00       	jmp    c001043d <CPU::detectFeatures()+0x3cb>
c001034e:	50                   	push   eax
c001034f:	50                   	push   eax
c0010350:	68 0a 1b 02 c0       	push   0xc0021b0a
c0010355:	55                   	push   ebp
c0010356:	e8 25 04 ff ff       	call   c0000780 <strcmp>
c001035b:	83 c4 10             	add    esp,0x10
c001035e:	85 c0                	test   eax,eax
c0010360:	75 0f                	jne    c0010371 <CPU::detectFeatures()+0x2ff>
c0010362:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001036c:	e9 cc 00 00 00       	jmp    c001043d <CPU::detectFeatures()+0x3cb>
c0010371:	50                   	push   eax
c0010372:	50                   	push   eax
c0010373:	68 17 1b 02 c0       	push   0xc0021b17
c0010378:	55                   	push   ebp
c0010379:	e8 02 04 ff ff       	call   c0000780 <strcmp>
c001037e:	83 c4 10             	add    esp,0x10
c0010381:	85 c0                	test   eax,eax
c0010383:	75 0f                	jne    c0010394 <CPU::detectFeatures()+0x322>
c0010385:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001038f:	e9 a9 00 00 00       	jmp    c001043d <CPU::detectFeatures()+0x3cb>
c0010394:	50                   	push   eax
c0010395:	50                   	push   eax
c0010396:	68 24 1b 02 c0       	push   0xc0021b24
c001039b:	55                   	push   ebp
c001039c:	e8 df 03 ff ff       	call   c0000780 <strcmp>
c00103a1:	83 c4 10             	add    esp,0x10
c00103a4:	85 c0                	test   eax,eax
c00103a6:	75 0f                	jne    c00103b7 <CPU::detectFeatures()+0x345>
c00103a8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00103b2:	e9 86 00 00 00       	jmp    c001043d <CPU::detectFeatures()+0x3cb>
c00103b7:	50                   	push   eax
c00103b8:	50                   	push   eax
c00103b9:	68 31 1b 02 c0       	push   0xc0021b31
c00103be:	55                   	push   ebp
c00103bf:	e8 bc 03 ff ff       	call   c0000780 <strcmp>
c00103c4:	83 c4 10             	add    esp,0x10
c00103c7:	85 c0                	test   eax,eax
c00103c9:	75 0c                	jne    c00103d7 <CPU::detectFeatures()+0x365>
c00103cb:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00103d5:	eb 66                	jmp    c001043d <CPU::detectFeatures()+0x3cb>
c00103d7:	50                   	push   eax
c00103d8:	50                   	push   eax
c00103d9:	68 3e 1b 02 c0       	push   0xc0021b3e
c00103de:	55                   	push   ebp
c00103df:	e8 9c 03 ff ff       	call   c0000780 <strcmp>
c00103e4:	83 c4 10             	add    esp,0x10
c00103e7:	85 c0                	test   eax,eax
c00103e9:	75 0c                	jne    c00103f7 <CPU::detectFeatures()+0x385>
c00103eb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00103f5:	eb 46                	jmp    c001043d <CPU::detectFeatures()+0x3cb>
c00103f7:	57                   	push   edi
c00103f8:	57                   	push   edi
c00103f9:	68 4b 1b 02 c0       	push   0xc0021b4b
c00103fe:	55                   	push   ebp
c00103ff:	e8 7c 03 ff ff       	call   c0000780 <strcmp>
c0010404:	83 c4 10             	add    esp,0x10
c0010407:	85 c0                	test   eax,eax
c0010409:	74 e0                	je     c00103eb <CPU::detectFeatures()+0x379>
c001040b:	56                   	push   esi
c001040c:	56                   	push   esi
c001040d:	68 58 1b 02 c0       	push   0xc0021b58
c0010412:	55                   	push   ebp
c0010413:	e8 68 03 ff ff       	call   c0000780 <strcmp>
c0010418:	83 c4 10             	add    esp,0x10
c001041b:	85 c0                	test   eax,eax
c001041d:	74 cc                	je     c00103eb <CPU::detectFeatures()+0x379>
c001041f:	51                   	push   ecx
c0010420:	51                   	push   ecx
c0010421:	68 65 1b 02 c0       	push   0xc0021b65
c0010426:	55                   	push   ebp
c0010427:	e8 54 03 ff ff       	call   c0000780 <strcmp>
c001042c:	83 c4 10             	add    esp,0x10
c001042f:	85 c0                	test   eax,eax
c0010431:	74 b8                	je     c00103eb <CPU::detectFeatures()+0x379>
c0010433:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001043d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010442:	0f 86 be 00 00 00    	jbe    c0010506 <CPU::detectFeatures()+0x494>
c0010448:	83 ec 0c             	sub    esp,0xc
c001044b:	68 80 00 00 00       	push   0x80
c0010450:	e8 31 fb ff ff       	call   c000ff86 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010455:	83 e0 01             	and    eax,0x1
c0010458:	c1 e0 06             	shl    eax,0x6
c001045b:	89 c2                	mov    edx,eax
c001045d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010463:	83 e0 bf             	and    eax,0xffffffbf
c0010466:	09 d0                	or     eax,edx
c0010468:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001046e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010475:	e8 0c fb ff ff       	call   c000ff86 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001047a:	83 e0 01             	and    eax,0x1
c001047d:	c1 e0 04             	shl    eax,0x4
c0010480:	89 c2                	mov    edx,eax
c0010482:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010488:	83 e0 ef             	and    eax,0xffffffef
c001048b:	09 d0                	or     eax,edx
c001048d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010493:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001049a:	e8 e7 fa ff ff       	call   c000ff86 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001049f:	89 c2                	mov    edx,eax
c00104a1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104a7:	c1 e2 07             	shl    edx,0x7
c00104aa:	83 e0 7f             	and    eax,0x7f
c00104ad:	09 d0                	or     eax,edx
c00104af:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104b5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00104bc:	e8 f3 fa ff ff       	call   c000ffb4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00104c1:	83 e0 01             	and    eax,0x1
c00104c4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00104cb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00104d1:	83 e0 f7             	and    eax,0xfffffff7
c00104d4:	09 d0                	or     eax,edx
c00104d6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00104dc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00104e3:	e8 cc fa ff ff       	call   c000ffb4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00104e8:	83 c4 10             	add    esp,0x10
c00104eb:	83 e0 01             	and    eax,0x1
c00104ee:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104f5:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00104fb:	83 e0 fb             	and    eax,0xfffffffb
c00104fe:	09 d0                	or     eax,edx
c0010500:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010506:	83 ec 0c             	sub    esp,0xc
c0010509:	8d 44 24 28          	lea    eax,[esp+0x28]
c001050d:	50                   	push   eax
c001050e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010512:	50                   	push   eax
c0010513:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010517:	57                   	push   edi
c0010518:	8d 74 24 28          	lea    esi,[esp+0x28]
c001051c:	56                   	push   esi
c001051d:	6a 01                	push   0x1
c001051f:	e8 82 f9 ff ff       	call   c000fea6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010524:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010528:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001052e:	89 c1                	mov    ecx,eax
c0010530:	83 e1 0f             	and    ecx,0xf
c0010533:	83 e2 f0             	and    edx,0xfffffff0
c0010536:	09 ca                	or     edx,ecx
c0010538:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001053e:	89 c2                	mov    edx,eax
c0010540:	c1 ea 04             	shr    edx,0x4
c0010543:	83 e2 0f             	and    edx,0xf
c0010546:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001054a:	89 d1                	mov    ecx,edx
c001054c:	83 c4 20             	add    esp,0x20
c001054f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010555:	c1 e1 06             	shl    ecx,0x6
c0010558:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001055e:	09 ca                	or     edx,ecx
c0010560:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010567:	89 c2                	mov    edx,eax
c0010569:	c1 ea 08             	shr    edx,0x8
c001056c:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010572:	83 e2 0f             	and    edx,0xf
c0010575:	89 d5                	mov    ebp,edx
c0010577:	83 e5 03             	and    ebp,0x3
c001057a:	c1 e5 06             	shl    ebp,0x6
c001057d:	83 e1 3f             	and    ecx,0x3f
c0010580:	09 e9                	or     ecx,ebp
c0010582:	89 d5                	mov    ebp,edx
c0010584:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001058a:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010590:	c1 ed 02             	shr    ebp,0x2
c0010593:	83 e1 c0             	and    ecx,0xffffffc0
c0010596:	09 e9                	or     ecx,ebp
c0010598:	89 c5                	mov    ebp,eax
c001059a:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00105a0:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00105a6:	c1 ed 08             	shr    ebp,0x8
c00105a9:	83 e5 30             	and    ebp,0x30
c00105ac:	83 e1 cf             	and    ecx,0xffffffcf
c00105af:	09 e9                	or     ecx,ebp
c00105b1:	83 fa 06             	cmp    edx,0x6
c00105b4:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00105ba:	74 05                	je     c00105c1 <CPU::detectFeatures()+0x54f>
c00105bc:	83 fa 0f             	cmp    edx,0xf
c00105bf:	75 64                	jne    c0010625 <CPU::detectFeatures()+0x5b3>
c00105c1:	89 c1                	mov    ecx,eax
c00105c3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00105c9:	c1 e9 10             	shr    ecx,0x10
c00105cc:	c1 e1 04             	shl    ecx,0x4
c00105cf:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00105d3:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00105d9:	0f b6 c9             	movzx  ecx,cl
c00105dc:	c1 e1 06             	shl    ecx,0x6
c00105df:	09 e9                	or     ecx,ebp
c00105e1:	83 fa 0f             	cmp    edx,0xf
c00105e4:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00105eb:	75 38                	jne    c0010625 <CPU::detectFeatures()+0x5b3>
c00105ed:	c1 e8 14             	shr    eax,0x14
c00105f0:	83 c0 0f             	add    eax,0xf
c00105f3:	0f b6 c0             	movzx  eax,al
c00105f6:	89 c2                	mov    edx,eax
c00105f8:	c1 e8 02             	shr    eax,0x2
c00105fb:	83 e2 03             	and    edx,0x3
c00105fe:	89 d1                	mov    ecx,edx
c0010600:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010606:	c1 e1 06             	shl    ecx,0x6
c0010609:	83 e2 3f             	and    edx,0x3f
c001060c:	09 ca                	or     edx,ecx
c001060e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010614:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001061a:	83 e2 c0             	and    edx,0xffffffc0
c001061d:	09 d0                	or     eax,edx
c001061f:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010625:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001062b:	83 ec 0c             	sub    esp,0xc
c001062e:	83 c8 07             	or     eax,0x7
c0010631:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010637:	8d 44 24 28          	lea    eax,[esp+0x28]
c001063b:	50                   	push   eax
c001063c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010640:	55                   	push   ebp
c0010641:	57                   	push   edi
c0010642:	56                   	push   esi
c0010643:	68 00 00 00 80       	push   0x80000000
c0010648:	e8 59 f8 ff ff       	call   c000fea6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001064d:	83 c4 20             	add    esp,0x20
c0010650:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010658:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001065c:	76 1e                	jbe    c001067c <CPU::detectFeatures()+0x60a>
c001065e:	83 ec 0c             	sub    esp,0xc
c0010661:	50                   	push   eax
c0010662:	55                   	push   ebp
c0010663:	57                   	push   edi
c0010664:	56                   	push   esi
c0010665:	68 01 00 00 80       	push   0x80000001
c001066a:	e8 37 f8 ff ff       	call   c000fea6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001066f:	83 c4 20             	add    esp,0x20
c0010672:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001067c:	52                   	push   edx
c001067d:	52                   	push   edx
c001067e:	68 71 1b 02 c0       	push   0xc0021b71
c0010683:	53                   	push   ebx
c0010684:	e8 29 c1 ff ff       	call   c000c7b2 <Device::setName(char const*)>
c0010689:	83 c4 10             	add    esp,0x10
c001068c:	eb 69                	jmp    c00106f7 <CPU::detectFeatures()+0x685>
c001068e:	50                   	push   eax
c001068f:	50                   	push   eax
c0010690:	68 d6 1a 02 c0       	push   0xc0021ad6
c0010695:	55                   	push   ebp
c0010696:	e8 b5 ff fe ff       	call   c0000650 <strcpy>
c001069b:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00106a5:	e8 19 fb fe ff       	call   c00001c3 <is486>
c00106aa:	83 c4 10             	add    esp,0x10
c00106ad:	85 c0                	test   eax,eax
c00106af:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106b5:	74 1f                	je     c00106d6 <CPU::detectFeatures()+0x664>
c00106b7:	83 c8 07             	or     eax,0x7
c00106ba:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106c0:	0f 20 c0             	mov    eax,cr0
c00106c3:	83 e0 14             	and    eax,0x14
c00106c6:	83 f8 04             	cmp    eax,0x4
c00106c9:	75 10                	jne    c00106db <CPU::detectFeatures()+0x669>
c00106cb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106d1:	83 e0 fd             	and    eax,0xfffffffd
c00106d4:	eb 1b                	jmp    c00106f1 <CPU::detectFeatures()+0x67f>
c00106d6:	83 e0 f8             	and    eax,0xfffffff8
c00106d9:	eb df                	jmp    c00106ba <CPU::detectFeatures()+0x648>
c00106db:	e8 be fa fe ff       	call   c000019e <hasLegacyFPU>
c00106e0:	83 e0 01             	and    eax,0x1
c00106e3:	8d 14 00             	lea    edx,[eax+eax*1]
c00106e6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106ec:	83 e0 fd             	and    eax,0xfffffffd
c00106ef:	09 d0                	or     eax,edx
c00106f1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00106f7:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00106fe:	74 17                	je     c0010717 <CPU::detectFeatures()+0x6a5>
c0010700:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c0010706:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001070c:	83 c8 10             	or     eax,0x10
c001070f:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010715:	eb 20                	jmp    c0010737 <CPU::detectFeatures()+0x6c5>
c0010717:	e8 82 fa fe ff       	call   c000019e <hasLegacyFPU>
c001071c:	83 e0 01             	and    eax,0x1
c001071f:	8d 14 00             	lea    edx,[eax+eax*1]
c0010722:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010728:	83 e0 fd             	and    eax,0xfffffffd
c001072b:	09 d0                	or     eax,edx
c001072d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010733:	a8 02                	test   al,0x2
c0010735:	75 c9                	jne    c0010700 <CPU::detectFeatures()+0x68e>
c0010737:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001073e:	83 c4 2c             	add    esp,0x2c
c0010741:	5b                   	pop    ebx
c0010742:	5e                   	pop    esi
c0010743:	5f                   	pop    edi
c0010744:	5d                   	pop    ebp
c0010745:	c3                   	ret    

c0010746 <CPU::setupSMEP()>:
c0010746:	0f 20 e0             	mov    eax,cr4
c0010749:	0d 00 00 10 00       	or     eax,0x100000
c001074e:	0f 22 e0             	mov    cr4,eax
c0010751:	c3                   	ret    

c0010752 <CPU::setupUMIP()>:
c0010752:	0f 20 e0             	mov    eax,cr4
c0010755:	80 cc 08             	or     ah,0x8
c0010758:	0f 22 e0             	mov    cr4,eax
c001075b:	c3                   	ret    

c001075c <CPU::setupTSC()>:
c001075c:	0f 20 e0             	mov    eax,cr4
c001075f:	83 c8 04             	or     eax,0x4
c0010762:	0f 22 e0             	mov    cr4,eax
c0010765:	c3                   	ret    

c0010766 <CPU::setupLargePages()>:
c0010766:	0f 20 e0             	mov    eax,cr4
c0010769:	83 c8 10             	or     eax,0x10
c001076c:	0f 22 e0             	mov    cr4,eax
c001076f:	c3                   	ret    

c0010770 <CPU::setupPAT()>:
c0010770:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010775:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001077c:	74 2c                	je     c00107aa <CPU::setupPAT()+0x3a>
c001077e:	53                   	push   ebx
c001077f:	83 ec 10             	sub    esp,0x10
c0010782:	68 77 02 00 00       	push   0x277
c0010787:	50                   	push   eax
c0010788:	e8 55 69 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001078d:	83 e2 f8             	and    edx,0xfffffff8
c0010790:	83 ca 01             	or     edx,0x1
c0010793:	52                   	push   edx
c0010794:	50                   	push   eax
c0010795:	68 77 02 00 00       	push   0x277
c001079a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00107a0:	e8 69 69 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00107a5:	83 c4 28             	add    esp,0x28
c00107a8:	5b                   	pop    ebx
c00107a9:	c3                   	ret    
c00107aa:	c3                   	ret    
c00107ab:	90                   	nop

c00107ac <CPU::setupMTRR()>:
c00107ac:	c3                   	ret    
c00107ad:	90                   	nop

c00107ae <CPU::setupGlobalPages()>:
c00107ae:	0f 20 e0             	mov    eax,cr4
c00107b1:	0c 80                	or     al,0x80
c00107b3:	0f 22 e0             	mov    cr4,eax
c00107b6:	c3                   	ret    
c00107b7:	90                   	nop

c00107b8 <CPU::allowUsermodeDataAccess()>:
c00107b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107bc:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00107c3:	74 03                	je     c00107c8 <CPU::allowUsermodeDataAccess()+0x10>
c00107c5:	0f 01 cb             	stac   
c00107c8:	c3                   	ret    
c00107c9:	90                   	nop

c00107ca <CPU::prohibitUsermodeDataAccess()>:
c00107ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107ce:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00107d5:	74 03                	je     c00107da <CPU::prohibitUsermodeDataAccess()+0x10>
c00107d7:	0f 01 ca             	clac   
c00107da:	c3                   	ret    
c00107db:	90                   	nop

c00107dc <CPU::setupSMAP()>:
c00107dc:	0f 20 e0             	mov    eax,cr4
c00107df:	0d 00 00 20 00       	or     eax,0x200000
c00107e4:	0f 22 e0             	mov    cr4,eax
c00107e7:	eb e1                	jmp    c00107ca <CPU::prohibitUsermodeDataAccess()>
c00107e9:	90                   	nop

c00107ea <CPU::setupFeatures()>:
c00107ea:	53                   	push   ebx
c00107eb:	83 ec 08             	sub    esp,0x8
c00107ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107f2:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00107f9:	74 18                	je     c0010813 <CPU::setupFeatures()+0x29>
c00107fb:	83 ec 0c             	sub    esp,0xc
c00107fe:	68 7d 1b 02 c0       	push   0xc0021b7d
c0010803:	e8 02 a1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010808:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001080b:	e8 42 ff ff ff       	call   c0010752 <CPU::setupUMIP()>
c0010810:	83 c4 10             	add    esp,0x10
c0010813:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001081a:	74 18                	je     c0010834 <CPU::setupFeatures()+0x4a>
c001081c:	83 ec 0c             	sub    esp,0xc
c001081f:	68 87 1b 02 c0       	push   0xc0021b87
c0010824:	e8 e1 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010829:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001082c:	e8 2b ff ff ff       	call   c001075c <CPU::setupTSC()>
c0010831:	83 c4 10             	add    esp,0x10
c0010834:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001083b:	74 18                	je     c0010855 <CPU::setupFeatures()+0x6b>
c001083d:	83 ec 0c             	sub    esp,0xc
c0010840:	68 90 1b 02 c0       	push   0xc0021b90
c0010845:	e8 c0 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001084a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001084d:	e8 14 ff ff ff       	call   c0010766 <CPU::setupLargePages()>
c0010852:	83 c4 10             	add    esp,0x10
c0010855:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001085c:	74 18                	je     c0010876 <CPU::setupFeatures()+0x8c>
c001085e:	83 ec 0c             	sub    esp,0xc
c0010861:	68 99 1b 02 c0       	push   0xc0021b99
c0010866:	e8 9f a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001086b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001086e:	e8 3b ff ff ff       	call   c00107ae <CPU::setupGlobalPages()>
c0010873:	83 c4 10             	add    esp,0x10
c0010876:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001087d:	74 18                	je     c0010897 <CPU::setupFeatures()+0xad>
c001087f:	83 ec 0c             	sub    esp,0xc
c0010882:	68 ab 1b 02 c0       	push   0xc0021bab
c0010887:	e8 7e a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001088c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001088f:	e8 dc fe ff ff       	call   c0010770 <CPU::setupPAT()>
c0010894:	83 c4 10             	add    esp,0x10
c0010897:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001089e:	74 11                	je     c00108b1 <CPU::setupFeatures()+0xc7>
c00108a0:	c7 44 24 10 b4 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021bb4
c00108a8:	83 c4 08             	add    esp,0x8
c00108ab:	5b                   	pop    ebx
c00108ac:	e9 59 a0 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c00108b1:	83 c4 08             	add    esp,0x8
c00108b4:	5b                   	pop    ebx
c00108b5:	c3                   	ret    

c00108b6 <CPU::open(int, int, void*)>:
c00108b6:	55                   	push   ebp
c00108b7:	57                   	push   edi
c00108b8:	56                   	push   esi
c00108b9:	53                   	push   ebx
c00108ba:	83 ec 18             	sub    esp,0x18
c00108bd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00108c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00108c5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00108c9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00108cf:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00108d5:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c00108db:	50                   	push   eax
c00108dc:	e8 fd 6a ff ff       	call   c00073de <GDT::setup()>
c00108e1:	83 c4 0c             	add    esp,0xc
c00108e4:	6a 00                	push   0x0
c00108e6:	68 ef be ad de       	push   0xdeadbeef
c00108eb:	55                   	push   ebp
c00108ec:	e8 7f 86 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c00108f1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00108f4:	e8 57 86 ff ff       	call   c0008f50 <TSS::flush()>
c00108f9:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00108ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0010902:	e8 3b 6d ff ff       	call   c0007642 <IDT::setup()>
c0010907:	b8 00 04 00 00       	mov    eax,0x400
c001090c:	0f 23 f8             	mov    db7,eax
c001090f:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010919:	e8 c4 74 ff ff       	call   c0007de2 <Phys::allocatePage()>
c001091e:	83 c4 10             	add    esp,0x10
c0010921:	85 f6                	test   esi,esi
c0010923:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010929:	89 38                	mov    DWORD PTR [eax],edi
c001092b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010931:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010934:	74 10                	je     c0010946 <CPU::open(int, int, void*)+0x90>
c0010936:	50                   	push   eax
c0010937:	50                   	push   eax
c0010938:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001093e:	56                   	push   esi
c001093f:	e8 48 8f ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010944:	eb 0d                	jmp    c0010953 <CPU::open(int, int, void*)+0x9d>
c0010946:	83 ec 0c             	sub    esp,0xc
c0010949:	68 be 1b 02 c0       	push   0xc0021bbe
c001094e:	e8 72 08 00 00       	call   c00111c5 <KePanic(char const*)>
c0010953:	83 c4 10             	add    esp,0x10
c0010956:	83 ec 0c             	sub    esp,0xc
c0010959:	68 cc 1b 02 c0       	push   0xc0021bcc
c001095e:	e8 8e 01 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c0010963:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010966:	e8 07 f7 ff ff       	call   c0010072 <CPU::detectFeatures()>
c001096b:	c7 04 24 ef 1b 02 c0 	mov    DWORD PTR [esp],0xc0021bef
c0010972:	e8 7a 01 00 00       	call   c0010af1 <KeSetBootMessage(char const*)>
c0010977:	e8 0b 72 00 00       	call   c0017b87 <HalInitialise()>
c001097c:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010981:	83 e0 10             	and    eax,0x10
c0010984:	83 f8 01             	cmp    eax,0x1
c0010987:	19 c0                	sbb    eax,eax
c0010989:	83 e0 46             	and    eax,0x46
c001098c:	83 c0 1e             	add    eax,0x1e
c001098f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010992:	e8 c2 d6 ff ff       	call   c000e059 <setupTimer(int)>
c0010997:	83 c4 10             	add    esp,0x10
c001099a:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c00109a1:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00109a7:	74 0c                	je     c00109b5 <CPU::open(int, int, void*)+0xff>
c00109a9:	83 ec 0c             	sub    esp,0xc
c00109ac:	53                   	push   ebx
c00109ad:	e8 38 fe ff ff       	call   c00107ea <CPU::setupFeatures()>
c00109b2:	83 c4 10             	add    esp,0x10
c00109b5:	83 c4 0c             	add    esp,0xc
c00109b8:	31 c0                	xor    eax,eax
c00109ba:	5b                   	pop    ebx
c00109bb:	5e                   	pop    esi
c00109bc:	5f                   	pop    edi
c00109bd:	5d                   	pop    ebp
c00109be:	c3                   	ret    

c00109bf <KeInitialiseAtexit()>:
c00109bf:	83 ec 10             	sub    esp,0x10
c00109c2:	6a 60                	push   0x60
c00109c4:	6a 00                	push   0x0
c00109c6:	68 20 8e 02 c0       	push   0xc0028e20
c00109cb:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c00109d5:	e8 16 fb fe ff       	call   c00004f0 <memset>
c00109da:	83 c4 1c             	add    esp,0x1c
c00109dd:	c3                   	ret    

c00109de <KeRegisterAtexit(void (*)(void*), void*)>:
c00109de:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c00109e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00109e7:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c00109ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00109f2:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c00109f9:	40                   	inc    eax
c00109fa:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c00109ff:	83 f8 17             	cmp    eax,0x17
c0010a02:	7e 0d                	jle    c0010a11 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010a04:	c7 44 24 04 30 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c30
c0010a0c:	e9 b4 07 00 00       	jmp    c00111c5 <KePanic(char const*)>
c0010a11:	c3                   	ret    

c0010a12 <KeExecuteAtexit()>:
c0010a12:	53                   	push   ebx
c0010a13:	31 db                	xor    ebx,ebx
c0010a15:	83 ec 08             	sub    esp,0x8
c0010a18:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010a1e:	7e 50                	jle    c0010a70 <KeExecuteAtexit()+0x5e>
c0010a20:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010a27:	85 c0                	test   eax,eax
c0010a29:	74 42                	je     c0010a6d <KeExecuteAtexit()+0x5b>
c0010a2b:	51                   	push   ecx
c0010a2c:	50                   	push   eax
c0010a2d:	53                   	push   ebx
c0010a2e:	68 49 1c 02 c0       	push   0xc0021c49
c0010a33:	e8 d2 9e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010a38:	58                   	pop    eax
c0010a39:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010a40:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010a47:	c7 04 24 6b 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c6b
c0010a4e:	e8 b7 9e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010a53:	c7 04 24 cb 2d 02 c0 	mov    DWORD PTR [esp],0xc0022dcb
c0010a5a:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010a65:	e8 a0 9e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010a6a:	83 c4 10             	add    esp,0x10
c0010a6d:	43                   	inc    ebx
c0010a6e:	eb a8                	jmp    c0010a18 <KeExecuteAtexit()+0x6>
c0010a70:	83 c4 08             	add    esp,0x8
c0010a73:	5b                   	pop    ebx
c0010a74:	c3                   	ret    

c0010a75 <KeDisplaySplashScreen()>:
c0010a75:	55                   	push   ebp
c0010a76:	bd 05 00 00 00       	mov    ebp,0x5
c0010a7b:	57                   	push   edi
c0010a7c:	bf 0a 00 00 00       	mov    edi,0xa
c0010a81:	56                   	push   esi
c0010a82:	31 f6                	xor    esi,esi
c0010a84:	53                   	push   ebx
c0010a85:	31 db                	xor    ebx,ebx
c0010a87:	83 ec 0c             	sub    esp,0xc
c0010a8a:	0f b6 96 20 30 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcfe0]
c0010a91:	85 d2                	test   edx,edx
c0010a93:	89 d0                	mov    eax,edx
c0010a95:	74 52                	je     c0010ae9 <KeDisplaySplashScreen()+0x74>
c0010a97:	80 bb 56 30 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcfaa],0xdb
c0010a9e:	75 13                	jne    c0010ab3 <KeDisplaySplashScreen()+0x3e>
c0010aa0:	0f b6 8b 55 30 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcfab]
c0010aa7:	83 e1 fe             	and    ecx,0xfffffffe
c0010aaa:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010ab0:	75 01                	jne    c0010ab3 <KeDisplaySplashScreen()+0x3e>
c0010ab2:	47                   	inc    edi
c0010ab3:	83 fa 0d             	cmp    edx,0xd
c0010ab6:	74 28                	je     c0010ae0 <KeDisplaySplashScreen()+0x6b>
c0010ab8:	83 fa 0a             	cmp    edx,0xa
c0010abb:	75 0a                	jne    c0010ac7 <KeDisplaySplashScreen()+0x52>
c0010abd:	45                   	inc    ebp
c0010abe:	bf 0a 00 00 00       	mov    edi,0xa
c0010ac3:	31 db                	xor    ebx,ebx
c0010ac5:	eb 19                	jmp    c0010ae0 <KeDisplaySplashScreen()+0x6b>
c0010ac7:	83 ec 0c             	sub    esp,0xc
c0010aca:	0f be c0             	movsx  eax,al
c0010acd:	55                   	push   ebp
c0010ace:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010ad1:	43                   	inc    ebx
c0010ad2:	52                   	push   edx
c0010ad3:	6a 00                	push   0x0
c0010ad5:	6a 0e                	push   0xe
c0010ad7:	50                   	push   eax
c0010ad8:	e8 27 7d 00 00       	call   c0018804 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010add:	83 c4 20             	add    esp,0x20
c0010ae0:	46                   	inc    esi
c0010ae1:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010ae7:	75 a1                	jne    c0010a8a <KeDisplaySplashScreen()+0x15>
c0010ae9:	83 c4 0c             	add    esp,0xc
c0010aec:	5b                   	pop    ebx
c0010aed:	5e                   	pop    esi
c0010aee:	5f                   	pop    edi
c0010aef:	5d                   	pop    ebp
c0010af0:	c3                   	ret    

c0010af1 <KeSetBootMessage(char const*)>:
c0010af1:	57                   	push   edi
c0010af2:	56                   	push   esi
c0010af3:	53                   	push   ebx
c0010af4:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010afa:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010b01:	68 9e 00 00 00       	push   0x9e
c0010b06:	6a 00                	push   0x0
c0010b08:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010b0c:	56                   	push   esi
c0010b0d:	e8 de f9 fe ff       	call   c00004f0 <memset>
c0010b12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b15:	e8 66 fa fe ff       	call   c0000580 <strlen>
c0010b1a:	ba 50 00 00 00       	mov    edx,0x50
c0010b1f:	83 c4 10             	add    esp,0x10
c0010b22:	31 c9                	xor    ecx,ecx
c0010b24:	29 c2                	sub    edx,eax
c0010b26:	83 e2 fe             	and    edx,0xfffffffe
c0010b29:	01 f2                	add    edx,esi
c0010b2b:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010b30:	84 c0                	test   al,al
c0010b32:	74 0a                	je     c0010b3e <KeSetBootMessage(char const*)+0x4d>
c0010b34:	80 cc 0f             	or     ah,0xf
c0010b37:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010b3b:	41                   	inc    ecx
c0010b3c:	eb ed                	jmp    c0010b2b <KeSetBootMessage(char const*)+0x3a>
c0010b3e:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010b43:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010b48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b4a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010b50:	5b                   	pop    ebx
c0010b51:	5e                   	pop    esi
c0010b52:	5f                   	pop    edi
c0010b53:	c3                   	ret    

c0010b54 <Krnl::handlePowerButton()>:
c0010b54:	83 ec 0c             	sub    esp,0xc
c0010b57:	e8 c4 06 00 00       	call   c0011220 <KeHandlePowerButton()>
c0010b5c:	90                   	nop
c0010b5d:	83 c4 0c             	add    esp,0xc
c0010b60:	c3                   	ret    
c0010b61:	8d 76 00             	lea    esi,[esi+0x0]

c0010b64 <Krnl::handleSleepButton()>:
c0010b64:	83 ec 0c             	sub    esp,0xc
c0010b67:	e8 e9 06 00 00       	call   c0011255 <KeHandleSleepButton()>
c0010b6c:	90                   	nop
c0010b6d:	83 c4 0c             	add    esp,0xc
c0010b70:	c3                   	ret    
c0010b71:	90                   	nop

c0010b72 <EnvVarContainer::getEnv(char const*)>:
c0010b72:	57                   	push   edi
c0010b73:	56                   	push   esi
c0010b74:	53                   	push   ebx
c0010b75:	31 db                	xor    ebx,ebx
c0010b77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b7b:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010b7d:	7e 2b                	jle    c0010baa <EnvVarContainer::getEnv(char const*)+0x38>
c0010b7f:	50                   	push   eax
c0010b80:	50                   	push   eax
c0010b81:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010b84:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010b8b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010b8e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010b92:	e8 e9 fb fe ff       	call   c0000780 <strcmp>
c0010b97:	83 c4 10             	add    esp,0x10
c0010b9a:	85 c0                	test   eax,eax
c0010b9c:	75 09                	jne    c0010ba7 <EnvVarContainer::getEnv(char const*)+0x35>
c0010b9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ba1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010ba5:	eb 05                	jmp    c0010bac <EnvVarContainer::getEnv(char const*)+0x3a>
c0010ba7:	43                   	inc    ebx
c0010ba8:	eb d1                	jmp    c0010b7b <EnvVarContainer::getEnv(char const*)+0x9>
c0010baa:	31 c0                	xor    eax,eax
c0010bac:	5b                   	pop    ebx
c0010bad:	5e                   	pop    esi
c0010bae:	5f                   	pop    edi
c0010baf:	c3                   	ret    

c0010bb0 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010bb0:	55                   	push   ebp
c0010bb1:	57                   	push   edi
c0010bb2:	56                   	push   esi
c0010bb3:	53                   	push   ebx
c0010bb4:	83 ec 28             	sub    esp,0x28
c0010bb7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010bbb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010bbf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010bc3:	56                   	push   esi
c0010bc4:	e8 b7 f9 fe ff       	call   c0000580 <strlen>
c0010bc9:	40                   	inc    eax
c0010bca:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bcd:	e8 01 6f ff ff       	call   c0007ad3 <malloc>
c0010bd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bd5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010bd9:	e8 a2 f9 fe ff       	call   c0000580 <strlen>
c0010bde:	40                   	inc    eax
c0010bdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0010be2:	e8 ec 6e ff ff       	call   c0007ad3 <malloc>
c0010be7:	89 34 24             	mov    DWORD PTR [esp],esi
c0010bea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010bee:	e8 8d f9 fe ff       	call   c0000580 <strlen>
c0010bf3:	83 c4 0c             	add    esp,0xc
c0010bf6:	40                   	inc    eax
c0010bf7:	50                   	push   eax
c0010bf8:	6a 00                	push   0x0
c0010bfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010bfe:	e8 ed f8 fe ff       	call   c00004f0 <memset>
c0010c03:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c06:	e8 75 f9 fe ff       	call   c0000580 <strlen>
c0010c0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c0f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c17:	89 de                	mov    esi,ebx
c0010c19:	e8 62 f9 fe ff       	call   c0000580 <strlen>
c0010c1e:	83 c4 0c             	add    esp,0xc
c0010c21:	40                   	inc    eax
c0010c22:	50                   	push   eax
c0010c23:	6a 00                	push   0x0
c0010c25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c29:	e8 c2 f8 fe ff       	call   c00004f0 <memset>
c0010c2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c31:	e8 4a f9 fe ff       	call   c0000580 <strlen>
c0010c36:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010c3a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c3f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010c42:	40                   	inc    eax
c0010c43:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010c46:	c1 e0 03             	shl    eax,0x3
c0010c49:	5a                   	pop    edx
c0010c4a:	59                   	pop    ecx
c0010c4b:	50                   	push   eax
c0010c4c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010c4f:	e8 6b 6e ff ff       	call   c0007abf <realloc>
c0010c54:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010c57:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010c5b:	b9 08 00 00 00       	mov    ecx,0x8
c0010c60:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010c63:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010c67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c69:	83 c4 2c             	add    esp,0x2c
c0010c6c:	5b                   	pop    ebx
c0010c6d:	5e                   	pop    esi
c0010c6e:	5f                   	pop    edi
c0010c6f:	5d                   	pop    ebp
c0010c70:	c3                   	ret    
c0010c71:	90                   	nop

c0010c72 <EnvVarContainer::deleteEnv(char const*)>:
c0010c72:	c3                   	ret    
c0010c73:	90                   	nop

c0010c74 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010c74:	55                   	push   ebp
c0010c75:	57                   	push   edi
c0010c76:	56                   	push   esi
c0010c77:	53                   	push   ebx
c0010c78:	81 ec 38 01 00 00    	sub    esp,0x138
c0010c7e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010c85:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010c8c:	68 14 01 00 00       	push   0x114
c0010c91:	e8 3d 6e ff ff       	call   c0007ad3 <malloc>
c0010c96:	83 c4 0c             	add    esp,0xc
c0010c99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010c9c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010ca3:	89 c3                	mov    ebx,eax
c0010ca5:	50                   	push   eax
c0010ca6:	e8 6d aa ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0010cab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cae:	e8 e5 ad ff ff       	call   c000ba98 <File::exists()>
c0010cb3:	83 c4 10             	add    esp,0x10
c0010cb6:	84 c0                	test   al,al
c0010cb8:	75 31                	jne    c0010ceb <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010cba:	50                   	push   eax
c0010cbb:	50                   	push   eax
c0010cbc:	6a 12                	push   0x12
c0010cbe:	53                   	push   ebx
c0010cbf:	e8 10 ab ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0010cc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cc6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010cc9:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ccc:	e8 af f8 fe ff       	call   c0000580 <strlen>
c0010cd1:	5a                   	pop    edx
c0010cd2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010cd6:	52                   	push   edx
c0010cd7:	31 d2                	xor    edx,edx
c0010cd9:	56                   	push   esi
c0010cda:	52                   	push   edx
c0010cdb:	50                   	push   eax
c0010cdc:	53                   	push   ebx
c0010cdd:	ff d7                	call   edi
c0010cdf:	83 c4 14             	add    esp,0x14
c0010ce2:	53                   	push   ebx
c0010ce3:	e8 4a ab ff ff       	call   c000b832 <File::close()>
c0010ce8:	83 c4 10             	add    esp,0x10
c0010ceb:	56                   	push   esi
c0010cec:	31 f6                	xor    esi,esi
c0010cee:	68 00 01 00 00       	push   0x100
c0010cf3:	6a 00                	push   0x0
c0010cf5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010cf9:	50                   	push   eax
c0010cfa:	e8 f1 f7 fe ff       	call   c00004f0 <memset>
c0010cff:	5f                   	pop    edi
c0010d00:	58                   	pop    eax
c0010d01:	6a 01                	push   0x1
c0010d03:	53                   	push   ebx
c0010d04:	e8 cb aa ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0010d09:	83 c4 10             	add    esp,0x10
c0010d0c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010d14:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010d1c:	83 ec 0c             	sub    esp,0xc
c0010d1f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010d23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d25:	52                   	push   edx
c0010d26:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010d2a:	51                   	push   ecx
c0010d2b:	6a 00                	push   0x0
c0010d2d:	6a 01                	push   0x1
c0010d2f:	53                   	push   ebx
c0010d30:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010d33:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010d38:	83 c4 20             	add    esp,0x20
c0010d3b:	85 c0                	test   eax,eax
c0010d3d:	89 c1                	mov    ecx,eax
c0010d3f:	0f 84 36 01 00 00    	je     c0010e7b <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010d45:	83 f8 0d             	cmp    eax,0xd
c0010d48:	0f 84 22 01 00 00    	je     c0010e70 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010d4e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010d53:	0f 84 f0 00 00 00    	je     c0010e49 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010d59:	83 f8 0a             	cmp    eax,0xa
c0010d5c:	74 13                	je     c0010d71 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010d5e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010d63:	74 0c                	je     c0010d71 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010d65:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010d6b:	0f 8e f6 00 00 00    	jle    c0010e67 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010d71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d75:	83 ec 0c             	sub    esp,0xc
c0010d78:	8d 78 01             	lea    edi,[eax+0x1]
c0010d7b:	57                   	push   edi
c0010d7c:	e8 52 6d ff ff       	call   c0007ad3 <malloc>
c0010d81:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010d85:	8d 56 04             	lea    edx,[esi+0x4]
c0010d88:	89 14 24             	mov    DWORD PTR [esp],edx
c0010d8b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010d8f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010d93:	e8 3b 6d ff ff       	call   c0007ad3 <malloc>
c0010d98:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010d9c:	83 c4 0c             	add    esp,0xc
c0010d9f:	57                   	push   edi
c0010da0:	6a 00                	push   0x0
c0010da2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010da6:	e8 45 f7 fe ff       	call   c00004f0 <memset>
c0010dab:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010daf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010db3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010db7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010db9:	83 c4 0c             	add    esp,0xc
c0010dbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010dc0:	52                   	push   edx
c0010dc1:	6a 00                	push   0x0
c0010dc3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010dc7:	e8 24 f7 fe ff       	call   c00004f0 <memset>
c0010dcc:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010dd0:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010dd4:	89 34 24             	mov    DWORD PTR [esp],esi
c0010dd7:	e8 a4 f7 fe ff       	call   c0000580 <strlen>
c0010ddc:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010de0:	89 c1                	mov    ecx,eax
c0010de2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010de4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010de7:	83 c4 10             	add    esp,0x10
c0010dea:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010ded:	40                   	inc    eax
c0010dee:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010df1:	85 d2                	test   edx,edx
c0010df3:	75 0c                	jne    c0010e01 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010df5:	83 ec 0c             	sub    esp,0xc
c0010df8:	6a 08                	push   0x8
c0010dfa:	e8 d4 6c ff ff       	call   c0007ad3 <malloc>
c0010dff:	eb 0c                	jmp    c0010e0d <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010e01:	51                   	push   ecx
c0010e02:	51                   	push   ecx
c0010e03:	c1 e0 03             	shl    eax,0x3
c0010e06:	50                   	push   eax
c0010e07:	52                   	push   edx
c0010e08:	e8 b2 6c ff ff       	call   c0007abf <realloc>
c0010e0d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010e10:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010e13:	83 c4 10             	add    esp,0x10
c0010e16:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010e19:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010e1d:	b9 08 00 00 00       	mov    ecx,0x8
c0010e22:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010e26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e28:	50                   	push   eax
c0010e29:	31 f6                	xor    esi,esi
c0010e2b:	68 00 01 00 00       	push   0x100
c0010e30:	6a 00                	push   0x0
c0010e32:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010e36:	50                   	push   eax
c0010e37:	e8 b4 f6 fe ff       	call   c00004f0 <memset>
c0010e3c:	83 c4 10             	add    esp,0x10
c0010e3f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e47:	eb 27                	jmp    c0010e70 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e49:	83 f8 3d             	cmp    eax,0x3d
c0010e4c:	74 1e                	je     c0010e6c <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010e4e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e54:	7f 07                	jg     c0010e5d <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010e56:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010e5a:	46                   	inc    esi
c0010e5b:	eb 13                	jmp    c0010e70 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e5d:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010e65:	eb 09                	jmp    c0010e70 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e67:	83 f8 3d             	cmp    eax,0x3d
c0010e6a:	75 ea                	jne    c0010e56 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010e6c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010e70:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e75:	0f 85 99 fe ff ff    	jne    c0010d14 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010e7b:	83 ec 0c             	sub    esp,0xc
c0010e7e:	53                   	push   ebx
c0010e7f:	e8 ae a9 ff ff       	call   c000b832 <File::close()>
c0010e84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e89:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e8c:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010e92:	5b                   	pop    ebx
c0010e93:	5e                   	pop    esi
c0010e94:	5f                   	pop    edi
c0010e95:	5d                   	pop    ebp
c0010e96:	c3                   	ret    
c0010e97:	90                   	nop

c0010e98 <EnvVarContainer::__loadSystem()>:
c0010e98:	83 ec 10             	sub    esp,0x10
c0010e9b:	68 80 31 02 c0       	push   0xc0023180
c0010ea0:	68 70 1c 02 c0       	push   0xc0021c70
c0010ea5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ea9:	e8 c6 fd ff ff       	call   c0010c74 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010eae:	83 c4 1c             	add    esp,0x1c
c0010eb1:	c3                   	ret    

c0010eb2 <EnvVarContainer::__loadUser()>:
c0010eb2:	c3                   	ret    
c0010eb3:	90                   	nop

c0010eb4 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010eb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010eb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ec2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ec6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010ec9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ecd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ed4:	90                   	nop
c0010ed5:	c3                   	ret    

c0010ed6 <EnvVarContainer::~EnvVarContainer()>:
c0010ed6:	83 ec 0c             	sub    esp,0xc
c0010ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010edd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ee0:	85 c0                	test   eax,eax
c0010ee2:	74 1d                	je     c0010f01 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ee8:	8b 00                	mov    eax,DWORD PTR [eax]
c0010eea:	85 c0                	test   eax,eax
c0010eec:	74 13                	je     c0010f01 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ef2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ef5:	83 ec 0c             	sub    esp,0xc
c0010ef8:	50                   	push   eax
c0010ef9:	e8 e5 6b ff ff       	call   c0007ae3 <free>
c0010efe:	83 c4 10             	add    esp,0x10
c0010f01:	90                   	nop
c0010f02:	83 c4 0c             	add    esp,0xc
c0010f05:	c3                   	ret    

c0010f06 <KeGetEnv(Process*, char const*)>:
c0010f06:	53                   	push   ebx
c0010f07:	83 ec 08             	sub    esp,0x8
c0010f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f0e:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0010f14:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010f18:	74 04                	je     c0010f1e <KeGetEnv(Process*, char const*)+0x18>
c0010f1a:	85 c0                	test   eax,eax
c0010f1c:	75 0b                	jne    c0010f29 <KeGetEnv(Process*, char const*)+0x23>
c0010f1e:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0010f23:	85 c0                	test   eax,eax
c0010f25:	75 19                	jne    c0010f40 <KeGetEnv(Process*, char const*)+0x3a>
c0010f27:	eb 27                	jmp    c0010f50 <KeGetEnv(Process*, char const*)+0x4a>
c0010f29:	52                   	push   edx
c0010f2a:	52                   	push   edx
c0010f2b:	53                   	push   ebx
c0010f2c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010f32:	e8 3b fc ff ff       	call   c0010b72 <EnvVarContainer::getEnv(char const*)>
c0010f37:	83 c4 10             	add    esp,0x10
c0010f3a:	85 c0                	test   eax,eax
c0010f3c:	75 28                	jne    c0010f66 <KeGetEnv(Process*, char const*)+0x60>
c0010f3e:	eb de                	jmp    c0010f1e <KeGetEnv(Process*, char const*)+0x18>
c0010f40:	52                   	push   edx
c0010f41:	52                   	push   edx
c0010f42:	53                   	push   ebx
c0010f43:	50                   	push   eax
c0010f44:	e8 29 fc ff ff       	call   c0010b72 <EnvVarContainer::getEnv(char const*)>
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	85 c0                	test   eax,eax
c0010f4e:	75 16                	jne    c0010f66 <KeGetEnv(Process*, char const*)+0x60>
c0010f50:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010f54:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0010f59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010f5d:	83 c4 08             	add    esp,0x8
c0010f60:	5b                   	pop    ebx
c0010f61:	e9 0c fc ff ff       	jmp    c0010b72 <EnvVarContainer::getEnv(char const*)>
c0010f66:	83 c4 08             	add    esp,0x8
c0010f69:	5b                   	pop    ebx
c0010f6a:	c3                   	ret    

c0010f6b <KeSetEnvSystem(char const*, char const*)>:
c0010f6b:	83 ec 10             	sub    esp,0x10
c0010f6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f76:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0010f7c:	e8 2f fc ff ff       	call   c0010bb0 <EnvVarContainer::setEnv(char const*, char const*)>
c0010f81:	83 c4 1c             	add    esp,0x1c
c0010f84:	c3                   	ret    

c0010f85 <KeSetEnvUser(char const*, char const*)>:
c0010f85:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0010f8a:	85 c0                	test   eax,eax
c0010f8c:	74 15                	je     c0010fa3 <KeSetEnvUser(char const*, char const*)+0x1e>
c0010f8e:	83 ec 10             	sub    esp,0x10
c0010f91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f99:	50                   	push   eax
c0010f9a:	e8 11 fc ff ff       	call   c0010bb0 <EnvVarContainer::setEnv(char const*, char const*)>
c0010f9f:	83 c4 1c             	add    esp,0x1c
c0010fa2:	c3                   	ret    
c0010fa3:	c3                   	ret    

c0010fa4 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0010fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fa8:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fb2:	e9 f9 fb ff ff       	jmp    c0010bb0 <EnvVarContainer::setEnv(char const*, char const*)>

c0010fb7 <KeDeleteEnvSystem(char const*)>:
c0010fb7:	c3                   	ret    

c0010fb8 <KeDeleteEnvUser(char const*)>:
c0010fb8:	c3                   	ret    

c0010fb9 <KeDeleteEnvProcess(Process*, char const*)>:
c0010fb9:	c3                   	ret    

c0010fba <KeNewProcessEnv(Process*)>:
c0010fba:	83 ec 28             	sub    esp,0x28
c0010fbd:	6a 0c                	push   0xc
c0010fbf:	e8 0f 6b ff ff       	call   c0007ad3 <malloc>
c0010fc4:	5a                   	pop    edx
c0010fc5:	59                   	pop    ecx
c0010fc6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010fca:	50                   	push   eax
c0010fcb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fcf:	e8 e0 fe ff ff       	call   c0010eb4 <EnvVarContainer::EnvVarContainer(Process*)>
c0010fd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fd8:	83 c4 2c             	add    esp,0x2c
c0010fdb:	c3                   	ret    

c0010fdc <KeCopyProcessEnv(Process*, Process*)>:
c0010fdc:	57                   	push   edi
c0010fdd:	56                   	push   esi
c0010fde:	53                   	push   ebx
c0010fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe3:	83 ec 0c             	sub    esp,0xc
c0010fe6:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010fec:	6a 0c                	push   0xc
c0010fee:	e8 e0 6a ff ff       	call   c0007ad3 <malloc>
c0010ff3:	89 c3                	mov    ebx,eax
c0010ff5:	58                   	pop    eax
c0010ff6:	5a                   	pop    edx
c0010ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ffb:	53                   	push   ebx
c0010ffc:	e8 b3 fe ff ff       	call   c0010eb4 <EnvVarContainer::EnvVarContainer(Process*)>
c0011001:	8b 07                	mov    eax,DWORD PTR [edi]
c0011003:	89 03                	mov    DWORD PTR [ebx],eax
c0011005:	c1 e0 03             	shl    eax,0x3
c0011008:	89 04 24             	mov    DWORD PTR [esp],eax
c001100b:	e8 c3 6a ff ff       	call   c0007ad3 <malloc>
c0011010:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011013:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011015:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011018:	89 c7                	mov    edi,eax
c001101a:	c1 e1 03             	shl    ecx,0x3
c001101d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	89 d8                	mov    eax,ebx
c0011024:	5b                   	pop    ebx
c0011025:	5e                   	pop    esi
c0011026:	5f                   	pop    edi
c0011027:	c3                   	ret    

c0011028 <KeLoadSystemEnv()>:
c0011028:	53                   	push   ebx
c0011029:	83 ec 14             	sub    esp,0x14
c001102c:	6a 0c                	push   0xc
c001102e:	e8 a0 6a ff ff       	call   c0007ad3 <malloc>
c0011033:	89 c3                	mov    ebx,eax
c0011035:	58                   	pop    eax
c0011036:	5a                   	pop    edx
c0011037:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001103d:	53                   	push   ebx
c001103e:	e8 71 fe ff ff       	call   c0010eb4 <EnvVarContainer::EnvVarContainer(Process*)>
c0011043:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011046:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c001104c:	e8 47 fe ff ff       	call   c0010e98 <EnvVarContainer::__loadSystem()>
c0011051:	83 c4 18             	add    esp,0x18
c0011054:	5b                   	pop    ebx
c0011055:	c3                   	ret    

c0011056 <KeLoadUserEnv()>:
c0011056:	53                   	push   ebx
c0011057:	83 ec 14             	sub    esp,0x14
c001105a:	6a 0c                	push   0xc
c001105c:	e8 72 6a ff ff       	call   c0007ad3 <malloc>
c0011061:	89 c3                	mov    ebx,eax
c0011063:	58                   	pop    eax
c0011064:	5a                   	pop    edx
c0011065:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001106b:	53                   	push   ebx
c001106c:	e8 43 fe ff ff       	call   c0010eb4 <EnvVarContainer::EnvVarContainer(Process*)>
c0011071:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c0011077:	83 c4 18             	add    esp,0x18
c001107a:	5b                   	pop    ebx
c001107b:	c3                   	ret    

c001107c <KeFlushEnv()>:
c001107c:	c3                   	ret    

c001107d <KeGetProcessTotalEnvCount(Process*)>:
c001107d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011081:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c0011087:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001108d:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011092:	8b 00                	mov    eax,DWORD PTR [eax]
c0011094:	03 01                	add    eax,DWORD PTR [ecx]
c0011096:	85 d2                	test   edx,edx
c0011098:	74 02                	je     c001109c <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001109a:	03 02                	add    eax,DWORD PTR [edx]
c001109c:	c3                   	ret    

c001109d <KeGetProcessEnvPair(Process*, int)>:
c001109d:	57                   	push   edi
c001109e:	56                   	push   esi
c001109f:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c00110a5:	53                   	push   ebx
c00110a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110ae:	85 f6                	test   esi,esi
c00110b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00110b4:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00110ba:	8b 01                	mov    eax,DWORD PTR [ecx]
c00110bc:	75 16                	jne    c00110d4 <KeGetProcessEnvPair(Process*, int)+0x37>
c00110be:	39 c2                	cmp    edx,eax
c00110c0:	7c 16                	jl     c00110d8 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00110c2:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c00110c8:	8b 31                	mov    esi,DWORD PTR [ecx]
c00110ca:	01 c6                	add    esi,eax
c00110cc:	39 d6                	cmp    esi,edx
c00110ce:	7e 3c                	jle    c001110c <KeGetProcessEnvPair(Process*, int)+0x6f>
c00110d0:	29 c2                	sub    edx,eax
c00110d2:	eb 04                	jmp    c00110d8 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00110d4:	39 c2                	cmp    edx,eax
c00110d6:	7d 05                	jge    c00110dd <KeGetProcessEnvPair(Process*, int)+0x40>
c00110d8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00110db:	eb 20                	jmp    c00110fd <KeGetProcessEnvPair(Process*, int)+0x60>
c00110dd:	8b 3e                	mov    edi,DWORD PTR [esi]
c00110df:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00110e2:	39 d1                	cmp    ecx,edx
c00110e4:	7e 04                	jle    c00110ea <KeGetProcessEnvPair(Process*, int)+0x4d>
c00110e6:	29 c2                	sub    edx,eax
c00110e8:	eb 10                	jmp    c00110fa <KeGetProcessEnvPair(Process*, int)+0x5d>
c00110ea:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c00110f0:	03 0e                	add    ecx,DWORD PTR [esi]
c00110f2:	39 d1                	cmp    ecx,edx
c00110f4:	7e 16                	jle    c001110c <KeGetProcessEnvPair(Process*, int)+0x6f>
c00110f6:	29 c2                	sub    edx,eax
c00110f8:	29 fa                	sub    edx,edi
c00110fa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00110fd:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011100:	8b 02                	mov    eax,DWORD PTR [edx]
c0011102:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011105:	89 03                	mov    DWORD PTR [ebx],eax
c0011107:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001110a:	eb 1d                	jmp    c0011129 <KeGetProcessEnvPair(Process*, int)+0x8c>
c001110c:	83 ec 0c             	sub    esp,0xc
c001110f:	68 92 1c 02 c0       	push   0xc0021c92
c0011114:	e8 ac 00 00 00       	call   c00111c5 <KePanic(char const*)>
c0011119:	83 c4 10             	add    esp,0x10
c001111c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011122:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011129:	89 d8                	mov    eax,ebx
c001112b:	5b                   	pop    ebx
c001112c:	5e                   	pop    esi
c001112d:	5f                   	pop    edi
c001112e:	c2 04 00             	ret    0x4

c0011131 <CPU::current()>:
c0011131:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011136:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001113c:	c3                   	ret    

c001113d <operator new(unsigned long)>:
c001113d:	e9 91 69 ff ff       	jmp    c0007ad3 <malloc>

c0011142 <operator delete(void*)>:
c0011142:	e9 ac 69 ff ff       	jmp    c0007af3 <rfree>

c0011147 <disableIRQs()>:
c0011147:	fa                   	cli    
c0011148:	c3                   	ret    

c0011149 <enableIRQs()>:
c0011149:	fb                   	sti    
c001114a:	c3                   	ret    

c001114b <lockScheduler()>:
c001114b:	fa                   	cli    
c001114c:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011152:	c3                   	ret    

c0011153 <unlockScheduler()>:
c0011153:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011158:	48                   	dec    eax
c0011159:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001115e:	75 01                	jne    c0011161 <unlockScheduler()+0xe>
c0011160:	fb                   	sti    
c0011161:	c3                   	ret    

c0011162 <lockStuff()>:
c0011162:	fa                   	cli    
c0011163:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011169:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c001116f:	c3                   	ret    

c0011170 <unlockStuff()>:
c0011170:	83 ec 0c             	sub    esp,0xc
c0011173:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0011178:	48                   	dec    eax
c0011179:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001117e:	75 18                	jne    c0011198 <unlockStuff()+0x28>
c0011180:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c0011187:	74 0f                	je     c0011198 <unlockStuff()+0x28>
c0011189:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0011193:	e8 30 49 00 00       	call   c0015ac8 <schedule()>
c0011198:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001119d:	48                   	dec    eax
c001119e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00111a3:	75 01                	jne    c00111a6 <unlockStuff()+0x36>
c00111a5:	fb                   	sti    
c00111a6:	83 c4 0c             	add    esp,0xc
c00111a9:	c3                   	ret    

c00111aa <Virt::getAKernelVAS()>:
c00111aa:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c00111af:	c3                   	ret    

c00111b0 <__not_memcpy>:
c00111b0:	57                   	push   edi
c00111b1:	56                   	push   esi
c00111b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00111be:	89 c7                	mov    edi,eax
c00111c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111c2:	5e                   	pop    esi
c00111c3:	5f                   	pop    edi
c00111c4:	c3                   	ret    

c00111c5 <KePanic(char const*)>:
c00111c5:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c00111cc:	e9 87 68 00 00       	jmp    c0017a58 <HalPanic(char const*)>

c00111d1 <KePowerThread(void*)>:
c00111d1:	83 ec 0c             	sub    esp,0xc
c00111d4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00111d9:	48                   	dec    eax
c00111da:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00111df:	75 01                	jne    c00111e2 <KePowerThread(void*)+0x11>
c00111e1:	fb                   	sti    
c00111e2:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00111e9:	83 ec 0c             	sub    esp,0xc
c00111ec:	6a 0a                	push   0xa
c00111ee:	e8 05 4c 00 00       	call   c0015df8 <sleep(unsigned int)>
c00111f3:	83 c4 10             	add    esp,0x10
c00111f6:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c00111fd:	eb e3                	jmp    c00111e2 <KePowerThread(void*)+0x11>

c00111ff <KeChangePowerSettings(PowerSettings)>:
c00111ff:	57                   	push   edi
c0011200:	b9 09 00 00 00       	mov    ecx,0x9
c0011205:	56                   	push   esi
c0011206:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c001120b:	fc                   	cld    
c001120c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011210:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011212:	5e                   	pop    esi
c0011213:	5f                   	pop    edi
c0011214:	c3                   	ret    

c0011215 <KeUserIOReceived()>:
c0011215:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c001121f:	c3                   	ret    

c0011220 <KeHandlePowerButton()>:
c0011220:	83 ec 0c             	sub    esp,0xc
c0011223:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0011228:	83 f8 02             	cmp    eax,0x2
c001122b:	75 10                	jne    c001123d <KeHandlePowerButton()+0x1d>
c001122d:	83 ec 0c             	sub    esp,0xc
c0011230:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011236:	e8 0f 5f ff ff       	call   c000714a <Computer::shutdown()>
c001123b:	eb 11                	jmp    c001124e <KeHandlePowerButton()+0x2e>
c001123d:	48                   	dec    eax
c001123e:	75 11                	jne    c0011251 <KeHandlePowerButton()+0x31>
c0011240:	83 ec 0c             	sub    esp,0xc
c0011243:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011249:	e8 2c 5f ff ff       	call   c000717a <Computer::sleep()>
c001124e:	83 c4 10             	add    esp,0x10
c0011251:	83 c4 0c             	add    esp,0xc
c0011254:	c3                   	ret    

c0011255 <KeHandleSleepButton()>:
c0011255:	83 ec 0c             	sub    esp,0xc
c0011258:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c001125d:	83 f8 02             	cmp    eax,0x2
c0011260:	75 10                	jne    c0011272 <KeHandleSleepButton()+0x1d>
c0011262:	83 ec 0c             	sub    esp,0xc
c0011265:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001126b:	e8 da 5e ff ff       	call   c000714a <Computer::shutdown()>
c0011270:	eb 11                	jmp    c0011283 <KeHandleSleepButton()+0x2e>
c0011272:	48                   	dec    eax
c0011273:	75 11                	jne    c0011286 <KeHandleSleepButton()+0x31>
c0011275:	83 ec 0c             	sub    esp,0xc
c0011278:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001127e:	e8 f7 5e ff ff       	call   c000717a <Computer::sleep()>
c0011283:	83 c4 10             	add    esp,0x10
c0011286:	83 c4 0c             	add    esp,0xc
c0011289:	c3                   	ret    

c001128a <KeSetupPowerManager()>:
c001128a:	83 ec 0c             	sub    esp,0xc
c001128d:	68 f0 00 00 00       	push   0xf0
c0011292:	6a 00                	push   0x0
c0011294:	68 d1 11 01 c0       	push   0xc00111d1
c0011299:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001129f:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00112a9:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00112b0:	e8 c7 45 00 00       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c00112b5:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c00112bf:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c00112c9:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c00112d3:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c00112dd:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c00112e7:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c00112f1:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c00112fb:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c0011305:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c001130f:	83 c4 1c             	add    esp,0x1c
c0011312:	c3                   	ret    

c0011313 <KeRand()>:
c0011313:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c001131d:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c0011327:	53                   	push   ebx
c0011328:	01 c1                	add    ecx,eax
c001132a:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001132f:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c0011335:	01 ca                	add    edx,ecx
c0011337:	05 ef 04 b5 00       	add    eax,0xb504ef
c001133c:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011341:	83 d2 00             	adc    edx,0x0
c0011344:	0f b7 da             	movzx  ebx,dx
c0011347:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c001134d:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0011351:	5b                   	pop    ebx
c0011352:	c3                   	ret    

c0011353 <KeSeedRand(unsigned int)>:
c0011353:	53                   	push   ebx
c0011354:	83 ec 08             	sub    esp,0x8
c0011357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001135b:	e8 17 6a 00 00       	call   c0017d77 <HalGetRand()>
c0011360:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c001136a:	31 d8                	xor    eax,ebx
c001136c:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011371:	e8 9d ff ff ff       	call   c0011313 <KeRand()>
c0011376:	83 c4 08             	add    esp,0x8
c0011379:	5b                   	pop    ebx
c001137a:	eb 97                	jmp    c0011313 <KeRand()>

c001137c <KeInitRand()>:
c001137c:	83 ec 0c             	sub    esp,0xc
c001137f:	e8 e8 67 00 00       	call   c0017b6c <HalQueryPerformanceCounter()>
c0011384:	0f 20 da             	mov    edx,cr3
c0011387:	0f 22 da             	mov    cr3,edx
c001138a:	0f 20 da             	mov    edx,cr3
c001138d:	0f 22 da             	mov    cr3,edx
c0011390:	0f 20 da             	mov    edx,cr3
c0011393:	0f 22 da             	mov    cr3,edx
c0011396:	0f 20 da             	mov    edx,cr3
c0011399:	0f 22 da             	mov    cr3,edx
c001139c:	83 ec 0c             	sub    esp,0xc
c001139f:	35 03 8a 95 38       	xor    eax,0x38958a03
c00113a4:	50                   	push   eax
c00113a5:	e8 a9 ff ff ff       	call   c0011353 <KeSeedRand(unsigned int)>
c00113aa:	83 c4 1c             	add    esp,0x1c
c00113ad:	c3                   	ret    
c00113ae:	66 90                	xchg   ax,ax

c00113b0 <KeResolveCompatibilitySymbol(char*)>:
c00113b0:	83 ec 0c             	sub    esp,0xc
c00113b3:	83 ec 08             	sub    esp,0x8
c00113b6:	68 ac 1c 02 c0       	push   0xc0021cac
c00113bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113bf:	e8 bc f3 fe ff       	call   c0000780 <strcmp>
c00113c4:	83 c4 10             	add    esp,0x10
c00113c7:	85 c0                	test   eax,eax
c00113c9:	0f 94 c0             	sete   al
c00113cc:	0f b6 c0             	movzx  eax,al
c00113cf:	85 c0                	test   eax,eax
c00113d1:	74 0d                	je     c00113e0 <KeResolveCompatibilitySymbol(char*)+0x30>
c00113d3:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c00113d8:	e9 8b 01 00 00       	jmp    c0011568 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00113dd:	8d 76 00             	lea    esi,[esi+0x0]
c00113e0:	83 ec 08             	sub    esp,0x8
c00113e3:	68 b5 1c 02 c0       	push   0xc0021cb5
c00113e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113ec:	e8 8f f3 fe ff       	call   c0000780 <strcmp>
c00113f1:	83 c4 10             	add    esp,0x10
c00113f4:	85 c0                	test   eax,eax
c00113f6:	0f 94 c0             	sete   al
c00113f9:	0f b6 c0             	movzx  eax,al
c00113fc:	85 c0                	test   eax,eax
c00113fe:	74 0c                	je     c001140c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011400:	b8 80 f1 01 c0       	mov    eax,0xc001f180
c0011405:	e9 5e 01 00 00       	jmp    c0011568 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001140a:	66 90                	xchg   ax,ax
c001140c:	83 ec 08             	sub    esp,0x8
c001140f:	68 bf 1c 02 c0       	push   0xc0021cbf
c0011414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011418:	e8 63 f3 fe ff       	call   c0000780 <strcmp>
c001141d:	83 c4 10             	add    esp,0x10
c0011420:	85 c0                	test   eax,eax
c0011422:	0f 94 c0             	sete   al
c0011425:	0f b6 c0             	movzx  eax,al
c0011428:	85 c0                	test   eax,eax
c001142a:	74 0c                	je     c0011438 <KeResolveCompatibilitySymbol(char*)+0x88>
c001142c:	b8 b4 ee 01 c0       	mov    eax,0xc001eeb4
c0011431:	e9 32 01 00 00       	jmp    c0011568 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011436:	66 90                	xchg   ax,ax
c0011438:	83 ec 08             	sub    esp,0x8
c001143b:	68 c8 1c 02 c0       	push   0xc0021cc8
c0011440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011444:	e8 37 f3 fe ff       	call   c0000780 <strcmp>
c0011449:	83 c4 10             	add    esp,0x10
c001144c:	85 c0                	test   eax,eax
c001144e:	0f 94 c0             	sete   al
c0011451:	0f b6 c0             	movzx  eax,al
c0011454:	85 c0                	test   eax,eax
c0011456:	74 0c                	je     c0011464 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011458:	b8 c5 11 01 c0       	mov    eax,0xc00111c5
c001145d:	e9 06 01 00 00       	jmp    c0011568 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011462:	66 90                	xchg   ax,ax
c0011464:	83 ec 08             	sub    esp,0x8
c0011467:	68 db 1c 02 c0       	push   0xc0021cdb
c001146c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011470:	e8 0b f3 fe ff       	call   c0000780 <strcmp>
c0011475:	83 c4 10             	add    esp,0x10
c0011478:	85 c0                	test   eax,eax
c001147a:	0f 94 c0             	sete   al
c001147d:	0f b6 c0             	movzx  eax,al
c0011480:	85 c0                	test   eax,eax
c0011482:	74 0c                	je     c0011490 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011484:	b8 f1 0a 01 c0       	mov    eax,0xc0010af1
c0011489:	e9 da 00 00 00       	jmp    c0011568 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001148e:	66 90                	xchg   ax,ax
c0011490:	83 ec 08             	sub    esp,0x8
c0011493:	68 f8 1c 02 c0       	push   0xc0021cf8
c0011498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001149c:	e8 df f2 fe ff       	call   c0000780 <strcmp>
c00114a1:	83 c4 10             	add    esp,0x10
c00114a4:	85 c0                	test   eax,eax
c00114a6:	0f 94 c0             	sete   al
c00114a9:	0f b6 c0             	movzx  eax,al
c00114ac:	85 c0                	test   eax,eax
c00114ae:	74 0c                	je     c00114bc <KeResolveCompatibilitySymbol(char*)+0x10c>
c00114b0:	b8 80 f2 01 c0       	mov    eax,0xc001f280
c00114b5:	e9 ae 00 00 00       	jmp    c0011568 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114ba:	66 90                	xchg   ax,ax
c00114bc:	83 ec 08             	sub    esp,0x8
c00114bf:	68 02 1d 02 c0       	push   0xc0021d02
c00114c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114c8:	e8 b3 f2 fe ff       	call   c0000780 <strcmp>
c00114cd:	83 c4 10             	add    esp,0x10
c00114d0:	85 c0                	test   eax,eax
c00114d2:	0f 94 c0             	sete   al
c00114d5:	0f b6 c0             	movzx  eax,al
c00114d8:	85 c0                	test   eax,eax
c00114da:	74 0c                	je     c00114e8 <KeResolveCompatibilitySymbol(char*)+0x138>
c00114dc:	b8 00 f0 01 c0       	mov    eax,0xc001f000
c00114e1:	e9 82 00 00 00       	jmp    c0011568 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114e6:	66 90                	xchg   ax,ax
c00114e8:	83 ec 08             	sub    esp,0x8
c00114eb:	68 0b 1d 02 c0       	push   0xc0021d0b
c00114f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f4:	e8 87 f2 fe ff       	call   c0000780 <strcmp>
c00114f9:	83 c4 10             	add    esp,0x10
c00114fc:	85 c0                	test   eax,eax
c00114fe:	0f 94 c0             	sete   al
c0011501:	0f b6 c0             	movzx  eax,al
c0011504:	85 c0                	test   eax,eax
c0011506:	74 08                	je     c0011510 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011508:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c001150d:	eb 59                	jmp    c0011568 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001150f:	90                   	nop
c0011510:	83 ec 08             	sub    esp,0x8
c0011513:	68 23 1d 02 c0       	push   0xc0021d23
c0011518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001151c:	e8 5f f2 fe ff       	call   c0000780 <strcmp>
c0011521:	83 c4 10             	add    esp,0x10
c0011524:	85 c0                	test   eax,eax
c0011526:	0f 94 c0             	sete   al
c0011529:	0f b6 c0             	movzx  eax,al
c001152c:	85 c0                	test   eax,eax
c001152e:	74 08                	je     c0011538 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011530:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011535:	eb 31                	jmp    c0011568 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011537:	90                   	nop
c0011538:	83 ec 08             	sub    esp,0x8
c001153b:	68 30 1d 02 c0       	push   0xc0021d30
c0011540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011544:	e8 37 f2 fe ff       	call   c0000780 <strcmp>
c0011549:	83 c4 10             	add    esp,0x10
c001154c:	85 c0                	test   eax,eax
c001154e:	0f 94 c0             	sete   al
c0011551:	0f b6 c0             	movzx  eax,al
c0011554:	85 c0                	test   eax,eax
c0011556:	74 08                	je     c0011560 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011558:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c001155d:	eb 09                	jmp    c0011568 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001155f:	90                   	nop
c0011560:	b8 00 00 00 00       	mov    eax,0x0
c0011565:	8d 76 00             	lea    esi,[esi+0x0]
c0011568:	83 c4 0c             	add    esp,0xc
c001156b:	c3                   	ret    

c001156c <KiSigKill(int)>:
c001156c:	83 ec 0c             	sub    esp,0xc
c001156f:	6a 00                	push   0x0
c0011571:	6a 00                	push   0x0
c0011573:	6a ff                	push   0xffffffff
c0011575:	6a 01                	push   0x1
c0011577:	e8 d6 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001157c:	83 c4 1c             	add    esp,0x1c
c001157f:	c3                   	ret    

c0011580 <KiDefaultSignalHandlerIgnore(int)>:
c0011580:	c3                   	ret    

c0011581 <KiDefaultSignalHandlerPause(int)>:
c0011581:	57                   	push   edi
c0011582:	b9 07 00 00 00       	mov    ecx,0x7
c0011587:	56                   	push   esi
c0011588:	be 79 1d 02 c0       	mov    esi,0xc0021d79
c001158d:	83 ec 24             	sub    esp,0x24
c0011590:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011594:	fc                   	cld    
c0011595:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011597:	8d 44 24 04          	lea    eax,[esp+0x4]
c001159b:	50                   	push   eax
c001159c:	6a 00                	push   0x0
c001159e:	6a 00                	push   0x0
c00115a0:	6a 27                	push   0x27
c00115a2:	e8 ab 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00115a7:	83 c4 34             	add    esp,0x34
c00115aa:	5e                   	pop    esi
c00115ab:	5f                   	pop    edi
c00115ac:	c3                   	ret    

c00115ad <KiDefaultSignalHandlerResume(int)>:
c00115ad:	57                   	push   edi
c00115ae:	b9 1d 00 00 00       	mov    ecx,0x1d
c00115b3:	56                   	push   esi
c00115b4:	be 95 1d 02 c0       	mov    esi,0xc0021d95
c00115b9:	83 ec 24             	sub    esp,0x24
c00115bc:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00115c0:	fc                   	cld    
c00115c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115c3:	8d 44 24 03          	lea    eax,[esp+0x3]
c00115c7:	50                   	push   eax
c00115c8:	6a 00                	push   0x0
c00115ca:	6a 00                	push   0x0
c00115cc:	6a 27                	push   0x27
c00115ce:	e8 7f 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00115d3:	83 c4 34             	add    esp,0x34
c00115d6:	5e                   	pop    esi
c00115d7:	5f                   	pop    edi
c00115d8:	c3                   	ret    

c00115d9 <KeDeinitSignals(SigHandlerBlock*)>:
c00115d9:	e9 05 65 ff ff       	jmp    c0007ae3 <free>

c00115de <KeInitSignals()>:
c00115de:	53                   	push   ebx
c00115df:	83 ec 14             	sub    esp,0x14
c00115e2:	68 c8 00 00 00       	push   0xc8
c00115e7:	e8 e7 64 ff ff       	call   c0007ad3 <malloc>
c00115ec:	83 c4 0c             	add    esp,0xc
c00115ef:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00115f9:	89 c3                	mov    ebx,eax
c00115fb:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011605:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001160b:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c001160f:	6a 20                	push   0x20
c0011611:	6a 00                	push   0x0
c0011613:	50                   	push   eax
c0011614:	e8 d7 ee fe ff       	call   c00004f0 <memset>
c0011619:	83 c4 0c             	add    esp,0xc
c001161c:	6a 44                	push   0x44
c001161e:	6a 00                	push   0x0
c0011620:	53                   	push   ebx
c0011621:	e8 ca ee fe ff       	call   c00004f0 <memset>
c0011626:	83 c4 18             	add    esp,0x18
c0011629:	89 d8                	mov    eax,ebx
c001162b:	5b                   	pop    ebx
c001162c:	c3                   	ret    

c001162d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c001162d:	53                   	push   ebx
c001162e:	b8 01 00 00 00       	mov    eax,0x1
c0011633:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011637:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001163b:	83 f9 10             	cmp    ecx,0x10
c001163e:	7f 21                	jg     c0011661 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011644:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011647:	89 03                	mov    DWORD PTR [ebx],eax
c0011649:	b8 01 00 00 00       	mov    eax,0x1
c001164e:	d3 e0                	shl    eax,cl
c0011650:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011654:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011657:	31 c0                	xor    eax,eax
c0011659:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011661:	5b                   	pop    ebx
c0011662:	c3                   	ret    

c0011663 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011663:	55                   	push   ebp
c0011664:	57                   	push   edi
c0011665:	bf 08 00 00 00       	mov    edi,0x8
c001166a:	56                   	push   esi
c001166b:	53                   	push   ebx
c001166c:	83 ec 18             	sub    esp,0x18
c001166f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011673:	68 b2 1d 02 c0       	push   0xc0021db2
c0011678:	e8 8d 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001167d:	83 c4 10             	add    esp,0x10
c0011680:	31 c9                	xor    ecx,ecx
c0011682:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011689:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c001168f:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011693:	99                   	cdq    
c0011694:	f7 ff                	idiv   edi
c0011696:	8d 42 24             	lea    eax,[edx+0x24]
c0011699:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c001169d:	85 f6                	test   esi,esi
c001169f:	75 1a                	jne    c00116bb <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00116a1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00116a5:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00116a9:	50                   	push   eax
c00116aa:	50                   	push   eax
c00116ab:	52                   	push   edx
c00116ac:	68 c3 1d 02 c0       	push   0xc0021dc3
c00116b1:	e8 54 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00116b6:	83 c4 10             	add    esp,0x10
c00116b9:	eb 1b                	jmp    c00116d6 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00116bb:	41                   	inc    ecx
c00116bc:	83 f9 08             	cmp    ecx,0x8
c00116bf:	75 ce                	jne    c001168f <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00116c1:	83 ec 0c             	sub    esp,0xc
c00116c4:	be 01 00 00 00       	mov    esi,0x1
c00116c9:	68 e4 1d 02 c0       	push   0xc0021de4
c00116ce:	e8 37 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00116d3:	83 c4 10             	add    esp,0x10
c00116d6:	83 c4 0c             	add    esp,0xc
c00116d9:	89 f0                	mov    eax,esi
c00116db:	5b                   	pop    ebx
c00116dc:	5e                   	pop    esi
c00116dd:	5f                   	pop    edi
c00116de:	5d                   	pop    ebp
c00116df:	c3                   	ret    

c00116e0 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00116e0:	55                   	push   ebp
c00116e1:	57                   	push   edi
c00116e2:	56                   	push   esi
c00116e3:	53                   	push   ebx
c00116e4:	51                   	push   ecx
c00116e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00116e9:	85 db                	test   ebx,ebx
c00116eb:	0f 84 bc 00 00 00    	je     c00117ad <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00116f1:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00116f8:	0f 84 af 00 00 00    	je     c00117ad <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00116fe:	31 c9                	xor    ecx,ecx
c0011700:	bf 08 00 00 00       	mov    edi,0x8
c0011705:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001170b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001170e:	99                   	cdq    
c001170f:	f7 ff                	idiv   edi
c0011711:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011718:	85 ed                	test   ebp,ebp
c001171a:	0f 84 9e 00 00 00    	je     c00117be <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011720:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011726:	89 e9                	mov    ecx,ebp
c0011728:	bf 01 00 00 00       	mov    edi,0x1
c001172d:	d3 e7                	shl    edi,cl
c001172f:	31 c9                	xor    ecx,ecx
c0011731:	89 04 24             	mov    DWORD PTR [esp],eax
c0011734:	b8 01 00 00 00       	mov    eax,0x1
c0011739:	d3 e0                	shl    eax,cl
c001173b:	85 04 24             	test   DWORD PTR [esp],eax
c001173e:	74 06                	je     c0011746 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011740:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011744:	75 67                	jne    c00117ad <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011746:	41                   	inc    ecx
c0011747:	83 f9 11             	cmp    ecx,0x11
c001174a:	75 e8                	jne    c0011734 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c001174c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001174f:	46                   	inc    esi
c0011750:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011756:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011761:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011768:	09 f8                	or     eax,edi
c001176a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011770:	31 c0                	xor    eax,eax
c0011772:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001177a:	74 09                	je     c0011785 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c001177c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011783:	eb 06                	jmp    c001178b <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011785:	40                   	inc    eax
c0011786:	83 f8 08             	cmp    eax,0x8
c0011789:	75 e7                	jne    c0011772 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c001178b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001178f:	83 fd 09             	cmp    ebp,0x9
c0011792:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011795:	89 2a                	mov    DWORD PTR [edx],ebp
c0011797:	75 07                	jne    c00117a0 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011799:	b8 6c 15 01 c0       	mov    eax,0xc001156c
c001179e:	eb 31                	jmp    c00117d1 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117a0:	83 f8 01             	cmp    eax,0x1
c00117a3:	75 0c                	jne    c00117b1 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00117a5:	f7 d7                	not    edi
c00117a7:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00117ad:	31 c0                	xor    eax,eax
c00117af:	eb 20                	jmp    c00117d1 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117b1:	85 c0                	test   eax,eax
c00117b3:	75 1c                	jne    c00117d1 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117b5:	8b 04 ad e0 31 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdce20]
c00117bc:	eb 13                	jmp    c00117d1 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117be:	41                   	inc    ecx
c00117bf:	46                   	inc    esi
c00117c0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00117c6:	83 f9 08             	cmp    ecx,0x8
c00117c9:	0f 85 36 ff ff ff    	jne    c0011705 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00117cf:	eb dc                	jmp    c00117ad <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117d1:	5a                   	pop    edx
c00117d2:	5b                   	pop    ebx
c00117d3:	5e                   	pop    esi
c00117d4:	5f                   	pop    edi
c00117d5:	5d                   	pop    ebp
c00117d6:	c3                   	ret    

c00117d7 <KiCheckSignalZ>:
c00117d7:	83 ec 10             	sub    esp,0x10
c00117da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00117de:	50                   	push   eax
c00117df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117e7:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00117ed:	e8 ee fe ff ff       	call   c00116e0 <KeCheckSignal(SigHandlerBlock*, int*)>
c00117f2:	5a                   	pop    edx
c00117f3:	31 d2                	xor    edx,edx
c00117f5:	59                   	pop    ecx
c00117f6:	85 c0                	test   eax,eax
c00117f8:	74 19                	je     c0011813 <KiCheckSignalZ+0x3c>
c00117fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011800:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011803:	89 02                	mov    DWORD PTR [edx],eax
c0011805:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001180c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011810:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011813:	89 d0                	mov    eax,edx
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	c3                   	ret    

c0011819 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011819:	56                   	push   esi
c001181a:	53                   	push   ebx
c001181b:	bb 01 00 00 00       	mov    ebx,0x1
c0011820:	52                   	push   edx
c0011821:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011825:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011829:	d3 e3                	shl    ebx,cl
c001182b:	83 f9 10             	cmp    ecx,0x10
c001182e:	7f 08                	jg     c0011838 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011830:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011836:	75 10                	jne    c0011848 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011838:	83 ec 0c             	sub    esp,0xc
c001183b:	68 f5 1d 02 c0       	push   0xc0021df5
c0011840:	e8 80 f9 ff ff       	call   c00111c5 <KePanic(char const*)>
c0011845:	83 c4 10             	add    esp,0x10
c0011848:	f7 d3                	not    ebx
c001184a:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011850:	58                   	pop    eax
c0011851:	5b                   	pop    ebx
c0011852:	5e                   	pop    esi
c0011853:	c3                   	ret    

c0011854 <KiFinishSignalZ>:
c0011854:	53                   	push   ebx
c0011855:	83 ec 10             	sub    esp,0x10
c0011858:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001185c:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001185f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011864:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011867:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001186d:	e8 a7 ff ff ff       	call   c0011819 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011872:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011878:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001187f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011886:	83 c4 18             	add    esp,0x18
c0011889:	5b                   	pop    ebx
c001188a:	c3                   	ret    

c001188b <SysSeekDir(regs*)>:
c001188b:	31 c0                	xor    eax,eax
c001188d:	31 d2                	xor    edx,edx
c001188f:	c3                   	ret    

c0011890 <SysTellDir(regs*)>:
c0011890:	31 c0                	xor    eax,eax
c0011892:	31 d2                	xor    edx,edx
c0011894:	c3                   	ret    

c0011895 <SysVerify(regs*)>:
c0011895:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011899:	31 d2                	xor    edx,edx
c001189b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001189e:	c3                   	ret    

c001189f <SysGetArgc(regs*)>:
c001189f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118a7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00118ad:	89 c2                	mov    edx,eax
c00118af:	c1 fa 1f             	sar    edx,0x1f
c00118b2:	c3                   	ret    

c00118b3 <SysTTYName(regs*)>:
c00118b3:	b8 01 00 00 00       	mov    eax,0x1
c00118b8:	31 d2                	xor    edx,edx
c00118ba:	c3                   	ret    

c00118bb <SysFormatDisk(regs*)>:
c00118bb:	56                   	push   esi
c00118bc:	53                   	push   ebx
c00118bd:	83 ec 04             	sub    esp,0x4
c00118c0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00118c4:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c00118ca:	eb 2a                	jmp    c00118f6 <SysFormatDisk(regs*)+0x3b>
c00118cc:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00118cf:	83 ec 0c             	sub    esp,0xc
c00118d2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00118d5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00118d7:	51                   	push   ecx
c00118d8:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00118db:	51                   	push   ecx
c00118dc:	50                   	push   eax
c00118dd:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00118e4:	50                   	push   eax
c00118e5:	53                   	push   ebx
c00118e6:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00118e9:	83 c4 20             	add    esp,0x20
c00118ec:	83 f8 08             	cmp    eax,0x8
c00118ef:	89 c1                	mov    ecx,eax
c00118f1:	75 14                	jne    c0011907 <SysFormatDisk(regs*)+0x4c>
c00118f3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00118f6:	85 db                	test   ebx,ebx
c00118f8:	75 d2                	jne    c00118cc <SysFormatDisk(regs*)+0x11>
c00118fa:	b8 03 00 00 00       	mov    eax,0x3
c00118ff:	31 d2                	xor    edx,edx
c0011901:	83 c4 04             	add    esp,0x4
c0011904:	5b                   	pop    ebx
c0011905:	5e                   	pop    esi
c0011906:	c3                   	ret    
c0011907:	85 c0                	test   eax,eax
c0011909:	74 13                	je     c001191e <SysFormatDisk(regs*)+0x63>
c001190b:	31 d2                	xor    edx,edx
c001190d:	83 f9 09             	cmp    ecx,0x9
c0011910:	b8 01 00 00 00       	mov    eax,0x1
c0011915:	74 ea                	je     c0011901 <SysFormatDisk(regs*)+0x46>
c0011917:	b8 02 00 00 00       	mov    eax,0x2
c001191c:	eb e1                	jmp    c00118ff <SysFormatDisk(regs*)+0x44>
c001191e:	31 c0                	xor    eax,eax
c0011920:	eb dd                	jmp    c00118ff <SysFormatDisk(regs*)+0x44>

c0011922 <SysSetDiskVolumeLabel(regs*)>:
c0011922:	56                   	push   esi
c0011923:	53                   	push   ebx
c0011924:	83 ec 04             	sub    esp,0x4
c0011927:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001192b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001192e:	83 f8 19             	cmp    eax,0x19
c0011931:	77 33                	ja     c0011966 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011933:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c001193a:	85 c9                	test   ecx,ecx
c001193c:	74 28                	je     c0011966 <SysSetDiskVolumeLabel(regs*)+0x44>
c001193e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011941:	85 db                	test   ebx,ebx
c0011943:	74 21                	je     c0011966 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011945:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c001194b:	85 d2                	test   edx,edx
c001194d:	74 17                	je     c0011966 <SysSetDiskVolumeLabel(regs*)+0x44>
c001194f:	8b 32                	mov    esi,DWORD PTR [edx]
c0011951:	53                   	push   ebx
c0011952:	50                   	push   eax
c0011953:	51                   	push   ecx
c0011954:	52                   	push   edx
c0011955:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011958:	83 c4 10             	add    esp,0x10
c001195b:	83 c4 04             	add    esp,0x4
c001195e:	5b                   	pop    ebx
c001195f:	5e                   	pop    esi
c0011960:	89 c2                	mov    edx,eax
c0011962:	c1 fa 1f             	sar    edx,0x1f
c0011965:	c3                   	ret    
c0011966:	83 c4 04             	add    esp,0x4
c0011969:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001196e:	5b                   	pop    ebx
c001196f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011974:	5e                   	pop    esi
c0011975:	c3                   	ret    

c0011976 <SysGetDiskVolumeLabel(regs*)>:
c0011976:	57                   	push   edi
c0011977:	56                   	push   esi
c0011978:	53                   	push   ebx
c0011979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001197d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011980:	83 fa 19             	cmp    edx,0x19
c0011983:	77 3c                	ja     c00119c1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011985:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c001198c:	85 c9                	test   ecx,ecx
c001198e:	74 31                	je     c00119c1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011990:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011993:	85 db                	test   ebx,ebx
c0011995:	74 2a                	je     c00119c1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011997:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001199a:	85 f6                	test   esi,esi
c001199c:	74 23                	je     c00119c1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001199e:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00119a4:	85 c0                	test   eax,eax
c00119a6:	74 19                	je     c00119c1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119a8:	83 ec 0c             	sub    esp,0xc
c00119ab:	8b 38                	mov    edi,DWORD PTR [eax]
c00119ad:	56                   	push   esi
c00119ae:	53                   	push   ebx
c00119af:	52                   	push   edx
c00119b0:	51                   	push   ecx
c00119b1:	50                   	push   eax
c00119b2:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00119b5:	83 c4 20             	add    esp,0x20
c00119b8:	5b                   	pop    ebx
c00119b9:	5e                   	pop    esi
c00119ba:	89 c2                	mov    edx,eax
c00119bc:	c1 fa 1f             	sar    edx,0x1f
c00119bf:	5f                   	pop    edi
c00119c0:	c3                   	ret    
c00119c1:	5b                   	pop    ebx
c00119c2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00119c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119cc:	5e                   	pop    esi
c00119cd:	5f                   	pop    edi
c00119ce:	c3                   	ret    

c00119cf <SysShutdown(regs*)>:
c00119cf:	57                   	push   edi
c00119d0:	56                   	push   esi
c00119d1:	83 ec 04             	sub    esp,0x4
c00119d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119db:	85 c0                	test   eax,eax
c00119dd:	74 1e                	je     c00119fd <SysShutdown(regs*)+0x2e>
c00119df:	83 f8 01             	cmp    eax,0x1
c00119e2:	74 5f                	je     c0011a43 <SysShutdown(regs*)+0x74>
c00119e4:	83 f8 02             	cmp    eax,0x2
c00119e7:	be ff ff ff ff       	mov    esi,0xffffffff
c00119ec:	bf ff ff ff ff       	mov    edi,0xffffffff
c00119f1:	74 32                	je     c0011a25 <SysShutdown(regs*)+0x56>
c00119f3:	83 c4 04             	add    esp,0x4
c00119f6:	89 f0                	mov    eax,esi
c00119f8:	5e                   	pop    esi
c00119f9:	89 fa                	mov    edx,edi
c00119fb:	5f                   	pop    edi
c00119fc:	c3                   	ret    
c00119fd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011a02:	be ff ff ff ff       	mov    esi,0xffffffff
c0011a07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011a0c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a0e:	6a 00                	push   0x0
c0011a10:	6a 00                	push   0x0
c0011a12:	6a 00                	push   0x0
c0011a14:	50                   	push   eax
c0011a15:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011a18:	83 c4 10             	add    esp,0x10
c0011a1b:	89 f0                	mov    eax,esi
c0011a1d:	83 c4 04             	add    esp,0x4
c0011a20:	89 fa                	mov    edx,edi
c0011a22:	5e                   	pop    esi
c0011a23:	5f                   	pop    edi
c0011a24:	c3                   	ret    
c0011a25:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011a2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a2c:	6a 00                	push   0x0
c0011a2e:	6a 00                	push   0x0
c0011a30:	6a 01                	push   0x1
c0011a32:	50                   	push   eax
c0011a33:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011a36:	83 c4 10             	add    esp,0x10
c0011a39:	89 f0                	mov    eax,esi
c0011a3b:	83 c4 04             	add    esp,0x4
c0011a3e:	89 fa                	mov    edx,edi
c0011a40:	5e                   	pop    esi
c0011a41:	5f                   	pop    edi
c0011a42:	c3                   	ret    
c0011a43:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011a48:	85 c0                	test   eax,eax
c0011a4a:	74 02                	je     c0011a4e <SysShutdown(regs*)+0x7f>
c0011a4c:	ff d0                	call   eax
c0011a4e:	31 f6                	xor    esi,esi
c0011a50:	83 c4 04             	add    esp,0x4
c0011a53:	89 f0                	mov    eax,esi
c0011a55:	31 ff                	xor    edi,edi
c0011a57:	5e                   	pop    esi
c0011a58:	89 fa                	mov    edx,edi
c0011a5a:	5f                   	pop    edi
c0011a5b:	c3                   	ret    

c0011a5c <SysRealpath(regs*)>:
c0011a5c:	53                   	push   ebx
c0011a5d:	83 ec 08             	sub    esp,0x8
c0011a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a64:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011a67:	85 c9                	test   ecx,ecx
c0011a69:	74 37                	je     c0011aa2 <SysRealpath(regs*)+0x46>
c0011a6b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011a6e:	31 d2                	xor    edx,edx
c0011a70:	b8 01 00 00 00       	mov    eax,0x1
c0011a75:	85 db                	test   ebx,ebx
c0011a77:	75 05                	jne    c0011a7e <SysRealpath(regs*)+0x22>
c0011a79:	83 c4 08             	add    esp,0x8
c0011a7c:	5b                   	pop    ebx
c0011a7d:	c3                   	ret    
c0011a7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a83:	83 ec 04             	sub    esp,0x4
c0011a86:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a89:	05 0c 01 00 00       	add    eax,0x10c
c0011a8e:	50                   	push   eax
c0011a8f:	51                   	push   ecx
c0011a90:	53                   	push   ebx
c0011a91:	e8 8e 9a ff ff       	call   c000b524 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011a96:	83 c4 10             	add    esp,0x10
c0011a99:	31 c0                	xor    eax,eax
c0011a9b:	31 d2                	xor    edx,edx
c0011a9d:	83 c4 08             	add    esp,0x8
c0011aa0:	5b                   	pop    ebx
c0011aa1:	c3                   	ret    
c0011aa2:	b8 01 00 00 00       	mov    eax,0x1
c0011aa7:	31 d2                	xor    edx,edx
c0011aa9:	eb f2                	jmp    c0011a9d <SysRealpath(regs*)+0x41>

c0011aab <SysReadDir(regs*)>:
c0011aab:	53                   	push   ebx
c0011aac:	83 ec 18             	sub    esp,0x18
c0011aaf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ab3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ab6:	83 f8 02             	cmp    eax,0x2
c0011ab9:	76 4f                	jbe    c0011b0a <SysReadDir(regs*)+0x5f>
c0011abb:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011ac2:	77 52                	ja     c0011b16 <SysReadDir(regs*)+0x6b>
c0011ac4:	83 ec 0c             	sub    esp,0xc
c0011ac7:	50                   	push   eax
c0011ac8:	e8 ce 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011acd:	83 c4 10             	add    esp,0x10
c0011ad0:	85 c0                	test   eax,eax
c0011ad2:	74 42                	je     c0011b16 <SysReadDir(regs*)+0x6b>
c0011ad4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011adc:	83 ec 0c             	sub    esp,0xc
c0011adf:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011ae3:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ae5:	51                   	push   ecx
c0011ae6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011ae9:	51                   	push   ecx
c0011aea:	6a 00                	push   0x0
c0011aec:	68 10 01 00 00       	push   0x110
c0011af1:	50                   	push   eax
c0011af2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011af5:	83 c4 20             	add    esp,0x20
c0011af8:	85 c0                	test   eax,eax
c0011afa:	89 c1                	mov    ecx,eax
c0011afc:	74 27                	je     c0011b25 <SysReadDir(regs*)+0x7a>
c0011afe:	31 d2                	xor    edx,edx
c0011b00:	83 f9 07             	cmp    ecx,0x7
c0011b03:	b8 02 00 00 00       	mov    eax,0x2
c0011b08:	75 16                	jne    c0011b20 <SysReadDir(regs*)+0x75>
c0011b0a:	b8 01 00 00 00       	mov    eax,0x1
c0011b0f:	31 d2                	xor    edx,edx
c0011b11:	83 c4 18             	add    esp,0x18
c0011b14:	5b                   	pop    ebx
c0011b15:	c3                   	ret    
c0011b16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b20:	83 c4 18             	add    esp,0x18
c0011b23:	5b                   	pop    ebx
c0011b24:	c3                   	ret    
c0011b25:	31 c0                	xor    eax,eax
c0011b27:	31 d2                	xor    edx,edx
c0011b29:	eb e6                	jmp    c0011b11 <SysReadDir(regs*)+0x66>

c0011b2b <SysIsATTY(regs*)>:
c0011b2b:	83 ec 0c             	sub    esp,0xc
c0011b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b32:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b35:	83 f8 02             	cmp    eax,0x2
c0011b38:	76 07                	jbe    c0011b41 <SysIsATTY(regs*)+0x16>
c0011b3a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b3f:	75 26                	jne    c0011b67 <SysIsATTY(regs*)+0x3c>
c0011b41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b46:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b49:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011b4f:	85 c0                	test   eax,eax
c0011b51:	74 24                	je     c0011b77 <SysIsATTY(regs*)+0x4c>
c0011b53:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b55:	83 ec 0c             	sub    esp,0xc
c0011b58:	50                   	push   eax
c0011b59:	ff 12                	call   DWORD PTR [edx]
c0011b5b:	83 c4 10             	add    esp,0x10
c0011b5e:	31 d2                	xor    edx,edx
c0011b60:	83 c4 0c             	add    esp,0xc
c0011b63:	0f b6 c0             	movzx  eax,al
c0011b66:	c3                   	ret    
c0011b67:	83 ec 0c             	sub    esp,0xc
c0011b6a:	50                   	push   eax
c0011b6b:	e8 2b 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011b70:	83 c4 10             	add    esp,0x10
c0011b73:	85 c0                	test   eax,eax
c0011b75:	75 dc                	jne    c0011b53 <SysIsATTY(regs*)+0x28>
c0011b77:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b7c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b81:	83 c4 0c             	add    esp,0xc
c0011b84:	c3                   	ret    

c0011b85 <SysSeek(regs*)>:
c0011b85:	56                   	push   esi
c0011b86:	53                   	push   ebx
c0011b87:	83 ec 04             	sub    esp,0x4
c0011b8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b8e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011b91:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011b94:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011b9a:	77 33                	ja     c0011bcf <SysSeek(regs*)+0x4a>
c0011b9c:	83 ec 0c             	sub    esp,0xc
c0011b9f:	51                   	push   ecx
c0011ba0:	e8 f6 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ba5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011ba8:	83 c4 0c             	add    esp,0xc
c0011bab:	31 db                	xor    ebx,ebx
c0011bad:	53                   	push   ebx
c0011bae:	51                   	push   ecx
c0011baf:	50                   	push   eax
c0011bb0:	e8 dd 9c ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0011bb5:	83 c4 10             	add    esp,0x10
c0011bb8:	85 c0                	test   eax,eax
c0011bba:	0f 95 c0             	setne  al
c0011bbd:	31 d2                	xor    edx,edx
c0011bbf:	0f b6 c0             	movzx  eax,al
c0011bc2:	f7 d8                	neg    eax
c0011bc4:	83 d2 00             	adc    edx,0x0
c0011bc7:	83 c4 04             	add    esp,0x4
c0011bca:	5b                   	pop    ebx
c0011bcb:	f7 da                	neg    edx
c0011bcd:	5e                   	pop    esi
c0011bce:	c3                   	ret    
c0011bcf:	83 c4 04             	add    esp,0x4
c0011bd2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bd7:	5b                   	pop    ebx
c0011bd8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bdd:	5e                   	pop    esi
c0011bde:	c3                   	ret    

c0011bdf <SysTell(regs*)>:
c0011bdf:	53                   	push   ebx
c0011be0:	83 ec 08             	sub    esp,0x8
c0011be3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011be7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bea:	83 f8 02             	cmp    eax,0x2
c0011bed:	76 4e                	jbe    c0011c3d <SysTell(regs*)+0x5e>
c0011bef:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011bf4:	76 19                	jbe    c0011c0f <SysTell(regs*)+0x30>
c0011bf6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011bf9:	31 d2                	xor    edx,edx
c0011bfb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c08:	83 c4 08             	add    esp,0x8
c0011c0b:	31 c0                	xor    eax,eax
c0011c0d:	5b                   	pop    ebx
c0011c0e:	c3                   	ret    
c0011c0f:	83 ec 0c             	sub    esp,0xc
c0011c12:	50                   	push   eax
c0011c13:	e8 83 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c18:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011c1b:	5a                   	pop    edx
c0011c1c:	59                   	pop    ecx
c0011c1d:	53                   	push   ebx
c0011c1e:	50                   	push   eax
c0011c1f:	e8 1a 9d ff ff       	call   c000b93e <File::tell(unsigned long long*)>
c0011c24:	83 c4 10             	add    esp,0x10
c0011c27:	85 c0                	test   eax,eax
c0011c29:	0f 95 c0             	setne  al
c0011c2c:	31 d2                	xor    edx,edx
c0011c2e:	0f b6 c0             	movzx  eax,al
c0011c31:	f7 d8                	neg    eax
c0011c33:	83 d2 00             	adc    edx,0x0
c0011c36:	83 c4 08             	add    esp,0x8
c0011c39:	5b                   	pop    ebx
c0011c3a:	f7 da                	neg    edx
c0011c3c:	c3                   	ret    
c0011c3d:	83 c4 08             	add    esp,0x8
c0011c40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c45:	5b                   	pop    ebx
c0011c46:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c4b:	c3                   	ret    

c0011c4c <SysSize(regs*)>:
c0011c4c:	53                   	push   ebx
c0011c4d:	83 ec 18             	sub    esp,0x18
c0011c50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c54:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c57:	83 f8 02             	cmp    eax,0x2
c0011c5a:	76 54                	jbe    c0011cb0 <SysSize(regs*)+0x64>
c0011c5c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c61:	76 19                	jbe    c0011c7c <SysSize(regs*)+0x30>
c0011c63:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c66:	31 d2                	xor    edx,edx
c0011c68:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c6e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c75:	83 c4 18             	add    esp,0x18
c0011c78:	31 c0                	xor    eax,eax
c0011c7a:	5b                   	pop    ebx
c0011c7b:	c3                   	ret    
c0011c7c:	83 ec 0c             	sub    esp,0xc
c0011c7f:	50                   	push   eax
c0011c80:	e8 16 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c85:	83 c4 0c             	add    esp,0xc
c0011c88:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011c8c:	52                   	push   edx
c0011c8d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c90:	52                   	push   edx
c0011c91:	50                   	push   eax
c0011c92:	e8 3f 9e ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c0011c97:	83 c4 10             	add    esp,0x10
c0011c9a:	85 c0                	test   eax,eax
c0011c9c:	0f 95 c0             	setne  al
c0011c9f:	31 d2                	xor    edx,edx
c0011ca1:	0f b6 c0             	movzx  eax,al
c0011ca4:	f7 d8                	neg    eax
c0011ca6:	83 d2 00             	adc    edx,0x0
c0011ca9:	83 c4 18             	add    esp,0x18
c0011cac:	5b                   	pop    ebx
c0011cad:	f7 da                	neg    edx
c0011caf:	c3                   	ret    
c0011cb0:	83 c4 18             	add    esp,0x18
c0011cb3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cb8:	5b                   	pop    ebx
c0011cb9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cbe:	c3                   	ret    

c0011cbf <SysSizeFromFilename(regs*)>:
c0011cbf:	57                   	push   edi
c0011cc0:	56                   	push   esi
c0011cc1:	53                   	push   ebx
c0011cc2:	83 ec 10             	sub    esp,0x10
c0011cc5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011cc9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011ccc:	83 fb 02             	cmp    ebx,0x2
c0011ccf:	0f 86 83 00 00 00    	jbe    c0011d58 <SysSizeFromFilename(regs*)+0x99>
c0011cd5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011cdb:	76 1b                	jbe    c0011cf8 <SysSizeFromFilename(regs*)+0x39>
c0011cdd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011ce0:	31 d2                	xor    edx,edx
c0011ce2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011ce8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cef:	83 c4 10             	add    esp,0x10
c0011cf2:	31 c0                	xor    eax,eax
c0011cf4:	5b                   	pop    ebx
c0011cf5:	5e                   	pop    esi
c0011cf6:	5f                   	pop    edi
c0011cf7:	c3                   	ret    
c0011cf8:	83 ec 0c             	sub    esp,0xc
c0011cfb:	68 14 01 00 00       	push   0x114
c0011d00:	e8 ce 5d ff ff       	call   c0007ad3 <malloc>
c0011d05:	83 c4 0c             	add    esp,0xc
c0011d08:	89 c7                	mov    edi,eax
c0011d0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d0f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d12:	50                   	push   eax
c0011d13:	53                   	push   ebx
c0011d14:	57                   	push   edi
c0011d15:	e8 fe 99 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0011d1a:	83 c4 0c             	add    esp,0xc
c0011d1d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011d21:	50                   	push   eax
c0011d22:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011d25:	52                   	push   edx
c0011d26:	57                   	push   edi
c0011d27:	e8 aa 9d ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c0011d2c:	83 c4 10             	add    esp,0x10
c0011d2f:	85 ff                	test   edi,edi
c0011d31:	89 c3                	mov    ebx,eax
c0011d33:	74 0c                	je     c0011d41 <SysSizeFromFilename(regs*)+0x82>
c0011d35:	8b 07                	mov    eax,DWORD PTR [edi]
c0011d37:	83 ec 0c             	sub    esp,0xc
c0011d3a:	57                   	push   edi
c0011d3b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d3e:	83 c4 10             	add    esp,0x10
c0011d41:	31 c0                	xor    eax,eax
c0011d43:	85 db                	test   ebx,ebx
c0011d45:	0f 95 c0             	setne  al
c0011d48:	31 d2                	xor    edx,edx
c0011d4a:	f7 d8                	neg    eax
c0011d4c:	83 d2 00             	adc    edx,0x0
c0011d4f:	83 c4 10             	add    esp,0x10
c0011d52:	5b                   	pop    ebx
c0011d53:	f7 da                	neg    edx
c0011d55:	5e                   	pop    esi
c0011d56:	5f                   	pop    edi
c0011d57:	c3                   	ret    
c0011d58:	83 c4 10             	add    esp,0x10
c0011d5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d60:	5b                   	pop    ebx
c0011d61:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d66:	5e                   	pop    esi
c0011d67:	5f                   	pop    edi
c0011d68:	c3                   	ret    

c0011d69 <SysClose(regs*)>:
c0011d69:	53                   	push   ebx
c0011d6a:	83 ec 08             	sub    esp,0x8
c0011d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d71:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d74:	83 f8 02             	cmp    eax,0x2
c0011d77:	76 41                	jbe    c0011dba <SysClose(regs*)+0x51>
c0011d79:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011d7f:	83 fa 01             	cmp    edx,0x1
c0011d82:	76 2d                	jbe    c0011db1 <SysClose(regs*)+0x48>
c0011d84:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d89:	77 2f                	ja     c0011dba <SysClose(regs*)+0x51>
c0011d8b:	83 ec 0c             	sub    esp,0xc
c0011d8e:	50                   	push   eax
c0011d8f:	e8 07 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d94:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d97:	89 c3                	mov    ebx,eax
c0011d99:	e8 94 9a ff ff       	call   c000b832 <File::close()>
c0011d9e:	83 c4 10             	add    esp,0x10
c0011da1:	85 db                	test   ebx,ebx
c0011da3:	74 0c                	je     c0011db1 <SysClose(regs*)+0x48>
c0011da5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011da7:	83 ec 0c             	sub    esp,0xc
c0011daa:	53                   	push   ebx
c0011dab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011dae:	83 c4 10             	add    esp,0x10
c0011db1:	83 c4 08             	add    esp,0x8
c0011db4:	31 c0                	xor    eax,eax
c0011db6:	5b                   	pop    ebx
c0011db7:	31 d2                	xor    edx,edx
c0011db9:	c3                   	ret    
c0011dba:	83 c4 08             	add    esp,0x8
c0011dbd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dc2:	5b                   	pop    ebx
c0011dc3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dc8:	c3                   	ret    

c0011dc9 <SysOpenDir(regs*)>:
c0011dc9:	56                   	push   esi
c0011dca:	53                   	push   ebx
c0011dcb:	83 ec 04             	sub    esp,0x4
c0011dce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011dd2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011dd5:	85 c9                	test   ecx,ecx
c0011dd7:	74 5d                	je     c0011e36 <SysOpenDir(regs*)+0x6d>
c0011dd9:	83 ec 0c             	sub    esp,0xc
c0011ddc:	68 14 01 00 00       	push   0x114
c0011de1:	e8 ed 5c ff ff       	call   c0007ad3 <malloc>
c0011de6:	83 c4 0c             	add    esp,0xc
c0011de9:	89 c6                	mov    esi,eax
c0011deb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011df0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011df3:	50                   	push   eax
c0011df4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011df7:	52                   	push   edx
c0011df8:	56                   	push   esi
c0011df9:	e8 96 9e ff ff       	call   c000bc94 <Directory::Directory(char const*, Process*)>
c0011dfe:	83 c4 10             	add    esp,0x10
c0011e01:	85 f6                	test   esi,esi
c0011e03:	74 31                	je     c0011e36 <SysOpenDir(regs*)+0x6d>
c0011e05:	83 ec 0c             	sub    esp,0xc
c0011e08:	56                   	push   esi
c0011e09:	e8 42 9f ff ff       	call   c000bd50 <Directory::open()>
c0011e0e:	83 c4 10             	add    esp,0x10
c0011e11:	85 c0                	test   eax,eax
c0011e13:	75 21                	jne    c0011e36 <SysOpenDir(regs*)+0x6d>
c0011e15:	83 ec 0c             	sub    esp,0xc
c0011e18:	56                   	push   esi
c0011e19:	e8 80 73 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0011e1e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e21:	83 c4 10             	add    esp,0x10
c0011e24:	89 02                	mov    DWORD PTR [edx],eax
c0011e26:	c1 f8 1f             	sar    eax,0x1f
c0011e29:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e2c:	83 c4 04             	add    esp,0x4
c0011e2f:	31 c0                	xor    eax,eax
c0011e31:	5b                   	pop    ebx
c0011e32:	31 d2                	xor    edx,edx
c0011e34:	5e                   	pop    esi
c0011e35:	c3                   	ret    
c0011e36:	83 c4 04             	add    esp,0x4
c0011e39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e3e:	5b                   	pop    ebx
c0011e3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e44:	5e                   	pop    esi
c0011e45:	c3                   	ret    

c0011e46 <SysMakeDir(regs*)>:
c0011e46:	56                   	push   esi
c0011e47:	53                   	push   ebx
c0011e48:	83 ec 10             	sub    esp,0x10
c0011e4b:	68 14 01 00 00       	push   0x114
c0011e50:	e8 7e 5c ff ff       	call   c0007ad3 <malloc>
c0011e55:	83 c4 0c             	add    esp,0xc
c0011e58:	89 c3                	mov    ebx,eax
c0011e5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e62:	50                   	push   eax
c0011e63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e67:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011e6a:	52                   	push   edx
c0011e6b:	53                   	push   ebx
c0011e6c:	e8 23 9e ff ff       	call   c000bc94 <Directory::Directory(char const*, Process*)>
c0011e71:	83 c4 10             	add    esp,0x10
c0011e74:	85 db                	test   ebx,ebx
c0011e76:	74 2c                	je     c0011ea4 <SysMakeDir(regs*)+0x5e>
c0011e78:	83 ec 0c             	sub    esp,0xc
c0011e7b:	53                   	push   ebx
c0011e7c:	e8 af a0 ff ff       	call   c000bf30 <Directory::create()>
c0011e81:	89 c6                	mov    esi,eax
c0011e83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e8b:	83 c4 10             	add    esp,0x10
c0011e8e:	31 c0                	xor    eax,eax
c0011e90:	85 f6                	test   esi,esi
c0011e92:	0f 95 c0             	setne  al
c0011e95:	31 d2                	xor    edx,edx
c0011e97:	f7 d8                	neg    eax
c0011e99:	83 d2 00             	adc    edx,0x0
c0011e9c:	83 c4 04             	add    esp,0x4
c0011e9f:	5b                   	pop    ebx
c0011ea0:	f7 da                	neg    edx
c0011ea2:	5e                   	pop    esi
c0011ea3:	c3                   	ret    
c0011ea4:	83 c4 04             	add    esp,0x4
c0011ea7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011eac:	5b                   	pop    ebx
c0011ead:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011eb2:	5e                   	pop    esi
c0011eb3:	c3                   	ret    

c0011eb4 <SysCloseDir(regs*)>:
c0011eb4:	53                   	push   ebx
c0011eb5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011eba:	83 ec 08             	sub    esp,0x8
c0011ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ec1:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011ec4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ec9:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011ecc:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011ed2:	77 2a                	ja     c0011efe <SysCloseDir(regs*)+0x4a>
c0011ed4:	83 ec 0c             	sub    esp,0xc
c0011ed7:	51                   	push   ecx
c0011ed8:	e8 be 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011edd:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ee0:	89 c3                	mov    ebx,eax
c0011ee2:	e8 c5 9e ff ff       	call   c000bdac <Directory::close()>
c0011ee7:	83 c4 10             	add    esp,0x10
c0011eea:	85 db                	test   ebx,ebx
c0011eec:	74 0c                	je     c0011efa <SysCloseDir(regs*)+0x46>
c0011eee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ef0:	83 ec 0c             	sub    esp,0xc
c0011ef3:	53                   	push   ebx
c0011ef4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ef7:	83 c4 10             	add    esp,0x10
c0011efa:	31 c0                	xor    eax,eax
c0011efc:	31 d2                	xor    edx,edx
c0011efe:	83 c4 08             	add    esp,0x8
c0011f01:	5b                   	pop    ebx
c0011f02:	c3                   	ret    

c0011f03 <SysWait(regs*)>:
c0011f03:	83 ec 10             	sub    esp,0x10
c0011f06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f0a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f0d:	52                   	push   edx
c0011f0e:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011f11:	51                   	push   ecx
c0011f12:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f15:	50                   	push   eax
c0011f16:	e8 e5 3d 00 00       	call   c0015d00 <waitTask(int, int*, int)>
c0011f1b:	83 c4 1c             	add    esp,0x1c
c0011f1e:	89 c2                	mov    edx,eax
c0011f20:	c1 fa 1f             	sar    edx,0x1f
c0011f23:	c3                   	ret    

c0011f24 <SysNotImpl(regs*)>:
c0011f24:	83 ec 18             	sub    esp,0x18
c0011f27:	68 06 1e 02 c0       	push   0xc0021e06
c0011f2c:	e8 94 f2 ff ff       	call   c00111c5 <KePanic(char const*)>
c0011f31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f36:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f3b:	83 c4 1c             	add    esp,0x1c
c0011f3e:	c3                   	ret    

c0011f3f <SysPanic(regs*)>:
c0011f3f:	83 ec 18             	sub    esp,0x18
c0011f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f46:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011f49:	50                   	push   eax
c0011f4a:	e8 76 f2 ff ff       	call   c00111c5 <KePanic(char const*)>
c0011f4f:	b8 01 00 00 00       	mov    eax,0x1
c0011f54:	31 d2                	xor    edx,edx
c0011f56:	83 c4 1c             	add    esp,0x1c
c0011f59:	c3                   	ret    

c0011f5a <SysRmdir(regs*)>:
c0011f5a:	56                   	push   esi
c0011f5b:	53                   	push   ebx
c0011f5c:	83 ec 10             	sub    esp,0x10
c0011f5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f63:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011f66:	68 14 01 00 00       	push   0x114
c0011f6b:	e8 63 5b ff ff       	call   c0007ad3 <malloc>
c0011f70:	83 c4 0c             	add    esp,0xc
c0011f73:	89 c3                	mov    ebx,eax
c0011f75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f7d:	50                   	push   eax
c0011f7e:	56                   	push   esi
c0011f7f:	53                   	push   ebx
c0011f80:	e8 93 97 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0011f85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f88:	e8 15 9a ff ff       	call   c000b9a2 <File::unlink()>
c0011f8d:	83 c4 10             	add    esp,0x10
c0011f90:	85 db                	test   ebx,ebx
c0011f92:	89 c6                	mov    esi,eax
c0011f94:	74 0c                	je     c0011fa2 <SysRmdir(regs*)+0x48>
c0011f96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f98:	83 ec 0c             	sub    esp,0xc
c0011f9b:	53                   	push   ebx
c0011f9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f9f:	83 c4 10             	add    esp,0x10
c0011fa2:	31 c0                	xor    eax,eax
c0011fa4:	85 f6                	test   esi,esi
c0011fa6:	0f 95 c0             	setne  al
c0011fa9:	31 d2                	xor    edx,edx
c0011fab:	f7 d8                	neg    eax
c0011fad:	83 d2 00             	adc    edx,0x0
c0011fb0:	83 c4 04             	add    esp,0x4
c0011fb3:	5b                   	pop    ebx
c0011fb4:	f7 da                	neg    edx
c0011fb6:	5e                   	pop    esi
c0011fb7:	c3                   	ret    

c0011fb8 <SysUnlink(regs*)>:
c0011fb8:	56                   	push   esi
c0011fb9:	53                   	push   ebx
c0011fba:	83 ec 10             	sub    esp,0x10
c0011fbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fc1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011fc4:	68 14 01 00 00       	push   0x114
c0011fc9:	e8 05 5b ff ff       	call   c0007ad3 <malloc>
c0011fce:	83 c4 0c             	add    esp,0xc
c0011fd1:	89 c3                	mov    ebx,eax
c0011fd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fd8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fdb:	50                   	push   eax
c0011fdc:	56                   	push   esi
c0011fdd:	53                   	push   ebx
c0011fde:	e8 35 97 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0011fe3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fe6:	e8 b7 99 ff ff       	call   c000b9a2 <File::unlink()>
c0011feb:	83 c4 10             	add    esp,0x10
c0011fee:	85 db                	test   ebx,ebx
c0011ff0:	89 c6                	mov    esi,eax
c0011ff2:	74 0c                	je     c0012000 <SysUnlink(regs*)+0x48>
c0011ff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ff6:	83 ec 0c             	sub    esp,0xc
c0011ff9:	53                   	push   ebx
c0011ffa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ffd:	83 c4 10             	add    esp,0x10
c0012000:	31 c0                	xor    eax,eax
c0012002:	85 f6                	test   esi,esi
c0012004:	0f 95 c0             	setne  al
c0012007:	31 d2                	xor    edx,edx
c0012009:	f7 d8                	neg    eax
c001200b:	83 d2 00             	adc    edx,0x0
c001200e:	83 c4 04             	add    esp,0x4
c0012011:	5b                   	pop    ebx
c0012012:	f7 da                	neg    edx
c0012014:	5e                   	pop    esi
c0012015:	c3                   	ret    

c0012016 <SysGetArgv(regs*)>:
c0012016:	83 ec 0c             	sub    esp,0xc
c0012019:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001201d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012020:	85 c0                	test   eax,eax
c0012022:	78 2c                	js     c0012050 <SysGetArgv(regs*)+0x3a>
c0012024:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001202a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001202d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012033:	7d 1b                	jge    c0012050 <SysGetArgv(regs*)+0x3a>
c0012035:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001203c:	85 c0                	test   eax,eax
c001203e:	74 18                	je     c0012058 <SysGetArgv(regs*)+0x42>
c0012040:	83 ec 08             	sub    esp,0x8
c0012043:	50                   	push   eax
c0012044:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012047:	50                   	push   eax
c0012048:	e8 03 e6 fe ff       	call   c0000650 <strcpy>
c001204d:	83 c4 10             	add    esp,0x10
c0012050:	31 c0                	xor    eax,eax
c0012052:	31 d2                	xor    edx,edx
c0012054:	83 c4 0c             	add    esp,0xc
c0012057:	c3                   	ret    
c0012058:	b8 01 00 00 00       	mov    eax,0x1
c001205d:	31 d2                	xor    edx,edx
c001205f:	83 c4 0c             	add    esp,0xc
c0012062:	c3                   	ret    

c0012063 <SysUSleep(regs*)>:
c0012063:	83 ec 1c             	sub    esp,0x1c
c0012066:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001206a:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001206d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012070:	6a 00                	push   0x0
c0012072:	6a 64                	push   0x64
c0012074:	52                   	push   edx
c0012075:	50                   	push   eax
c0012076:	e8 05 d1 00 00       	call   c001f180 <__udivdi3>
c001207b:	83 c4 14             	add    esp,0x14
c001207e:	50                   	push   eax
c001207f:	e8 60 3d 00 00       	call   c0015de4 <milliTenthSleep(unsigned int)>
c0012084:	31 c0                	xor    eax,eax
c0012086:	31 d2                	xor    edx,edx
c0012088:	83 c4 1c             	add    esp,0x1c
c001208b:	c3                   	ret    

c001208c <SysSpawn(regs*)>:
c001208c:	56                   	push   esi
c001208d:	53                   	push   ebx
c001208e:	83 ec 04             	sub    esp,0x4
c0012091:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012095:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012098:	85 f6                	test   esi,esi
c001209a:	75 0a                	jne    c00120a6 <SysSpawn(regs*)+0x1a>
c001209c:	83 c4 04             	add    esp,0x4
c001209f:	31 c0                	xor    eax,eax
c00120a1:	5b                   	pop    ebx
c00120a2:	31 d2                	xor    edx,edx
c00120a4:	5e                   	pop    esi
c00120a5:	c3                   	ret    
c00120a6:	83 ec 0c             	sub    esp,0xc
c00120a9:	68 24 07 00 00       	push   0x724
c00120ae:	e8 20 5a ff ff       	call   c0007ad3 <malloc>
c00120b3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00120b6:	83 c4 10             	add    esp,0x10
c00120b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120bc:	89 c6                	mov    esi,eax
c00120be:	31 c0                	xor    eax,eax
c00120c0:	85 c9                	test   ecx,ecx
c00120c2:	75 08                	jne    c00120cc <SysSpawn(regs*)+0x40>
c00120c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120cc:	52                   	push   edx
c00120cd:	50                   	push   eax
c00120ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120d1:	50                   	push   eax
c00120d2:	56                   	push   esi
c00120d3:	e8 74 33 00 00       	call   c001544c <Process::Process(char const*, Process*, char**)>
c00120d8:	83 c4 10             	add    esp,0x10
c00120db:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00120e2:	75 b8                	jne    c001209c <SysSpawn(regs*)+0x10>
c00120e4:	83 ec 0c             	sub    esp,0xc
c00120e7:	56                   	push   esi
c00120e8:	e8 97 38 00 00       	call   c0015984 <Process::createUserThread()>
c00120ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00120ef:	83 c4 10             	add    esp,0x10
c00120f2:	83 c4 04             	add    esp,0x4
c00120f5:	5b                   	pop    ebx
c00120f6:	89 c2                	mov    edx,eax
c00120f8:	c1 fa 1f             	sar    edx,0x1f
c00120fb:	5e                   	pop    esi
c00120fc:	c3                   	ret    

c00120fd <SysGetEnv(regs*)>:
c00120fd:	57                   	push   edi
c00120fe:	56                   	push   esi
c00120ff:	53                   	push   ebx
c0012100:	83 ec 1c             	sub    esp,0x1c
c0012103:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012108:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001210c:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001210f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012112:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012115:	51                   	push   ecx
c0012116:	e8 62 ef ff ff       	call   c001107d <KeGetProcessTotalEnvCount(Process*)>
c001211b:	83 c4 10             	add    esp,0x10
c001211e:	39 c7                	cmp    edi,eax
c0012120:	7c 12                	jl     c0012134 <SysGetEnv(regs*)+0x37>
c0012122:	31 c0                	xor    eax,eax
c0012124:	31 d2                	xor    edx,edx
c0012126:	85 f6                	test   esi,esi
c0012128:	74 03                	je     c001212d <SysGetEnv(regs*)+0x30>
c001212a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001212d:	83 c4 10             	add    esp,0x10
c0012130:	5b                   	pop    ebx
c0012131:	5e                   	pop    esi
c0012132:	5f                   	pop    edi
c0012133:	c3                   	ret    
c0012134:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012138:	83 ec 04             	sub    esp,0x4
c001213b:	57                   	push   edi
c001213c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012142:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012145:	57                   	push   edi
c0012146:	50                   	push   eax
c0012147:	e8 51 ef ff ff       	call   c001109d <KeGetProcessEnvPair(Process*, int)>
c001214c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001214f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012153:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012157:	83 c4 0c             	add    esp,0xc
c001215a:	85 d2                	test   edx,edx
c001215c:	75 23                	jne    c0012181 <SysGetEnv(regs*)+0x84>
c001215e:	83 ec 0c             	sub    esp,0xc
c0012161:	50                   	push   eax
c0012162:	e8 19 e4 fe ff       	call   c0000580 <strlen>
c0012167:	89 3c 24             	mov    DWORD PTR [esp],edi
c001216a:	89 c3                	mov    ebx,eax
c001216c:	e8 0f e4 fe ff       	call   c0000580 <strlen>
c0012171:	83 c4 10             	add    esp,0x10
c0012174:	31 d2                	xor    edx,edx
c0012176:	83 c4 10             	add    esp,0x10
c0012179:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001217d:	5b                   	pop    ebx
c001217e:	5e                   	pop    esi
c001217f:	5f                   	pop    edi
c0012180:	c3                   	ret    
c0012181:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012184:	83 ec 08             	sub    esp,0x8
c0012187:	50                   	push   eax
c0012188:	56                   	push   esi
c0012189:	e8 c2 e4 fe ff       	call   c0000650 <strcpy>
c001218e:	58                   	pop    eax
c001218f:	5a                   	pop    edx
c0012190:	68 20 1e 02 c0       	push   0xc0021e20
c0012195:	56                   	push   esi
c0012196:	e8 d5 e6 fe ff       	call   c0000870 <strcat>
c001219b:	59                   	pop    ecx
c001219c:	5b                   	pop    ebx
c001219d:	57                   	push   edi
c001219e:	56                   	push   esi
c001219f:	e8 cc e6 fe ff       	call   c0000870 <strcat>
c00121a4:	83 c4 10             	add    esp,0x10
c00121a7:	31 c0                	xor    eax,eax
c00121a9:	83 c4 10             	add    esp,0x10
c00121ac:	31 d2                	xor    edx,edx
c00121ae:	5b                   	pop    ebx
c00121af:	5e                   	pop    esi
c00121b0:	5f                   	pop    edi
c00121b1:	c3                   	ret    

c00121b2 <SysSetFatAttrib(regs*)>:
c00121b2:	57                   	push   edi
c00121b3:	56                   	push   esi
c00121b4:	53                   	push   ebx
c00121b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00121b9:	83 ec 0c             	sub    esp,0xc
c00121bc:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00121bf:	68 14 01 00 00       	push   0x114
c00121c4:	e8 0a 59 ff ff       	call   c0007ad3 <malloc>
c00121c9:	83 c4 0c             	add    esp,0xc
c00121cc:	89 c3                	mov    ebx,eax
c00121ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121d6:	50                   	push   eax
c00121d7:	57                   	push   edi
c00121d8:	53                   	push   ebx
c00121d9:	e8 3a 95 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c00121de:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00121e1:	83 c4 0c             	add    esp,0xc
c00121e4:	0f b6 d4             	movzx  edx,ah
c00121e7:	0f b6 c0             	movzx  eax,al
c00121ea:	52                   	push   edx
c00121eb:	50                   	push   eax
c00121ec:	53                   	push   ebx
c00121ed:	e8 4a 98 ff ff       	call   c000ba3c <File::chfatattr(unsigned char, unsigned char)>
c00121f2:	83 c4 10             	add    esp,0x10
c00121f5:	85 db                	test   ebx,ebx
c00121f7:	89 c6                	mov    esi,eax
c00121f9:	74 0c                	je     c0012207 <SysSetFatAttrib(regs*)+0x55>
c00121fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121fd:	83 ec 0c             	sub    esp,0xc
c0012200:	53                   	push   ebx
c0012201:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012204:	83 c4 10             	add    esp,0x10
c0012207:	5b                   	pop    ebx
c0012208:	31 c0                	xor    eax,eax
c001220a:	85 f6                	test   esi,esi
c001220c:	0f 95 c0             	setne  al
c001220f:	31 d2                	xor    edx,edx
c0012211:	5e                   	pop    esi
c0012212:	f7 d8                	neg    eax
c0012214:	83 d2 00             	adc    edx,0x0
c0012217:	f7 da                	neg    edx
c0012219:	5f                   	pop    edi
c001221a:	c3                   	ret    

c001221b <SysPipe(regs*)>:
c001221b:	57                   	push   edi
c001221c:	56                   	push   esi
c001221d:	53                   	push   ebx
c001221e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012222:	83 ec 0c             	sub    esp,0xc
c0012225:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012228:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001222b:	6a 20                	push   0x20
c001222d:	e8 a1 58 ff ff       	call   c0007ad3 <malloc>
c0012232:	89 c3                	mov    ebx,eax
c0012234:	58                   	pop    eax
c0012235:	5a                   	pop    edx
c0012236:	68 00 50 00 00       	push   0x5000
c001223b:	53                   	push   ebx
c001223c:	e8 fd 61 ff ff       	call   c000843e <Pipe::Pipe(int)>
c0012241:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012244:	e8 55 6f ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012249:	89 07                	mov    DWORD PTR [edi],eax
c001224b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001224e:	e8 4b 6f ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012253:	83 c4 10             	add    esp,0x10
c0012256:	31 d2                	xor    edx,edx
c0012258:	89 06                	mov    DWORD PTR [esi],eax
c001225a:	31 c0                	xor    eax,eax
c001225c:	5b                   	pop    ebx
c001225d:	5e                   	pop    esi
c001225e:	5f                   	pop    edi
c001225f:	c3                   	ret    

c0012260 <SysGetUnixTime(regs*)>:
c0012260:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012265:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001226b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001226f:	e9 02 9f ff ff       	jmp    c000c176 <Clock::timeInSecondsLocal()>

c0012274 <string_ends_with(char const*, char const*)>:
c0012274:	57                   	push   edi
c0012275:	56                   	push   esi
c0012276:	53                   	push   ebx
c0012277:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001227b:	83 ec 0c             	sub    esp,0xc
c001227e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012282:	53                   	push   ebx
c0012283:	e8 f8 e2 fe ff       	call   c0000580 <strlen>
c0012288:	89 3c 24             	mov    DWORD PTR [esp],edi
c001228b:	89 c6                	mov    esi,eax
c001228d:	e8 ee e2 fe ff       	call   c0000580 <strlen>
c0012292:	83 c4 10             	add    esp,0x10
c0012295:	31 d2                	xor    edx,edx
c0012297:	39 c6                	cmp    esi,eax
c0012299:	7d 06                	jge    c00122a1 <string_ends_with(char const*, char const*)+0x2d>
c001229b:	5b                   	pop    ebx
c001229c:	89 d0                	mov    eax,edx
c001229e:	5e                   	pop    esi
c001229f:	5f                   	pop    edi
c00122a0:	c3                   	ret    
c00122a1:	83 ec 08             	sub    esp,0x8
c00122a4:	29 c6                	sub    esi,eax
c00122a6:	57                   	push   edi
c00122a7:	01 f3                	add    ebx,esi
c00122a9:	53                   	push   ebx
c00122aa:	e8 d1 e4 fe ff       	call   c0000780 <strcmp>
c00122af:	83 c4 10             	add    esp,0x10
c00122b2:	31 d2                	xor    edx,edx
c00122b4:	5b                   	pop    ebx
c00122b5:	5e                   	pop    esi
c00122b6:	85 c0                	test   eax,eax
c00122b8:	5f                   	pop    edi
c00122b9:	0f 94 c2             	sete   dl
c00122bc:	89 d0                	mov    eax,edx
c00122be:	c3                   	ret    

c00122bf <SysOpen(regs*)>:
c00122bf:	56                   	push   esi
c00122c0:	53                   	push   ebx
c00122c1:	81 ec 04 01 00 00    	sub    esp,0x104
c00122c7:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00122ce:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122d1:	85 c0                	test   eax,eax
c00122d3:	0f 84 c5 01 00 00    	je     c001249e <SysOpen(regs*)+0x1df>
c00122d9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00122dc:	85 c0                	test   eax,eax
c00122de:	0f 84 ba 01 00 00    	je     c001249e <SysOpen(regs*)+0x1df>
c00122e4:	83 ec 04             	sub    esp,0x4
c00122e7:	68 22 1e 02 c0       	push   0xc0021e22
c00122ec:	50                   	push   eax
c00122ed:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00122f1:	56                   	push   esi
c00122f2:	e8 2d 92 ff ff       	call   c000b524 <Fs::standardiseFiles(char*, char const*, char const*)>
c00122f7:	89 34 24             	mov    DWORD PTR [esp],esi
c00122fa:	e8 81 e2 fe ff       	call   c0000580 <strlen>
c00122ff:	83 c4 10             	add    esp,0x10
c0012302:	83 e8 01             	sub    eax,0x1
c0012305:	74 29                	je     c0012330 <SysOpen(regs*)+0x71>
c0012307:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001230b:	83 fa 2e             	cmp    edx,0x2e
c001230e:	74 1c                	je     c001232c <SysOpen(regs*)+0x6d>
c0012310:	83 fa 3a             	cmp    edx,0x3a
c0012313:	74 17                	je     c001232c <SysOpen(regs*)+0x6d>
c0012315:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012319:	83 e8 01             	sub    eax,0x1
c001231c:	74 12                	je     c0012330 <SysOpen(regs*)+0x71>
c001231e:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012322:	83 fa 3a             	cmp    edx,0x3a
c0012325:	74 05                	je     c001232c <SysOpen(regs*)+0x6d>
c0012327:	83 fa 2e             	cmp    edx,0x2e
c001232a:	75 e9                	jne    c0012315 <SysOpen(regs*)+0x56>
c001232c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012330:	83 ec 08             	sub    esp,0x8
c0012333:	68 26 1e 02 c0       	push   0xc0021e26
c0012338:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001233b:	50                   	push   eax
c001233c:	e8 33 ff ff ff       	call   c0012274 <string_ends_with(char const*, char const*)>
c0012341:	83 c4 10             	add    esp,0x10
c0012344:	85 c0                	test   eax,eax
c0012346:	74 1d                	je     c0012365 <SysOpen(regs*)+0xa6>
c0012348:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001234b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012351:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012358:	81 c4 04 01 00 00    	add    esp,0x104
c001235e:	31 c0                	xor    eax,eax
c0012360:	5b                   	pop    ebx
c0012361:	31 d2                	xor    edx,edx
c0012363:	5e                   	pop    esi
c0012364:	c3                   	ret    
c0012365:	83 ec 08             	sub    esp,0x8
c0012368:	68 2b 1e 02 c0       	push   0xc0021e2b
c001236d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012370:	50                   	push   eax
c0012371:	e8 fe fe ff ff       	call   c0012274 <string_ends_with(char const*, char const*)>
c0012376:	83 c4 10             	add    esp,0x10
c0012379:	85 c0                	test   eax,eax
c001237b:	75 cb                	jne    c0012348 <SysOpen(regs*)+0x89>
c001237d:	83 ec 08             	sub    esp,0x8
c0012380:	68 27 1e 02 c0       	push   0xc0021e27
c0012385:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012388:	50                   	push   eax
c0012389:	e8 f2 e3 fe ff       	call   c0000780 <strcmp>
c001238e:	83 c4 10             	add    esp,0x10
c0012391:	85 c0                	test   eax,eax
c0012393:	74 b3                	je     c0012348 <SysOpen(regs*)+0x89>
c0012395:	83 ec 08             	sub    esp,0x8
c0012398:	68 26 1e 02 c0       	push   0xc0021e26
c001239d:	56                   	push   esi
c001239e:	e8 d1 fe ff ff       	call   c0012274 <string_ends_with(char const*, char const*)>
c00123a3:	83 c4 10             	add    esp,0x10
c00123a6:	85 c0                	test   eax,eax
c00123a8:	75 9e                	jne    c0012348 <SysOpen(regs*)+0x89>
c00123aa:	83 ec 08             	sub    esp,0x8
c00123ad:	68 30 1e 02 c0       	push   0xc0021e30
c00123b2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123b5:	50                   	push   eax
c00123b6:	e8 b9 fe ff ff       	call   c0012274 <string_ends_with(char const*, char const*)>
c00123bb:	83 c4 10             	add    esp,0x10
c00123be:	85 c0                	test   eax,eax
c00123c0:	0f 85 eb 00 00 00    	jne    c00124b1 <SysOpen(regs*)+0x1f2>
c00123c6:	83 ec 08             	sub    esp,0x8
c00123c9:	68 35 1e 02 c0       	push   0xc0021e35
c00123ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123d1:	50                   	push   eax
c00123d2:	e8 9d fe ff ff       	call   c0012274 <string_ends_with(char const*, char const*)>
c00123d7:	83 c4 10             	add    esp,0x10
c00123da:	85 c0                	test   eax,eax
c00123dc:	0f 85 cf 00 00 00    	jne    c00124b1 <SysOpen(regs*)+0x1f2>
c00123e2:	83 ec 08             	sub    esp,0x8
c00123e5:	68 31 1e 02 c0       	push   0xc0021e31
c00123ea:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00123ed:	51                   	push   ecx
c00123ee:	e8 8d e3 fe ff       	call   c0000780 <strcmp>
c00123f3:	83 c4 10             	add    esp,0x10
c00123f6:	85 c0                	test   eax,eax
c00123f8:	0f 84 b3 00 00 00    	je     c00124b1 <SysOpen(regs*)+0x1f2>
c00123fe:	83 ec 08             	sub    esp,0x8
c0012401:	68 30 1e 02 c0       	push   0xc0021e30
c0012406:	56                   	push   esi
c0012407:	e8 68 fe ff ff       	call   c0012274 <string_ends_with(char const*, char const*)>
c001240c:	83 c4 10             	add    esp,0x10
c001240f:	85 c0                	test   eax,eax
c0012411:	0f 85 9a 00 00 00    	jne    c00124b1 <SysOpen(regs*)+0x1f2>
c0012417:	83 ec 0c             	sub    esp,0xc
c001241a:	68 14 01 00 00       	push   0x114
c001241f:	e8 af 56 ff ff       	call   c0007ad3 <malloc>
c0012424:	83 c4 0c             	add    esp,0xc
c0012427:	89 c6                	mov    esi,eax
c0012429:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001242e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012431:	50                   	push   eax
c0012432:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012435:	52                   	push   edx
c0012436:	56                   	push   esi
c0012437:	e8 dc 92 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c001243c:	83 c4 10             	add    esp,0x10
c001243f:	85 f6                	test   esi,esi
c0012441:	74 5b                	je     c001249e <SysOpen(regs*)+0x1df>
c0012443:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012446:	0f b6 c2             	movzx  eax,dl
c0012449:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001244c:	89 d0                	mov    eax,edx
c001244e:	83 e0 01             	and    eax,0x1
c0012451:	f6 c2 02             	test   dl,0x2
c0012454:	74 03                	je     c0012459 <SysOpen(regs*)+0x19a>
c0012456:	83 c8 02             	or     eax,0x2
c0012459:	f6 c2 04             	test   dl,0x4
c001245c:	74 03                	je     c0012461 <SysOpen(regs*)+0x1a2>
c001245e:	83 c8 04             	or     eax,0x4
c0012461:	f6 c2 08             	test   dl,0x8
c0012464:	74 03                	je     c0012469 <SysOpen(regs*)+0x1aa>
c0012466:	83 c8 0a             	or     eax,0xa
c0012469:	80 e2 10             	and    dl,0x10
c001246c:	74 03                	je     c0012471 <SysOpen(regs*)+0x1b2>
c001246e:	83 c8 12             	or     eax,0x12
c0012471:	83 ec 08             	sub    esp,0x8
c0012474:	50                   	push   eax
c0012475:	56                   	push   esi
c0012476:	e8 59 93 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c001247b:	83 c4 10             	add    esp,0x10
c001247e:	85 c0                	test   eax,eax
c0012480:	75 1c                	jne    c001249e <SysOpen(regs*)+0x1df>
c0012482:	83 ec 0c             	sub    esp,0xc
c0012485:	56                   	push   esi
c0012486:	e8 13 6d ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001248b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001248e:	83 c4 10             	add    esp,0x10
c0012491:	89 02                	mov    DWORD PTR [edx],eax
c0012493:	c1 f8 1f             	sar    eax,0x1f
c0012496:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012499:	e9 ba fe ff ff       	jmp    c0012358 <SysOpen(regs*)+0x99>
c001249e:	81 c4 04 01 00 00    	add    esp,0x104
c00124a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124a9:	5b                   	pop    ebx
c00124aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124af:	5e                   	pop    esi
c00124b0:	c3                   	ret    
c00124b1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00124b4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00124ba:	e9 92 fe ff ff       	jmp    c0012351 <SysOpen(regs*)+0x92>

c00124bf <KeSystemCall(regs*, void*)>:
c00124bf:	53                   	push   ebx
c00124c0:	83 ec 08             	sub    esp,0x8
c00124c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00124ca:	83 f8 3b             	cmp    eax,0x3b
c00124cd:	77 16                	ja     c00124e5 <KeSystemCall(regs*, void*)+0x26>
c00124cf:	8b 14 85 40 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcdc0]
c00124d6:	85 d2                	test   edx,edx
c00124d8:	74 0b                	je     c00124e5 <KeSystemCall(regs*, void*)+0x26>
c00124da:	83 ec 0c             	sub    esp,0xc
c00124dd:	53                   	push   ebx
c00124de:	ff d2                	call   edx
c00124e0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00124e3:	eb 0d                	jmp    c00124f2 <KeSystemCall(regs*, void*)+0x33>
c00124e5:	52                   	push   edx
c00124e6:	52                   	push   edx
c00124e7:	50                   	push   eax
c00124e8:	68 3a 1e 02 c0       	push   0xc0021e3a
c00124ed:	e8 18 84 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00124f2:	83 c4 10             	add    esp,0x10
c00124f5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00124fa:	83 c4 08             	add    esp,0x8
c00124fd:	31 d2                	xor    edx,edx
c00124ff:	5b                   	pop    ebx
c0012500:	c3                   	ret    
c0012501:	66 90                	xchg   ax,ax
c0012503:	90                   	nop

c0012504 <KeSwitchEndian16(unsigned short)>:
c0012504:	83 ec 04             	sub    esp,0x4
c0012507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001250b:	66 89 04 24          	mov    WORD PTR [esp],ax
c001250f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012513:	c1 f8 08             	sar    eax,0x8
c0012516:	89 c2                	mov    edx,eax
c0012518:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001251c:	c1 e0 08             	shl    eax,0x8
c001251f:	09 d0                	or     eax,edx
c0012521:	83 c4 04             	add    esp,0x4
c0012524:	c3                   	ret    
c0012525:	8d 76 00             	lea    esi,[esi+0x0]

c0012528 <KeSwitchEndian32(unsigned int)>:
c0012528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001252c:	c1 e8 18             	shr    eax,0x18
c001252f:	89 c2                	mov    edx,eax
c0012531:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012535:	c1 e0 08             	shl    eax,0x8
c0012538:	25 00 00 ff 00       	and    eax,0xff0000
c001253d:	09 c2                	or     edx,eax
c001253f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012543:	c1 e8 08             	shr    eax,0x8
c0012546:	25 00 ff 00 00       	and    eax,0xff00
c001254b:	09 c2                	or     edx,eax
c001254d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012551:	c1 e0 18             	shl    eax,0x18
c0012554:	09 d0                	or     eax,edx
c0012556:	c3                   	ret    
c0012557:	90                   	nop

c0012558 <EthernetCRC32(unsigned char*, int)>:
c0012558:	83 ec 10             	sub    esp,0x10
c001255b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012560:	75 0a                	jne    c001256c <EthernetCRC32(unsigned char*, int)+0x14>
c0012562:	b8 00 00 00 00       	mov    eax,0x0
c0012567:	e9 8c 00 00 00       	jmp    c00125f8 <EthernetCRC32(unsigned char*, int)+0xa0>
c001256c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012571:	7f 09                	jg     c001257c <EthernetCRC32(unsigned char*, int)+0x24>
c0012573:	b8 00 00 00 00       	mov    eax,0x0
c0012578:	eb 7e                	jmp    c00125f8 <EthernetCRC32(unsigned char*, int)+0xa0>
c001257a:	66 90                	xchg   ax,ax
c001257c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012584:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001258c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012590:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012594:	7d 5a                	jge    c00125f0 <EthernetCRC32(unsigned char*, int)+0x98>
c0012596:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001259a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001259e:	01 d0                	add    eax,edx
c00125a0:	8a 00                	mov    al,BYTE PTR [eax]
c00125a2:	0f b6 c0             	movzx  eax,al
c00125a5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00125a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00125b1:	8d 76 00             	lea    esi,[esi+0x0]
c00125b4:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00125b9:	7f 2d                	jg     c00125e8 <EthernetCRC32(unsigned char*, int)+0x90>
c00125bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125bf:	83 e0 01             	and    eax,0x1
c00125c2:	74 10                	je     c00125d4 <EthernetCRC32(unsigned char*, int)+0x7c>
c00125c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125c8:	d1 e8                	shr    eax,1
c00125ca:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00125cf:	eb 0b                	jmp    c00125dc <EthernetCRC32(unsigned char*, int)+0x84>
c00125d1:	8d 76 00             	lea    esi,[esi+0x0]
c00125d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125d8:	d1 e8                	shr    eax,1
c00125da:	66 90                	xchg   ax,ax
c00125dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00125e0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00125e5:	eb cd                	jmp    c00125b4 <EthernetCRC32(unsigned char*, int)+0x5c>
c00125e7:	90                   	nop
c00125e8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00125ed:	eb 9d                	jmp    c001258c <EthernetCRC32(unsigned char*, int)+0x34>
c00125ef:	90                   	nop
c00125f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125f4:	f7 d0                	not    eax
c00125f6:	66 90                	xchg   ax,ax
c00125f8:	83 c4 10             	add    esp,0x10
c00125fb:	c3                   	ret    

c00125fc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c00125fc:	83 ec 2c             	sub    esp,0x2c
c00125ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012603:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012608:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001260c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012610:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012614:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012617:	0f b7 c0             	movzx  eax,ax
c001261a:	3d 06 08 00 00       	cmp    eax,0x806
c001261f:	75 13                	jne    c0012634 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012621:	83 ec 0c             	sub    esp,0xc
c0012624:	68 4e 1e 02 c0       	push   0xc0021e4e
c0012629:	e8 dc 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001262e:	83 c4 10             	add    esp,0x10
c0012631:	eb 25                	jmp    c0012658 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012633:	90                   	nop
c0012634:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012638:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001263b:	0f b7 c0             	movzx  eax,ax
c001263e:	3d 00 08 00 00       	cmp    eax,0x800
c0012643:	75 13                	jne    c0012658 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012645:	83 ec 0c             	sub    esp,0xc
c0012648:	68 64 1e 02 c0       	push   0xc0021e64
c001264d:	e8 b8 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012652:	83 c4 10             	add    esp,0x10
c0012655:	8d 76 00             	lea    esi,[esi+0x0]
c0012658:	90                   	nop
c0012659:	83 c4 2c             	add    esp,0x2c
c001265c:	c3                   	ret    

c001265d <CmOpen(char const*)>:
c001265d:	57                   	push   edi
c001265e:	56                   	push   esi
c001265f:	53                   	push   ebx
c0012660:	83 ec 1c             	sub    esp,0x1c
c0012663:	6a 30                	push   0x30
c0012665:	e8 69 54 ff ff       	call   c0007ad3 <malloc>
c001266a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012671:	89 c3                	mov    ebx,eax
c0012673:	e8 5b 54 ff ff       	call   c0007ad3 <malloc>
c0012678:	83 c4 0c             	add    esp,0xc
c001267b:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0012681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012685:	89 c6                	mov    esi,eax
c0012687:	50                   	push   eax
c0012688:	e8 8b 90 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c001268d:	83 c4 0c             	add    esp,0xc
c0012690:	89 33                	mov    DWORD PTR [ebx],esi
c0012692:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012696:	50                   	push   eax
c0012697:	8d 44 24 10          	lea    eax,[esp+0x10]
c001269b:	50                   	push   eax
c001269c:	56                   	push   esi
c001269d:	e8 34 94 ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c00126a2:	5a                   	pop    edx
c00126a3:	59                   	pop    ecx
c00126a4:	6a 01                	push   0x1
c00126a6:	ff 33                	push   DWORD PTR [ebx]
c00126a8:	e8 27 91 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c00126ad:	5e                   	pop    esi
c00126ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00126b2:	e8 1c 54 ff ff       	call   c0007ad3 <malloc>
c00126b7:	5a                   	pop    edx
c00126b8:	8d 74 24 10          	lea    esi,[esp+0x10]
c00126bc:	89 c7                	mov    edi,eax
c00126be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00126c2:	56                   	push   esi
c00126c3:	57                   	push   edi
c00126c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126cc:	50                   	push   eax
c00126cd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00126d0:	83 c4 14             	add    esp,0x14
c00126d3:	ff 33                	push   DWORD PTR [ebx]
c00126d5:	e8 58 91 ff ff       	call   c000b832 <File::close()>
c00126da:	59                   	pop    ecx
c00126db:	58                   	pop    eax
c00126dc:	6a 13                	push   0x13
c00126de:	ff 33                	push   DWORD PTR [ebx]
c00126e0:	e8 ef 90 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c00126e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00126e9:	89 34 24             	mov    DWORD PTR [esp],esi
c00126ec:	57                   	push   edi
c00126ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126f5:	50                   	push   eax
c00126f6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00126f9:	83 c4 14             	add    esp,0x14
c00126fc:	57                   	push   edi
c00126fd:	e8 e1 53 ff ff       	call   c0007ae3 <free>
c0012702:	83 c4 10             	add    esp,0x10
c0012705:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012708:	75 10                	jne    c001271a <CmOpen(char const*)+0xbd>
c001270a:	83 ec 0c             	sub    esp,0xc
c001270d:	68 79 1e 02 c0       	push   0xc0021e79
c0012712:	e8 ae ea ff ff       	call   c00111c5 <KePanic(char const*)>
c0012717:	83 c4 10             	add    esp,0x10
c001271a:	50                   	push   eax
c001271b:	6a 00                	push   0x0
c001271d:	6a 00                	push   0x0
c001271f:	ff 33                	push   DWORD PTR [ebx]
c0012721:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012724:	e8 69 91 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0012729:	8b 03                	mov    eax,DWORD PTR [ebx]
c001272b:	8b 10                	mov    edx,DWORD PTR [eax]
c001272d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012730:	57                   	push   edi
c0012731:	6a 00                	push   0x0
c0012733:	6a 2b                	push   0x2b
c0012735:	50                   	push   eax
c0012736:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012739:	83 c4 1c             	add    esp,0x1c
c001273c:	6a 00                	push   0x0
c001273e:	6a 00                	push   0x0
c0012740:	ff 33                	push   DWORD PTR [ebx]
c0012742:	e8 4b 91 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0012747:	83 c4 0c             	add    esp,0xc
c001274a:	6a 08                	push   0x8
c001274c:	68 8a 1e 02 c0       	push   0xc0021e8a
c0012751:	57                   	push   edi
c0012752:	e8 29 dc fe ff       	call   c0000380 <memcmp>
c0012757:	83 c4 10             	add    esp,0x10
c001275a:	85 c0                	test   eax,eax
c001275c:	74 10                	je     c001276e <CmOpen(char const*)+0x111>
c001275e:	83 ec 0c             	sub    esp,0xc
c0012761:	68 93 1e 02 c0       	push   0xc0021e93
c0012766:	e8 5a ea ff ff       	call   c00111c5 <KePanic(char const*)>
c001276b:	83 c4 10             	add    esp,0x10
c001276e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012772:	83 c4 10             	add    esp,0x10
c0012775:	89 d8                	mov    eax,ebx
c0012777:	5b                   	pop    ebx
c0012778:	5e                   	pop    esi
c0012779:	5f                   	pop    edi
c001277a:	c3                   	ret    

c001277b <CmClose(Reghive_Tag*)>:
c001277b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001277f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012783:	74 0b                	je     c0012790 <CmClose(Reghive_Tag*)+0x15>
c0012785:	8b 00                	mov    eax,DWORD PTR [eax]
c0012787:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001278b:	e9 a2 90 ff ff       	jmp    c000b832 <File::close()>
c0012790:	c3                   	ret    

c0012791 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012791:	53                   	push   ebx
c0012792:	83 ec 18             	sub    esp,0x18
c0012795:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012799:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001279d:	74 29                	je     c00127c8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001279f:	50                   	push   eax
c00127a0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00127a5:	99                   	cdq    
c00127a6:	52                   	push   edx
c00127a7:	50                   	push   eax
c00127a8:	ff 33                	push   DWORD PTR [ebx]
c00127aa:	e8 e3 90 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c00127af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127b1:	5a                   	pop    edx
c00127b2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00127b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00127b8:	51                   	push   ecx
c00127b9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00127bd:	6a 00                	push   0x0
c00127bf:	6a 2b                	push   0x2b
c00127c1:	50                   	push   eax
c00127c2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127c5:	83 c4 20             	add    esp,0x20
c00127c8:	83 c4 18             	add    esp,0x18
c00127cb:	5b                   	pop    ebx
c00127cc:	c3                   	ret    

c00127cd <CmGetString(Reghive_Tag*, int, char*)>:
c00127cd:	55                   	push   ebp
c00127ce:	57                   	push   edi
c00127cf:	56                   	push   esi
c00127d0:	53                   	push   ebx
c00127d1:	31 db                	xor    ebx,ebx
c00127d3:	83 ec 70             	sub    esp,0x70
c00127d6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00127da:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00127e1:	50                   	push   eax
c00127e2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00127e9:	55                   	push   ebp
c00127ea:	e8 a2 ff ff ff       	call   c0012791 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127ef:	83 c4 10             	add    esp,0x10
c00127f2:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00127f7:	c1 e0 08             	shl    eax,0x8
c00127fa:	89 c2                	mov    edx,eax
c00127fc:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012801:	09 d0                	or     eax,edx
c0012803:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012808:	c1 e0 08             	shl    eax,0x8
c001280b:	09 d0                	or     eax,edx
c001280d:	74 25                	je     c0012834 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c001280f:	52                   	push   edx
c0012810:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012814:	52                   	push   edx
c0012815:	6b fb 0d             	imul   edi,ebx,0xd
c0012818:	50                   	push   eax
c0012819:	55                   	push   ebp
c001281a:	e8 72 ff ff ff       	call   c0012791 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001281f:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012823:	b9 27 00 00 00       	mov    ecx,0x27
c0012828:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c001282f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012831:	83 c4 10             	add    esp,0x10
c0012834:	83 c3 03             	add    ebx,0x3
c0012837:	83 fb 15             	cmp    ebx,0x15
c001283a:	75 b6                	jne    c00127f2 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c001283c:	83 c4 6c             	add    esp,0x6c
c001283f:	5b                   	pop    ebx
c0012840:	5e                   	pop    esi
c0012841:	5f                   	pop    edi
c0012842:	5d                   	pop    ebp
c0012843:	c3                   	ret    

c0012844 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012844:	83 ec 40             	sub    esp,0x40
c0012847:	8d 44 24 09          	lea    eax,[esp+0x9]
c001284b:	50                   	push   eax
c001284c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012850:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012854:	e8 38 ff ff ff       	call   c0012791 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012859:	83 c4 10             	add    esp,0x10
c001285c:	83 c8 ff             	or     eax,0xffffffff
c001285f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012864:	75 19                	jne    c001287f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012866:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001286b:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012870:	c1 e0 08             	shl    eax,0x8
c0012873:	09 c2                	or     edx,eax
c0012875:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c001287a:	c1 e0 10             	shl    eax,0x10
c001287d:	09 d0                	or     eax,edx
c001287f:	83 c4 3c             	add    esp,0x3c
c0012882:	c3                   	ret    

c0012883 <CmGetNext(Reghive_Tag*, int)>:
c0012883:	83 ec 40             	sub    esp,0x40
c0012886:	8d 44 24 09          	lea    eax,[esp+0x9]
c001288a:	50                   	push   eax
c001288b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001288f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012893:	e8 f9 fe ff ff       	call   c0012791 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012898:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001289d:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00128a2:	c1 e0 08             	shl    eax,0x8
c00128a5:	09 c2                	or     edx,eax
c00128a7:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00128ac:	83 c4 4c             	add    esp,0x4c
c00128af:	c1 e0 10             	shl    eax,0x10
c00128b2:	09 d0                	or     eax,edx
c00128b4:	c3                   	ret    

c00128b5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00128b5:	53                   	push   ebx
c00128b6:	83 ec 18             	sub    esp,0x18
c00128b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00128bd:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00128c1:	74 29                	je     c00128ec <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00128c3:	50                   	push   eax
c00128c4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00128c9:	99                   	cdq    
c00128ca:	52                   	push   edx
c00128cb:	50                   	push   eax
c00128cc:	ff 33                	push   DWORD PTR [ebx]
c00128ce:	e8 bf 8f ff ff       	call   c000b892 <File::seek(unsigned long long)>
c00128d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128d5:	5a                   	pop    edx
c00128d6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00128da:	8b 10                	mov    edx,DWORD PTR [eax]
c00128dc:	51                   	push   ecx
c00128dd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00128e1:	6a 00                	push   0x0
c00128e3:	6a 2b                	push   0x2b
c00128e5:	50                   	push   eax
c00128e6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00128e9:	83 c4 20             	add    esp,0x20
c00128ec:	83 c4 18             	add    esp,0x18
c00128ef:	5b                   	pop    ebx
c00128f0:	c3                   	ret    

c00128f1 <CmFreeExtent(Reghive_Tag*, int)>:
c00128f1:	53                   	push   ebx
c00128f2:	83 ec 3c             	sub    esp,0x3c
c00128f5:	6a 2b                	push   0x2b
c00128f7:	6a 00                	push   0x0
c00128f9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00128fd:	53                   	push   ebx
c00128fe:	e8 ed db fe ff       	call   c00004f0 <memset>
c0012903:	83 c4 0c             	add    esp,0xc
c0012906:	53                   	push   ebx
c0012907:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001290b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001290f:	e8 a1 ff ff ff       	call   c00128b5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012914:	83 c4 48             	add    esp,0x48
c0012917:	5b                   	pop    ebx
c0012918:	c3                   	ret    

c0012919 <CmUpdateHeader(Reghive_Tag*)>:
c0012919:	83 ec 0c             	sub    esp,0xc
c001291c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012920:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012924:	74 10                	je     c0012936 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012926:	52                   	push   edx
c0012927:	8d 50 05             	lea    edx,[eax+0x5]
c001292a:	52                   	push   edx
c001292b:	6a 00                	push   0x0
c001292d:	50                   	push   eax
c001292e:	e8 82 ff ff ff       	call   c00128b5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012933:	83 c4 10             	add    esp,0x10
c0012936:	83 c4 0c             	add    esp,0xc
c0012939:	c3                   	ret    

c001293a <CmExpand(Reghive_Tag*, int)>:
c001293a:	55                   	push   ebp
c001293b:	57                   	push   edi
c001293c:	83 cf ff             	or     edi,0xffffffff
c001293f:	56                   	push   esi
c0012940:	53                   	push   ebx
c0012941:	83 ec 3c             	sub    esp,0x3c
c0012944:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012948:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001294c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012950:	74 59                	je     c00129ab <CmExpand(Reghive_Tag*, int)+0x71>
c0012952:	50                   	push   eax
c0012953:	31 d2                	xor    edx,edx
c0012955:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012959:	31 ff                	xor    edi,edi
c001295b:	52                   	push   edx
c001295c:	50                   	push   eax
c001295d:	ff 33                	push   DWORD PTR [ebx]
c001295f:	e8 2e 8f ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0012964:	83 c4 0c             	add    esp,0xc
c0012967:	6a 2b                	push   0x2b
c0012969:	6a 00                	push   0x0
c001296b:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c001296f:	55                   	push   ebp
c0012970:	e8 7b db fe ff       	call   c00004f0 <memset>
c0012975:	83 c4 10             	add    esp,0x10
c0012978:	39 f7                	cmp    edi,esi
c001297a:	7d 1b                	jge    c0012997 <CmExpand(Reghive_Tag*, int)+0x5d>
c001297c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001297e:	83 ec 0c             	sub    esp,0xc
c0012981:	47                   	inc    edi
c0012982:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012986:	8b 10                	mov    edx,DWORD PTR [eax]
c0012988:	51                   	push   ecx
c0012989:	55                   	push   ebp
c001298a:	6a 00                	push   0x0
c001298c:	6a 2b                	push   0x2b
c001298e:	50                   	push   eax
c001298f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012992:	83 c4 20             	add    esp,0x20
c0012995:	eb e1                	jmp    c0012978 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012997:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c001299a:	83 ec 0c             	sub    esp,0xc
c001299d:	01 fe                	add    esi,edi
c001299f:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c00129a2:	53                   	push   ebx
c00129a3:	e8 71 ff ff ff       	call   c0012919 <CmUpdateHeader(Reghive_Tag*)>
c00129a8:	83 c4 10             	add    esp,0x10
c00129ab:	83 c4 3c             	add    esp,0x3c
c00129ae:	89 f8                	mov    eax,edi
c00129b0:	5b                   	pop    ebx
c00129b1:	5e                   	pop    esi
c00129b2:	5f                   	pop    edi
c00129b3:	5d                   	pop    ebp
c00129b4:	c3                   	ret    

c00129b5 <CmFindUnusedExtent(Reghive_Tag*)>:
c00129b5:	55                   	push   ebp
c00129b6:	57                   	push   edi
c00129b7:	56                   	push   esi
c00129b8:	53                   	push   ebx
c00129b9:	83 cb ff             	or     ebx,0xffffffff
c00129bc:	83 ec 1c             	sub    esp,0x1c
c00129bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00129c3:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00129c7:	74 68                	je     c0012a31 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00129c9:	51                   	push   ecx
c00129ca:	be 2b 00 00 00       	mov    esi,0x2b
c00129cf:	6a 00                	push   0x0
c00129d1:	31 ff                	xor    edi,edi
c00129d3:	6a 00                	push   0x0
c00129d5:	31 db                	xor    ebx,ebx
c00129d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00129da:	e8 b3 8e ff ff       	call   c000b892 <File::seek(unsigned long long)>
c00129df:	83 c4 10             	add    esp,0x10
c00129e2:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00129e5:	76 3b                	jbe    c0012a22 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00129e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129ea:	83 ec 0c             	sub    esp,0xc
c00129ed:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00129f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00129f3:	51                   	push   ecx
c00129f4:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c00129f8:	51                   	push   ecx
c00129f9:	6a 00                	push   0x0
c00129fb:	6a 01                	push   0x1
c00129fd:	50                   	push   eax
c00129fe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012a01:	83 c4 20             	add    esp,0x20
c0012a04:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012a09:	74 26                	je     c0012a31 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012a0b:	52                   	push   edx
c0012a0c:	43                   	inc    ebx
c0012a0d:	57                   	push   edi
c0012a0e:	56                   	push   esi
c0012a0f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012a12:	e8 7b 8e ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0012a17:	83 c6 2b             	add    esi,0x2b
c0012a1a:	83 d7 00             	adc    edi,0x0
c0012a1d:	83 c4 10             	add    esp,0x10
c0012a20:	eb c0                	jmp    c00129e2 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012a22:	50                   	push   eax
c0012a23:	50                   	push   eax
c0012a24:	6a 40                	push   0x40
c0012a26:	55                   	push   ebp
c0012a27:	e8 0e ff ff ff       	call   c001293a <CmExpand(Reghive_Tag*, int)>
c0012a2c:	83 c4 10             	add    esp,0x10
c0012a2f:	89 c3                	mov    ebx,eax
c0012a31:	83 c4 1c             	add    esp,0x1c
c0012a34:	89 d8                	mov    eax,ebx
c0012a36:	5b                   	pop    ebx
c0012a37:	5e                   	pop    esi
c0012a38:	5f                   	pop    edi
c0012a39:	5d                   	pop    ebp
c0012a3a:	c3                   	ret    

c0012a3b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012a3b:	55                   	push   ebp
c0012a3c:	57                   	push   edi
c0012a3d:	56                   	push   esi
c0012a3e:	53                   	push   ebx
c0012a3f:	81 ec 88 00 00 00    	sub    esp,0x88
c0012a45:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012a4c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a53:	e8 5d ff ff ff       	call   c00129b5 <CmFindUnusedExtent(Reghive_Tag*)>
c0012a58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a5c:	83 c4 0c             	add    esp,0xc
c0012a5f:	6a 2b                	push   0x2b
c0012a61:	6a 00                	push   0x0
c0012a63:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012a67:	55                   	push   ebp
c0012a68:	e8 83 da fe ff       	call   c00004f0 <memset>
c0012a6d:	83 c4 10             	add    esp,0x10
c0012a70:	85 db                	test   ebx,ebx
c0012a72:	74 12                	je     c0012a86 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012a74:	51                   	push   ecx
c0012a75:	55                   	push   ebp
c0012a76:	53                   	push   ebx
c0012a77:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a7e:	e8 0e fd ff ff       	call   c0012791 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a83:	83 c4 10             	add    esp,0x10
c0012a86:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012a8a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012a91:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012a96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a98:	85 db                	test   ebx,ebx
c0012a9a:	74 49                	je     c0012ae5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012a9c:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012aa1:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012aa6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012aaa:	c1 e0 08             	shl    eax,0x8
c0012aad:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012ab3:	09 c8                	or     eax,ecx
c0012ab5:	74 11                	je     c0012ac8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012ab7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012abb:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012abf:	c1 e8 10             	shr    eax,0x10
c0012ac2:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012ac6:	eb 0f                	jmp    c0012ad7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012ac8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012acd:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012ad2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012ad7:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012adb:	c1 ea 08             	shr    edx,0x8
c0012ade:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012ae3:	eb 0f                	jmp    c0012af4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012ae5:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012aea:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012aef:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012af4:	52                   	push   edx
c0012af5:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012af9:	50                   	push   eax
c0012afa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012afe:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b05:	e8 ab fd ff ff       	call   c00128b5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b0a:	83 c4 10             	add    esp,0x10
c0012b0d:	85 db                	test   ebx,ebx
c0012b0f:	74 12                	je     c0012b23 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012b11:	50                   	push   eax
c0012b12:	55                   	push   ebp
c0012b13:	53                   	push   ebx
c0012b14:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b1b:	e8 95 fd ff ff       	call   c00128b5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b20:	83 c4 10             	add    esp,0x10
c0012b23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b27:	83 c4 7c             	add    esp,0x7c
c0012b2a:	5b                   	pop    ebx
c0012b2b:	5e                   	pop    esi
c0012b2c:	5f                   	pop    edi
c0012b2d:	5d                   	pop    ebp
c0012b2e:	c3                   	ret    

c0012b2f <CmSetString(Reghive_Tag*, int, char const*)>:
c0012b2f:	55                   	push   ebp
c0012b30:	57                   	push   edi
c0012b31:	56                   	push   esi
c0012b32:	53                   	push   ebx
c0012b33:	bb 27 00 00 00       	mov    ebx,0x27
c0012b38:	81 ec 88 00 00 00    	sub    esp,0x88
c0012b3e:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012b45:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012b4c:	e8 2f da fe ff       	call   c0000580 <strlen>
c0012b51:	8d 48 26             	lea    ecx,[eax+0x26]
c0012b54:	89 c8                	mov    eax,ecx
c0012b56:	99                   	cdq    
c0012b57:	f7 fb                	idiv   ebx
c0012b59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b5d:	83 c4 10             	add    esp,0x10
c0012b60:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012b66:	7e 10                	jle    c0012b78 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012b68:	83 ec 0c             	sub    esp,0xc
c0012b6b:	68 a4 1e 02 c0       	push   0xc0021ea4
c0012b70:	e8 50 e6 ff ff       	call   c00111c5 <KePanic(char const*)>
c0012b75:	83 c4 10             	add    esp,0x10
c0012b78:	53                   	push   ebx
c0012b79:	31 ed                	xor    ebp,ebp
c0012b7b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012b7f:	53                   	push   ebx
c0012b80:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b87:	57                   	push   edi
c0012b88:	e8 04 fc ff ff       	call   c0012791 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b8d:	83 c4 10             	add    esp,0x10
c0012b90:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012b94:	89 f0                	mov    eax,esi
c0012b96:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012b9a:	c1 e0 08             	shl    eax,0x8
c0012b9d:	09 c6                	or     esi,eax
c0012b9f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012ba3:	c1 e6 08             	shl    esi,0x8
c0012ba6:	09 c6                	or     esi,eax
c0012ba8:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012bac:	7e 72                	jle    c0012c20 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012bae:	85 f6                	test   esi,esi
c0012bb0:	75 25                	jne    c0012bd7 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012bb2:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012bb7:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012bbb:	50                   	push   eax
c0012bbc:	6a 00                	push   0x0
c0012bbe:	6a 00                	push   0x0
c0012bc0:	57                   	push   edi
c0012bc1:	e8 75 fe ff ff       	call   c0012a3b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012bc6:	83 c4 10             	add    esp,0x10
c0012bc9:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012bcc:	89 c6                	mov    esi,eax
c0012bce:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012bd1:	c1 f8 10             	sar    eax,0x10
c0012bd4:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012bd7:	51                   	push   ecx
c0012bd8:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012bdc:	52                   	push   edx
c0012bdd:	56                   	push   esi
c0012bde:	57                   	push   edi
c0012bdf:	e8 ad fb ff ff       	call   c0012791 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012be4:	83 c4 0c             	add    esp,0xc
c0012be7:	6a 27                	push   0x27
c0012be9:	6a 00                	push   0x0
c0012beb:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012bef:	51                   	push   ecx
c0012bf0:	e8 fb d8 fe ff       	call   c00004f0 <memset>
c0012bf5:	6b c5 27             	imul   eax,ebp,0x27
c0012bf8:	83 c4 0c             	add    esp,0xc
c0012bfb:	6a 27                	push   0x27
c0012bfd:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012c04:	50                   	push   eax
c0012c05:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c09:	51                   	push   ecx
c0012c0a:	e8 81 da fe ff       	call   c0000690 <strncpy>
c0012c0f:	83 c4 0c             	add    esp,0xc
c0012c12:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012c16:	52                   	push   edx
c0012c17:	56                   	push   esi
c0012c18:	57                   	push   edi
c0012c19:	e8 97 fc ff ff       	call   c00128b5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c1e:	eb 19                	jmp    c0012c39 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012c20:	85 f6                	test   esi,esi
c0012c22:	74 18                	je     c0012c3c <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012c24:	52                   	push   edx
c0012c25:	52                   	push   edx
c0012c26:	56                   	push   esi
c0012c27:	57                   	push   edi
c0012c28:	e8 c4 fc ff ff       	call   c00128f1 <CmFreeExtent(Reghive_Tag*, int)>
c0012c2d:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012c31:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012c35:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012c39:	83 c4 10             	add    esp,0x10
c0012c3c:	45                   	inc    ebp
c0012c3d:	83 c3 03             	add    ebx,0x3
c0012c40:	83 fd 07             	cmp    ebp,0x7
c0012c43:	0f 85 47 ff ff ff    	jne    c0012b90 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012c49:	50                   	push   eax
c0012c4a:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012c4e:	50                   	push   eax
c0012c4f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c56:	57                   	push   edi
c0012c57:	e8 59 fc ff ff       	call   c00128b5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c5c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012c62:	5b                   	pop    ebx
c0012c63:	5e                   	pop    esi
c0012c64:	5f                   	pop    edi
c0012c65:	5d                   	pop    ebp
c0012c66:	c3                   	ret    

c0012c67 <CmGetMatch(char*, char*, bool, bool*)>:
c0012c67:	56                   	push   esi
c0012c68:	53                   	push   ebx
c0012c69:	50                   	push   eax
c0012c6a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012c6f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012c73:	74 25                	je     c0012c9a <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012c75:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012c78:	31 db                	xor    ebx,ebx
c0012c7a:	50                   	push   eax
c0012c7b:	50                   	push   eax
c0012c7c:	8d 04 9d 40 33 02 c0 	lea    eax,[ebx*4-0x3ffdccc0]
c0012c83:	50                   	push   eax
c0012c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c88:	e8 f3 da fe ff       	call   c0000780 <strcmp>
c0012c8d:	83 c4 10             	add    esp,0x10
c0012c90:	85 c0                	test   eax,eax
c0012c92:	74 2e                	je     c0012cc2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012c94:	43                   	inc    ebx
c0012c95:	83 fb 3f             	cmp    ebx,0x3f
c0012c98:	75 e0                	jne    c0012c7a <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012c9a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012c9d:	31 db                	xor    ebx,ebx
c0012c9f:	51                   	push   ecx
c0012ca0:	51                   	push   ecx
c0012ca1:	8d 04 9d 40 33 02 c0 	lea    eax,[ebx*4-0x3ffdccc0]
c0012ca8:	50                   	push   eax
c0012ca9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cad:	e8 ce da fe ff       	call   c0000780 <strcmp>
c0012cb2:	83 c4 10             	add    esp,0x10
c0012cb5:	85 c0                	test   eax,eax
c0012cb7:	74 09                	je     c0012cc2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012cb9:	43                   	inc    ebx
c0012cba:	83 fb 3f             	cmp    ebx,0x3f
c0012cbd:	75 e0                	jne    c0012c9f <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012cbf:	83 cb ff             	or     ebx,0xffffffff
c0012cc2:	5a                   	pop    edx
c0012cc3:	89 d8                	mov    eax,ebx
c0012cc5:	5b                   	pop    ebx
c0012cc6:	5e                   	pop    esi
c0012cc7:	c3                   	ret    

c0012cc8 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012cc8:	55                   	push   ebp
c0012cc9:	31 c0                	xor    eax,eax
c0012ccb:	57                   	push   edi
c0012ccc:	56                   	push   esi
c0012ccd:	53                   	push   ebx
c0012cce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012cd2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012cd6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012cda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012cde:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012ce0:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012ce3:	83 fd 1f             	cmp    ebp,0x1f
c0012ce6:	7f 0b                	jg     c0012cf3 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012ce8:	0f b6 c2             	movzx  eax,dl
c0012ceb:	d3 e0                	shl    eax,cl
c0012ced:	09 07                	or     DWORD PTR [edi],eax
c0012cef:	b0 01                	mov    al,0x1
c0012cf1:	01 33                	add    DWORD PTR [ebx],esi
c0012cf3:	5b                   	pop    ebx
c0012cf4:	5e                   	pop    esi
c0012cf5:	5f                   	pop    edi
c0012cf6:	5d                   	pop    ebp
c0012cf7:	c3                   	ret    

c0012cf8 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012cf8:	57                   	push   edi
c0012cf9:	56                   	push   esi
c0012cfa:	53                   	push   ebx
c0012cfb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012cff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012d03:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012d07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d0b:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012d0d:	7c 17                	jl     c0012d26 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012d0f:	8b 17                	mov    edx,DWORD PTR [edi]
c0012d11:	b8 01 00 00 00       	mov    eax,0x1
c0012d16:	d3 e0                	shl    eax,cl
c0012d18:	48                   	dec    eax
c0012d19:	21 d0                	and    eax,edx
c0012d1b:	d3 ea                	shr    edx,cl
c0012d1d:	89 17                	mov    DWORD PTR [edi],edx
c0012d1f:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012d21:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012d24:	eb 05                	jmp    c0012d2b <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012d26:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d29:	31 c0                	xor    eax,eax
c0012d2b:	5b                   	pop    ebx
c0012d2c:	5e                   	pop    esi
c0012d2d:	5f                   	pop    edi
c0012d2e:	c3                   	ret    

c0012d2f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012d2f:	83 ec 40             	sub    esp,0x40
c0012d32:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012d36:	50                   	push   eax
c0012d37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d3f:	e8 4d fa ff ff       	call   c0012791 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d44:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012d48:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012d4c:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012d50:	89 10                	mov    DWORD PTR [eax],edx
c0012d52:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012d55:	83 c4 4c             	add    esp,0x4c
c0012d58:	c3                   	ret    

c0012d59 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012d59:	55                   	push   ebp
c0012d5a:	57                   	push   edi
c0012d5b:	56                   	push   esi
c0012d5c:	53                   	push   ebx
c0012d5d:	83 ec 40             	sub    esp,0x40
c0012d60:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012d64:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012d68:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012d6c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012d70:	53                   	push   ebx
c0012d71:	56                   	push   esi
c0012d72:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012d76:	e8 16 fa ff ff       	call   c0012791 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d7b:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012d7f:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012d83:	83 c4 0c             	add    esp,0xc
c0012d86:	53                   	push   ebx
c0012d87:	56                   	push   esi
c0012d88:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012d8c:	e8 24 fb ff ff       	call   c00128b5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d91:	83 c4 4c             	add    esp,0x4c
c0012d94:	5b                   	pop    ebx
c0012d95:	5e                   	pop    esi
c0012d96:	5f                   	pop    edi
c0012d97:	5d                   	pop    ebp
c0012d98:	c3                   	ret    

c0012d99 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012d99:	55                   	push   ebp
c0012d9a:	57                   	push   edi
c0012d9b:	56                   	push   esi
c0012d9c:	31 f6                	xor    esi,esi
c0012d9e:	53                   	push   ebx
c0012d9f:	31 db                	xor    ebx,ebx
c0012da1:	83 ec 40             	sub    esp,0x40
c0012da4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012dac:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012db4:	6a 12                	push   0x12
c0012db6:	68 ee 00 00 00       	push   0xee
c0012dbb:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012dbf:	e8 2c d7 fe ff       	call   c00004f0 <memset>
c0012dc4:	83 c4 10             	add    esp,0x10
c0012dc7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012dcb:	6a 08                	push   0x8
c0012dcd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012dd1:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012dd5:	50                   	push   eax
c0012dd6:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012dda:	55                   	push   ebp
c0012ddb:	57                   	push   edi
c0012ddc:	e8 e7 fe ff ff       	call   c0012cc8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012de1:	83 c4 10             	add    esp,0x10
c0012de4:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012de8:	50                   	push   eax
c0012de9:	6a 06                	push   0x6
c0012deb:	55                   	push   ebp
c0012dec:	57                   	push   edi
c0012ded:	e8 06 ff ff ff       	call   c0012cf8 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012dfa:	74 07                	je     c0012e03 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012dfc:	46                   	inc    esi
c0012dfd:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012e01:	eb e1                	jmp    c0012de4 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012e03:	43                   	inc    ebx
c0012e04:	83 fb 12             	cmp    ebx,0x12
c0012e07:	75 c2                	jne    c0012dcb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012e09:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e0d:	31 f6                	xor    esi,esi
c0012e0f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012e12:	50                   	push   eax
c0012e13:	50                   	push   eax
c0012e14:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012e19:	46                   	inc    esi
c0012e1a:	8d 04 85 40 33 02 c0 	lea    eax,[eax*4-0x3ffdccc0]
c0012e21:	50                   	push   eax
c0012e22:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012e26:	e8 45 da fe ff       	call   c0000870 <strcat>
c0012e2b:	83 c4 10             	add    esp,0x10
c0012e2e:	83 fe 18             	cmp    esi,0x18
c0012e31:	75 df                	jne    c0012e12 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012e33:	83 c4 3c             	add    esp,0x3c
c0012e36:	31 c0                	xor    eax,eax
c0012e38:	5b                   	pop    ebx
c0012e39:	5e                   	pop    esi
c0012e3a:	5f                   	pop    edi
c0012e3b:	5d                   	pop    ebp
c0012e3c:	c3                   	ret    

c0012e3d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012e3d:	83 ec 40             	sub    esp,0x40
c0012e40:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e44:	50                   	push   eax
c0012e45:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e49:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e4d:	e8 3f f9 ff ff       	call   c0012791 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e52:	58                   	pop    eax
c0012e53:	5a                   	pop    edx
c0012e54:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012e58:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012e5c:	50                   	push   eax
c0012e5d:	e8 37 ff ff ff       	call   c0012d99 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012e62:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012e67:	83 c4 4c             	add    esp,0x4c
c0012e6a:	c3                   	ret    

c0012e6b <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012e6b:	55                   	push   ebp
c0012e6c:	57                   	push   edi
c0012e6d:	56                   	push   esi
c0012e6e:	53                   	push   ebx
c0012e6f:	31 db                	xor    ebx,ebx
c0012e71:	83 ec 70             	sub    esp,0x70
c0012e74:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012e7b:	6a 30                	push   0x30
c0012e7d:	6a 00                	push   0x0
c0012e7f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012e83:	56                   	push   esi
c0012e84:	e8 67 d6 fe ff       	call   c00004f0 <memset>
c0012e89:	83 c4 10             	add    esp,0x10
c0012e8c:	83 ec 0c             	sub    esp,0xc
c0012e8f:	57                   	push   edi
c0012e90:	e8 eb d6 fe ff       	call   c0000580 <strlen>
c0012e95:	83 c4 10             	add    esp,0x10
c0012e98:	39 d8                	cmp    eax,ebx
c0012e9a:	76 16                	jbe    c0012eb2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012e9c:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012ea0:	83 ec 0c             	sub    esp,0xc
c0012ea3:	50                   	push   eax
c0012ea4:	e8 b7 da fe ff       	call   c0000960 <toupper>
c0012ea9:	83 c4 10             	add    esp,0x10
c0012eac:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012eaf:	43                   	inc    ebx
c0012eb0:	eb da                	jmp    c0012e8c <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012eb2:	52                   	push   edx
c0012eb3:	31 db                	xor    ebx,ebx
c0012eb5:	6a 18                	push   0x18
c0012eb7:	31 ff                	xor    edi,edi
c0012eb9:	6a 3f                	push   0x3f
c0012ebb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ebf:	50                   	push   eax
c0012ec0:	e8 2b d6 fe ff       	call   c00004f0 <memset>
c0012ec5:	83 c4 10             	add    esp,0x10
c0012ec8:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012ecc:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012ed0:	84 c0                	test   al,al
c0012ed2:	0f 84 af 00 00 00    	je     c0012f87 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012ed8:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012edc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012edf:	83 ec 0c             	sub    esp,0xc
c0012ee2:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012ee7:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012eeb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012eef:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0012ef4:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012ef8:	56                   	push   esi
c0012ef9:	e8 82 d6 fe ff       	call   c0000580 <strlen>
c0012efe:	83 c4 10             	add    esp,0x10
c0012f01:	85 c0                	test   eax,eax
c0012f03:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f07:	74 0b                	je     c0012f14 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012f09:	50                   	push   eax
c0012f0a:	6a 01                	push   0x1
c0012f0c:	56                   	push   esi
c0012f0d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012f11:	50                   	push   eax
c0012f12:	eb 0a                	jmp    c0012f1e <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012f14:	50                   	push   eax
c0012f15:	6a 00                	push   0x0
c0012f17:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012f1b:	50                   	push   eax
c0012f1c:	6a 00                	push   0x0
c0012f1e:	e8 44 fd ff ff       	call   c0012c67 <CmGetMatch(char*, char*, bool, bool*)>
c0012f23:	83 c4 10             	add    esp,0x10
c0012f26:	83 f8 ff             	cmp    eax,0xffffffff
c0012f29:	75 1a                	jne    c0012f45 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012f2b:	83 ec 0c             	sub    esp,0xc
c0012f2e:	68 b9 1e 02 c0       	push   0xc0021eb9
c0012f33:	e8 8d e2 ff ff       	call   c00111c5 <KePanic(char const*)>
c0012f38:	83 c4 10             	add    esp,0x10
c0012f3b:	b8 02 00 00 00       	mov    eax,0x2
c0012f40:	e9 bb 00 00 00       	jmp    c0013000 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012f45:	83 ff 18             	cmp    edi,0x18
c0012f48:	75 1a                	jne    c0012f64 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012f4a:	83 ec 0c             	sub    esp,0xc
c0012f4d:	68 ce 1e 02 c0       	push   0xc0021ece
c0012f52:	e8 6e e2 ff ff       	call   c00111c5 <KePanic(char const*)>
c0012f57:	83 c4 10             	add    esp,0x10
c0012f5a:	b8 01 00 00 00       	mov    eax,0x1
c0012f5f:	e9 9c 00 00 00       	jmp    c0013000 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012f64:	47                   	inc    edi
c0012f65:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f6a:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012f6e:	0f 45 dd             	cmovne ebx,ebp
c0012f71:	83 ec 0c             	sub    esp,0xc
c0012f74:	56                   	push   esi
c0012f75:	e8 06 d6 fe ff       	call   c0000580 <strlen>
c0012f7a:	83 c4 10             	add    esp,0x10
c0012f7d:	85 c0                	test   eax,eax
c0012f7f:	74 06                	je     c0012f87 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012f81:	43                   	inc    ebx
c0012f82:	e9 41 ff ff ff       	jmp    c0012ec8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012f87:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012f8f:	31 db                	xor    ebx,ebx
c0012f91:	31 ff                	xor    edi,edi
c0012f93:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012f9b:	50                   	push   eax
c0012f9c:	6a 12                	push   0x12
c0012f9e:	68 ee 00 00 00       	push   0xee
c0012fa3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012faa:	e8 41 d5 fe ff       	call   c00004f0 <memset>
c0012faf:	83 c4 10             	add    esp,0x10
c0012fb2:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012fb6:	83 fb 17             	cmp    ebx,0x17
c0012fb9:	7e 26                	jle    c0012fe1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012fbb:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012fbf:	50                   	push   eax
c0012fc0:	6a 08                	push   0x8
c0012fc2:	55                   	push   ebp
c0012fc3:	56                   	push   esi
c0012fc4:	e8 2f fd ff ff       	call   c0012cf8 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012fc9:	83 c4 10             	add    esp,0x10
c0012fcc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fd1:	74 26                	je     c0012ff9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0012fd3:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012fda:	4b                   	dec    ebx
c0012fdb:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012fde:	47                   	inc    edi
c0012fdf:	eb 1c                	jmp    c0012ffd <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012fe1:	6a 06                	push   0x6
c0012fe3:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012fe8:	50                   	push   eax
c0012fe9:	55                   	push   ebp
c0012fea:	56                   	push   esi
c0012feb:	e8 d8 fc ff ff       	call   c0012cc8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012ff0:	83 c4 10             	add    esp,0x10
c0012ff3:	84 c0                	test   al,al
c0012ff5:	75 06                	jne    c0012ffd <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012ff7:	eb c2                	jmp    c0012fbb <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012ff9:	31 c0                	xor    eax,eax
c0012ffb:	eb 03                	jmp    c0013000 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012ffd:	43                   	inc    ebx
c0012ffe:	eb b2                	jmp    c0012fb2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0013000:	83 c4 6c             	add    esp,0x6c
c0013003:	5b                   	pop    ebx
c0013004:	5e                   	pop    esi
c0013005:	5f                   	pop    edi
c0013006:	5d                   	pop    ebp
c0013007:	c3                   	ret    

c0013008 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013008:	53                   	push   ebx
c0013009:	83 ec 3c             	sub    esp,0x3c
c001300c:	6a 2b                	push   0x2b
c001300e:	6a 00                	push   0x0
c0013010:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013014:	53                   	push   ebx
c0013015:	e8 d6 d4 fe ff       	call   c00004f0 <memset>
c001301a:	58                   	pop    eax
c001301b:	5a                   	pop    edx
c001301c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013020:	50                   	push   eax
c0013021:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013025:	e8 41 fe ff ff       	call   c0012e6b <CmConvertToInternalFilename(char const*, unsigned char*)>
c001302a:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001302f:	83 c4 0c             	add    esp,0xc
c0013032:	6a 15                	push   0x15
c0013034:	6a 00                	push   0x0
c0013036:	8d 44 24 27          	lea    eax,[esp+0x27]
c001303a:	50                   	push   eax
c001303b:	e8 b0 d4 fe ff       	call   c00004f0 <memset>
c0013040:	53                   	push   ebx
c0013041:	6a 00                	push   0x0
c0013043:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013047:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001304b:	e8 eb f9 ff ff       	call   c0012a3b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013050:	83 c4 58             	add    esp,0x58
c0013053:	5b                   	pop    ebx
c0013054:	c3                   	ret    

c0013055 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013055:	56                   	push   esi
c0013056:	53                   	push   ebx
c0013057:	83 ec 48             	sub    esp,0x48
c001305a:	6a 12                	push   0x12
c001305c:	68 ff 00 00 00       	push   0xff
c0013061:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013065:	56                   	push   esi
c0013066:	e8 85 d4 fe ff       	call   c00004f0 <memset>
c001306b:	5a                   	pop    edx
c001306c:	59                   	pop    ecx
c001306d:	56                   	push   esi
c001306e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013072:	e8 f4 fd ff ff       	call   c0012e6b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013077:	83 c4 10             	add    esp,0x10
c001307a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001307e:	85 db                	test   ebx,ebx
c0013080:	74 42                	je     c00130c4 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013082:	50                   	push   eax
c0013083:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013087:	50                   	push   eax
c0013088:	53                   	push   ebx
c0013089:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001308d:	e8 ff f6 ff ff       	call   c0012791 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013092:	83 c4 0c             	add    esp,0xc
c0013095:	6a 12                	push   0x12
c0013097:	8d 44 24 21          	lea    eax,[esp+0x21]
c001309b:	50                   	push   eax
c001309c:	56                   	push   esi
c001309d:	e8 de d2 fe ff       	call   c0000380 <memcmp>
c00130a2:	83 c4 10             	add    esp,0x10
c00130a5:	85 c0                	test   eax,eax
c00130a7:	74 1e                	je     c00130c7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00130a9:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00130ae:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00130b3:	c1 e3 08             	shl    ebx,0x8
c00130b6:	09 d8                	or     eax,ebx
c00130b8:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00130bd:	c1 e3 10             	shl    ebx,0x10
c00130c0:	09 c3                	or     ebx,eax
c00130c2:	eb ba                	jmp    c001307e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00130c4:	83 cb ff             	or     ebx,0xffffffff
c00130c7:	83 c4 44             	add    esp,0x44
c00130ca:	89 d8                	mov    eax,ebx
c00130cc:	5b                   	pop    ebx
c00130cd:	5e                   	pop    esi
c00130ce:	c3                   	ret    

c00130cf <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00130cf:	57                   	push   edi
c00130d0:	56                   	push   esi
c00130d1:	53                   	push   ebx
c00130d2:	83 ec 34             	sub    esp,0x34
c00130d5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00130d9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00130dd:	6a 2b                	push   0x2b
c00130df:	6a 00                	push   0x0
c00130e1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00130e5:	53                   	push   ebx
c00130e6:	e8 05 d4 fe ff       	call   c00004f0 <memset>
c00130eb:	58                   	pop    eax
c00130ec:	5a                   	pop    edx
c00130ed:	8d 44 24 11          	lea    eax,[esp+0x11]
c00130f1:	50                   	push   eax
c00130f2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00130f6:	e8 70 fd ff ff       	call   c0012e6b <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130fb:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00130ff:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013103:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013107:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001310b:	53                   	push   ebx
c001310c:	6a 00                	push   0x0
c001310e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013112:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013116:	e8 20 f9 ff ff       	call   c0012a3b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001311b:	83 c4 50             	add    esp,0x50
c001311e:	5b                   	pop    ebx
c001311f:	5e                   	pop    esi
c0013120:	5f                   	pop    edi
c0013121:	c3                   	ret    

c0013122 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0013122:	55                   	push   ebp
c0013123:	57                   	push   edi
c0013124:	56                   	push   esi
c0013125:	53                   	push   ebx
c0013126:	83 ec 40             	sub    esp,0x40
c0013129:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001312d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013131:	6a 2b                	push   0x2b
c0013133:	6a 00                	push   0x0
c0013135:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013139:	56                   	push   esi
c001313a:	e8 b1 d3 fe ff       	call   c00004f0 <memset>
c001313f:	5f                   	pop    edi
c0013140:	89 ef                	mov    edi,ebp
c0013142:	58                   	pop    eax
c0013143:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013147:	50                   	push   eax
c0013148:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001314c:	e8 1a fd ff ff       	call   c0012e6b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013151:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013156:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001315b:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013160:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013165:	83 c4 10             	add    esp,0x10
c0013168:	85 ed                	test   ebp,ebp
c001316a:	74 14                	je     c0013180 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001316c:	51                   	push   ecx
c001316d:	51                   	push   ecx
c001316e:	57                   	push   edi
c001316f:	53                   	push   ebx
c0013170:	e8 0e f7 ff ff       	call   c0012883 <CmGetNext(Reghive_Tag*, int)>
c0013175:	83 c4 10             	add    esp,0x10
c0013178:	85 c0                	test   eax,eax
c001317a:	74 04                	je     c0013180 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001317c:	89 c7                	mov    edi,eax
c001317e:	eb e8                	jmp    c0013168 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013180:	56                   	push   esi
c0013181:	6a 00                	push   0x0
c0013183:	57                   	push   edi
c0013184:	53                   	push   ebx
c0013185:	e8 b1 f8 ff ff       	call   c0012a3b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001318a:	83 c4 0c             	add    esp,0xc
c001318d:	56                   	push   esi
c001318e:	50                   	push   eax
c001318f:	89 c7                	mov    edi,eax
c0013191:	53                   	push   ebx
c0013192:	e8 fa f5 ff ff       	call   c0012791 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013197:	58                   	pop    eax
c0013198:	5a                   	pop    edx
c0013199:	6a 6c                	push   0x6c
c001319b:	6a 00                	push   0x0
c001319d:	6a 00                	push   0x0
c001319f:	68 df 1e 02 c0       	push   0xc0021edf
c00131a4:	57                   	push   edi
c00131a5:	53                   	push   ebx
c00131a6:	e8 24 ff ff ff       	call   c00130cf <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00131ab:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00131af:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00131b3:	c1 e8 10             	shr    eax,0x10
c00131b6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00131ba:	83 c4 1c             	add    esp,0x1c
c00131bd:	56                   	push   esi
c00131be:	57                   	push   edi
c00131bf:	53                   	push   ebx
c00131c0:	e8 f0 f6 ff ff       	call   c00128b5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00131ca:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00131cf:	c1 e0 08             	shl    eax,0x8
c00131d2:	09 c2                	or     edx,eax
c00131d4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00131d9:	83 c4 4c             	add    esp,0x4c
c00131dc:	5b                   	pop    ebx
c00131dd:	5e                   	pop    esi
c00131de:	c1 e0 10             	shl    eax,0x10
c00131e1:	09 d0                	or     eax,edx
c00131e3:	5f                   	pop    edi
c00131e4:	5d                   	pop    ebp
c00131e5:	c3                   	ret    

c00131e6 <zStrtok(char*, char const*)>:
c00131e6:	55                   	push   ebp
c00131e7:	57                   	push   edi
c00131e8:	56                   	push   esi
c00131e9:	53                   	push   ebx
c00131ea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131f2:	85 db                	test   ebx,ebx
c00131f4:	74 2f                	je     c0013225 <zStrtok(char*, char const*)+0x3f>
c00131f6:	85 c0                	test   eax,eax
c00131f8:	75 09                	jne    c0013203 <zStrtok(char*, char const*)+0x1d>
c00131fa:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c00131ff:	85 c0                	test   eax,eax
c0013201:	74 50                	je     c0013253 <zStrtok(char*, char const*)+0x6d>
c0013203:	31 c9                	xor    ecx,ecx
c0013205:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013209:	74 03                	je     c001320e <zStrtok(char*, char const*)+0x28>
c001320b:	41                   	inc    ecx
c001320c:	eb f7                	jmp    c0013205 <zStrtok(char*, char const*)+0x1f>
c001320e:	31 d2                	xor    edx,edx
c0013210:	39 ca                	cmp    edx,ecx
c0013212:	74 15                	je     c0013229 <zStrtok(char*, char const*)+0x43>
c0013214:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013218:	8d 3c 10             	lea    edi,[eax+edx*1]
c001321b:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001321e:	39 ee                	cmp    esi,ebp
c0013220:	74 13                	je     c0013235 <zStrtok(char*, char const*)+0x4f>
c0013222:	42                   	inc    edx
c0013223:	eb eb                	jmp    c0013210 <zStrtok(char*, char const*)+0x2a>
c0013225:	31 c0                	xor    eax,eax
c0013227:	eb 2a                	jmp    c0013253 <zStrtok(char*, char const*)+0x6d>
c0013229:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c0013233:	eb 1e                	jmp    c0013253 <zStrtok(char*, char const*)+0x6d>
c0013235:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013238:	39 ce                	cmp    esi,ecx
c001323a:	75 0a                	jne    c0013246 <zStrtok(char*, char const*)+0x60>
c001323c:	40                   	inc    eax
c001323d:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c0013242:	89 d8                	mov    eax,ebx
c0013244:	eb 0d                	jmp    c0013253 <zStrtok(char*, char const*)+0x6d>
c0013246:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013249:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001324d:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c0013253:	5b                   	pop    ebx
c0013254:	5e                   	pop    esi
c0013255:	5f                   	pop    edi
c0013256:	5d                   	pop    ebp
c0013257:	c3                   	ret    

c0013258 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013258:	57                   	push   edi
c0013259:	56                   	push   esi
c001325a:	53                   	push   ebx
c001325b:	81 ec 08 01 00 00    	sub    esp,0x108
c0013261:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013268:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001326f:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013273:	53                   	push   ebx
c0013274:	e8 d7 d3 fe ff       	call   c0000650 <strcpy>
c0013279:	59                   	pop    ecx
c001327a:	5e                   	pop    esi
c001327b:	68 43 22 02 c0       	push   0xc0022243
c0013280:	53                   	push   ebx
c0013281:	bb 01 00 00 00       	mov    ebx,0x1
c0013286:	e8 5b ff ff ff       	call   c00131e6 <zStrtok(char*, char const*)>
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	85 c0                	test   eax,eax
c0013290:	74 3b                	je     c00132cd <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013292:	52                   	push   edx
c0013293:	50                   	push   eax
c0013294:	6a 01                	push   0x1
c0013296:	57                   	push   edi
c0013297:	e8 b9 fd ff ff       	call   c0013055 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c001329c:	59                   	pop    ecx
c001329d:	5e                   	pop    esi
c001329e:	89 c3                	mov    ebx,eax
c00132a0:	68 43 22 02 c0       	push   0xc0022243
c00132a5:	6a 00                	push   0x0
c00132a7:	e8 3a ff ff ff       	call   c00131e6 <zStrtok(char*, char const*)>
c00132ac:	83 c4 10             	add    esp,0x10
c00132af:	85 c0                	test   eax,eax
c00132b1:	89 c6                	mov    esi,eax
c00132b3:	74 18                	je     c00132cd <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132b5:	52                   	push   edx
c00132b6:	52                   	push   edx
c00132b7:	53                   	push   ebx
c00132b8:	57                   	push   edi
c00132b9:	e8 86 f5 ff ff       	call   c0012844 <CmEnterDirectory(Reghive_Tag*, int)>
c00132be:	83 c4 10             	add    esp,0x10
c00132c1:	83 f8 ff             	cmp    eax,0xffffffff
c00132c4:	89 c3                	mov    ebx,eax
c00132c6:	74 05                	je     c00132cd <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132c8:	50                   	push   eax
c00132c9:	56                   	push   esi
c00132ca:	53                   	push   ebx
c00132cb:	eb c9                	jmp    c0013296 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00132cd:	81 c4 00 01 00 00    	add    esp,0x100
c00132d3:	89 d8                	mov    eax,ebx
c00132d5:	5b                   	pop    ebx
c00132d6:	5e                   	pop    esi
c00132d7:	5f                   	pop    edi
c00132d8:	c3                   	ret    

c00132d9 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00132d9:	55                   	push   ebp
c00132da:	57                   	push   edi
c00132db:	56                   	push   esi
c00132dc:	53                   	push   ebx
c00132dd:	83 ec 5c             	sub    esp,0x5c
c00132e0:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00132e4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00132e8:	85 db                	test   ebx,ebx
c00132ea:	0f 8e 84 00 00 00    	jle    c0013374 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00132f0:	57                   	push   edi
c00132f1:	31 ed                	xor    ebp,ebp
c00132f3:	6a 32                	push   0x32
c00132f5:	6a 00                	push   0x0
c00132f7:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00132fb:	57                   	push   edi
c00132fc:	e8 ef d1 fe ff       	call   c00004f0 <memset>
c0013301:	83 c4 0c             	add    esp,0xc
c0013304:	57                   	push   edi
c0013305:	53                   	push   ebx
c0013306:	56                   	push   esi
c0013307:	e8 31 fb ff ff       	call   c0012e3d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001330c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013310:	83 c4 10             	add    esp,0x10
c0013313:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013317:	7d 13                	jge    c001332c <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013319:	83 ec 0c             	sub    esp,0xc
c001331c:	45                   	inc    ebp
c001331d:	68 e7 25 02 c0       	push   0xc00225e7
c0013322:	e8 e3 75 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013327:	83 c4 10             	add    esp,0x10
c001332a:	eb e7                	jmp    c0013313 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c001332c:	51                   	push   ecx
c001332d:	57                   	push   edi
c001332e:	53                   	push   ebx
c001332f:	68 e5 1e 02 c0       	push   0xc0021ee5
c0013334:	e8 d1 75 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013339:	83 c4 10             	add    esp,0x10
c001333c:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013341:	75 1e                	jne    c0013361 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013343:	52                   	push   edx
c0013344:	52                   	push   edx
c0013345:	53                   	push   ebx
c0013346:	56                   	push   esi
c0013347:	e8 f8 f4 ff ff       	call   c0012844 <CmEnterDirectory(Reghive_Tag*, int)>
c001334c:	83 c4 0c             	add    esp,0xc
c001334f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013353:	8d 51 04             	lea    edx,[ecx+0x4]
c0013356:	52                   	push   edx
c0013357:	50                   	push   eax
c0013358:	56                   	push   esi
c0013359:	e8 7b ff ff ff       	call   c00132d9 <CmDisplayTree(Reghive_Tag*, int, int)>
c001335e:	83 c4 10             	add    esp,0x10
c0013361:	50                   	push   eax
c0013362:	50                   	push   eax
c0013363:	53                   	push   ebx
c0013364:	56                   	push   esi
c0013365:	e8 19 f5 ff ff       	call   c0012883 <CmGetNext(Reghive_Tag*, int)>
c001336a:	83 c4 10             	add    esp,0x10
c001336d:	89 c3                	mov    ebx,eax
c001336f:	e9 74 ff ff ff       	jmp    c00132e8 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013374:	83 c4 5c             	add    esp,0x5c
c0013377:	5b                   	pop    ebx
c0013378:	5e                   	pop    esi
c0013379:	5f                   	pop    edi
c001337a:	5d                   	pop    ebp
c001337b:	c3                   	ret    

c001337c <CmSplitFinalSlashInPlace(char*)>:
c001337c:	53                   	push   ebx
c001337d:	83 ec 14             	sub    esp,0x14
c0013380:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013384:	53                   	push   ebx
c0013385:	e8 f6 d1 fe ff       	call   c0000580 <strlen>
c001338a:	83 c4 10             	add    esp,0x10
c001338d:	48                   	dec    eax
c001338e:	85 c0                	test   eax,eax
c0013390:	74 15                	je     c00133a7 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013392:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013396:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013399:	75 09                	jne    c00133a4 <CmSplitFinalSlashInPlace(char*)+0x28>
c001339b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001339e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00133a2:	eb 05                	jmp    c00133a9 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00133a4:	48                   	dec    eax
c00133a5:	eb e7                	jmp    c001338e <CmSplitFinalSlashInPlace(char*)+0x12>
c00133a7:	31 c0                	xor    eax,eax
c00133a9:	83 c4 08             	add    esp,0x8
c00133ac:	5b                   	pop    ebx
c00133ad:	c3                   	ret    

c00133ae <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00133ae:	55                   	push   ebp
c00133af:	57                   	push   edi
c00133b0:	56                   	push   esi
c00133b1:	53                   	push   ebx
c00133b2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00133b8:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00133bf:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00133c2:	8d 43 01             	lea    eax,[ebx+0x1]
c00133c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133c9:	89 f0                	mov    eax,esi
c00133cb:	3c 40                	cmp    al,0x40
c00133cd:	75 1b                	jne    c00133ea <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00133cf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00133d2:	85 c0                	test   eax,eax
c00133d4:	74 08                	je     c00133de <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00133d6:	83 f8 3a             	cmp    eax,0x3a
c00133d9:	74 03                	je     c00133de <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00133db:	43                   	inc    ebx
c00133dc:	eb f1                	jmp    c00133cf <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00133de:	85 c0                	test   eax,eax
c00133e0:	0f 84 45 01 00 00    	je     c001352b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00133e6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00133e9:	43                   	inc    ebx
c00133ea:	50                   	push   eax
c00133eb:	6a 40                	push   0x40
c00133ed:	6a 00                	push   0x0
c00133ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c00133f3:	50                   	push   eax
c00133f4:	e8 f7 d0 fe ff       	call   c00004f0 <memset>
c00133f9:	89 f1                	mov    ecx,esi
c00133fb:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013402:	31 c0                	xor    eax,eax
c0013404:	83 c4 10             	add    esp,0x10
c0013407:	0f be f1             	movsx  esi,cl
c001340a:	0f be 17             	movsx  edx,BYTE PTR [edi]
c001340d:	85 d2                	test   edx,edx
c001340f:	89 d1                	mov    ecx,edx
c0013411:	0f 84 14 01 00 00    	je     c001352b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013417:	3d c7 00 00 00       	cmp    eax,0xc7
c001341c:	0f 8f 09 01 00 00    	jg     c001352b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013422:	83 fa 0a             	cmp    edx,0xa
c0013425:	0f 85 f1 00 00 00    	jne    c001351c <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c001342b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013430:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013435:	89 c8                	mov    eax,ecx
c0013437:	a8 df                	test   al,0xdf
c0013439:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001343e:	83 f9 23             	cmp    ecx,0x23
c0013441:	0f 94 c2             	sete   dl
c0013444:	89 d5                	mov    ebp,edx
c0013446:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001344a:	09 ea                	or     edx,ebp
c001344c:	80 e2 01             	and    dl,0x1
c001344f:	75 47                	jne    c0013498 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013451:	83 e8 09             	sub    eax,0x9
c0013454:	3c 01                	cmp    al,0x1
c0013456:	76 40                	jbe    c0013498 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013458:	83 f9 5b             	cmp    ecx,0x5b
c001345b:	75 42                	jne    c001349f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c001345d:	83 fe 40             	cmp    esi,0x40
c0013460:	75 36                	jne    c0013498 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013462:	83 ec 0c             	sub    esp,0xc
c0013465:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013469:	55                   	push   ebp
c001346a:	e8 11 d1 fe ff       	call   c0000580 <strlen>
c001346f:	83 c4 10             	add    esp,0x10
c0013472:	83 f8 3f             	cmp    eax,0x3f
c0013475:	0f 87 b0 00 00 00    	ja     c001352b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001347b:	50                   	push   eax
c001347c:	50                   	push   eax
c001347d:	55                   	push   ebp
c001347e:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0013482:	55                   	push   ebp
c0013483:	e8 c8 d1 fe ff       	call   c0000650 <strcpy>
c0013488:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001348b:	e8 f0 d0 fe ff       	call   c0000580 <strlen>
c0013490:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013495:	83 c4 10             	add    esp,0x10
c0013498:	31 d2                	xor    edx,edx
c001349a:	e9 84 00 00 00       	jmp    c0013523 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c001349f:	83 fe 40             	cmp    esi,0x40
c00134a2:	74 06                	je     c00134aa <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c00134a4:	8d 54 24 58          	lea    edx,[esp+0x58]
c00134a8:	eb 19                	jmp    c00134c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00134aa:	51                   	push   ecx
c00134ab:	51                   	push   ecx
c00134ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00134b0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134b4:	50                   	push   eax
c00134b5:	e8 c6 d2 fe ff       	call   c0000780 <strcmp>
c00134ba:	83 c4 10             	add    esp,0x10
c00134bd:	85 c0                	test   eax,eax
c00134bf:	75 d7                	jne    c0013498 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00134c1:	eb e1                	jmp    c00134a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c00134c3:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00134c6:	85 c9                	test   ecx,ecx
c00134c8:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00134cd:	83 f9 3d             	cmp    ecx,0x3d
c00134d0:	0f 94 c0             	sete   al
c00134d3:	89 c5                	mov    ebp,eax
c00134d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134d9:	09 e8                	or     eax,ebp
c00134db:	a8 01                	test   al,0x1
c00134dd:	89 c5                	mov    ebp,eax
c00134df:	75 03                	jne    c00134e4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c00134e1:	42                   	inc    edx
c00134e2:	eb df                	jmp    c00134c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00134e4:	85 c9                	test   ecx,ecx
c00134e6:	74 43                	je     c001352b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00134e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00134ec:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00134ef:	52                   	push   edx
c00134f0:	52                   	push   edx
c00134f1:	8d 44 24 60          	lea    eax,[esp+0x60]
c00134f5:	50                   	push   eax
c00134f6:	53                   	push   ebx
c00134f7:	e8 84 d2 fe ff       	call   c0000780 <strcmp>
c00134fc:	83 c4 10             	add    esp,0x10
c00134ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013503:	85 c0                	test   eax,eax
c0013505:	75 91                	jne    c0013498 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013507:	50                   	push   eax
c0013508:	42                   	inc    edx
c0013509:	50                   	push   eax
c001350a:	52                   	push   edx
c001350b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013512:	e8 39 d1 fe ff       	call   c0000650 <strcpy>
c0013517:	83 c4 10             	add    esp,0x10
c001351a:	eb 11                	jmp    c001352d <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c001351c:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013520:	8d 50 01             	lea    edx,[eax+0x1]
c0013523:	47                   	inc    edi
c0013524:	89 d0                	mov    eax,edx
c0013526:	e9 df fe ff ff       	jmp    c001340a <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c001352b:	31 ed                	xor    ebp,ebp
c001352d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013533:	89 e8                	mov    eax,ebp
c0013535:	5b                   	pop    ebx
c0013536:	5e                   	pop    esi
c0013537:	5f                   	pop    edi
c0013538:	5d                   	pop    ebp
c0013539:	c3                   	ret    

c001353a <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001353a:	57                   	push   edi
c001353b:	56                   	push   esi
c001353c:	53                   	push   ebx
c001353d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013543:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001354a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013551:	53                   	push   ebx
c0013552:	e8 29 d0 fe ff       	call   c0000580 <strlen>
c0013557:	89 34 24             	mov    DWORD PTR [esp],esi
c001355a:	89 c7                	mov    edi,eax
c001355c:	e8 1f d0 fe ff       	call   c0000580 <strlen>
c0013561:	83 c4 10             	add    esp,0x10
c0013564:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013568:	3d ff 00 00 00       	cmp    eax,0xff
c001356d:	0f 87 d3 00 00 00    	ja     c0013646 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013573:	57                   	push   edi
c0013574:	57                   	push   edi
c0013575:	56                   	push   esi
c0013576:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001357a:	56                   	push   esi
c001357b:	e8 d0 d0 fe ff       	call   c0000650 <strcpy>
c0013580:	58                   	pop    eax
c0013581:	5a                   	pop    edx
c0013582:	68 43 22 02 c0       	push   0xc0022243
c0013587:	56                   	push   esi
c0013588:	e8 e3 d2 fe ff       	call   c0000870 <strcat>
c001358d:	59                   	pop    ecx
c001358e:	5f                   	pop    edi
c001358f:	53                   	push   ebx
c0013590:	56                   	push   esi
c0013591:	e8 da d2 fe ff       	call   c0000870 <strcat>
c0013596:	58                   	pop    eax
c0013597:	5a                   	pop    edx
c0013598:	68 ef 1e 02 c0       	push   0xc0021eef
c001359d:	56                   	push   esi
c001359e:	e8 cd d2 fe ff       	call   c0000870 <strcat>
c00135a3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00135aa:	e8 24 45 ff ff       	call   c0007ad3 <malloc>
c00135af:	83 c4 0c             	add    esp,0xc
c00135b2:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00135b8:	56                   	push   esi
c00135b9:	50                   	push   eax
c00135ba:	89 c3                	mov    ebx,eax
c00135bc:	e8 57 81 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c00135c1:	83 c4 10             	add    esp,0x10
c00135c4:	85 db                	test   ebx,ebx
c00135c6:	74 7e                	je     c0013646 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00135c8:	51                   	push   ecx
c00135c9:	51                   	push   ecx
c00135ca:	6a 01                	push   0x1
c00135cc:	53                   	push   ebx
c00135cd:	e8 02 82 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c00135d2:	83 c4 10             	add    esp,0x10
c00135d5:	85 c0                	test   eax,eax
c00135d7:	74 08                	je     c00135e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00135d9:	83 ec 0c             	sub    esp,0xc
c00135dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135de:	53                   	push   ebx
c00135df:	eb 5f                	jmp    c0013640 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00135e1:	52                   	push   edx
c00135e2:	8d 44 24 17          	lea    eax,[esp+0x17]
c00135e6:	50                   	push   eax
c00135e7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00135eb:	50                   	push   eax
c00135ec:	53                   	push   ebx
c00135ed:	e8 e4 84 ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c00135f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00135f6:	83 c4 10             	add    esp,0x10
c00135f9:	89 c1                	mov    ecx,eax
c00135fb:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00135ff:	74 31                	je     c0013632 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013601:	83 ec 0c             	sub    esp,0xc
c0013604:	50                   	push   eax
c0013605:	e8 c9 44 ff ff       	call   c0007ad3 <malloc>
c001360a:	89 c6                	mov    esi,eax
c001360c:	58                   	pop    eax
c001360d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001360f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013613:	52                   	push   edx
c0013614:	56                   	push   esi
c0013615:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013619:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001361d:	53                   	push   ebx
c001361e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013621:	83 c4 20             	add    esp,0x20
c0013624:	85 c0                	test   eax,eax
c0013626:	75 0a                	jne    c0013632 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001362c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013630:	74 18                	je     c001364a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013632:	83 ec 0c             	sub    esp,0xc
c0013635:	53                   	push   ebx
c0013636:	e8 f7 81 ff ff       	call   c000b832 <File::close()>
c001363b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001363d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013640:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013643:	83 c4 10             	add    esp,0x10
c0013646:	31 c0                	xor    eax,eax
c0013648:	eb 3b                	jmp    c0013685 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001364a:	83 ec 0c             	sub    esp,0xc
c001364d:	53                   	push   ebx
c001364e:	e8 df 81 ff ff       	call   c000b832 <File::close()>
c0013653:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013655:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013658:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001365b:	83 c4 0c             	add    esp,0xc
c001365e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013665:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001366c:	56                   	push   esi
c001366d:	e8 3c fd ff ff       	call   c00133ae <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013672:	89 34 24             	mov    DWORD PTR [esp],esi
c0013675:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013679:	e8 65 44 ff ff       	call   c0007ae3 <free>
c001367e:	83 c4 10             	add    esp,0x10
c0013681:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013685:	81 c4 20 01 00 00    	add    esp,0x120
c001368b:	5b                   	pop    ebx
c001368c:	5e                   	pop    esi
c001368d:	5f                   	pop    edi
c001368e:	c3                   	ret    

c001368f <Reg::getLine(char*, char*, char*)>:
c001368f:	57                   	push   edi
c0013690:	56                   	push   esi
c0013691:	53                   	push   ebx
c0013692:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013696:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001369a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001369e:	57                   	push   edi
c001369f:	56                   	push   esi
c00136a0:	53                   	push   ebx
c00136a1:	68 f4 1e 02 c0       	push   0xc0021ef4
c00136a6:	e8 8f fe ff ff       	call   c001353a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00136ab:	83 c4 10             	add    esp,0x10
c00136ae:	84 c0                	test   al,al
c00136b0:	75 10                	jne    c00136c2 <Reg::getLine(char*, char*, char*)+0x33>
c00136b2:	57                   	push   edi
c00136b3:	56                   	push   esi
c00136b4:	53                   	push   ebx
c00136b5:	68 19 1f 02 c0       	push   0xc0021f19
c00136ba:	e8 7b fe ff ff       	call   c001353a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00136bf:	83 c4 10             	add    esp,0x10
c00136c2:	5b                   	pop    ebx
c00136c3:	5e                   	pop    esi
c00136c4:	5f                   	pop    edi
c00136c5:	c3                   	ret    

c00136c6 <Reg::readInt(char*, char*, int*)>:
c00136c6:	55                   	push   ebp
c00136c7:	57                   	push   edi
c00136c8:	56                   	push   esi
c00136c9:	53                   	push   ebx
c00136ca:	81 ec f0 00 00 00    	sub    esp,0xf0
c00136d0:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00136d4:	55                   	push   ebp
c00136d5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00136dc:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00136e3:	e8 a7 ff ff ff       	call   c001368f <Reg::getLine(char*, char*, char*)>
c00136e8:	83 c4 10             	add    esp,0x10
c00136eb:	84 c0                	test   al,al
c00136ed:	0f 84 b6 00 00 00    	je     c00137a9 <Reg::readInt(char*, char*, int*)+0xe3>
c00136f3:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00136f8:	83 fa 2b             	cmp    edx,0x2b
c00136fb:	74 0c                	je     c0013709 <Reg::readInt(char*, char*, int*)+0x43>
c00136fd:	83 fa 2d             	cmp    edx,0x2d
c0013700:	75 0e                	jne    c0013710 <Reg::readInt(char*, char*, int*)+0x4a>
c0013702:	ba 01 00 00 00       	mov    edx,0x1
c0013707:	eb 0b                	jmp    c0013714 <Reg::readInt(char*, char*, int*)+0x4e>
c0013709:	ba 01 00 00 00       	mov    edx,0x1
c001370e:	eb 02                	jmp    c0013712 <Reg::readInt(char*, char*, int*)+0x4c>
c0013710:	31 d2                	xor    edx,edx
c0013712:	31 c0                	xor    eax,eax
c0013714:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013719:	be 0a 00 00 00       	mov    esi,0xa
c001371e:	75 21                	jne    c0013741 <Reg::readInt(char*, char*, int*)+0x7b>
c0013720:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013725:	83 f9 78             	cmp    ecx,0x78
c0013728:	75 0a                	jne    c0013734 <Reg::readInt(char*, char*, int*)+0x6e>
c001372a:	83 c2 02             	add    edx,0x2
c001372d:	be 10 00 00 00       	mov    esi,0x10
c0013732:	eb 0d                	jmp    c0013741 <Reg::readInt(char*, char*, int*)+0x7b>
c0013734:	83 f9 62             	cmp    ecx,0x62
c0013737:	75 08                	jne    c0013741 <Reg::readInt(char*, char*, int*)+0x7b>
c0013739:	83 c2 02             	add    edx,0x2
c001373c:	be 02 00 00 00       	mov    esi,0x2
c0013741:	01 d5                	add    ebp,edx
c0013743:	31 d2                	xor    edx,edx
c0013745:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013749:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001374d:	85 c9                	test   ecx,ecx
c001374f:	0f 94 c3             	sete   bl
c0013752:	83 f9 0d             	cmp    ecx,0xd
c0013755:	89 df                	mov    edi,ebx
c0013757:	0f 94 c3             	sete   bl
c001375a:	09 df                	or     edi,ebx
c001375c:	89 fb                	mov    ebx,edi
c001375e:	83 e7 01             	and    edi,0x1
c0013761:	75 35                	jne    c0013798 <Reg::readInt(char*, char*, int*)+0xd2>
c0013763:	0f af d6             	imul   edx,esi
c0013766:	83 fe 10             	cmp    esi,0x10
c0013769:	75 26                	jne    c0013791 <Reg::readInt(char*, char*, int*)+0xcb>
c001376b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001376f:	83 ef 41             	sub    edi,0x41
c0013772:	89 fb                	mov    ebx,edi
c0013774:	80 fb 05             	cmp    bl,0x5
c0013777:	77 06                	ja     c001377f <Reg::readInt(char*, char*, int*)+0xb9>
c0013779:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c001377d:	eb 16                	jmp    c0013795 <Reg::readInt(char*, char*, int*)+0xcf>
c001377f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013783:	83 eb 61             	sub    ebx,0x61
c0013786:	80 fb 05             	cmp    bl,0x5
c0013789:	77 06                	ja     c0013791 <Reg::readInt(char*, char*, int*)+0xcb>
c001378b:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c001378f:	eb 04                	jmp    c0013795 <Reg::readInt(char*, char*, int*)+0xcf>
c0013791:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013795:	45                   	inc    ebp
c0013796:	eb ad                	jmp    c0013745 <Reg::readInt(char*, char*, int*)+0x7f>
c0013798:	84 c0                	test   al,al
c001379a:	74 02                	je     c001379e <Reg::readInt(char*, char*, int*)+0xd8>
c001379c:	f7 da                	neg    edx
c001379e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00137a5:	89 10                	mov    DWORD PTR [eax],edx
c00137a7:	88 d8                	mov    al,bl
c00137a9:	81 c4 ec 00 00 00    	add    esp,0xec
c00137af:	5b                   	pop    ebx
c00137b0:	5e                   	pop    esi
c00137b1:	5f                   	pop    edi
c00137b2:	5d                   	pop    ebp
c00137b3:	c3                   	ret    

c00137b4 <Reg::readString(char*, char*, char*, int)>:
c00137b4:	57                   	push   edi
c00137b5:	56                   	push   esi
c00137b6:	53                   	push   ebx
c00137b7:	81 ec d4 00 00 00    	sub    esp,0xd4
c00137bd:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00137c1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00137c8:	57                   	push   edi
c00137c9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137d0:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137d7:	e8 b3 fe ff ff       	call   c001368f <Reg::getLine(char*, char*, char*)>
c00137dc:	83 c4 10             	add    esp,0x10
c00137df:	84 c0                	test   al,al
c00137e1:	89 c6                	mov    esi,eax
c00137e3:	74 44                	je     c0013829 <Reg::readString(char*, char*, char*, int)+0x75>
c00137e5:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00137ec:	31 c0                	xor    eax,eax
c00137ee:	4a                   	dec    edx
c00137ef:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00137f2:	84 c9                	test   cl,cl
c00137f4:	74 0f                	je     c0013805 <Reg::readString(char*, char*, char*, int)+0x51>
c00137f6:	39 c2                	cmp    edx,eax
c00137f8:	7e 0b                	jle    c0013805 <Reg::readString(char*, char*, char*, int)+0x51>
c00137fa:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00137fd:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013802:	40                   	inc    eax
c0013803:	eb ea                	jmp    c00137ef <Reg::readString(char*, char*, char*, int)+0x3b>
c0013805:	83 ec 0c             	sub    esp,0xc
c0013808:	53                   	push   ebx
c0013809:	e8 72 cd fe ff       	call   c0000580 <strlen>
c001380e:	83 c4 10             	add    esp,0x10
c0013811:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013816:	75 11                	jne    c0013829 <Reg::readString(char*, char*, char*, int)+0x75>
c0013818:	83 ec 0c             	sub    esp,0xc
c001381b:	53                   	push   ebx
c001381c:	e8 5f cd fe ff       	call   c0000580 <strlen>
c0013821:	83 c4 10             	add    esp,0x10
c0013824:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013829:	81 c4 d0 00 00 00    	add    esp,0xd0
c001382f:	89 f0                	mov    eax,esi
c0013831:	5b                   	pop    ebx
c0013832:	5e                   	pop    esi
c0013833:	5f                   	pop    edi
c0013834:	c3                   	ret    

c0013835 <Reg::readBool(char*, char*, bool*)>:
c0013835:	83 ec 20             	sub    esp,0x20
c0013838:	8d 44 24 10          	lea    eax,[esp+0x10]
c001383c:	50                   	push   eax
c001383d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013841:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013845:	e8 7c fe ff ff       	call   c00136c6 <Reg::readInt(char*, char*, int*)>
c001384a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001384e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013853:	0f 95 02             	setne  BYTE PTR [edx]
c0013856:	83 c4 2c             	add    esp,0x2c
c0013859:	c3                   	ret    

c001385a <Reg::readBoolWithDefault(char*, char*, bool)>:
c001385a:	53                   	push   ebx
c001385b:	83 ec 1c             	sub    esp,0x1c
c001385e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013862:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013866:	50                   	push   eax
c0013867:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001386b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001386f:	e8 c1 ff ff ff       	call   c0013835 <Reg::readBool(char*, char*, bool*)>
c0013874:	83 c4 10             	add    esp,0x10
c0013877:	84 c0                	test   al,al
c0013879:	74 04                	je     c001387f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001387b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001387f:	83 c4 18             	add    esp,0x18
c0013882:	88 d8                	mov    al,bl
c0013884:	5b                   	pop    ebx
c0013885:	c3                   	ret    

c0013886 <Reg::readIntWithDefault(char*, char*, int)>:
c0013886:	53                   	push   ebx
c0013887:	83 ec 1c             	sub    esp,0x1c
c001388a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001388e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013892:	50                   	push   eax
c0013893:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013897:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001389b:	e8 26 fe ff ff       	call   c00136c6 <Reg::readInt(char*, char*, int*)>
c00138a0:	83 c4 10             	add    esp,0x10
c00138a3:	84 c0                	test   al,al
c00138a5:	74 04                	je     c00138ab <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00138a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00138ab:	83 c4 18             	add    esp,0x18
c00138ae:	89 d8                	mov    eax,ebx
c00138b0:	5b                   	pop    ebx
c00138b1:	c3                   	ret    

c00138b2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00138b2:	57                   	push   edi
c00138b3:	56                   	push   esi
c00138b4:	53                   	push   ebx
c00138b5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00138b9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00138bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00138c1:	56                   	push   esi
c00138c2:	57                   	push   edi
c00138c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138cb:	e8 e4 fe ff ff       	call   c00137b4 <Reg::readString(char*, char*, char*, int)>
c00138d0:	83 c4 10             	add    esp,0x10
c00138d3:	84 c0                	test   al,al
c00138d5:	75 16                	jne    c00138ed <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00138d7:	50                   	push   eax
c00138d8:	56                   	push   esi
c00138d9:	6a 00                	push   0x0
c00138db:	57                   	push   edi
c00138dc:	e8 0f cc fe ff       	call   c00004f0 <memset>
c00138e1:	8d 4e ff             	lea    ecx,[esi-0x1]
c00138e4:	89 de                	mov    esi,ebx
c00138e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138e8:	83 c4 10             	add    esp,0x10
c00138eb:	89 df                	mov    edi,ebx
c00138ed:	5b                   	pop    ebx
c00138ee:	89 f8                	mov    eax,edi
c00138f0:	5e                   	pop    esi
c00138f1:	5f                   	pop    edi
c00138f2:	c3                   	ret    

c00138f3 <SysEject(regs*)>:
c00138f3:	83 ec 0c             	sub    esp,0xc
c00138f6:	83 ca ff             	or     edx,0xffffffff
c00138f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fd:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013900:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013905:	83 e9 41             	sub    ecx,0x41
c0013908:	83 f9 19             	cmp    ecx,0x19
c001390b:	77 18                	ja     c0013925 <SysEject(regs*)+0x32>
c001390d:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013914:	85 c9                	test   ecx,ecx
c0013916:	74 0d                	je     c0013925 <SysEject(regs*)+0x32>
c0013918:	83 ec 0c             	sub    esp,0xc
c001391b:	51                   	push   ecx
c001391c:	e8 87 a0 ff ff       	call   c000d9a8 <LogicalDisk::eject()>
c0013921:	83 c4 10             	add    esp,0x10
c0013924:	99                   	cdq    
c0013925:	83 c4 0c             	add    esp,0xc
c0013928:	c3                   	ret    

c0013929 <SysExit(regs*)>:
c0013929:	83 ec 18             	sub    esp,0x18
c001392c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013930:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013933:	e8 10 2b 00 00       	call   c0016448 <terminateTask(int)>
c0013938:	83 c8 ff             	or     eax,0xffffffff
c001393b:	83 c4 1c             	add    esp,0x1c
c001393e:	89 c2                	mov    edx,eax
c0013940:	c3                   	ret    

c0013941 <SysGetCwd(regs*)>:
c0013941:	83 ec 10             	sub    esp,0x10
c0013944:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013948:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001394b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001394e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013953:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013956:	e8 75 7b ff ff       	call   c000b4d0 <Fs::getcwd(Process*, char*, int)>
c001395b:	83 c4 1c             	add    esp,0x1c
c001395e:	99                   	cdq    
c001395f:	c3                   	ret    

c0013960 <SysGetPID(regs*)>:
c0013960:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013965:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013968:	8b 00                	mov    eax,DWORD PTR [eax]
c001396a:	99                   	cdq    
c001396b:	c3                   	ret    

c001396c <SysGetRAMData(regs*)>:
c001396c:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013976:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c001397c:	99                   	cdq    
c001397d:	f7 f9                	idiv   ecx
c001397f:	c1 e0 18             	shl    eax,0x18
c0013982:	09 c8                	or     eax,ecx
c0013984:	99                   	cdq    
c0013985:	c3                   	ret    

c0013986 <SysGetVGAPtr(regs*)>:
c0013986:	55                   	push   ebp
c0013987:	57                   	push   edi
c0013988:	56                   	push   esi
c0013989:	53                   	push   ebx
c001398a:	83 ec 18             	sub    esp,0x18
c001398d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013991:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013994:	e8 7b 25 00 00       	call   c0015f14 <Thr::processFromPID(int)>
c0013999:	83 c4 10             	add    esp,0x10
c001399c:	89 c1                	mov    ecx,eax
c001399e:	b8 01 00 00 00       	mov    eax,0x1
c00139a3:	85 c9                	test   ecx,ecx
c00139a5:	74 57                	je     c00139fe <SysGetVGAPtr(regs*)+0x78>
c00139a7:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00139ab:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00139b1:	74 0c                	je     c00139bf <SysGetVGAPtr(regs*)+0x39>
c00139b3:	83 ec 0c             	sub    esp,0xc
c00139b6:	55                   	push   ebp
c00139b7:	e8 b3 4d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c00139bc:	83 c4 10             	add    esp,0x10
c00139bf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00139c2:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00139c7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00139ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00139cc:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00139cf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139d2:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00139d8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139db:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00139de:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00139e4:	50                   	push   eax
c00139e5:	50                   	push   eax
c00139e6:	68 34 1f 02 c0       	push   0xc0021f34
c00139eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139ee:	05 a8 0f 00 00       	add    eax,0xfa8
c00139f3:	50                   	push   eax
c00139f4:	e8 57 cc fe ff       	call   c0000650 <strcpy>
c00139f9:	83 c4 10             	add    esp,0x10
c00139fc:	31 c0                	xor    eax,eax
c00139fe:	83 c4 0c             	add    esp,0xc
c0013a01:	31 d2                	xor    edx,edx
c0013a03:	5b                   	pop    ebx
c0013a04:	5e                   	pop    esi
c0013a05:	5f                   	pop    edi
c0013a06:	5d                   	pop    ebp
c0013a07:	c3                   	ret    

c0013a08 <SysKill(regs*)>:
c0013a08:	53                   	push   ebx
c0013a09:	83 ec 08             	sub    esp,0x8
c0013a0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a10:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013a14:	75 16                	jne    c0013a2c <SysKill(regs*)+0x24>
c0013a16:	83 ec 0c             	sub    esp,0xc
c0013a19:	68 3e 1f 02 c0       	push   0xc0021f3e
c0013a1e:	e8 a2 d7 ff ff       	call   c00111c5 <KePanic(char const*)>
c0013a23:	83 c4 10             	add    esp,0x10
c0013a26:	e9 89 00 00 00       	jmp    c0013ab4 <SysKill(regs*)+0xac>
c0013a2b:	90                   	nop
c0013a2c:	83 ec 0c             	sub    esp,0xc
c0013a2f:	68 e4 96 02 c0       	push   0xc00296e4
c0013a34:	e8 33 bd 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a39:	8d 76 00             	lea    esi,[esi+0x0]
c0013a3c:	83 c4 10             	add    esp,0x10
c0013a3f:	85 c0                	test   eax,eax
c0013a41:	74 19                	je     c0013a5c <SysKill(regs*)+0x54>
c0013a43:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a46:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a49:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a4b:	74 33                	je     c0013a80 <SysKill(regs*)+0x78>
c0013a4d:	52                   	push   edx
c0013a4e:	52                   	push   edx
c0013a4f:	50                   	push   eax
c0013a50:	68 e4 96 02 c0       	push   0xc00296e4
c0013a55:	e8 32 c0 00 00       	call   c001fa8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013a5a:	eb e0                	jmp    c0013a3c <SysKill(regs*)+0x34>
c0013a5c:	83 ec 0c             	sub    esp,0xc
c0013a5f:	68 d8 96 02 c0       	push   0xc00296d8
c0013a64:	e8 03 bd 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a69:	8d 76 00             	lea    esi,[esi+0x0]
c0013a6c:	83 c4 10             	add    esp,0x10
c0013a6f:	85 c0                	test   eax,eax
c0013a71:	74 41                	je     c0013ab4 <SysKill(regs*)+0xac>
c0013a73:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a76:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a79:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a7b:	75 27                	jne    c0013aa4 <SysKill(regs*)+0x9c>
c0013a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a80:	51                   	push   ecx
c0013a81:	51                   	push   ecx
c0013a82:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013a85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a8d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013a93:	e8 cb db ff ff       	call   c0011663 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013a98:	83 c4 10             	add    esp,0x10
c0013a9b:	31 c0                	xor    eax,eax
c0013a9d:	31 d2                	xor    edx,edx
c0013a9f:	eb 1b                	jmp    c0013abc <SysKill(regs*)+0xb4>
c0013aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa4:	52                   	push   edx
c0013aa5:	52                   	push   edx
c0013aa6:	50                   	push   eax
c0013aa7:	68 d8 96 02 c0       	push   0xc00296d8
c0013aac:	e8 db bf 00 00       	call   c001fa8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ab1:	eb b9                	jmp    c0013a6c <SysKill(regs*)+0x64>
c0013ab3:	90                   	nop
c0013ab4:	83 c8 ff             	or     eax,0xffffffff
c0013ab7:	89 c2                	mov    edx,eax
c0013ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0013abc:	83 c4 08             	add    esp,0x8
c0013abf:	5b                   	pop    ebx
c0013ac0:	c3                   	ret    

c0013ac1 <SysLoadDLL(regs*)>:
c0013ac1:	56                   	push   esi
c0013ac2:	31 d2                	xor    edx,edx
c0013ac4:	53                   	push   ebx
c0013ac5:	b8 01 00 00 00       	mov    eax,0x1
c0013aca:	51                   	push   ecx
c0013acb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013acf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013ad3:	0f 84 8c 00 00 00    	je     c0013b65 <SysLoadDLL(regs*)+0xa4>
c0013ad9:	83 ec 0c             	sub    esp,0xc
c0013adc:	68 14 01 00 00       	push   0x114
c0013ae1:	e8 ed 3f ff ff       	call   c0007ad3 <malloc>
c0013ae6:	83 c4 0c             	add    esp,0xc
c0013ae9:	89 c3                	mov    ebx,eax
c0013aeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013af0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013af3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013af6:	53                   	push   ebx
c0013af7:	e8 1c 7c ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	31 d2                	xor    edx,edx
c0013b01:	85 db                	test   ebx,ebx
c0013b03:	b8 02 00 00 00       	mov    eax,0x2
c0013b08:	74 5b                	je     c0013b65 <SysLoadDLL(regs*)+0xa4>
c0013b0a:	83 ec 0c             	sub    esp,0xc
c0013b0d:	53                   	push   ebx
c0013b0e:	e8 85 7f ff ff       	call   c000ba98 <File::exists()>
c0013b13:	83 c4 10             	add    esp,0x10
c0013b16:	84 c0                	test   al,al
c0013b18:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b1a:	75 11                	jne    c0013b2d <SysLoadDLL(regs*)+0x6c>
c0013b1c:	83 ec 0c             	sub    esp,0xc
c0013b1f:	53                   	push   ebx
c0013b20:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b23:	83 c4 10             	add    esp,0x10
c0013b26:	b8 03 00 00 00       	mov    eax,0x3
c0013b2b:	eb 36                	jmp    c0013b63 <SysLoadDLL(regs*)+0xa2>
c0013b2d:	83 ec 0c             	sub    esp,0xc
c0013b30:	53                   	push   ebx
c0013b31:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b34:	58                   	pop    eax
c0013b35:	5a                   	pop    edx
c0013b36:	6a 00                	push   0x0
c0013b38:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b3b:	e8 1c 15 00 00       	call   c001505c <Thr::loadDLL(char const*, bool)>
c0013b40:	83 c4 10             	add    esp,0x10
c0013b43:	31 d2                	xor    edx,edx
c0013b45:	89 c1                	mov    ecx,eax
c0013b47:	b8 04 00 00 00       	mov    eax,0x4
c0013b4c:	85 c9                	test   ecx,ecx
c0013b4e:	74 15                	je     c0013b65 <SysLoadDLL(regs*)+0xa4>
c0013b50:	53                   	push   ebx
c0013b51:	53                   	push   ebx
c0013b52:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013b58:	51                   	push   ecx
c0013b59:	e8 3e 17 00 00       	call   c001529c <Thr::executeDLL(unsigned long, void*)>
c0013b5e:	83 c4 10             	add    esp,0x10
c0013b61:	31 c0                	xor    eax,eax
c0013b63:	31 d2                	xor    edx,edx
c0013b65:	59                   	pop    ecx
c0013b66:	5b                   	pop    ebx
c0013b67:	5e                   	pop    esi
c0013b68:	c3                   	ret    

c0013b69 <SysRead(regs*)>:
c0013b69:	57                   	push   edi
c0013b6a:	56                   	push   esi
c0013b6b:	53                   	push   ebx
c0013b6c:	83 ec 10             	sub    esp,0x10
c0013b6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b73:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b76:	83 f8 02             	cmp    eax,0x2
c0013b79:	77 10                	ja     c0013b8b <SysRead(regs*)+0x22>
c0013b7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b83:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013b89:	eb 0e                	jmp    c0013b99 <SysRead(regs*)+0x30>
c0013b8b:	83 ec 0c             	sub    esp,0xc
c0013b8e:	50                   	push   eax
c0013b8f:	e8 07 59 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013b94:	83 c4 10             	add    esp,0x10
c0013b97:	89 c1                	mov    ecx,eax
c0013b99:	83 c8 ff             	or     eax,0xffffffff
c0013b9c:	85 c9                	test   ecx,ecx
c0013b9e:	89 c2                	mov    edx,eax
c0013ba0:	74 28                	je     c0013bca <SysRead(regs*)+0x61>
c0013ba2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	31 ff                	xor    edi,edi
c0013baf:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013bb3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bb5:	52                   	push   edx
c0013bb6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013bb9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013bbc:	57                   	push   edi
c0013bbd:	56                   	push   esi
c0013bbe:	51                   	push   ecx
c0013bbf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013bc6:	83 c4 20             	add    esp,0x20
c0013bc9:	99                   	cdq    
c0013bca:	83 c4 10             	add    esp,0x10
c0013bcd:	5b                   	pop    ebx
c0013bce:	5e                   	pop    esi
c0013bcf:	5f                   	pop    edi
c0013bd0:	c3                   	ret    

c0013bd1 <SysRegisterSignal(regs*)>:
c0013bd1:	83 ec 18             	sub    esp,0x18
c0013bd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bd8:	6a 00                	push   0x0
c0013bda:	6a 00                	push   0x0
c0013bdc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013bdf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013be2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013be7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bea:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013bf0:	e8 38 da ff ff       	call   c001162d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013bf5:	83 c4 2c             	add    esp,0x2c
c0013bf8:	99                   	cdq    
c0013bf9:	c3                   	ret    

c0013bfa <SysRegistryGetTypeFromPath(regs*)>:
c0013bfa:	57                   	push   edi
c0013bfb:	56                   	push   esi
c0013bfc:	53                   	push   ebx
c0013bfd:	81 ec 38 01 00 00    	sub    esp,0x138
c0013c03:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013c0a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c0d:	68 5f 1f 02 c0       	push   0xc0021f5f
c0013c12:	e8 f3 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c17:	5a                   	pop    edx
c0013c18:	59                   	pop    ecx
c0013c19:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c1c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c1f:	e8 34 f6 ff ff       	call   c0013258 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013c24:	5f                   	pop    edi
c0013c25:	5a                   	pop    edx
c0013c26:	89 c6                	mov    esi,eax
c0013c28:	50                   	push   eax
c0013c29:	68 7f 1f 02 c0       	push   0xc0021f7f
c0013c2e:	e8 d7 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c33:	83 c4 10             	add    esp,0x10
c0013c36:	85 f6                	test   esi,esi
c0013c38:	74 28                	je     c0013c62 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013c3a:	50                   	push   eax
c0013c3b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013c3f:	57                   	push   edi
c0013c40:	56                   	push   esi
c0013c41:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c44:	e8 f4 f1 ff ff       	call   c0012e3d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013c49:	83 c4 0c             	add    esp,0xc
c0013c4c:	57                   	push   edi
c0013c4d:	50                   	push   eax
c0013c4e:	89 c3                	mov    ebx,eax
c0013c50:	68 87 1f 02 c0       	push   0xc0021f87
c0013c55:	e8 b0 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c5a:	89 d8                	mov    eax,ebx
c0013c5c:	83 c4 10             	add    esp,0x10
c0013c5f:	99                   	cdq    
c0013c60:	eb 05                	jmp    c0013c67 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013c62:	83 c8 ff             	or     eax,0xffffffff
c0013c65:	89 c2                	mov    edx,eax
c0013c67:	81 c4 30 01 00 00    	add    esp,0x130
c0013c6d:	5b                   	pop    ebx
c0013c6e:	5e                   	pop    esi
c0013c6f:	5f                   	pop    edi
c0013c70:	c3                   	ret    

c0013c71 <SysRegistryReadExtent(regs*)>:
c0013c71:	83 ec 1c             	sub    esp,0x1c
c0013c74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c78:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013c7b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013c7e:	85 c0                	test   eax,eax
c0013c80:	79 1f                	jns    c0013ca1 <SysRegistryReadExtent(regs*)+0x30>
c0013c82:	52                   	push   edx
c0013c83:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013c88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013c8c:	52                   	push   edx
c0013c8d:	50                   	push   eax
c0013c8e:	51                   	push   ecx
c0013c8f:	e8 9b f0 ff ff       	call   c0012d2f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013c94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c9c:	83 c4 10             	add    esp,0x10
c0013c9f:	eb 14                	jmp    c0013cb5 <SysRegistryReadExtent(regs*)+0x44>
c0013ca1:	83 ec 04             	sub    esp,0x4
c0013ca4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013ca7:	50                   	push   eax
c0013ca8:	51                   	push   ecx
c0013ca9:	e8 1f eb ff ff       	call   c00127cd <CmGetString(Reghive_Tag*, int, char*)>
c0013cae:	83 c4 10             	add    esp,0x10
c0013cb1:	31 c0                	xor    eax,eax
c0013cb3:	31 d2                	xor    edx,edx
c0013cb5:	83 c4 1c             	add    esp,0x1c
c0013cb8:	c3                   	ret    

c0013cb9 <SysRegistryPathToExtentLookup(regs*)>:
c0013cb9:	53                   	push   ebx
c0013cba:	83 ec 10             	sub    esp,0x10
c0013cbd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cc1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cc4:	68 9d 1f 02 c0       	push   0xc0021f9d
c0013cc9:	e8 3c 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013cce:	58                   	pop    eax
c0013ccf:	5a                   	pop    edx
c0013cd0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cd3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cd6:	e8 7d f5 ff ff       	call   c0013258 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013cdb:	83 c4 18             	add    esp,0x18
c0013cde:	5b                   	pop    ebx
c0013cdf:	99                   	cdq    
c0013ce0:	c3                   	ret    

c0013ce1 <SysRegistryEnterDirectory(regs*)>:
c0013ce1:	53                   	push   ebx
c0013ce2:	83 ec 10             	sub    esp,0x10
c0013ce5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ce9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013cec:	68 c0 1f 02 c0       	push   0xc0021fc0
c0013cf1:	e8 14 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013cf6:	58                   	pop    eax
c0013cf7:	5a                   	pop    edx
c0013cf8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013cfb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cfe:	e8 41 eb ff ff       	call   c0012844 <CmEnterDirectory(Reghive_Tag*, int)>
c0013d03:	83 c4 18             	add    esp,0x18
c0013d06:	5b                   	pop    ebx
c0013d07:	99                   	cdq    
c0013d08:	c3                   	ret    

c0013d09 <SysRegistryGetNext(regs*)>:
c0013d09:	53                   	push   ebx
c0013d0a:	83 ec 10             	sub    esp,0x10
c0013d0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d11:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d14:	68 de 1f 02 c0       	push   0xc0021fde
c0013d19:	e8 ec 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d1e:	58                   	pop    eax
c0013d1f:	5a                   	pop    edx
c0013d20:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d23:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d26:	e8 58 eb ff ff       	call   c0012883 <CmGetNext(Reghive_Tag*, int)>
c0013d2b:	83 c4 18             	add    esp,0x18
c0013d2e:	5b                   	pop    ebx
c0013d2f:	99                   	cdq    
c0013d30:	c3                   	ret    

c0013d31 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013d31:	57                   	push   edi
c0013d32:	56                   	push   esi
c0013d33:	53                   	push   ebx
c0013d34:	81 ec 34 01 00 00    	sub    esp,0x134
c0013d3a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013d41:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013d45:	57                   	push   edi
c0013d46:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013d49:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013d4c:	e8 ec f0 ff ff       	call   c0012e3d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013d51:	89 c3                	mov    ebx,eax
c0013d53:	58                   	pop    eax
c0013d54:	5a                   	pop    edx
c0013d55:	57                   	push   edi
c0013d56:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013d59:	e8 f2 c8 fe ff       	call   c0000650 <strcpy>
c0013d5e:	81 c4 40 01 00 00    	add    esp,0x140
c0013d64:	89 d8                	mov    eax,ebx
c0013d66:	5b                   	pop    ebx
c0013d67:	99                   	cdq    
c0013d68:	5e                   	pop    esi
c0013d69:	5f                   	pop    edi
c0013d6a:	c3                   	ret    

c0013d6b <SysRegistryOpen(regs*)>:
c0013d6b:	83 ec 18             	sub    esp,0x18
c0013d6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d72:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d75:	e8 e3 e8 ff ff       	call   c001265d <CmOpen(char const*)>
c0013d7a:	83 c4 1c             	add    esp,0x1c
c0013d7d:	99                   	cdq    
c0013d7e:	c3                   	ret    

c0013d7f <SysRegistryClose(regs*)>:
c0013d7f:	83 ec 18             	sub    esp,0x18
c0013d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d86:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d89:	e8 ed e9 ff ff       	call   c001277b <CmClose(Reghive_Tag*)>
c0013d8e:	31 c0                	xor    eax,eax
c0013d90:	31 d2                	xor    edx,edx
c0013d92:	83 c4 1c             	add    esp,0x1c
c0013d95:	c3                   	ret    

c0013d96 <SysSbrk(regs*)>:
c0013d96:	56                   	push   esi
c0013d97:	53                   	push   ebx
c0013d98:	50                   	push   eax
c0013d99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013da2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013da5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013da8:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013dae:	85 db                	test   ebx,ebx
c0013db0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013db3:	74 02                	je     c0013db7 <SysSbrk(regs*)+0x21>
c0013db5:	79 06                	jns    c0013dbd <SysSbrk(regs*)+0x27>
c0013db7:	89 f0                	mov    eax,esi
c0013db9:	31 d2                	xor    edx,edx
c0013dbb:	eb 2a                	jmp    c0013de7 <SysSbrk(regs*)+0x51>
c0013dbd:	83 c8 ff             	or     eax,0xffffffff
c0013dc0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013dc6:	89 c2                	mov    edx,eax
c0013dc8:	77 1d                	ja     c0013de7 <SysSbrk(regs*)+0x51>
c0013dca:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013dd0:	50                   	push   eax
c0013dd1:	68 07 0c 00 00       	push   0xc07
c0013dd6:	c1 ea 0c             	shr    edx,0xc
c0013dd9:	52                   	push   edx
c0013dda:	51                   	push   ecx
c0013ddb:	e8 26 60 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0013de0:	89 f0                	mov    eax,esi
c0013de2:	31 d2                	xor    edx,edx
c0013de4:	83 c4 10             	add    esp,0x10
c0013de7:	59                   	pop    ecx
c0013de8:	5b                   	pop    ebx
c0013de9:	5e                   	pop    esi
c0013dea:	c3                   	ret    

c0013deb <SysSetCwd(regs*)>:
c0013deb:	83 ec 14             	sub    esp,0x14
c0013dee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013df2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013df5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dfa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013dfd:	e8 35 7d ff ff       	call   c000bb37 <Fs::setcwd(Process*, char*)>
c0013e02:	83 c4 1c             	add    esp,0x1c
c0013e05:	99                   	cdq    
c0013e06:	c3                   	ret    

c0013e07 <SysSetTime(regs*)>:
c0013e07:	55                   	push   ebp
c0013e08:	31 c9                	xor    ecx,ecx
c0013e0a:	57                   	push   edi
c0013e0b:	bd 0c 00 00 00       	mov    ebp,0xc
c0013e10:	56                   	push   esi
c0013e11:	53                   	push   ebx
c0013e12:	31 db                	xor    ebx,ebx
c0013e14:	83 ec 10             	sub    esp,0x10
c0013e17:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e1b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013e1e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013e21:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013e24:	89 c2                	mov    edx,eax
c0013e26:	c1 e8 05             	shr    eax,0x5
c0013e29:	83 e2 1f             	and    edx,0x1f
c0013e2c:	42                   	inc    edx
c0013e2d:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013e33:	c1 e7 10             	shl    edi,0x10
c0013e36:	88 d1                	mov    cl,dl
c0013e38:	31 d2                	xor    edx,edx
c0013e3a:	f7 f5                	div    ebp
c0013e3c:	89 dd                	mov    ebp,ebx
c0013e3e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013e44:	88 d5                	mov    ch,dl
c0013e46:	31 d2                	xor    edx,edx
c0013e48:	0f b7 c1             	movzx  eax,cx
c0013e4b:	09 f8                	or     eax,edi
c0013e4d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013e52:	89 c1                	mov    ecx,eax
c0013e54:	89 f0                	mov    eax,esi
c0013e56:	f7 f7                	div    edi
c0013e58:	c1 e2 10             	shl    edx,0x10
c0013e5b:	09 d5                	or     ebp,edx
c0013e5d:	31 d2                	xor    edx,edx
c0013e5f:	f7 f7                	div    edi
c0013e61:	89 eb                	mov    ebx,ebp
c0013e63:	bf 10 0e 00 00       	mov    edi,0xe10
c0013e68:	89 f0                	mov    eax,esi
c0013e6a:	88 d7                	mov    bh,dl
c0013e6c:	31 d2                	xor    edx,edx
c0013e6e:	f7 f7                	div    edi
c0013e70:	bf 18 00 00 00       	mov    edi,0x18
c0013e75:	31 d2                	xor    edx,edx
c0013e77:	f7 f7                	div    edi
c0013e79:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013e7e:	88 d3                	mov    bl,dl
c0013e80:	53                   	push   ebx
c0013e81:	51                   	push   ecx
c0013e82:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013e88:	e8 af 84 ff ff       	call   c000c33c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013e8d:	83 c4 1c             	add    esp,0x1c
c0013e90:	31 d2                	xor    edx,edx
c0013e92:	5b                   	pop    ebx
c0013e93:	5e                   	pop    esi
c0013e94:	83 f0 01             	xor    eax,0x1
c0013e97:	5f                   	pop    edi
c0013e98:	0f b6 c0             	movzx  eax,al
c0013e9b:	5d                   	pop    ebp
c0013e9c:	c3                   	ret    

c0013e9d <SysTimezone(regs*)>:
c0013e9d:	53                   	push   ebx
c0013e9e:	83 ec 08             	sub    esp,0x8
c0013ea1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ea5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013ea9:	75 17                	jne    c0013ec2 <SysTimezone(regs*)+0x25>
c0013eab:	83 ec 0c             	sub    esp,0xc
c0013eae:	68 f5 1f 02 c0       	push   0xc0021ff5
c0013eb3:	e8 52 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013eb8:	83 c8 ff             	or     eax,0xffffffff
c0013ebb:	83 c4 10             	add    esp,0x10
c0013ebe:	89 c2                	mov    edx,eax
c0013ec0:	eb 20                	jmp    c0013ee2 <SysTimezone(regs*)+0x45>
c0013ec2:	83 ec 0c             	sub    esp,0xc
c0013ec5:	68 0a 20 02 c0       	push   0xc002200a
c0013eca:	e8 3b 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013ecf:	58                   	pop    eax
c0013ed0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ed3:	e8 c8 81 ff ff       	call   c000c0a0 <User::loadClockSettings(int)>
c0013ed8:	83 c4 10             	add    esp,0x10
c0013edb:	b8 01 00 00 00       	mov    eax,0x1
c0013ee0:	31 d2                	xor    edx,edx
c0013ee2:	83 c4 08             	add    esp,0x8
c0013ee5:	5b                   	pop    ebx
c0013ee6:	c3                   	ret    

c0013ee7 <SysTruncate(regs*)>:
c0013ee7:	55                   	push   ebp
c0013ee8:	57                   	push   edi
c0013ee9:	31 ff                	xor    edi,edi
c0013eeb:	56                   	push   esi
c0013eec:	53                   	push   ebx
c0013eed:	83 ec 0c             	sub    esp,0xc
c0013ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ef4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013ef7:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013efb:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013efe:	89 ce                	mov    esi,ecx
c0013f00:	0f 84 9a 00 00 00    	je     c0013fa0 <SysTruncate(regs*)+0xb9>
c0013f06:	83 ec 0c             	sub    esp,0xc
c0013f09:	68 14 01 00 00       	push   0x114
c0013f0e:	e8 c0 3b ff ff       	call   c0007ad3 <malloc>
c0013f13:	83 c4 0c             	add    esp,0xc
c0013f16:	89 c3                	mov    ebx,eax
c0013f18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f1d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f20:	55                   	push   ebp
c0013f21:	53                   	push   ebx
c0013f22:	e8 f1 77 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0013f27:	83 c4 10             	add    esp,0x10
c0013f2a:	31 d2                	xor    edx,edx
c0013f2c:	85 db                	test   ebx,ebx
c0013f2e:	b8 03 00 00 00       	mov    eax,0x3
c0013f33:	0f 84 a2 00 00 00    	je     c0013fdb <SysTruncate(regs*)+0xf4>
c0013f39:	51                   	push   ecx
c0013f3a:	51                   	push   ecx
c0013f3b:	6a 02                	push   0x2
c0013f3d:	53                   	push   ebx
c0013f3e:	e8 91 78 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	85 c0                	test   eax,eax
c0013f48:	74 13                	je     c0013f5d <SysTruncate(regs*)+0x76>
c0013f4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f4c:	83 ec 0c             	sub    esp,0xc
c0013f4f:	53                   	push   ebx
c0013f50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f53:	83 c4 10             	add    esp,0x10
c0013f56:	b8 04 00 00 00       	mov    eax,0x4
c0013f5b:	eb 7c                	jmp    c0013fd9 <SysTruncate(regs*)+0xf2>
c0013f5d:	52                   	push   edx
c0013f5e:	57                   	push   edi
c0013f5f:	56                   	push   esi
c0013f60:	53                   	push   ebx
c0013f61:	e8 82 79 ff ff       	call   c000b8e8 <File::truncate(unsigned long long)>
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	85 c0                	test   eax,eax
c0013f6b:	74 1b                	je     c0013f88 <SysTruncate(regs*)+0xa1>
c0013f6d:	83 ec 0c             	sub    esp,0xc
c0013f70:	53                   	push   ebx
c0013f71:	e8 bc 78 ff ff       	call   c000b832 <File::close()>
c0013f76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f7e:	83 c4 10             	add    esp,0x10
c0013f81:	b8 05 00 00 00       	mov    eax,0x5
c0013f86:	eb 51                	jmp    c0013fd9 <SysTruncate(regs*)+0xf2>
c0013f88:	83 ec 0c             	sub    esp,0xc
c0013f8b:	53                   	push   ebx
c0013f8c:	e8 a1 78 ff ff       	call   c000b832 <File::close()>
c0013f91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f99:	83 c4 10             	add    esp,0x10
c0013f9c:	31 c0                	xor    eax,eax
c0013f9e:	eb 39                	jmp    c0013fd9 <SysTruncate(regs*)+0xf2>
c0013fa0:	31 d2                	xor    edx,edx
c0013fa2:	83 fd 02             	cmp    ebp,0x2
c0013fa5:	b8 01 00 00 00       	mov    eax,0x1
c0013faa:	7e 2f                	jle    c0013fdb <SysTruncate(regs*)+0xf4>
c0013fac:	83 ec 0c             	sub    esp,0xc
c0013faf:	51                   	push   ecx
c0013fb0:	e8 e6 54 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013fb5:	83 c4 10             	add    esp,0x10
c0013fb8:	31 d2                	xor    edx,edx
c0013fba:	89 c1                	mov    ecx,eax
c0013fbc:	b8 02 00 00 00       	mov    eax,0x2
c0013fc1:	85 c9                	test   ecx,ecx
c0013fc3:	74 16                	je     c0013fdb <SysTruncate(regs*)+0xf4>
c0013fc5:	50                   	push   eax
c0013fc6:	57                   	push   edi
c0013fc7:	56                   	push   esi
c0013fc8:	51                   	push   ecx
c0013fc9:	e8 1a 79 ff ff       	call   c000b8e8 <File::truncate(unsigned long long)>
c0013fce:	83 c4 10             	add    esp,0x10
c0013fd1:	85 c0                	test   eax,eax
c0013fd3:	0f 95 c0             	setne  al
c0013fd6:	0f b6 c0             	movzx  eax,al
c0013fd9:	31 d2                	xor    edx,edx
c0013fdb:	83 c4 0c             	add    esp,0xc
c0013fde:	5b                   	pop    ebx
c0013fdf:	5e                   	pop    esi
c0013fe0:	5f                   	pop    edi
c0013fe1:	5d                   	pop    ebp
c0013fe2:	c3                   	ret    

c0013fe3 <SysWrite(regs*)>:
c0013fe3:	57                   	push   edi
c0013fe4:	56                   	push   esi
c0013fe5:	53                   	push   ebx
c0013fe6:	83 ec 10             	sub    esp,0x10
c0013fe9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013fed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ff0:	83 f8 02             	cmp    eax,0x2
c0013ff3:	77 10                	ja     c0014005 <SysWrite(regs*)+0x22>
c0013ff5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ffa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ffd:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014003:	eb 0e                	jmp    c0014013 <SysWrite(regs*)+0x30>
c0014005:	83 ec 0c             	sub    esp,0xc
c0014008:	50                   	push   eax
c0014009:	e8 8d 54 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001400e:	83 c4 10             	add    esp,0x10
c0014011:	89 c1                	mov    ecx,eax
c0014013:	83 c8 ff             	or     eax,0xffffffff
c0014016:	85 c9                	test   ecx,ecx
c0014018:	89 c2                	mov    edx,eax
c001401a:	74 28                	je     c0014044 <SysWrite(regs*)+0x61>
c001401c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014024:	83 ec 0c             	sub    esp,0xc
c0014027:	31 ff                	xor    edi,edi
c0014029:	8d 54 24 18          	lea    edx,[esp+0x18]
c001402d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001402f:	52                   	push   edx
c0014030:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014033:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014036:	57                   	push   edi
c0014037:	56                   	push   esi
c0014038:	51                   	push   ecx
c0014039:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001403c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014040:	83 c4 20             	add    esp,0x20
c0014043:	99                   	cdq    
c0014044:	83 c4 10             	add    esp,0x10
c0014047:	5b                   	pop    ebx
c0014048:	5e                   	pop    esi
c0014049:	5f                   	pop    edi
c001404a:	c3                   	ret    

c001404b <SysWsbe(regs*)>:
c001404b:	57                   	push   edi
c001404c:	b9 0b 00 00 00       	mov    ecx,0xb
c0014051:	56                   	push   esi
c0014052:	be 49 20 02 c0       	mov    esi,0xc0022049
c0014057:	53                   	push   ebx
c0014058:	83 ec 30             	sub    esp,0x30
c001405b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001405f:	fc                   	cld    
c0014060:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014062:	83 ec 0c             	sub    esp,0xc
c0014065:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014069:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001406e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014071:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014077:	8b 06                	mov    eax,DWORD PTR [esi]
c0014079:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001407c:	57                   	push   edi
c001407d:	e8 fe c4 fe ff       	call   c0000580 <strlen>
c0014082:	5a                   	pop    edx
c0014083:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014087:	52                   	push   edx
c0014088:	31 d2                	xor    edx,edx
c001408a:	57                   	push   edi
c001408b:	52                   	push   edx
c001408c:	50                   	push   eax
c001408d:	56                   	push   esi
c001408e:	ff d3                	call   ebx
c0014090:	83 c4 14             	add    esp,0x14
c0014093:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014097:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001409a:	e8 a9 23 00 00       	call   c0016448 <terminateTask(int)>
c001409f:	83 c4 40             	add    esp,0x40
c00140a2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00140a7:	5b                   	pop    ebx
c00140a8:	31 d2                	xor    edx,edx
c00140aa:	5e                   	pop    esi
c00140ab:	5f                   	pop    edi
c00140ac:	c3                   	ret    

c00140ad <SysYield(regs*)>:
c00140ad:	83 ec 0c             	sub    esp,0xc
c00140b0:	fa                   	cli    
c00140b1:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00140b7:	e8 0c 1a 00 00       	call   c0015ac8 <schedule()>
c00140bc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00140c1:	48                   	dec    eax
c00140c2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00140c7:	75 01                	jne    c00140ca <SysYield(regs*)+0x1d>
c00140c9:	fb                   	sti    
c00140ca:	31 c0                	xor    eax,eax
c00140cc:	31 d2                	xor    edx,edx
c00140ce:	83 c4 0c             	add    esp,0xc
c00140d1:	c3                   	ret    

c00140d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00140d2:	55                   	push   ebp
c00140d3:	57                   	push   edi
c00140d4:	56                   	push   esi
c00140d5:	53                   	push   ebx
c00140d6:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00140dc:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00140e7:	74 3b                	je     c0014124 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00140e9:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00140f1:	74 31                	je     c0014124 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00140f3:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00140fb:	75 27                	jne    c0014124 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00140fd:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014104:	05 00 10 00 00       	add    eax,0x1000
c0014109:	89 c2                	mov    edx,eax
c001410b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014110:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014117:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001411d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014124:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001412b:	83 ec 0c             	sub    esp,0xc
c001412e:	6a 01                	push   0x1
c0014130:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014136:	e8 ba 54 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001413b:	83 c4 10             	add    esp,0x10
c001413e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014144:	89 c3                	mov    ebx,eax
c0014146:	0f 86 26 01 00 00    	jbe    c0014272 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c001414c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014154:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001415b:	c1 ee 0c             	shr    esi,0xc
c001415e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014162:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014169:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014170:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014174:	29 ef                	sub    edi,ebp
c0014176:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001417a:	0f 83 f9 00 00 00    	jae    c0014279 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014180:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014186:	b8 00 10 00 00       	mov    eax,0x1000
c001418b:	0f 47 f8             	cmova  edi,eax
c001418e:	83 ec 0c             	sub    esp,0xc
c0014191:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014198:	31 d2                	xor    edx,edx
c001419a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001419c:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141a0:	50                   	push   eax
c00141a1:	8d 74 24 30          	lea    esi,[esp+0x30]
c00141a5:	56                   	push   esi
c00141a6:	52                   	push   edx
c00141a7:	57                   	push   edi
c00141a8:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00141af:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141b2:	83 c4 20             	add    esp,0x20
c00141b5:	85 c0                	test   eax,eax
c00141b7:	75 06                	jne    c00141bf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00141b9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00141bd:	74 13                	je     c00141d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00141bf:	83 ec 0c             	sub    esp,0xc
c00141c2:	53                   	push   ebx
c00141c3:	e8 41 57 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00141c8:	83 c4 10             	add    esp,0x10
c00141cb:	31 c0                	xor    eax,eax
c00141cd:	e9 7c 01 00 00       	jmp    c001434e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00141d2:	fa                   	cli    
c00141d3:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00141d9:	e8 04 3c ff ff       	call   c0007de2 <Phys::allocatePage()>
c00141de:	6a 07                	push   0x7
c00141e0:	53                   	push   ebx
c00141e1:	50                   	push   eax
c00141e2:	89 c7                	mov    edi,eax
c00141e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141ec:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141f2:	e8 07 5b ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00141f7:	83 c4 0c             	add    esp,0xc
c00141fa:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014201:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014207:	6a 00                	push   0x0
c0014209:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001420e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014211:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014217:	e8 48 59 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c001421c:	58                   	pop    eax
c001421d:	5a                   	pop    edx
c001421e:	68 07 0c 00 00       	push   0xc07
c0014223:	55                   	push   ebp
c0014224:	57                   	push   edi
c0014225:	89 df                	mov    edi,ebx
c0014227:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001422e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014234:	6a 00                	push   0x0
c0014236:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001423b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001423e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014244:	e8 19 5d ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014249:	b9 00 10 00 00       	mov    ecx,0x1000
c001424e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014250:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014255:	83 c4 20             	add    esp,0x20
c0014258:	48                   	dec    eax
c0014259:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001425e:	85 c0                	test   eax,eax
c0014260:	75 01                	jne    c0014263 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0014262:	fb                   	sti    
c0014263:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014267:	81 c5 00 10 00 00    	add    ebp,0x1000
c001426d:	e9 f0 fe ff ff       	jmp    c0014162 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0014272:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014279:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014280:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014286:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001428c:	0f 86 ae 00 00 00    	jbe    c0014340 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014292:	fa                   	cli    
c0014293:	51                   	push   ecx
c0014294:	31 ff                	xor    edi,edi
c0014296:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001429d:	c1 ee 0c             	shr    esi,0xc
c00142a0:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00142a6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142ac:	6a 00                	push   0x0
c00142ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142b6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142bc:	e8 a3 58 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00142c1:	83 c4 10             	add    esp,0x10
c00142c4:	e8 19 3b ff ff       	call   c0007de2 <Phys::allocatePage()>
c00142c9:	47                   	inc    edi
c00142ca:	6a 07                	push   0x7
c00142cc:	53                   	push   ebx
c00142cd:	50                   	push   eax
c00142ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00142d8:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00142db:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00142e1:	e8 18 5a ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00142e6:	58                   	pop    eax
c00142e7:	5a                   	pop    edx
c00142e8:	68 07 0c 00 00       	push   0xc07
c00142ed:	55                   	push   ebp
c00142ee:	81 c5 00 10 00 00    	add    ebp,0x1000
c00142f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142f8:	50                   	push   eax
c00142f9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014300:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014306:	6a 00                	push   0x0
c0014308:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001430d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014310:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014316:	e8 47 5c ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001431b:	83 c4 1c             	add    esp,0x1c
c001431e:	68 00 10 00 00       	push   0x1000
c0014323:	6a 00                	push   0x0
c0014325:	53                   	push   ebx
c0014326:	e8 c5 c1 fe ff       	call   c00004f0 <memset>
c001432b:	83 c4 10             	add    esp,0x10
c001432e:	39 fe                	cmp    esi,edi
c0014330:	77 92                	ja     c00142c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0014332:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014337:	48                   	dec    eax
c0014338:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001433d:	75 01                	jne    c0014340 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001433f:	fb                   	sti    
c0014340:	83 ec 0c             	sub    esp,0xc
c0014343:	53                   	push   ebx
c0014344:	e8 c0 55 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014349:	83 c4 10             	add    esp,0x10
c001434c:	b0 01                	mov    al,0x1
c001434e:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014354:	5b                   	pop    ebx
c0014355:	5e                   	pop    esi
c0014356:	5f                   	pop    edi
c0014357:	5d                   	pop    ebp
c0014358:	c3                   	ret    

c0014359 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014359:	55                   	push   ebp
c001435a:	57                   	push   edi
c001435b:	56                   	push   esi
c001435c:	53                   	push   ebx
c001435d:	83 ec 48             	sub    esp,0x48
c0014360:	68 14 01 00 00       	push   0x114
c0014365:	e8 69 37 ff ff       	call   c0007ad3 <malloc>
c001436a:	83 c4 0c             	add    esp,0xc
c001436d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014371:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014375:	89 c7                	mov    edi,eax
c0014377:	50                   	push   eax
c0014378:	e8 9b 73 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c001437d:	58                   	pop    eax
c001437e:	5a                   	pop    edx
c001437f:	6a 01                	push   0x1
c0014381:	57                   	push   edi
c0014382:	e8 4d 74 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0014387:	83 c4 10             	add    esp,0x10
c001438a:	85 c0                	test   eax,eax
c001438c:	0f 85 4c 01 00 00    	jne    c00144de <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014392:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001439a:	83 ec 0c             	sub    esp,0xc
c001439d:	6a 34                	push   0x34
c001439f:	e8 2f 37 ff ff       	call   c0007ad3 <malloc>
c00143a4:	89 c3                	mov    ebx,eax
c00143a6:	58                   	pop    eax
c00143a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00143a9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00143ad:	56                   	push   esi
c00143ae:	53                   	push   ebx
c00143af:	6a 00                	push   0x0
c00143b1:	6a 34                	push   0x34
c00143b3:	57                   	push   edi
c00143b4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143b7:	83 c4 20             	add    esp,0x20
c00143ba:	85 c0                	test   eax,eax
c00143bc:	0f 85 1c 01 00 00    	jne    c00144de <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143c2:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00143c8:	0f 85 10 01 00 00    	jne    c00144de <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143ce:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00143d1:	85 c0                	test   eax,eax
c00143d3:	0f 84 05 01 00 00    	je     c00144de <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143d9:	31 d2                	xor    edx,edx
c00143db:	55                   	push   ebp
c00143dc:	52                   	push   edx
c00143dd:	50                   	push   eax
c00143de:	57                   	push   edi
c00143df:	e8 ae 74 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c00143e4:	83 c4 10             	add    esp,0x10
c00143e7:	85 c0                	test   eax,eax
c00143e9:	0f 85 ef 00 00 00    	jne    c00144de <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143ef:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00143f2:	83 ec 0c             	sub    esp,0xc
c00143f5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00143f9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00143fd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014401:	0f af c2             	imul   eax,edx
c0014404:	50                   	push   eax
c0014405:	e8 c9 36 ff ff       	call   c0007ad3 <malloc>
c001440a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001440c:	89 34 24             	mov    DWORD PTR [esp],esi
c001440f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014413:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014417:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001441b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001441f:	0f af c2             	imul   eax,edx
c0014422:	99                   	cdq    
c0014423:	52                   	push   edx
c0014424:	50                   	push   eax
c0014425:	57                   	push   edi
c0014426:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014429:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001442c:	83 c4 20             	add    esp,0x20
c001442f:	85 c0                	test   eax,eax
c0014431:	0f 84 a7 00 00 00    	je     c00144de <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014437:	31 d2                	xor    edx,edx
c0014439:	51                   	push   ecx
c001443a:	52                   	push   edx
c001443b:	50                   	push   eax
c001443c:	57                   	push   edi
c001443d:	e8 50 74 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014442:	83 c4 10             	add    esp,0x10
c0014445:	85 c0                	test   eax,eax
c0014447:	0f 85 91 00 00 00    	jne    c00144de <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001444d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014451:	83 ec 0c             	sub    esp,0xc
c0014454:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014458:	0f af c2             	imul   eax,edx
c001445b:	50                   	push   eax
c001445c:	e8 72 36 ff ff       	call   c0007ad3 <malloc>
c0014461:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014463:	89 34 24             	mov    DWORD PTR [esp],esi
c0014466:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001446a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001446e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014472:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014476:	0f af c2             	imul   eax,edx
c0014479:	99                   	cdq    
c001447a:	52                   	push   edx
c001447b:	50                   	push   eax
c001447c:	57                   	push   edi
c001447d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014480:	83 c4 20             	add    esp,0x20
c0014483:	31 c9                	xor    ecx,ecx
c0014485:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001448d:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014491:	0f b7 e9             	movzx  ebp,cx
c0014494:	0f 83 86 00 00 00    	jae    c0014520 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c001449a:	c1 e5 05             	shl    ebp,0x5
c001449d:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00144a1:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00144a5:	75 73                	jne    c001451a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00144a7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00144ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00144ae:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00144b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144b5:	52                   	push   edx
c00144b6:	31 d2                	xor    edx,edx
c00144b8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00144bb:	52                   	push   edx
c00144bc:	50                   	push   eax
c00144bd:	57                   	push   edi
c00144be:	e8 cf 73 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c00144c3:	83 c4 10             	add    esp,0x10
c00144c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00144ca:	85 c0                	test   eax,eax
c00144cc:	74 17                	je     c00144e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c00144ce:	83 ec 0c             	sub    esp,0xc
c00144d1:	68 75 20 02 c0       	push   0xc0022075
c00144d6:	e8 2f 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00144db:	83 c4 10             	add    esp,0x10
c00144de:	31 c0                	xor    eax,eax
c00144e0:	e9 8b 00 00 00       	jmp    c0014570 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c00144e5:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00144e9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00144ec:	83 ec 0c             	sub    esp,0xc
c00144ef:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c00144f2:	50                   	push   eax
c00144f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144f7:	56                   	push   esi
c00144f8:	57                   	push   edi
c00144f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00144fd:	e8 d0 fb ff ff       	call   c00140d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014502:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014506:	83 c4 20             	add    esp,0x20
c0014509:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001450d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014511:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014516:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001451a:	41                   	inc    ecx
c001451b:	e9 6d ff ff ff       	jmp    c001448d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014520:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014524:	83 ec 0c             	sub    esp,0xc
c0014527:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001452b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001452f:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014535:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c001453b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014540:	05 00 10 00 00       	add    eax,0x1000
c0014545:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001454c:	e8 92 35 ff ff       	call   c0007ae3 <free>
c0014551:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014554:	e8 8a 35 ff ff       	call   c0007ae3 <free>
c0014559:	58                   	pop    eax
c001455a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001455e:	e8 80 35 ff ff       	call   c0007ae3 <free>
c0014563:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014566:	e8 c7 72 ff ff       	call   c000b832 <File::close()>
c001456b:	83 c4 10             	add    esp,0x10
c001456e:	b0 01                	mov    al,0x1
c0014570:	83 c4 3c             	add    esp,0x3c
c0014573:	5b                   	pop    ebx
c0014574:	5e                   	pop    esi
c0014575:	5f                   	pop    edi
c0014576:	5d                   	pop    ebp
c0014577:	c3                   	ret    

c0014578 <Thr::runtimeReferenceHelper()>:
c0014578:	83 ec 18             	sub    esp,0x18
c001457b:	68 7d 20 02 c0       	push   0xc002207d
c0014580:	e8 85 63 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014585:	fa                   	cli    
c0014586:	83 c4 10             	add    esp,0x10
c0014589:	eb fe                	jmp    c0014589 <Thr::runtimeReferenceHelper()+0x11>

c001458b <Thr::getAddressOfKernelSymbol(char const*)>:
c001458b:	57                   	push   edi
c001458c:	56                   	push   esi
c001458d:	53                   	push   ebx
c001458e:	31 db                	xor    ebx,ebx
c0014590:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c0014596:	7e 3c                	jle    c00145d4 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014598:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c001459f:	31 ff                	xor    edi,edi
c00145a1:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c00145a8:	7e 27                	jle    c00145d1 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00145aa:	50                   	push   eax
c00145ab:	50                   	push   eax
c00145ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00145b2:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c00145b9:	50                   	push   eax
c00145ba:	e8 c1 c1 fe ff       	call   c0000780 <strcmp>
c00145bf:	83 c4 10             	add    esp,0x10
c00145c2:	85 c0                	test   eax,eax
c00145c4:	75 05                	jne    c00145cb <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00145c6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00145c9:	eb 0b                	jmp    c00145d6 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00145cb:	83 c6 10             	add    esi,0x10
c00145ce:	47                   	inc    edi
c00145cf:	eb d0                	jmp    c00145a1 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00145d1:	43                   	inc    ebx
c00145d2:	eb bc                	jmp    c0014590 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00145d4:	31 c0                	xor    eax,eax
c00145d6:	5b                   	pop    ebx
c00145d7:	5e                   	pop    esi
c00145d8:	5f                   	pop    edi
c00145d9:	c3                   	ret    

c00145da <Thr::loadKernelSymbolTable(char const*)>:
c00145da:	55                   	push   ebp
c00145db:	57                   	push   edi
c00145dc:	56                   	push   esi
c00145dd:	53                   	push   ebx
c00145de:	83 ec 68             	sub    esp,0x68
c00145e1:	68 14 01 00 00       	push   0x114
c00145e6:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c00145ec:	e8 e2 34 ff ff       	call   c0007ad3 <malloc>
c00145f1:	83 c4 0c             	add    esp,0xc
c00145f4:	56                   	push   esi
c00145f5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00145f9:	89 c3                	mov    ebx,eax
c00145fb:	50                   	push   eax
c00145fc:	e8 17 71 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0014601:	5e                   	pop    esi
c0014602:	5f                   	pop    edi
c0014603:	6a 01                	push   0x1
c0014605:	53                   	push   ebx
c0014606:	e8 c9 71 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c001460b:	83 c4 10             	add    esp,0x10
c001460e:	85 c0                	test   eax,eax
c0014610:	74 0a                	je     c001461c <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014612:	83 ec 0c             	sub    esp,0xc
c0014615:	68 9f 20 02 c0       	push   0xc002209f
c001461a:	eb 34                	jmp    c0014650 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001461c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014624:	83 ec 0c             	sub    esp,0xc
c0014627:	6a 34                	push   0x34
c0014629:	e8 a5 34 ff ff       	call   c0007ad3 <malloc>
c001462e:	59                   	pop    ecx
c001462f:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014633:	89 c7                	mov    edi,eax
c0014635:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014637:	56                   	push   esi
c0014638:	57                   	push   edi
c0014639:	6a 00                	push   0x0
c001463b:	6a 34                	push   0x34
c001463d:	53                   	push   ebx
c001463e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014641:	83 c4 20             	add    esp,0x20
c0014644:	85 c0                	test   eax,eax
c0014646:	74 17                	je     c001465f <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014648:	83 ec 0c             	sub    esp,0xc
c001464b:	68 b6 20 02 c0       	push   0xc00220b6
c0014650:	e8 70 cb ff ff       	call   c00111c5 <KePanic(char const*)>
c0014655:	83 c4 10             	add    esp,0x10
c0014658:	31 c0                	xor    eax,eax
c001465a:	e9 31 02 00 00       	jmp    c0014890 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001465f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014665:	75 e1                	jne    c0014648 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014667:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001466a:	85 c0                	test   eax,eax
c001466c:	74 da                	je     c0014648 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001466e:	52                   	push   edx
c001466f:	31 d2                	xor    edx,edx
c0014671:	52                   	push   edx
c0014672:	50                   	push   eax
c0014673:	53                   	push   ebx
c0014674:	e8 19 72 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014679:	83 c4 10             	add    esp,0x10
c001467c:	85 c0                	test   eax,eax
c001467e:	75 c8                	jne    c0014648 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014680:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014684:	83 ec 0c             	sub    esp,0xc
c0014687:	31 ed                	xor    ebp,ebp
c0014689:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001468d:	0f af c2             	imul   eax,edx
c0014690:	50                   	push   eax
c0014691:	e8 3d 34 ff ff       	call   c0007ad3 <malloc>
c0014696:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014698:	89 34 24             	mov    DWORD PTR [esp],esi
c001469b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001469f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146a3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00146a7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00146ab:	0f af c2             	imul   eax,edx
c00146ae:	99                   	cdq    
c00146af:	52                   	push   edx
c00146b0:	50                   	push   eax
c00146b1:	53                   	push   ebx
c00146b2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00146b5:	83 c4 20             	add    esp,0x20
c00146b8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00146c0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00146c8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00146d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146d8:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00146dc:	0f b7 f5             	movzx  esi,bp
c00146df:	0f 83 a7 00 00 00    	jae    c001478c <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00146e5:	6b f6 28             	imul   esi,esi,0x28
c00146e8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00146ec:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00146ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146f3:	50                   	push   eax
c00146f4:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00146f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00146fc:	8b 16                	mov    edx,DWORD PTR [esi]
c00146fe:	6b c0 28             	imul   eax,eax,0x28
c0014701:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014705:	89 d0                	mov    eax,edx
c0014707:	31 d2                	xor    edx,edx
c0014709:	52                   	push   edx
c001470a:	50                   	push   eax
c001470b:	53                   	push   ebx
c001470c:	e8 81 71 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014711:	83 c4 0c             	add    esp,0xc
c0014714:	6a 20                	push   0x20
c0014716:	6a 00                	push   0x0
c0014718:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001471c:	52                   	push   edx
c001471d:	e8 ce bd fe ff       	call   c00004f0 <memset>
c0014722:	58                   	pop    eax
c0014723:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014725:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014729:	51                   	push   ecx
c001472a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001472e:	52                   	push   edx
c001472f:	6a 00                	push   0x0
c0014731:	6a 1f                	push   0x1f
c0014733:	53                   	push   ebx
c0014734:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014737:	83 c4 18             	add    esp,0x18
c001473a:	68 cd 20 02 c0       	push   0xc00220cd
c001473f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014743:	52                   	push   edx
c0014744:	e8 37 c0 fe ff       	call   c0000780 <strcmp>
c0014749:	83 c4 10             	add    esp,0x10
c001474c:	85 c0                	test   eax,eax
c001474e:	75 0f                	jne    c001475f <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014750:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014753:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014757:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001475b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001475f:	50                   	push   eax
c0014760:	50                   	push   eax
c0014761:	68 d5 20 02 c0       	push   0xc00220d5
c0014766:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001476a:	50                   	push   eax
c001476b:	e8 10 c0 fe ff       	call   c0000780 <strcmp>
c0014770:	83 c4 10             	add    esp,0x10
c0014773:	85 c0                	test   eax,eax
c0014775:	75 0f                	jne    c0014786 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014777:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001477a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001477e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014782:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014786:	45                   	inc    ebp
c0014787:	e9 4c ff ff ff       	jmp    c00146d8 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001478c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014791:	75 10                	jne    c00147a3 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014793:	83 ec 0c             	sub    esp,0xc
c0014796:	68 dd 20 02 c0       	push   0xc00220dd
c001479b:	e8 25 ca ff ff       	call   c00111c5 <KePanic(char const*)>
c00147a0:	83 c4 10             	add    esp,0x10
c00147a3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00147a8:	75 10                	jne    c00147ba <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00147aa:	83 ec 0c             	sub    esp,0xc
c00147ad:	68 dd 20 02 c0       	push   0xc00220dd
c00147b2:	e8 0e ca ff ff       	call   c00111c5 <KePanic(char const*)>
c00147b7:	83 c4 10             	add    esp,0x10
c00147ba:	50                   	push   eax
c00147bb:	31 d2                	xor    edx,edx
c00147bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c1:	52                   	push   edx
c00147c2:	50                   	push   eax
c00147c3:	53                   	push   ebx
c00147c4:	e8 c9 70 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c00147c9:	5a                   	pop    edx
c00147ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147ce:	e8 00 33 ff ff       	call   c0007ad3 <malloc>
c00147d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147d7:	31 c9                	xor    ecx,ecx
c00147d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147df:	5e                   	pop    esi
c00147e0:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00147e4:	55                   	push   ebp
c00147e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147e9:	51                   	push   ecx
c00147ea:	52                   	push   edx
c00147eb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00147ef:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00147f3:	53                   	push   ebx
c00147f4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147f7:	83 c4 14             	add    esp,0x14
c00147fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00147fe:	e8 d0 32 ff ff       	call   c0007ad3 <malloc>
c0014803:	89 c6                	mov    esi,eax
c0014805:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014807:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001480a:	56                   	push   esi
c001480b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001480f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014813:	51                   	push   ecx
c0014814:	52                   	push   edx
c0014815:	53                   	push   ebx
c0014816:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014819:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001481d:	83 c4 1c             	add    esp,0x1c
c0014820:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c0014826:	c1 e8 04             	shr    eax,0x4
c0014829:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c0014830:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014834:	31 d2                	xor    edx,edx
c0014836:	52                   	push   edx
c0014837:	50                   	push   eax
c0014838:	53                   	push   ebx
c0014839:	e8 54 70 ff ff       	call   c000b892 <File::seek(unsigned long long)>
c001483e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014840:	31 d2                	xor    edx,edx
c0014842:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014845:	56                   	push   esi
c0014846:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001484a:	52                   	push   edx
c001484b:	50                   	push   eax
c001484c:	53                   	push   ebx
c001484d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014850:	83 c4 14             	add    esp,0x14
c0014853:	53                   	push   ebx
c0014854:	e8 d9 6f ff ff       	call   c000b832 <File::close()>
c0014859:	5d                   	pop    ebp
c001485a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001485e:	e8 80 32 ff ff       	call   c0007ae3 <free>
c0014863:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014866:	e8 78 32 ff ff       	call   c0007ae3 <free>
c001486b:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014870:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014874:	83 c4 10             	add    esp,0x10
c0014877:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c001487e:	8d 50 01             	lea    edx,[eax+0x1]
c0014881:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014888:	b0 01                	mov    al,0x1
c001488a:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014890:	83 c4 5c             	add    esp,0x5c
c0014893:	5b                   	pop    ebx
c0014894:	5e                   	pop    esi
c0014895:	5f                   	pop    edi
c0014896:	5d                   	pop    ebp
c0014897:	c3                   	ret    

c0014898 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014898:	55                   	push   ebp
c0014899:	57                   	push   edi
c001489a:	56                   	push   esi
c001489b:	53                   	push   ebx
c001489c:	81 ec 68 03 00 00    	sub    esp,0x368
c00148a2:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00148a9:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c00148af:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00148b3:	68 14 01 00 00       	push   0x114
c00148b8:	e8 16 32 ff ff       	call   c0007ad3 <malloc>
c00148bd:	83 c4 0c             	add    esp,0xc
c00148c0:	56                   	push   esi
c00148c1:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00148c8:	50                   	push   eax
c00148c9:	89 c3                	mov    ebx,eax
c00148cb:	e8 48 6e ff ff       	call   c000b718 <File::File(char const*, Process*)>
c00148d0:	5f                   	pop    edi
c00148d1:	5d                   	pop    ebp
c00148d2:	6a 01                	push   0x1
c00148d4:	53                   	push   ebx
c00148d5:	e8 fa 6e ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c00148da:	83 c4 10             	add    esp,0x10
c00148dd:	85 c0                	test   eax,eax
c00148df:	0f 85 b3 06 00 00    	jne    c0014f98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148e5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00148ed:	83 ec 0c             	sub    esp,0xc
c00148f0:	6a 34                	push   0x34
c00148f2:	e8 dc 31 ff ff       	call   c0007ad3 <malloc>
c00148f7:	5e                   	pop    esi
c00148f8:	8d 74 24 54          	lea    esi,[esp+0x54]
c00148fc:	89 c5                	mov    ebp,eax
c00148fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014900:	56                   	push   esi
c0014901:	55                   	push   ebp
c0014902:	6a 00                	push   0x0
c0014904:	6a 34                	push   0x34
c0014906:	53                   	push   ebx
c0014907:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001490a:	83 c4 20             	add    esp,0x20
c001490d:	85 c0                	test   eax,eax
c001490f:	0f 85 83 06 00 00    	jne    c0014f98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014915:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001491c:	0f 85 76 06 00 00    	jne    c0014f98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014922:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014925:	85 c0                	test   eax,eax
c0014927:	0f 84 6b 06 00 00    	je     c0014f98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001492d:	31 d2                	xor    edx,edx
c001492f:	51                   	push   ecx
c0014930:	52                   	push   edx
c0014931:	50                   	push   eax
c0014932:	53                   	push   ebx
c0014933:	e8 5a 6f ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014938:	83 c4 10             	add    esp,0x10
c001493b:	85 c0                	test   eax,eax
c001493d:	0f 85 55 06 00 00    	jne    c0014f98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014943:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014946:	83 ec 0c             	sub    esp,0xc
c0014949:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001494d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014951:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014955:	0f af c2             	imul   eax,edx
c0014958:	50                   	push   eax
c0014959:	e8 75 31 ff ff       	call   c0007ad3 <malloc>
c001495e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014960:	89 34 24             	mov    DWORD PTR [esp],esi
c0014963:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014967:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001496b:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001496f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014973:	0f af c2             	imul   eax,edx
c0014976:	99                   	cdq    
c0014977:	52                   	push   edx
c0014978:	50                   	push   eax
c0014979:	53                   	push   ebx
c001497a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001497d:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014980:	83 c4 20             	add    esp,0x20
c0014983:	85 c0                	test   eax,eax
c0014985:	0f 84 0d 06 00 00    	je     c0014f98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001498b:	52                   	push   edx
c001498c:	31 d2                	xor    edx,edx
c001498e:	52                   	push   edx
c001498f:	50                   	push   eax
c0014990:	53                   	push   ebx
c0014991:	e8 fc 6e ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014996:	83 c4 10             	add    esp,0x10
c0014999:	85 c0                	test   eax,eax
c001499b:	0f 85 f7 05 00 00    	jne    c0014f98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00149a1:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00149a5:	83 ec 0c             	sub    esp,0xc
c00149a8:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00149ac:	0f af c2             	imul   eax,edx
c00149af:	50                   	push   eax
c00149b0:	e8 1e 31 ff ff       	call   c0007ad3 <malloc>
c00149b5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00149b7:	89 34 24             	mov    DWORD PTR [esp],esi
c00149ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00149c2:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00149c6:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00149ca:	0f af c2             	imul   eax,edx
c00149cd:	99                   	cdq    
c00149ce:	52                   	push   edx
c00149cf:	50                   	push   eax
c00149d0:	53                   	push   ebx
c00149d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149d4:	83 c4 20             	add    esp,0x20
c00149d7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00149dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00149e0:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c00149e4:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c00149e8:	73 78                	jae    c0014a62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c00149ea:	c1 e7 05             	shl    edi,0x5
c00149ed:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00149f1:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00149f4:	75 63                	jne    c0014a59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c00149f6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00149f9:	31 d2                	xor    edx,edx
c00149fb:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00149fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a02:	50                   	push   eax
c0014a03:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014a06:	52                   	push   edx
c0014a07:	50                   	push   eax
c0014a08:	53                   	push   ebx
c0014a09:	e8 84 6e ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014a0e:	83 c4 10             	add    esp,0x10
c0014a11:	85 c0                	test   eax,eax
c0014a13:	0f 85 7f 05 00 00    	jne    c0014f98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a19:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014a20:	83 ec 0c             	sub    esp,0xc
c0014a23:	31 d2                	xor    edx,edx
c0014a25:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014a29:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014a2b:	01 c6                	add    esi,eax
c0014a2d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a34:	50                   	push   eax
c0014a35:	56                   	push   esi
c0014a36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a3a:	52                   	push   edx
c0014a3b:	50                   	push   eax
c0014a3c:	53                   	push   ebx
c0014a3d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a40:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014a43:	83 c4 1c             	add    esp,0x1c
c0014a46:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014a49:	50                   	push   eax
c0014a4a:	6a 00                	push   0x0
c0014a4c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014a50:	56                   	push   esi
c0014a51:	e8 9a ba fe ff       	call   c00004f0 <memset>
c0014a56:	83 c4 10             	add    esp,0x10
c0014a59:	66 ff 04 24          	inc    WORD PTR [esp]
c0014a5d:	e9 7b ff ff ff       	jmp    c00149dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014a62:	50                   	push   eax
c0014a63:	68 00 01 00 00       	push   0x100
c0014a68:	6a 00                	push   0x0
c0014a6a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014a6e:	50                   	push   eax
c0014a6f:	e8 7c ba fe ff       	call   c00004f0 <memset>
c0014a74:	83 c4 0c             	add    esp,0xc
c0014a77:	68 00 01 00 00       	push   0x100
c0014a7c:	6a 00                	push   0x0
c0014a7e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014a85:	50                   	push   eax
c0014a86:	e8 65 ba fe ff       	call   c00004f0 <memset>
c0014a8b:	83 c4 10             	add    esp,0x10
c0014a8e:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014a95:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a9c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014aa4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014aac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ab4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014abc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ac0:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014ac4:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014ac9:	0f 83 16 01 00 00    	jae    c0014be5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014acf:	6b ff 28             	imul   edi,edi,0x28
c0014ad2:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014ad6:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014ad9:	51                   	push   ecx
c0014ada:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014ade:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014ae2:	8b 07                	mov    eax,DWORD PTR [edi]
c0014ae4:	6b d2 28             	imul   edx,edx,0x28
c0014ae7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014aeb:	31 d2                	xor    edx,edx
c0014aed:	52                   	push   edx
c0014aee:	50                   	push   eax
c0014aef:	53                   	push   ebx
c0014af0:	e8 9d 6d ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014af5:	83 c4 0c             	add    esp,0xc
c0014af8:	6a 20                	push   0x20
c0014afa:	6a 00                	push   0x0
c0014afc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b03:	51                   	push   ecx
c0014b04:	e8 e7 b9 fe ff       	call   c00004f0 <memset>
c0014b09:	58                   	pop    eax
c0014b0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b0c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014b10:	52                   	push   edx
c0014b11:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014b18:	51                   	push   ecx
c0014b19:	6a 00                	push   0x0
c0014b1b:	6a 1f                	push   0x1f
c0014b1d:	53                   	push   ebx
c0014b1e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b21:	83 c4 1c             	add    esp,0x1c
c0014b24:	6a 09                	push   0x9
c0014b26:	68 f7 20 02 c0       	push   0xc00220f7
c0014b2b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b32:	51                   	push   ecx
c0014b33:	e8 48 b8 fe ff       	call   c0000380 <memcmp>
c0014b38:	83 c4 10             	add    esp,0x10
c0014b3b:	85 c0                	test   eax,eax
c0014b3d:	75 1a                	jne    c0014b59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014b3f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014b45:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014b49:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b4c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014b53:	89 d0                	mov    eax,edx
c0014b55:	40                   	inc    eax
c0014b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b59:	52                   	push   edx
c0014b5a:	6a 09                	push   0x9
c0014b5c:	68 01 21 02 c0       	push   0xc0022101
c0014b61:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b68:	50                   	push   eax
c0014b69:	e8 12 b8 fe ff       	call   c0000380 <memcmp>
c0014b6e:	83 c4 10             	add    esp,0x10
c0014b71:	85 c0                	test   eax,eax
c0014b73:	75 1a                	jne    c0014b8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014b75:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014b78:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014b7b:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014b7f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b82:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014b89:	89 c8                	mov    eax,ecx
c0014b8b:	40                   	inc    eax
c0014b8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b8f:	50                   	push   eax
c0014b90:	50                   	push   eax
c0014b91:	68 cd 20 02 c0       	push   0xc00220cd
c0014b96:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b9d:	50                   	push   eax
c0014b9e:	e8 dd bb fe ff       	call   c0000780 <strcmp>
c0014ba3:	83 c4 10             	add    esp,0x10
c0014ba6:	85 c0                	test   eax,eax
c0014ba8:	75 0b                	jne    c0014bb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014baa:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014bae:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014bb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014bb5:	50                   	push   eax
c0014bb6:	50                   	push   eax
c0014bb7:	68 d5 20 02 c0       	push   0xc00220d5
c0014bbc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014bc3:	50                   	push   eax
c0014bc4:	e8 b7 bb fe ff       	call   c0000780 <strcmp>
c0014bc9:	83 c4 10             	add    esp,0x10
c0014bcc:	85 c0                	test   eax,eax
c0014bce:	75 0b                	jne    c0014bdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014bd0:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014bd4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014bd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014bdb:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014be0:	e9 d7 fe ff ff       	jmp    c0014abc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014be5:	50                   	push   eax
c0014be6:	31 d2                	xor    edx,edx
c0014be8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bec:	52                   	push   edx
c0014bed:	50                   	push   eax
c0014bee:	53                   	push   ebx
c0014bef:	e8 9e 6c ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014bf4:	58                   	pop    eax
c0014bf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bf9:	e8 d5 2e ff ff       	call   c0007ad3 <malloc>
c0014bfe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c00:	31 d2                	xor    edx,edx
c0014c02:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014c06:	58                   	pop    eax
c0014c07:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014c0b:	56                   	push   esi
c0014c0c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014c10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c14:	52                   	push   edx
c0014c15:	50                   	push   eax
c0014c16:	53                   	push   ebx
c0014c17:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c1a:	83 c4 14             	add    esp,0x14
c0014c1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c21:	e8 ad 2e ff ff       	call   c0007ad3 <malloc>
c0014c26:	31 d2                	xor    edx,edx
c0014c28:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014c2c:	83 c4 0c             	add    esp,0xc
c0014c2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c33:	52                   	push   edx
c0014c34:	50                   	push   eax
c0014c35:	53                   	push   ebx
c0014c36:	e8 57 6c ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014c3b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c3d:	31 d2                	xor    edx,edx
c0014c3f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c46:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014c4a:	52                   	push   edx
c0014c4b:	50                   	push   eax
c0014c4c:	53                   	push   ebx
c0014c4d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c50:	83 c4 20             	add    esp,0x20
c0014c53:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014c58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014c64:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014c68:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014c6b:	0f 84 2b 03 00 00    	je     c0014f9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014c71:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014c78:	31 d2                	xor    edx,edx
c0014c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c7e:	c1 e8 03             	shr    eax,0x3
c0014c81:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014c85:	51                   	push   ecx
c0014c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c8a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014c8e:	52                   	push   edx
c0014c8f:	50                   	push   eax
c0014c90:	53                   	push   ebx
c0014c91:	e8 fc 6b ff ff       	call   c000b892 <File::seek(unsigned long long)>
c0014c96:	5e                   	pop    esi
c0014c97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c9b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014ca2:	e8 2c 2e ff ff       	call   c0007ad3 <malloc>
c0014ca7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ca9:	31 d2                	xor    edx,edx
c0014cab:	89 c7                	mov    edi,eax
c0014cad:	58                   	pop    eax
c0014cae:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014cb2:	50                   	push   eax
c0014cb3:	57                   	push   edi
c0014cb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cb8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014cbf:	52                   	push   edx
c0014cc0:	50                   	push   eax
c0014cc1:	53                   	push   ebx
c0014cc2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cc5:	83 c4 20             	add    esp,0x20
c0014cc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014cd0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014cd4:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014cd8:	0f 8d a5 02 00 00    	jge    c0014f83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014cde:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014ce3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ce7:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014cea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014cee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cf2:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014cf6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014cfa:	c1 e8 08             	shr    eax,0x8
c0014cfd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014d01:	89 c2                	mov    edx,eax
c0014d03:	c1 e2 04             	shl    edx,0x4
c0014d06:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014d0a:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014d0d:	85 f6                	test   esi,esi
c0014d0f:	0f 85 cf 00 00 00    	jne    c0014de4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014d15:	83 ec 0c             	sub    esp,0xc
c0014d18:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d20:	03 02                	add    eax,DWORD PTR [edx]
c0014d22:	50                   	push   eax
c0014d23:	e8 63 f8 ff ff       	call   c001458b <Thr::getAddressOfKernelSymbol(char const*)>
c0014d28:	83 c4 10             	add    esp,0x10
c0014d2b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014d2f:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014d34:	85 c0                	test   eax,eax
c0014d36:	89 c6                	mov    esi,eax
c0014d38:	0f 85 a6 00 00 00    	jne    c0014de4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014d3e:	83 ec 0c             	sub    esp,0xc
c0014d41:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014d45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d49:	03 02                	add    eax,DWORD PTR [edx]
c0014d4b:	50                   	push   eax
c0014d4c:	e8 5f c6 ff ff       	call   c00113b0 <KeResolveCompatibilitySymbol(char*)>
c0014d51:	83 c4 10             	add    esp,0x10
c0014d54:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014d58:	85 c0                	test   eax,eax
c0014d5a:	89 c6                	mov    esi,eax
c0014d5c:	0f 85 82 00 00 00    	jne    c0014de4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014d62:	50                   	push   eax
c0014d63:	50                   	push   eax
c0014d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d68:	03 02                	add    eax,DWORD PTR [edx]
c0014d6a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014d6e:	50                   	push   eax
c0014d6f:	68 0b 21 02 c0       	push   0xc002210b
c0014d74:	e8 91 5b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014d79:	58                   	pop    eax
c0014d7a:	5a                   	pop    edx
c0014d7b:	68 25 21 02 c0       	push   0xc0022125
c0014d80:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d87:	51                   	push   ecx
c0014d88:	e8 c3 b8 fe ff       	call   c0000650 <strcpy>
c0014d8d:	59                   	pop    ecx
c0014d8e:	58                   	pop    eax
c0014d8f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d97:	03 02                	add    eax,DWORD PTR [edx]
c0014d99:	50                   	push   eax
c0014d9a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014da1:	51                   	push   ecx
c0014da2:	e8 c9 ba fe ff       	call   c0000870 <strcat>
c0014da7:	58                   	pop    eax
c0014da8:	5a                   	pop    edx
c0014da9:	68 bb 21 02 c0       	push   0xc00221bb
c0014dae:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014db5:	51                   	push   ecx
c0014db6:	e8 b5 ba fe ff       	call   c0000870 <strcat>
c0014dbb:	83 c4 10             	add    esp,0x10
c0014dbe:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014dc3:	0f 84 77 01 00 00    	je     c0014f40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014dc9:	83 ec 0c             	sub    esp,0xc
c0014dcc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014dd3:	51                   	push   ecx
c0014dd4:	e8 ec c3 ff ff       	call   c00111c5 <KePanic(char const*)>
c0014dd9:	83 c4 10             	add    esp,0x10
c0014ddc:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014de0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014de4:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014de9:	83 f8 01             	cmp    eax,0x1
c0014dec:	0f 85 9b 00 00 00    	jne    c0014e8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014df2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014df6:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014dfd:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014e01:	01 d0                	add    eax,edx
c0014e03:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014e0b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014e0f:	0f 94 c0             	sete   al
c0014e12:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014e1a:	0f 94 c1             	sete   cl
c0014e1d:	09 c1                	or     ecx,eax
c0014e1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e23:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014e28:	0f b6 c9             	movzx  ecx,cl
c0014e2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e2d:	74 41                	je     c0014e70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014e2f:	8d 14 06             	lea    edx,[esi+eax*1]
c0014e32:	85 c9                	test   ecx,ecx
c0014e34:	75 15                	jne    c0014e4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014e36:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014e3a:	66 83 f8 0c          	cmp    ax,0xc
c0014e3e:	76 05                	jbe    c0014e45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014e40:	b8 0c 00 00 00       	mov    eax,0xc
c0014e45:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014e49:	76 37                	jbe    c0014e82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e4b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014e50:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014e54:	0f 84 e6 00 00 00    	je     c0014f40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014e5a:	83 ec 0c             	sub    esp,0xc
c0014e5d:	68 3c 21 02 c0       	push   0xc002213c
c0014e62:	e8 5e c3 ff ff       	call   c00111c5 <KePanic(char const*)>
c0014e67:	83 c4 10             	add    esp,0x10
c0014e6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e6e:	eb 12                	jmp    c0014e82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e70:	01 c2                	add    edx,eax
c0014e72:	85 c9                	test   ecx,ecx
c0014e74:	75 0c                	jne    c0014e82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e76:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014e7a:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014e7e:	77 02                	ja     c0014e82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e80:	01 f2                	add    edx,esi
c0014e82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e86:	89 10                	mov    DWORD PTR [eax],edx
c0014e88:	e9 ed 00 00 00       	jmp    c0014f7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014e8d:	83 f8 02             	cmp    eax,0x2
c0014e90:	0f 85 81 00 00 00    	jne    c0014f17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014e96:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014e9d:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014ea1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014ea5:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014ead:	74 21                	je     c0014ed0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014eaf:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014eb7:	74 17                	je     c0014ed0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014eb9:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014ebd:	ba 0a 00 00 00       	mov    edx,0xa
c0014ec2:	83 f9 0e             	cmp    ecx,0xe
c0014ec5:	77 03                	ja     c0014eca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014ec7:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014eca:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014ece:	76 1f                	jbe    c0014eef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014ed0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014ed5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ed9:	74 65                	je     c0014f40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014edb:	83 ec 0c             	sub    esp,0xc
c0014ede:	68 58 21 02 c0       	push   0xc0022158
c0014ee3:	e8 dd c2 ff ff       	call   c00111c5 <KePanic(char const*)>
c0014ee8:	83 c4 10             	add    esp,0x10
c0014eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eef:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ef4:	8b 10                	mov    edx,DWORD PTR [eax]
c0014ef6:	74 15                	je     c0014f0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014ef8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014efc:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014f03:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014f07:	01 d1                	add    ecx,edx
c0014f09:	01 ce                	add    esi,ecx
c0014f0b:	eb 06                	jmp    c0014f13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014f0d:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014f11:	01 d6                	add    esi,edx
c0014f13:	89 30                	mov    DWORD PTR [eax],esi
c0014f15:	eb 63                	jmp    c0014f7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014f17:	56                   	push   esi
c0014f18:	56                   	push   esi
c0014f19:	50                   	push   eax
c0014f1a:	68 74 21 02 c0       	push   0xc0022174
c0014f1f:	e8 e6 59 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014f24:	83 c4 10             	add    esp,0x10
c0014f27:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014f2c:	74 12                	je     c0014f40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014f2e:	83 ec 0c             	sub    esp,0xc
c0014f31:	68 7f 21 02 c0       	push   0xc002217f
c0014f36:	e8 8a c2 ff ff       	call   c00111c5 <KePanic(char const*)>
c0014f3b:	83 c4 10             	add    esp,0x10
c0014f3e:	eb 3a                	jmp    c0014f7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014f40:	83 ec 0c             	sub    esp,0xc
c0014f43:	53                   	push   ebx
c0014f44:	e8 e9 68 ff ff       	call   c000b832 <File::close()>
c0014f49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f4e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f51:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f54:	e8 8a 2b ff ff       	call   c0007ae3 <free>
c0014f59:	59                   	pop    ecx
c0014f5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f5e:	e8 80 2b ff ff       	call   c0007ae3 <free>
c0014f63:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f66:	e8 78 2b ff ff       	call   c0007ae3 <free>
c0014f6b:	5b                   	pop    ebx
c0014f6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f70:	e8 6e 2b ff ff       	call   c0007ae3 <free>
c0014f75:	83 c4 10             	add    esp,0x10
c0014f78:	eb 1e                	jmp    c0014f98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f7a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014f7e:	e9 4d fd ff ff       	jmp    c0014cd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014f83:	83 ec 0c             	sub    esp,0xc
c0014f86:	57                   	push   edi
c0014f87:	e8 57 2b ff ff       	call   c0007ae3 <free>
c0014f8c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014f90:	83 c4 10             	add    esp,0x10
c0014f93:	e9 cc fc ff ff       	jmp    c0014c64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014f98:	31 c0                	xor    eax,eax
c0014f9a:	eb 32                	jmp    c0014fce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014f9c:	83 ec 0c             	sub    esp,0xc
c0014f9f:	53                   	push   ebx
c0014fa0:	e8 8d 68 ff ff       	call   c000b832 <File::close()>
c0014fa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014fa7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014faa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014fad:	58                   	pop    eax
c0014fae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014fb2:	e8 2c 2b ff ff       	call   c0007ae3 <free>
c0014fb7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014fba:	e8 24 2b ff ff       	call   c0007ae3 <free>
c0014fbf:	5a                   	pop    edx
c0014fc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fc4:	e8 1a 2b ff ff       	call   c0007ae3 <free>
c0014fc9:	83 c4 10             	add    esp,0x10
c0014fcc:	b0 01                	mov    al,0x1
c0014fce:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014fd4:	5b                   	pop    ebx
c0014fd5:	5e                   	pop    esi
c0014fd6:	5f                   	pop    edi
c0014fd7:	5d                   	pop    ebp
c0014fd8:	c3                   	ret    

c0014fd9 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014fd9:	56                   	push   esi
c0014fda:	31 d2                	xor    edx,edx
c0014fdc:	53                   	push   ebx
c0014fdd:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0014fe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014fe7:	39 d3                	cmp    ebx,edx
c0014fe9:	7e 1b                	jle    c0015006 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014feb:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c0014ff2:	39 c8                	cmp    eax,ecx
c0014ff4:	77 0d                	ja     c0015003 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014ff6:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c0014ffd:	01 c6                	add    esi,eax
c0014fff:	39 ce                	cmp    esi,ecx
c0015001:	77 05                	ja     c0015008 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015003:	42                   	inc    edx
c0015004:	eb e1                	jmp    c0014fe7 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015006:	31 c0                	xor    eax,eax
c0015008:	5b                   	pop    ebx
c0015009:	5e                   	pop    esi
c001500a:	c3                   	ret    

c001500b <Thr::getDriverNameFromAddress(unsigned long)>:
c001500b:	53                   	push   ebx
c001500c:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015012:	31 c0                	xor    eax,eax
c0015014:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015018:	39 c3                	cmp    ebx,eax
c001501a:	7e 22                	jle    c001503e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001501c:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c0015023:	39 ca                	cmp    edx,ecx
c0015025:	77 14                	ja     c001503b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015027:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c001502e:	39 ca                	cmp    edx,ecx
c0015030:	76 09                	jbe    c001503b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015032:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c0015039:	eb 05                	jmp    c0015040 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001503b:	40                   	inc    eax
c001503c:	eb da                	jmp    c0015018 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001503e:	31 c0                	xor    eax,eax
c0015040:	5b                   	pop    ebx
c0015041:	c3                   	ret    

c0015042 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015042:	53                   	push   ebx
c0015043:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015047:	53                   	push   ebx
c0015048:	e8 8c ff ff ff       	call   c0014fd9 <Thr::getDriverBaseFromAddress(unsigned long)>
c001504d:	5a                   	pop    edx
c001504e:	31 d2                	xor    edx,edx
c0015050:	85 c0                	test   eax,eax
c0015052:	74 04                	je     c0015058 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015054:	89 da                	mov    edx,ebx
c0015056:	29 c2                	sub    edx,eax
c0015058:	5b                   	pop    ebx
c0015059:	89 d0                	mov    eax,edx
c001505b:	c3                   	ret    

c001505c <Thr::loadDLL(char const*, bool)>:
c001505c:	55                   	push   ebp
c001505d:	57                   	push   edi
c001505e:	56                   	push   esi
c001505f:	53                   	push   ebx
c0015060:	81 ec 34 01 00 00    	sub    esp,0x134
c0015066:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001506d:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0015074:	56                   	push   esi
c0015075:	68 97 21 02 c0       	push   0xc0022197
c001507a:	e8 8b 58 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001507f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015086:	e8 48 2a ff ff       	call   c0007ad3 <malloc>
c001508b:	83 c4 0c             	add    esp,0xc
c001508e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0015094:	56                   	push   esi
c0015095:	50                   	push   eax
c0015096:	89 c3                	mov    ebx,eax
c0015098:	e8 7b 66 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c001509d:	83 c4 10             	add    esp,0x10
c00150a0:	85 db                	test   ebx,ebx
c00150a2:	75 3c                	jne    c00150e0 <Thr::loadDLL(char const*, bool)+0x84>
c00150a4:	89 e8                	mov    eax,ebp
c00150a6:	84 c0                	test   al,al
c00150a8:	0f 84 e1 01 00 00    	je     c001528f <Thr::loadDLL(char const*, bool)+0x233>
c00150ae:	50                   	push   eax
c00150af:	50                   	push   eax
c00150b0:	68 a8 21 02 c0       	push   0xc00221a8
c00150b5:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00150b9:	57                   	push   edi
c00150ba:	e8 91 b5 fe ff       	call   c0000650 <strcpy>
c00150bf:	58                   	pop    eax
c00150c0:	5a                   	pop    edx
c00150c1:	56                   	push   esi
c00150c2:	57                   	push   edi
c00150c3:	e8 a8 b7 fe ff       	call   c0000870 <strcat>
c00150c8:	59                   	pop    ecx
c00150c9:	58                   	pop    eax
c00150ca:	68 bb 21 02 c0       	push   0xc00221bb
c00150cf:	57                   	push   edi
c00150d0:	e8 9b b7 fe ff       	call   c0000870 <strcat>
c00150d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00150d8:	e8 e8 c0 ff ff       	call   c00111c5 <KePanic(char const*)>
c00150dd:	83 c4 10             	add    esp,0x10
c00150e0:	50                   	push   eax
c00150e1:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00150e5:	50                   	push   eax
c00150e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00150ea:	50                   	push   eax
c00150eb:	53                   	push   ebx
c00150ec:	e8 e5 69 ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c00150f1:	83 c4 10             	add    esp,0x10
c00150f4:	85 db                	test   ebx,ebx
c00150f6:	74 0c                	je     c0015104 <Thr::loadDLL(char const*, bool)+0xa8>
c00150f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150fa:	83 ec 0c             	sub    esp,0xc
c00150fd:	53                   	push   ebx
c00150fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015101:	83 c4 10             	add    esp,0x10
c0015104:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015109:	75 0a                	jne    c0015115 <Thr::loadDLL(char const*, bool)+0xb9>
c001510b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001510f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015113:	75 3e                	jne    c0015153 <Thr::loadDLL(char const*, bool)+0xf7>
c0015115:	89 e8                	mov    eax,ebp
c0015117:	31 db                	xor    ebx,ebx
c0015119:	84 c0                	test   al,al
c001511b:	0f 84 6e 01 00 00    	je     c001528f <Thr::loadDLL(char const*, bool)+0x233>
c0015121:	50                   	push   eax
c0015122:	50                   	push   eax
c0015123:	68 a8 21 02 c0       	push   0xc00221a8
c0015128:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001512c:	53                   	push   ebx
c001512d:	e8 1e b5 fe ff       	call   c0000650 <strcpy>
c0015132:	58                   	pop    eax
c0015133:	5a                   	pop    edx
c0015134:	56                   	push   esi
c0015135:	53                   	push   ebx
c0015136:	e8 35 b7 fe ff       	call   c0000870 <strcat>
c001513b:	59                   	pop    ecx
c001513c:	5f                   	pop    edi
c001513d:	68 bb 21 02 c0       	push   0xc00221bb
c0015142:	53                   	push   ebx
c0015143:	e8 28 b7 fe ff       	call   c0000870 <strcat>
c0015148:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001514b:	e8 75 c0 ff ff       	call   c00111c5 <KePanic(char const*)>
c0015150:	83 c4 10             	add    esp,0x10
c0015153:	53                   	push   ebx
c0015154:	6a 03                	push   0x3
c0015156:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001515a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001515e:	05 ff 0f 00 00       	add    eax,0xfff
c0015163:	83 d2 00             	adc    edx,0x0
c0015166:	0f ac d0 0c          	shrd   eax,edx,0xc
c001516a:	50                   	push   eax
c001516b:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015171:	e8 90 4c ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0015176:	89 c3                	mov    ebx,eax
c0015178:	58                   	pop    eax
c0015179:	5a                   	pop    edx
c001517a:	53                   	push   ebx
c001517b:	68 12 08 02 c0       	push   0xc0020812
c0015180:	e8 85 57 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015185:	89 34 24             	mov    DWORD PTR [esp],esi
c0015188:	e8 f3 b3 fe ff       	call   c0000580 <strlen>
c001518d:	8b 3d 00 8f 02 c0    	mov    edi,DWORD PTR ds:0xc0028f00
c0015193:	40                   	inc    eax
c0015194:	89 04 24             	mov    DWORD PTR [esp],eax
c0015197:	e8 37 29 ff ff       	call   c0007ad3 <malloc>
c001519c:	59                   	pop    ecx
c001519d:	89 04 bd 20 93 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6ce0],eax
c00151a4:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00151a9:	5f                   	pop    edi
c00151aa:	56                   	push   esi
c00151ab:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c00151b2:	e8 99 b4 fe ff       	call   c0000650 <strcpy>
c00151b7:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00151bc:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c00151c3:	8d 50 01             	lea    edx,[eax+0x1]
c00151c6:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c00151cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00151d0:	83 c4 0c             	add    esp,0xc
c00151d3:	6a 01                	push   0x1
c00151d5:	53                   	push   ebx
c00151d6:	56                   	push   esi
c00151d7:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c00151de:	e8 b5 f6 ff ff       	call   c0014898 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00151e3:	83 c4 10             	add    esp,0x10
c00151e6:	89 c7                	mov    edi,eax
c00151e8:	89 f8                	mov    eax,edi
c00151ea:	83 f0 01             	xor    eax,0x1
c00151ed:	84 c0                	test   al,al
c00151ef:	74 18                	je     c0015209 <Thr::loadDLL(char const*, bool)+0x1ad>
c00151f1:	89 e8                	mov    eax,ebp
c00151f3:	84 c0                	test   al,al
c00151f5:	74 12                	je     c0015209 <Thr::loadDLL(char const*, bool)+0x1ad>
c00151f7:	83 ec 0c             	sub    esp,0xc
c00151fa:	68 bd 21 02 c0       	push   0xc00221bd
c00151ff:	e8 c1 bf ff ff       	call   c00111c5 <KePanic(char const*)>
c0015204:	83 c4 10             	add    esp,0x10
c0015207:	eb 06                	jmp    c001520f <Thr::loadDLL(char const*, bool)+0x1b3>
c0015209:	89 f8                	mov    eax,edi
c001520b:	84 c0                	test   al,al
c001520d:	75 10                	jne    c001521f <Thr::loadDLL(char const*, bool)+0x1c3>
c001520f:	83 ec 0c             	sub    esp,0xc
c0015212:	68 dc 21 02 c0       	push   0xc00221dc
c0015217:	e8 a9 bf ff ff       	call   c00111c5 <KePanic(char const*)>
c001521c:	83 c4 10             	add    esp,0x10
c001521f:	31 f6                	xor    esi,esi
c0015221:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015225:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015229:	05 ff 0f 00 00       	add    eax,0xfff
c001522e:	83 d2 00             	adc    edx,0x0
c0015231:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015235:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015239:	c1 ea 0c             	shr    edx,0xc
c001523c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015240:	ba 00 00 00 00       	mov    edx,0x0
c0015245:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015249:	89 d0                	mov    eax,edx
c001524b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001524f:	73 32                	jae    c0015283 <Thr::loadDLL(char const*, bool)+0x227>
c0015251:	50                   	push   eax
c0015252:	50                   	push   eax
c0015253:	89 f0                	mov    eax,esi
c0015255:	c1 e0 0c             	shl    eax,0xc
c0015258:	01 d8                	add    eax,ebx
c001525a:	50                   	push   eax
c001525b:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015261:	e8 84 46 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0015266:	83 c4 10             	add    esp,0x10
c0015269:	8b 00                	mov    eax,DWORD PTR [eax]
c001526b:	a8 60                	test   al,0x60
c001526d:	75 11                	jne    c0015280 <Thr::loadDLL(char const*, bool)+0x224>
c001526f:	83 ec 0c             	sub    esp,0xc
c0015272:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015277:	50                   	push   eax
c0015278:	e8 fc 2a ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c001527d:	83 c4 10             	add    esp,0x10
c0015280:	46                   	inc    esi
c0015281:	eb 9e                	jmp    c0015221 <Thr::loadDLL(char const*, bool)+0x1c5>
c0015283:	89 f8                	mov    eax,edi
c0015285:	84 c0                	test   al,al
c0015287:	b8 00 00 00 00       	mov    eax,0x0
c001528c:	0f 44 d8             	cmove  ebx,eax
c001528f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015295:	89 d8                	mov    eax,ebx
c0015297:	5b                   	pop    ebx
c0015298:	5e                   	pop    esi
c0015299:	5f                   	pop    edi
c001529a:	5d                   	pop    ebp
c001529b:	c3                   	ret    

c001529c <Thr::executeDLL(unsigned long, void*)>:
c001529c:	56                   	push   esi
c001529d:	53                   	push   ebx
c001529e:	52                   	push   edx
c001529f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00152a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00152a7:	85 db                	test   ebx,ebx
c00152a9:	75 10                	jne    c00152bb <Thr::executeDLL(unsigned long, void*)+0x1f>
c00152ab:	83 ec 0c             	sub    esp,0xc
c00152ae:	68 f8 21 02 c0       	push   0xc00221f8
c00152b3:	e8 0d bf ff ff       	call   c00111c5 <KePanic(char const*)>
c00152b8:	83 c4 10             	add    esp,0x10
c00152bb:	50                   	push   eax
c00152bc:	50                   	push   eax
c00152bd:	53                   	push   ebx
c00152be:	68 22 22 02 c0       	push   0xc0022222
c00152c3:	e8 42 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00152c8:	89 d8                	mov    eax,ebx
c00152ca:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00152ce:	83 c4 14             	add    esp,0x14
c00152d1:	5b                   	pop    ebx
c00152d2:	5e                   	pop    esi
c00152d3:	ff e0                	jmp    eax
c00152d5:	66 90                	xchg   ax,ax
c00152d7:	90                   	nop

c00152d8 <userModeEntryPoint(void*)>:
c00152d8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00152dd:	83 e8 01             	sub    eax,0x1
c00152e0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00152e5:	75 01                	jne    c00152e8 <userModeEntryPoint(void*)+0x10>
c00152e7:	fb                   	sti    
c00152e8:	fb                   	sti    
c00152e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152f1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00152f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152fb:	e9 3f af fe ff       	jmp    c000023f <goToUsermode>

c0015300 <changeTSS>:
c0015300:	83 ec 14             	sub    esp,0x14
c0015303:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015308:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001530b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015310:	c1 e2 15             	shl    edx,0x15
c0015313:	29 d0                	sub    eax,edx
c0015315:	50                   	push   eax
c0015316:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001531b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015321:	05 7c 11 00 00       	add    eax,0x117c
c0015326:	50                   	push   eax
c0015327:	e8 10 3c ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c001532c:	83 c4 1c             	add    esp,0x1c
c001532f:	c3                   	ret    

c0015330 <switchToThread(ThreadControlBlock*)>:
c0015330:	57                   	push   edi
c0015331:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015337:	56                   	push   esi
c0015338:	53                   	push   ebx
c0015339:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001533d:	85 c9                	test   ecx,ecx
c001533f:	0f 85 8b 00 00 00    	jne    c00153d0 <switchToThread(ThreadControlBlock*)+0xa0>
c0015345:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015349:	81 fa ff 00 00 00    	cmp    edx,0xff
c001534f:	74 7b                	je     c00153cc <switchToThread(ThreadControlBlock*)+0x9c>
c0015351:	b8 00 04 00 00       	mov    eax,0x400
c0015356:	29 d0                	sub    eax,edx
c0015358:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001535b:	d1 f8                	sar    eax,1
c001535d:	01 d0                	add    eax,edx
c001535f:	90                   	nop
c0015360:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015363:	e8 04 28 00 00       	call   c0017b6c <HalQueryPerformanceCounter()>
c0015368:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c001536d:	89 c6                	mov    esi,eax
c001536f:	89 d7                	mov    edi,edx
c0015371:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c0015377:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c001537c:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c0015382:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c0015388:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c001538e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015394:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c001539a:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c00153a0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00153a3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00153a6:	01 c6                	add    esi,eax
c00153a8:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00153ab:	11 d7                	adc    edi,edx
c00153ad:	83 ec 0c             	sub    esp,0xc
c00153b0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00153b3:	53                   	push   ebx
c00153b4:	e8 be ae fe ff       	call   c0000277 <switchToThreadASM>
c00153b9:	0f 20 c0             	mov    eax,cr0
c00153bc:	83 c8 08             	or     eax,0x8
c00153bf:	0f 22 c0             	mov    cr0,eax
c00153c2:	83 c4 10             	add    esp,0x10
c00153c5:	5b                   	pop    ebx
c00153c6:	5e                   	pop    esi
c00153c7:	5f                   	pop    edi
c00153c8:	c3                   	ret    
c00153c9:	8d 76 00             	lea    esi,[esi+0x0]
c00153cc:	31 c0                	xor    eax,eax
c00153ce:	eb 90                	jmp    c0015360 <switchToThread(ThreadControlBlock*)+0x30>
c00153d0:	5b                   	pop    ebx
c00153d1:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c00153db:	5e                   	pop    esi
c00153dc:	5f                   	pop    edi
c00153dd:	c3                   	ret    
c00153de:	66 90                	xchg   ax,ax

c00153e0 <Process::addArgs(char**)>:
c00153e0:	57                   	push   edi
c00153e1:	56                   	push   esi
c00153e2:	53                   	push   ebx
c00153e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00153e7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00153eb:	85 f6                	test   esi,esi
c00153ed:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00153f7:	74 4f                	je     c0015448 <Process::addArgs(char**)+0x68>
c00153f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00153fb:	85 c0                	test   eax,eax
c00153fd:	74 49                	je     c0015448 <Process::addArgs(char**)+0x68>
c00153ff:	31 db                	xor    ebx,ebx
c0015401:	8d 76 00             	lea    esi,[esi+0x0]
c0015404:	83 ec 0c             	sub    esp,0xc
c0015407:	50                   	push   eax
c0015408:	e8 73 b1 fe ff       	call   c0000580 <strlen>
c001540d:	83 c0 01             	add    eax,0x1
c0015410:	89 04 24             	mov    DWORD PTR [esp],eax
c0015413:	e8 bb 26 ff ff       	call   c0007ad3 <malloc>
c0015418:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c001541f:	5a                   	pop    edx
c0015420:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015423:	83 c3 01             	add    ebx,0x1
c0015426:	59                   	pop    ecx
c0015427:	52                   	push   edx
c0015428:	50                   	push   eax
c0015429:	e8 22 b2 fe ff       	call   c0000650 <strcpy>
c001542e:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015434:	83 c4 10             	add    esp,0x10
c0015437:	83 c1 01             	add    ecx,0x1
c001543a:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015440:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015443:	85 c0                	test   eax,eax
c0015445:	75 bd                	jne    c0015404 <Process::addArgs(char**)+0x24>
c0015447:	90                   	nop
c0015448:	5b                   	pop    ebx
c0015449:	5e                   	pop    esi
c001544a:	5f                   	pop    edi
c001544b:	c3                   	ret    

c001544c <Process::Process(char const*, Process*, char**)>:
c001544c:	56                   	push   esi
c001544d:	53                   	push   ebx
c001544e:	83 ec 14             	sub    esp,0x14
c0015451:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015455:	05 0c 02 00 00       	add    eax,0x20c
c001545a:	bb 07 00 00 00       	mov    ebx,0x7
c001545f:	89 c6                	mov    esi,eax
c0015461:	8d 76 00             	lea    esi,[esi+0x0]
c0015464:	85 db                	test   ebx,ebx
c0015466:	78 14                	js     c001547c <Process::Process(char const*, Process*, char**)+0x30>
c0015468:	83 ec 0c             	sub    esp,0xc
c001546b:	56                   	push   esi
c001546c:	e8 27 a6 00 00       	call   c001fa98 <ThreadControlBlock::ThreadControlBlock()>
c0015471:	83 c4 10             	add    esp,0x10
c0015474:	83 c6 5f             	add    esi,0x5f
c0015477:	83 eb 01             	sub    ebx,0x1
c001547a:	eb e8                	jmp    c0015464 <Process::Process(char const*, Process*, char**)+0x18>
c001547c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015480:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001548b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015492:	83 ec 0c             	sub    esp,0xc
c0015495:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015499:	e8 1c bb ff ff       	call   c0010fba <KeNewProcessEnv(Process*)>
c001549e:	83 c4 10             	add    esp,0x10
c00154a1:	89 c2                	mov    edx,eax
c00154a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154a7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00154ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154b1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00154ba:	a1 40 34 02 c0       	mov    eax,ds:0xc0023440
c00154bf:	8d 50 01             	lea    edx,[eax+0x1]
c00154c2:	89 15 40 34 02 c0    	mov    DWORD PTR ds:0xc0023440,edx
c00154c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154cc:	89 02                	mov    DWORD PTR [edx],eax
c00154ce:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00154d6:	83 ec 0c             	sub    esp,0xc
c00154d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154dd:	e8 f1 25 ff ff       	call   c0007ad3 <malloc>
c00154e2:	83 c4 10             	add    esp,0x10
c00154e5:	89 c3                	mov    ebx,eax
c00154e7:	83 ec 08             	sub    esp,0x8
c00154ea:	6a 00                	push   0x0
c00154ec:	53                   	push   ebx
c00154ed:	e8 60 4b ff ff       	call   c000a052 <VAS::VAS(bool)>
c00154f2:	83 c4 10             	add    esp,0x10
c00154f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154f9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00154ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015503:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001550d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015511:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015515:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001551b:	e8 be c0 ff ff       	call   c00115de <KeInitSignals()>
c0015520:	89 c2                	mov    edx,eax
c0015522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015526:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001552c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015530:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015536:	85 c0                	test   eax,eax
c0015538:	74 42                	je     c001557c <Process::Process(char const*, Process*, char**)+0x130>
c001553a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001553e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015544:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001554a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001554e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015558:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001555e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015568:	05 0c 01 00 00       	add    eax,0x10c
c001556d:	83 ec 08             	sub    esp,0x8
c0015570:	52                   	push   edx
c0015571:	50                   	push   eax
c0015572:	e8 d9 b0 fe ff       	call   c0000650 <strcpy>
c0015577:	83 c4 10             	add    esp,0x10
c001557a:	eb 64                	jmp    c00155e0 <Process::Process(char const*, Process*, char**)+0x194>
c001557c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015584:	83 ec 0c             	sub    esp,0xc
c0015587:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001558b:	e8 43 25 ff ff       	call   c0007ad3 <malloc>
c0015590:	83 c4 10             	add    esp,0x10
c0015593:	89 c3                	mov    ebx,eax
c0015595:	83 ec 08             	sub    esp,0x8
c0015598:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001559c:	53                   	push   ebx
c001559d:	e8 ca 36 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c00155a2:	83 c4 10             	add    esp,0x10
c00155a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155a9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00155af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00155b9:	83 ec 0c             	sub    esp,0xc
c00155bc:	50                   	push   eax
c00155bd:	e8 58 2f ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c9:	05 0c 01 00 00       	add    eax,0x10c
c00155ce:	83 ec 08             	sub    esp,0x8
c00155d1:	68 41 22 02 c0       	push   0xc0022241
c00155d6:	50                   	push   eax
c00155d7:	e8 74 b0 fe ff       	call   c0000650 <strcpy>
c00155dc:	83 c4 10             	add    esp,0x10
c00155df:	90                   	nop
c00155e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155e4:	83 c0 0c             	add    eax,0xc
c00155e7:	83 ec 08             	sub    esp,0x8
c00155ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155ee:	50                   	push   eax
c00155ef:	e8 5c b0 fe ff       	call   c0000650 <strcpy>
c00155f4:	83 c4 10             	add    esp,0x10
c00155f7:	83 ec 08             	sub    esp,0x8
c00155fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00155fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015602:	e8 d9 fd ff ff       	call   c00153e0 <Process::addArgs(char**)>
c0015607:	83 c4 10             	add    esp,0x10
c001560a:	83 ec 08             	sub    esp,0x8
c001560d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015611:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015615:	e8 3f ed ff ff       	call   c0014359 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001561a:	83 c4 10             	add    esp,0x10
c001561d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015621:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015625:	83 f0 01             	xor    eax,0x1
c0015628:	88 c2                	mov    dl,al
c001562a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001562e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015634:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015639:	83 ec 04             	sub    esp,0x4
c001563c:	50                   	push   eax
c001563d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015641:	68 98 22 02 c0       	push   0xc0022298
c0015646:	e8 bf 52 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001564b:	83 c4 10             	add    esp,0x10
c001564e:	90                   	nop
c001564f:	83 c4 14             	add    esp,0x14
c0015652:	5b                   	pop    ebx
c0015653:	5e                   	pop    esi
c0015654:	c3                   	ret    
c0015655:	90                   	nop
c0015656:	66 90                	xchg   ax,ax

c0015658 <Process::Process(bool, char const*, Process*, char**)>:
c0015658:	56                   	push   esi
c0015659:	53                   	push   ebx
c001565a:	83 ec 24             	sub    esp,0x24
c001565d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015661:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015669:	05 0c 02 00 00       	add    eax,0x20c
c001566e:	bb 07 00 00 00       	mov    ebx,0x7
c0015673:	89 c6                	mov    esi,eax
c0015675:	8d 76 00             	lea    esi,[esi+0x0]
c0015678:	85 db                	test   ebx,ebx
c001567a:	78 14                	js     c0015690 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001567c:	83 ec 0c             	sub    esp,0xc
c001567f:	56                   	push   esi
c0015680:	e8 13 a4 00 00       	call   c001fa98 <ThreadControlBlock::ThreadControlBlock()>
c0015685:	83 c4 10             	add    esp,0x10
c0015688:	83 c6 5f             	add    esi,0x5f
c001568b:	83 eb 01             	sub    ebx,0x1
c001568e:	eb e8                	jmp    c0015678 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015690:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015694:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001569b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001569f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00156a6:	83 ec 0c             	sub    esp,0xc
c00156a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00156ad:	e8 08 b9 ff ff       	call   c0010fba <KeNewProcessEnv(Process*)>
c00156b2:	83 c4 10             	add    esp,0x10
c00156b5:	89 c2                	mov    edx,eax
c00156b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156bb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00156c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156c5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00156ce:	a1 40 34 02 c0       	mov    eax,ds:0xc0023440
c00156d3:	8d 50 01             	lea    edx,[eax+0x1]
c00156d6:	89 15 40 34 02 c0    	mov    DWORD PTR ds:0xc0023440,edx
c00156dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00156e0:	89 02                	mov    DWORD PTR [edx],eax
c00156e2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00156ea:	83 ec 0c             	sub    esp,0xc
c00156ed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00156f1:	e8 dd 23 ff ff       	call   c0007ad3 <malloc>
c00156f6:	83 c4 10             	add    esp,0x10
c00156f9:	89 c3                	mov    ebx,eax
c00156fb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015700:	83 ec 08             	sub    esp,0x8
c0015703:	50                   	push   eax
c0015704:	53                   	push   ebx
c0015705:	e8 48 49 ff ff       	call   c000a052 <VAS::VAS(bool)>
c001570a:	83 c4 10             	add    esp,0x10
c001570d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015711:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015717:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001571b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015725:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015729:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001572d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015733:	e8 a6 be ff ff       	call   c00115de <KeInitSignals()>
c0015738:	89 c2                	mov    edx,eax
c001573a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001573e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015744:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015748:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001574e:	85 c0                	test   eax,eax
c0015750:	74 42                	je     c0015794 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015752:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015756:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001575c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015762:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015766:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001576c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015770:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015776:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001577c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015780:	05 0c 01 00 00       	add    eax,0x10c
c0015785:	83 ec 08             	sub    esp,0x8
c0015788:	52                   	push   edx
c0015789:	50                   	push   eax
c001578a:	e8 c1 ae fe ff       	call   c0000650 <strcpy>
c001578f:	83 c4 10             	add    esp,0x10
c0015792:	eb 64                	jmp    c00157f8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015794:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c001579c:	83 ec 0c             	sub    esp,0xc
c001579f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00157a3:	e8 2b 23 ff ff       	call   c0007ad3 <malloc>
c00157a8:	83 c4 10             	add    esp,0x10
c00157ab:	89 c3                	mov    ebx,eax
c00157ad:	83 ec 08             	sub    esp,0x8
c00157b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00157b4:	53                   	push   ebx
c00157b5:	e8 b2 34 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c00157ba:	83 c4 10             	add    esp,0x10
c00157bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157c1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00157c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00157d1:	83 ec 0c             	sub    esp,0xc
c00157d4:	50                   	push   eax
c00157d5:	e8 40 2d ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00157da:	83 c4 10             	add    esp,0x10
c00157dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157e1:	05 0c 01 00 00       	add    eax,0x10c
c00157e6:	83 ec 08             	sub    esp,0x8
c00157e9:	68 41 22 02 c0       	push   0xc0022241
c00157ee:	50                   	push   eax
c00157ef:	e8 5c ae fe ff       	call   c0000650 <strcpy>
c00157f4:	83 c4 10             	add    esp,0x10
c00157f7:	90                   	nop
c00157f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157fc:	83 c0 0c             	add    eax,0xc
c00157ff:	83 ec 08             	sub    esp,0x8
c0015802:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015806:	50                   	push   eax
c0015807:	e8 44 ae fe ff       	call   c0000650 <strcpy>
c001580c:	83 c4 10             	add    esp,0x10
c001580f:	83 ec 08             	sub    esp,0x8
c0015812:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015816:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001581a:	e8 c1 fb ff ff       	call   c00153e0 <Process::addArgs(char**)>
c001581f:	83 c4 10             	add    esp,0x10
c0015822:	90                   	nop
c0015823:	83 c4 24             	add    esp,0x24
c0015826:	5b                   	pop    ebx
c0015827:	5e                   	pop    esi
c0015828:	c3                   	ret    
c0015829:	8d 76 00             	lea    esi,[esi+0x0]

c001582c <taskStartupFunction>:
c001582c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015831:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015834:	c3                   	ret    
c0015835:	90                   	nop
c0015836:	66 90                	xchg   ax,ax

c0015838 <Semaphore::Semaphore(int)>:
c0015838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001583c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015840:	89 10                	mov    DWORD PTR [eax],edx
c0015842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015846:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001584d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015851:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001585c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015863:	90                   	nop
c0015864:	c3                   	ret    
c0015865:	90                   	nop
c0015866:	66 90                	xchg   ax,ax

c0015868 <Mutex::Mutex()>:
c0015868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001586c:	6a 01                	push   0x1
c001586e:	50                   	push   eax
c001586f:	e8 c4 ff ff ff       	call   c0015838 <Semaphore::Semaphore(int)>
c0015874:	83 c4 08             	add    esp,0x8
c0015877:	90                   	nop
c0015878:	c3                   	ret    
c0015879:	90                   	nop
c001587a:	66 90                	xchg   ax,ax

c001587c <Process::createThread(void (*)(void*), void*, int)>:
c001587c:	57                   	push   edi
c001587d:	31 c9                	xor    ecx,ecx
c001587f:	56                   	push   esi
c0015880:	53                   	push   ebx
c0015881:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015885:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001588c:	89 f2                	mov    edx,esi
c001588e:	66 90                	xchg   ax,ax
c0015890:	0f b7 c2             	movzx  eax,dx
c0015893:	80 e2 01             	and    dl,0x1
c0015896:	74 14                	je     c00158ac <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015898:	d1 f8                	sar    eax,1
c001589a:	83 c1 01             	add    ecx,0x1
c001589d:	83 f9 10             	cmp    ecx,0x10
c00158a0:	89 c2                	mov    edx,eax
c00158a2:	75 ec                	jne    c0015890 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00158a4:	31 db                	xor    ebx,ebx
c00158a6:	89 d8                	mov    eax,ebx
c00158a8:	5b                   	pop    ebx
c00158a9:	5e                   	pop    esi
c00158aa:	5f                   	pop    edi
c00158ab:	c3                   	ret    
c00158ac:	b8 01 00 00 00       	mov    eax,0x1
c00158b1:	d3 e0                	shl    eax,cl
c00158b3:	09 c6                	or     esi,eax
c00158b5:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00158bc:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00158bf:	c1 e0 05             	shl    eax,0x5
c00158c2:	29 c8                	sub    eax,ecx
c00158c4:	01 d8                	add    eax,ebx
c00158c6:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00158cd:	75 0d                	jne    c00158dc <Process::createThread(void (*)(void*), void*, int)+0x60>
c00158cf:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00158d9:	8d 76 00             	lea    esi,[esi+0x0]
c00158dc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00158e2:	8d 34 49             	lea    esi,[ecx+ecx*2]
c00158e5:	83 ec 0c             	sub    esp,0xc
c00158e8:	c1 e6 05             	shl    esi,0x5
c00158eb:	29 ce                	sub    esi,ecx
c00158ed:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00158f0:	8d 04 33             	lea    eax,[ebx+esi*1]
c00158f3:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00158f9:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c00158ff:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015905:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c001590c:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015912:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015916:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001591c:	89 ca                	mov    edx,ecx
c001591e:	f7 da                	neg    edx
c0015920:	c1 e2 15             	shl    edx,0x15
c0015923:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015929:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001592f:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015933:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001593d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015943:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015947:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001594d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015957:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015961:	68 00 01 00 00       	push   0x100
c0015966:	e8 68 21 ff ff       	call   c0007ad3 <malloc>
c001596b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001596e:	58                   	pop    eax
c001596f:	5a                   	pop    edx
c0015970:	53                   	push   ebx
c0015971:	68 e4 96 02 c0       	push   0xc00296e4
c0015976:	e8 b5 9e 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001597b:	83 c4 10             	add    esp,0x10
c001597e:	89 d8                	mov    eax,ebx
c0015980:	5b                   	pop    ebx
c0015981:	5e                   	pop    esi
c0015982:	5f                   	pop    edi
c0015983:	c3                   	ret    

c0015984 <Process::createUserThread()>:
c0015984:	83 ec 0c             	sub    esp,0xc
c0015987:	68 80 00 00 00       	push   0x80
c001598c:	6a 00                	push   0x0
c001598e:	68 d8 52 01 c0       	push   0xc00152d8
c0015993:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015997:	50                   	push   eax
c0015998:	e8 df fe ff ff       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c001599d:	83 c4 1c             	add    esp,0x1c
c00159a0:	c3                   	ret    
c00159a1:	8d 76 00             	lea    esi,[esi+0x0]

c00159a4 <setupMultitasking(void (*)())>:
c00159a4:	56                   	push   esi
c00159a5:	53                   	push   ebx
c00159a6:	83 ec 04             	sub    esp,0x4
c00159a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00159ad:	eb 11                	jmp    c00159c0 <setupMultitasking(void (*)())+0x1c>
c00159af:	90                   	nop
c00159b0:	83 ec 0c             	sub    esp,0xc
c00159b3:	68 e4 96 02 c0       	push   0xc00296e4
c00159b8:	e8 b7 9d 00 00       	call   c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00159bd:	83 c4 10             	add    esp,0x10
c00159c0:	83 ec 0c             	sub    esp,0xc
c00159c3:	68 e4 96 02 c0       	push   0xc00296e4
c00159c8:	e8 83 9d 00 00       	call   c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00159cd:	83 c4 10             	add    esp,0x10
c00159d0:	84 c0                	test   al,al
c00159d2:	74 dc                	je     c00159b0 <setupMultitasking(void (*)())+0xc>
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	68 24 07 00 00       	push   0x724
c00159dc:	e8 f2 20 ff ff       	call   c0007ad3 <malloc>
c00159e1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00159e8:	6a 00                	push   0x0
c00159ea:	68 45 22 02 c0       	push   0xc0022245
c00159ef:	6a 01                	push   0x1
c00159f1:	50                   	push   eax
c00159f2:	89 c3                	mov    ebx,eax
c00159f4:	e8 5f fc ff ff       	call   c0015658 <Process::Process(bool, char const*, Process*, char**)>
c00159f9:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00159ff:	83 c4 14             	add    esp,0x14
c0015a02:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015a08:	50                   	push   eax
c0015a09:	e8 61 2d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015a0e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015a15:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015a1f:	83 c8 01             	or     eax,0x1
c0015a22:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015a29:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a2f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015a32:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015a3c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015a42:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015a4c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015a52:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015a5c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015a66:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015a6c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015a72:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015a7c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015a86:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015a8d:	e8 41 20 ff ff       	call   c0007ad3 <malloc>
c0015a92:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015a98:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015a9e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015aa4:	5a                   	pop    edx
c0015aa5:	59                   	pop    ecx
c0015aa6:	68 41 22 02 c0       	push   0xc0022241
c0015aab:	50                   	push   eax
c0015aac:	e8 9f ab fe ff       	call   c0000650 <strcpy>
c0015ab1:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015ab8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015abc:	83 c4 14             	add    esp,0x14
c0015abf:	5b                   	pop    ebx
c0015ac0:	5e                   	pop    esi
c0015ac1:	e9 a3 a7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015ac6:	66 90                	xchg   ax,ax

c0015ac8 <schedule()>:
c0015ac8:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015ace:	85 d2                	test   edx,edx
c0015ad0:	74 0e                	je     c0015ae0 <schedule()+0x18>
c0015ad2:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015adc:	c3                   	ret    
c0015add:	8d 76 00             	lea    esi,[esi+0x0]
c0015ae0:	53                   	push   ebx
c0015ae1:	83 ec 14             	sub    esp,0x14
c0015ae4:	68 e4 96 02 c0       	push   0xc00296e4
c0015ae9:	e8 62 9c 00 00       	call   c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	84 c0                	test   al,al
c0015af3:	75 3f                	jne    c0015b34 <schedule()+0x6c>
c0015af5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015afa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015afd:	83 fa 01             	cmp    edx,0x1
c0015b00:	74 3a                	je     c0015b3c <schedule()+0x74>
c0015b02:	66 90                	xchg   ax,ax
c0015b04:	83 ec 0c             	sub    esp,0xc
c0015b07:	68 e4 96 02 c0       	push   0xc00296e4
c0015b0c:	e8 5b 9c 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b11:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015b18:	89 c3                	mov    ebx,eax
c0015b1a:	e8 55 9c 00 00       	call   c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b1f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015b26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b29:	e8 02 f8 ff ff       	call   c0015330 <switchToThread(ThreadControlBlock*)>
c0015b2e:	83 c4 10             	add    esp,0x10
c0015b31:	8d 76 00             	lea    esi,[esi+0x0]
c0015b34:	83 c4 08             	add    esp,0x8
c0015b37:	5b                   	pop    ebx
c0015b38:	c3                   	ret    
c0015b39:	8d 76 00             	lea    esi,[esi+0x0]
c0015b3c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015b43:	83 ec 08             	sub    esp,0x8
c0015b46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b4b:	50                   	push   eax
c0015b4c:	68 e4 96 02 c0       	push   0xc00296e4
c0015b51:	e8 da 9c 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b56:	83 c4 10             	add    esp,0x10
c0015b59:	eb a9                	jmp    c0015b04 <schedule()+0x3c>
c0015b5b:	90                   	nop

c0015b5c <Semaphore::tryAcquire()>:
c0015b5c:	53                   	push   ebx
c0015b5d:	83 ec 08             	sub    esp,0x8
c0015b60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b64:	fa                   	cli    
c0015b65:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015b6b:	8d 42 01             	lea    eax,[edx+0x1]
c0015b6e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015b73:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015b78:	8d 58 01             	lea    ebx,[eax+0x1]
c0015b7b:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015b81:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015b84:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015b86:	7c 2c                	jl     c0015bb4 <Semaphore::tryAcquire()+0x58>
c0015b88:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015b8d:	85 c0                	test   eax,eax
c0015b8f:	75 0b                	jne    c0015b9c <Semaphore::tryAcquire()+0x40>
c0015b91:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015b96:	85 c0                	test   eax,eax
c0015b98:	75 5a                	jne    c0015bf4 <Semaphore::tryAcquire()+0x98>
c0015b9a:	66 90                	xchg   ax,ax
c0015b9c:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015ba2:	31 c0                	xor    eax,eax
c0015ba4:	85 d2                	test   edx,edx
c0015ba6:	75 04                	jne    c0015bac <Semaphore::tryAcquire()+0x50>
c0015ba8:	fb                   	sti    
c0015ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bac:	83 c4 08             	add    esp,0x8
c0015baf:	5b                   	pop    ebx
c0015bb0:	c3                   	ret    
c0015bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0015bb4:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015bb9:	83 c3 01             	add    ebx,0x1
c0015bbc:	85 c0                	test   eax,eax
c0015bbe:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015bc1:	75 21                	jne    c0015be4 <Semaphore::tryAcquire()+0x88>
c0015bc3:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015bc9:	85 c9                	test   ecx,ecx
c0015bcb:	74 17                	je     c0015be4 <Semaphore::tryAcquire()+0x88>
c0015bcd:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015bd7:	e8 ec fe ff ff       	call   c0015ac8 <schedule()>
c0015bdc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015be1:	8d 50 ff             	lea    edx,[eax-0x1]
c0015be4:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015bea:	85 d2                	test   edx,edx
c0015bec:	b0 01                	mov    al,0x1
c0015bee:	75 bc                	jne    c0015bac <Semaphore::tryAcquire()+0x50>
c0015bf0:	eb b6                	jmp    c0015ba8 <Semaphore::tryAcquire()+0x4c>
c0015bf2:	66 90                	xchg   ax,ax
c0015bf4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015bfe:	e8 c5 fe ff ff       	call   c0015ac8 <schedule()>
c0015c03:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c08:	8d 50 ff             	lea    edx,[eax-0x1]
c0015c0b:	31 c0                	xor    eax,eax
c0015c0d:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015c13:	85 d2                	test   edx,edx
c0015c15:	75 95                	jne    c0015bac <Semaphore::tryAcquire()+0x50>
c0015c17:	eb 8f                	jmp    c0015ba8 <Semaphore::tryAcquire()+0x4c>
c0015c19:	90                   	nop
c0015c1a:	66 90                	xchg   ax,ax

c0015c1c <Semaphore::assertLocked(char const*)>:
c0015c1c:	83 ec 0c             	sub    esp,0xc
c0015c1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c23:	fa                   	cli    
c0015c24:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015c2a:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015c2f:	83 c1 01             	add    ecx,0x1
c0015c32:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015c38:	8d 48 01             	lea    ecx,[eax+0x1]
c0015c3b:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015c41:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015c43:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015c46:	7c 28                	jl     c0015c70 <Semaphore::assertLocked(char const*)+0x54>
c0015c48:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015c4d:	85 c0                	test   eax,eax
c0015c4f:	75 0b                	jne    c0015c5c <Semaphore::assertLocked(char const*)+0x40>
c0015c51:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015c56:	85 c0                	test   eax,eax
c0015c58:	75 32                	jne    c0015c8c <Semaphore::assertLocked(char const*)+0x70>
c0015c5a:	66 90                	xchg   ax,ax
c0015c5c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c61:	83 e8 01             	sub    eax,0x1
c0015c64:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c69:	75 01                	jne    c0015c6c <Semaphore::assertLocked(char const*)+0x50>
c0015c6b:	fb                   	sti    
c0015c6c:	83 c4 0c             	add    esp,0xc
c0015c6f:	c3                   	ret    
c0015c70:	83 ec 0c             	sub    esp,0xc
c0015c73:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015c77:	52                   	push   edx
c0015c78:	e8 48 b5 ff ff       	call   c00111c5 <KePanic(char const*)>
c0015c7d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015c82:	83 c4 10             	add    esp,0x10
c0015c85:	83 e8 01             	sub    eax,0x1
c0015c88:	eb be                	jmp    c0015c48 <Semaphore::assertLocked(char const*)+0x2c>
c0015c8a:	66 90                	xchg   ax,ax
c0015c8c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015c96:	e8 2d fe ff ff       	call   c0015ac8 <schedule()>
c0015c9b:	eb bf                	jmp    c0015c5c <Semaphore::assertLocked(char const*)+0x40>
c0015c9d:	8d 76 00             	lea    esi,[esi+0x0]

c0015ca0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015ca0:	83 ec 0c             	sub    esp,0xc
c0015ca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ca8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015cac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015caf:	e8 14 fe ff ff       	call   c0015ac8 <schedule()>
c0015cb4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015cb9:	83 e8 01             	sub    eax,0x1
c0015cbc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015cc1:	75 01                	jne    c0015cc4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015cc3:	fb                   	sti    
c0015cc4:	83 c4 0c             	add    esp,0xc
c0015cc7:	c3                   	ret    

c0015cc8 <blockTask(TaskState)>:
c0015cc8:	83 ec 0c             	sub    esp,0xc
c0015ccb:	fa                   	cli    
c0015ccc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015cd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015cd5:	83 c0 01             	add    eax,0x1
c0015cd8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015cdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ce2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015ce5:	e8 de fd ff ff       	call   c0015ac8 <schedule()>
c0015cea:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015cef:	83 e8 01             	sub    eax,0x1
c0015cf2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015cf7:	75 03                	jne    c0015cfc <blockTask(TaskState)+0x34>
c0015cf9:	fb                   	sti    
c0015cfa:	66 90                	xchg   ax,ax
c0015cfc:	83 c4 0c             	add    esp,0xc
c0015cff:	c3                   	ret    

c0015d00 <waitTask(int, int*, int)>:
c0015d00:	83 ec 18             	sub    esp,0x18
c0015d03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015d0c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015d0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d18:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015d1b:	6a 07                	push   0x7
c0015d1d:	e8 a6 ff ff ff       	call   c0015cc8 <blockTask(TaskState)>
c0015d22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d27:	83 c4 10             	add    esp,0x10
c0015d2a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015d2d:	85 d2                	test   edx,edx
c0015d2f:	74 0b                	je     c0015d3c <waitTask(int, int*, int)+0x3c>
c0015d31:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015d34:	89 02                	mov    DWORD PTR [edx],eax
c0015d36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d3b:	90                   	nop
c0015d3c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015d3f:	83 c4 0c             	add    esp,0xc
c0015d42:	c3                   	ret    
c0015d43:	90                   	nop

c0015d44 <milliTenthSleepUntil(unsigned int)>:
c0015d44:	83 ec 0c             	sub    esp,0xc
c0015d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d4b:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015d51:	76 05                	jbe    c0015d58 <milliTenthSleepUntil(unsigned int)+0x14>
c0015d53:	90                   	nop
c0015d54:	83 c4 0c             	add    esp,0xc
c0015d57:	c3                   	ret    
c0015d58:	fa                   	cli    
c0015d59:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015d5f:	83 ec 08             	sub    esp,0x8
c0015d62:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015d68:	83 c2 01             	add    edx,0x1
c0015d6b:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d71:	83 c1 01             	add    ecx,0x1
c0015d74:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015d7a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015d80:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015d83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d88:	50                   	push   eax
c0015d89:	68 d8 96 02 c0       	push   0xc00296d8
c0015d8e:	e8 9d 9a 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d93:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015d9a:	e8 29 ff ff ff       	call   c0015cc8 <blockTask(TaskState)>
c0015d9f:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015da4:	83 c4 10             	add    esp,0x10
c0015da7:	83 e8 01             	sub    eax,0x1
c0015daa:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015daf:	85 c0                	test   eax,eax
c0015db1:	75 09                	jne    c0015dbc <milliTenthSleepUntil(unsigned int)+0x78>
c0015db3:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015db8:	85 c0                	test   eax,eax
c0015dba:	75 14                	jne    c0015dd0 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015dbc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015dc1:	83 e8 01             	sub    eax,0x1
c0015dc4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015dc9:	75 89                	jne    c0015d54 <milliTenthSleepUntil(unsigned int)+0x10>
c0015dcb:	fb                   	sti    
c0015dcc:	83 c4 0c             	add    esp,0xc
c0015dcf:	c3                   	ret    
c0015dd0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015dda:	e8 e9 fc ff ff       	call   c0015ac8 <schedule()>
c0015ddf:	eb db                	jmp    c0015dbc <milliTenthSleepUntil(unsigned int)+0x78>
c0015de1:	8d 76 00             	lea    esi,[esi+0x0]

c0015de4 <milliTenthSleep(unsigned int)>:
c0015de4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015de8:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015ded:	01 c2                	add    edx,eax
c0015def:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015df3:	e9 4c ff ff ff       	jmp    c0015d44 <milliTenthSleepUntil(unsigned int)>

c0015df8 <sleep(unsigned int)>:
c0015df8:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015e00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e04:	eb de                	jmp    c0015de4 <milliTenthSleep(unsigned int)>
c0015e06:	66 90                	xchg   ax,ax

c0015e08 <Semaphore::acquire()>:
c0015e08:	83 ec 0c             	sub    esp,0xc
c0015e0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e0f:	fa                   	cli    
c0015e10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e15:	83 c0 01             	add    eax,0x1
c0015e18:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e1d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e22:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e25:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015e2b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015e2e:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015e30:	7d 2e                	jge    c0015e60 <Semaphore::acquire()+0x58>
c0015e32:	83 c1 01             	add    ecx,0x1
c0015e35:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015e38:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015e3d:	85 c0                	test   eax,eax
c0015e3f:	75 0b                	jne    c0015e4c <Semaphore::acquire()+0x44>
c0015e41:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015e46:	85 c0                	test   eax,eax
c0015e48:	75 66                	jne    c0015eb0 <Semaphore::acquire()+0xa8>
c0015e4a:	66 90                	xchg   ax,ax
c0015e4c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e51:	83 e8 01             	sub    eax,0x1
c0015e54:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e59:	75 01                	jne    c0015e5c <Semaphore::acquire()+0x54>
c0015e5b:	fb                   	sti    
c0015e5c:	83 c4 0c             	add    esp,0xc
c0015e5f:	c3                   	ret    
c0015e60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e65:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015e6c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015e6f:	85 c9                	test   ecx,ecx
c0015e71:	74 51                	je     c0015ec4 <Semaphore::acquire()+0xbc>
c0015e73:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015e76:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e7c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015e7f:	90                   	nop
c0015e80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e85:	83 ec 0c             	sub    esp,0xc
c0015e88:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015e8b:	68 c4 22 02 c0       	push   0xc00222c4
c0015e90:	e8 75 4a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015e95:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015e9c:	e8 27 fe ff ff       	call   c0015cc8 <blockTask(TaskState)>
c0015ea1:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015ea6:	83 c4 10             	add    esp,0x10
c0015ea9:	83 e8 01             	sub    eax,0x1
c0015eac:	eb 8a                	jmp    c0015e38 <Semaphore::acquire()+0x30>
c0015eae:	66 90                	xchg   ax,ax
c0015eb0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015eba:	e8 09 fc ff ff       	call   c0015ac8 <schedule()>
c0015ebf:	eb 8b                	jmp    c0015e4c <Semaphore::acquire()+0x44>
c0015ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ec4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ec9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015ecc:	eb b2                	jmp    c0015e80 <Semaphore::acquire()+0x78>
c0015ece:	66 90                	xchg   ax,ax

c0015ed0 <taskReturned>:
c0015ed0:	83 ec 18             	sub    esp,0x18
c0015ed3:	68 e4 22 02 c0       	push   0xc00222e4
c0015ed8:	e8 e8 b2 ff ff       	call   c00111c5 <KePanic(char const*)>
c0015edd:	83 c4 10             	add    esp,0x10
c0015ee0:	83 ec 0c             	sub    esp,0xc
c0015ee3:	6a 02                	push   0x2
c0015ee5:	e8 de fd ff ff       	call   c0015cc8 <blockTask(TaskState)>
c0015eea:	fa                   	cli    
c0015eeb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ef0:	83 c0 01             	add    eax,0x1
c0015ef3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ef8:	e8 cb fb ff ff       	call   c0015ac8 <schedule()>
c0015efd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f02:	83 c4 10             	add    esp,0x10
c0015f05:	83 e8 01             	sub    eax,0x1
c0015f08:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f0d:	85 c0                	test   eax,eax
c0015f0f:	75 cf                	jne    c0015ee0 <taskReturned+0x10>
c0015f11:	fb                   	sti    
c0015f12:	eb cc                	jmp    c0015ee0 <taskReturned+0x10>

c0015f14 <Thr::processFromPID(int)>:
c0015f14:	57                   	push   edi
c0015f15:	56                   	push   esi
c0015f16:	53                   	push   ebx
c0015f17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f1b:	fa                   	cli    
c0015f1c:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015f22:	83 ec 0c             	sub    esp,0xc
c0015f25:	68 e4 96 02 c0       	push   0xc00296e4
c0015f2a:	83 c1 01             	add    ecx,0x1
c0015f2d:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015f33:	e8 34 98 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f38:	83 c4 10             	add    esp,0x10
c0015f3b:	89 c7                	mov    edi,eax
c0015f3d:	eb 15                	jmp    c0015f54 <Thr::processFromPID(int)+0x40>
c0015f3f:	90                   	nop
c0015f40:	83 ec 0c             	sub    esp,0xc
c0015f43:	68 e4 96 02 c0       	push   0xc00296e4
c0015f48:	e8 1f 98 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f4d:	83 c4 10             	add    esp,0x10
c0015f50:	39 f8                	cmp    eax,edi
c0015f52:	74 50                	je     c0015fa4 <Thr::processFromPID(int)+0x90>
c0015f54:	83 ec 0c             	sub    esp,0xc
c0015f57:	68 e4 96 02 c0       	push   0xc00296e4
c0015f5c:	e8 0b 98 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f61:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015f68:	89 c3                	mov    ebx,eax
c0015f6a:	e8 05 98 00 00       	call   c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f6f:	58                   	pop    eax
c0015f70:	5a                   	pop    edx
c0015f71:	53                   	push   ebx
c0015f72:	68 e4 96 02 c0       	push   0xc00296e4
c0015f77:	e8 b4 98 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f7c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f7f:	83 c4 10             	add    esp,0x10
c0015f82:	39 30                	cmp    DWORD PTR [eax],esi
c0015f84:	75 ba                	jne    c0015f40 <Thr::processFromPID(int)+0x2c>
c0015f86:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f8b:	83 e8 01             	sub    eax,0x1
c0015f8e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f93:	74 0b                	je     c0015fa0 <Thr::processFromPID(int)+0x8c>
c0015f95:	8d 76 00             	lea    esi,[esi+0x0]
c0015f98:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f9b:	90                   	nop
c0015f9c:	5b                   	pop    ebx
c0015f9d:	5e                   	pop    esi
c0015f9e:	5f                   	pop    edi
c0015f9f:	c3                   	ret    
c0015fa0:	fb                   	sti    
c0015fa1:	eb f5                	jmp    c0015f98 <Thr::processFromPID(int)+0x84>
c0015fa3:	90                   	nop
c0015fa4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fa9:	8d 50 ff             	lea    edx,[eax-0x1]
c0015fac:	31 c0                	xor    eax,eax
c0015fae:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015fb4:	85 d2                	test   edx,edx
c0015fb6:	75 e4                	jne    c0015f9c <Thr::processFromPID(int)+0x88>
c0015fb8:	fb                   	sti    
c0015fb9:	5b                   	pop    ebx
c0015fba:	5e                   	pop    esi
c0015fbb:	5f                   	pop    edi
c0015fbc:	c3                   	ret    
c0015fbd:	8d 76 00             	lea    esi,[esi+0x0]

c0015fc0 <unblockTask(ThreadControlBlock*)>:
c0015fc0:	53                   	push   ebx
c0015fc1:	83 ec 08             	sub    esp,0x8
c0015fc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fc8:	fa                   	cli    
c0015fc9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fce:	83 c0 01             	add    eax,0x1
c0015fd1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015fd6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015fd9:	85 c0                	test   eax,eax
c0015fdb:	74 67                	je     c0016044 <unblockTask(ThreadControlBlock*)+0x84>
c0015fdd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015fe0:	83 f8 01             	cmp    eax,0x1
c0015fe3:	74 37                	je     c001601c <unblockTask(ThreadControlBlock*)+0x5c>
c0015fe5:	83 ec 0c             	sub    esp,0xc
c0015fe8:	68 e4 96 02 c0       	push   0xc00296e4
c0015fed:	e8 7a 97 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ff2:	83 c4 10             	add    esp,0x10
c0015ff5:	85 c0                	test   eax,eax
c0015ff7:	75 1b                	jne    c0016014 <unblockTask(ThreadControlBlock*)+0x54>
c0015ff9:	eb 5d                	jmp    c0016058 <unblockTask(ThreadControlBlock*)+0x98>
c0015ffb:	90                   	nop
c0015ffc:	83 ec 08             	sub    esp,0x8
c0015fff:	50                   	push   eax
c0016000:	68 e4 96 02 c0       	push   0xc00296e4
c0016005:	e8 82 9a 00 00       	call   c001fa8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001600a:	83 c4 10             	add    esp,0x10
c001600d:	85 c0                	test   eax,eax
c001600f:	74 47                	je     c0016058 <unblockTask(ThreadControlBlock*)+0x98>
c0016011:	8d 76 00             	lea    esi,[esi+0x0]
c0016014:	39 c3                	cmp    ebx,eax
c0016016:	75 e4                	jne    c0015ffc <unblockTask(ThreadControlBlock*)+0x3c>
c0016018:	eb 12                	jmp    c001602c <unblockTask(ThreadControlBlock*)+0x6c>
c001601a:	66 90                	xchg   ax,ax
c001601c:	83 ec 0c             	sub    esp,0xc
c001601f:	68 63 22 02 c0       	push   0xc0022263
c0016024:	e8 e1 48 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016029:	83 c4 10             	add    esp,0x10
c001602c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016031:	83 e8 01             	sub    eax,0x1
c0016034:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016039:	75 01                	jne    c001603c <unblockTask(ThreadControlBlock*)+0x7c>
c001603b:	fb                   	sti    
c001603c:	83 c4 08             	add    esp,0x8
c001603f:	5b                   	pop    ebx
c0016040:	c3                   	ret    
c0016041:	8d 76 00             	lea    esi,[esi+0x0]
c0016044:	83 ec 0c             	sub    esp,0xc
c0016047:	68 4c 22 02 c0       	push   0xc002224c
c001604c:	e8 b9 48 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016051:	83 c4 10             	add    esp,0x10
c0016054:	eb d6                	jmp    c001602c <unblockTask(ThreadControlBlock*)+0x6c>
c0016056:	66 90                	xchg   ax,ax
c0016058:	83 ec 08             	sub    esp,0x8
c001605b:	53                   	push   ebx
c001605c:	68 e4 96 02 c0       	push   0xc00296e4
c0016061:	e8 ca 97 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016066:	83 c4 10             	add    esp,0x10
c0016069:	eb c1                	jmp    c001602c <unblockTask(ThreadControlBlock*)+0x6c>
c001606b:	90                   	nop

c001606c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001606c:	55                   	push   ebp
c001606d:	57                   	push   edi
c001606e:	56                   	push   esi
c001606f:	53                   	push   ebx
c0016070:	83 ec 1c             	sub    esp,0x1c
c0016073:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016077:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001607a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016080:	85 ed                	test   ebp,ebp
c0016082:	7e 28                	jle    c00160ac <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016084:	31 f6                	xor    esi,esi
c0016086:	66 90                	xchg   ax,ax
c0016088:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001608f:	83 ec 0c             	sub    esp,0xc
c0016092:	83 c6 01             	add    esi,0x1
c0016095:	57                   	push   edi
c0016096:	e8 48 1a ff ff       	call   c0007ae3 <free>
c001609b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001609e:	83 c4 10             	add    esp,0x10
c00160a1:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00160a7:	7f df                	jg     c0016088 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00160a9:	8d 76 00             	lea    esi,[esi+0x0]
c00160ac:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00160b6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00160bb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00160be:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00160c1:	d3 c0                	rol    eax,cl
c00160c3:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00160ca:	21 c8                	and    eax,ecx
c00160cc:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00160d3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00160d6:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00160de:	89 f7                	mov    edi,esi
c00160e0:	0f 85 72 01 00 00    	jne    c0016258 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00160e6:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00160ec:	85 ed                	test   ebp,ebp
c00160ee:	74 1c                	je     c001610c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00160f0:	83 ec 0c             	sub    esp,0xc
c00160f3:	55                   	push   ebp
c00160f4:	e8 dd ad ff ff       	call   c0010ed6 <EnvVarContainer::~EnvVarContainer()>
c00160f9:	59                   	pop    ecx
c00160fa:	5e                   	pop    esi
c00160fb:	6a 0c                	push   0xc
c00160fd:	55                   	push   ebp
c00160fe:	e8 09 47 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016103:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016106:	83 c4 10             	add    esp,0x10
c0016109:	89 f7                	mov    edi,esi
c001610b:	90                   	nop
c001610c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016112:	85 c0                	test   eax,eax
c0016114:	0f 84 b2 00 00 00    	je     c00161cc <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001611a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001611d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016121:	31 c9                	xor    ecx,ecx
c0016123:	eb 17                	jmp    c001613c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016125:	8d 76 00             	lea    esi,[esi+0x0]
c0016128:	83 c1 01             	add    ecx,0x1
c001612b:	83 f9 10             	cmp    ecx,0x10
c001612e:	0f 84 98 00 00 00    	je     c00161cc <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016134:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001613a:	66 90                	xchg   ax,ax
c001613c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016143:	d3 fa                	sar    edx,cl
c0016145:	80 e2 01             	and    dl,0x1
c0016148:	74 de                	je     c0016128 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001614a:	8d 14 49             	lea    edx,[ecx+ecx*2]
c001614d:	c1 e2 05             	shl    edx,0x5
c0016150:	29 ca                	sub    edx,ecx
c0016152:	01 d0                	add    eax,edx
c0016154:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001615a:	83 fd 07             	cmp    ebp,0x7
c001615d:	75 c9                	jne    c0016128 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001615f:	05 40 02 00 00       	add    eax,0x240
c0016164:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016167:	83 fd ff             	cmp    ebp,0xffffffff
c001616a:	0f 8c f0 00 00 00    	jl     c0016260 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016170:	0f 84 ae 01 00 00    	je     c0016324 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016176:	85 ed                	test   ebp,ebp
c0016178:	0f 84 92 01 00 00    	je     c0016310 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001617e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016180:	75 a6                	jne    c0016128 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016182:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016186:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001618c:	01 d0                	add    eax,edx
c001618e:	66 90                	xchg   ax,ax
c0016190:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016194:	83 ec 0c             	sub    esp,0xc
c0016197:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001619d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00161a6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00161ad:	50                   	push   eax
c00161ae:	e8 0d fe ff ff       	call   c0015fc0 <unblockTask(ThreadControlBlock*)>
c00161b3:	83 c4 10             	add    esp,0x10
c00161b6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00161b9:	89 f7                	mov    edi,esi
c00161bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161bf:	83 c1 01             	add    ecx,0x1
c00161c2:	83 f9 10             	cmp    ecx,0x10
c00161c5:	0f 85 69 ff ff ff    	jne    c0016134 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00161cb:	90                   	nop
c00161cc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00161d2:	85 c0                	test   eax,eax
c00161d4:	74 62                	je     c0016238 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00161d6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00161dc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00161e2:	74 54                	je     c0016238 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00161e4:	83 ec 0c             	sub    esp,0xc
c00161e7:	68 e4 96 02 c0       	push   0xc00296e4
c00161ec:	e8 7b 95 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161f1:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00161f8:	89 c7                	mov    edi,eax
c00161fa:	e8 51 95 00 00       	call   c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00161ff:	83 c4 10             	add    esp,0x10
c0016202:	84 c0                	test   al,al
c0016204:	0f 84 ce 00 00 00    	je     c00162d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001620a:	66 90                	xchg   ax,ax
c001620c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001620f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016215:	85 d2                	test   edx,edx
c0016217:	74 0f                	je     c0016228 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016219:	8b 02                	mov    eax,DWORD PTR [edx]
c001621b:	83 ec 0c             	sub    esp,0xc
c001621e:	52                   	push   edx
c001621f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016222:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016225:	83 c4 10             	add    esp,0x10
c0016228:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016232:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016235:	8d 76 00             	lea    esi,[esi+0x0]
c0016238:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001623e:	85 db                	test   ebx,ebx
c0016240:	74 16                	je     c0016258 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016242:	83 ec 0c             	sub    esp,0xc
c0016245:	53                   	push   ebx
c0016246:	e8 45 39 ff ff       	call   c0009b90 <VAS::~VAS()>
c001624b:	58                   	pop    eax
c001624c:	5a                   	pop    edx
c001624d:	6a 14                	push   0x14
c001624f:	53                   	push   ebx
c0016250:	e8 b7 45 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016255:	83 c4 10             	add    esp,0x10
c0016258:	83 c4 1c             	add    esp,0x1c
c001625b:	5b                   	pop    ebx
c001625c:	5e                   	pop    esi
c001625d:	5f                   	pop    edi
c001625e:	5d                   	pop    ebp
c001625f:	c3                   	ret    
c0016260:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016264:	83 ec 0c             	sub    esp,0xc
c0016267:	68 18 23 02 c0       	push   0xc0022318
c001626c:	e8 54 af ff ff       	call   c00111c5 <KePanic(char const*)>
c0016271:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016274:	83 c4 10             	add    esp,0x10
c0016277:	89 f7                	mov    edi,esi
c0016279:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001627d:	e9 a6 fe ff ff       	jmp    c0016128 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016282:	66 90                	xchg   ax,ax
c0016284:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001628a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016290:	75 1e                	jne    c00162b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016292:	83 ec 0c             	sub    esp,0xc
c0016295:	68 80 23 02 c0       	push   0xc0022380
c001629a:	e8 6b 46 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001629f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00162a6:	e8 1d fa ff ff       	call   c0015cc8 <blockTask(TaskState)>
c00162ab:	83 c4 10             	add    esp,0x10
c00162ae:	66 90                	xchg   ax,ax
c00162b0:	83 ec 08             	sub    esp,0x8
c00162b3:	56                   	push   esi
c00162b4:	68 e4 96 02 c0       	push   0xc00296e4
c00162b9:	e8 72 95 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00162be:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00162c5:	e8 a2 94 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162ca:	83 c4 10             	add    esp,0x10
c00162cd:	39 f8                	cmp    eax,edi
c00162cf:	0f 84 37 ff ff ff    	je     c001620c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00162d5:	8d 76 00             	lea    esi,[esi+0x0]
c00162d8:	83 ec 0c             	sub    esp,0xc
c00162db:	68 e4 96 02 c0       	push   0xc00296e4
c00162e0:	e8 87 94 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162e5:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00162ec:	89 c6                	mov    esi,eax
c00162ee:	e8 81 94 00 00       	call   c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00162f3:	83 c4 10             	add    esp,0x10
c00162f6:	39 f3                	cmp    ebx,esi
c00162f8:	74 b6                	je     c00162b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00162fa:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00162fd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016300:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016306:	75 a8                	jne    c00162b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016308:	e9 77 ff ff ff       	jmp    c0016284 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c001630d:	8d 76 00             	lea    esi,[esi+0x0]
c0016310:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016314:	83 ec 0c             	sub    esp,0xc
c0016317:	68 4c 23 02 c0       	push   0xc002234c
c001631c:	e9 4b ff ff ff       	jmp    c001626c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016321:	8d 76 00             	lea    esi,[esi+0x0]
c0016324:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016328:	8b 36                	mov    esi,DWORD PTR [esi]
c001632a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001632d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016330:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016336:	01 d7                	add    edi,edx
c0016338:	89 f8                	mov    eax,edi
c001633a:	e9 51 fe ff ff       	jmp    c0016190 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001633f:	90                   	nop

c0016340 <cleanerTaskFunction(void*)>:
c0016340:	53                   	push   ebx
c0016341:	83 ec 08             	sub    esp,0x8
c0016344:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016349:	83 e8 01             	sub    eax,0x1
c001634c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016351:	75 01                	jne    c0016354 <cleanerTaskFunction(void*)+0x14>
c0016353:	fb                   	sti    
c0016354:	fa                   	cli    
c0016355:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001635a:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016361:	8d 50 01             	lea    edx,[eax+0x1]
c0016364:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001636a:	0f 84 c4 00 00 00    	je     c0016434 <cleanerTaskFunction(void*)+0xf4>
c0016370:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016375:	85 c0                	test   eax,eax
c0016377:	75 03                	jne    c001637c <cleanerTaskFunction(void*)+0x3c>
c0016379:	fb                   	sti    
c001637a:	66 90                	xchg   ax,ax
c001637c:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c0016383:	fa                   	cli    
c0016384:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001638a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016390:	83 c2 01             	add    edx,0x1
c0016393:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016399:	83 c1 01             	add    ecx,0x1
c001639c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00163a2:	fa                   	cli    
c00163a3:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c00163a9:	83 c3 01             	add    ebx,0x1
c00163ac:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c00163b2:	eb 28                	jmp    c00163dc <cleanerTaskFunction(void*)+0x9c>
c00163b4:	83 ec 0c             	sub    esp,0xc
c00163b7:	68 cc 96 02 c0       	push   0xc00296cc
c00163bc:	e8 ab 93 00 00       	call   c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163c1:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c00163c8:	89 c3                	mov    ebx,eax
c00163ca:	e8 a5 93 00 00       	call   c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00163cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163d2:	e8 95 fc ff ff       	call   c001606c <cleanupTerminatedTask(ThreadControlBlock*)>
c00163d7:	83 c4 10             	add    esp,0x10
c00163da:	66 90                	xchg   ax,ax
c00163dc:	83 ec 0c             	sub    esp,0xc
c00163df:	68 cc 96 02 c0       	push   0xc00296cc
c00163e4:	e8 67 93 00 00       	call   c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163e9:	83 c4 10             	add    esp,0x10
c00163ec:	84 c0                	test   al,al
c00163ee:	74 c4                	je     c00163b4 <cleanerTaskFunction(void*)+0x74>
c00163f0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00163f5:	83 e8 01             	sub    eax,0x1
c00163f8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00163fd:	75 01                	jne    c0016400 <cleanerTaskFunction(void*)+0xc0>
c00163ff:	fb                   	sti    
c0016400:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016405:	83 e8 01             	sub    eax,0x1
c0016408:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001640d:	0f 85 31 ff ff ff    	jne    c0016344 <cleanerTaskFunction(void*)+0x4>
c0016413:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016418:	85 c0                	test   eax,eax
c001641a:	0f 84 24 ff ff ff    	je     c0016344 <cleanerTaskFunction(void*)+0x4>
c0016420:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001642a:	e8 99 f6 ff ff       	call   c0015ac8 <schedule()>
c001642f:	e9 10 ff ff ff       	jmp    c0016344 <cleanerTaskFunction(void*)+0x4>
c0016434:	83 ec 0c             	sub    esp,0xc
c0016437:	6a 02                	push   0x2
c0016439:	e8 62 f8 ff ff       	call   c0015ca0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001643e:	83 c4 10             	add    esp,0x10
c0016441:	e9 36 ff ff ff       	jmp    c001637c <cleanerTaskFunction(void*)+0x3c>
c0016446:	66 90                	xchg   ax,ax

c0016448 <terminateTask(int)>:
c0016448:	83 ec 14             	sub    esp,0x14
c001644b:	fa                   	cli    
c001644c:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016452:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016458:	83 c2 01             	add    edx,0x1
c001645b:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016461:	83 c1 01             	add    ecx,0x1
c0016464:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001646a:	fa                   	cli    
c001646b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016470:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016474:	83 c0 01             	add    eax,0x1
c0016477:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001647c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016481:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016484:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016489:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001648c:	50                   	push   eax
c001648d:	68 cc 96 02 c0       	push   0xc00296cc
c0016492:	e8 99 93 00 00       	call   c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016497:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001649c:	83 c4 10             	add    esp,0x10
c001649f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00164a6:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c00164ab:	85 c0                	test   eax,eax
c00164ad:	74 65                	je     c0016514 <terminateTask(int)+0xcc>
c00164af:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c00164b6:	83 ec 0c             	sub    esp,0xc
c00164b9:	50                   	push   eax
c00164ba:	e8 01 fb ff ff       	call   c0015fc0 <unblockTask(ThreadControlBlock*)>
c00164bf:	83 c4 10             	add    esp,0x10
c00164c2:	66 90                	xchg   ax,ax
c00164c4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164c9:	83 e8 01             	sub    eax,0x1
c00164cc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00164d1:	75 01                	jne    c00164d4 <terminateTask(int)+0x8c>
c00164d3:	fb                   	sti    
c00164d4:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00164d9:	83 e8 01             	sub    eax,0x1
c00164dc:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00164e1:	75 09                	jne    c00164ec <terminateTask(int)+0xa4>
c00164e3:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c00164ea:	75 3c                	jne    c0016528 <terminateTask(int)+0xe0>
c00164ec:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164f1:	83 e8 01             	sub    eax,0x1
c00164f4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00164f9:	75 01                	jne    c00164fc <terminateTask(int)+0xb4>
c00164fb:	fb                   	sti    
c00164fc:	fa                   	cli    
c00164fd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016502:	83 c0 01             	add    eax,0x1
c0016505:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001650a:	66 90                	xchg   ax,ax
c001650c:	e8 b7 f5 ff ff       	call   c0015ac8 <schedule()>
c0016511:	eb d9                	jmp    c00164ec <terminateTask(int)+0xa4>
c0016513:	90                   	nop
c0016514:	83 ec 0c             	sub    esp,0xc
c0016517:	68 7a 22 02 c0       	push   0xc002227a
c001651c:	e8 e9 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016521:	83 c4 10             	add    esp,0x10
c0016524:	eb 9e                	jmp    c00164c4 <terminateTask(int)+0x7c>
c0016526:	66 90                	xchg   ax,ax
c0016528:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016532:	eb d8                	jmp    c001650c <terminateTask(int)+0xc4>

c0016534 <Thr::terminateFromIRQ(int)>:
c0016534:	83 ec 18             	sub    esp,0x18
c0016537:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001653b:	50                   	push   eax
c001653c:	e8 07 ff ff ff       	call   c0016448 <terminateTask(int)>
c0016541:	90                   	nop
c0016542:	66 90                	xchg   ax,ax

c0016544 <Semaphore::release()>:
c0016544:	83 ec 0c             	sub    esp,0xc
c0016547:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001654b:	fa                   	cli    
c001654c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016551:	83 c0 01             	add    eax,0x1
c0016554:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016559:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001655e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016561:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016567:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001656a:	85 c9                	test   ecx,ecx
c001656c:	74 42                	je     c00165b0 <Semaphore::release()+0x6c>
c001656e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016571:	83 ec 0c             	sub    esp,0xc
c0016574:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016577:	51                   	push   ecx
c0016578:	e8 43 fa ff ff       	call   c0015fc0 <unblockTask(ThreadControlBlock*)>
c001657d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016582:	83 c4 10             	add    esp,0x10
c0016585:	83 e8 01             	sub    eax,0x1
c0016588:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001658d:	85 c0                	test   eax,eax
c001658f:	75 0b                	jne    c001659c <Semaphore::release()+0x58>
c0016591:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016596:	85 c0                	test   eax,eax
c0016598:	75 22                	jne    c00165bc <Semaphore::release()+0x78>
c001659a:	66 90                	xchg   ax,ax
c001659c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165a1:	83 e8 01             	sub    eax,0x1
c00165a4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165a9:	75 01                	jne    c00165ac <Semaphore::release()+0x68>
c00165ab:	fb                   	sti    
c00165ac:	83 c4 0c             	add    esp,0xc
c00165af:	c3                   	ret    
c00165b0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00165b3:	83 e9 01             	sub    ecx,0x1
c00165b6:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00165b9:	eb cd                	jmp    c0016588 <Semaphore::release()+0x44>
c00165bb:	90                   	nop
c00165bc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00165c6:	e8 fd f4 ff ff       	call   c0015ac8 <schedule()>
c00165cb:	eb cf                	jmp    c001659c <Semaphore::release()+0x58>
c00165cd:	8d 76 00             	lea    esi,[esi+0x0]

c00165d0 <__static_initialization_and_destruction_0(int, int)>:
c00165d0:	83 ec 0c             	sub    esp,0xc
c00165d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00165d8:	0f 85 8e 00 00 00    	jne    c001666c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00165de:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00165e6:	0f 85 80 00 00 00    	jne    c001666c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00165ec:	83 ec 0c             	sub    esp,0xc
c00165ef:	68 e4 96 02 c0       	push   0xc00296e4
c00165f4:	e8 eb 94 00 00       	call   c001fae4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00165f9:	83 c4 10             	add    esp,0x10
c00165fc:	83 ec 04             	sub    esp,0x4
c00165ff:	68 50 2f 02 c0       	push   0xc0022f50
c0016604:	68 e4 96 02 c0       	push   0xc00296e4
c0016609:	68 94 fa 01 c0       	push   0xc001fa94
c001660e:	e8 a9 41 ff ff       	call   c000a7bc <__cxa_atexit>
c0016613:	83 c4 10             	add    esp,0x10
c0016616:	83 ec 0c             	sub    esp,0xc
c0016619:	68 d8 96 02 c0       	push   0xc00296d8
c001661e:	e8 c1 94 00 00       	call   c001fae4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016623:	83 c4 10             	add    esp,0x10
c0016626:	83 ec 04             	sub    esp,0x4
c0016629:	68 50 2f 02 c0       	push   0xc0022f50
c001662e:	68 d8 96 02 c0       	push   0xc00296d8
c0016633:	68 94 fa 01 c0       	push   0xc001fa94
c0016638:	e8 7f 41 ff ff       	call   c000a7bc <__cxa_atexit>
c001663d:	83 c4 10             	add    esp,0x10
c0016640:	83 ec 0c             	sub    esp,0xc
c0016643:	68 cc 96 02 c0       	push   0xc00296cc
c0016648:	e8 97 94 00 00       	call   c001fae4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001664d:	83 c4 10             	add    esp,0x10
c0016650:	83 ec 04             	sub    esp,0x4
c0016653:	68 50 2f 02 c0       	push   0xc0022f50
c0016658:	68 cc 96 02 c0       	push   0xc00296cc
c001665d:	68 94 fa 01 c0       	push   0xc001fa94
c0016662:	e8 55 41 ff ff       	call   c000a7bc <__cxa_atexit>
c0016667:	83 c4 10             	add    esp,0x10
c001666a:	66 90                	xchg   ax,ax
c001666c:	90                   	nop
c001666d:	83 c4 0c             	add    esp,0xc
c0016670:	c3                   	ret    
c0016671:	8d 76 00             	lea    esi,[esi+0x0]

c0016674 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016674:	83 ec 0c             	sub    esp,0xc
c0016677:	83 ec 08             	sub    esp,0x8
c001667a:	68 ff ff 00 00       	push   0xffff
c001667f:	6a 01                	push   0x1
c0016681:	e8 4a ff ff ff       	call   c00165d0 <__static_initialization_and_destruction_0(int, int)>
c0016686:	83 c4 10             	add    esp,0x10
c0016689:	83 c4 0c             	add    esp,0xc
c001668c:	c3                   	ret    

c001668d <Vm::inbv(unsigned short)>:
c001668d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016691:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016696:	75 06                	jne    c001669e <Vm::inbv(unsigned short)+0x11>
c0016698:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c001669d:	c3                   	ret    
c001669e:	ec                   	in     al,dx
c001669f:	c3                   	ret    

c00166a0 <Vm::outbv(unsigned short, unsigned char)>:
c00166a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00166a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00166a8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00166ad:	75 25                	jne    c00166d4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00166af:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00166b5:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c00166bb:	8d 51 01             	lea    edx,[ecx+0x1]
c00166be:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c00166c4:	83 fa 20             	cmp    edx,0x20
c00166c7:	75 0c                	jne    c00166d5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00166c9:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c00166d3:	c3                   	ret    
c00166d4:	ee                   	out    dx,al
c00166d5:	c3                   	ret    

c00166d6 <Vm::realToLinear(unsigned short, unsigned short)>:
c00166d6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00166db:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00166e0:	c1 e0 04             	shl    eax,0x4
c00166e3:	01 d0                	add    eax,edx
c00166e5:	c3                   	ret    

c00166e6 <Vm::getSegment(unsigned int)>:
c00166e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166ea:	c1 e8 10             	shr    eax,0x10
c00166ed:	c3                   	ret    

c00166ee <Vm::getOffset(unsigned int)>:
c00166ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166f2:	c3                   	ret    

c00166f3 <Vm::mainloop2()>:
c00166f3:	83 ec 18             	sub    esp,0x18
c00166f6:	fa                   	cli    
c00166f7:	6a 02                	push   0x2
c00166f9:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00166ff:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c0016706:	e8 95 f5 ff ff       	call   c0015ca0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001670b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016710:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016714:	52                   	push   edx
c0016715:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016719:	52                   	push   edx
c001671a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001671e:	52                   	push   edx
c001671f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016723:	50                   	push   eax
c0016724:	e8 e6 9a fe ff       	call   c000020f <goToVM86>
c0016729:	83 c4 2c             	add    esp,0x2c
c001672c:	c3                   	ret    

c001672d <Vm::mainVm8086Loop(void*)>:
c001672d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016732:	48                   	dec    eax
c0016733:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016738:	75 01                	jne    c001673b <Vm::mainVm8086Loop(void*)+0xe>
c001673a:	fb                   	sti    
c001673b:	eb b6                	jmp    c00166f3 <Vm::mainloop2()>

c001673d <Vm::mainloop3(unsigned long)>:
c001673d:	83 ec 18             	sub    esp,0x18
c0016740:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016744:	fa                   	cli    
c0016745:	6a 02                	push   0x2
c0016747:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001674d:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c0016754:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016759:	e8 42 f5 ff ff       	call   c0015ca0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001675e:	83 c4 1c             	add    esp,0x1c
c0016761:	eb 90                	jmp    c00166f3 <Vm::mainloop2()>

c0016763 <Vm::initialise8086()>:
c0016763:	83 ec 0c             	sub    esp,0xc
c0016766:	68 80 00 00 00       	push   0x80
c001676b:	6a 00                	push   0x0
c001676d:	68 2d 67 01 c0       	push   0xc001672d
c0016772:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016778:	e8 ff f0 ff ff       	call   c001587c <Process::createThread(void (*)(void*), void*, int)>
c001677d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016784:	68 00 01 00 00       	push   0x100
c0016789:	6a 00                	push   0x0
c001678b:	6a 00                	push   0x0
c001678d:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c0016792:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0016797:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001679d:	e8 66 37 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00167a2:	83 c4 2c             	add    esp,0x2c
c00167a5:	c3                   	ret    

c00167a6 <Vm::finish8086()>:
c00167a6:	53                   	push   ebx
c00167a7:	83 ec 08             	sub    esp,0x8
c00167aa:	fa                   	cli    
c00167ab:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00167b1:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c00167b8:	75 15                	jne    c00167cf <Vm::finish8086()+0x29>
c00167ba:	e8 09 f3 ff ff       	call   c0015ac8 <schedule()>
c00167bf:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167c4:	48                   	dec    eax
c00167c5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00167ca:	75 de                	jne    c00167aa <Vm::finish8086()+0x4>
c00167cc:	fb                   	sti    
c00167cd:	eb db                	jmp    c00167aa <Vm::finish8086()+0x4>
c00167cf:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c00167d6:	83 ec 0c             	sub    esp,0xc
c00167d9:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c00167df:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00167e5:	e8 d6 f7 ff ff       	call   c0015fc0 <unblockTask(ThreadControlBlock*)>
c00167ea:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167ef:	83 c4 10             	add    esp,0x10
c00167f2:	8d 50 ff             	lea    edx,[eax-0x1]
c00167f5:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00167fb:	85 d2                	test   edx,edx
c00167fd:	75 01                	jne    c0016800 <Vm::finish8086()+0x5a>
c00167ff:	fb                   	sti    
c0016800:	83 c4 08             	add    esp,0x8
c0016803:	89 d8                	mov    eax,ebx
c0016805:	5b                   	pop    ebx
c0016806:	c3                   	ret    

c0016807 <Vm::getOutput8086(unsigned char*)>:
c0016807:	57                   	push   edi
c0016808:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c001680e:	56                   	push   esi
c001680f:	be 40 97 02 c0       	mov    esi,0xc0029740
c0016814:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016818:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001681a:	5e                   	pop    esi
c001681b:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c0016820:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c001682a:	5f                   	pop    edi
c001682b:	c3                   	ret    

c001682c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001682c:	55                   	push   ebp
c001682d:	57                   	push   edi
c001682e:	56                   	push   esi
c001682f:	53                   	push   ebx
c0016830:	83 ec 0c             	sub    esp,0xc
c0016833:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016837:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001683b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001683f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016843:	fa                   	cli    
c0016844:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001684a:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016851:	75 15                	jne    c0016868 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016853:	e8 70 f2 ff ff       	call   c0015ac8 <schedule()>
c0016858:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001685d:	48                   	dec    eax
c001685e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016863:	75 de                	jne    c0016843 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016865:	fb                   	sti    
c0016866:	eb db                	jmp    c0016843 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016868:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016872:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016877:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001687b:	0f b7 ff             	movzx  edi,di
c001687e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016882:	0f b7 f6             	movzx  esi,si
c0016885:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016889:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001688d:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016891:	50                   	push   eax
c0016892:	6a 20                	push   0x20
c0016894:	6a 00                	push   0x0
c0016896:	68 40 97 02 c0       	push   0xc0029740
c001689b:	e8 50 9c fe ff       	call   c00004f0 <memset>
c00168a0:	5a                   	pop    edx
c00168a1:	59                   	pop    ecx
c00168a2:	57                   	push   edi
c00168a3:	56                   	push   esi
c00168a4:	e8 2d fe ff ff       	call   c00166d6 <Vm::realToLinear(unsigned short, unsigned short)>
c00168a9:	83 c4 10             	add    esp,0x10
c00168ac:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168b0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00168b4:	89 c7                	mov    edi,eax
c00168b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168b8:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c00168bf:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168c4:	48                   	dec    eax
c00168c5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00168ca:	75 01                	jne    c00168cd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00168cc:	fb                   	sti    
c00168cd:	83 ec 0c             	sub    esp,0xc
c00168d0:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00168d6:	e8 e5 f6 ff ff       	call   c0015fc0 <unblockTask(ThreadControlBlock*)>
c00168db:	83 c4 1c             	add    esp,0x1c
c00168de:	b0 01                	mov    al,0x1
c00168e0:	5b                   	pop    ebx
c00168e1:	5e                   	pop    esi
c00168e2:	5f                   	pop    edi
c00168e3:	5d                   	pop    ebp
c00168e4:	c3                   	ret    

c00168e5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00168e5:	55                   	push   ebp
c00168e6:	57                   	push   edi
c00168e7:	56                   	push   esi
c00168e8:	53                   	push   ebx
c00168e9:	83 ec 34             	sub    esp,0x34
c00168ec:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00168f0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00168f4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00168f8:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c00168fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016900:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016904:	68 a8 23 02 c0       	push   0xc00223a8
c0016909:	e8 fc 3f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001690e:	83 c4 10             	add    esp,0x10
c0016911:	fa                   	cli    
c0016912:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016918:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001691e:	84 db                	test   bl,bl
c0016920:	75 15                	jne    c0016937 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016922:	e8 a1 f1 ff ff       	call   c0015ac8 <schedule()>
c0016927:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001692c:	48                   	dec    eax
c001692d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016932:	75 dd                	jne    c0016911 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016934:	fb                   	sti    
c0016935:	eb da                	jmp    c0016911 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016937:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016941:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016945:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c001694a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001694e:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016952:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016956:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001695a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001695e:	50                   	push   eax
c001695f:	6a 20                	push   0x20
c0016961:	6a 00                	push   0x0
c0016963:	68 40 97 02 c0       	push   0xc0029740
c0016968:	e8 83 9b fe ff       	call   c00004f0 <memset>
c001696d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016974:	e8 5a 11 ff ff       	call   c0007ad3 <malloc>
c0016979:	83 c4 0c             	add    esp,0xc
c001697c:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016982:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016986:	89 c5                	mov    ebp,eax
c0016988:	50                   	push   eax
c0016989:	e8 8a 4d ff ff       	call   c000b718 <File::File(char const*, Process*)>
c001698e:	83 c4 10             	add    esp,0x10
c0016991:	85 ed                	test   ebp,ebp
c0016993:	75 0a                	jne    c001699f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016995:	83 ec 0c             	sub    esp,0xc
c0016998:	68 ca 23 02 c0       	push   0xc00223ca
c001699d:	eb 2b                	jmp    c00169ca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c001699f:	50                   	push   eax
c00169a0:	8d 44 24 17          	lea    eax,[esp+0x17]
c00169a4:	50                   	push   eax
c00169a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00169a9:	50                   	push   eax
c00169aa:	55                   	push   ebp
c00169ab:	e8 26 51 ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c00169b0:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00169b4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00169b8:	83 c4 10             	add    esp,0x10
c00169bb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00169c0:	74 27                	je     c00169e9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c00169c2:	83 ec 0c             	sub    esp,0xc
c00169c5:	68 de 23 02 c0       	push   0xc00223de
c00169ca:	e8 f6 a7 ff ff       	call   c00111c5 <KePanic(char const*)>
c00169cf:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169d4:	83 c4 10             	add    esp,0x10
c00169d7:	48                   	dec    eax
c00169d8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169dd:	85 c0                	test   eax,eax
c00169df:	75 01                	jne    c00169e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00169e1:	fb                   	sti    
c00169e2:	31 db                	xor    ebx,ebx
c00169e4:	e9 90 00 00 00       	jmp    c0016a79 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00169e9:	51                   	push   ecx
c00169ea:	51                   	push   ecx
c00169eb:	6a 01                	push   0x1
c00169ed:	55                   	push   ebp
c00169ee:	e8 e1 4d ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c00169f3:	83 c4 10             	add    esp,0x10
c00169f6:	85 c0                	test   eax,eax
c00169f8:	74 26                	je     c0016a20 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00169fa:	83 ec 0c             	sub    esp,0xc
c00169fd:	68 f7 23 02 c0       	push   0xc00223f7
c0016a02:	e8 be a7 ff ff       	call   c00111c5 <KePanic(char const*)>
c0016a07:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a0c:	83 c4 10             	add    esp,0x10
c0016a0f:	48                   	dec    eax
c0016a10:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a15:	85 c0                	test   eax,eax
c0016a17:	75 c9                	jne    c00169e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016a19:	fb                   	sti    
c0016a1a:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016a1e:	eb 59                	jmp    c0016a79 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016a20:	50                   	push   eax
c0016a21:	0f b7 ff             	movzx  edi,di
c0016a24:	50                   	push   eax
c0016a25:	0f b7 f6             	movzx  esi,si
c0016a28:	57                   	push   edi
c0016a29:	56                   	push   esi
c0016a2a:	e8 a7 fc ff ff       	call   c00166d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016a2f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016a32:	5a                   	pop    edx
c0016a33:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016a37:	56                   	push   esi
c0016a38:	50                   	push   eax
c0016a39:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a41:	55                   	push   ebp
c0016a42:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a45:	83 c4 14             	add    esp,0x14
c0016a48:	55                   	push   ebp
c0016a49:	e8 e4 4d ff ff       	call   c000b832 <File::close()>
c0016a4e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a53:	83 c4 10             	add    esp,0x10
c0016a56:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016a5d:	48                   	dec    eax
c0016a5e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a63:	85 c0                	test   eax,eax
c0016a65:	75 01                	jne    c0016a68 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016a67:	fb                   	sti    
c0016a68:	83 ec 0c             	sub    esp,0xc
c0016a6b:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016a71:	e8 4a f5 ff ff       	call   c0015fc0 <unblockTask(ThreadControlBlock*)>
c0016a76:	83 c4 10             	add    esp,0x10
c0016a79:	83 c4 2c             	add    esp,0x2c
c0016a7c:	88 d8                	mov    al,bl
c0016a7e:	5b                   	pop    ebx
c0016a7f:	5e                   	pop    esi
c0016a80:	5f                   	pop    edi
c0016a81:	5d                   	pop    ebp
c0016a82:	c3                   	ret    

c0016a83 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016a83:	57                   	push   edi
c0016a84:	56                   	push   esi
c0016a85:	53                   	push   ebx
c0016a86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a8e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016a92:	83 e8 06             	sub    eax,0x6
c0016a95:	0f b7 c0             	movzx  eax,ax
c0016a98:	50                   	push   eax
c0016a99:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016a9e:	50                   	push   eax
c0016a9f:	e8 32 fc ff ff       	call   c00166d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016aa4:	5a                   	pop    edx
c0016aa5:	59                   	pop    ecx
c0016aa6:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016aa9:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016aac:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016aaf:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016ab5:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016ab8:	8d 51 02             	lea    edx,[ecx+0x2]
c0016abb:	66 89 10             	mov    WORD PTR [eax],dx
c0016abe:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016ac2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016ac6:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016aca:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016acd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016ad1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ad7:	89 f1                	mov    ecx,esi
c0016ad9:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016add:	89 f2                	mov    edx,esi
c0016adf:	0f b6 d6             	movzx  edx,dh
c0016ae2:	0f b6 f1             	movzx  esi,cl
c0016ae5:	74 0a                	je     c0016af1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016ae7:	c1 e2 08             	shl    edx,0x8
c0016aea:	09 f2                	or     edx,esi
c0016aec:	80 ce 02             	or     dh,0x2
c0016aef:	eb 08                	jmp    c0016af9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016af1:	c1 e2 08             	shl    edx,0x8
c0016af4:	09 f2                	or     edx,esi
c0016af6:	80 e6 fd             	and    dh,0xfd
c0016af9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016afd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b02:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016b06:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016b0e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016b11:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016b19:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016b1c:	5b                   	pop    ebx
c0016b1d:	5e                   	pop    esi
c0016b1e:	5f                   	pop    edi
c0016b1f:	c3                   	ret    

c0016b20 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016b20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b25:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b2a:	c1 e0 04             	shl    eax,0x4
c0016b2d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016b30:	c3                   	ret    

c0016b31 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016b31:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b36:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b3b:	c1 e0 04             	shl    eax,0x4
c0016b3e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016b42:	c3                   	ret    

c0016b43 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016b43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b48:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b4d:	c1 e0 04             	shl    eax,0x4
c0016b50:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016b53:	c3                   	ret    

c0016b54 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016b54:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b59:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b5e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016b62:	c1 e0 04             	shl    eax,0x4
c0016b65:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016b68:	c3                   	ret    

c0016b69 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016b69:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b6e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b77:	c1 e0 04             	shl    eax,0x4
c0016b7a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016b7e:	c3                   	ret    

c0016b7f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016b7f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b84:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b8d:	c1 e0 04             	shl    eax,0x4
c0016b90:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016b93:	c3                   	ret    

c0016b94 <Vm::faultHandler(regs*)>:
c0016b94:	55                   	push   ebp
c0016b95:	57                   	push   edi
c0016b96:	56                   	push   esi
c0016b97:	53                   	push   ebx
c0016b98:	83 ec 2c             	sub    esp,0x2c
c0016b9b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016b9f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016ba2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016ba6:	0f b7 f8             	movzx  edi,ax
c0016ba9:	0f b7 c0             	movzx  eax,ax
c0016bac:	52                   	push   edx
c0016bad:	50                   	push   eax
c0016bae:	e8 23 fb ff ff       	call   c00166d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016bb3:	5a                   	pop    edx
c0016bb4:	59                   	pop    ecx
c0016bb5:	89 c1                	mov    ecx,eax
c0016bb7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bbe:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016bc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bc7:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016bca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016bce:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016bd3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016bd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bdb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016bdf:	e8 f2 fa ff ff       	call   c00166d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016be4:	5e                   	pop    esi
c0016be5:	be 06 00 00 00       	mov    esi,0x6
c0016bea:	5d                   	pop    ebp
c0016beb:	31 ed                	xor    ebp,ebp
c0016bed:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016bf2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016bf5:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016bfb:	0f 84 74 02 00 00    	je     c0016e75 <Vm::faultHandler(regs*)+0x2e1>
c0016c01:	0f 87 94 00 00 00    	ja     c0016c9b <Vm::faultHandler(regs*)+0x107>
c0016c07:	83 fa 66             	cmp    edx,0x66
c0016c0a:	0f 84 e2 01 00 00    	je     c0016df2 <Vm::faultHandler(regs*)+0x25e>
c0016c10:	77 47                	ja     c0016c59 <Vm::faultHandler(regs*)+0xc5>
c0016c12:	83 fa 36             	cmp    edx,0x36
c0016c15:	0f 84 ca 01 00 00    	je     c0016de5 <Vm::faultHandler(regs*)+0x251>
c0016c1b:	77 1a                	ja     c0016c37 <Vm::faultHandler(regs*)+0xa3>
c0016c1d:	83 fa 26             	cmp    edx,0x26
c0016c20:	0f 84 98 01 00 00    	je     c0016dbe <Vm::faultHandler(regs*)+0x22a>
c0016c26:	83 fa 2e             	cmp    edx,0x2e
c0016c29:	0f 85 27 06 00 00    	jne    c0017256 <Vm::faultHandler(regs*)+0x6c2>
c0016c2f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c32:	31 f6                	xor    esi,esi
c0016c34:	41                   	inc    ecx
c0016c35:	eb bb                	jmp    c0016bf2 <Vm::faultHandler(regs*)+0x5e>
c0016c37:	83 fa 64             	cmp    edx,0x64
c0016c3a:	0f 84 8b 01 00 00    	je     c0016dcb <Vm::faultHandler(regs*)+0x237>
c0016c40:	0f 87 92 01 00 00    	ja     c0016dd8 <Vm::faultHandler(regs*)+0x244>
c0016c46:	83 fa 3e             	cmp    edx,0x3e
c0016c49:	0f 85 07 06 00 00    	jne    c0017256 <Vm::faultHandler(regs*)+0x6c2>
c0016c4f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c52:	be 01 00 00 00       	mov    esi,0x1
c0016c57:	eb db                	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016c59:	83 fa 6d             	cmp    edx,0x6d
c0016c5c:	0f 84 34 03 00 00    	je     c0016f96 <Vm::faultHandler(regs*)+0x402>
c0016c62:	77 17                	ja     c0016c7b <Vm::faultHandler(regs*)+0xe7>
c0016c64:	83 fa 67             	cmp    edx,0x67
c0016c67:	0f 84 92 01 00 00    	je     c0016dff <Vm::faultHandler(regs*)+0x26b>
c0016c6d:	83 fa 6c             	cmp    edx,0x6c
c0016c70:	0f 84 b1 02 00 00    	je     c0016f27 <Vm::faultHandler(regs*)+0x393>
c0016c76:	e9 db 05 00 00       	jmp    c0017256 <Vm::faultHandler(regs*)+0x6c2>
c0016c7b:	83 fa 6f             	cmp    edx,0x6f
c0016c7e:	0f 84 40 04 00 00    	je     c00170c4 <Vm::faultHandler(regs*)+0x530>
c0016c84:	0f 82 a2 03 00 00    	jb     c001702c <Vm::faultHandler(regs*)+0x498>
c0016c8a:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016c90:	0f 84 76 01 00 00    	je     c0016e0c <Vm::faultHandler(regs*)+0x278>
c0016c96:	e9 bb 05 00 00       	jmp    c0017256 <Vm::faultHandler(regs*)+0x6c2>
c0016c9b:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016ca1:	0f 84 57 05 00 00    	je     c00171fe <Vm::faultHandler(regs*)+0x66a>
c0016ca7:	0f 87 a9 00 00 00    	ja     c0016d56 <Vm::faultHandler(regs*)+0x1c2>
c0016cad:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016cb3:	0f 84 d6 04 00 00    	je     c001718f <Vm::faultHandler(regs*)+0x5fb>
c0016cb9:	77 78                	ja     c0016d33 <Vm::faultHandler(regs*)+0x19f>
c0016cbb:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016cc1:	0f 84 0e 02 00 00    	je     c0016ed5 <Vm::faultHandler(regs*)+0x341>
c0016cc7:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016ccd:	0f 85 83 05 00 00    	jne    c0017256 <Vm::faultHandler(regs*)+0x6c2>
c0016cd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016cd7:	89 d1                	mov    ecx,edx
c0016cd9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016cdc:	c1 e1 08             	shl    ecx,0x8
c0016cdf:	09 ca                	or     edx,ecx
c0016ce1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016ce4:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016ce8:	89 d1                	mov    ecx,edx
c0016cea:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016cee:	c1 e1 08             	shl    ecx,0x8
c0016cf1:	09 ca                	or     edx,ecx
c0016cf3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016cf6:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016cfa:	89 d1                	mov    ecx,edx
c0016cfc:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016d00:	c1 e1 08             	shl    ecx,0x8
c0016d03:	09 ca                	or     edx,ecx
c0016d05:	81 ca 00 02 02 00    	or     edx,0x20200
c0016d0b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016d0e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016d12:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d18:	d1 e8                	shr    eax,1
c0016d1a:	83 e0 01             	and    eax,0x1
c0016d1d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016d20:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d23:	83 c0 06             	add    eax,0x6
c0016d26:	25 ff ff 00 00       	and    eax,0xffff
c0016d2b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016d2e:	e9 1f 05 00 00       	jmp    c0017252 <Vm::faultHandler(regs*)+0x6be>
c0016d33:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016d39:	0f 84 95 04 00 00    	je     c00171d4 <Vm::faultHandler(regs*)+0x640>
c0016d3f:	0f 82 66 04 00 00    	jb     c00171ab <Vm::faultHandler(regs*)+0x617>
c0016d45:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016d4b:	0f 84 9a 04 00 00    	je     c00171eb <Vm::faultHandler(regs*)+0x657>
c0016d51:	e9 00 05 00 00       	jmp    c0017256 <Vm::faultHandler(regs*)+0x6c2>
c0016d56:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016d5c:	0f 84 dd 04 00 00    	je     c001723f <Vm::faultHandler(regs*)+0x6ab>
c0016d62:	77 2e                	ja     c0016d92 <Vm::faultHandler(regs*)+0x1fe>
c0016d64:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016d6a:	0f 84 aa 04 00 00    	je     c001721a <Vm::faultHandler(regs*)+0x686>
c0016d70:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016d76:	0f 85 da 04 00 00    	jne    c0017256 <Vm::faultHandler(regs*)+0x6c2>
c0016d7c:	50                   	push   eax
c0016d7d:	50                   	push   eax
c0016d7e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016d82:	50                   	push   eax
c0016d83:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016d87:	50                   	push   eax
c0016d88:	e8 13 f9 ff ff       	call   c00166a0 <Vm::outbv(unsigned short, unsigned char)>
c0016d8d:	e9 a5 04 00 00       	jmp    c0017237 <Vm::faultHandler(regs*)+0x6a3>
c0016d92:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016d98:	0f 84 6d 01 00 00    	je     c0016f0b <Vm::faultHandler(regs*)+0x377>
c0016d9e:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016da4:	0f 84 6f 01 00 00    	je     c0016f19 <Vm::faultHandler(regs*)+0x385>
c0016daa:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016db0:	0f 85 a0 04 00 00    	jne    c0017256 <Vm::faultHandler(regs*)+0x6c2>
c0016db6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016db9:	e9 76 fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016dbe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dc1:	be 02 00 00 00       	mov    esi,0x2
c0016dc6:	e9 69 fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016dcb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dce:	be 03 00 00 00       	mov    esi,0x3
c0016dd3:	e9 5c fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016dd8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ddb:	be 04 00 00 00       	mov    esi,0x4
c0016de0:	e9 4f fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016de5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016de8:	be 05 00 00 00       	mov    esi,0x5
c0016ded:	e9 42 fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016df2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016df5:	bd 01 00 00 00       	mov    ebp,0x1
c0016dfa:	e9 35 fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016dff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e02:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016e07:	e9 28 fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016e0c:	83 e5 01             	and    ebp,0x1
c0016e0f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e16:	74 30                	je     c0016e48 <Vm::faultHandler(regs*)+0x2b4>
c0016e18:	83 e9 04             	sub    ecx,0x4
c0016e1b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e21:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016e27:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e2a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016e2d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e33:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e37:	0f 84 12 04 00 00    	je     c001724f <Vm::faultHandler(regs*)+0x6bb>
c0016e3d:	80 ce 02             	or     dh,0x2
c0016e40:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016e43:	e9 07 04 00 00       	jmp    c001724f <Vm::faultHandler(regs*)+0x6bb>
c0016e48:	83 e9 02             	sub    ecx,0x2
c0016e4b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016e51:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e54:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e58:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e5e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e62:	74 05                	je     c0016e69 <Vm::faultHandler(regs*)+0x2d5>
c0016e64:	80 ce 02             	or     dh,0x2
c0016e67:	eb 03                	jmp    c0016e6c <Vm::faultHandler(regs*)+0x2d8>
c0016e69:	80 e6 fd             	and    dh,0xfd
c0016e6c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e70:	e9 da 03 00 00       	jmp    c001724f <Vm::faultHandler(regs*)+0x6bb>
c0016e75:	83 e5 01             	and    ebp,0x1
c0016e78:	74 2a                	je     c0016ea4 <Vm::faultHandler(regs*)+0x310>
c0016e7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e7c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e82:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e88:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e8d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e93:	c1 e8 09             	shr    eax,0x9
c0016e96:	83 e0 01             	and    eax,0x1
c0016e99:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e9c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e9f:	83 c0 04             	add    eax,0x4
c0016ea2:	eb 24                	jmp    c0016ec8 <Vm::faultHandler(regs*)+0x334>
c0016ea4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016ea7:	81 ca 00 02 02 00    	or     edx,0x20200
c0016ead:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016eb0:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016eb3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016eb9:	c1 e8 09             	shr    eax,0x9
c0016ebc:	83 e0 01             	and    eax,0x1
c0016ebf:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016ec2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ec5:	83 c0 02             	add    eax,0x2
c0016ec8:	25 ff ff 00 00       	and    eax,0xffff
c0016ecd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016ed0:	e9 7a 03 00 00       	jmp    c001724f <Vm::faultHandler(regs*)+0x6bb>
c0016ed5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ed9:	3d ee 00 00 00       	cmp    eax,0xee
c0016ede:	75 10                	jne    c0016ef0 <Vm::faultHandler(regs*)+0x35c>
c0016ee0:	83 ec 0c             	sub    esp,0xc
c0016ee3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016ee6:	e8 52 f8 ff ff       	call   c001673d <Vm::mainloop3(unsigned long)>
c0016eeb:	e9 4a 03 00 00       	jmp    c001723a <Vm::faultHandler(regs*)+0x6a6>
c0016ef0:	83 ec 0c             	sub    esp,0xc
c0016ef3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ef7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016efb:	51                   	push   ecx
c0016efc:	50                   	push   eax
c0016efd:	53                   	push   ebx
c0016efe:	e8 80 fb ff ff       	call   c0016a83 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016f03:	83 c4 20             	add    esp,0x20
c0016f06:	e9 47 03 00 00       	jmp    c0017252 <Vm::faultHandler(regs*)+0x6be>
c0016f0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f10:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016f14:	e9 36 03 00 00       	jmp    c001724f <Vm::faultHandler(regs*)+0x6bb>
c0016f19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f1e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016f22:	e9 28 03 00 00       	jmp    c001724f <Vm::faultHandler(regs*)+0x6bb>
c0016f27:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016f2c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016f2f:	74 2b                	je     c0016f5c <Vm::faultHandler(regs*)+0x3c8>
c0016f31:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016f38:	76 22                	jbe    c0016f5c <Vm::faultHandler(regs*)+0x3c8>
c0016f3a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016f3e:	50                   	push   eax
c0016f3f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016f43:	50                   	push   eax
c0016f44:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016f48:	50                   	push   eax
c0016f49:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016f4d:	50                   	push   eax
c0016f4e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f52:	50                   	push   eax
c0016f53:	6a 6c                	push   0x6c
c0016f55:	6a 6c                	push   0x6c
c0016f57:	e9 c0 01 00 00       	jmp    c001711c <Vm::faultHandler(regs*)+0x588>
c0016f5c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016f60:	83 ec 0c             	sub    esp,0xc
c0016f63:	0f b7 f6             	movzx  esi,si
c0016f66:	50                   	push   eax
c0016f67:	e8 21 f7 ff ff       	call   c001668d <Vm::inbv(unsigned short)>
c0016f6c:	83 c4 0c             	add    esp,0xc
c0016f6f:	0f b6 c0             	movzx  eax,al
c0016f72:	50                   	push   eax
c0016f73:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016f77:	50                   	push   eax
c0016f78:	56                   	push   esi
c0016f79:	e8 d6 fb ff ff       	call   c0016b54 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016f7e:	83 c4 10             	add    esp,0x10
c0016f81:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f84:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016f88:	74 03                	je     c0016f8d <Vm::faultHandler(regs*)+0x3f9>
c0016f8a:	48                   	dec    eax
c0016f8b:	eb 01                	jmp    c0016f8e <Vm::faultHandler(regs*)+0x3fa>
c0016f8d:	40                   	inc    eax
c0016f8e:	0f b7 c0             	movzx  eax,ax
c0016f91:	e9 8e 00 00 00       	jmp    c0017024 <Vm::faultHandler(regs*)+0x490>
c0016f96:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016f9b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016f9e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fa1:	74 29                	je     c0016fcc <Vm::faultHandler(regs*)+0x438>
c0016fa3:	3d ff ff 00 00       	cmp    eax,0xffff
c0016fa8:	76 22                	jbe    c0016fcc <Vm::faultHandler(regs*)+0x438>
c0016faa:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016fae:	50                   	push   eax
c0016faf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016fb3:	50                   	push   eax
c0016fb4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016fb8:	50                   	push   eax
c0016fb9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016fbd:	50                   	push   eax
c0016fbe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016fc2:	50                   	push   eax
c0016fc3:	6a 6d                	push   0x6d
c0016fc5:	6a 6d                	push   0x6d
c0016fc7:	e9 50 01 00 00       	jmp    c001711c <Vm::faultHandler(regs*)+0x588>
c0016fcc:	83 e5 01             	and    ebp,0x1
c0016fcf:	0f b7 c8             	movzx  ecx,ax
c0016fd2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016fd5:	0f b7 f6             	movzx  esi,si
c0016fd8:	74 1e                	je     c0016ff8 <Vm::faultHandler(regs*)+0x464>
c0016fda:	ed                   	in     eax,dx
c0016fdb:	55                   	push   ebp
c0016fdc:	50                   	push   eax
c0016fdd:	51                   	push   ecx
c0016fde:	56                   	push   esi
c0016fdf:	e8 9b fb ff ff       	call   c0016b7f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016fe4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fe7:	83 c4 10             	add    esp,0x10
c0016fea:	8d 50 04             	lea    edx,[eax+0x4]
c0016fed:	83 e8 04             	sub    eax,0x4
c0016ff0:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016ff6:	eb 20                	jmp    c0017018 <Vm::faultHandler(regs*)+0x484>
c0016ff8:	66 ed                	in     ax,dx
c0016ffa:	57                   	push   edi
c0016ffb:	0f b7 c0             	movzx  eax,ax
c0016ffe:	50                   	push   eax
c0016fff:	51                   	push   ecx
c0017000:	56                   	push   esi
c0017001:	e8 63 fb ff ff       	call   c0016b69 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017006:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017009:	83 c4 10             	add    esp,0x10
c001700c:	8d 50 02             	lea    edx,[eax+0x2]
c001700f:	83 e8 02             	sub    eax,0x2
c0017012:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017018:	25 ff ff 00 00       	and    eax,0xffff
c001701d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017021:	0f 44 c2             	cmove  eax,edx
c0017024:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017027:	e9 23 02 00 00       	jmp    c001724f <Vm::faultHandler(regs*)+0x6bb>
c001702c:	8d 46 ff             	lea    eax,[esi-0x1]
c001702f:	0f b6 f0             	movzx  esi,al
c0017032:	83 fe 05             	cmp    esi,0x5
c0017035:	77 23                	ja     c001705a <Vm::faultHandler(regs*)+0x4c6>
c0017037:	ff 24 b5 6c 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddb94]
c001703e:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017043:	eb 15                	jmp    c001705a <Vm::faultHandler(regs*)+0x4c6>
c0017045:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017049:	eb 0f                	jmp    c001705a <Vm::faultHandler(regs*)+0x4c6>
c001704b:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001704f:	eb 09                	jmp    c001705a <Vm::faultHandler(regs*)+0x4c6>
c0017051:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017055:	eb 03                	jmp    c001705a <Vm::faultHandler(regs*)+0x4c6>
c0017057:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001705a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001705f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017062:	74 29                	je     c001708d <Vm::faultHandler(regs*)+0x4f9>
c0017064:	3d ff ff 00 00       	cmp    eax,0xffff
c0017069:	76 22                	jbe    c001708d <Vm::faultHandler(regs*)+0x4f9>
c001706b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001706f:	50                   	push   eax
c0017070:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017074:	50                   	push   eax
c0017075:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017079:	50                   	push   eax
c001707a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001707e:	50                   	push   eax
c001707f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017083:	50                   	push   eax
c0017084:	6a 6e                	push   0x6e
c0017086:	6a 6e                	push   0x6e
c0017088:	e9 8f 00 00 00       	jmp    c001711c <Vm::faultHandler(regs*)+0x588>
c001708d:	52                   	push   edx
c001708e:	0f b7 c0             	movzx  eax,ax
c0017091:	52                   	push   edx
c0017092:	50                   	push   eax
c0017093:	57                   	push   edi
c0017094:	e8 87 fa ff ff       	call   c0016b20 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017099:	59                   	pop    ecx
c001709a:	5e                   	pop    esi
c001709b:	0f b6 c0             	movzx  eax,al
c001709e:	50                   	push   eax
c001709f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00170a3:	50                   	push   eax
c00170a4:	e8 f7 f5 ff ff       	call   c00166a0 <Vm::outbv(unsigned short, unsigned char)>
c00170a9:	83 c4 10             	add    esp,0x10
c00170ac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00170af:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00170b3:	74 03                	je     c00170b8 <Vm::faultHandler(regs*)+0x524>
c00170b5:	48                   	dec    eax
c00170b6:	eb 01                	jmp    c00170b9 <Vm::faultHandler(regs*)+0x525>
c00170b8:	40                   	inc    eax
c00170b9:	0f b7 c0             	movzx  eax,ax
c00170bc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00170bf:	e9 8b 01 00 00       	jmp    c001724f <Vm::faultHandler(regs*)+0x6bb>
c00170c4:	8d 46 ff             	lea    eax,[esi-0x1]
c00170c7:	0f b6 f0             	movzx  esi,al
c00170ca:	83 fe 05             	cmp    esi,0x5
c00170cd:	77 1e                	ja     c00170ed <Vm::faultHandler(regs*)+0x559>
c00170cf:	ff 24 b5 84 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddb7c]
c00170d6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170da:	eb 11                	jmp    c00170ed <Vm::faultHandler(regs*)+0x559>
c00170dc:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00170df:	eb 0c                	jmp    c00170ed <Vm::faultHandler(regs*)+0x559>
c00170e1:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00170e4:	eb 07                	jmp    c00170ed <Vm::faultHandler(regs*)+0x559>
c00170e6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00170e9:	eb 02                	jmp    c00170ed <Vm::faultHandler(regs*)+0x559>
c00170eb:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00170ed:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170f2:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00170f5:	74 37                	je     c001712e <Vm::faultHandler(regs*)+0x59a>
c00170f7:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00170fd:	76 2f                	jbe    c001712e <Vm::faultHandler(regs*)+0x59a>
c00170ff:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017103:	50                   	push   eax
c0017104:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017108:	50                   	push   eax
c0017109:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001710d:	50                   	push   eax
c001710e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017112:	50                   	push   eax
c0017113:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017117:	50                   	push   eax
c0017118:	6a 6f                	push   0x6f
c001711a:	6a 6f                	push   0x6f
c001711c:	68 10 24 02 c0       	push   0xc0022410
c0017121:	e8 e4 37 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017126:	83 c4 20             	add    esp,0x20
c0017129:	e9 86 01 00 00       	jmp    c00172b4 <Vm::faultHandler(regs*)+0x720>
c001712e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017131:	0f b7 d7             	movzx  edx,di
c0017134:	0f b7 c6             	movzx  eax,si
c0017137:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001713a:	81 e1 00 04 00 00    	and    ecx,0x400
c0017140:	83 e5 01             	and    ebp,0x1
c0017143:	74 1c                	je     c0017161 <Vm::faultHandler(regs*)+0x5cd>
c0017145:	55                   	push   ebp
c0017146:	55                   	push   ebp
c0017147:	50                   	push   eax
c0017148:	52                   	push   edx
c0017149:	e8 f5 f9 ff ff       	call   c0016b43 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001714e:	83 c4 10             	add    esp,0x10
c0017151:	89 fa                	mov    edx,edi
c0017153:	ef                   	out    dx,eax
c0017154:	8d 46 04             	lea    eax,[esi+0x4]
c0017157:	83 ee 04             	sub    esi,0x4
c001715a:	25 ff ff 00 00       	and    eax,0xffff
c001715f:	eb 1b                	jmp    c001717c <Vm::faultHandler(regs*)+0x5e8>
c0017161:	55                   	push   ebp
c0017162:	55                   	push   ebp
c0017163:	50                   	push   eax
c0017164:	52                   	push   edx
c0017165:	e8 c7 f9 ff ff       	call   c0016b31 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001716a:	83 c4 10             	add    esp,0x10
c001716d:	89 fa                	mov    edx,edi
c001716f:	66 ef                	out    dx,ax
c0017171:	8d 46 02             	lea    eax,[esi+0x2]
c0017174:	83 ee 02             	sub    esi,0x2
c0017177:	25 ff ff 00 00       	and    eax,0xffff
c001717c:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017182:	85 c9                	test   ecx,ecx
c0017184:	0f 44 f0             	cmove  esi,eax
c0017187:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001718a:	e9 c0 00 00 00       	jmp    c001724f <Vm::faultHandler(regs*)+0x6bb>
c001718f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017196:	83 ec 0c             	sub    esp,0xc
c0017199:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001719d:	50                   	push   eax
c001719e:	e8 ea f4 ff ff       	call   c001668d <Vm::inbv(unsigned short)>
c00171a3:	0f b6 c0             	movzx  eax,al
c00171a6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00171a9:	eb 3a                	jmp    c00171e5 <Vm::faultHandler(regs*)+0x651>
c00171ab:	83 e5 01             	and    ebp,0x1
c00171ae:	74 07                	je     c00171b7 <Vm::faultHandler(regs*)+0x623>
c00171b0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171b4:	ed                   	in     eax,dx
c00171b5:	eb 14                	jmp    c00171cb <Vm::faultHandler(regs*)+0x637>
c00171b7:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00171ba:	66 31 f6             	xor    si,si
c00171bd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00171c0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171c4:	66 ed                	in     ax,dx
c00171c6:	0f b7 c0             	movzx  eax,ax
c00171c9:	09 f0                	or     eax,esi
c00171cb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00171ce:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00171d2:	eb 7e                	jmp    c0017252 <Vm::faultHandler(regs*)+0x6be>
c00171d4:	52                   	push   edx
c00171d5:	52                   	push   edx
c00171d6:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00171da:	50                   	push   eax
c00171db:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171df:	50                   	push   eax
c00171e0:	e8 bb f4 ff ff       	call   c00166a0 <Vm::outbv(unsigned short, unsigned char)>
c00171e5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00171e9:	eb 4f                	jmp    c001723a <Vm::faultHandler(regs*)+0x6a6>
c00171eb:	83 e5 01             	and    ebp,0x1
c00171ee:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00171f1:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171f5:	74 03                	je     c00171fa <Vm::faultHandler(regs*)+0x666>
c00171f7:	ef                   	out    dx,eax
c00171f8:	eb d4                	jmp    c00171ce <Vm::faultHandler(regs*)+0x63a>
c00171fa:	66 ef                	out    dx,ax
c00171fc:	eb d0                	jmp    c00171ce <Vm::faultHandler(regs*)+0x63a>
c00171fe:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017202:	83 ec 0c             	sub    esp,0xc
c0017205:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001720c:	50                   	push   eax
c001720d:	e8 7b f4 ff ff       	call   c001668d <Vm::inbv(unsigned short)>
c0017212:	0f b6 c0             	movzx  eax,al
c0017215:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017218:	eb 1d                	jmp    c0017237 <Vm::faultHandler(regs*)+0x6a3>
c001721a:	83 e5 01             	and    ebp,0x1
c001721d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017220:	74 03                	je     c0017225 <Vm::faultHandler(regs*)+0x691>
c0017222:	ed                   	in     eax,dx
c0017223:	eb 0d                	jmp    c0017232 <Vm::faultHandler(regs*)+0x69e>
c0017225:	66 ed                	in     ax,dx
c0017227:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001722a:	0f b7 c0             	movzx  eax,ax
c001722d:	66 31 d2             	xor    dx,dx
c0017230:	09 d0                	or     eax,edx
c0017232:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017235:	eb 18                	jmp    c001724f <Vm::faultHandler(regs*)+0x6bb>
c0017237:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001723a:	83 c4 10             	add    esp,0x10
c001723d:	eb 13                	jmp    c0017252 <Vm::faultHandler(regs*)+0x6be>
c001723f:	83 e5 01             	and    ebp,0x1
c0017242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017245:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017248:	74 03                	je     c001724d <Vm::faultHandler(regs*)+0x6b9>
c001724a:	ef                   	out    dx,eax
c001724b:	eb 02                	jmp    c001724f <Vm::faultHandler(regs*)+0x6bb>
c001724d:	66 ef                	out    dx,ax
c001724f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017252:	b0 01                	mov    al,0x1
c0017254:	eb 60                	jmp    c00172b6 <Vm::faultHandler(regs*)+0x722>
c0017256:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001725a:	50                   	push   eax
c001725b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001725f:	50                   	push   eax
c0017260:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017264:	50                   	push   eax
c0017265:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017269:	50                   	push   eax
c001726a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001726e:	50                   	push   eax
c001726f:	52                   	push   edx
c0017270:	52                   	push   edx
c0017271:	68 3d 24 02 c0       	push   0xc002243d
c0017276:	e8 8f 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001727b:	83 c4 20             	add    esp,0x20
c001727e:	83 ec 0c             	sub    esp,0xc
c0017281:	6a 60                	push   0x60
c0017283:	e8 05 f4 ff ff       	call   c001668d <Vm::inbv(unsigned short)>
c0017288:	83 c4 10             	add    esp,0x10
c001728b:	0f b6 d0             	movzx  edx,al
c001728e:	83 fa 1c             	cmp    edx,0x1c
c0017291:	74 05                	je     c0017298 <Vm::faultHandler(regs*)+0x704>
c0017293:	83 fa 5a             	cmp    edx,0x5a
c0017296:	75 e6                	jne    c001727e <Vm::faultHandler(regs*)+0x6ea>
c0017298:	0f b6 c0             	movzx  eax,al
c001729b:	83 f8 1c             	cmp    eax,0x1c
c001729e:	74 05                	je     c00172a5 <Vm::faultHandler(regs*)+0x711>
c00172a0:	83 f8 5a             	cmp    eax,0x5a
c00172a3:	75 0f                	jne    c00172b4 <Vm::faultHandler(regs*)+0x720>
c00172a5:	83 ec 0c             	sub    esp,0xc
c00172a8:	6a 60                	push   0x60
c00172aa:	e8 de f3 ff ff       	call   c001668d <Vm::inbv(unsigned short)>
c00172af:	83 c4 10             	add    esp,0x10
c00172b2:	eb e4                	jmp    c0017298 <Vm::faultHandler(regs*)+0x704>
c00172b4:	31 c0                	xor    eax,eax
c00172b6:	83 c4 2c             	add    esp,0x2c
c00172b9:	5b                   	pop    ebx
c00172ba:	5e                   	pop    esi
c00172bb:	5f                   	pop    edi
c00172bc:	5d                   	pop    ebp
c00172bd:	c3                   	ret    

c00172be <noCopro(unsigned long)>:
c00172be:	c3                   	ret    

c00172bf <nmiHandler(regs*, void*)>:
c00172bf:	83 ec 0c             	sub    esp,0xc
c00172c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00172c7:	83 ec 0c             	sub    esp,0xc
c00172ca:	50                   	push   eax
c00172cb:	e8 06 00 ff ff       	call   c00072d6 <Computer::handleNMI()>
c00172d0:	83 c4 10             	add    esp,0x10
c00172d3:	90                   	nop
c00172d4:	83 c4 0c             	add    esp,0xc
c00172d7:	c3                   	ret    

c00172d8 <doubleFault(regs*, void*)>:
c00172d8:	55                   	push   ebp
c00172d9:	89 e5                	mov    ebp,esp
c00172db:	83 ec 08             	sub    esp,0x8
c00172de:	83 ec 0c             	sub    esp,0xc
c00172e1:	68 9c 24 02 c0       	push   0xc002249c
c00172e6:	e8 da 9e ff ff       	call   c00111c5 <KePanic(char const*)>
c00172eb:	83 c4 10             	add    esp,0x10
c00172ee:	90                   	nop
c00172ef:	c9                   	leave  
c00172f0:	c3                   	ret    

c00172f1 <displayDebugInfo(regs*)>:
c00172f1:	83 ec 1c             	sub    esp,0x1c
c00172f4:	0f 20 c0             	mov    eax,cr0
c00172f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172fb:	0f 20 d0             	mov    eax,cr2
c00172fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017302:	0f 20 d8             	mov    eax,cr3
c0017305:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017309:	0f 20 e0             	mov    eax,cr4
c001730c:	89 04 24             	mov    DWORD PTR [esp],eax
c001730f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017313:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017316:	83 ec 08             	sub    esp,0x8
c0017319:	50                   	push   eax
c001731a:	68 b8 24 02 c0       	push   0xc00224b8
c001731f:	e8 e6 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017324:	83 c4 10             	add    esp,0x10
c0017327:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001732b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001732e:	83 ec 08             	sub    esp,0x8
c0017331:	50                   	push   eax
c0017332:	68 a9 24 02 c0       	push   0xc00224a9
c0017337:	e8 ce 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001733c:	83 c4 10             	add    esp,0x10
c001733f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017343:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017346:	83 ec 08             	sub    esp,0x8
c0017349:	50                   	push   eax
c001734a:	68 b4 24 02 c0       	push   0xc00224b4
c001734f:	e8 b6 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017354:	83 c4 10             	add    esp,0x10
c0017357:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001735b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001735e:	83 ec 08             	sub    esp,0x8
c0017361:	50                   	push   eax
c0017362:	68 c3 24 02 c0       	push   0xc00224c3
c0017367:	e8 9e 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001736c:	83 c4 10             	add    esp,0x10
c001736f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017373:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017376:	83 ec 08             	sub    esp,0x8
c0017379:	50                   	push   eax
c001737a:	68 ce 24 02 c0       	push   0xc00224ce
c001737f:	e8 86 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017384:	83 c4 10             	add    esp,0x10
c0017387:	83 ec 08             	sub    esp,0x8
c001738a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001738e:	68 d9 24 02 c0       	push   0xc00224d9
c0017393:	e8 72 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017398:	83 c4 10             	add    esp,0x10
c001739b:	83 ec 08             	sub    esp,0x8
c001739e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00173a2:	68 e4 24 02 c0       	push   0xc00224e4
c00173a7:	e8 5e 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00173ac:	83 c4 10             	add    esp,0x10
c00173af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173b3:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00173b6:	c1 e0 05             	shl    eax,0x5
c00173b9:	8d 90 60 34 02 c0    	lea    edx,[eax-0x3ffdcba0]
c00173bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173c3:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00173c6:	83 ec 04             	sub    esp,0x4
c00173c9:	52                   	push   edx
c00173ca:	50                   	push   eax
c00173cb:	68 ef 24 02 c0       	push   0xc00224ef
c00173d0:	e8 35 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00173d5:	83 c4 10             	add    esp,0x10
c00173d8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00173dd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173e3:	83 ec 0c             	sub    esp,0xc
c00173e6:	50                   	push   eax
c00173e7:	e8 83 13 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c00173ec:	83 c4 10             	add    esp,0x10
c00173ef:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00173f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173fa:	83 ec 08             	sub    esp,0x8
c00173fd:	68 fe 24 02 c0       	push   0xc00224fe
c0017402:	50                   	push   eax
c0017403:	e8 a4 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017408:	83 c4 10             	add    esp,0x10
c001740b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017410:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017416:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001741a:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001741d:	83 ec 08             	sub    esp,0x8
c0017420:	52                   	push   edx
c0017421:	50                   	push   eax
c0017422:	e8 3f 16 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017427:	83 c4 10             	add    esp,0x10
c001742a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001742f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017435:	83 ec 08             	sub    esp,0x8
c0017438:	68 0c 25 02 c0       	push   0xc002250c
c001743d:	50                   	push   eax
c001743e:	e8 69 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017443:	83 c4 10             	add    esp,0x10
c0017446:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001744b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017451:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017456:	8b 12                	mov    edx,DWORD PTR [edx]
c0017458:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001745b:	83 c2 0c             	add    edx,0xc
c001745e:	83 ec 08             	sub    esp,0x8
c0017461:	52                   	push   edx
c0017462:	50                   	push   eax
c0017463:	e8 44 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017468:	83 c4 10             	add    esp,0x10
c001746b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017470:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017476:	83 ec 08             	sub    esp,0x8
c0017479:	68 15 25 02 c0       	push   0xc0022515
c001747e:	50                   	push   eax
c001747f:	e8 28 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017484:	83 c4 10             	add    esp,0x10
c0017487:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001748c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017492:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017496:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017499:	83 ec 08             	sub    esp,0x8
c001749c:	52                   	push   edx
c001749d:	50                   	push   eax
c001749e:	e8 c3 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00174a3:	83 c4 10             	add    esp,0x10
c00174a6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174b1:	83 ec 08             	sub    esp,0x8
c00174b4:	68 1d 25 02 c0       	push   0xc002251d
c00174b9:	50                   	push   eax
c00174ba:	e8 ed 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00174bf:	83 c4 10             	add    esp,0x10
c00174c2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174cd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174d1:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00174d4:	83 ec 08             	sub    esp,0x8
c00174d7:	52                   	push   edx
c00174d8:	50                   	push   eax
c00174d9:	e8 88 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00174de:	83 c4 10             	add    esp,0x10
c00174e1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174ec:	83 ec 08             	sub    esp,0x8
c00174ef:	68 25 25 02 c0       	push   0xc0022525
c00174f4:	50                   	push   eax
c00174f5:	e8 b2 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00174fa:	83 c4 10             	add    esp,0x10
c00174fd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017502:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017508:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001750c:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001750f:	83 ec 08             	sub    esp,0x8
c0017512:	52                   	push   edx
c0017513:	50                   	push   eax
c0017514:	e8 4d 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017519:	83 c4 10             	add    esp,0x10
c001751c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017521:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017527:	83 ec 08             	sub    esp,0x8
c001752a:	68 2d 25 02 c0       	push   0xc002252d
c001752f:	50                   	push   eax
c0017530:	e8 77 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017535:	83 c4 10             	add    esp,0x10
c0017538:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001753d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017543:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017547:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001754a:	83 ec 08             	sub    esp,0x8
c001754d:	52                   	push   edx
c001754e:	50                   	push   eax
c001754f:	e8 12 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017554:	83 c4 10             	add    esp,0x10
c0017557:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001755c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017562:	83 ec 08             	sub    esp,0x8
c0017565:	68 35 25 02 c0       	push   0xc0022535
c001756a:	50                   	push   eax
c001756b:	e8 3c 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017570:	83 c4 10             	add    esp,0x10
c0017573:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017578:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001757e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017582:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017585:	83 ec 08             	sub    esp,0x8
c0017588:	52                   	push   edx
c0017589:	50                   	push   eax
c001758a:	e8 d7 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001758f:	83 c4 10             	add    esp,0x10
c0017592:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017597:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001759d:	83 ec 08             	sub    esp,0x8
c00175a0:	68 3d 25 02 c0       	push   0xc002253d
c00175a5:	50                   	push   eax
c00175a6:	e8 01 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175ab:	83 c4 10             	add    esp,0x10
c00175ae:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175bd:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175c0:	83 ec 08             	sub    esp,0x8
c00175c3:	52                   	push   edx
c00175c4:	50                   	push   eax
c00175c5:	e8 9c 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175ca:	83 c4 10             	add    esp,0x10
c00175cd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175d8:	83 ec 08             	sub    esp,0x8
c00175db:	68 45 25 02 c0       	push   0xc0022545
c00175e0:	50                   	push   eax
c00175e1:	e8 c6 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175e6:	83 c4 10             	add    esp,0x10
c00175e9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175f4:	83 ec 08             	sub    esp,0x8
c00175f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175fb:	50                   	push   eax
c00175fc:	e8 65 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017601:	83 c4 10             	add    esp,0x10
c0017604:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017609:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001760f:	83 ec 08             	sub    esp,0x8
c0017612:	68 4e 25 02 c0       	push   0xc002254e
c0017617:	50                   	push   eax
c0017618:	e8 8f 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001761d:	83 c4 10             	add    esp,0x10
c0017620:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017625:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001762b:	83 ec 08             	sub    esp,0x8
c001762e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017632:	50                   	push   eax
c0017633:	e8 2e 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017638:	83 c4 10             	add    esp,0x10
c001763b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017640:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017646:	83 ec 08             	sub    esp,0x8
c0017649:	68 56 25 02 c0       	push   0xc0022556
c001764e:	50                   	push   eax
c001764f:	e8 58 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017654:	83 c4 10             	add    esp,0x10
c0017657:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001765c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017662:	83 ec 08             	sub    esp,0x8
c0017665:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017669:	50                   	push   eax
c001766a:	e8 f7 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001766f:	83 c4 10             	add    esp,0x10
c0017672:	fa                   	cli    
c0017673:	f4                   	hlt    
c0017674:	eb fe                	jmp    c0017674 <displayDebugInfo(regs*)+0x383>

c0017676 <HalSystemIdle()>:
c0017676:	56                   	push   esi
c0017677:	53                   	push   ebx
c0017678:	83 ec 14             	sub    esp,0x14
c001767b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017680:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017686:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001768c:	83 e0 04             	and    eax,0x4
c001768f:	0f b6 c0             	movzx  eax,al
c0017692:	85 c0                	test   eax,eax
c0017694:	0f 95 c0             	setne  al
c0017697:	0f b6 c0             	movzx  eax,al
c001769a:	85 c0                	test   eax,eax
c001769c:	74 4c                	je     c00176ea <HalSystemIdle()+0x74>
c001769e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00176a3:	83 ec 08             	sub    esp,0x8
c00176a6:	68 e1 00 00 00       	push   0xe1
c00176ab:	50                   	push   eax
c00176ac:	e8 31 fa fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00176b1:	83 c4 10             	add    esp,0x10
c00176b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00176bc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00176c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176c5:	83 e2 02             	and    edx,0x2
c00176c8:	89 d3                	mov    ebx,edx
c00176ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176ce:	83 e2 00             	and    edx,0x0
c00176d1:	89 d6                	mov    esi,edx
c00176d3:	56                   	push   esi
c00176d4:	53                   	push   ebx
c00176d5:	68 e1 00 00 00       	push   0xe1
c00176da:	50                   	push   eax
c00176db:	e8 2e fa fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00176e0:	83 c4 10             	add    esp,0x10
c00176e3:	e8 ac 8a fe ff       	call   c0000194 <doTPAUSE>
c00176e8:	eb 01                	jmp    c00176eb <HalSystemIdle()+0x75>
c00176ea:	f4                   	hlt    
c00176eb:	90                   	nop
c00176ec:	83 c4 14             	add    esp,0x14
c00176ef:	5b                   	pop    ebx
c00176f0:	5e                   	pop    esi
c00176f1:	c3                   	ret    

c00176f2 <displayProgramFault(char const*)>:
c00176f2:	83 ec 0c             	sub    esp,0xc
c00176f5:	83 ec 0c             	sub    esp,0xc
c00176f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176fc:	e8 09 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017701:	83 c4 10             	add    esp,0x10
c0017704:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017709:	8b 00                	mov    eax,DWORD PTR [eax]
c001770b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001770e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017714:	85 c0                	test   eax,eax
c0017716:	74 21                	je     c0017739 <displayProgramFault(char const*)+0x47>
c0017718:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001771d:	8b 00                	mov    eax,DWORD PTR [eax]
c001771f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017722:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017728:	6a 04                	push   0x4
c001772a:	6a 0f                	push   0xf
c001772c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017730:	50                   	push   eax
c0017731:	e8 e8 13 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017736:	83 c4 10             	add    esp,0x10
c0017739:	90                   	nop
c001773a:	83 c4 0c             	add    esp,0xc
c001773d:	c3                   	ret    

c001773e <gpFault(regs*, void*)>:
c001773e:	83 ec 1c             	sub    esp,0x1c
c0017741:	c7 05 74 97 02 c0 94 6b 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016b94
c001774b:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017750:	85 c0                	test   eax,eax
c0017752:	74 1e                	je     c0017772 <gpFault(regs*, void*)+0x34>
c0017754:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017759:	83 ec 0c             	sub    esp,0xc
c001775c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017760:	ff d0                	call   eax
c0017762:	83 c4 10             	add    esp,0x10
c0017765:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017769:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001776e:	85 c0                	test   eax,eax
c0017770:	75 2e                	jne    c00177a0 <gpFault(regs*, void*)+0x62>
c0017772:	83 ec 0c             	sub    esp,0xc
c0017775:	68 5e 25 02 c0       	push   0xc002255e
c001777a:	e8 73 ff ff ff       	call   c00176f2 <displayProgramFault(char const*)>
c001777f:	83 c4 10             	add    esp,0x10
c0017782:	83 ec 0c             	sub    esp,0xc
c0017785:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017789:	e8 63 fb ff ff       	call   c00172f1 <displayDebugInfo(regs*)>
c001778e:	83 c4 10             	add    esp,0x10
c0017791:	83 ec 0c             	sub    esp,0xc
c0017794:	6a 00                	push   0x0
c0017796:	e8 99 ed ff ff       	call   c0016534 <Thr::terminateFromIRQ(int)>
c001779b:	83 c4 10             	add    esp,0x10
c001779e:	eb 01                	jmp    c00177a1 <gpFault(regs*, void*)+0x63>
c00177a0:	90                   	nop
c00177a1:	83 c4 1c             	add    esp,0x1c
c00177a4:	c3                   	ret    

c00177a5 <pgFault(regs*, void*)>:
c00177a5:	83 ec 1c             	sub    esp,0x1c
c00177a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177ac:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00177af:	0f 20 d0             	mov    eax,cr2
c00177b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177ba:	83 ec 04             	sub    esp,0x4
c00177bd:	52                   	push   edx
c00177be:	50                   	push   eax
c00177bf:	68 3c 26 02 c0       	push   0xc002263c
c00177c4:	e8 41 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00177c9:	83 c4 10             	add    esp,0x10
c00177cc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00177d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00177d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177d6:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00177dc:	0f 20 d2             	mov    edx,cr2
c00177df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00177e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177e7:	83 ec 08             	sub    esp,0x8
c00177ea:	52                   	push   edx
c00177eb:	50                   	push   eax
c00177ec:	e8 89 2b ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c00177f1:	83 c4 10             	add    esp,0x10
c00177f4:	0f b6 c0             	movzx  eax,al
c00177f7:	85 c0                	test   eax,eax
c00177f9:	75 2e                	jne    c0017829 <pgFault(regs*, void*)+0x84>
c00177fb:	83 ec 0c             	sub    esp,0xc
c00177fe:	68 77 25 02 c0       	push   0xc0022577
c0017803:	e8 ea fe ff ff       	call   c00176f2 <displayProgramFault(char const*)>
c0017808:	83 c4 10             	add    esp,0x10
c001780b:	83 ec 0c             	sub    esp,0xc
c001780e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017812:	e8 da fa ff ff       	call   c00172f1 <displayDebugInfo(regs*)>
c0017817:	83 c4 10             	add    esp,0x10
c001781a:	83 ec 0c             	sub    esp,0xc
c001781d:	6a 00                	push   0x0
c001781f:	e8 10 ed ff ff       	call   c0016534 <Thr::terminateFromIRQ(int)>
c0017824:	83 c4 10             	add    esp,0x10
c0017827:	eb 01                	jmp    c001782a <pgFault(regs*, void*)+0x85>
c0017829:	90                   	nop
c001782a:	83 c4 1c             	add    esp,0x1c
c001782d:	c3                   	ret    

c001782e <otherISRHandler(regs*, void*)>:
c001782e:	83 ec 0c             	sub    esp,0xc
c0017831:	83 ec 0c             	sub    esp,0xc
c0017834:	68 64 26 02 c0       	push   0xc0022664
c0017839:	e8 b4 fe ff ff       	call   c00176f2 <displayProgramFault(char const*)>
c001783e:	83 c4 10             	add    esp,0x10
c0017841:	83 ec 0c             	sub    esp,0xc
c0017844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017848:	e8 a4 fa ff ff       	call   c00172f1 <displayDebugInfo(regs*)>
c001784d:	83 c4 10             	add    esp,0x10
c0017850:	83 ec 0c             	sub    esp,0xc
c0017853:	6a 00                	push   0x0
c0017855:	e8 da ec ff ff       	call   c0016534 <Thr::terminateFromIRQ(int)>
c001785a:	83 c4 10             	add    esp,0x10
c001785d:	90                   	nop
c001785e:	83 c4 0c             	add    esp,0xc
c0017861:	c3                   	ret    

c0017862 <opcodeFault(regs*, void*)>:
c0017862:	55                   	push   ebp
c0017863:	89 e5                	mov    ebp,esp
c0017865:	83 ec 08             	sub    esp,0x8
c0017868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001786b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001786e:	83 ec 08             	sub    esp,0x8
c0017871:	50                   	push   eax
c0017872:	68 82 25 02 c0       	push   0xc0022582
c0017877:	e8 8e 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001787c:	83 c4 10             	add    esp,0x10
c001787f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017884:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001788a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017890:	0f b6 c0             	movzx  eax,al
c0017893:	85 c0                	test   eax,eax
c0017895:	74 21                	je     c00178b8 <opcodeFault(regs*, void*)+0x56>
c0017897:	83 ec 0c             	sub    esp,0xc
c001789a:	68 8c 26 02 c0       	push   0xc002268c
c001789f:	e8 66 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178a4:	83 c4 10             	add    esp,0x10
c00178a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00178ad:	8d 50 19             	lea    edx,[eax+0x19]
c00178b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178b3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00178b6:	eb 2b                	jmp    c00178e3 <opcodeFault(regs*, void*)+0x81>
c00178b8:	83 ec 0c             	sub    esp,0xc
c00178bb:	68 90 25 02 c0       	push   0xc0022590
c00178c0:	e8 2d fe ff ff       	call   c00176f2 <displayProgramFault(char const*)>
c00178c5:	83 c4 10             	add    esp,0x10
c00178c8:	83 ec 0c             	sub    esp,0xc
c00178cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00178ce:	e8 1e fa ff ff       	call   c00172f1 <displayDebugInfo(regs*)>
c00178d3:	83 c4 10             	add    esp,0x10
c00178d6:	83 ec 0c             	sub    esp,0xc
c00178d9:	6a 00                	push   0x0
c00178db:	e8 54 ec ff ff       	call   c0016534 <Thr::terminateFromIRQ(int)>
c00178e0:	83 c4 10             	add    esp,0x10
c00178e3:	c9                   	leave  
c00178e4:	c3                   	ret    

c00178e5 <i386SaveCoprocessor(void*)>:
c00178e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178e9:	83 c0 3f             	add    eax,0x3f
c00178ec:	83 e0 c0             	and    eax,0xffffffc0
c00178ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178f3:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c00178f9 <i386LoadCoprocessor(void*)>:
c00178f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178fd:	83 c0 3f             	add    eax,0x3f
c0017900:	83 e0 c0             	and    eax,0xffffffc0
c0017903:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017907:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c001790d <x87EmulHandler(regs*, void*)>:
c001790d:	53                   	push   ebx
c001790e:	83 ec 08             	sub    esp,0x8
c0017911:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017916:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001791a:	74 10                	je     c001792c <x87EmulHandler(regs*, void*)+0x1f>
c001791c:	83 ec 0c             	sub    esp,0xc
c001791f:	68 9d 25 02 c0       	push   0xc002259d
c0017924:	e8 9c 98 ff ff       	call   c00111c5 <KePanic(char const*)>
c0017929:	83 c4 10             	add    esp,0x10
c001792c:	0f 20 c0             	mov    eax,cr0
c001792f:	a8 08                	test   al,0x8
c0017931:	74 59                	je     c001798c <x87EmulHandler(regs*, void*)+0x7f>
c0017933:	0f 06                	clts   
c0017935:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c001793a:	85 c0                	test   eax,eax
c001793c:	74 0e                	je     c001794c <x87EmulHandler(regs*, void*)+0x3f>
c001793e:	83 ec 0c             	sub    esp,0xc
c0017941:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017944:	e8 9c ff ff ff       	call   c00178e5 <i386SaveCoprocessor(void*)>
c0017949:	83 c4 10             	add    esp,0x10
c001794c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017952:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017956:	75 12                	jne    c001796a <x87EmulHandler(regs*, void*)+0x5d>
c0017958:	83 ec 0c             	sub    esp,0xc
c001795b:	68 40 02 00 00       	push   0x240
c0017960:	e8 6e 01 ff ff       	call   c0007ad3 <malloc>
c0017965:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017968:	eb 10                	jmp    c001797a <x87EmulHandler(regs*, void*)+0x6d>
c001796a:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c001796f:	83 ec 0c             	sub    esp,0xc
c0017972:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017975:	e8 7f ff ff ff       	call   c00178f9 <i386LoadCoprocessor(void*)>
c001797a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001797f:	83 c4 10             	add    esp,0x10
c0017982:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017987:	83 c4 08             	add    esp,0x8
c001798a:	5b                   	pop    ebx
c001798b:	c3                   	ret    
c001798c:	83 ec 0c             	sub    esp,0xc
c001798f:	68 b1 25 02 c0       	push   0xc00225b1
c0017994:	e8 71 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017999:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00179a1:	83 c4 18             	add    esp,0x18
c00179a4:	5b                   	pop    ebx
c00179a5:	e9 8a eb ff ff       	jmp    c0016534 <Thr::terminateFromIRQ(int)>

c00179aa <HalInitialiseCoprocessor()>:
c00179aa:	83 ec 10             	sub    esp,0x10
c00179ad:	6a 00                	push   0x0
c00179af:	68 0d 79 01 c0       	push   0xc001790d
c00179b4:	6a 07                	push   0x7
c00179b6:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c00179c0:	e8 99 51 ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00179c5:	e8 a6 70 00 00       	call   c001ea70 <avxDetect>
c00179ca:	83 c4 10             	add    esp,0x10
c00179cd:	85 c0                	test   eax,eax
c00179cf:	74 1c                	je     c00179ed <HalInitialiseCoprocessor()+0x43>
c00179d1:	c7 05 70 97 02 c0 9a ea 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ea9a
c00179db:	c7 05 6c 97 02 c0 ab ea 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001eaab
c00179e5:	83 c4 0c             	add    esp,0xc
c00179e8:	e9 cf 70 00 00       	jmp    c001eabc <avxInit>
c00179ed:	e8 0e 74 00 00       	call   c001ee00 <absolutelyNoChanceInHell>
c00179f2:	85 c0                	test   eax,eax
c00179f4:	74 1c                	je     c0017a12 <HalInitialiseCoprocessor()+0x68>
c00179f6:	c7 05 70 97 02 c0 18 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ee18
c0017a00:	c7 05 6c 97 02 c0 20 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ee20
c0017a0a:	83 c4 0c             	add    esp,0xc
c0017a0d:	e9 16 74 00 00       	jmp    c001ee28 <sseInit>
c0017a12:	e8 2f 74 00 00       	call   c001ee46 <x87Detect>
c0017a17:	85 c0                	test   eax,eax
c0017a19:	74 1c                	je     c0017a37 <HalInitialiseCoprocessor()+0x8d>
c0017a1b:	c7 05 70 97 02 c0 61 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ee61
c0017a25:	c7 05 6c 97 02 c0 68 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ee68
c0017a2f:	83 c4 0c             	add    esp,0xc
c0017a32:	e9 38 74 00 00       	jmp    c001ee6f <x87Init>
c0017a37:	c7 05 70 97 02 c0 be 72 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc00172be
c0017a41:	c7 05 6c 97 02 c0 be 72 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc00172be
c0017a4b:	0f 20 c0             	mov    eax,cr0
c0017a4e:	83 c8 04             	or     eax,0x4
c0017a51:	0f 22 c0             	mov    cr0,eax
c0017a54:	83 c4 0c             	add    esp,0xc
c0017a57:	c3                   	ret    

c0017a58 <HalPanic(char const*)>:
c0017a58:	53                   	push   ebx
c0017a59:	83 ec 10             	sub    esp,0x10
c0017a5c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017a60:	fa                   	cli    
c0017a61:	53                   	push   ebx
c0017a62:	68 c7 25 02 c0       	push   0xc00225c7
c0017a67:	e8 9e 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017a6c:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017a71:	83 c4 10             	add    esp,0x10
c0017a74:	85 c0                	test   eax,eax
c0017a76:	74 09                	je     c0017a81 <HalPanic(char const*)+0x29>
c0017a78:	83 ec 0c             	sub    esp,0xc
c0017a7b:	53                   	push   ebx
c0017a7c:	ff d0                	call   eax
c0017a7e:	83 c4 10             	add    esp,0x10
c0017a81:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017a86:	85 c0                	test   eax,eax
c0017a88:	0f 84 dc 00 00 00    	je     c0017b6a <HalPanic(char const*)+0x112>
c0017a8e:	52                   	push   edx
c0017a8f:	6a 01                	push   0x1
c0017a91:	6a 0f                	push   0xf
c0017a93:	50                   	push   eax
c0017a94:	e8 31 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017a99:	59                   	pop    ecx
c0017a9a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017aa0:	e8 15 0d ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017aa5:	58                   	pop    eax
c0017aa6:	5a                   	pop    edx
c0017aa7:	68 c4 08 02 c0       	push   0xc00208c4
c0017aac:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ab2:	e8 4b 0b ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017ab7:	83 c4 0c             	add    esp,0xc
c0017aba:	6a 01                	push   0x1
c0017abc:	6a 0f                	push   0xf
c0017abe:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ac4:	e8 01 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017ac9:	59                   	pop    ecx
c0017aca:	58                   	pop    eax
c0017acb:	68 e0 25 02 c0       	push   0xc00225e0
c0017ad0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ad6:	e8 d1 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017adb:	83 c4 0c             	add    esp,0xc
c0017ade:	6a 0f                	push   0xf
c0017ae0:	6a 01                	push   0x1
c0017ae2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ae8:	e8 dd 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017aed:	58                   	pop    eax
c0017aee:	5a                   	pop    edx
c0017aef:	68 e9 25 02 c0       	push   0xc00225e9
c0017af4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017afa:	e8 ad 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017aff:	83 c4 0c             	add    esp,0xc
c0017b02:	6a 01                	push   0x1
c0017b04:	6a 0f                	push   0xf
c0017b06:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b0c:	e8 b9 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b11:	59                   	pop    ecx
c0017b12:	58                   	pop    eax
c0017b13:	68 2d 26 02 c0       	push   0xc002262d
c0017b18:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b1e:	e8 89 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b23:	58                   	pop    eax
c0017b24:	5a                   	pop    edx
c0017b25:	68 f6 25 02 c0       	push   0xc00225f6
c0017b2a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b30:	e8 77 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b35:	59                   	pop    ecx
c0017b36:	58                   	pop    eax
c0017b37:	68 30 26 02 c0       	push   0xc0022630
c0017b3c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b42:	e8 65 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b47:	58                   	pop    eax
c0017b48:	5a                   	pop    edx
c0017b49:	53                   	push   ebx
c0017b4a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b50:	e8 57 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b55:	59                   	pop    ecx
c0017b56:	5b                   	pop    ebx
c0017b57:	68 2d 26 02 c0       	push   0xc002262d
c0017b5c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b62:	e8 45 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b67:	83 c4 10             	add    esp,0x10
c0017b6a:	eb fe                	jmp    c0017b6a <HalPanic(char const*)+0x112>

c0017b6c <HalQueryPerformanceCounter()>:
c0017b6c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b71:	31 d2                	xor    edx,edx
c0017b73:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017b79:	31 c0                	xor    eax,eax
c0017b7b:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017b82:	74 02                	je     c0017b86 <HalQueryPerformanceCounter()+0x1a>
c0017b84:	0f 31                	rdtsc  
c0017b86:	c3                   	ret    

c0017b87 <HalInitialise()>:
c0017b87:	53                   	push   ebx
c0017b88:	83 ec 08             	sub    esp,0x8
c0017b8b:	e8 05 52 ff ff       	call   c000cd95 <setupINTS()>
c0017b90:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b95:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017b9c:	75 0f                	jne    c0017bad <HalInitialise()+0x26>
c0017b9e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017ba4:	83 e2 fe             	and    edx,0xfffffffe
c0017ba7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017bad:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017bb4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017bba:	83 e2 fe             	and    edx,0xfffffffe
c0017bbd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017bc3:	e8 a0 02 00 00       	call   c0017e68 <picOpen()>
c0017bc8:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017bcf:	74 0a                	je     c0017bdb <HalInitialise()+0x54>
c0017bd1:	e8 e2 01 00 00       	call   c0017db8 <picDisable()>
c0017bd6:	e8 0d 68 00 00       	call   c001e3e8 <apicOpen()>
c0017bdb:	50                   	push   eax
c0017bdc:	bb 0f 00 00 00       	mov    ebx,0xf
c0017be1:	6a 00                	push   0x0
c0017be3:	68 2e 78 01 c0       	push   0xc001782e
c0017be8:	6a 00                	push   0x0
c0017bea:	e8 6f 4f ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bef:	83 c4 0c             	add    esp,0xc
c0017bf2:	6a 00                	push   0x0
c0017bf4:	68 2e 78 01 c0       	push   0xc001782e
c0017bf9:	6a 01                	push   0x1
c0017bfb:	e8 5e 4f ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c00:	83 c4 0c             	add    esp,0xc
c0017c03:	6a 00                	push   0x0
c0017c05:	68 bf 72 01 c0       	push   0xc00172bf
c0017c0a:	6a 02                	push   0x2
c0017c0c:	e8 4d 4f ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c11:	83 c4 0c             	add    esp,0xc
c0017c14:	6a 00                	push   0x0
c0017c16:	68 2e 78 01 c0       	push   0xc001782e
c0017c1b:	6a 03                	push   0x3
c0017c1d:	e8 3c 4f ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c22:	83 c4 0c             	add    esp,0xc
c0017c25:	6a 00                	push   0x0
c0017c27:	68 2e 78 01 c0       	push   0xc001782e
c0017c2c:	6a 04                	push   0x4
c0017c2e:	e8 2b 4f ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c33:	83 c4 0c             	add    esp,0xc
c0017c36:	6a 00                	push   0x0
c0017c38:	68 2e 78 01 c0       	push   0xc001782e
c0017c3d:	6a 05                	push   0x5
c0017c3f:	e8 1a 4f ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c44:	83 c4 0c             	add    esp,0xc
c0017c47:	6a 00                	push   0x0
c0017c49:	68 62 78 01 c0       	push   0xc0017862
c0017c4e:	6a 06                	push   0x6
c0017c50:	e8 09 4f ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c55:	83 c4 0c             	add    esp,0xc
c0017c58:	6a 00                	push   0x0
c0017c5a:	68 d8 72 01 c0       	push   0xc00172d8
c0017c5f:	6a 08                	push   0x8
c0017c61:	e8 f8 4e ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c66:	83 c4 0c             	add    esp,0xc
c0017c69:	6a 00                	push   0x0
c0017c6b:	68 2e 78 01 c0       	push   0xc001782e
c0017c70:	6a 09                	push   0x9
c0017c72:	e8 e7 4e ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c77:	83 c4 0c             	add    esp,0xc
c0017c7a:	6a 00                	push   0x0
c0017c7c:	68 2e 78 01 c0       	push   0xc001782e
c0017c81:	6a 0a                	push   0xa
c0017c83:	e8 d6 4e ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c88:	83 c4 0c             	add    esp,0xc
c0017c8b:	6a 00                	push   0x0
c0017c8d:	68 2e 78 01 c0       	push   0xc001782e
c0017c92:	6a 0b                	push   0xb
c0017c94:	e8 c5 4e ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c99:	83 c4 0c             	add    esp,0xc
c0017c9c:	6a 00                	push   0x0
c0017c9e:	68 3e 77 01 c0       	push   0xc001773e
c0017ca3:	6a 0d                	push   0xd
c0017ca5:	e8 b4 4e ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017caa:	83 c4 0c             	add    esp,0xc
c0017cad:	6a 00                	push   0x0
c0017caf:	68 a5 77 01 c0       	push   0xc00177a5
c0017cb4:	6a 0e                	push   0xe
c0017cb6:	e8 a3 4e ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cbb:	83 c4 10             	add    esp,0x10
c0017cbe:	50                   	push   eax
c0017cbf:	6a 00                	push   0x0
c0017cc1:	68 2e 78 01 c0       	push   0xc001782e
c0017cc6:	53                   	push   ebx
c0017cc7:	43                   	inc    ebx
c0017cc8:	e8 91 4e ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ccd:	83 c4 10             	add    esp,0x10
c0017cd0:	83 fb 1e             	cmp    ebx,0x1e
c0017cd3:	75 e9                	jne    c0017cbe <HalInitialise()+0x137>
c0017cd5:	50                   	push   eax
c0017cd6:	6a 00                	push   0x0
c0017cd8:	68 bf 24 01 c0       	push   0xc00124bf
c0017cdd:	6a 60                	push   0x60
c0017cdf:	e8 7a 4e ff ff       	call   c000cb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ce4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017ce9:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017cf3:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017cfa:	e8 d4 fd fe ff       	call   c0007ad3 <malloc>
c0017cff:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d02:	89 c3                	mov    ebx,eax
c0017d04:	e8 37 09 00 00       	call   c0018640 <RTC::RTC()>
c0017d09:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017d13:	5a                   	pop    edx
c0017d14:	59                   	pop    ecx
c0017d15:	53                   	push   ebx
c0017d16:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d1c:	e8 07 49 ff ff       	call   c000c628 <Device::addChild(Device*)>
c0017d21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d23:	6a 00                	push   0x0
c0017d25:	6a 00                	push   0x0
c0017d27:	6a 00                	push   0x0
c0017d29:	53                   	push   ebx
c0017d2a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d2d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d32:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017d38:	83 c4 28             	add    esp,0x28
c0017d3b:	5b                   	pop    ebx
c0017d3c:	c3                   	ret    

c0017d3d <HalMakeBeep(int)>:
c0017d3d:	53                   	push   ebx
c0017d3e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017d42:	85 db                	test   ebx,ebx
c0017d44:	75 07                	jne    c0017d4d <HalMakeBeep(int)+0x10>
c0017d46:	e4 61                	in     al,0x61
c0017d48:	83 e0 fc             	and    eax,0xfffffffc
c0017d4b:	eb 26                	jmp    c0017d73 <HalMakeBeep(int)+0x36>
c0017d4d:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017d52:	99                   	cdq    
c0017d53:	f7 fb                	idiv   ebx
c0017d55:	89 c1                	mov    ecx,eax
c0017d57:	b0 b6                	mov    al,0xb6
c0017d59:	e6 43                	out    0x43,al
c0017d5b:	88 c8                	mov    al,cl
c0017d5d:	e6 42                	out    0x42,al
c0017d5f:	89 c8                	mov    eax,ecx
c0017d61:	c1 e8 08             	shr    eax,0x8
c0017d64:	e6 42                	out    0x42,al
c0017d66:	e4 61                	in     al,0x61
c0017d68:	89 c2                	mov    edx,eax
c0017d6a:	83 ca 03             	or     edx,0x3
c0017d6d:	38 d0                	cmp    al,dl
c0017d6f:	74 04                	je     c0017d75 <HalMakeBeep(int)+0x38>
c0017d71:	88 d0                	mov    al,dl
c0017d73:	e6 61                	out    0x61,al
c0017d75:	5b                   	pop    ebx
c0017d76:	c3                   	ret    

c0017d77 <HalGetRand()>:
c0017d77:	31 c0                	xor    eax,eax
c0017d79:	c3                   	ret    

c0017d7a <HalEndOfInterrupt(int)>:
c0017d7a:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017d81:	74 23                	je     c0017da6 <HalEndOfInterrupt(int)+0x2c>
c0017d83:	83 ec 14             	sub    esp,0x14
c0017d86:	6a 1b                	push   0x1b
c0017d88:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d8e:	e8 4f f3 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017d93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017d98:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017da2:	83 c4 1c             	add    esp,0x1c
c0017da5:	c3                   	ret    
c0017da6:	e9 41 02 00 00       	jmp    c0017fec <picEOI(int)>

c0017dab <HalRestart()>:
c0017dab:	c3                   	ret    

c0017dac <HalShutdown()>:
c0017dac:	c3                   	ret    

c0017dad <HalSleep()>:
c0017dad:	c3                   	ret    
c0017dae:	66 90                	xchg   ax,ax

c0017db0 <picIoWait()>:
c0017db0:	eb 00                	jmp    c0017db2 <picIoWait()+0x2>
c0017db2:	eb 00                	jmp    c0017db4 <picIoWait()+0x4>
c0017db4:	90                   	nop
c0017db5:	c3                   	ret    
c0017db6:	66 90                	xchg   ax,ax

c0017db8 <picDisable()>:
c0017db8:	83 ec 10             	sub    esp,0x10
c0017dbb:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017dc2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017dc7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017dcb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017dd0:	ee                   	out    dx,al
c0017dd1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017dd8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017ddd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017de1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017de6:	ee                   	out    dx,al
c0017de7:	90                   	nop
c0017de8:	83 c4 10             	add    esp,0x10
c0017deb:	c3                   	ret    

c0017dec <picGetIRQReg(int)>:
c0017dec:	83 ec 10             	sub    esp,0x10
c0017def:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017df3:	0f b6 c0             	movzx  eax,al
c0017df6:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017dfd:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017e01:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017e05:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017e0a:	ee                   	out    dx,al
c0017e0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e0f:	0f b6 c0             	movzx  eax,al
c0017e12:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017e19:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017e1d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017e21:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017e26:	ee                   	out    dx,al
c0017e27:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017e2e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017e33:	89 c2                	mov    edx,eax
c0017e35:	ec                   	in     al,dx
c0017e36:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017e3a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e3e:	0f b6 c0             	movzx  eax,al
c0017e41:	c1 e0 08             	shl    eax,0x8
c0017e44:	89 c1                	mov    ecx,eax
c0017e46:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017e4d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017e52:	89 c2                	mov    edx,eax
c0017e54:	ec                   	in     al,dx
c0017e55:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017e59:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017e5d:	0f b6 c0             	movzx  eax,al
c0017e60:	09 c8                	or     eax,ecx
c0017e62:	83 c4 10             	add    esp,0x10
c0017e65:	c3                   	ret    
c0017e66:	66 90                	xchg   ax,ax

c0017e68 <picOpen()>:
c0017e68:	83 ec 50             	sub    esp,0x50
c0017e6b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017e72:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017e77:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017e7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e7f:	ee                   	out    dx,al
c0017e80:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017e87:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017e8c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017e90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e94:	ee                   	out    dx,al
c0017e95:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017e9d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017ea5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017eac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017eb0:	89 c2                	mov    edx,eax
c0017eb2:	ec                   	in     al,dx
c0017eb3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017eb7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017ebb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017ebf:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017ec6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017eca:	89 c2                	mov    edx,eax
c0017ecc:	ec                   	in     al,dx
c0017ecd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017ed1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017ed5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017ed9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017ee0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017ee5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017ee9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017eed:	ee                   	out    dx,al
c0017eee:	e8 bd fe ff ff       	call   c0017db0 <picIoWait()>
c0017ef3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017efa:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017eff:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017f03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f07:	ee                   	out    dx,al
c0017f08:	e8 a3 fe ff ff       	call   c0017db0 <picIoWait()>
c0017f0d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f11:	0f b6 c0             	movzx  eax,al
c0017f14:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017f1b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017f1f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017f23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f27:	ee                   	out    dx,al
c0017f28:	e8 83 fe ff ff       	call   c0017db0 <picIoWait()>
c0017f2d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017f31:	0f b6 c0             	movzx  eax,al
c0017f34:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017f3b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017f3f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017f43:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f47:	ee                   	out    dx,al
c0017f48:	e8 63 fe ff ff       	call   c0017db0 <picIoWait()>
c0017f4d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017f54:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017f59:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017f5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f61:	ee                   	out    dx,al
c0017f62:	e8 49 fe ff ff       	call   c0017db0 <picIoWait()>
c0017f67:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017f6e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017f73:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017f77:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017f7b:	ee                   	out    dx,al
c0017f7c:	e8 2f fe ff ff       	call   c0017db0 <picIoWait()>
c0017f81:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017f88:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017f8d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017f91:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017f95:	ee                   	out    dx,al
c0017f96:	e8 15 fe ff ff       	call   c0017db0 <picIoWait()>
c0017f9b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017fa2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017fa7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017fab:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017faf:	ee                   	out    dx,al
c0017fb0:	e8 fb fd ff ff       	call   c0017db0 <picIoWait()>
c0017fb5:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017fba:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017fc1:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017fc5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017fc9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017fcd:	ee                   	out    dx,al
c0017fce:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017fd3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017fda:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017fde:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017fe2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017fe6:	ee                   	out    dx,al
c0017fe7:	90                   	nop
c0017fe8:	83 c4 50             	add    esp,0x50
c0017feb:	c3                   	ret    

c0017fec <picEOI(int)>:
c0017fec:	83 ec 10             	sub    esp,0x10
c0017fef:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017ff4:	75 1e                	jne    c0018014 <picEOI(int)+0x28>
c0017ff6:	6a 0b                	push   0xb
c0017ff8:	e8 ef fd ff ff       	call   c0017dec <picGetIRQReg(int)>
c0017ffd:	83 c4 04             	add    esp,0x4
c0018000:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018005:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001800a:	25 80 00 00 00       	and    eax,0x80
c001800f:	74 73                	je     c0018084 <picEOI(int)+0x98>
c0018011:	8d 76 00             	lea    esi,[esi+0x0]
c0018014:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018019:	75 31                	jne    c001804c <picEOI(int)+0x60>
c001801b:	6a 0b                	push   0xb
c001801d:	e8 ca fd ff ff       	call   c0017dec <picGetIRQReg(int)>
c0018022:	83 c4 04             	add    esp,0x4
c0018025:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001802a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001802e:	98                   	cwde   
c001802f:	85 c0                	test   eax,eax
c0018031:	78 19                	js     c001804c <picEOI(int)+0x60>
c0018033:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001803a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001803f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018043:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018048:	ee                   	out    dx,al
c0018049:	eb 3d                	jmp    c0018088 <picEOI(int)+0x9c>
c001804b:	90                   	nop
c001804c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018051:	7e 19                	jle    c001806c <picEOI(int)+0x80>
c0018053:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001805a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001805f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018063:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018068:	ee                   	out    dx,al
c0018069:	8d 76 00             	lea    esi,[esi+0x0]
c001806c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018073:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018078:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001807c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018081:	ee                   	out    dx,al
c0018082:	eb 04                	jmp    c0018088 <picEOI(int)+0x9c>
c0018084:	90                   	nop
c0018085:	8d 76 00             	lea    esi,[esi+0x0]
c0018088:	83 c4 10             	add    esp,0x10
c001808b:	c3                   	ret    

c001808c <RTC::open(int, int, void*)>:
c001808c:	31 c0                	xor    eax,eax
c001808e:	c3                   	ret    
c001808f:	90                   	nop

c0018090 <RTC::close(int, int, void*)>:
c0018090:	31 c0                	xor    eax,eax
c0018092:	c3                   	ret    
c0018093:	90                   	nop

c0018094 <RTC::timeInSecondsUTC()>:
c0018094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018098:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001809e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00180a4:	c3                   	ret    
c00180a5:	90                   	nop

c00180a6 <RTC::timeInDatetimeUTC()>:
c00180a6:	53                   	push   ebx
c00180a7:	83 ec 14             	sub    esp,0x14
c00180aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00180b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00180b4:	50                   	push   eax
c00180b5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00180b8:	83 c4 0c             	add    esp,0xc
c00180bb:	52                   	push   edx
c00180bc:	50                   	push   eax
c00180bd:	53                   	push   ebx
c00180be:	e8 d9 42 ff ff       	call   c000c39c <secondsToDatetime(unsigned long long)>
c00180c3:	89 d8                	mov    eax,ebx
c00180c5:	83 c4 14             	add    esp,0x14
c00180c8:	5b                   	pop    ebx
c00180c9:	c2 04 00             	ret    0x4

c00180cc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00180cc:	56                   	push   esi
c00180cd:	53                   	push   ebx
c00180ce:	83 ec 14             	sub    esp,0x14
c00180d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00180d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180d7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00180da:	8d 44 24 08          	lea    eax,[esp+0x8]
c00180de:	52                   	push   edx
c00180df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180e7:	50                   	push   eax
c00180e8:	e8 af 42 ff ff       	call   c000c39c <secondsToDatetime(unsigned long long)>
c00180ed:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00180f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00180fd:	89 f0                	mov    eax,esi
c00180ff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018103:	83 c4 20             	add    esp,0x20
c0018106:	5b                   	pop    ebx
c0018107:	5e                   	pop    esi
c0018108:	ff e0                	jmp    eax

c001810a <RTC::~RTC()>:
c001810a:	83 ec 0c             	sub    esp,0xc
c001810d:	ba cc 26 02 c0       	mov    edx,0xc00226cc
c0018112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018116:	89 10                	mov    DWORD PTR [eax],edx
c0018118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001811c:	83 ec 0c             	sub    esp,0xc
c001811f:	50                   	push   eax
c0018120:	e8 03 40 ff ff       	call   c000c128 <Clock::~Clock()>
c0018125:	83 c4 10             	add    esp,0x10
c0018128:	90                   	nop
c0018129:	83 c4 0c             	add    esp,0xc
c001812c:	c3                   	ret    
c001812d:	90                   	nop

c001812e <RTC::~RTC()>:
c001812e:	83 ec 0c             	sub    esp,0xc
c0018131:	83 ec 0c             	sub    esp,0xc
c0018134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018138:	e8 cd ff ff ff       	call   c001810a <RTC::~RTC()>
c001813d:	83 c4 10             	add    esp,0x10
c0018140:	83 ec 08             	sub    esp,0x8
c0018143:	68 60 01 00 00       	push   0x160
c0018148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001814c:	e8 bb 26 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018151:	83 c4 10             	add    esp,0x10
c0018154:	83 c4 0c             	add    esp,0xc
c0018157:	c3                   	ret    

c0018158 <RTC::get_update_in_progress_flag()>:
c0018158:	83 ec 14             	sub    esp,0x14
c001815b:	6a 0a                	push   0xa
c001815d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018163:	e8 32 f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018168:	83 c4 1c             	add    esp,0x1c
c001816b:	0f b6 c0             	movzx  eax,al
c001816e:	c1 e8 07             	shr    eax,0x7
c0018171:	c3                   	ret    

c0018172 <RTC::completeRTCRefresh()>:
c0018172:	55                   	push   ebp
c0018173:	57                   	push   edi
c0018174:	56                   	push   esi
c0018175:	53                   	push   ebx
c0018176:	83 ec 3c             	sub    esp,0x3c
c0018179:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c001817f:	83 ec 0c             	sub    esp,0xc
c0018182:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018186:	e8 cd ff ff ff       	call   c0018158 <RTC::get_update_in_progress_flag()>
c001818b:	83 c4 10             	add    esp,0x10
c001818e:	84 c0                	test   al,al
c0018190:	74 0e                	je     c00181a0 <RTC::completeRTCRefresh()+0x2e>
c0018192:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018198:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c001819e:	73 df                	jae    c001817f <RTC::completeRTCRefresh()+0xd>
c00181a0:	50                   	push   eax
c00181a1:	50                   	push   eax
c00181a2:	6a 00                	push   0x0
c00181a4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181aa:	e8 eb ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181af:	89 c7                	mov    edi,eax
c00181b1:	58                   	pop    eax
c00181b2:	5a                   	pop    edx
c00181b3:	6a 02                	push   0x2
c00181b5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181bb:	e8 da ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181c0:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00181c4:	59                   	pop    ecx
c00181c5:	5b                   	pop    ebx
c00181c6:	6a 04                	push   0x4
c00181c8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181ce:	e8 c7 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181d3:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00181d7:	5e                   	pop    esi
c00181d8:	5d                   	pop    ebp
c00181d9:	6a 07                	push   0x7
c00181db:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181e1:	e8 b4 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181e6:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00181ea:	58                   	pop    eax
c00181eb:	5a                   	pop    edx
c00181ec:	6a 08                	push   0x8
c00181ee:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181f4:	e8 a1 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181f9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00181fd:	59                   	pop    ecx
c00181fe:	5b                   	pop    ebx
c00181ff:	6a 09                	push   0x9
c0018201:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018207:	e8 8e ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001820c:	0f b6 c0             	movzx  eax,al
c001820f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018213:	83 c4 10             	add    esp,0x10
c0018216:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c001821c:	83 ec 0c             	sub    esp,0xc
c001821f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018223:	e8 30 ff ff ff       	call   c0018158 <RTC::get_update_in_progress_flag()>
c0018228:	83 c4 10             	add    esp,0x10
c001822b:	84 c0                	test   al,al
c001822d:	74 0e                	je     c001823d <RTC::completeRTCRefresh()+0xcb>
c001822f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018235:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c001823b:	73 df                	jae    c001821c <RTC::completeRTCRefresh()+0xaa>
c001823d:	51                   	push   ecx
c001823e:	51                   	push   ecx
c001823f:	6a 00                	push   0x0
c0018241:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018247:	e8 4e ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001824c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018250:	5b                   	pop    ebx
c0018251:	5e                   	pop    esi
c0018252:	6a 02                	push   0x2
c0018254:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001825a:	e8 3b ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001825f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018263:	5d                   	pop    ebp
c0018264:	58                   	pop    eax
c0018265:	6a 04                	push   0x4
c0018267:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001826d:	e8 28 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018272:	88 c3                	mov    bl,al
c0018274:	58                   	pop    eax
c0018275:	5a                   	pop    edx
c0018276:	6a 07                	push   0x7
c0018278:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001827e:	e8 17 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018283:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018287:	59                   	pop    ecx
c0018288:	5e                   	pop    esi
c0018289:	6a 08                	push   0x8
c001828b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018291:	e8 04 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018296:	5d                   	pop    ebp
c0018297:	89 c6                	mov    esi,eax
c0018299:	58                   	pop    eax
c001829a:	6a 09                	push   0x9
c001829c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182a2:	e8 f3 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182a7:	89 f9                	mov    ecx,edi
c00182a9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00182ad:	83 c4 10             	add    esp,0x10
c00182b0:	0f b6 e8             	movzx  ebp,al
c00182b3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00182b8:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00182bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00182c0:	74 27                	je     c00182e9 <RTC::completeRTCRefresh()+0x177>
c00182c2:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00182c6:	89 f0                	mov    eax,esi
c00182c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00182cc:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00182d0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00182d4:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00182d8:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00182dc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00182e0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00182e4:	e9 2d ff ff ff       	jmp    c0018216 <RTC::completeRTCRefresh()+0xa4>
c00182e9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00182ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182f2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00182f6:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c00182fa:	75 c6                	jne    c00182c2 <RTC::completeRTCRefresh()+0x150>
c00182fc:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018301:	89 f1                	mov    ecx,esi
c0018303:	0f b6 fb             	movzx  edi,bl
c0018306:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001830a:	0f b6 c9             	movzx  ecx,cl
c001830d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018311:	89 f1                	mov    ecx,esi
c0018313:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018317:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001831b:	0f 94 c2             	sete   dl
c001831e:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018322:	0f 94 c0             	sete   al
c0018325:	21 d0                	and    eax,edx
c0018327:	31 d2                	xor    edx,edx
c0018329:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001832d:	0f 94 c2             	sete   dl
c0018330:	85 c2                	test   edx,eax
c0018332:	74 8e                	je     c00182c2 <RTC::completeRTCRefresh()+0x150>
c0018334:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018338:	75 88                	jne    c00182c2 <RTC::completeRTCRefresh()+0x150>
c001833a:	52                   	push   edx
c001833b:	52                   	push   edx
c001833c:	6a 0b                	push   0xb
c001833e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018344:	e8 51 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018349:	83 c4 10             	add    esp,0x10
c001834c:	a8 04                	test   al,0x4
c001834e:	75 7a                	jne    c00183ca <RTC::completeRTCRefresh()+0x258>
c0018350:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018354:	c1 ef 04             	shr    edi,0x4
c0018357:	83 e6 0f             	and    esi,0xf
c001835a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001835e:	c1 ed 04             	shr    ebp,0x4
c0018361:	6b ed 0a             	imul   ebp,ebp,0xa
c0018364:	c1 ea 04             	shr    edx,0x4
c0018367:	6b d2 0a             	imul   edx,edx,0xa
c001836a:	83 e1 0f             	and    ecx,0xf
c001836d:	01 d1                	add    ecx,edx
c001836f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018373:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001837b:	c1 ea 04             	shr    edx,0x4
c001837e:	6b d2 0a             	imul   edx,edx,0xa
c0018381:	83 e1 0f             	and    ecx,0xf
c0018384:	01 d1                	add    ecx,edx
c0018386:	89 fa                	mov    edx,edi
c0018388:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001838c:	83 e2 07             	and    edx,0x7
c001838f:	89 d9                	mov    ecx,ebx
c0018391:	6b d2 0a             	imul   edx,edx,0xa
c0018394:	83 e1 0f             	and    ecx,0xf
c0018397:	83 e3 80             	and    ebx,0xffffff80
c001839a:	01 d1                	add    ecx,edx
c001839c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183a0:	09 cb                	or     ebx,ecx
c00183a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00183a6:	c1 ea 04             	shr    edx,0x4
c00183a9:	6b d2 0a             	imul   edx,edx,0xa
c00183ac:	83 e1 0f             	and    ecx,0xf
c00183af:	01 d1                	add    ecx,edx
c00183b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00183b5:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00183b9:	c1 ea 04             	shr    edx,0x4
c00183bc:	6b d2 0a             	imul   edx,edx,0xa
c00183bf:	01 d6                	add    esi,edx
c00183c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00183c5:	83 e2 0f             	and    edx,0xf
c00183c8:	01 d5                	add    ebp,edx
c00183ca:	a8 02                	test   al,0x2
c00183cc:	75 15                	jne    c00183e3 <RTC::completeRTCRefresh()+0x271>
c00183ce:	f6 c3 80             	test   bl,0x80
c00183d1:	74 10                	je     c00183e3 <RTC::completeRTCRefresh()+0x271>
c00183d3:	83 e3 7f             	and    ebx,0x7f
c00183d6:	b9 18 00 00 00       	mov    ecx,0x18
c00183db:	8d 43 0c             	lea    eax,[ebx+0xc]
c00183de:	99                   	cdq    
c00183df:	f7 f9                	idiv   ecx
c00183e1:	88 d3                	mov    bl,dl
c00183e3:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00183e9:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00183ef:	77 06                	ja     c00183f7 <RTC::completeRTCRefresh()+0x285>
c00183f1:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00183f7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00183fc:	31 c9                	xor    ecx,ecx
c00183fe:	31 d2                	xor    edx,edx
c0018400:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0018404:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018408:	89 cd                	mov    ebp,ecx
c001840a:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001840e:	c1 e7 10             	shl    edi,0x10
c0018411:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018417:	c1 e0 10             	shl    eax,0x10
c001841a:	09 c5                	or     ebp,eax
c001841c:	89 e9                	mov    ecx,ebp
c001841e:	0f b7 c2             	movzx  eax,dx
c0018421:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018425:	09 f8                	or     eax,edi
c0018427:	89 c2                	mov    edx,eax
c0018429:	50                   	push   eax
c001842a:	50                   	push   eax
c001842b:	88 d9                	mov    cl,bl
c001842d:	51                   	push   ecx
c001842e:	52                   	push   edx
c001842f:	e8 e3 3d ff ff       	call   c000c217 <datetimeToSeconds(datetime_t)>
c0018434:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018438:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001843e:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018444:	83 c4 4c             	add    esp,0x4c
c0018447:	5b                   	pop    ebx
c0018448:	5e                   	pop    esi
c0018449:	5f                   	pop    edi
c001844a:	5d                   	pop    ebp
c001844b:	c3                   	ret    

c001844c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001844c:	55                   	push   ebp
c001844d:	57                   	push   edi
c001844e:	56                   	push   esi
c001844f:	53                   	push   ebx
c0018450:	83 ec 30             	sub    esp,0x30
c0018453:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018457:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001845b:	6a 00                	push   0x0
c001845d:	6a 00                	push   0x0
c001845f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018465:	e8 48 ee fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001846a:	83 c4 0c             	add    esp,0xc
c001846d:	6a 00                	push   0x0
c001846f:	6a 02                	push   0x2
c0018471:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018477:	e8 36 ee fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001847c:	89 f8                	mov    eax,edi
c001847e:	89 f9                	mov    ecx,edi
c0018480:	0f b6 c4             	movzx  eax,ah
c0018483:	31 d2                	xor    edx,edx
c0018485:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018489:	c1 e9 10             	shr    ecx,0x10
c001848c:	89 f0                	mov    eax,esi
c001848e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018492:	89 f0                	mov    eax,esi
c0018494:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018498:	0f b6 c4             	movzx  eax,ah
c001849b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001849f:	89 f0                	mov    eax,esi
c00184a1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00184a5:	c1 e8 10             	shr    eax,0x10
c00184a8:	b9 64 00 00 00       	mov    ecx,0x64
c00184ad:	f7 f1                	div    ecx
c00184af:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00184b3:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00184b7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00184bb:	59                   	pop    ecx
c00184bc:	5b                   	pop    ebx
c00184bd:	89 fb                	mov    ebx,edi
c00184bf:	6a 0b                	push   0xb
c00184c1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184c7:	e8 ce ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00184cc:	83 c4 10             	add    esp,0x10
c00184cf:	a8 04                	test   al,0x4
c00184d1:	89 c5                	mov    ebp,eax
c00184d3:	75 6e                	jne    c0018543 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00184d5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00184d9:	31 d2                	xor    edx,edx
c00184db:	0f b6 c1             	movzx  eax,cl
c00184de:	b9 0a 00 00 00       	mov    ecx,0xa
c00184e3:	f7 f1                	div    ecx
c00184e5:	c1 e0 04             	shl    eax,0x4
c00184e8:	09 d0                	or     eax,edx
c00184ea:	31 d2                	xor    edx,edx
c00184ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00184f0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00184f5:	f7 f1                	div    ecx
c00184f7:	c1 e0 04             	shl    eax,0x4
c00184fa:	09 d0                	or     eax,edx
c00184fc:	31 d2                	xor    edx,edx
c00184fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018502:	0f b6 c3             	movzx  eax,bl
c0018505:	f7 f1                	div    ecx
c0018507:	c1 e0 04             	shl    eax,0x4
c001850a:	09 d0                	or     eax,edx
c001850c:	31 d2                	xor    edx,edx
c001850e:	89 c3                	mov    ebx,eax
c0018510:	89 f0                	mov    eax,esi
c0018512:	0f b6 c0             	movzx  eax,al
c0018515:	f7 f1                	div    ecx
c0018517:	c1 e0 04             	shl    eax,0x4
c001851a:	09 d0                	or     eax,edx
c001851c:	31 d2                	xor    edx,edx
c001851e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018522:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018527:	f7 f1                	div    ecx
c0018529:	c1 e0 04             	shl    eax,0x4
c001852c:	09 d0                	or     eax,edx
c001852e:	31 d2                	xor    edx,edx
c0018530:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018534:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018538:	f7 f1                	div    ecx
c001853a:	c1 e0 04             	shl    eax,0x4
c001853d:	09 d0                	or     eax,edx
c001853f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018543:	83 e5 02             	and    ebp,0x2
c0018546:	75 1e                	jne    c0018566 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018548:	0f b6 c3             	movzx  eax,bl
c001854b:	83 f8 0b             	cmp    eax,0xb
c001854e:	76 10                	jbe    c0018560 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018550:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018553:	84 d2                	test   dl,dl
c0018555:	88 d3                	mov    bl,dl
c0018557:	75 02                	jne    c001855b <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018559:	b3 0c                	mov    bl,0xc
c001855b:	83 cb 80             	or     ebx,0xffffff80
c001855e:	eb 06                	jmp    c0018566 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018560:	85 c0                	test   eax,eax
c0018562:	75 02                	jne    c0018566 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018564:	b3 0c                	mov    bl,0xc
c0018566:	50                   	push   eax
c0018567:	0f b6 db             	movzx  ebx,bl
c001856a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001856f:	52                   	push   edx
c0018570:	6a 00                	push   0x0
c0018572:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018578:	e8 35 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001857d:	83 c4 0c             	add    esp,0xc
c0018580:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018585:	50                   	push   eax
c0018586:	6a 02                	push   0x2
c0018588:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001858e:	e8 1f ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018593:	83 c4 0c             	add    esp,0xc
c0018596:	53                   	push   ebx
c0018597:	6a 04                	push   0x4
c0018599:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001859f:	e8 0e ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185a4:	83 c4 0c             	add    esp,0xc
c00185a7:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00185ac:	52                   	push   edx
c00185ad:	6a 07                	push   0x7
c00185af:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185b5:	e8 f8 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185ba:	83 c4 0c             	add    esp,0xc
c00185bd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00185c2:	50                   	push   eax
c00185c3:	6a 08                	push   0x8
c00185c5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185cb:	e8 e2 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185d0:	83 c4 0c             	add    esp,0xc
c00185d3:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00185d8:	55                   	push   ebp
c00185d9:	6a 09                	push   0x9
c00185db:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185e1:	e8 cc ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185e6:	5a                   	pop    edx
c00185e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00185eb:	e8 82 fb ff ff       	call   c0018172 <RTC::completeRTCRefresh()>
c00185f0:	83 c4 3c             	add    esp,0x3c
c00185f3:	b0 01                	mov    al,0x1
c00185f5:	5b                   	pop    ebx
c00185f6:	5e                   	pop    esi
c00185f7:	5f                   	pop    edi
c00185f8:	5d                   	pop    ebp
c00185f9:	c3                   	ret    

c00185fa <rtcIRQHandler(regs*, void*)>:
c00185fa:	53                   	push   ebx
c00185fb:	83 ec 10             	sub    esp,0x10
c00185fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018602:	6a 0c                	push   0xc
c0018604:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001860a:	e8 8b eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001860f:	83 c4 10             	add    esp,0x10
c0018612:	a8 80                	test   al,0x80
c0018614:	74 24                	je     c001863a <rtcIRQHandler(regs*, void*)+0x40>
c0018616:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001861d:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018624:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c001862b:	75 0d                	jne    c001863a <rtcIRQHandler(regs*, void*)+0x40>
c001862d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018631:	83 c4 08             	add    esp,0x8
c0018634:	5b                   	pop    ebx
c0018635:	e9 38 fb ff ff       	jmp    c0018172 <RTC::completeRTCRefresh()>
c001863a:	83 c4 08             	add    esp,0x8
c001863d:	5b                   	pop    ebx
c001863e:	c3                   	ret    
c001863f:	90                   	nop

c0018640 <RTC::RTC()>:
c0018640:	83 ec 1c             	sub    esp,0x1c
c0018643:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018647:	83 ec 08             	sub    esp,0x8
c001864a:	68 af 26 02 c0       	push   0xc00226af
c001864f:	50                   	push   eax
c0018650:	e8 9d 3a ff ff       	call   c000c0f2 <Clock::Clock(char const*)>
c0018655:	83 c4 10             	add    esp,0x10
c0018658:	ba cc 26 02 c0       	mov    edx,0xc00226cc
c001865d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018661:	89 10                	mov    DWORD PTR [eax],edx
c0018663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018667:	83 ec 0c             	sub    esp,0xc
c001866a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001866e:	6a 01                	push   0x1
c0018670:	68 fa 85 01 c0       	push   0xc00185fa
c0018675:	6a 08                	push   0x8
c0018677:	50                   	push   eax
c0018678:	e8 57 3f ff ff       	call   c000c5d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001867d:	83 c4 20             	add    esp,0x20
c0018680:	89 c2                	mov    edx,eax
c0018682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018686:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001868c:	fa                   	cli    
c001868d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018692:	83 c0 01             	add    eax,0x1
c0018695:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001869a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001869f:	83 ec 08             	sub    esp,0x8
c00186a2:	6a 0b                	push   0xb
c00186a4:	50                   	push   eax
c00186a5:	e8 f0 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186aa:	83 c4 10             	add    esp,0x10
c00186ad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00186b1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00186b6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00186ba:	83 ca 10             	or     edx,0x10
c00186bd:	0f b6 d2             	movzx  edx,dl
c00186c0:	83 ec 04             	sub    esp,0x4
c00186c3:	52                   	push   edx
c00186c4:	6a 0b                	push   0xb
c00186c6:	50                   	push   eax
c00186c7:	e8 e6 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186cc:	83 c4 10             	add    esp,0x10
c00186cf:	83 ec 0c             	sub    esp,0xc
c00186d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186d6:	e8 97 fa ff ff       	call   c0018172 <RTC::completeRTCRefresh()>
c00186db:	83 c4 10             	add    esp,0x10
c00186de:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00186e3:	83 e8 01             	sub    eax,0x1
c00186e6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00186eb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00186f0:	85 c0                	test   eax,eax
c00186f2:	75 01                	jne    c00186f5 <RTC::RTC()+0xb5>
c00186f4:	fb                   	sti    
c00186f5:	90                   	nop
c00186f6:	83 c4 1c             	add    esp,0x1c
c00186f9:	c3                   	ret    
c00186fa:	66 90                	xchg   ax,ax

c00186fc <HalConsoleScroll(int, int)>:
c00186fc:	83 ec 10             	sub    esp,0x10
c00186ff:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018707:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001870f:	90                   	nop
c0018710:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018715:	0f 8f e1 00 00 00    	jg     c00187fc <HalConsoleScroll(int, int)+0x100>
c001871b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018723:	90                   	nop
c0018724:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001872c:	0f 8f be 00 00 00    	jg     c00187f0 <HalConsoleScroll(int, int)+0xf4>
c0018732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018736:	89 d0                	mov    eax,edx
c0018738:	c1 e0 02             	shl    eax,0x2
c001873b:	01 d0                	add    eax,edx
c001873d:	c1 e0 05             	shl    eax,0x5
c0018740:	89 c2                	mov    edx,eax
c0018742:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018746:	01 d0                	add    eax,edx
c0018748:	89 c2                	mov    edx,eax
c001874a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001874e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018751:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018755:	89 d0                	mov    eax,edx
c0018757:	c1 e0 02             	shl    eax,0x2
c001875a:	01 d0                	add    eax,edx
c001875c:	c1 e0 05             	shl    eax,0x5
c001875f:	89 c2                	mov    edx,eax
c0018761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018765:	01 d0                	add    eax,edx
c0018767:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001876d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018771:	01 d0                	add    eax,edx
c0018773:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018775:	88 10                	mov    BYTE PTR [eax],dl
c0018777:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001877c:	75 66                	jne    c00187e4 <HalConsoleScroll(int, int)+0xe8>
c001877e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018782:	83 e0 01             	and    eax,0x1
c0018785:	74 39                	je     c00187c0 <HalConsoleScroll(int, int)+0xc4>
c0018787:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001878b:	83 e0 0f             	and    eax,0xf
c001878e:	88 c2                	mov    dl,al
c0018790:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018794:	c1 e0 04             	shl    eax,0x4
c0018797:	09 d0                	or     eax,edx
c0018799:	88 c1                	mov    cl,al
c001879b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001879f:	89 d0                	mov    eax,edx
c00187a1:	c1 e0 02             	shl    eax,0x2
c00187a4:	01 d0                	add    eax,edx
c00187a6:	c1 e0 05             	shl    eax,0x5
c00187a9:	89 c2                	mov    edx,eax
c00187ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187af:	01 d0                	add    eax,edx
c00187b1:	89 c2                	mov    edx,eax
c00187b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187b7:	01 d0                	add    eax,edx
c00187b9:	88 ca                	mov    dl,cl
c00187bb:	88 10                	mov    BYTE PTR [eax],dl
c00187bd:	eb 25                	jmp    c00187e4 <HalConsoleScroll(int, int)+0xe8>
c00187bf:	90                   	nop
c00187c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187c4:	89 d0                	mov    eax,edx
c00187c6:	c1 e0 02             	shl    eax,0x2
c00187c9:	01 d0                	add    eax,edx
c00187cb:	c1 e0 05             	shl    eax,0x5
c00187ce:	89 c2                	mov    edx,eax
c00187d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187d4:	01 d0                	add    eax,edx
c00187d6:	89 c2                	mov    edx,eax
c00187d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187dc:	01 d0                	add    eax,edx
c00187de:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00187e1:	8d 76 00             	lea    esi,[esi+0x0]
c00187e4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00187e9:	e9 36 ff ff ff       	jmp    c0018724 <HalConsoleScroll(int, int)+0x28>
c00187ee:	66 90                	xchg   ax,ax
c00187f0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00187f5:	e9 16 ff ff ff       	jmp    c0018710 <HalConsoleScroll(int, int)+0x14>
c00187fa:	66 90                	xchg   ax,ax
c00187fc:	90                   	nop
c00187fd:	83 c4 10             	add    esp,0x10
c0018800:	c3                   	ret    
c0018801:	8d 76 00             	lea    esi,[esi+0x0]

c0018804 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018804:	83 ec 14             	sub    esp,0x14
c0018807:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001880b:	88 04 24             	mov    BYTE PTR [esp],al
c001880e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018811:	0f b6 c0             	movzx  eax,al
c0018814:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018818:	89 d1                	mov    ecx,edx
c001881a:	83 e1 0f             	and    ecx,0xf
c001881d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018821:	c1 e2 04             	shl    edx,0x4
c0018824:	0f b6 d2             	movzx  edx,dl
c0018827:	09 ca                	or     edx,ecx
c0018829:	c1 e2 08             	shl    edx,0x8
c001882c:	09 d0                	or     eax,edx
c001882e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018833:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001883b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001883f:	89 d0                	mov    eax,edx
c0018841:	c1 e0 02             	shl    eax,0x2
c0018844:	01 d0                	add    eax,edx
c0018846:	c1 e0 04             	shl    eax,0x4
c0018849:	89 c2                	mov    edx,eax
c001884b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001884f:	01 d0                	add    eax,edx
c0018851:	d1 e0                	shl    eax,1
c0018853:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018857:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001885b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018860:	66 89 10             	mov    WORD PTR [eax],dx
c0018863:	90                   	nop
c0018864:	83 c4 14             	add    esp,0x14
c0018867:	c3                   	ret    

c0018868 <HalConsoleCursorUpdate(int, int)>:
c0018868:	83 ec 20             	sub    esp,0x20
c001886b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001886f:	89 c2                	mov    edx,eax
c0018871:	c1 e2 02             	shl    edx,0x2
c0018874:	01 d0                	add    eax,edx
c0018876:	c1 e0 04             	shl    eax,0x4
c0018879:	89 c2                	mov    edx,eax
c001887b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001887f:	01 d0                	add    eax,edx
c0018881:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018886:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001888d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018892:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018896:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001889a:	ee                   	out    dx,al
c001889b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00188a0:	0f b6 c0             	movzx  eax,al
c00188a3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00188aa:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00188ae:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00188b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00188b6:	ee                   	out    dx,al
c00188b7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00188be:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00188c3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00188c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188cb:	ee                   	out    dx,al
c00188cc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00188d1:	c1 e8 08             	shr    eax,0x8
c00188d4:	0f b6 c0             	movzx  eax,al
c00188d7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00188de:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00188e2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00188e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188ea:	ee                   	out    dx,al
c00188eb:	90                   	nop
c00188ec:	83 c4 20             	add    esp,0x20
c00188ef:	c3                   	ret    

c00188f0 <FAT::getName()>:
c00188f0:	b8 00 27 02 c0       	mov    eax,0xc0022700
c00188f5:	c3                   	ret    
c00188f6:	66 90                	xchg   ax,ax

c00188f8 <FAT::tell(void*, unsigned long long*)>:
c00188f8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00188fd:	75 09                	jne    c0018908 <FAT::tell(void*, unsigned long long*)+0x10>
c00188ff:	b8 04 00 00 00       	mov    eax,0x4
c0018904:	c3                   	ret    
c0018905:	8d 76 00             	lea    esi,[esi+0x0]
c0018908:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001890d:	75 09                	jne    c0018918 <FAT::tell(void*, unsigned long long*)+0x20>
c001890f:	b8 04 00 00 00       	mov    eax,0x4
c0018914:	c3                   	ret    
c0018915:	8d 76 00             	lea    esi,[esi+0x0]
c0018918:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001891c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001891f:	ba 00 00 00 00       	mov    edx,0x0
c0018924:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018928:	89 01                	mov    DWORD PTR [ecx],eax
c001892a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001892d:	b8 00 00 00 00       	mov    eax,0x0
c0018932:	c3                   	ret    
c0018933:	90                   	nop

c0018934 <FAT::stat(void*, unsigned long long*)>:
c0018934:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018939:	75 09                	jne    c0018944 <FAT::stat(void*, unsigned long long*)+0x10>
c001893b:	b8 04 00 00 00       	mov    eax,0x4
c0018940:	c3                   	ret    
c0018941:	8d 76 00             	lea    esi,[esi+0x0]
c0018944:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018949:	75 09                	jne    c0018954 <FAT::stat(void*, unsigned long long*)+0x20>
c001894b:	b8 04 00 00 00       	mov    eax,0x4
c0018950:	c3                   	ret    
c0018951:	8d 76 00             	lea    esi,[esi+0x0]
c0018954:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018958:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001895b:	ba 00 00 00 00       	mov    edx,0x0
c0018960:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018964:	89 01                	mov    DWORD PTR [ecx],eax
c0018966:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018969:	b8 00 00 00 00       	mov    eax,0x0
c001896e:	c3                   	ret    
c001896f:	90                   	nop

c0018970 <FAT::~FAT()>:
c0018970:	83 ec 0c             	sub    esp,0xc
c0018973:	ba 4c 27 02 c0       	mov    edx,0xc002274c
c0018978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001897c:	89 10                	mov    DWORD PTR [eax],edx
c001897e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018982:	83 ec 0c             	sub    esp,0xc
c0018985:	50                   	push   eax
c0018986:	e8 13 2b ff ff       	call   c000b49e <Filesystem::~Filesystem()>
c001898b:	83 c4 10             	add    esp,0x10
c001898e:	90                   	nop
c001898f:	83 c4 0c             	add    esp,0xc
c0018992:	c3                   	ret    
c0018993:	90                   	nop

c0018994 <FAT::~FAT()>:
c0018994:	83 ec 0c             	sub    esp,0xc
c0018997:	83 ec 0c             	sub    esp,0xc
c001899a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001899e:	e8 cd ff ff ff       	call   c0018970 <FAT::~FAT()>
c00189a3:	83 c4 10             	add    esp,0x10
c00189a6:	83 ec 08             	sub    esp,0x8
c00189a9:	6a 08                	push   0x8
c00189ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00189af:	e8 58 1e ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00189b4:	83 c4 10             	add    esp,0x10
c00189b7:	83 c4 0c             	add    esp,0xc
c00189ba:	c3                   	ret    
c00189bb:	90                   	nop

c00189bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00189bc:	83 ec 1c             	sub    esp,0x1c
c00189bf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00189c6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00189cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189cf:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c00189d6:	83 f8 ff             	cmp    eax,0xffffffff
c00189d9:	75 35                	jne    c0018a10 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00189db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00189df:	88 c2                	mov    dl,al
c00189e1:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c00189e6:	01 d0                	add    eax,edx
c00189e8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00189ec:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c00189f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189f6:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c00189fd:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018a02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a06:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018a0d:	eb 19                	jmp    c0018a28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018a0f:	90                   	nop
c0018a10:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018a14:	88 c2                	mov    dl,al
c0018a16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a1a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018a21:	01 d0                	add    eax,edx
c0018a23:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a27:	90                   	nop
c0018a28:	83 ec 04             	sub    esp,0x4
c0018a2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a33:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018a37:	50                   	push   eax
c0018a38:	e8 b6 c5 fe ff       	call   c0004ff3 <f_getlabel>
c0018a3d:	83 c4 10             	add    esp,0x10
c0018a40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a49:	75 09                	jne    c0018a54 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018a4b:	b8 00 00 00 00       	mov    eax,0x0
c0018a50:	eb 0a                	jmp    c0018a5c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018a52:	66 90                	xchg   ax,ax
c0018a54:	b8 01 00 00 00       	mov    eax,0x1
c0018a59:	8d 76 00             	lea    esi,[esi+0x0]
c0018a5c:	83 c4 1c             	add    esp,0x1c
c0018a5f:	c3                   	ret    

c0018a60 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018a60:	53                   	push   ebx
c0018a61:	83 ec 58             	sub    esp,0x58
c0018a64:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018a6c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018a70:	b9 00 00 00 00       	mov    ecx,0x0
c0018a75:	b8 3c 00 00 00       	mov    eax,0x3c
c0018a7a:	83 e0 f8             	and    eax,0xfffffff8
c0018a7d:	89 c3                	mov    ebx,eax
c0018a7f:	b8 00 00 00 00       	mov    eax,0x0
c0018a84:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018a88:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018a8c:	83 c0 08             	add    eax,0x8
c0018a8f:	39 d8                	cmp    eax,ebx
c0018a91:	72 f1                	jb     c0018a84 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018a93:	01 c2                	add    edx,eax
c0018a95:	89 0a                	mov    DWORD PTR [edx],ecx
c0018a97:	83 c2 04             	add    edx,0x4
c0018a9a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a9e:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018aa5:	83 f8 ff             	cmp    eax,0xffffffff
c0018aa8:	75 36                	jne    c0018ae0 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018aaa:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018aae:	88 c2                	mov    dl,al
c0018ab0:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ab5:	01 d0                	add    eax,edx
c0018ab7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018abb:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018ac1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ac5:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018acc:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ad1:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018ad5:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018adc:	eb 1a                	jmp    c0018af8 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018ade:	66 90                	xchg   ax,ax
c0018ae0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ae4:	88 c2                	mov    dl,al
c0018ae6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018aea:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018af1:	01 d0                	add    eax,edx
c0018af3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018af7:	90                   	nop
c0018af8:	83 ec 08             	sub    esp,0x8
c0018afb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018aff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b03:	50                   	push   eax
c0018b04:	e8 67 7d fe ff       	call   c0000870 <strcat>
c0018b09:	83 c4 10             	add    esp,0x10
c0018b0c:	83 ec 0c             	sub    esp,0xc
c0018b0f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b13:	50                   	push   eax
c0018b14:	e8 2e c6 fe ff       	call   c0005147 <f_setlabel>
c0018b19:	83 c4 10             	add    esp,0x10
c0018b1c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b20:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018b25:	75 09                	jne    c0018b30 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018b27:	b8 00 00 00 00       	mov    eax,0x0
c0018b2c:	eb 0a                	jmp    c0018b38 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018b2e:	66 90                	xchg   ax,ax
c0018b30:	b8 01 00 00 00       	mov    eax,0x1
c0018b35:	8d 76 00             	lea    esi,[esi+0x0]
c0018b38:	83 c4 58             	add    esp,0x58
c0018b3b:	5b                   	pop    ebx
c0018b3c:	c3                   	ret    
c0018b3d:	90                   	nop
c0018b3e:	66 90                	xchg   ax,ax

c0018b40 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018b40:	83 ec 2c             	sub    esp,0x2c
c0018b43:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018b4b:	83 ec 08             	sub    esp,0x8
c0018b4e:	68 24 27 02 c0       	push   0xc0022724
c0018b53:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b57:	e8 24 7c fe ff       	call   c0000780 <strcmp>
c0018b5c:	83 c4 10             	add    esp,0x10
c0018b5f:	85 c0                	test   eax,eax
c0018b61:	0f 94 c0             	sete   al
c0018b64:	0f b6 c0             	movzx  eax,al
c0018b67:	85 c0                	test   eax,eax
c0018b69:	74 0d                	je     c0018b78 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018b6b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b73:	e9 c0 00 00 00       	jmp    c0018c38 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b78:	83 ec 08             	sub    esp,0x8
c0018b7b:	68 16 27 02 c0       	push   0xc0022716
c0018b80:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b84:	e8 f7 7b fe ff       	call   c0000780 <strcmp>
c0018b89:	83 c4 10             	add    esp,0x10
c0018b8c:	85 c0                	test   eax,eax
c0018b8e:	0f 94 c0             	sete   al
c0018b91:	0f b6 c0             	movzx  eax,al
c0018b94:	85 c0                	test   eax,eax
c0018b96:	74 10                	je     c0018ba8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018b98:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018ba0:	e9 93 00 00 00       	jmp    c0018c38 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ba8:	83 ec 08             	sub    esp,0x8
c0018bab:	68 1c 27 02 c0       	push   0xc002271c
c0018bb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bb4:	e8 c7 7b fe ff       	call   c0000780 <strcmp>
c0018bb9:	83 c4 10             	add    esp,0x10
c0018bbc:	85 c0                	test   eax,eax
c0018bbe:	0f 94 c0             	sete   al
c0018bc1:	0f b6 c0             	movzx  eax,al
c0018bc4:	85 c0                	test   eax,eax
c0018bc6:	74 0c                	je     c0018bd4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018bc8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018bd0:	eb 66                	jmp    c0018c38 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bd2:	66 90                	xchg   ax,ax
c0018bd4:	83 ec 08             	sub    esp,0x8
c0018bd7:	68 7c ff 01 c0       	push   0xc001ff7c
c0018bdc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018be0:	e8 9b 7b fe ff       	call   c0000780 <strcmp>
c0018be5:	83 c4 10             	add    esp,0x10
c0018be8:	85 c0                	test   eax,eax
c0018bea:	0f 94 c0             	sete   al
c0018bed:	0f b6 c0             	movzx  eax,al
c0018bf0:	85 c0                	test   eax,eax
c0018bf2:	74 0c                	je     c0018c00 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018bf4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018bfc:	eb 3a                	jmp    c0018c38 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bfe:	66 90                	xchg   ax,ax
c0018c00:	83 ec 08             	sub    esp,0x8
c0018c03:	68 22 27 02 c0       	push   0xc0022722
c0018c08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c0c:	e8 6f 7b fe ff       	call   c0000780 <strcmp>
c0018c11:	83 c4 10             	add    esp,0x10
c0018c14:	85 c0                	test   eax,eax
c0018c16:	0f 94 c0             	sete   al
c0018c19:	0f b6 c0             	movzx  eax,al
c0018c1c:	85 c0                	test   eax,eax
c0018c1e:	74 0c                	je     c0018c2c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018c20:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018c28:	eb 0e                	jmp    c0018c38 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c2a:	66 90                	xchg   ax,ax
c0018c2c:	b8 08 00 00 00       	mov    eax,0x8
c0018c31:	e9 ea 00 00 00       	jmp    c0018d20 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018c36:	66 90                	xchg   ax,ax
c0018c38:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018c3f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018c44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c48:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c4f:	83 f8 ff             	cmp    eax,0xffffffff
c0018c52:	75 34                	jne    c0018c88 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018c54:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c58:	88 c2                	mov    dl,al
c0018c5a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c5f:	01 d0                	add    eax,edx
c0018c61:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c65:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018c6b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c6f:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018c76:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c7b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018c7f:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018c86:	eb 18                	jmp    c0018ca0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018c88:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c8c:	88 c2                	mov    dl,al
c0018c8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c92:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c99:	01 d0                	add    eax,edx
c0018c9b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c9f:	90                   	nop
c0018ca0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ca4:	88 04 24             	mov    BYTE PTR [esp],al
c0018ca7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018cab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018caf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018cb7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018cbc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018cc4:	83 ec 0c             	sub    esp,0xc
c0018cc7:	68 00 20 00 00       	push   0x2000
c0018ccc:	e8 02 ee fe ff       	call   c0007ad3 <malloc>
c0018cd1:	83 c4 10             	add    esp,0x10
c0018cd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018cd8:	68 00 20 00 00       	push   0x2000
c0018cdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ce1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018ce5:	50                   	push   eax
c0018ce6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018cea:	50                   	push   eax
c0018ceb:	e8 54 c7 fe ff       	call   c0005444 <f_mkfs>
c0018cf0:	83 c4 10             	add    esp,0x10
c0018cf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018cf7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018cfc:	75 0a                	jne    c0018d08 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018cfe:	b8 00 00 00 00       	mov    eax,0x0
c0018d03:	eb 1b                	jmp    c0018d20 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d05:	8d 76 00             	lea    esi,[esi+0x0]
c0018d08:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018d0d:	75 09                	jne    c0018d18 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018d0f:	b8 09 00 00 00       	mov    eax,0x9
c0018d14:	eb 0a                	jmp    c0018d20 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d16:	66 90                	xchg   ax,ax
c0018d18:	b8 01 00 00 00       	mov    eax,0x1
c0018d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d20:	83 c4 2c             	add    esp,0x2c
c0018d23:	c3                   	ret    

c0018d24 <FAT::tryMount(LogicalDisk*, int)>:
c0018d24:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018d2a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d2f:	83 f8 14             	cmp    eax,0x14
c0018d32:	75 18                	jne    c0018d4c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018d34:	83 ec 0c             	sub    esp,0xc
c0018d37:	68 28 27 02 c0       	push   0xc0022728
c0018d3c:	e8 84 84 ff ff       	call   c00111c5 <KePanic(char const*)>
c0018d41:	83 c4 10             	add    esp,0x10
c0018d44:	b0 00                	mov    al,0x0
c0018d46:	e9 ed 01 00 00       	jmp    c0018f38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d4b:	90                   	nop
c0018d4c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018d53:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018d59:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018d5f:	3d 00 02 00 00       	cmp    eax,0x200
c0018d64:	74 0a                	je     c0018d70 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018d66:	b0 00                	mov    al,0x0
c0018d68:	e9 cb 01 00 00       	jmp    c0018f38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d70:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018d78:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018d7f:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d86:	83 f8 ff             	cmp    eax,0xffffffff
c0018d89:	74 09                	je     c0018d94 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018d8b:	b0 01                	mov    al,0x1
c0018d8d:	e9 a6 01 00 00       	jmp    c0018f38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d92:	66 90                	xchg   ax,ax
c0018d94:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018d9e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018da6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018dad:	88 c2                	mov    dl,al
c0018daf:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018db4:	01 d0                	add    eax,edx
c0018db6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018dbd:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018dc3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018dca:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018dd1:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018dd6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018ddd:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018de4:	83 ec 0c             	sub    esp,0xc
c0018de7:	68 34 02 00 00       	push   0x234
c0018dec:	e8 e2 ec fe ff       	call   c0007ad3 <malloc>
c0018df1:	83 c4 10             	add    esp,0x10
c0018df4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018dfb:	83 ec 04             	sub    esp,0x4
c0018dfe:	6a 00                	push   0x0
c0018e00:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e07:	50                   	push   eax
c0018e08:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e0f:	e8 2a ae fe ff       	call   c0003c3e <f_mount>
c0018e14:	83 c4 10             	add    esp,0x10
c0018e17:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018e1e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018e26:	74 1c                	je     c0018e44 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018e28:	83 ec 0c             	sub    esp,0xc
c0018e2b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e32:	e8 bc ec fe ff       	call   c0007af3 <rfree>
c0018e37:	83 c4 10             	add    esp,0x10
c0018e3a:	b0 00                	mov    al,0x0
c0018e3c:	e9 f7 00 00 00       	jmp    c0018f38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e41:	8d 76 00             	lea    esi,[esi+0x0]
c0018e44:	83 ec 04             	sub    esp,0x4
c0018e47:	68 00 01 00 00       	push   0x100
c0018e4c:	6a 00                	push   0x0
c0018e4e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e55:	50                   	push   eax
c0018e56:	e8 95 76 fe ff       	call   c00004f0 <memset>
c0018e5b:	83 c4 10             	add    esp,0x10
c0018e5e:	83 ec 08             	sub    esp,0x8
c0018e61:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e68:	50                   	push   eax
c0018e69:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e70:	50                   	push   eax
c0018e71:	e8 fa 79 fe ff       	call   c0000870 <strcat>
c0018e76:	83 c4 10             	add    esp,0x10
c0018e79:	83 ec 08             	sub    esp,0x8
c0018e7c:	68 36 27 02 c0       	push   0xc0022736
c0018e81:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e88:	50                   	push   eax
c0018e89:	e8 e2 79 fe ff       	call   c0000870 <strcat>
c0018e8e:	83 c4 10             	add    esp,0x10
c0018e91:	83 ec 04             	sub    esp,0x4
c0018e94:	6a 01                	push   0x1
c0018e96:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018e9d:	50                   	push   eax
c0018e9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ea2:	50                   	push   eax
c0018ea3:	e8 f8 ad fe ff       	call   c0003ca0 <f_open>
c0018ea8:	83 c4 10             	add    esp,0x10
c0018eab:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018eb2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018eb9:	85 c0                	test   eax,eax
c0018ebb:	74 0b                	je     c0018ec8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018ebd:	78 31                	js     c0018ef0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018ebf:	83 e8 04             	sub    eax,0x4
c0018ec2:	83 f8 01             	cmp    eax,0x1
c0018ec5:	77 29                	ja     c0018ef0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018ec7:	90                   	nop
c0018ec8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018ed0:	83 ec 0c             	sub    esp,0xc
c0018ed3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ed7:	50                   	push   eax
c0018ed8:	e8 73 b5 fe ff       	call   c0004450 <f_close>
c0018edd:	83 c4 10             	add    esp,0x10
c0018ee0:	90                   	nop
c0018ee1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018ee9:	85 c0                	test   eax,eax
c0018eeb:	74 43                	je     c0018f30 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018eed:	eb 31                	jmp    c0018f20 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018eef:	90                   	nop
c0018ef0:	83 ec 0c             	sub    esp,0xc
c0018ef3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018efa:	e8 f4 eb fe ff       	call   c0007af3 <rfree>
c0018eff:	83 c4 10             	add    esp,0x10
c0018f02:	83 ec 04             	sub    esp,0x4
c0018f05:	6a 00                	push   0x0
c0018f07:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f0e:	50                   	push   eax
c0018f0f:	6a 00                	push   0x0
c0018f11:	e8 28 ad fe ff       	call   c0003c3e <f_mount>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	b0 00                	mov    al,0x0
c0018f1b:	eb 1b                	jmp    c0018f38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f20:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f25:	83 c0 01             	add    eax,0x1
c0018f28:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c0018f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f30:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018f37:	90                   	nop
c0018f38:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018f3e:	c3                   	ret    
c0018f3f:	90                   	nop

c0018f40 <FAT::allocateSwapfile(char const*, int)>:
c0018f40:	55                   	push   ebp
c0018f41:	57                   	push   edi
c0018f42:	56                   	push   esi
c0018f43:	53                   	push   ebx
c0018f44:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018f4a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018f55:	83 ec 0c             	sub    esp,0xc
c0018f58:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018f5f:	e8 6f eb fe ff       	call   c0007ad3 <malloc>
c0018f64:	83 c4 10             	add    esp,0x10
c0018f67:	89 c7                	mov    edi,eax
c0018f69:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0018f6e:	83 ec 04             	sub    esp,0x4
c0018f71:	50                   	push   eax
c0018f72:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018f79:	57                   	push   edi
c0018f7a:	e8 99 27 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018f89:	83 ec 04             	sub    esp,0x4
c0018f8c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018f90:	50                   	push   eax
c0018f91:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f95:	50                   	push   eax
c0018f96:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f9d:	e8 34 2b ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c0018fa2:	83 c4 10             	add    esp,0x10
c0018fa5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018fac:	c1 e0 14             	shl    eax,0x14
c0018faf:	89 c7                	mov    edi,eax
c0018fb1:	89 c5                	mov    ebp,eax
c0018fb3:	c1 fd 1f             	sar    ebp,0x1f
c0018fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018fbe:	89 f9                	mov    ecx,edi
c0018fc0:	31 c1                	xor    ecx,eax
c0018fc2:	89 cb                	mov    ebx,ecx
c0018fc4:	89 e9                	mov    ecx,ebp
c0018fc6:	31 d1                	xor    ecx,edx
c0018fc8:	89 ce                	mov    esi,ecx
c0018fca:	89 f0                	mov    eax,esi
c0018fcc:	09 d8                	or     eax,ebx
c0018fce:	0f 84 9c 00 00 00    	je     c0019070 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018fd4:	83 ec 0c             	sub    esp,0xc
c0018fd7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018fde:	e8 bf 29 ff ff       	call   c000b9a2 <File::unlink()>
c0018fe3:	83 c4 10             	add    esp,0x10
c0018fe6:	83 ec 08             	sub    esp,0x8
c0018fe9:	6a 12                	push   0x12
c0018feb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018ff2:	e8 dd 27 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0018ff7:	83 c4 10             	add    esp,0x10
c0018ffa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019001:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019007:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001900e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019015:	c1 e0 14             	shl    eax,0x14
c0019018:	83 ec 04             	sub    esp,0x4
c001901b:	6a 01                	push   0x1
c001901d:	50                   	push   eax
c001901e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019025:	e8 ad c2 fe ff       	call   c00052d7 <f_expand>
c001902a:	83 c4 10             	add    esp,0x10
c001902d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019034:	8b 00                	mov    eax,DWORD PTR [eax]
c0019036:	83 c0 10             	add    eax,0x10
c0019039:	8b 00                	mov    eax,DWORD PTR [eax]
c001903b:	83 ec 0c             	sub    esp,0xc
c001903e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019042:	52                   	push   edx
c0019043:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019047:	52                   	push   edx
c0019048:	6a 00                	push   0x0
c001904a:	68 00 04 00 00       	push   0x400
c001904f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019056:	ff d0                	call   eax
c0019058:	83 c4 20             	add    esp,0x20
c001905b:	83 ec 0c             	sub    esp,0xc
c001905e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019065:	e8 c8 27 ff ff       	call   c000b832 <File::close()>
c001906a:	83 c4 10             	add    esp,0x10
c001906d:	8d 76 00             	lea    esi,[esi+0x0]
c0019070:	83 ec 08             	sub    esp,0x8
c0019073:	6a 01                	push   0x1
c0019075:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001907c:	e8 53 27 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c0019081:	83 c4 10             	add    esp,0x10
c0019084:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001908b:	8b 00                	mov    eax,DWORD PTR [eax]
c001908d:	83 c0 0c             	add    eax,0xc
c0019090:	8b 00                	mov    eax,DWORD PTR [eax]
c0019092:	83 ec 0c             	sub    esp,0xc
c0019095:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019099:	52                   	push   edx
c001909a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001909e:	52                   	push   edx
c001909f:	6a 00                	push   0x0
c00190a1:	6a 04                	push   0x4
c00190a3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00190aa:	ff d0                	call   eax
c00190ac:	83 c4 20             	add    esp,0x20
c00190af:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00190b6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00190bc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00190c3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00190ca:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00190cd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00190d4:	83 ec 0c             	sub    esp,0xc
c00190d7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190de:	e8 4f 27 ff ff       	call   c000b832 <File::close()>
c00190e3:	83 c4 10             	add    esp,0x10
c00190e6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00190ed:	ba 00 00 00 00       	mov    edx,0x0
c00190f2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00190f8:	5b                   	pop    ebx
c00190f9:	5e                   	pop    esi
c00190fa:	5f                   	pop    edi
c00190fb:	5d                   	pop    ebp
c00190fc:	c3                   	ret    
c00190fd:	90                   	nop
c00190fe:	66 90                	xchg   ax,ax

c0019100 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019100:	57                   	push   edi
c0019101:	56                   	push   esi
c0019102:	53                   	push   ebx
c0019103:	81 ec 50 02 00 00    	sub    esp,0x250
c0019109:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019111:	74 0d                	je     c0019120 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019113:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001911b:	75 0f                	jne    c001912c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001911d:	8d 76 00             	lea    esi,[esi+0x0]
c0019120:	b8 04 00 00 00       	mov    eax,0x4
c0019125:	e9 3a 01 00 00       	jmp    c0019264 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001912a:	66 90                	xchg   ax,ax
c001912c:	83 ec 08             	sub    esp,0x8
c001912f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019136:	50                   	push   eax
c0019137:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001913e:	e8 d9 b5 fe ff       	call   c000471c <f_readdir>
c0019143:	83 c4 10             	add    esp,0x10
c0019146:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001914d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019154:	83 ec 0c             	sub    esp,0xc
c0019157:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001915e:	83 c0 16             	add    eax,0x16
c0019161:	50                   	push   eax
c0019162:	e8 19 74 fe ff       	call   c0000580 <strlen>
c0019167:	83 c4 10             	add    esp,0x10
c001916a:	ba 00 00 00 00       	mov    edx,0x0
c001916f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019173:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019177:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001917e:	0f b6 c0             	movzx  eax,al
c0019181:	83 e0 10             	and    eax,0x10
c0019184:	74 0a                	je     c0019190 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019186:	b8 02 00 00 00       	mov    eax,0x2
c001918b:	eb 0b                	jmp    c0019198 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001918d:	8d 76 00             	lea    esi,[esi+0x0]
c0019190:	b8 01 00 00 00       	mov    eax,0x1
c0019195:	8d 76 00             	lea    esi,[esi+0x0]
c0019198:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001919c:	83 ec 08             	sub    esp,0x8
c001919f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00191a6:	83 c0 16             	add    eax,0x16
c00191a9:	50                   	push   eax
c00191aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191ae:	83 c0 10             	add    eax,0x10
c00191b1:	50                   	push   eax
c00191b2:	e8 99 74 fe ff       	call   c0000650 <strcpy>
c00191b7:	83 c4 10             	add    esp,0x10
c00191ba:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00191c1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00191c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191cc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00191d3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00191da:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00191e1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00191e8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00191ef:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00191f6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00191fd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019204:	89 c6                	mov    esi,eax
c0019206:	89 d7                	mov    edi,edx
c0019208:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001920a:	89 c8                	mov    eax,ecx
c001920c:	89 fa                	mov    edx,edi
c001920e:	89 f3                	mov    ebx,esi
c0019210:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019217:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001921e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019225:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001922c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019232:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019239:	0f be c0             	movsx  eax,al
c001923c:	85 c0                	test   eax,eax
c001923e:	75 08                	jne    c0019248 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019240:	b8 07 00 00 00       	mov    eax,0x7
c0019245:	eb 1d                	jmp    c0019264 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019247:	90                   	nop
c0019248:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001924f:	85 c0                	test   eax,eax
c0019251:	75 09                	jne    c001925c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019253:	b8 00 00 00 00       	mov    eax,0x0
c0019258:	eb 0a                	jmp    c0019264 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001925a:	66 90                	xchg   ax,ax
c001925c:	b8 01 00 00 00       	mov    eax,0x1
c0019261:	8d 76 00             	lea    esi,[esi+0x0]
c0019264:	81 c4 50 02 00 00    	add    esp,0x250
c001926a:	5b                   	pop    ebx
c001926b:	5e                   	pop    esi
c001926c:	5f                   	pop    edi
c001926d:	c3                   	ret    
c001926e:	66 90                	xchg   ax,ax

c0019270 <FAT::read(void*, unsigned long, void*, int*)>:
c0019270:	83 ec 1c             	sub    esp,0x1c
c0019273:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019278:	74 0a                	je     c0019284 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001927a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001927f:	75 0b                	jne    c001928c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019281:	8d 76 00             	lea    esi,[esi+0x0]
c0019284:	b8 04 00 00 00       	mov    eax,0x4
c0019289:	eb 41                	jmp    c00192cc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001928b:	90                   	nop
c001928c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019290:	50                   	push   eax
c0019291:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019295:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019299:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001929d:	e8 c1 ac fe ff       	call   c0003f63 <f_read>
c00192a2:	83 c4 10             	add    esp,0x10
c00192a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192ad:	89 c2                	mov    edx,eax
c00192af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00192b3:	89 10                	mov    DWORD PTR [eax],edx
c00192b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192b9:	85 c0                	test   eax,eax
c00192bb:	75 07                	jne    c00192c4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00192bd:	b8 00 00 00 00       	mov    eax,0x0
c00192c2:	eb 08                	jmp    c00192cc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00192c4:	b8 01 00 00 00       	mov    eax,0x1
c00192c9:	8d 76 00             	lea    esi,[esi+0x0]
c00192cc:	83 c4 1c             	add    esp,0x1c
c00192cf:	c3                   	ret    

c00192d0 <FAT::write(void*, unsigned long, void*, int*)>:
c00192d0:	83 ec 1c             	sub    esp,0x1c
c00192d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192d8:	74 0a                	je     c00192e4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00192da:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00192df:	75 0b                	jne    c00192ec <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00192e1:	8d 76 00             	lea    esi,[esi+0x0]
c00192e4:	b8 04 00 00 00       	mov    eax,0x4
c00192e9:	eb 41                	jmp    c001932c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00192eb:	90                   	nop
c00192ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192f0:	50                   	push   eax
c00192f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00192f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192fd:	e8 42 ae fe ff       	call   c0004144 <f_write>
c0019302:	83 c4 10             	add    esp,0x10
c0019305:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019309:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001930d:	89 c2                	mov    edx,eax
c001930f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019313:	89 10                	mov    DWORD PTR [eax],edx
c0019315:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019319:	85 c0                	test   eax,eax
c001931b:	75 07                	jne    c0019324 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001931d:	b8 00 00 00 00       	mov    eax,0x0
c0019322:	eb 08                	jmp    c001932c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019324:	b8 01 00 00 00       	mov    eax,0x1
c0019329:	8d 76 00             	lea    esi,[esi+0x0]
c001932c:	83 c4 1c             	add    esp,0x1c
c001932f:	c3                   	ret    

c0019330 <FAT::close(void*)>:
c0019330:	83 ec 1c             	sub    esp,0x1c
c0019333:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019338:	75 0a                	jne    c0019344 <FAT::close(void*)+0x14>
c001933a:	b8 04 00 00 00       	mov    eax,0x4
c001933f:	eb 3f                	jmp    c0019380 <FAT::close(void*)+0x50>
c0019341:	8d 76 00             	lea    esi,[esi+0x0]
c0019344:	83 ec 0c             	sub    esp,0xc
c0019347:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001934b:	e8 00 b1 fe ff       	call   c0004450 <f_close>
c0019350:	83 c4 10             	add    esp,0x10
c0019353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019357:	83 ec 0c             	sub    esp,0xc
c001935a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001935e:	e8 80 e7 fe ff       	call   c0007ae3 <free>
c0019363:	83 c4 10             	add    esp,0x10
c0019366:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001936a:	85 c0                	test   eax,eax
c001936c:	75 0a                	jne    c0019378 <FAT::close(void*)+0x48>
c001936e:	b8 00 00 00 00       	mov    eax,0x0
c0019373:	eb 0b                	jmp    c0019380 <FAT::close(void*)+0x50>
c0019375:	8d 76 00             	lea    esi,[esi+0x0]
c0019378:	b8 01 00 00 00       	mov    eax,0x1
c001937d:	8d 76 00             	lea    esi,[esi+0x0]
c0019380:	83 c4 1c             	add    esp,0x1c
c0019383:	c3                   	ret    

c0019384 <FAT::closeDir(void*)>:
c0019384:	83 ec 1c             	sub    esp,0x1c
c0019387:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001938c:	75 0a                	jne    c0019398 <FAT::closeDir(void*)+0x14>
c001938e:	b8 04 00 00 00       	mov    eax,0x4
c0019393:	eb 3f                	jmp    c00193d4 <FAT::closeDir(void*)+0x50>
c0019395:	8d 76 00             	lea    esi,[esi+0x0]
c0019398:	83 ec 0c             	sub    esp,0xc
c001939b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001939f:	e8 56 b3 fe ff       	call   c00046fa <f_closedir>
c00193a4:	83 c4 10             	add    esp,0x10
c00193a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193ab:	83 ec 0c             	sub    esp,0xc
c00193ae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193b2:	e8 2c e7 fe ff       	call   c0007ae3 <free>
c00193b7:	83 c4 10             	add    esp,0x10
c00193ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193be:	85 c0                	test   eax,eax
c00193c0:	75 0a                	jne    c00193cc <FAT::closeDir(void*)+0x48>
c00193c2:	b8 00 00 00 00       	mov    eax,0x0
c00193c7:	eb 0b                	jmp    c00193d4 <FAT::closeDir(void*)+0x50>
c00193c9:	8d 76 00             	lea    esi,[esi+0x0]
c00193cc:	b8 01 00 00 00       	mov    eax,0x1
c00193d1:	8d 76 00             	lea    esi,[esi+0x0]
c00193d4:	83 c4 1c             	add    esp,0x1c
c00193d7:	c3                   	ret    

c00193d8 <FAT::truncate(void*, unsigned long long)>:
c00193d8:	83 ec 2c             	sub    esp,0x2c
c00193db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00193e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193eb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00193f0:	75 0a                	jne    c00193fc <FAT::truncate(void*, unsigned long long)+0x24>
c00193f2:	b8 04 00 00 00       	mov    eax,0x4
c00193f7:	eb 47                	jmp    c0019440 <FAT::truncate(void*, unsigned long long)+0x68>
c00193f9:	8d 76 00             	lea    esi,[esi+0x0]
c00193fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019400:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019403:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019407:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001940f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019413:	83 ec 08             	sub    esp,0x8
c0019416:	50                   	push   eax
c0019417:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001941b:	e8 5f b0 fe ff       	call   c000447f <f_lseek>
c0019420:	83 c4 10             	add    esp,0x10
c0019423:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019427:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001942b:	85 c0                	test   eax,eax
c001942d:	75 09                	jne    c0019438 <FAT::truncate(void*, unsigned long long)+0x60>
c001942f:	b8 00 00 00 00       	mov    eax,0x0
c0019434:	eb 0a                	jmp    c0019440 <FAT::truncate(void*, unsigned long long)+0x68>
c0019436:	66 90                	xchg   ax,ax
c0019438:	b8 01 00 00 00       	mov    eax,0x1
c001943d:	8d 76 00             	lea    esi,[esi+0x0]
c0019440:	83 c4 2c             	add    esp,0x2c
c0019443:	c3                   	ret    

c0019444 <FAT::seek(void*, unsigned long long)>:
c0019444:	83 ec 2c             	sub    esp,0x2c
c0019447:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001944b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001944f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019453:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019457:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001945c:	75 0a                	jne    c0019468 <FAT::seek(void*, unsigned long long)+0x24>
c001945e:	b8 04 00 00 00       	mov    eax,0x4
c0019463:	eb 33                	jmp    c0019498 <FAT::seek(void*, unsigned long long)+0x54>
c0019465:	8d 76 00             	lea    esi,[esi+0x0]
c0019468:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001946c:	83 ec 08             	sub    esp,0x8
c001946f:	50                   	push   eax
c0019470:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019474:	e8 06 b0 fe ff       	call   c000447f <f_lseek>
c0019479:	83 c4 10             	add    esp,0x10
c001947c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019484:	85 c0                	test   eax,eax
c0019486:	75 08                	jne    c0019490 <FAT::seek(void*, unsigned long long)+0x4c>
c0019488:	b8 00 00 00 00       	mov    eax,0x0
c001948d:	eb 09                	jmp    c0019498 <FAT::seek(void*, unsigned long long)+0x54>
c001948f:	90                   	nop
c0019490:	b8 01 00 00 00       	mov    eax,0x1
c0019495:	8d 76 00             	lea    esi,[esi+0x0]
c0019498:	83 c4 2c             	add    esp,0x2c
c001949b:	c3                   	ret    

c001949c <fatWrapperReadDisk>:
c001949c:	53                   	push   ebx
c001949d:	83 ec 18             	sub    esp,0x18
c00194a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194a4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00194ad:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00194b4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00194b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194bc:	ba 00 00 00 00       	mov    edx,0x0
c00194c1:	83 ec 0c             	sub    esp,0xc
c00194c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194c8:	53                   	push   ebx
c00194c9:	52                   	push   edx
c00194ca:	50                   	push   eax
c00194cb:	51                   	push   ecx
c00194cc:	e8 41 45 ff ff       	call   c000da12 <LogicalDisk::read(unsigned long long, int, void*)>
c00194d1:	83 c4 20             	add    esp,0x20
c00194d4:	83 c4 18             	add    esp,0x18
c00194d7:	5b                   	pop    ebx
c00194d8:	c3                   	ret    
c00194d9:	8d 76 00             	lea    esi,[esi+0x0]

c00194dc <fatWrapperWriteDisk>:
c00194dc:	53                   	push   ebx
c00194dd:	83 ec 18             	sub    esp,0x18
c00194e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194e8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00194ed:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00194f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00194f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194fc:	ba 00 00 00 00       	mov    edx,0x0
c0019501:	83 ec 0c             	sub    esp,0xc
c0019504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019508:	53                   	push   ebx
c0019509:	52                   	push   edx
c001950a:	50                   	push   eax
c001950b:	51                   	push   ecx
c001950c:	e8 6d 45 ff ff       	call   c000da7e <LogicalDisk::write(unsigned long long, int, void*)>
c0019511:	83 c4 20             	add    esp,0x20
c0019514:	83 c4 18             	add    esp,0x18
c0019517:	5b                   	pop    ebx
c0019518:	c3                   	ret    
c0019519:	8d 76 00             	lea    esi,[esi+0x0]

c001951c <fatWrapperIoctl>:
c001951c:	53                   	push   ebx
c001951d:	83 ec 28             	sub    esp,0x28
c0019520:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019524:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019528:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001952c:	88 d0                	mov    al,dl
c001952e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019532:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019537:	83 f8 02             	cmp    eax,0x2
c001953a:	75 34                	jne    c0019570 <fatWrapperIoctl+0x54>
c001953c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019540:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019544:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019549:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019550:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019556:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001955c:	89 c2                	mov    edx,eax
c001955e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019562:	66 89 10             	mov    WORD PTR [eax],dx
c0019565:	b8 00 00 00 00       	mov    eax,0x0
c001956a:	e9 c5 00 00 00       	jmp    c0019634 <fatWrapperIoctl+0x118>
c001956f:	90                   	nop
c0019570:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019575:	83 f8 01             	cmp    eax,0x1
c0019578:	75 6a                	jne    c00195e4 <fatWrapperIoctl+0xc8>
c001957a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001957e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019582:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019587:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c001958e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019594:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001959a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00195a0:	89 c8                	mov    eax,ecx
c00195a2:	89 da                	mov    edx,ebx
c00195a4:	0f a4 c2 0a          	shld   edx,eax,0xa
c00195a8:	c1 e0 0a             	shl    eax,0xa
c00195ab:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00195b0:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c00195b7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00195bd:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00195c3:	89 cb                	mov    ebx,ecx
c00195c5:	c1 fb 1f             	sar    ebx,0x1f
c00195c8:	53                   	push   ebx
c00195c9:	51                   	push   ecx
c00195ca:	52                   	push   edx
c00195cb:	50                   	push   eax
c00195cc:	e8 af 5b 00 00       	call   c001f180 <__udivdi3>
c00195d1:	83 c4 10             	add    esp,0x10
c00195d4:	89 c2                	mov    edx,eax
c00195d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195da:	89 10                	mov    DWORD PTR [eax],edx
c00195dc:	b8 00 00 00 00       	mov    eax,0x0
c00195e1:	eb 51                	jmp    c0019634 <fatWrapperIoctl+0x118>
c00195e3:	90                   	nop
c00195e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195e9:	85 c0                	test   eax,eax
c00195eb:	75 07                	jne    c00195f4 <fatWrapperIoctl+0xd8>
c00195ed:	b8 00 00 00 00       	mov    eax,0x0
c00195f2:	eb 40                	jmp    c0019634 <fatWrapperIoctl+0x118>
c00195f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195f9:	83 f8 03             	cmp    eax,0x3
c00195fc:	75 1a                	jne    c0019618 <fatWrapperIoctl+0xfc>
c00195fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019602:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019606:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001960a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019610:	b8 00 00 00 00       	mov    eax,0x0
c0019615:	eb 1d                	jmp    c0019634 <fatWrapperIoctl+0x118>
c0019617:	90                   	nop
c0019618:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001961d:	83 f8 04             	cmp    eax,0x4
c0019620:	75 0a                	jne    c001962c <fatWrapperIoctl+0x110>
c0019622:	b8 00 00 00 00       	mov    eax,0x0
c0019627:	eb 0b                	jmp    c0019634 <fatWrapperIoctl+0x118>
c0019629:	8d 76 00             	lea    esi,[esi+0x0]
c001962c:	b8 04 00 00 00       	mov    eax,0x4
c0019631:	8d 76 00             	lea    esi,[esi+0x0]
c0019634:	83 c4 28             	add    esp,0x28
c0019637:	5b                   	pop    ebx
c0019638:	c3                   	ret    
c0019639:	90                   	nop
c001963a:	66 90                	xchg   ax,ax

c001963c <FAT::FAT()>:
c001963c:	83 ec 1c             	sub    esp,0x1c
c001963f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019643:	83 ec 0c             	sub    esp,0xc
c0019646:	50                   	push   eax
c0019647:	e8 2e 1e ff ff       	call   c000b47a <Filesystem::Filesystem()>
c001964c:	83 c4 10             	add    esp,0x10
c001964f:	ba 4c 27 02 c0       	mov    edx,0xc002274c
c0019654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019658:	89 10                	mov    DWORD PTR [eax],edx
c001965a:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c0019664:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001966c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019671:	7f 19                	jg     c001968c <FAT::FAT()+0x50>
c0019673:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019677:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c0019682:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019687:	eb e3                	jmp    c001966c <FAT::FAT()+0x30>
c0019689:	8d 76 00             	lea    esi,[esi+0x0]
c001968c:	90                   	nop
c001968d:	83 c4 1c             	add    esp,0x1c
c0019690:	c3                   	ret    
c0019691:	90                   	nop
c0019692:	66 90                	xchg   ax,ax

c0019694 <FAT::fixFilepath(char*)>:
c0019694:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019698:	8a 00                	mov    al,BYTE PTR [eax]
c001969a:	0f be c0             	movsx  eax,al
c001969d:	83 f8 40             	cmp    eax,0x40
c00196a0:	7e 2e                	jle    c00196d0 <FAT::fixFilepath(char*)+0x3c>
c00196a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196a6:	8a 00                	mov    al,BYTE PTR [eax]
c00196a8:	83 e8 41             	sub    eax,0x41
c00196ab:	88 c2                	mov    dl,al
c00196ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196b1:	88 10                	mov    BYTE PTR [eax],dl
c00196b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196b7:	8a 00                	mov    al,BYTE PTR [eax]
c00196b9:	0f be c0             	movsx  eax,al
c00196bc:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c00196c3:	83 c0 30             	add    eax,0x30
c00196c6:	88 c2                	mov    dl,al
c00196c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196cc:	88 10                	mov    BYTE PTR [eax],dl
c00196ce:	66 90                	xchg   ax,ax
c00196d0:	90                   	nop
c00196d1:	c3                   	ret    
c00196d2:	66 90                	xchg   ax,ax

c00196d4 <FAT::open(char const*, void**, FileOpenMode)>:
c00196d4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00196da:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00196e2:	74 0c                	je     c00196f0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00196e4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00196ec:	75 0e                	jne    c00196fc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00196ee:	66 90                	xchg   ax,ax
c00196f0:	b8 04 00 00 00       	mov    eax,0x4
c00196f5:	e9 46 01 00 00       	jmp    c0019840 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00196fa:	66 90                	xchg   ax,ax
c00196fc:	83 ec 08             	sub    esp,0x8
c00196ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019706:	8d 44 24 14          	lea    eax,[esp+0x14]
c001970a:	50                   	push   eax
c001970b:	e8 40 6f fe ff       	call   c0000650 <strcpy>
c0019710:	83 c4 10             	add    esp,0x10
c0019713:	83 ec 08             	sub    esp,0x8
c0019716:	8d 44 24 10          	lea    eax,[esp+0x10]
c001971a:	50                   	push   eax
c001971b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019722:	e8 6d ff ff ff       	call   c0019694 <FAT::fixFilepath(char*)>
c0019727:	83 c4 10             	add    esp,0x10
c001972a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019732:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019739:	83 e0 01             	and    eax,0x1
c001973c:	74 12                	je     c0019750 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001973e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019745:	83 c8 01             	or     eax,0x1
c0019748:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001974f:	90                   	nop
c0019750:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019757:	83 e0 04             	and    eax,0x4
c001975a:	74 24                	je     c0019780 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001975c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019763:	83 c8 30             	or     eax,0x30
c0019766:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001976d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019774:	83 c8 02             	or     eax,0x2
c0019777:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001977e:	66 90                	xchg   ax,ax
c0019780:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019787:	83 e0 02             	and    eax,0x2
c001978a:	74 14                	je     c00197a0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001978c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019793:	83 c8 02             	or     eax,0x2
c0019796:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001979d:	8d 76 00             	lea    esi,[esi+0x0]
c00197a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197a7:	83 e0 08             	and    eax,0x8
c00197aa:	74 14                	je     c00197c0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c00197ac:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197b3:	83 c8 04             	or     eax,0x4
c00197b6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197bd:	8d 76 00             	lea    esi,[esi+0x0]
c00197c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197c7:	83 e0 10             	and    eax,0x10
c00197ca:	74 14                	je     c00197e0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c00197cc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197d3:	83 c8 08             	or     eax,0x8
c00197d6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197dd:	8d 76 00             	lea    esi,[esi+0x0]
c00197e0:	83 ec 0c             	sub    esp,0xc
c00197e3:	68 28 02 00 00       	push   0x228
c00197e8:	e8 e6 e2 fe ff       	call   c0007ad3 <malloc>
c00197ed:	83 c4 10             	add    esp,0x10
c00197f0:	89 c2                	mov    edx,eax
c00197f2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197f9:	89 10                	mov    DWORD PTR [eax],edx
c00197fb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019803:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001980a:	8b 00                	mov    eax,DWORD PTR [eax]
c001980c:	83 ec 04             	sub    esp,0x4
c001980f:	52                   	push   edx
c0019810:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019814:	52                   	push   edx
c0019815:	50                   	push   eax
c0019816:	e8 85 a4 fe ff       	call   c0003ca0 <f_open>
c001981b:	83 c4 10             	add    esp,0x10
c001981e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019825:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001982d:	74 09                	je     c0019838 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001982f:	b8 01 00 00 00       	mov    eax,0x1
c0019834:	eb 0a                	jmp    c0019840 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019836:	66 90                	xchg   ax,ax
c0019838:	b8 00 00 00 00       	mov    eax,0x0
c001983d:	8d 76 00             	lea    esi,[esi+0x0]
c0019840:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019846:	c3                   	ret    
c0019847:	90                   	nop

c0019848 <FAT::openDir(char const*, void**)>:
c0019848:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001984e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019856:	74 0c                	je     c0019864 <FAT::openDir(char const*, void**)+0x1c>
c0019858:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019860:	75 0e                	jne    c0019870 <FAT::openDir(char const*, void**)+0x28>
c0019862:	66 90                	xchg   ax,ax
c0019864:	b8 04 00 00 00       	mov    eax,0x4
c0019869:	e9 82 00 00 00       	jmp    c00198f0 <FAT::openDir(char const*, void**)+0xa8>
c001986e:	66 90                	xchg   ax,ax
c0019870:	83 ec 08             	sub    esp,0x8
c0019873:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001987a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001987e:	50                   	push   eax
c001987f:	e8 cc 6d fe ff       	call   c0000650 <strcpy>
c0019884:	83 c4 10             	add    esp,0x10
c0019887:	83 ec 08             	sub    esp,0x8
c001988a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001988e:	50                   	push   eax
c001988f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019896:	e8 f9 fd ff ff       	call   c0019694 <FAT::fixFilepath(char*)>
c001989b:	83 c4 10             	add    esp,0x10
c001989e:	83 ec 0c             	sub    esp,0xc
c00198a1:	6a 30                	push   0x30
c00198a3:	e8 2b e2 fe ff       	call   c0007ad3 <malloc>
c00198a8:	83 c4 10             	add    esp,0x10
c00198ab:	89 c2                	mov    edx,eax
c00198ad:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198b4:	89 10                	mov    DWORD PTR [eax],edx
c00198b6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00198bf:	83 ec 08             	sub    esp,0x8
c00198c2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00198c6:	52                   	push   edx
c00198c7:	50                   	push   eax
c00198c8:	e8 62 ad fe ff       	call   c000462f <f_opendir>
c00198cd:	83 c4 10             	add    esp,0x10
c00198d0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00198d7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00198df:	74 07                	je     c00198e8 <FAT::openDir(char const*, void**)+0xa0>
c00198e1:	b8 01 00 00 00       	mov    eax,0x1
c00198e6:	eb 08                	jmp    c00198f0 <FAT::openDir(char const*, void**)+0xa8>
c00198e8:	b8 00 00 00 00       	mov    eax,0x0
c00198ed:	8d 76 00             	lea    esi,[esi+0x0]
c00198f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198f6:	c3                   	ret    
c00198f7:	90                   	nop

c00198f8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00198f8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00198fe:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019906:	75 0c                	jne    c0019914 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019908:	b8 04 00 00 00       	mov    eax,0x4
c001990d:	e9 d6 00 00 00       	jmp    c00199e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019912:	66 90                	xchg   ax,ax
c0019914:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001991c:	75 0a                	jne    c0019928 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001991e:	b8 04 00 00 00       	mov    eax,0x4
c0019923:	e9 c0 00 00 00       	jmp    c00199e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019928:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019930:	75 0a                	jne    c001993c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019932:	b8 04 00 00 00       	mov    eax,0x4
c0019937:	e9 ac 00 00 00       	jmp    c00199e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001993c:	83 ec 08             	sub    esp,0x8
c001993f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019946:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001994d:	50                   	push   eax
c001994e:	e8 fd 6c fe ff       	call   c0000650 <strcpy>
c0019953:	83 c4 10             	add    esp,0x10
c0019956:	83 ec 08             	sub    esp,0x8
c0019959:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019960:	50                   	push   eax
c0019961:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019968:	e8 27 fd ff ff       	call   c0019694 <FAT::fixFilepath(char*)>
c001996d:	83 c4 10             	add    esp,0x10
c0019970:	83 ec 08             	sub    esp,0x8
c0019973:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019977:	50                   	push   eax
c0019978:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001997f:	50                   	push   eax
c0019980:	e8 29 ae fe ff       	call   c00047ae <f_stat>
c0019985:	83 c4 10             	add    esp,0x10
c0019988:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001998f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019996:	85 c0                	test   eax,eax
c0019998:	74 0a                	je     c00199a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001999a:	83 f8 04             	cmp    eax,0x4
c001999d:	74 39                	je     c00199d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001999f:	eb 3f                	jmp    c00199e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00199a1:	8d 76 00             	lea    esi,[esi+0x0]
c00199a4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00199a8:	0f b6 c0             	movzx  eax,al
c00199ab:	83 e0 10             	and    eax,0x10
c00199ae:	0f 95 c2             	setne  dl
c00199b1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00199b8:	88 10                	mov    BYTE PTR [eax],dl
c00199ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199be:	ba 00 00 00 00       	mov    edx,0x0
c00199c3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00199ca:	89 01                	mov    DWORD PTR [ecx],eax
c00199cc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00199cf:	b8 00 00 00 00       	mov    eax,0x0
c00199d4:	eb 12                	jmp    c00199e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199d6:	66 90                	xchg   ax,ax
c00199d8:	b8 02 00 00 00       	mov    eax,0x2
c00199dd:	eb 09                	jmp    c00199e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199df:	90                   	nop
c00199e0:	b8 01 00 00 00       	mov    eax,0x1
c00199e5:	8d 76 00             	lea    esi,[esi+0x0]
c00199e8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00199ee:	c3                   	ret    
c00199ef:	90                   	nop

c00199f0 <FAT::unlink(char const*)>:
c00199f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199fe:	75 08                	jne    c0019a08 <FAT::unlink(char const*)+0x18>
c0019a00:	b8 04 00 00 00       	mov    eax,0x4
c0019a05:	eb 61                	jmp    c0019a68 <FAT::unlink(char const*)+0x78>
c0019a07:	90                   	nop
c0019a08:	83 ec 08             	sub    esp,0x8
c0019a0b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a12:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a16:	50                   	push   eax
c0019a17:	e8 34 6c fe ff       	call   c0000650 <strcpy>
c0019a1c:	83 c4 10             	add    esp,0x10
c0019a1f:	83 ec 08             	sub    esp,0x8
c0019a22:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a26:	50                   	push   eax
c0019a27:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a2e:	e8 61 fc ff ff       	call   c0019694 <FAT::fixFilepath(char*)>
c0019a33:	83 c4 10             	add    esp,0x10
c0019a36:	83 ec 0c             	sub    esp,0xc
c0019a39:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a3d:	50                   	push   eax
c0019a3e:	e8 dd af fe ff       	call   c0004a20 <f_unlink>
c0019a43:	83 c4 10             	add    esp,0x10
c0019a46:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a4d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019a54:	85 c0                	test   eax,eax
c0019a56:	75 08                	jne    c0019a60 <FAT::unlink(char const*)+0x70>
c0019a58:	b8 00 00 00 00       	mov    eax,0x0
c0019a5d:	eb 09                	jmp    c0019a68 <FAT::unlink(char const*)+0x78>
c0019a5f:	90                   	nop
c0019a60:	b8 01 00 00 00       	mov    eax,0x1
c0019a65:	8d 76 00             	lea    esi,[esi+0x0]
c0019a68:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a6e:	c3                   	ret    
c0019a6f:	90                   	nop

c0019a70 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019a70:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019a76:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019a7d:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019a84:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a88:	88 d0                	mov    al,dl
c0019a8a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a8e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019a96:	75 0c                	jne    c0019aa4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019a98:	b8 04 00 00 00       	mov    eax,0x4
c0019a9d:	e9 7e 01 00 00       	jmp    c0019c20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019aa2:	66 90                	xchg   ax,ax
c0019aa4:	83 ec 08             	sub    esp,0x8
c0019aa7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019aae:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ab2:	50                   	push   eax
c0019ab3:	e8 98 6b fe ff       	call   c0000650 <strcpy>
c0019ab8:	83 c4 10             	add    esp,0x10
c0019abb:	83 ec 08             	sub    esp,0x8
c0019abe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019ac2:	50                   	push   eax
c0019ac3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019aca:	e8 c5 fb ff ff       	call   c0019694 <FAT::fixFilepath(char*)>
c0019acf:	83 c4 10             	add    esp,0x10
c0019ad2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019ada:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019ae2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ae7:	83 e0 01             	and    eax,0x1
c0019aea:	74 14                	je     c0019b00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019aec:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019af3:	83 c8 01             	or     eax,0x1
c0019af6:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019afd:	8d 76 00             	lea    esi,[esi+0x0]
c0019b00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b05:	83 e0 02             	and    eax,0x2
c0019b08:	74 12                	je     c0019b1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019b0a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b11:	83 c8 20             	or     eax,0x20
c0019b14:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b1b:	90                   	nop
c0019b1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b21:	83 e0 04             	and    eax,0x4
c0019b24:	74 12                	je     c0019b38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019b26:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b2d:	83 c8 04             	or     eax,0x4
c0019b30:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b37:	90                   	nop
c0019b38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b3d:	83 e0 08             	and    eax,0x8
c0019b40:	74 12                	je     c0019b54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019b42:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b49:	83 c8 02             	or     eax,0x2
c0019b4c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b53:	90                   	nop
c0019b54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b59:	83 e0 01             	and    eax,0x1
c0019b5c:	74 12                	je     c0019b70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019b5e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b65:	83 c8 01             	or     eax,0x1
c0019b68:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b6f:	90                   	nop
c0019b70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b75:	83 e0 02             	and    eax,0x2
c0019b78:	74 12                	je     c0019b8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019b7a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b81:	83 c8 20             	or     eax,0x20
c0019b84:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b8b:	90                   	nop
c0019b8c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b91:	83 e0 04             	and    eax,0x4
c0019b94:	74 12                	je     c0019ba8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019b96:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b9d:	83 c8 04             	or     eax,0x4
c0019ba0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019ba7:	90                   	nop
c0019ba8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bad:	83 e0 08             	and    eax,0x8
c0019bb0:	74 12                	je     c0019bc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019bb2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019bb9:	83 c8 02             	or     eax,0x2
c0019bbc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bc3:	90                   	nop
c0019bc4:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019bcb:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019bd2:	09 d0                	or     eax,edx
c0019bd4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bdb:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019be3:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019beb:	83 ec 04             	sub    esp,0x4
c0019bee:	52                   	push   edx
c0019bef:	50                   	push   eax
c0019bf0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019bf4:	50                   	push   eax
c0019bf5:	e8 99 b2 fe ff       	call   c0004e93 <f_chmod>
c0019bfa:	83 c4 10             	add    esp,0x10
c0019bfd:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019c04:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019c0b:	85 c0                	test   eax,eax
c0019c0d:	75 09                	jne    c0019c18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019c0f:	b8 00 00 00 00       	mov    eax,0x0
c0019c14:	eb 0a                	jmp    c0019c20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019c16:	66 90                	xchg   ax,ax
c0019c18:	b8 01 00 00 00       	mov    eax,0x1
c0019c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c20:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c26:	c3                   	ret    
c0019c27:	90                   	nop

c0019c28 <FAT::rename(char const*, char const*)>:
c0019c28:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019c2e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019c36:	74 0c                	je     c0019c44 <FAT::rename(char const*, char const*)+0x1c>
c0019c38:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019c40:	75 0e                	jne    c0019c50 <FAT::rename(char const*, char const*)+0x28>
c0019c42:	66 90                	xchg   ax,ax
c0019c44:	b8 04 00 00 00       	mov    eax,0x4
c0019c49:	e9 9e 00 00 00       	jmp    c0019cec <FAT::rename(char const*, char const*)+0xc4>
c0019c4e:	66 90                	xchg   ax,ax
c0019c50:	83 ec 08             	sub    esp,0x8
c0019c53:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c5a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c61:	50                   	push   eax
c0019c62:	e8 e9 69 fe ff       	call   c0000650 <strcpy>
c0019c67:	83 c4 10             	add    esp,0x10
c0019c6a:	83 ec 08             	sub    esp,0x8
c0019c6d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019c74:	50                   	push   eax
c0019c75:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c7c:	e8 13 fa ff ff       	call   c0019694 <FAT::fixFilepath(char*)>
c0019c81:	83 c4 10             	add    esp,0x10
c0019c84:	83 ec 08             	sub    esp,0x8
c0019c87:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019c8e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c92:	50                   	push   eax
c0019c93:	e8 b8 69 fe ff       	call   c0000650 <strcpy>
c0019c98:	83 c4 10             	add    esp,0x10
c0019c9b:	83 ec 08             	sub    esp,0x8
c0019c9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ca2:	50                   	push   eax
c0019ca3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019caa:	e8 e5 f9 ff ff       	call   c0019694 <FAT::fixFilepath(char*)>
c0019caf:	83 c4 10             	add    esp,0x10
c0019cb2:	83 ec 08             	sub    esp,0x8
c0019cb5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cb9:	50                   	push   eax
c0019cba:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019cc1:	50                   	push   eax
c0019cc2:	e8 14 b0 fe ff       	call   c0004cdb <f_rename>
c0019cc7:	83 c4 10             	add    esp,0x10
c0019cca:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019cd1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019cd8:	85 c0                	test   eax,eax
c0019cda:	75 08                	jne    c0019ce4 <FAT::rename(char const*, char const*)+0xbc>
c0019cdc:	b8 00 00 00 00       	mov    eax,0x0
c0019ce1:	eb 09                	jmp    c0019cec <FAT::rename(char const*, char const*)+0xc4>
c0019ce3:	90                   	nop
c0019ce4:	b8 01 00 00 00       	mov    eax,0x1
c0019ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0019cec:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019cf2:	c3                   	ret    
c0019cf3:	90                   	nop

c0019cf4 <FAT::mkdir(char const*)>:
c0019cf4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019cfa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d02:	75 08                	jne    c0019d0c <FAT::mkdir(char const*)+0x18>
c0019d04:	b8 04 00 00 00       	mov    eax,0x4
c0019d09:	eb 61                	jmp    c0019d6c <FAT::mkdir(char const*)+0x78>
c0019d0b:	90                   	nop
c0019d0c:	83 ec 08             	sub    esp,0x8
c0019d0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d16:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d1a:	50                   	push   eax
c0019d1b:	e8 30 69 fe ff       	call   c0000650 <strcpy>
c0019d20:	83 c4 10             	add    esp,0x10
c0019d23:	83 ec 08             	sub    esp,0x8
c0019d26:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d2a:	50                   	push   eax
c0019d2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d32:	e8 5d f9 ff ff       	call   c0019694 <FAT::fixFilepath(char*)>
c0019d37:	83 c4 10             	add    esp,0x10
c0019d3a:	83 ec 0c             	sub    esp,0xc
c0019d3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d41:	50                   	push   eax
c0019d42:	e8 f9 ad fe ff       	call   c0004b40 <f_mkdir>
c0019d47:	83 c4 10             	add    esp,0x10
c0019d4a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019d51:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019d58:	85 c0                	test   eax,eax
c0019d5a:	75 08                	jne    c0019d64 <FAT::mkdir(char const*)+0x70>
c0019d5c:	b8 00 00 00 00       	mov    eax,0x0
c0019d61:	eb 09                	jmp    c0019d6c <FAT::mkdir(char const*)+0x78>
c0019d63:	90                   	nop
c0019d64:	b8 01 00 00 00       	mov    eax,0x1
c0019d69:	8d 76 00             	lea    esi,[esi+0x0]
c0019d6c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d72:	c3                   	ret    
c0019d73:	90                   	nop

c0019d74 <FAT::exists(char const*)>:
c0019d74:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019d7a:	83 ec 08             	sub    esp,0x8
c0019d7d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d84:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d88:	50                   	push   eax
c0019d89:	e8 c2 68 fe ff       	call   c0000650 <strcpy>
c0019d8e:	83 c4 10             	add    esp,0x10
c0019d91:	83 ec 08             	sub    esp,0x8
c0019d94:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019d98:	50                   	push   eax
c0019d99:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019da0:	e8 ef f8 ff ff       	call   c0019694 <FAT::fixFilepath(char*)>
c0019da5:	83 c4 10             	add    esp,0x10
c0019da8:	83 ec 08             	sub    esp,0x8
c0019dab:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019db2:	50                   	push   eax
c0019db3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019db7:	50                   	push   eax
c0019db8:	e8 f1 a9 fe ff       	call   c00047ae <f_stat>
c0019dbd:	83 c4 10             	add    esp,0x10
c0019dc0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019dc7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019dce:	85 c0                	test   eax,eax
c0019dd0:	75 06                	jne    c0019dd8 <FAT::exists(char const*)+0x64>
c0019dd2:	b0 01                	mov    al,0x1
c0019dd4:	eb 06                	jmp    c0019ddc <FAT::exists(char const*)+0x68>
c0019dd6:	66 90                	xchg   ax,ax
c0019dd8:	b0 00                	mov    al,0x0
c0019dda:	66 90                	xchg   ax,ax
c0019ddc:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019de2:	c3                   	ret    
c0019de3:	90                   	nop

c0019de4 <isoReadDiscSectorHelper>:
c0019de4:	83 ec 2c             	sub    esp,0x2c
c0019de7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019deb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019def:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019df4:	83 e8 41             	sub    eax,0x41
c0019df7:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019dfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e02:	ba 00 00 00 00       	mov    edx,0x0
c0019e07:	83 ec 0c             	sub    esp,0xc
c0019e0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e0e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019e12:	52                   	push   edx
c0019e13:	50                   	push   eax
c0019e14:	51                   	push   ecx
c0019e15:	e8 f8 3b ff ff       	call   c000da12 <LogicalDisk::read(unsigned long long, int, void*)>
c0019e1a:	83 c4 20             	add    esp,0x20
c0019e1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e21:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019e26:	74 0c                	je     c0019e34 <isoReadDiscSectorHelper+0x50>
c0019e28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e2c:	c1 e0 0b             	shl    eax,0xb
c0019e2f:	eb 0b                	jmp    c0019e3c <isoReadDiscSectorHelper+0x58>
c0019e31:	8d 76 00             	lea    esi,[esi+0x0]
c0019e34:	b8 00 00 00 00       	mov    eax,0x0
c0019e39:	8d 76 00             	lea    esi,[esi+0x0]
c0019e3c:	83 c4 2c             	add    esp,0x2c
c0019e3f:	c3                   	ret    

c0019e40 <iso_kprintf>:
c0019e40:	83 ec 0c             	sub    esp,0xc
c0019e43:	83 ec 08             	sub    esp,0x8
c0019e46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e4a:	68 fa 24 02 c0       	push   0xc00224fa
c0019e4f:	e8 b6 0a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019e54:	83 c4 10             	add    esp,0x10
c0019e57:	90                   	nop
c0019e58:	83 c4 0c             	add    esp,0xc
c0019e5b:	c3                   	ret    

c0019e5c <iso_kprintfd>:
c0019e5c:	83 ec 0c             	sub    esp,0xc
c0019e5f:	83 ec 08             	sub    esp,0x8
c0019e62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e66:	68 5a 0d 02 c0       	push   0xc0020d5a
c0019e6b:	e8 9a 0a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019e70:	83 c4 10             	add    esp,0x10
c0019e73:	90                   	nop
c0019e74:	83 c4 0c             	add    esp,0xc
c0019e77:	c3                   	ret    

c0019e78 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019e78:	b8 08 00 00 00       	mov    eax,0x8
c0019e7d:	c3                   	ret    

c0019e7e <ISO9660::truncate(void*, unsigned long long)>:
c0019e7e:	b8 01 00 00 00       	mov    eax,0x1
c0019e83:	c3                   	ret    

c0019e84 <ISO9660::getName()>:
c0019e84:	b8 b0 27 02 c0       	mov    eax,0xc00227b0
c0019e89:	c3                   	ret    

c0019e8a <ISO9660::closeDir(void*)>:
c0019e8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e90:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019e93:	90                   	nop

c0019e94 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019e94:	b8 01 00 00 00       	mov    eax,0x1
c0019e99:	c3                   	ret    

c0019e9a <ISO9660::unlink(char const*)>:
c0019e9a:	b8 01 00 00 00       	mov    eax,0x1
c0019e9f:	c3                   	ret    

c0019ea0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019ea0:	b8 03 00 00 00       	mov    eax,0x3
c0019ea5:	c3                   	ret    

c0019ea6 <ISO9660::rename(char const*, char const*)>:
c0019ea6:	b8 01 00 00 00       	mov    eax,0x1
c0019eab:	c3                   	ret    

c0019eac <ISO9660::mkdir(char const*)>:
c0019eac:	b8 01 00 00 00       	mov    eax,0x1
c0019eb1:	c3                   	ret    

c0019eb2 <ISO9660::~ISO9660()>:
c0019eb2:	83 ec 0c             	sub    esp,0xc
c0019eb5:	ba f0 28 02 c0       	mov    edx,0xc00228f0
c0019eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ebe:	89 10                	mov    DWORD PTR [eax],edx
c0019ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ec4:	83 ec 0c             	sub    esp,0xc
c0019ec7:	50                   	push   eax
c0019ec8:	e8 d1 15 ff ff       	call   c000b49e <Filesystem::~Filesystem()>
c0019ecd:	83 c4 10             	add    esp,0x10
c0019ed0:	90                   	nop
c0019ed1:	83 c4 0c             	add    esp,0xc
c0019ed4:	c3                   	ret    
c0019ed5:	90                   	nop

c0019ed6 <ISO9660::~ISO9660()>:
c0019ed6:	83 ec 0c             	sub    esp,0xc
c0019ed9:	83 ec 0c             	sub    esp,0xc
c0019edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ee0:	e8 cd ff ff ff       	call   c0019eb2 <ISO9660::~ISO9660()>
c0019ee5:	83 c4 10             	add    esp,0x10
c0019ee8:	83 ec 08             	sub    esp,0x8
c0019eeb:	6a 08                	push   0x8
c0019eed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ef1:	e8 16 09 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0019ef6:	83 c4 10             	add    esp,0x10
c0019ef9:	83 c4 0c             	add    esp,0xc
c0019efc:	c3                   	ret    
c0019efd:	90                   	nop

c0019efe <ISO9660::exists(char const*)>:
c0019efe:	83 ec 18             	sub    esp,0x18
c0019f01:	68 cb 27 02 c0       	push   0xc00227cb
c0019f06:	e8 ba 72 ff ff       	call   c00111c5 <KePanic(char const*)>
c0019f0b:	31 c0                	xor    eax,eax
c0019f0d:	83 c4 1c             	add    esp,0x1c
c0019f10:	c3                   	ret    
c0019f11:	90                   	nop

c0019f12 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019f12:	56                   	push   esi
c0019f13:	53                   	push   ebx
c0019f14:	53                   	push   ebx
c0019f15:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f19:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f1d:	85 db                	test   ebx,ebx
c0019f1f:	0f 84 ca 00 00 00    	je     c0019fef <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f25:	85 f6                	test   esi,esi
c0019f27:	0f 84 c2 00 00 00    	je     c0019fef <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f2d:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019f32:	b8 03 00 00 00       	mov    eax,0x3
c0019f37:	0f 85 b7 00 00 00    	jne    c0019ff4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f3d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019f3f:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c0019f45:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c0019f4c:	74 1b                	je     c0019f69 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019f4e:	85 c0                	test   eax,eax
c0019f50:	74 10                	je     c0019f62 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019f52:	83 ec 0c             	sub    esp,0xc
c0019f55:	68 e9 27 02 c0       	push   0xc00227e9
c0019f5a:	e8 66 72 ff ff       	call   c00111c5 <KePanic(char const*)>
c0019f5f:	83 c4 10             	add    esp,0x10
c0019f62:	8a 03                	mov    al,BYTE PTR [ebx]
c0019f64:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c0019f69:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f6c:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c0019f73:	85 c0                	test   eax,eax
c0019f75:	74 09                	je     c0019f80 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019f77:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019f7e:	74 48                	je     c0019fc8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019f80:	83 ec 0c             	sub    esp,0xc
c0019f83:	68 f9 27 02 c0       	push   0xc00227f9
c0019f88:	e8 7d 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f8d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f90:	83 c4 10             	add    esp,0x10
c0019f93:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c0019f9a:	85 c0                	test   eax,eax
c0019f9c:	74 17                	je     c0019fb5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019f9e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019fa5:	83 ec 0c             	sub    esp,0xc
c0019fa8:	68 19 28 02 c0       	push   0xc0022819
c0019fad:	e8 58 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019fb2:	83 c4 10             	add    esp,0x10
c0019fb5:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c0019fbc:	83 ec 0c             	sub    esp,0xc
c0019fbf:	50                   	push   eax
c0019fc0:	e8 a2 ca fe ff       	call   c0006a67 <init_percd>
c0019fc5:	83 c4 10             	add    esp,0x10
c0019fc8:	51                   	push   ecx
c0019fc9:	83 c3 03             	add    ebx,0x3
c0019fcc:	51                   	push   ecx
c0019fcd:	6a 00                	push   0x0
c0019fcf:	53                   	push   ebx
c0019fd0:	e8 55 c5 fe ff       	call   c000652a <iso_open>
c0019fd5:	83 c4 10             	add    esp,0x10
c0019fd8:	89 c2                	mov    edx,eax
c0019fda:	b8 01 00 00 00       	mov    eax,0x1
c0019fdf:	83 fa ff             	cmp    edx,0xffffffff
c0019fe2:	74 10                	je     c0019ff4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019fe4:	83 c2 32             	add    edx,0x32
c0019fe7:	31 c0                	xor    eax,eax
c0019fe9:	01 d2                	add    edx,edx
c0019feb:	89 16                	mov    DWORD PTR [esi],edx
c0019fed:	eb 05                	jmp    c0019ff4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019fef:	b8 04 00 00 00       	mov    eax,0x4
c0019ff4:	5a                   	pop    edx
c0019ff5:	5b                   	pop    ebx
c0019ff6:	5e                   	pop    esi
c0019ff7:	c3                   	ret    

c0019ff8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019ff8:	53                   	push   ebx
c0019ff9:	83 ec 08             	sub    esp,0x8
c0019ffc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a000:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a004:	85 c0                	test   eax,eax
c001a006:	74 2d                	je     c001a035 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a008:	85 db                	test   ebx,ebx
c001a00a:	74 29                	je     c001a035 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a00c:	52                   	push   edx
c001a00d:	b9 02 00 00 00       	mov    ecx,0x2
c001a012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a016:	99                   	cdq    
c001a017:	f7 f9                	idiv   ecx
c001a019:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a01d:	83 e8 32             	sub    eax,0x32
c001a020:	50                   	push   eax
c001a021:	e8 ac c5 fe ff       	call   c00065d2 <iso_read>
c001a026:	83 c4 10             	add    esp,0x10
c001a029:	89 03                	mov    DWORD PTR [ebx],eax
c001a02b:	09 d0                	or     eax,edx
c001a02d:	0f 94 c0             	sete   al
c001a030:	0f b6 c0             	movzx  eax,al
c001a033:	eb 05                	jmp    c001a03a <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a035:	b8 04 00 00 00       	mov    eax,0x4
c001a03a:	83 c4 08             	add    esp,0x8
c001a03d:	5b                   	pop    ebx
c001a03e:	c3                   	ret    
c001a03f:	90                   	nop

c001a040 <ISO9660::seek(void*, unsigned long long)>:
c001a040:	57                   	push   edi
c001a041:	b8 04 00 00 00       	mov    eax,0x4
c001a046:	56                   	push   esi
c001a047:	51                   	push   ecx
c001a048:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a04c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a050:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a054:	85 d2                	test   edx,edx
c001a056:	74 26                	je     c001a07e <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a058:	89 d0                	mov    eax,edx
c001a05a:	b9 02 00 00 00       	mov    ecx,0x2
c001a05f:	6a 00                	push   0x0
c001a061:	99                   	cdq    
c001a062:	f7 f9                	idiv   ecx
c001a064:	57                   	push   edi
c001a065:	56                   	push   esi
c001a066:	83 e8 32             	sub    eax,0x32
c001a069:	50                   	push   eax
c001a06a:	e8 79 c6 fe ff       	call   c00066e8 <iso_seek>
c001a06f:	83 c4 10             	add    esp,0x10
c001a072:	31 f0                	xor    eax,esi
c001a074:	31 fa                	xor    edx,edi
c001a076:	09 d0                	or     eax,edx
c001a078:	0f 95 c0             	setne  al
c001a07b:	0f b6 c0             	movzx  eax,al
c001a07e:	5a                   	pop    edx
c001a07f:	5e                   	pop    esi
c001a080:	5f                   	pop    edi
c001a081:	c3                   	ret    

c001a082 <ISO9660::tell(void*, unsigned long long*)>:
c001a082:	53                   	push   ebx
c001a083:	83 ec 08             	sub    esp,0x8
c001a086:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a08a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a08e:	85 c0                	test   eax,eax
c001a090:	74 24                	je     c001a0b6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a092:	85 db                	test   ebx,ebx
c001a094:	74 20                	je     c001a0b6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a096:	b9 02 00 00 00       	mov    ecx,0x2
c001a09b:	99                   	cdq    
c001a09c:	f7 f9                	idiv   ecx
c001a09e:	83 ec 0c             	sub    esp,0xc
c001a0a1:	83 e8 32             	sub    eax,0x32
c001a0a4:	50                   	push   eax
c001a0a5:	e8 c2 c6 fe ff       	call   c000676c <iso_tell>
c001a0aa:	83 c4 10             	add    esp,0x10
c001a0ad:	89 03                	mov    DWORD PTR [ebx],eax
c001a0af:	31 c0                	xor    eax,eax
c001a0b1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a0b4:	eb 05                	jmp    c001a0bb <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a0b6:	b8 04 00 00 00       	mov    eax,0x4
c001a0bb:	83 c4 08             	add    esp,0x8
c001a0be:	5b                   	pop    ebx
c001a0bf:	c3                   	ret    

c001a0c0 <ISO9660::stat(void*, unsigned long long*)>:
c001a0c0:	56                   	push   esi
c001a0c1:	53                   	push   ebx
c001a0c2:	83 ec 10             	sub    esp,0x10
c001a0c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a0c9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a0cd:	68 3d 28 02 c0       	push   0xc002283d
c001a0d2:	e8 33 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a0d7:	83 c4 10             	add    esp,0x10
c001a0da:	85 db                	test   ebx,ebx
c001a0dc:	74 2a                	je     c001a108 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a0de:	85 f6                	test   esi,esi
c001a0e0:	74 26                	je     c001a108 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a0e2:	89 d8                	mov    eax,ebx
c001a0e4:	b9 02 00 00 00       	mov    ecx,0x2
c001a0e9:	99                   	cdq    
c001a0ea:	83 ec 0c             	sub    esp,0xc
c001a0ed:	f7 f9                	idiv   ecx
c001a0ef:	83 e8 32             	sub    eax,0x32
c001a0f2:	50                   	push   eax
c001a0f3:	e8 a5 c6 fe ff       	call   c000679d <iso_total>
c001a0f8:	83 c4 10             	add    esp,0x10
c001a0fb:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a102:	89 06                	mov    DWORD PTR [esi],eax
c001a104:	31 c0                	xor    eax,eax
c001a106:	eb 05                	jmp    c001a10d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a108:	b8 04 00 00 00       	mov    eax,0x4
c001a10d:	5a                   	pop    edx
c001a10e:	5b                   	pop    ebx
c001a10f:	5e                   	pop    esi
c001a110:	c3                   	ret    
c001a111:	90                   	nop

c001a112 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a112:	55                   	push   ebp
c001a113:	57                   	push   edi
c001a114:	56                   	push   esi
c001a115:	53                   	push   ebx
c001a116:	83 ec 18             	sub    esp,0x18
c001a119:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a11d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a121:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a125:	68 45 28 02 c0       	push   0xc0022845
c001a12a:	e8 db 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a12f:	83 c4 10             	add    esp,0x10
c001a132:	85 ff                	test   edi,edi
c001a134:	0f 94 c0             	sete   al
c001a137:	85 f6                	test   esi,esi
c001a139:	0f 94 c2             	sete   dl
c001a13c:	09 d0                	or     eax,edx
c001a13e:	a8 01                	test   al,0x1
c001a140:	0f 85 dd 00 00 00    	jne    c001a223 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a146:	85 db                	test   ebx,ebx
c001a148:	0f 84 d5 00 00 00    	je     c001a223 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a14e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a151:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a157:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a15e:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a165:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a167:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a16d:	74 1b                	je     c001a18a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a16f:	85 c0                	test   eax,eax
c001a171:	74 10                	je     c001a183 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a173:	83 ec 0c             	sub    esp,0xc
c001a176:	68 e9 27 02 c0       	push   0xc00227e9
c001a17b:	e8 45 70 ff ff       	call   c00111c5 <KePanic(char const*)>
c001a180:	83 c4 10             	add    esp,0x10
c001a183:	8a 03                	mov    al,BYTE PTR [ebx]
c001a185:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a18a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a18d:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a194:	85 c0                	test   eax,eax
c001a196:	74 09                	je     c001a1a1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a198:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a19f:	74 51                	je     c001a1f2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a1a1:	83 ec 0c             	sub    esp,0xc
c001a1a4:	68 4d 28 02 c0       	push   0xc002284d
c001a1a9:	e8 5c 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a1ae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1b1:	83 c4 10             	add    esp,0x10
c001a1b4:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a1bc:	74 21                	je     c001a1df <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a1be:	83 ec 0c             	sub    esp,0xc
c001a1c1:	68 6d 28 02 c0       	push   0xc002286d
c001a1c6:	e8 3f 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a1cb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1ce:	83 c4 10             	add    esp,0x10
c001a1d1:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a1d8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a1df:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a1e6:	83 ec 0c             	sub    esp,0xc
c001a1e9:	50                   	push   eax
c001a1ea:	e8 78 c8 fe ff       	call   c0006a67 <init_percd>
c001a1ef:	83 c4 10             	add    esp,0x10
c001a1f2:	52                   	push   edx
c001a1f3:	83 c3 03             	add    ebx,0x3
c001a1f6:	52                   	push   edx
c001a1f7:	6a 00                	push   0x0
c001a1f9:	53                   	push   ebx
c001a1fa:	e8 2b c3 fe ff       	call   c000652a <iso_open>
c001a1ff:	83 c4 10             	add    esp,0x10
c001a202:	83 f8 ff             	cmp    eax,0xffffffff
c001a205:	89 c5                	mov    ebp,eax
c001a207:	75 21                	jne    c001a22a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a209:	50                   	push   eax
c001a20a:	50                   	push   eax
c001a20b:	6a 01                	push   0x1
c001a20d:	53                   	push   ebx
c001a20e:	e8 17 c3 fe ff       	call   c000652a <iso_open>
c001a213:	83 c4 10             	add    esp,0x10
c001a216:	ba 02 00 00 00       	mov    edx,0x2
c001a21b:	40                   	inc    eax
c001a21c:	74 2b                	je     c001a249 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a21e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a221:	eb 24                	jmp    c001a247 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a223:	ba 04 00 00 00       	mov    edx,0x4
c001a228:	eb 1f                	jmp    c001a249 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a22a:	83 ec 0c             	sub    esp,0xc
c001a22d:	50                   	push   eax
c001a22e:	e8 6a c5 fe ff       	call   c000679d <iso_total>
c001a233:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a23a:	89 07                	mov    DWORD PTR [edi],eax
c001a23c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a23f:	e8 70 c3 fe ff       	call   c00065b4 <iso_close>
c001a244:	83 c4 10             	add    esp,0x10
c001a247:	31 d2                	xor    edx,edx
c001a249:	83 c4 0c             	add    esp,0xc
c001a24c:	89 d0                	mov    eax,edx
c001a24e:	5b                   	pop    ebx
c001a24f:	5e                   	pop    esi
c001a250:	5f                   	pop    edi
c001a251:	5d                   	pop    ebp
c001a252:	c3                   	ret    
c001a253:	90                   	nop

c001a254 <ISO9660::close(void*)>:
c001a254:	83 ec 0c             	sub    esp,0xc
c001a257:	b8 04 00 00 00       	mov    eax,0x4
c001a25c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a260:	85 d2                	test   edx,edx
c001a262:	74 1b                	je     c001a27f <ISO9660::close(void*)+0x2b>
c001a264:	89 d0                	mov    eax,edx
c001a266:	b9 02 00 00 00       	mov    ecx,0x2
c001a26b:	99                   	cdq    
c001a26c:	83 ec 0c             	sub    esp,0xc
c001a26f:	f7 f9                	idiv   ecx
c001a271:	83 e8 32             	sub    eax,0x32
c001a274:	50                   	push   eax
c001a275:	e8 3a c3 fe ff       	call   c00065b4 <iso_close>
c001a27a:	83 c4 10             	add    esp,0x10
c001a27d:	31 c0                	xor    eax,eax
c001a27f:	83 c4 0c             	add    esp,0xc
c001a282:	c3                   	ret    
c001a283:	90                   	nop

c001a284 <ISO9660::openDir(char const*, void**)>:
c001a284:	56                   	push   esi
c001a285:	53                   	push   ebx
c001a286:	50                   	push   eax
c001a287:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a28b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a28f:	85 db                	test   ebx,ebx
c001a291:	0f 84 bd 00 00 00    	je     c001a354 <ISO9660::openDir(char const*, void**)+0xd0>
c001a297:	85 f6                	test   esi,esi
c001a299:	0f 84 b5 00 00 00    	je     c001a354 <ISO9660::openDir(char const*, void**)+0xd0>
c001a29f:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a2a1:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a2a7:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a2ae:	74 1b                	je     c001a2cb <ISO9660::openDir(char const*, void**)+0x47>
c001a2b0:	85 c0                	test   eax,eax
c001a2b2:	74 10                	je     c001a2c4 <ISO9660::openDir(char const*, void**)+0x40>
c001a2b4:	83 ec 0c             	sub    esp,0xc
c001a2b7:	68 e9 27 02 c0       	push   0xc00227e9
c001a2bc:	e8 04 6f ff ff       	call   c00111c5 <KePanic(char const*)>
c001a2c1:	83 c4 10             	add    esp,0x10
c001a2c4:	8a 03                	mov    al,BYTE PTR [ebx]
c001a2c6:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a2cb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2ce:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a2d5:	85 c0                	test   eax,eax
c001a2d7:	74 10                	je     c001a2e9 <ISO9660::openDir(char const*, void**)+0x65>
c001a2d9:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a2e0:	74 1a                	je     c001a2fc <ISO9660::openDir(char const*, void**)+0x78>
c001a2e2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a2e9:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a2f0:	83 ec 0c             	sub    esp,0xc
c001a2f3:	50                   	push   eax
c001a2f4:	e8 6e c7 fe ff       	call   c0006a67 <init_percd>
c001a2f9:	83 c4 10             	add    esp,0x10
c001a2fc:	50                   	push   eax
c001a2fd:	83 c3 03             	add    ebx,0x3
c001a300:	50                   	push   eax
c001a301:	6a 01                	push   0x1
c001a303:	53                   	push   ebx
c001a304:	e8 21 c2 fe ff       	call   c000652a <iso_open>
c001a309:	83 c4 10             	add    esp,0x10
c001a30c:	83 f8 ff             	cmp    eax,0xffffffff
c001a30f:	89 c3                	mov    ebx,eax
c001a311:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a316:	75 1c                	jne    c001a334 <ISO9660::openDir(char const*, void**)+0xb0>
c001a318:	53                   	push   ebx
c001a319:	53                   	push   ebx
c001a31a:	68 91 28 02 c0       	push   0xc0022891
c001a31f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a325:	e8 82 e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a32a:	83 c4 10             	add    esp,0x10
c001a32d:	b8 01 00 00 00       	mov    eax,0x1
c001a332:	eb 25                	jmp    c001a359 <ISO9660::openDir(char const*, void**)+0xd5>
c001a334:	51                   	push   ecx
c001a335:	01 db                	add    ebx,ebx
c001a337:	51                   	push   ecx
c001a338:	83 c3 65             	add    ebx,0x65
c001a33b:	68 a4 28 02 c0       	push   0xc00228a4
c001a340:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a346:	e8 61 e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a34b:	83 c4 10             	add    esp,0x10
c001a34e:	31 c0                	xor    eax,eax
c001a350:	89 1e                	mov    DWORD PTR [esi],ebx
c001a352:	eb 05                	jmp    c001a359 <ISO9660::openDir(char const*, void**)+0xd5>
c001a354:	b8 04 00 00 00       	mov    eax,0x4
c001a359:	5a                   	pop    edx
c001a35a:	5b                   	pop    ebx
c001a35b:	5e                   	pop    esi
c001a35c:	c3                   	ret    
c001a35d:	90                   	nop

c001a35e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a35e:	55                   	push   ebp
c001a35f:	57                   	push   edi
c001a360:	56                   	push   esi
c001a361:	53                   	push   ebx
c001a362:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a368:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a36f:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a376:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a37d:	85 db                	test   ebx,ebx
c001a37f:	0f 84 e4 00 00 00    	je     c001a469 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a385:	85 ed                	test   ebp,ebp
c001a387:	0f 84 dc 00 00 00    	je     c001a469 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a38d:	83 ec 0c             	sub    esp,0xc
c001a390:	68 b7 28 02 c0       	push   0xc00228b7
c001a395:	e8 70 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a39a:	89 d8                	mov    eax,ebx
c001a39c:	b9 02 00 00 00       	mov    ecx,0x2
c001a3a1:	99                   	cdq    
c001a3a2:	f7 f9                	idiv   ecx
c001a3a4:	83 e8 32             	sub    eax,0x32
c001a3a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3aa:	e8 40 c4 fe ff       	call   c00067ef <iso_readdir>
c001a3af:	83 c4 10             	add    esp,0x10
c001a3b2:	85 c0                	test   eax,eax
c001a3b4:	89 c3                	mov    ebx,eax
c001a3b6:	75 38                	jne    c001a3f0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a3b8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a3bd:	53                   	push   ebx
c001a3be:	53                   	push   ebx
c001a3bf:	68 c2 28 02 c0       	push   0xc00228c2
c001a3c4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a3ca:	e8 dd e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a3cf:	83 c4 0c             	add    esp,0xc
c001a3d2:	68 10 01 00 00       	push   0x110
c001a3d7:	6a 00                	push   0x0
c001a3d9:	57                   	push   edi
c001a3da:	e8 11 61 fe ff       	call   c00004f0 <memset>
c001a3df:	83 c4 10             	add    esp,0x10
c001a3e2:	b8 01 00 00 00       	mov    eax,0x1
c001a3e7:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a3ee:	eb 7e                	jmp    c001a46e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a3f0:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a3f6:	8d 70 08             	lea    esi,[eax+0x8]
c001a3f9:	83 ec 0c             	sub    esp,0xc
c001a3fc:	56                   	push   esi
c001a3fd:	e8 7e 61 fe ff       	call   c0000580 <strlen>
c001a402:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a40a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a40e:	83 c4 10             	add    esp,0x10
c001a411:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a415:	75 0a                	jne    c001a421 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a417:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a41a:	b8 02 00 00 00       	mov    eax,0x2
c001a41f:	74 05                	je     c001a426 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a421:	b8 01 00 00 00       	mov    eax,0x1
c001a426:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a42a:	50                   	push   eax
c001a42b:	50                   	push   eax
c001a42c:	56                   	push   esi
c001a42d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a431:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a435:	50                   	push   eax
c001a436:	e8 15 62 fe ff       	call   c0000650 <strcpy>
c001a43b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a442:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a444:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a44b:	5a                   	pop    edx
c001a44c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a451:	59                   	pop    ecx
c001a452:	68 d5 28 02 c0       	push   0xc00228d5
c001a457:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a45d:	e8 4a e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a462:	83 c4 10             	add    esp,0x10
c001a465:	31 c0                	xor    eax,eax
c001a467:	eb 05                	jmp    c001a46e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a469:	b8 04 00 00 00       	mov    eax,0x4
c001a46e:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a474:	5b                   	pop    ebx
c001a475:	5e                   	pop    esi
c001a476:	5f                   	pop    edi
c001a477:	5d                   	pop    ebp
c001a478:	c3                   	ret    

c001a479 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a479:	57                   	push   edi
c001a47a:	56                   	push   esi
c001a47b:	53                   	push   ebx
c001a47c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a480:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a484:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a48a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a48e:	0f be cb             	movsx  ecx,bl
c001a491:	75 0b                	jne    c001a49e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a493:	0f be 05 00 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023700
c001a49a:	39 c8                	cmp    eax,ecx
c001a49c:	74 47                	je     c001a4e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a49e:	83 ec 0c             	sub    esp,0xc
c001a4a1:	31 d2                	xor    edx,edx
c001a4a3:	68 a0 98 02 c0       	push   0xc00298a0
c001a4a8:	6a 01                	push   0x1
c001a4aa:	52                   	push   edx
c001a4ab:	56                   	push   esi
c001a4ac:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a4b3:	e8 5a 35 ff ff       	call   c000da12 <LogicalDisk::read(unsigned long long, int, void*)>
c001a4b8:	83 c4 20             	add    esp,0x20
c001a4bb:	85 c0                	test   eax,eax
c001a4bd:	75 0e                	jne    c001a4cd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a4bf:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a4c5:	88 1d 00 37 02 c0    	mov    BYTE PTR ds:0xc0023700,bl
c001a4cb:	eb 18                	jmp    c001a4e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a4cd:	50                   	push   eax
c001a4ce:	68 00 08 00 00       	push   0x800
c001a4d3:	6a 00                	push   0x0
c001a4d5:	57                   	push   edi
c001a4d6:	e8 15 60 fe ff       	call   c00004f0 <memset>
c001a4db:	83 c4 10             	add    esp,0x10
c001a4de:	b8 01 00 00 00       	mov    eax,0x1
c001a4e3:	eb 0e                	jmp    c001a4f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a4e5:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a4ea:	b9 00 08 00 00       	mov    ecx,0x800
c001a4ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4f1:	31 c0                	xor    eax,eax
c001a4f3:	5b                   	pop    ebx
c001a4f4:	5e                   	pop    esi
c001a4f5:	5f                   	pop    edi
c001a4f6:	c3                   	ret    
c001a4f7:	90                   	nop

c001a4f8 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a4f8:	53                   	push   ebx
c001a4f9:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a4ff:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a509:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a510:	8d 58 41             	lea    ebx,[eax+0x41]
c001a513:	0f be db             	movsx  ebx,bl
c001a516:	53                   	push   ebx
c001a517:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a51b:	50                   	push   eax
c001a51c:	6a 10                	push   0x10
c001a51e:	e8 56 ff ff ff       	call   c001a479 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a523:	83 c4 10             	add    esp,0x10
c001a526:	31 d2                	xor    edx,edx
c001a528:	85 c0                	test   eax,eax
c001a52a:	75 33                	jne    c001a55f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a52c:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a531:	75 2c                	jne    c001a55f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a533:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a538:	75 25                	jne    c001a55f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a53a:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a53f:	75 1e                	jne    c001a55f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a541:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a546:	75 17                	jne    c001a55f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a548:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a54d:	75 10                	jne    c001a55f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a54f:	83 ec 0c             	sub    esp,0xc
c001a552:	53                   	push   ebx
c001a553:	e8 0f c5 fe ff       	call   c0006a67 <init_percd>
c001a558:	83 c4 10             	add    esp,0x10
c001a55b:	40                   	inc    eax
c001a55c:	0f 95 c2             	setne  dl
c001a55f:	81 c4 08 08 00 00    	add    esp,0x808
c001a565:	88 d0                	mov    al,dl
c001a567:	5b                   	pop    ebx
c001a568:	c3                   	ret    
c001a569:	90                   	nop

c001a56a <ISO9660::ISO9660()>:
c001a56a:	83 ec 0c             	sub    esp,0xc
c001a56d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a571:	83 ec 0c             	sub    esp,0xc
c001a574:	50                   	push   eax
c001a575:	e8 00 0f ff ff       	call   c000b47a <Filesystem::Filesystem()>
c001a57a:	83 c4 10             	add    esp,0x10
c001a57d:	ba f0 28 02 c0       	mov    edx,0xc00228f0
c001a582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a586:	89 10                	mov    DWORD PTR [eax],edx
c001a588:	e8 ec c5 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a58d:	90                   	nop
c001a58e:	83 c4 0c             	add    esp,0xc
c001a591:	c3                   	ret    

c001a592 <SoundCard::beginPlayback()>:
c001a592:	c7 44 24 04 54 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022954
c001a59a:	e9 26 6c ff ff       	jmp    c00111c5 <KePanic(char const*)>
c001a59f:	90                   	nop

c001a5a0 <SoundCard::stopPlayback()>:
c001a5a0:	c7 44 24 04 54 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022954
c001a5a8:	e9 18 6c ff ff       	jmp    c00111c5 <KePanic(char const*)>
c001a5ad:	90                   	nop

c001a5ae <SoundCard::SoundCard(char const*)>:
c001a5ae:	83 ec 1c             	sub    esp,0x1c
c001a5b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5b5:	83 ec 08             	sub    esp,0x8
c001a5b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a5bc:	50                   	push   eax
c001a5bd:	e8 fe 21 ff ff       	call   c000c7c0 <Device::Device(char const*)>
c001a5c2:	83 c4 10             	add    esp,0x10
c001a5c5:	ba a0 29 02 c0       	mov    edx,0xc00229a0
c001a5ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5ce:	89 10                	mov    DWORD PTR [eax],edx
c001a5d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5d4:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a5db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5df:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a5e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5ed:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a5f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5fb:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a609:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a613:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a61b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a620:	7f 1a                	jg     c001a63c <SoundCard::SoundCard(char const*)+0x8e>
c001a622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a626:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a62a:	83 c2 54             	add    edx,0x54
c001a62d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a635:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a63a:	eb df                	jmp    c001a61b <SoundCard::SoundCard(char const*)+0x6d>
c001a63c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a640:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a647:	90                   	nop
c001a648:	83 c4 1c             	add    esp,0x1c
c001a64b:	c3                   	ret    

c001a64c <SoundCard::~SoundCard()>:
c001a64c:	83 ec 0c             	sub    esp,0xc
c001a64f:	ba a0 29 02 c0       	mov    edx,0xc00229a0
c001a654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a658:	89 10                	mov    DWORD PTR [eax],edx
c001a65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a65e:	83 ec 0c             	sub    esp,0xc
c001a661:	50                   	push   eax
c001a662:	e8 c3 1e ff ff       	call   c000c52a <Device::~Device()>
c001a667:	83 c4 10             	add    esp,0x10
c001a66a:	90                   	nop
c001a66b:	83 c4 0c             	add    esp,0xc
c001a66e:	c3                   	ret    
c001a66f:	90                   	nop

c001a670 <SoundCard::~SoundCard()>:
c001a670:	83 ec 0c             	sub    esp,0xc
c001a673:	83 ec 0c             	sub    esp,0xc
c001a676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a67a:	e8 cd ff ff ff       	call   c001a64c <SoundCard::~SoundCard()>
c001a67f:	83 c4 10             	add    esp,0x10
c001a682:	83 ec 08             	sub    esp,0x8
c001a685:	68 e8 01 00 00       	push   0x1e8
c001a68a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a68e:	e8 79 01 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a693:	83 c4 10             	add    esp,0x10
c001a696:	83 c4 0c             	add    esp,0xc
c001a699:	c3                   	ret    

c001a69a <SoundCard::configureRates(int, int, int)>:
c001a69a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a69e:	31 c0                	xor    eax,eax
c001a6a0:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a6a7:	75 20                	jne    c001a6c9 <SoundCard::configureRates(int, int, int)+0x2f>
c001a6a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6ad:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a6b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6b7:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a6bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6c1:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a6c7:	b0 01                	mov    al,0x1
c001a6c9:	c3                   	ret    

c001a6ca <SoundCard::getSamples16(int, short*)>:
c001a6ca:	55                   	push   ebp
c001a6cb:	57                   	push   edi
c001a6cc:	31 ff                	xor    edi,edi
c001a6ce:	56                   	push   esi
c001a6cf:	53                   	push   ebx
c001a6d0:	31 db                	xor    ebx,ebx
c001a6d2:	83 ec 10             	sub    esp,0x10
c001a6d5:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a6d9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a6dd:	8d 04 36             	lea    eax,[esi+esi*1]
c001a6e0:	50                   	push   eax
c001a6e1:	6a 00                	push   0x0
c001a6e3:	55                   	push   ebp
c001a6e4:	e8 07 5e fe ff       	call   c00004f0 <memset>
c001a6e9:	83 c4 10             	add    esp,0x10
c001a6ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6f0:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a6f7:	85 c0                	test   eax,eax
c001a6f9:	74 1a                	je     c001a715 <SoundCard::getSamples16(int, short*)+0x4b>
c001a6fb:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a6ff:	75 14                	jne    c001a715 <SoundCard::getSamples16(int, short*)+0x4b>
c001a701:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a705:	55                   	push   ebp
c001a706:	56                   	push   esi
c001a707:	50                   	push   eax
c001a708:	e8 f3 02 00 00       	call   c001aa00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a70d:	83 c4 10             	add    esp,0x10
c001a710:	39 c3                	cmp    ebx,eax
c001a712:	0f 4c d8             	cmovl  ebx,eax
c001a715:	47                   	inc    edi
c001a716:	83 ff 20             	cmp    edi,0x20
c001a719:	75 d1                	jne    c001a6ec <SoundCard::getSamples16(int, short*)+0x22>
c001a71b:	83 c4 0c             	add    esp,0xc
c001a71e:	89 d8                	mov    eax,ebx
c001a720:	5b                   	pop    ebx
c001a721:	5e                   	pop    esi
c001a722:	5f                   	pop    edi
c001a723:	5d                   	pop    ebp
c001a724:	c3                   	ret    
c001a725:	90                   	nop

c001a726 <SoundCard::getSamples32(int, int*)>:
c001a726:	55                   	push   ebp
c001a727:	57                   	push   edi
c001a728:	31 ff                	xor    edi,edi
c001a72a:	56                   	push   esi
c001a72b:	31 f6                	xor    esi,esi
c001a72d:	53                   	push   ebx
c001a72e:	83 ec 10             	sub    esp,0x10
c001a731:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a735:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a739:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a73d:	c1 e0 02             	shl    eax,0x2
c001a740:	50                   	push   eax
c001a741:	6a 00                	push   0x0
c001a743:	55                   	push   ebp
c001a744:	e8 a7 5d fe ff       	call   c00004f0 <memset>
c001a749:	83 c4 10             	add    esp,0x10
c001a74c:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a753:	85 c0                	test   eax,eax
c001a755:	74 1a                	je     c001a771 <SoundCard::getSamples32(int, int*)+0x4b>
c001a757:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a75b:	75 14                	jne    c001a771 <SoundCard::getSamples32(int, int*)+0x4b>
c001a75d:	53                   	push   ebx
c001a75e:	55                   	push   ebp
c001a75f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a763:	50                   	push   eax
c001a764:	e8 67 03 00 00       	call   c001aad0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a769:	83 c4 10             	add    esp,0x10
c001a76c:	39 c6                	cmp    esi,eax
c001a76e:	0f 4c f0             	cmovl  esi,eax
c001a771:	47                   	inc    edi
c001a772:	83 ff 20             	cmp    edi,0x20
c001a775:	75 d5                	jne    c001a74c <SoundCard::getSamples32(int, int*)+0x26>
c001a777:	85 f6                	test   esi,esi
c001a779:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a780:	75 0f                	jne    c001a791 <SoundCard::getSamples32(int, int*)+0x6b>
c001a782:	85 c0                	test   eax,eax
c001a784:	74 1b                	je     c001a7a1 <SoundCard::getSamples32(int, int*)+0x7b>
c001a786:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a788:	83 ec 0c             	sub    esp,0xc
c001a78b:	53                   	push   ebx
c001a78c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a78f:	eb 0d                	jmp    c001a79e <SoundCard::getSamples32(int, int*)+0x78>
c001a791:	85 c0                	test   eax,eax
c001a793:	75 0c                	jne    c001a7a1 <SoundCard::getSamples32(int, int*)+0x7b>
c001a795:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a797:	83 ec 0c             	sub    esp,0xc
c001a79a:	53                   	push   ebx
c001a79b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a79e:	83 c4 10             	add    esp,0x10
c001a7a1:	83 c4 0c             	add    esp,0xc
c001a7a4:	89 f0                	mov    eax,esi
c001a7a6:	5b                   	pop    ebx
c001a7a7:	5e                   	pop    esi
c001a7a8:	5f                   	pop    edi
c001a7a9:	5d                   	pop    ebp
c001a7aa:	c3                   	ret    
c001a7ab:	90                   	nop

c001a7ac <SoundCard::addChannel(SoundPort*)>:
c001a7ac:	83 ec 0c             	sub    esp,0xc
c001a7af:	31 c0                	xor    eax,eax
c001a7b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a7b5:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a7bd:	74 1b                	je     c001a7da <SoundCard::addChannel(SoundPort*)+0x2e>
c001a7bf:	40                   	inc    eax
c001a7c0:	83 f8 20             	cmp    eax,0x20
c001a7c3:	75 f0                	jne    c001a7b5 <SoundCard::addChannel(SoundPort*)+0x9>
c001a7c5:	83 ec 0c             	sub    esp,0xc
c001a7c8:	68 79 29 02 c0       	push   0xc0022979
c001a7cd:	e8 f3 69 ff ff       	call   c00111c5 <KePanic(char const*)>
c001a7d2:	83 c4 10             	add    esp,0x10
c001a7d5:	83 c8 ff             	or     eax,0xffffffff
c001a7d8:	eb 0b                	jmp    c001a7e5 <SoundCard::addChannel(SoundPort*)+0x39>
c001a7da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a7de:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a7e5:	83 c4 0c             	add    esp,0xc
c001a7e8:	c3                   	ret    
c001a7e9:	90                   	nop

c001a7ea <SoundCard::removeChannel(int)>:
c001a7ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a7f2:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a7fd:	c3                   	ret    
c001a7fe:	66 90                	xchg   ax,ax

c001a800 <SoundPort::SoundPort(int, int, int, int)>:
c001a800:	83 ec 0c             	sub    esp,0xc
c001a803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a807:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a812:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a81a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a81e:	89 10                	mov    DWORD PTR [eax],edx
c001a820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a824:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a828:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a82f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a833:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a836:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a83b:	75 13                	jne    c001a850 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a841:	8b 00                	mov    eax,DWORD PTR [eax]
c001a843:	05 a0 0f 00 00       	add    eax,0xfa0
c001a848:	d1 e0                	shl    eax,1
c001a84a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a84e:	66 90                	xchg   ax,ax
c001a850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a854:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a858:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a85f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a86a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a86d:	c1 e0 02             	shl    eax,0x2
c001a870:	83 ec 0c             	sub    esp,0xc
c001a873:	50                   	push   eax
c001a874:	e8 5a d2 fe ff       	call   c0007ad3 <malloc>
c001a879:	83 c4 10             	add    esp,0x10
c001a87c:	89 c2                	mov    edx,eax
c001a87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a882:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a885:	90                   	nop
c001a886:	83 c4 0c             	add    esp,0xc
c001a889:	c3                   	ret    
c001a88a:	66 90                	xchg   ax,ax

c001a88c <SoundPort::~SoundPort()>:
c001a88c:	83 ec 0c             	sub    esp,0xc
c001a88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a893:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a896:	85 c0                	test   eax,eax
c001a898:	74 1e                	je     c001a8b8 <SoundPort::~SoundPort()+0x2c>
c001a89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a89e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a8a1:	83 ec 0c             	sub    esp,0xc
c001a8a4:	50                   	push   eax
c001a8a5:	e8 39 d2 fe ff       	call   c0007ae3 <free>
c001a8aa:	83 c4 10             	add    esp,0x10
c001a8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8b1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a8b8:	90                   	nop
c001a8b9:	83 c4 0c             	add    esp,0xc
c001a8bc:	c3                   	ret    
c001a8bd:	90                   	nop
c001a8be:	66 90                	xchg   ax,ax

c001a8c0 <SoundPort::unpause()>:
c001a8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a8c8:	c3                   	ret    
c001a8c9:	90                   	nop
c001a8ca:	66 90                	xchg   ax,ax

c001a8cc <SoundPort::pause()>:
c001a8cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8d0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a8d4:	c3                   	ret    
c001a8d5:	90                   	nop
c001a8d6:	66 90                	xchg   ax,ax

c001a8d8 <SoundPort::getBufferUsed()>:
c001a8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8dc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a8df:	c3                   	ret    

c001a8e0 <SoundPort::getBufferSize()>:
c001a8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a8e7:	c3                   	ret    

c001a8e8 <SoundPort::buffer16(short*, int)>:
c001a8e8:	55                   	push   ebp
c001a8e9:	57                   	push   edi
c001a8ea:	56                   	push   esi
c001a8eb:	53                   	push   ebx
c001a8ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8f0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a8f4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a8f7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a8fa:	74 68                	je     c001a964 <SoundPort::buffer16(short*, int)+0x7c>
c001a8fc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a900:	85 c9                	test   ecx,ecx
c001a902:	7e 60                	jle    c001a964 <SoundPort::buffer16(short*, int)+0x7c>
c001a904:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a908:	8d 70 01             	lea    esi,[eax+0x1]
c001a90b:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a90e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a911:	c1 e1 0f             	shl    ecx,0xf
c001a914:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a917:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a91a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a91d:	74 4d                	je     c001a96c <SoundPort::buffer16(short*, int)+0x84>
c001a91f:	31 f6                	xor    esi,esi
c001a921:	eb 21                	jmp    c001a944 <SoundPort::buffer16(short*, int)+0x5c>
c001a923:	90                   	nop
c001a924:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a929:	8d 79 01             	lea    edi,[ecx+0x1]
c001a92c:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a92f:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a932:	c1 e3 0f             	shl    ebx,0xf
c001a935:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a938:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a93b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a93e:	74 1c                	je     c001a95c <SoundPort::buffer16(short*, int)+0x74>
c001a940:	89 c6                	mov    esi,eax
c001a942:	66 90                	xchg   ax,ax
c001a944:	8d 46 01             	lea    eax,[esi+0x1]
c001a947:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a94b:	75 d7                	jne    c001a924 <SoundPort::buffer16(short*, int)+0x3c>
c001a94d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a951:	8d 76 00             	lea    esi,[esi+0x0]
c001a954:	5b                   	pop    ebx
c001a955:	5e                   	pop    esi
c001a956:	5f                   	pop    edi
c001a957:	5d                   	pop    ebp
c001a958:	c3                   	ret    
c001a959:	8d 76 00             	lea    esi,[esi+0x0]
c001a95c:	5b                   	pop    ebx
c001a95d:	8d 46 02             	lea    eax,[esi+0x2]
c001a960:	5e                   	pop    esi
c001a961:	5f                   	pop    edi
c001a962:	5d                   	pop    ebp
c001a963:	c3                   	ret    
c001a964:	5b                   	pop    ebx
c001a965:	31 c0                	xor    eax,eax
c001a967:	5e                   	pop    esi
c001a968:	5f                   	pop    edi
c001a969:	5d                   	pop    ebp
c001a96a:	c3                   	ret    
c001a96b:	90                   	nop
c001a96c:	b8 01 00 00 00       	mov    eax,0x1
c001a971:	eb e1                	jmp    c001a954 <SoundPort::buffer16(short*, int)+0x6c>
c001a973:	90                   	nop

c001a974 <SoundPort::buffer32(int*, int)>:
c001a974:	55                   	push   ebp
c001a975:	57                   	push   edi
c001a976:	56                   	push   esi
c001a977:	53                   	push   ebx
c001a978:	83 ec 04             	sub    esp,0x4
c001a97b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a97f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a983:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a987:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a98a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a98d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a990:	74 5a                	je     c001a9ec <SoundPort::buffer32(int*, int)+0x78>
c001a992:	85 c0                	test   eax,eax
c001a994:	7e 56                	jle    c001a9ec <SoundPort::buffer32(int*, int)+0x78>
c001a996:	8d 71 01             	lea    esi,[ecx+0x1]
c001a999:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a99c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a99f:	8b 37                	mov    esi,DWORD PTR [edi]
c001a9a1:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a9a4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9a7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9aa:	74 4c                	je     c001a9f8 <SoundPort::buffer32(int*, int)+0x84>
c001a9ac:	31 f6                	xor    esi,esi
c001a9ae:	eb 1c                	jmp    c001a9cc <SoundPort::buffer32(int*, int)+0x58>
c001a9b0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a9b3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a9b6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a9b9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a9bc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a9c0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9c3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9c6:	74 18                	je     c001a9e0 <SoundPort::buffer32(int*, int)+0x6c>
c001a9c8:	89 de                	mov    esi,ebx
c001a9ca:	66 90                	xchg   ax,ax
c001a9cc:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a9cf:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a9d2:	75 dc                	jne    c001a9b0 <SoundPort::buffer32(int*, int)+0x3c>
c001a9d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a9d7:	90                   	nop
c001a9d8:	83 c4 04             	add    esp,0x4
c001a9db:	5b                   	pop    ebx
c001a9dc:	5e                   	pop    esi
c001a9dd:	5f                   	pop    edi
c001a9de:	5d                   	pop    ebp
c001a9df:	c3                   	ret    
c001a9e0:	8d 46 02             	lea    eax,[esi+0x2]
c001a9e3:	83 c4 04             	add    esp,0x4
c001a9e6:	5b                   	pop    ebx
c001a9e7:	5e                   	pop    esi
c001a9e8:	5f                   	pop    edi
c001a9e9:	5d                   	pop    ebp
c001a9ea:	c3                   	ret    
c001a9eb:	90                   	nop
c001a9ec:	83 c4 04             	add    esp,0x4
c001a9ef:	31 c0                	xor    eax,eax
c001a9f1:	5b                   	pop    ebx
c001a9f2:	5e                   	pop    esi
c001a9f3:	5f                   	pop    edi
c001a9f4:	5d                   	pop    ebp
c001a9f5:	c3                   	ret    
c001a9f6:	66 90                	xchg   ax,ax
c001a9f8:	b8 01 00 00 00       	mov    eax,0x1
c001a9fd:	eb d9                	jmp    c001a9d8 <SoundPort::buffer32(int*, int)+0x64>
c001a9ff:	90                   	nop

c001aa00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001aa00:	55                   	push   ebp
c001aa01:	57                   	push   edi
c001aa02:	56                   	push   esi
c001aa03:	53                   	push   ebx
c001aa04:	83 ec 0c             	sub    esp,0xc
c001aa07:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aa0b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aa0f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001aa13:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001aa17:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001aa1d:	39 03                	cmp    DWORD PTR [ebx],eax
c001aa1f:	74 13                	je     c001aa34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001aa21:	83 ec 0c             	sub    esp,0xc
c001aa24:	68 cc 29 02 c0       	push   0xc00229cc
c001aa29:	e8 97 67 ff ff       	call   c00111c5 <KePanic(char const*)>
c001aa2e:	83 c4 10             	add    esp,0x10
c001aa31:	8d 76 00             	lea    esi,[esi+0x0]
c001aa34:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001aa3a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aa3d:	74 11                	je     c001aa50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001aa3f:	83 ec 0c             	sub    esp,0xc
c001aa42:	68 0b 2a 02 c0       	push   0xc0022a0b
c001aa47:	e8 79 67 ff ff       	call   c00111c5 <KePanic(char const*)>
c001aa4c:	83 c4 10             	add    esp,0x10
c001aa4f:	90                   	nop
c001aa50:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001aa56:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aa59:	74 11                	je     c001aa6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001aa5b:	83 ec 0c             	sub    esp,0xc
c001aa5e:	68 0b 2a 02 c0       	push   0xc0022a0b
c001aa63:	e8 5d 67 ff ff       	call   c00111c5 <KePanic(char const*)>
c001aa68:	83 c4 10             	add    esp,0x10
c001aa6b:	90                   	nop
c001aa6c:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001aa6f:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001aa73:	85 f6                	test   esi,esi
c001aa75:	7e 2d                	jle    c001aaa4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001aa77:	31 c0                	xor    eax,eax
c001aa79:	8d 76 00             	lea    esi,[esi+0x0]
c001aa7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aa7f:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001aa82:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001aa88:	85 c9                	test   ecx,ecx
c001aa8a:	0f 49 d1             	cmovns edx,ecx
c001aa8d:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001aa91:	c1 fa 0f             	sar    edx,0xf
c001aa94:	01 d1                	add    ecx,edx
c001aa96:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001aa9a:	83 c0 01             	add    eax,0x1
c001aa9d:	39 f0                	cmp    eax,esi
c001aa9f:	75 db                	jne    c001aa7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001aaa1:	8d 76 00             	lea    esi,[esi+0x0]
c001aaa4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aaa7:	83 ec 04             	sub    esp,0x4
c001aaaa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aaad:	29 f0                	sub    eax,esi
c001aaaf:	c1 e0 02             	shl    eax,0x2
c001aab2:	50                   	push   eax
c001aab3:	8d 04 b2             	lea    eax,[edx+esi*4]
c001aab6:	50                   	push   eax
c001aab7:	52                   	push   edx
c001aab8:	e8 13 59 fe ff       	call   c00003d0 <memmove>
c001aabd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aac0:	29 f0                	sub    eax,esi
c001aac2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001aac5:	83 c4 1c             	add    esp,0x1c
c001aac8:	89 f0                	mov    eax,esi
c001aaca:	5b                   	pop    ebx
c001aacb:	5e                   	pop    esi
c001aacc:	5f                   	pop    edi
c001aacd:	5d                   	pop    ebp
c001aace:	c3                   	ret    
c001aacf:	90                   	nop

c001aad0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001aad0:	55                   	push   ebp
c001aad1:	57                   	push   edi
c001aad2:	56                   	push   esi
c001aad3:	53                   	push   ebx
c001aad4:	83 ec 0c             	sub    esp,0xc
c001aad7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aadb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aadf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001aae3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001aae7:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001aaed:	39 03                	cmp    DWORD PTR [ebx],eax
c001aaef:	74 13                	je     c001ab04 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001aaf1:	83 ec 0c             	sub    esp,0xc
c001aaf4:	68 ec 29 02 c0       	push   0xc00229ec
c001aaf9:	e8 c7 66 ff ff       	call   c00111c5 <KePanic(char const*)>
c001aafe:	83 c4 10             	add    esp,0x10
c001ab01:	8d 76 00             	lea    esi,[esi+0x0]
c001ab04:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ab0a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ab0d:	74 11                	je     c001ab20 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001ab0f:	83 ec 0c             	sub    esp,0xc
c001ab12:	68 27 2a 02 c0       	push   0xc0022a27
c001ab17:	e8 a9 66 ff ff       	call   c00111c5 <KePanic(char const*)>
c001ab1c:	83 c4 10             	add    esp,0x10
c001ab1f:	90                   	nop
c001ab20:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ab26:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ab29:	74 11                	je     c001ab3c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001ab2b:	83 ec 0c             	sub    esp,0xc
c001ab2e:	68 27 2a 02 c0       	push   0xc0022a27
c001ab33:	e8 8d 66 ff ff       	call   c00111c5 <KePanic(char const*)>
c001ab38:	83 c4 10             	add    esp,0x10
c001ab3b:	90                   	nop
c001ab3c:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001ab3f:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001ab43:	85 ff                	test   edi,edi
c001ab45:	7e 21                	jle    c001ab68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001ab47:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ab4e:	31 c0                	xor    eax,eax
c001ab50:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab53:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001ab56:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ab59:	01 d5                	add    ebp,edx
c001ab5b:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001ab5e:	83 c0 04             	add    eax,0x4
c001ab61:	39 c1                	cmp    ecx,eax
c001ab63:	75 eb                	jne    c001ab50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001ab65:	8d 76 00             	lea    esi,[esi+0x0]
c001ab68:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ab6b:	83 ec 04             	sub    esp,0x4
c001ab6e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab71:	29 f8                	sub    eax,edi
c001ab73:	c1 e0 02             	shl    eax,0x2
c001ab76:	50                   	push   eax
c001ab77:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ab7a:	50                   	push   eax
c001ab7b:	52                   	push   edx
c001ab7c:	e8 4f 58 fe ff       	call   c00003d0 <memmove>
c001ab81:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ab84:	29 f8                	sub    eax,edi
c001ab86:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ab89:	83 c4 1c             	add    esp,0x1c
c001ab8c:	89 f8                	mov    eax,edi
c001ab8e:	5b                   	pop    ebx
c001ab8f:	5e                   	pop    esi
c001ab90:	5f                   	pop    edi
c001ab91:	5d                   	pop    ebp
c001ab92:	c3                   	ret    
c001ab93:	90                   	nop

c001ab94 <PCI::open(int, int, void*)>:
c001ab94:	83 ec 18             	sub    esp,0x18
c001ab97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab9f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001aba5:	8b 10                	mov    edx,DWORD PTR [eax]
c001aba7:	50                   	push   eax
c001aba8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001abab:	31 c0                	xor    eax,eax
c001abad:	83 c4 1c             	add    esp,0x1c
c001abb0:	c3                   	ret    
c001abb1:	90                   	nop

c001abb2 <PCI::close(int, int, void*)>:
c001abb2:	31 c0                	xor    eax,eax
c001abb4:	c3                   	ret    
c001abb5:	90                   	nop

c001abb6 <PCI::PCI()>:
c001abb6:	83 ec 0c             	sub    esp,0xc
c001abb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abbd:	83 ec 08             	sub    esp,0x8
c001abc0:	68 43 2a 02 c0       	push   0xc0022a43
c001abc5:	50                   	push   eax
c001abc6:	e8 b9 13 ff ff       	call   c000bf84 <Bus::Bus(char const*)>
c001abcb:	83 c4 10             	add    esp,0x10
c001abce:	ba ec 2a 02 c0       	mov    edx,0xc0022aec
c001abd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd7:	89 10                	mov    DWORD PTR [eax],edx
c001abd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abdd:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001abe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abeb:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001abf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abf4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abfa:	0f b6 d0             	movzx  edx,al
c001abfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac01:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ac08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac0c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac12:	0f b6 d0             	movzx  edx,al
c001ac15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac19:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ac1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac22:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac28:	8d 50 01             	lea    edx,[eax+0x1]
c001ac2b:	88 d1                	mov    cl,dl
c001ac2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac31:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ac37:	0f b6 d0             	movzx  edx,al
c001ac3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac3e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ac42:	83 c9 c0             	or     ecx,0xffffffc0
c001ac45:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ac49:	90                   	nop
c001ac4a:	83 c4 0c             	add    esp,0xc
c001ac4d:	c3                   	ret    

c001ac4e <PCI::readBAR8(unsigned int, int)>:
c001ac4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac56:	f6 c2 01             	test   dl,0x1
c001ac59:	74 07                	je     c001ac62 <PCI::readBAR8(unsigned int, int)+0x14>
c001ac5b:	83 e2 fc             	and    edx,0xfffffffc
c001ac5e:	01 c2                	add    edx,eax
c001ac60:	ec                   	in     al,dx
c001ac61:	c3                   	ret    
c001ac62:	83 e2 f0             	and    edx,0xfffffff0
c001ac65:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ac68:	c3                   	ret    
c001ac69:	90                   	nop

c001ac6a <PCI::readBAR16(unsigned int, int)>:
c001ac6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac72:	f6 c2 01             	test   dl,0x1
c001ac75:	74 08                	je     c001ac7f <PCI::readBAR16(unsigned int, int)+0x15>
c001ac77:	83 e2 fc             	and    edx,0xfffffffc
c001ac7a:	01 c2                	add    edx,eax
c001ac7c:	66 ed                	in     ax,dx
c001ac7e:	c3                   	ret    
c001ac7f:	83 e2 f0             	and    edx,0xfffffff0
c001ac82:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ac86:	c3                   	ret    
c001ac87:	90                   	nop

c001ac88 <PCI::readBAR32(unsigned int, int)>:
c001ac88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac90:	f6 c2 01             	test   dl,0x1
c001ac93:	74 07                	je     c001ac9c <PCI::readBAR32(unsigned int, int)+0x14>
c001ac95:	83 e2 fc             	and    edx,0xfffffffc
c001ac98:	01 c2                	add    edx,eax
c001ac9a:	ed                   	in     eax,dx
c001ac9b:	c3                   	ret    
c001ac9c:	83 e2 f0             	and    edx,0xfffffff0
c001ac9f:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001aca2:	c3                   	ret    
c001aca3:	90                   	nop

c001aca4 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001aca4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aca8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acb0:	f6 c2 01             	test   dl,0x1
c001acb3:	74 07                	je     c001acbc <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001acb5:	83 e2 fc             	and    edx,0xfffffffc
c001acb8:	01 ca                	add    edx,ecx
c001acba:	ee                   	out    dx,al
c001acbb:	c3                   	ret    
c001acbc:	83 e2 f0             	and    edx,0xfffffff0
c001acbf:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001acc2:	c3                   	ret    
c001acc3:	90                   	nop

c001acc4 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001acc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001accc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acd0:	f6 c2 01             	test   dl,0x1
c001acd3:	74 08                	je     c001acdd <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001acd5:	83 e2 fc             	and    edx,0xfffffffc
c001acd8:	01 ca                	add    edx,ecx
c001acda:	66 ef                	out    dx,ax
c001acdc:	c3                   	ret    
c001acdd:	83 e2 f0             	and    edx,0xfffffff0
c001ace0:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ace4:	c3                   	ret    
c001ace5:	90                   	nop

c001ace6 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ace6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acf2:	f6 c2 01             	test   dl,0x1
c001acf5:	74 07                	je     c001acfe <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001acf7:	83 e2 fc             	and    edx,0xfffffffc
c001acfa:	01 ca                	add    edx,ecx
c001acfc:	ef                   	out    dx,eax
c001acfd:	c3                   	ret    
c001acfe:	83 e2 f0             	and    edx,0xfffffff0
c001ad01:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ad04:	c3                   	ret    
c001ad05:	90                   	nop

c001ad06 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad06:	55                   	push   ebp
c001ad07:	57                   	push   edi
c001ad08:	56                   	push   esi
c001ad09:	53                   	push   ebx
c001ad0a:	83 ec 0c             	sub    esp,0xc
c001ad0d:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ad12:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ad16:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ad1a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ad1e:	83 fe 07             	cmp    esi,0x7
c001ad21:	76 10                	jbe    c001ad33 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ad23:	83 ec 0c             	sub    esp,0xc
c001ad26:	68 4b 2a 02 c0       	push   0xc0022a4b
c001ad2b:	e8 95 64 ff ff       	call   c00111c5 <KePanic(char const*)>
c001ad30:	83 c4 10             	add    esp,0x10
c001ad33:	0f b6 db             	movzx  ebx,bl
c001ad36:	83 fb 0f             	cmp    ebx,0xf
c001ad39:	76 10                	jbe    c001ad4b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ad3b:	83 ec 0c             	sub    esp,0xc
c001ad3e:	68 7b 2a 02 c0       	push   0xc0022a7b
c001ad43:	e8 7d 64 ff ff       	call   c00111c5 <KePanic(char const*)>
c001ad48:	83 c4 10             	add    esp,0x10
c001ad4b:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad4e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad53:	83 c8 f0             	or     eax,0xfffffff0
c001ad56:	ee                   	out    dx,al
c001ad57:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ad5c:	89 e8                	mov    eax,ebp
c001ad5e:	ee                   	out    dx,al
c001ad5f:	89 f9                	mov    ecx,edi
c001ad61:	89 d8                	mov    eax,ebx
c001ad63:	0f b6 d9             	movzx  ebx,cl
c001ad66:	83 c4 0c             	add    esp,0xc
c001ad69:	c1 e0 08             	shl    eax,0x8
c001ad6c:	83 e3 fc             	and    ebx,0xfffffffc
c001ad6f:	09 d8                	or     eax,ebx
c001ad71:	5b                   	pop    ebx
c001ad72:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ad77:	5e                   	pop    esi
c001ad78:	5f                   	pop    edi
c001ad79:	5d                   	pop    ebp
c001ad7a:	c3                   	ret    
c001ad7b:	90                   	nop

c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad7c:	57                   	push   edi
c001ad7d:	56                   	push   esi
c001ad7e:	53                   	push   ebx
c001ad7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad8b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ad8f:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ad95:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad99:	83 ff 01             	cmp    edi,0x1
c001ad9c:	75 3f                	jne    c001addd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ad9e:	89 de                	mov    esi,ebx
c001ada0:	0f b6 c0             	movzx  eax,al
c001ada3:	c1 e0 10             	shl    eax,0x10
c001ada6:	81 e6 fc 00 00 00    	and    esi,0xfc
c001adac:	0f b6 c9             	movzx  ecx,cl
c001adaf:	09 f0                	or     eax,esi
c001adb1:	c1 e1 08             	shl    ecx,0x8
c001adb4:	0f b6 d2             	movzx  edx,dl
c001adb7:	c1 e2 0b             	shl    edx,0xb
c001adba:	09 c8                	or     eax,ecx
c001adbc:	09 d0                	or     eax,edx
c001adbe:	ba f8 0c 00 00       	mov    edx,0xcf8
c001adc3:	0d 00 00 00 80       	or     eax,0x80000000
c001adc8:	ef                   	out    dx,eax
c001adc9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001adce:	ed                   	in     eax,dx
c001adcf:	83 e3 02             	and    ebx,0x2
c001add2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001add9:	d3 e8                	shr    eax,cl
c001addb:	eb 44                	jmp    c001ae21 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001addd:	83 ff 02             	cmp    edi,0x2
c001ade0:	75 2d                	jne    c001ae0f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001ade2:	83 ec 0c             	sub    esp,0xc
c001ade5:	0f b6 fb             	movzx  edi,bl
c001ade8:	57                   	push   edi
c001ade9:	0f b6 c9             	movzx  ecx,cl
c001adec:	51                   	push   ecx
c001aded:	0f b6 d2             	movzx  edx,dl
c001adf0:	52                   	push   edx
c001adf1:	0f b6 c0             	movzx  eax,al
c001adf4:	50                   	push   eax
c001adf5:	56                   	push   esi
c001adf6:	e8 0b ff ff ff       	call   c001ad06 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001adfb:	89 c2                	mov    edx,eax
c001adfd:	ed                   	in     eax,dx
c001adfe:	83 e3 02             	and    ebx,0x2
c001ae01:	83 c4 20             	add    esp,0x20
c001ae04:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ae0b:	d3 e8                	shr    eax,cl
c001ae0d:	eb 12                	jmp    c001ae21 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ae0f:	83 ec 0c             	sub    esp,0xc
c001ae12:	68 ab 2a 02 c0       	push   0xc0022aab
c001ae17:	e8 a9 63 ff ff       	call   c00111c5 <KePanic(char const*)>
c001ae1c:	83 c4 10             	add    esp,0x10
c001ae1f:	31 c0                	xor    eax,eax
c001ae21:	5b                   	pop    ebx
c001ae22:	5e                   	pop    esi
c001ae23:	5f                   	pop    edi
c001ae24:	c3                   	ret    
c001ae25:	90                   	nop

c001ae26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ae26:	83 ec 18             	sub    esp,0x18
c001ae29:	6a 00                	push   0x0
c001ae2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae30:	50                   	push   eax
c001ae31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae36:	50                   	push   eax
c001ae37:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae3c:	50                   	push   eax
c001ae3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae41:	e8 36 ff ff ff       	call   c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae46:	83 c4 2c             	add    esp,0x2c
c001ae49:	c3                   	ret    

c001ae4a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ae4a:	83 ec 18             	sub    esp,0x18
c001ae4d:	6a 0e                	push   0xe
c001ae4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae54:	50                   	push   eax
c001ae55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae5a:	50                   	push   eax
c001ae5b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae60:	50                   	push   eax
c001ae61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae65:	e8 12 ff ff ff       	call   c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae6a:	83 c4 2c             	add    esp,0x2c
c001ae6d:	0f b6 c0             	movzx  eax,al
c001ae70:	c3                   	ret    
c001ae71:	90                   	nop

c001ae72 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ae72:	55                   	push   ebp
c001ae73:	57                   	push   edi
c001ae74:	56                   	push   esi
c001ae75:	53                   	push   ebx
c001ae76:	83 ec 18             	sub    esp,0x18
c001ae79:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ae7e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ae83:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ae88:	6a 0a                	push   0xa
c001ae8a:	56                   	push   esi
c001ae8b:	55                   	push   ebp
c001ae8c:	57                   	push   edi
c001ae8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae91:	e8 e6 fe ff ff       	call   c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae96:	83 c4 14             	add    esp,0x14
c001ae99:	6a 0a                	push   0xa
c001ae9b:	56                   	push   esi
c001ae9c:	55                   	push   ebp
c001ae9d:	57                   	push   edi
c001ae9e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aea2:	89 c3                	mov    ebx,eax
c001aea4:	0f b6 db             	movzx  ebx,bl
c001aea7:	e8 d0 fe ff ff       	call   c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aeac:	83 c4 2c             	add    esp,0x2c
c001aeaf:	25 00 ff 00 00       	and    eax,0xff00
c001aeb4:	09 d8                	or     eax,ebx
c001aeb6:	5b                   	pop    ebx
c001aeb7:	5e                   	pop    esi
c001aeb8:	5f                   	pop    edi
c001aeb9:	5d                   	pop    ebp
c001aeba:	c3                   	ret    
c001aebb:	90                   	nop

c001aebc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001aebc:	83 ec 18             	sub    esp,0x18
c001aebf:	6a 08                	push   0x8
c001aec1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aec6:	50                   	push   eax
c001aec7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aecc:	50                   	push   eax
c001aecd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aed2:	50                   	push   eax
c001aed3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aed7:	e8 a0 fe ff ff       	call   c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aedc:	83 c4 2c             	add    esp,0x2c
c001aedf:	0f b6 c4             	movzx  eax,ah
c001aee2:	c3                   	ret    
c001aee3:	90                   	nop

c001aee4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001aee4:	83 ec 18             	sub    esp,0x18
c001aee7:	6a 08                	push   0x8
c001aee9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeee:	50                   	push   eax
c001aeef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aef4:	50                   	push   eax
c001aef5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aefa:	50                   	push   eax
c001aefb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeff:	e8 78 fe ff ff       	call   c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af04:	83 c4 2c             	add    esp,0x2c
c001af07:	c3                   	ret    

c001af08 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001af08:	83 ec 18             	sub    esp,0x18
c001af0b:	6a 3c                	push   0x3c
c001af0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af12:	50                   	push   eax
c001af13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af18:	50                   	push   eax
c001af19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af1e:	50                   	push   eax
c001af1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af23:	e8 54 fe ff ff       	call   c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af28:	83 c4 2c             	add    esp,0x2c
c001af2b:	c3                   	ret    

c001af2c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001af2c:	83 ec 18             	sub    esp,0x18
c001af2f:	6a 18                	push   0x18
c001af31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af36:	50                   	push   eax
c001af37:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af3c:	50                   	push   eax
c001af3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af42:	50                   	push   eax
c001af43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af47:	e8 30 fe ff ff       	call   c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af4c:	83 c4 2c             	add    esp,0x2c
c001af4f:	0f b6 c4             	movzx  eax,ah
c001af52:	c3                   	ret    
c001af53:	90                   	nop

c001af54 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af54:	55                   	push   ebp
c001af55:	57                   	push   edi
c001af56:	56                   	push   esi
c001af57:	53                   	push   ebx
c001af58:	83 ec 28             	sub    esp,0x28
c001af5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001af5f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001af64:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001af69:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001af6e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001af75:	8d 43 12             	lea    eax,[ebx+0x12]
c001af78:	83 c3 10             	add    ebx,0x10
c001af7b:	0f b6 c0             	movzx  eax,al
c001af7e:	0f b6 db             	movzx  ebx,bl
c001af81:	50                   	push   eax
c001af82:	51                   	push   ecx
c001af83:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001af87:	57                   	push   edi
c001af88:	55                   	push   ebp
c001af89:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af8d:	e8 ea fd ff ff       	call   c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af92:	83 c4 14             	add    esp,0x14
c001af95:	53                   	push   ebx
c001af96:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af9a:	51                   	push   ecx
c001af9b:	89 c6                	mov    esi,eax
c001af9d:	57                   	push   edi
c001af9e:	55                   	push   ebp
c001af9f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001afa3:	c1 e6 10             	shl    esi,0x10
c001afa6:	e8 d1 fd ff ff       	call   c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afab:	83 c4 3c             	add    esp,0x3c
c001afae:	5b                   	pop    ebx
c001afaf:	0f b7 c0             	movzx  eax,ax
c001afb2:	09 f0                	or     eax,esi
c001afb4:	5e                   	pop    esi
c001afb5:	5f                   	pop    edi
c001afb6:	5d                   	pop    ebp
c001afb7:	c3                   	ret    

c001afb8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001afb8:	55                   	push   ebp
c001afb9:	57                   	push   edi
c001afba:	56                   	push   esi
c001afbb:	53                   	push   ebx
c001afbc:	83 ec 0c             	sub    esp,0xc
c001afbf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001afc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001afc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afcb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001afcf:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001afd5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001afd9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001afdd:	83 f9 01             	cmp    ecx,0x1
c001afe0:	75 5d                	jne    c001b03f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001afe2:	0f b6 c8             	movzx  ecx,al
c001afe5:	89 f0                	mov    eax,esi
c001afe7:	25 fc 00 00 00       	and    eax,0xfc
c001afec:	0f b6 d2             	movzx  edx,dl
c001afef:	c1 e1 10             	shl    ecx,0x10
c001aff2:	c1 e2 0b             	shl    edx,0xb
c001aff5:	09 c1                	or     ecx,eax
c001aff7:	89 f8                	mov    eax,edi
c001aff9:	0f b6 f8             	movzx  edi,al
c001affc:	c1 e7 08             	shl    edi,0x8
c001afff:	09 f9                	or     ecx,edi
c001b001:	09 d1                	or     ecx,edx
c001b003:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b008:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b00e:	89 c8                	mov    eax,ecx
c001b010:	ef                   	out    dx,eax
c001b011:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b016:	ed                   	in     eax,dx
c001b017:	83 e6 02             	and    esi,0x2
c001b01a:	0f b7 db             	movzx  ebx,bx
c001b01d:	74 0a                	je     c001b029 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b01f:	c1 e3 10             	shl    ebx,0x10
c001b022:	0f b7 d0             	movzx  edx,ax
c001b025:	09 d3                	or     ebx,edx
c001b027:	eb 05                	jmp    c001b02e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b029:	66 31 c0             	xor    ax,ax
c001b02c:	09 c3                	or     ebx,eax
c001b02e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b033:	89 c8                	mov    eax,ecx
c001b035:	ef                   	out    dx,eax
c001b036:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b03b:	89 d8                	mov    eax,ebx
c001b03d:	eb 41                	jmp    c001b080 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b03f:	83 f9 02             	cmp    ecx,0x2
c001b042:	75 45                	jne    c001b089 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b044:	89 f1                	mov    ecx,esi
c001b046:	83 ec 0c             	sub    esp,0xc
c001b049:	0f b6 f1             	movzx  esi,cl
c001b04c:	89 f9                	mov    ecx,edi
c001b04e:	56                   	push   esi
c001b04f:	0f b6 f9             	movzx  edi,cl
c001b052:	57                   	push   edi
c001b053:	0f b6 d2             	movzx  edx,dl
c001b056:	52                   	push   edx
c001b057:	0f b6 c0             	movzx  eax,al
c001b05a:	50                   	push   eax
c001b05b:	55                   	push   ebp
c001b05c:	e8 a5 fc ff ff       	call   c001ad06 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b061:	89 c2                	mov    edx,eax
c001b063:	ed                   	in     eax,dx
c001b064:	83 c4 20             	add    esp,0x20
c001b067:	f6 c2 02             	test   dl,0x2
c001b06a:	0f b7 db             	movzx  ebx,bx
c001b06d:	74 0c                	je     c001b07b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b06f:	0f b7 c8             	movzx  ecx,ax
c001b072:	89 d8                	mov    eax,ebx
c001b074:	c1 e0 10             	shl    eax,0x10
c001b077:	09 c8                	or     eax,ecx
c001b079:	eb 05                	jmp    c001b080 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b07b:	66 31 c0             	xor    ax,ax
c001b07e:	09 d8                	or     eax,ebx
c001b080:	ef                   	out    dx,eax
c001b081:	83 c4 0c             	add    esp,0xc
c001b084:	5b                   	pop    ebx
c001b085:	5e                   	pop    esi
c001b086:	5f                   	pop    edi
c001b087:	5d                   	pop    ebp
c001b088:	c3                   	ret    
c001b089:	c7 44 24 20 ab 2a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022aab
c001b091:	83 c4 0c             	add    esp,0xc
c001b094:	5b                   	pop    ebx
c001b095:	5e                   	pop    esi
c001b096:	5f                   	pop    edi
c001b097:	5d                   	pop    ebp
c001b098:	e9 28 61 ff ff       	jmp    c00111c5 <KePanic(char const*)>
c001b09d:	90                   	nop

c001b09e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b09e:	55                   	push   ebp
c001b09f:	57                   	push   edi
c001b0a0:	56                   	push   esi
c001b0a1:	53                   	push   ebx
c001b0a2:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b0a8:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b0af:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b0b6:	0f 85 bd 00 00 00    	jne    c001b179 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b0bc:	83 ec 0c             	sub    esp,0xc
c001b0bf:	68 14 01 00 00       	push   0x114
c001b0c4:	e8 0a ca fe ff       	call   c0007ad3 <malloc>
c001b0c9:	83 c4 0c             	add    esp,0xc
c001b0cc:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b0d2:	68 b1 2a 02 c0       	push   0xc0022ab1
c001b0d7:	50                   	push   eax
c001b0d8:	89 c3                	mov    ebx,eax
c001b0da:	e8 39 06 ff ff       	call   c000b718 <File::File(char const*, Process*)>
c001b0df:	83 c4 10             	add    esp,0x10
c001b0e2:	85 db                	test   ebx,ebx
c001b0e4:	0f 84 6b 02 00 00    	je     c001b355 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b0ea:	57                   	push   edi
c001b0eb:	57                   	push   edi
c001b0ec:	6a 01                	push   0x1
c001b0ee:	53                   	push   ebx
c001b0ef:	e8 e0 06 ff ff       	call   c000b7d4 <File::open(FileOpenMode)>
c001b0f4:	83 c4 10             	add    esp,0x10
c001b0f7:	85 c0                	test   eax,eax
c001b0f9:	0f 85 56 02 00 00    	jne    c001b355 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b0ff:	52                   	push   edx
c001b100:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b104:	50                   	push   eax
c001b105:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b109:	50                   	push   eax
c001b10a:	53                   	push   ebx
c001b10b:	e8 c6 09 ff ff       	call   c000bad6 <File::stat(unsigned long long*, bool*)>
c001b110:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b114:	40                   	inc    eax
c001b115:	89 04 24             	mov    DWORD PTR [esp],eax
c001b118:	e8 b6 c9 fe ff       	call   c0007ad3 <malloc>
c001b11d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b121:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b125:	59                   	pop    ecx
c001b126:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b12b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b12d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b131:	51                   	push   ecx
c001b132:	50                   	push   eax
c001b133:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b137:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b13b:	53                   	push   ebx
c001b13c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b13f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b143:	83 c4 20             	add    esp,0x20
c001b146:	89 c8                	mov    eax,ecx
c001b148:	99                   	cdq    
c001b149:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b14d:	0f 85 02 02 00 00    	jne    c001b355 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b153:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b157:	0f 85 f8 01 00 00    	jne    c001b355 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b15d:	83 ec 0c             	sub    esp,0xc
c001b160:	53                   	push   ebx
c001b161:	e8 cc 06 ff ff       	call   c000b832 <File::close()>
c001b166:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b16a:	83 c4 10             	add    esp,0x10
c001b16d:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b174:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b179:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b181:	31 c9                	xor    ecx,ecx
c001b183:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b18a:	8b 2d a4 a0 02 c0    	mov    ebp,DWORD PTR ds:0xc002a0a4
c001b190:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b197:	8b 15 a8 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0a8
c001b19d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b1a2:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b1aa:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b1af:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b1b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b1bb:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b1c3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b1c7:	39 cd                	cmp    ebp,ecx
c001b1c9:	0f 8e 86 01 00 00    	jle    c001b355 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b1cf:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b1d2:	d4 40                	aam    0x40
c001b1d4:	d5 39                	aad    0x39
c001b1d6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b1da:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b1de:	d4 40                	aam    0x40
c001b1e0:	d5 39                	aad    0x39
c001b1e2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b1e6:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b1ea:	d4 40                	aam    0x40
c001b1ec:	d5 39                	aad    0x39
c001b1ee:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b1f2:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b1f6:	d4 40                	aam    0x40
c001b1f8:	d5 39                	aad    0x39
c001b1fa:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b1fe:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b202:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b206:	3c 56                	cmp    al,0x56
c001b208:	74 47                	je     c001b251 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b20a:	d4 40                	aam    0x40
c001b20c:	d5 39                	aad    0x39
c001b20e:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b211:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b215:	0f b6 db             	movzx  ebx,bl
c001b218:	c1 e3 04             	shl    ebx,0x4
c001b21b:	d4 40                	aam    0x40
c001b21d:	d5 39                	aad    0x39
c001b21f:	83 e8 30             	sub    eax,0x30
c001b222:	0f b6 c0             	movzx  eax,al
c001b225:	09 c3                	or     ebx,eax
c001b227:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b22b:	c1 e3 04             	shl    ebx,0x4
c001b22e:	d4 40                	aam    0x40
c001b230:	d5 39                	aad    0x39
c001b232:	83 e8 30             	sub    eax,0x30
c001b235:	0f b6 c0             	movzx  eax,al
c001b238:	09 c3                	or     ebx,eax
c001b23a:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b23e:	c1 e3 04             	shl    ebx,0x4
c001b241:	d4 40                	aam    0x40
c001b243:	d5 39                	aad    0x39
c001b245:	83 e8 30             	sub    eax,0x30
c001b248:	0f b6 c0             	movzx  eax,al
c001b24b:	09 c3                	or     ebx,eax
c001b24d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b251:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b255:	80 fb 58             	cmp    bl,0x58
c001b258:	74 49                	je     c001b2a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b25a:	88 d8                	mov    al,bl
c001b25c:	d4 40                	aam    0x40
c001b25e:	d5 39                	aad    0x39
c001b260:	83 e8 30             	sub    eax,0x30
c001b263:	0f b6 f8             	movzx  edi,al
c001b266:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b26a:	c1 e7 04             	shl    edi,0x4
c001b26d:	d4 40                	aam    0x40
c001b26f:	d5 39                	aad    0x39
c001b271:	83 e8 30             	sub    eax,0x30
c001b274:	0f b6 c0             	movzx  eax,al
c001b277:	09 c7                	or     edi,eax
c001b279:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b27d:	c1 e7 04             	shl    edi,0x4
c001b280:	d4 40                	aam    0x40
c001b282:	d5 39                	aad    0x39
c001b284:	83 e8 30             	sub    eax,0x30
c001b287:	0f b6 c0             	movzx  eax,al
c001b28a:	09 c7                	or     edi,eax
c001b28c:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b290:	c1 e7 04             	shl    edi,0x4
c001b293:	d4 40                	aam    0x40
c001b295:	d5 39                	aad    0x39
c001b297:	83 e8 30             	sub    eax,0x30
c001b29a:	0f b6 c0             	movzx  eax,al
c001b29d:	09 c7                	or     edi,eax
c001b29f:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b2a3:	8d 41 10             	lea    eax,[ecx+0x10]
c001b2a6:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b2aa:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b2ae:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b2b2:	83 f9 0a             	cmp    ecx,0xa
c001b2b5:	74 07                	je     c001b2be <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b2b7:	47                   	inc    edi
c001b2b8:	39 c5                	cmp    ebp,eax
c001b2ba:	75 16                	jne    c001b2d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b2bc:	89 e8                	mov    eax,ebp
c001b2be:	83 f9 0a             	cmp    ecx,0xa
c001b2c1:	0f 94 c1             	sete   cl
c001b2c4:	0f b6 c9             	movzx  ecx,cl
c001b2c7:	01 c1                	add    ecx,eax
c001b2c9:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b2ce:	75 0f                	jne    c001b2df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b2d0:	eb 1c                	jmp    c001b2ee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b2d2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b2d5:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b2d9:	40                   	inc    eax
c001b2da:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b2dd:	eb cb                	jmp    c001b2aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b2df:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b2e3:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b2e8:	0f 85 d9 fe ff ff    	jne    c001b1c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b2ee:	80 fb 58             	cmp    bl,0x58
c001b2f1:	74 10                	je     c001b303 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b2f3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b2f8:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b2fd:	0f 85 c4 fe ff ff    	jne    c001b1c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b303:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b307:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b30b:	83 e8 30             	sub    eax,0x30
c001b30e:	c1 e0 04             	shl    eax,0x4
c001b311:	83 eb 30             	sub    ebx,0x30
c001b314:	09 d8                	or     eax,ebx
c001b316:	0f b6 c0             	movzx  eax,al
c001b319:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b31d:	0f 85 a4 fe ff ff    	jne    c001b1c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b327:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b32b:	83 e8 30             	sub    eax,0x30
c001b32e:	c1 e0 04             	shl    eax,0x4
c001b331:	83 eb 30             	sub    ebx,0x30
c001b334:	09 d8                	or     eax,ebx
c001b336:	0f b6 c0             	movzx  eax,al
c001b339:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b33d:	0f 85 84 fe ff ff    	jne    c001b1c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b343:	50                   	push   eax
c001b344:	50                   	push   eax
c001b345:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b349:	50                   	push   eax
c001b34a:	56                   	push   esi
c001b34b:	e8 00 53 fe ff       	call   c0000650 <strcpy>
c001b350:	83 c4 10             	add    esp,0x10
c001b353:	eb 05                	jmp    c001b35a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b355:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b358:	31 f6                	xor    esi,esi
c001b35a:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b360:	89 f0                	mov    eax,esi
c001b362:	5b                   	pop    ebx
c001b363:	5e                   	pop    esi
c001b364:	5f                   	pop    edi
c001b365:	5d                   	pop    ebp
c001b366:	c3                   	ret    
c001b367:	90                   	nop

c001b368 <PCI::checkBus(unsigned char)>:
c001b368:	56                   	push   esi
c001b369:	53                   	push   ebx
c001b36a:	31 db                	xor    ebx,ebx
c001b36c:	51                   	push   ecx
c001b36d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b372:	52                   	push   edx
c001b373:	53                   	push   ebx
c001b374:	43                   	inc    ebx
c001b375:	56                   	push   esi
c001b376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b37a:	e8 0f 03 00 00       	call   c001b68e <PCI::checkDevice(unsigned char, unsigned char)>
c001b37f:	83 c4 10             	add    esp,0x10
c001b382:	83 fb 20             	cmp    ebx,0x20
c001b385:	75 eb                	jne    c001b372 <PCI::checkBus(unsigned char)+0xa>
c001b387:	58                   	pop    eax
c001b388:	5b                   	pop    ebx
c001b389:	5e                   	pop    esi
c001b38a:	c3                   	ret    
c001b38b:	90                   	nop

c001b38c <PCI::foundDevice(PCIDeviceInfo)>:
c001b38c:	55                   	push   ebp
c001b38d:	57                   	push   edi
c001b38e:	56                   	push   esi
c001b38f:	53                   	push   ebx
c001b390:	83 ec 1c             	sub    esp,0x1c
c001b393:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b398:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b39c:	3d ff ff 00 00       	cmp    eax,0xffff
c001b3a1:	0f 84 63 01 00 00    	je     c001b50a <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b3a7:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b3ac:	66 3d 06 04          	cmp    ax,0x406
c001b3b0:	75 2c                	jne    c001b3de <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b3b2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b3b7:	50                   	push   eax
c001b3b8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b3bd:	50                   	push   eax
c001b3be:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b3c3:	50                   	push   eax
c001b3c4:	53                   	push   ebx
c001b3c5:	e8 62 fb ff ff       	call   c001af2c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b3ca:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b3ce:	0f b6 c0             	movzx  eax,al
c001b3d1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b3d5:	83 c4 2c             	add    esp,0x2c
c001b3d8:	5b                   	pop    ebx
c001b3d9:	5e                   	pop    esi
c001b3da:	5f                   	pop    edi
c001b3db:	5d                   	pop    ebp
c001b3dc:	eb 8a                	jmp    c001b368 <PCI::checkBus(unsigned char)>
c001b3de:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b3e3:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b3e9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b3ed:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b3f1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b3f5:	85 d2                	test   edx,edx
c001b3f7:	74 34                	je     c001b42d <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b3f9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b3fc:	85 c9                	test   ecx,ecx
c001b3fe:	74 29                	je     c001b429 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b400:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b406:	31 f5                	xor    ebp,esi
c001b408:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b40e:	75 19                	jne    c001b429 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b410:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b416:	75 11                	jne    c001b429 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b418:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b41f:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b423:	0f 84 e1 00 00 00    	je     c001b50a <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b429:	8b 12                	mov    edx,DWORD PTR [edx]
c001b42b:	eb c8                	jmp    c001b3f5 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b42d:	3d 01 06 00 00       	cmp    eax,0x601
c001b432:	75 19                	jne    c001b44d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b434:	83 ec 0c             	sub    esp,0xc
c001b437:	68 64 01 00 00       	push   0x164
c001b43c:	e8 92 c6 fe ff       	call   c0007ad3 <malloc>
c001b441:	89 04 24             	mov    DWORD PTR [esp],eax
c001b444:	89 c5                	mov    ebp,eax
c001b446:	e8 ab 0e 00 00       	call   c001c2f6 <SATABus::SATABus()>
c001b44b:	eb 1e                	jmp    c001b46b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b44d:	3d 01 01 00 00       	cmp    eax,0x101
c001b452:	75 62                	jne    c001b4b6 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b454:	83 ec 0c             	sub    esp,0xc
c001b457:	68 70 02 00 00       	push   0x270
c001b45c:	e8 72 c6 fe ff       	call   c0007ad3 <malloc>
c001b461:	89 04 24             	mov    DWORD PTR [esp],eax
c001b464:	89 c5                	mov    ebp,eax
c001b466:	e8 f3 02 00 00       	call   c001b75e <IDE::IDE()>
c001b46b:	58                   	pop    eax
c001b46c:	5a                   	pop    edx
c001b46d:	55                   	push   ebp
c001b46e:	53                   	push   ebx
c001b46f:	e8 b4 11 ff ff       	call   c000c628 <Device::addChild(Device*)>
c001b474:	83 ec 1c             	sub    esp,0x1c
c001b477:	b9 09 00 00 00       	mov    ecx,0x9
c001b47c:	fc                   	cld    
c001b47d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b481:	89 e7                	mov    edi,esp
c001b483:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b485:	55                   	push   ebp
c001b486:	e8 e3 10 ff ff       	call   c000c56e <Device::preOpenPCI(PCIDeviceInfo)>
c001b48b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b48e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b492:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b49a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b4a2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b4aa:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b4ad:	83 c4 4c             	add    esp,0x4c
c001b4b0:	5b                   	pop    ebx
c001b4b1:	5e                   	pop    esi
c001b4b2:	5f                   	pop    edi
c001b4b3:	5d                   	pop    ebp
c001b4b4:	ff e0                	jmp    eax
c001b4b6:	83 ec 0c             	sub    esp,0xc
c001b4b9:	68 58 01 00 00       	push   0x158
c001b4be:	e8 10 c6 fe ff       	call   c0007ad3 <malloc>
c001b4c3:	5a                   	pop    edx
c001b4c4:	59                   	pop    ecx
c001b4c5:	68 ca 2a 02 c0       	push   0xc0022aca
c001b4ca:	50                   	push   eax
c001b4cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b4cf:	e8 f2 13 ff ff       	call   c000c8c6 <DriverlessDevice::DriverlessDevice(char const*)>
c001b4d4:	5e                   	pop    esi
c001b4d5:	5f                   	pop    edi
c001b4d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4da:	50                   	push   eax
c001b4db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b4df:	53                   	push   ebx
c001b4e0:	e8 43 11 ff ff       	call   c000c628 <Device::addChild(Device*)>
c001b4e5:	83 c4 10             	add    esp,0x10
c001b4e8:	b9 09 00 00 00       	mov    ecx,0x9
c001b4ed:	fc                   	cld    
c001b4ee:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b4f2:	89 fe                	mov    esi,edi
c001b4f4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b4fe:	83 c4 1c             	add    esp,0x1c
c001b501:	5b                   	pop    ebx
c001b502:	5e                   	pop    esi
c001b503:	5f                   	pop    edi
c001b504:	5d                   	pop    ebp
c001b505:	e9 64 10 ff ff       	jmp    c000c56e <Device::preOpenPCI(PCIDeviceInfo)>
c001b50a:	83 c4 1c             	add    esp,0x1c
c001b50d:	5b                   	pop    ebx
c001b50e:	5e                   	pop    esi
c001b50f:	5f                   	pop    edi
c001b510:	5d                   	pop    ebp
c001b511:	c3                   	ret    

c001b512 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b512:	55                   	push   ebp
c001b513:	57                   	push   edi
c001b514:	56                   	push   esi
c001b515:	53                   	push   ebx
c001b516:	83 ec 68             	sub    esp,0x68
c001b519:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b520:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b524:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b528:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b52f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b534:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b538:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b53f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b544:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b548:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b54d:	6a 0c                	push   0xc
c001b54f:	57                   	push   edi
c001b550:	53                   	push   ebx
c001b551:	56                   	push   esi
c001b552:	55                   	push   ebp
c001b553:	e8 24 f8 ff ff       	call   c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b558:	83 c4 20             	add    esp,0x20
c001b55b:	57                   	push   edi
c001b55c:	53                   	push   ebx
c001b55d:	56                   	push   esi
c001b55e:	55                   	push   ebp
c001b55f:	e8 0e f9 ff ff       	call   c001ae72 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b564:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b569:	57                   	push   edi
c001b56a:	53                   	push   ebx
c001b56b:	56                   	push   esi
c001b56c:	55                   	push   ebp
c001b56d:	e8 96 f9 ff ff       	call   c001af08 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b572:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b576:	83 c4 14             	add    esp,0x14
c001b579:	6a 3c                	push   0x3c
c001b57b:	57                   	push   edi
c001b57c:	53                   	push   ebx
c001b57d:	56                   	push   esi
c001b57e:	55                   	push   ebp
c001b57f:	e8 f8 f7 ff ff       	call   c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b584:	0f b6 c4             	movzx  eax,ah
c001b587:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b58b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b58f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b593:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b598:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b59e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b5a4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b5a8:	83 c4 20             	add    esp,0x20
c001b5ab:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b5b0:	74 30                	je     c001b5e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b5b2:	31 c0                	xor    eax,eax
c001b5b4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b5b8:	7e 28                	jle    c001b5e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b5ba:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b5c2:	39 cb                	cmp    ebx,ecx
c001b5c4:	75 19                	jne    c001b5df <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b5c6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b5ce:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b5d2:	75 0b                	jne    c001b5df <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b5d4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b5db:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b5df:	40                   	inc    eax
c001b5e0:	eb d2                	jmp    c001b5b4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b5e2:	31 d2                	xor    edx,edx
c001b5e4:	83 ec 0c             	sub    esp,0xc
c001b5e7:	57                   	push   edi
c001b5e8:	53                   	push   ebx
c001b5e9:	56                   	push   esi
c001b5ea:	52                   	push   edx
c001b5eb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b5ef:	55                   	push   ebp
c001b5f0:	e8 5f f9 ff ff       	call   c001af54 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b5f9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b5fd:	42                   	inc    edx
c001b5fe:	83 c4 20             	add    esp,0x20
c001b601:	83 fa 06             	cmp    edx,0x6
c001b604:	75 de                	jne    c001b5e4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b606:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b60a:	83 ec 0c             	sub    esp,0xc
c001b60d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b611:	c1 e2 08             	shl    edx,0x8
c001b614:	0f b6 c4             	movzx  eax,ah
c001b617:	09 d0                	or     eax,edx
c001b619:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b61e:	6a 02                	push   0x2
c001b620:	57                   	push   edi
c001b621:	53                   	push   ebx
c001b622:	56                   	push   esi
c001b623:	55                   	push   ebp
c001b624:	e8 53 f7 ff ff       	call   c001ad7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b629:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b62e:	83 c4 20             	add    esp,0x20
c001b631:	57                   	push   edi
c001b632:	53                   	push   ebx
c001b633:	56                   	push   esi
c001b634:	55                   	push   ebp
c001b635:	e8 82 f8 ff ff       	call   c001aebc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b63a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b63e:	57                   	push   edi
c001b63f:	53                   	push   ebx
c001b640:	56                   	push   esi
c001b641:	55                   	push   ebp
c001b642:	e8 df f7 ff ff       	call   c001ae26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b647:	b9 09 00 00 00       	mov    ecx,0x9
c001b64c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b651:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b655:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b659:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b65d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b661:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b665:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b669:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b66d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b671:	83 ec 0c             	sub    esp,0xc
c001b674:	fc                   	cld    
c001b675:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b679:	89 e7                	mov    edi,esp
c001b67b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b67d:	55                   	push   ebp
c001b67e:	e8 09 fd ff ff       	call   c001b38c <PCI::foundDevice(PCIDeviceInfo)>
c001b683:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b689:	5b                   	pop    ebx
c001b68a:	5e                   	pop    esi
c001b68b:	5f                   	pop    edi
c001b68c:	5d                   	pop    ebp
c001b68d:	c3                   	ret    

c001b68e <PCI::checkDevice(unsigned char, unsigned char)>:
c001b68e:	55                   	push   ebp
c001b68f:	57                   	push   edi
c001b690:	56                   	push   esi
c001b691:	53                   	push   ebx
c001b692:	83 ec 0c             	sub    esp,0xc
c001b695:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b69a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b69f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b6a3:	6a 00                	push   0x0
c001b6a5:	56                   	push   esi
c001b6a6:	57                   	push   edi
c001b6a7:	55                   	push   ebp
c001b6a8:	e8 79 f7 ff ff       	call   c001ae26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6ad:	6a 00                	push   0x0
c001b6af:	56                   	push   esi
c001b6b0:	57                   	push   edi
c001b6b1:	55                   	push   ebp
c001b6b2:	e8 5b fe ff ff       	call   c001b512 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b6b7:	83 c4 20             	add    esp,0x20
c001b6ba:	6a 00                	push   0x0
c001b6bc:	56                   	push   esi
c001b6bd:	57                   	push   edi
c001b6be:	55                   	push   ebp
c001b6bf:	e8 86 f7 ff ff       	call   c001ae4a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b6c4:	83 c4 10             	add    esp,0x10
c001b6c7:	a8 80                	test   al,0x80
c001b6c9:	74 2d                	je     c001b6f8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b6cb:	bb 01 00 00 00       	mov    ebx,0x1
c001b6d0:	53                   	push   ebx
c001b6d1:	56                   	push   esi
c001b6d2:	57                   	push   edi
c001b6d3:	55                   	push   ebp
c001b6d4:	e8 4d f7 ff ff       	call   c001ae26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6d9:	83 c4 10             	add    esp,0x10
c001b6dc:	0f b7 c0             	movzx  eax,ax
c001b6df:	3d ff ff 00 00       	cmp    eax,0xffff
c001b6e4:	74 0c                	je     c001b6f2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b6e6:	53                   	push   ebx
c001b6e7:	56                   	push   esi
c001b6e8:	57                   	push   edi
c001b6e9:	55                   	push   ebp
c001b6ea:	e8 23 fe ff ff       	call   c001b512 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b6ef:	83 c4 10             	add    esp,0x10
c001b6f2:	43                   	inc    ebx
c001b6f3:	83 fb 08             	cmp    ebx,0x8
c001b6f6:	75 d8                	jne    c001b6d0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b6f8:	83 c4 0c             	add    esp,0xc
c001b6fb:	5b                   	pop    ebx
c001b6fc:	5e                   	pop    esi
c001b6fd:	5f                   	pop    edi
c001b6fe:	5d                   	pop    ebp
c001b6ff:	c3                   	ret    

c001b700 <PCI::detect()>:
c001b700:	56                   	push   esi
c001b701:	53                   	push   ebx
c001b702:	53                   	push   ebx
c001b703:	31 db                	xor    ebx,ebx
c001b705:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b709:	6a 00                	push   0x0
c001b70b:	6a 00                	push   0x0
c001b70d:	6a 00                	push   0x0
c001b70f:	56                   	push   esi
c001b710:	e8 35 f7 ff ff       	call   c001ae4a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b715:	83 c4 10             	add    esp,0x10
c001b718:	a8 80                	test   al,0x80
c001b71a:	75 21                	jne    c001b73d <PCI::detect()+0x3d>
c001b71c:	51                   	push   ecx
c001b71d:	51                   	push   ecx
c001b71e:	6a 00                	push   0x0
c001b720:	56                   	push   esi
c001b721:	e8 42 fc ff ff       	call   c001b368 <PCI::checkBus(unsigned char)>
c001b726:	83 c4 10             	add    esp,0x10
c001b729:	eb 2a                	jmp    c001b755 <PCI::detect()+0x55>
c001b72b:	52                   	push   edx
c001b72c:	52                   	push   edx
c001b72d:	53                   	push   ebx
c001b72e:	43                   	inc    ebx
c001b72f:	56                   	push   esi
c001b730:	e8 33 fc ff ff       	call   c001b368 <PCI::checkBus(unsigned char)>
c001b735:	83 c4 10             	add    esp,0x10
c001b738:	83 fb 08             	cmp    ebx,0x8
c001b73b:	74 18                	je     c001b755 <PCI::detect()+0x55>
c001b73d:	53                   	push   ebx
c001b73e:	6a 00                	push   0x0
c001b740:	6a 00                	push   0x0
c001b742:	56                   	push   esi
c001b743:	e8 de f6 ff ff       	call   c001ae26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b748:	83 c4 10             	add    esp,0x10
c001b74b:	0f b7 c0             	movzx  eax,ax
c001b74e:	3d ff ff 00 00       	cmp    eax,0xffff
c001b753:	74 d6                	je     c001b72b <PCI::detect()+0x2b>
c001b755:	58                   	pop    eax
c001b756:	5b                   	pop    ebx
c001b757:	5e                   	pop    esi
c001b758:	c3                   	ret    
c001b759:	90                   	nop

c001b75a <IDE::close(int, int, void*)>:
c001b75a:	83 c8 ff             	or     eax,0xffffffff
c001b75d:	c3                   	ret    

c001b75e <IDE::IDE()>:
c001b75e:	83 ec 0c             	sub    esp,0xc
c001b761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b765:	83 ec 08             	sub    esp,0x8
c001b768:	68 10 2b 02 c0       	push   0xc0022b10
c001b76d:	50                   	push   eax
c001b76e:	e8 f9 11 ff ff       	call   c000c96c <HardDiskController::HardDiskController(char const*)>
c001b773:	83 c4 10             	add    esp,0x10
c001b776:	ba a0 2b 02 c0       	mov    edx,0xc0022ba0
c001b77b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b77f:	89 10                	mov    DWORD PTR [eax],edx
c001b781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b785:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b78c:	90                   	nop
c001b78d:	83 c4 0c             	add    esp,0xc
c001b790:	c3                   	ret    
c001b791:	90                   	nop

c001b792 <IDE::prepareInterrupt(unsigned char)>:
c001b792:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b797:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b79b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b7a3:	c3                   	ret    

c001b7a4 <selectDrive(unsigned char, unsigned char)>:
c001b7a4:	c3                   	ret    
c001b7a5:	90                   	nop

c001b7a6 <IDE::getBase(unsigned char)>:
c001b7a6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b7ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7af:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b7b7:	c3                   	ret    

c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b7b8:	55                   	push   ebp
c001b7b9:	57                   	push   edi
c001b7ba:	56                   	push   esi
c001b7bb:	53                   	push   ebx
c001b7bc:	83 ec 1c             	sub    esp,0x1c
c001b7bf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b7c3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b7c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b7cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b7cf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b7d2:	80 f9 03             	cmp    cl,0x3
c001b7d5:	77 4f                	ja     c001b826 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b7d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7db:	0f b6 f2             	movzx  esi,dl
c001b7de:	0f b6 db             	movzx  ebx,bl
c001b7e1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b7e4:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b7e9:	80 ca 80             	or     dl,0x80
c001b7ec:	52                   	push   edx
c001b7ed:	6a 0c                	push   0xc
c001b7ef:	56                   	push   esi
c001b7f0:	57                   	push   edi
c001b7f1:	e8 c2 ff ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7f6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b7fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7ff:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b803:	ee                   	out    dx,al
c001b804:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b809:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b80d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b811:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b819:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b81d:	83 c4 2c             	add    esp,0x2c
c001b820:	5b                   	pop    ebx
c001b821:	5e                   	pop    esi
c001b822:	5f                   	pop    edi
c001b823:	5d                   	pop    ebp
c001b824:	eb 92                	jmp    c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b826:	0f b6 cb             	movzx  ecx,bl
c001b829:	83 f9 07             	cmp    ecx,0x7
c001b82c:	77 12                	ja     c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b82e:	0f b6 d2             	movzx  edx,dl
c001b831:	0f b6 db             	movzx  ebx,bl
c001b834:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b83c:	01 da                	add    edx,ebx
c001b83e:	eb 2f                	jmp    c001b86f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b840:	83 f9 0d             	cmp    ecx,0xd
c001b843:	77 13                	ja     c001b858 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b845:	0f b6 d2             	movzx  edx,dl
c001b848:	0f b6 db             	movzx  ebx,bl
c001b84b:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b852:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b856:	eb 17                	jmp    c001b86f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b858:	83 f9 15             	cmp    ecx,0x15
c001b85b:	77 13                	ja     c001b870 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b85d:	0f b6 d2             	movzx  edx,dl
c001b860:	0f b6 db             	movzx  ebx,bl
c001b863:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b86b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b86f:	ee                   	out    dx,al
c001b870:	83 c4 1c             	add    esp,0x1c
c001b873:	5b                   	pop    ebx
c001b874:	5e                   	pop    esi
c001b875:	5f                   	pop    edi
c001b876:	5d                   	pop    ebp
c001b877:	c3                   	ret    

c001b878 <IDE::read(unsigned char, unsigned char)>:
c001b878:	57                   	push   edi
c001b879:	56                   	push   esi
c001b87a:	53                   	push   ebx
c001b87b:	83 ec 10             	sub    esp,0x10
c001b87e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b882:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b886:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b88a:	8d 42 f8             	lea    eax,[edx-0x8]
c001b88d:	3c 03                	cmp    al,0x3
c001b88f:	77 48                	ja     c001b8d9 <IDE::read(unsigned char, unsigned char)+0x61>
c001b891:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b895:	0f b6 f1             	movzx  esi,cl
c001b898:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b89b:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b8a0:	0c 80                	or     al,0x80
c001b8a2:	50                   	push   eax
c001b8a3:	6a 0c                	push   0xc
c001b8a5:	56                   	push   esi
c001b8a6:	53                   	push   ebx
c001b8a7:	e8 0c ff ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b8b0:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b8b5:	0f b6 d2             	movzx  edx,dl
c001b8b8:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b8bc:	ec                   	in     al,dx
c001b8bd:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b8c1:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001b8c6:	52                   	push   edx
c001b8c7:	6a 0c                	push   0xc
c001b8c9:	56                   	push   esi
c001b8ca:	53                   	push   ebx
c001b8cb:	e8 e8 fe ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8d0:	83 c4 20             	add    esp,0x20
c001b8d3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b8d7:	eb 4c                	jmp    c001b925 <IDE::read(unsigned char, unsigned char)+0xad>
c001b8d9:	0f b6 f2             	movzx  esi,dl
c001b8dc:	83 fe 07             	cmp    esi,0x7
c001b8df:	77 12                	ja     c001b8f3 <IDE::read(unsigned char, unsigned char)+0x7b>
c001b8e1:	0f b6 c9             	movzx  ecx,cl
c001b8e4:	0f b6 d2             	movzx  edx,dl
c001b8e7:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001b8ef:	01 c2                	add    edx,eax
c001b8f1:	eb 31                	jmp    c001b924 <IDE::read(unsigned char, unsigned char)+0xac>
c001b8f3:	83 fe 0d             	cmp    esi,0xd
c001b8f6:	77 13                	ja     c001b90b <IDE::read(unsigned char, unsigned char)+0x93>
c001b8f8:	0f b6 c9             	movzx  ecx,cl
c001b8fb:	0f b6 d2             	movzx  edx,dl
c001b8fe:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001b905:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b909:	eb 19                	jmp    c001b924 <IDE::read(unsigned char, unsigned char)+0xac>
c001b90b:	31 c0                	xor    eax,eax
c001b90d:	83 fe 15             	cmp    esi,0x15
c001b910:	77 13                	ja     c001b925 <IDE::read(unsigned char, unsigned char)+0xad>
c001b912:	0f b6 c9             	movzx  ecx,cl
c001b915:	0f b6 d2             	movzx  edx,dl
c001b918:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001b920:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b924:	ec                   	in     al,dx
c001b925:	83 c4 10             	add    esp,0x10
c001b928:	5b                   	pop    ebx
c001b929:	5e                   	pop    esi
c001b92a:	5f                   	pop    edi
c001b92b:	c3                   	ret    

c001b92c <IDE::waitInterrupt(unsigned char)>:
c001b92c:	55                   	push   ebp
c001b92d:	57                   	push   edi
c001b92e:	56                   	push   esi
c001b92f:	53                   	push   ebx
c001b930:	31 db                	xor    ebx,ebx
c001b932:	83 ec 0c             	sub    esp,0xc
c001b935:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b939:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b93e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b946:	89 e8                	mov    eax,ebp
c001b948:	84 c0                	test   al,al
c001b94a:	75 30                	jne    c001b97c <IDE::waitInterrupt(unsigned char)+0x50>
c001b94c:	50                   	push   eax
c001b94d:	6a 0c                	push   0xc
c001b94f:	56                   	push   esi
c001b950:	57                   	push   edi
c001b951:	e8 22 ff ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001b956:	83 c4 10             	add    esp,0x10
c001b959:	a8 01                	test   al,0x1
c001b95b:	75 27                	jne    c001b984 <IDE::waitInterrupt(unsigned char)+0x58>
c001b95d:	f6 c3 04             	test   bl,0x4
c001b960:	75 12                	jne    c001b974 <IDE::waitInterrupt(unsigned char)+0x48>
c001b962:	83 fb 32             	cmp    ebx,0x32
c001b965:	7e 0d                	jle    c001b974 <IDE::waitInterrupt(unsigned char)+0x48>
c001b967:	83 ec 0c             	sub    esp,0xc
c001b96a:	6a 64                	push   0x64
c001b96c:	e8 73 a4 ff ff       	call   c0015de4 <milliTenthSleep(unsigned int)>
c001b971:	83 c4 10             	add    esp,0x10
c001b974:	83 fb 3c             	cmp    ebx,0x3c
c001b977:	74 0b                	je     c001b984 <IDE::waitInterrupt(unsigned char)+0x58>
c001b979:	43                   	inc    ebx
c001b97a:	eb c2                	jmp    c001b93e <IDE::waitInterrupt(unsigned char)+0x12>
c001b97c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b984:	83 c4 0c             	add    esp,0xc
c001b987:	89 e8                	mov    eax,ebp
c001b989:	5b                   	pop    ebx
c001b98a:	5e                   	pop    esi
c001b98b:	5f                   	pop    edi
c001b98c:	5d                   	pop    ebp
c001b98d:	c3                   	ret    

c001b98e <ideChannel0IRQHandler(regs*, void*)>:
c001b98e:	83 ec 10             	sub    esp,0x10
c001b991:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b995:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b99c:	6a 07                	push   0x7
c001b99e:	6a 00                	push   0x0
c001b9a0:	50                   	push   eax
c001b9a1:	e8 d2 fe ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001b9a6:	83 c4 1c             	add    esp,0x1c
c001b9a9:	c3                   	ret    

c001b9aa <ideChannel1IRQHandler(regs*, void*)>:
c001b9aa:	83 ec 10             	sub    esp,0x10
c001b9ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9b1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b9b8:	6a 07                	push   0x7
c001b9ba:	6a 01                	push   0x1
c001b9bc:	50                   	push   eax
c001b9bd:	e8 b6 fe ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001b9c2:	83 c4 1c             	add    esp,0x1c
c001b9c5:	c3                   	ret    

c001b9c6 <IDE::enableIRQs(unsigned char, bool)>:
c001b9c6:	57                   	push   edi
c001b9c7:	b8 02 00 00 00       	mov    eax,0x2
c001b9cc:	56                   	push   esi
c001b9cd:	53                   	push   ebx
c001b9ce:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b9d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b9d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b9db:	74 02                	je     c001b9df <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b9dd:	31 c0                	xor    eax,eax
c001b9df:	0f b6 db             	movzx  ebx,bl
c001b9e2:	bf 04 00 00 00       	mov    edi,0x4
c001b9e7:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b9ee:	50                   	push   eax
c001b9ef:	6a 0c                	push   0xc
c001b9f1:	53                   	push   ebx
c001b9f2:	56                   	push   esi
c001b9f3:	e8 c0 fd ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9f8:	83 c4 10             	add    esp,0x10
c001b9fb:	50                   	push   eax
c001b9fc:	6a 0c                	push   0xc
c001b9fe:	53                   	push   ebx
c001b9ff:	56                   	push   esi
c001ba00:	e8 73 fe ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001ba05:	83 c4 10             	add    esp,0x10
c001ba08:	4f                   	dec    edi
c001ba09:	75 f0                	jne    c001b9fb <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ba0b:	5b                   	pop    ebx
c001ba0c:	5e                   	pop    esi
c001ba0d:	5f                   	pop    edi
c001ba0e:	c3                   	ret    
c001ba0f:	90                   	nop

c001ba10 <IDE::open(int, int, void*)>:
c001ba10:	55                   	push   ebp
c001ba11:	57                   	push   edi
c001ba12:	56                   	push   esi
c001ba13:	53                   	push   ebx
c001ba14:	83 ec 1c             	sub    esp,0x1c
c001ba17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba1b:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ba22:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ba2b:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ba34:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ba3b:	0f 85 da 02 00 00    	jne    c001bd1b <IDE::open(int, int, void*)+0x30b>
c001ba41:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ba47:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001ba4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba4f:	83 e0 7f             	and    eax,0x7f
c001ba52:	83 f8 05             	cmp    eax,0x5
c001ba55:	74 05                	je     c001ba5c <IDE::open(int, int, void*)+0x4c>
c001ba57:	83 f8 0f             	cmp    eax,0xf
c001ba5a:	75 32                	jne    c001ba8e <IDE::open(int, int, void*)+0x7e>
c001ba5c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ba62:	83 e0 fc             	and    eax,0xfffffffc
c001ba65:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ba6c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ba72:	83 e0 fc             	and    eax,0xfffffffc
c001ba75:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ba7c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ba82:	83 e0 fc             	and    eax,0xfffffffc
c001ba85:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ba8c:	eb 14                	jmp    c001baa2 <IDE::open(int, int, void*)+0x92>
c001ba8e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ba98:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001baa2:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001baa9:	bf f8 0c 00 00       	mov    edi,0xcf8
c001baae:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bab5:	89 fa                	mov    edx,edi
c001bab7:	89 f1                	mov    ecx,esi
c001bab9:	c1 e1 10             	shl    ecx,0x10
c001babc:	89 e8                	mov    eax,ebp
c001babe:	c1 e0 0b             	shl    eax,0xb
c001bac1:	09 c1                	or     ecx,eax
c001bac3:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001baca:	c1 e0 08             	shl    eax,0x8
c001bacd:	09 c1                	or     ecx,eax
c001bacf:	89 c8                	mov    eax,ecx
c001bad1:	0d 08 00 00 80       	or     eax,0x80000008
c001bad6:	ef                   	out    dx,eax
c001bad7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001badc:	ed                   	in     eax,dx
c001badd:	c1 e8 10             	shr    eax,0x10
c001bae0:	3d ff ff 00 00       	cmp    eax,0xffff
c001bae5:	0f 84 f9 00 00 00    	je     c001bbe4 <IDE::open(int, int, void*)+0x1d4>
c001baeb:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001baf1:	89 fa                	mov    edx,edi
c001baf3:	89 c8                	mov    eax,ecx
c001baf5:	ef                   	out    dx,eax
c001baf6:	b0 fe                	mov    al,0xfe
c001baf8:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bafd:	ee                   	out    dx,al
c001bafe:	89 c8                	mov    eax,ecx
c001bb00:	89 fa                	mov    edx,edi
c001bb02:	ef                   	out    dx,eax
c001bb03:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bb08:	ed                   	in     eax,dx
c001bb09:	3c fe                	cmp    al,0xfe
c001bb0b:	0f 85 a4 00 00 00    	jne    c001bbb5 <IDE::open(int, int, void*)+0x1a5>
c001bb11:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bb17:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bb1e:	74 30                	je     c001bb50 <IDE::open(int, int, void*)+0x140>
c001bb20:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bb26:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bb2a:	83 ec 0c             	sub    esp,0xc
c001bb2d:	40                   	inc    eax
c001bb2e:	0f b6 c0             	movzx  eax,al
c001bb31:	50                   	push   eax
c001bb32:	55                   	push   ebp
c001bb33:	56                   	push   esi
c001bb34:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bb3a:	51                   	push   ecx
c001bb3b:	e8 84 3a ff ff       	call   c000f5c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bb40:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bb45:	83 c4 1c             	add    esp,0x1c
c001bb48:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bb4e:	eb 0a                	jmp    c001bb5a <IDE::open(int, int, void*)+0x14a>
c001bb50:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bb5a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bb61:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001bb66:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb6d:	89 ea                	mov    edx,ebp
c001bb6f:	c1 e1 10             	shl    ecx,0x10
c001bb72:	c1 e0 08             	shl    eax,0x8
c001bb75:	09 c1                	or     ecx,eax
c001bb77:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bb7e:	c1 e0 0b             	shl    eax,0xb
c001bb81:	09 c1                	or     ecx,eax
c001bb83:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bb89:	89 c8                	mov    eax,ecx
c001bb8b:	ef                   	out    dx,eax
c001bb8c:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001bb92:	be fc 0c 00 00       	mov    esi,0xcfc
c001bb97:	89 f2                	mov    edx,esi
c001bb99:	89 f8                	mov    eax,edi
c001bb9b:	ee                   	out    dx,al
c001bb9c:	89 c8                	mov    eax,ecx
c001bb9e:	89 ea                	mov    edx,ebp
c001bba0:	ef                   	out    dx,eax
c001bba1:	89 f2                	mov    edx,esi
c001bba3:	ed                   	in     eax,dx
c001bba4:	0f b6 c0             	movzx  eax,al
c001bba7:	39 f8                	cmp    eax,edi
c001bba9:	74 49                	je     c001bbf4 <IDE::open(int, int, void*)+0x1e4>
c001bbab:	83 ec 0c             	sub    esp,0xc
c001bbae:	68 28 2b 02 c0       	push   0xc0022b28
c001bbb3:	eb 37                	jmp    c001bbec <IDE::open(int, int, void*)+0x1dc>
c001bbb5:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bbbe:	75 1a                	jne    c001bbda <IDE::open(int, int, void*)+0x1ca>
c001bbc0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bbc5:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bbca:	74 05                	je     c001bbd1 <IDE::open(int, int, void*)+0x1c1>
c001bbcc:	83 c0 80             	add    eax,0xffffff80
c001bbcf:	75 09                	jne    c001bbda <IDE::open(int, int, void*)+0x1ca>
c001bbd1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bbd8:	eb 1a                	jmp    c001bbf4 <IDE::open(int, int, void*)+0x1e4>
c001bbda:	83 ec 0c             	sub    esp,0xc
c001bbdd:	68 30 2b 02 c0       	push   0xc0022b30
c001bbe2:	eb 08                	jmp    c001bbec <IDE::open(int, int, void*)+0x1dc>
c001bbe4:	83 ec 0c             	sub    esp,0xc
c001bbe7:	68 61 2b 02 c0       	push   0xc0022b61
c001bbec:	e8 d4 55 ff ff       	call   c00111c5 <KePanic(char const*)>
c001bbf1:	83 c4 10             	add    esp,0x10
c001bbf4:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bbfb:	74 1a                	je     c001bc17 <IDE::open(int, int, void*)+0x207>
c001bbfd:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bc03:	83 e0 fc             	and    eax,0xfffffffc
c001bc06:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bc0d:	83 c0 08             	add    eax,0x8
c001bc10:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bc17:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bc1d:	89 c2                	mov    edx,eax
c001bc1f:	83 e2 0f             	and    edx,0xf
c001bc22:	83 fa 08             	cmp    edx,0x8
c001bc25:	75 0a                	jne    c001bc31 <IDE::open(int, int, void*)+0x221>
c001bc27:	83 e8 02             	sub    eax,0x2
c001bc2a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bc31:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bc37:	89 c2                	mov    edx,eax
c001bc39:	83 e2 0f             	and    edx,0xf
c001bc3c:	83 fa 08             	cmp    edx,0x8
c001bc3f:	75 0a                	jne    c001bc4b <IDE::open(int, int, void*)+0x23b>
c001bc41:	83 e8 02             	sub    eax,0x2
c001bc44:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bc4b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bc52:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bc59:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc5c:	89 d0                	mov    eax,edx
c001bc5e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc62:	8d 7a 01             	lea    edi,[edx+0x1]
c001bc65:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bc69:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc6d:	83 e1 3f             	and    ecx,0x3f
c001bc70:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc74:	89 f9                	mov    ecx,edi
c001bc76:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bc7d:	8d 78 02             	lea    edi,[eax+0x2]
c001bc80:	0f b6 c9             	movzx  ecx,cl
c001bc83:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc86:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bc8a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc8e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bc92:	83 e2 3f             	and    edx,0x3f
c001bc95:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bc99:	89 f9                	mov    ecx,edi
c001bc9b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bca1:	8d 78 03             	lea    edi,[eax+0x3]
c001bca4:	0f b6 d1             	movzx  edx,cl
c001bca7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bcaa:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bcae:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bcb2:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bcb6:	83 e1 3f             	and    ecx,0x3f
c001bcb9:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bcbd:	89 f9                	mov    ecx,edi
c001bcbf:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bcc5:	8d 78 04             	lea    edi,[eax+0x4]
c001bcc8:	0f b6 c9             	movzx  ecx,cl
c001bccb:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bcce:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bcd2:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bcd6:	89 fa                	mov    edx,edi
c001bcd8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bcde:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bce2:	83 e2 3f             	and    edx,0x3f
c001bce5:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bce9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bcf0:	66 85 f6             	test   si,si
c001bcf3:	74 65                	je     c001bd5a <IDE::open(int, int, void*)+0x34a>
c001bcf5:	89 f9                	mov    ecx,edi
c001bcf7:	83 c0 05             	add    eax,0x5
c001bcfa:	0f b6 d1             	movzx  edx,cl
c001bcfd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd00:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd04:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bd08:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bd0e:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bd12:	83 e0 3f             	and    eax,0x3f
c001bd15:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bd19:	eb 3f                	jmp    c001bd5a <IDE::open(int, int, void*)+0x34a>
c001bd1b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bd22:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bd28:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bd2f:	05 06 02 00 00       	add    eax,0x206
c001bd34:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd3b:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bd42:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bd49:	05 06 02 00 00       	add    eax,0x206
c001bd4e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd55:	e9 bd fe ff ff       	jmp    c001bc17 <IDE::open(int, int, void*)+0x207>
c001bd5a:	50                   	push   eax
c001bd5b:	50                   	push   eax
c001bd5c:	6a 00                	push   0x0
c001bd5e:	53                   	push   ebx
c001bd5f:	e8 2e fa ff ff       	call   c001b792 <IDE::prepareInterrupt(unsigned char)>
c001bd64:	5a                   	pop    edx
c001bd65:	59                   	pop    ecx
c001bd66:	6a 01                	push   0x1
c001bd68:	53                   	push   ebx
c001bd69:	e8 24 fa ff ff       	call   c001b792 <IDE::prepareInterrupt(unsigned char)>
c001bd6e:	83 c4 0c             	add    esp,0xc
c001bd71:	6a 00                	push   0x0
c001bd73:	6a 00                	push   0x0
c001bd75:	53                   	push   ebx
c001bd76:	e8 4b fc ff ff       	call   c001b9c6 <IDE::enableIRQs(unsigned char, bool)>
c001bd7b:	83 c4 0c             	add    esp,0xc
c001bd7e:	6a 00                	push   0x0
c001bd80:	6a 01                	push   0x1
c001bd82:	53                   	push   ebx
c001bd83:	e8 3e fc ff ff       	call   c001b9c6 <IDE::enableIRQs(unsigned char, bool)>
c001bd88:	83 c4 10             	add    esp,0x10
c001bd8b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bd92:	74 34                	je     c001bdc8 <IDE::open(int, int, void*)+0x3b8>
c001bd94:	83 ec 0c             	sub    esp,0xc
c001bd97:	53                   	push   ebx
c001bd98:	6a 01                	push   0x1
c001bd9a:	68 8e b9 01 c0       	push   0xc001b98e
c001bd9f:	6a 0e                	push   0xe
c001bda1:	53                   	push   ebx
c001bda2:	e8 2d 08 ff ff       	call   c000c5d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bda7:	83 c4 14             	add    esp,0x14
c001bdaa:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bdb0:	53                   	push   ebx
c001bdb1:	6a 01                	push   0x1
c001bdb3:	68 aa b9 01 c0       	push   0xc001b9aa
c001bdb8:	6a 0f                	push   0xf
c001bdba:	53                   	push   ebx
c001bdbb:	e8 14 08 ff ff       	call   c000c5d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdc0:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bdc6:	eb 38                	jmp    c001be00 <IDE::open(int, int, void*)+0x3f0>
c001bdc8:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bdd2:	83 ec 0c             	sub    esp,0xc
c001bdd5:	53                   	push   ebx
c001bdd6:	6a 00                	push   0x0
c001bdd8:	68 8e b9 01 c0       	push   0xc001b98e
c001bddd:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bde3:	53                   	push   ebx
c001bde4:	e8 eb 07 ff ff       	call   c000c5d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bde9:	83 c4 14             	add    esp,0x14
c001bdec:	53                   	push   ebx
c001bded:	6a 00                	push   0x0
c001bdef:	68 aa b9 01 c0       	push   0xc001b9aa
c001bdf4:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bdfa:	53                   	push   ebx
c001bdfb:	e8 d4 07 ff ff       	call   c000c5d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be00:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be02:	83 c4 20             	add    esp,0x20
c001be05:	83 ec 0c             	sub    esp,0xc
c001be08:	53                   	push   ebx
c001be09:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001be0c:	83 c4 0c             	add    esp,0xc
c001be0f:	6a 07                	push   0x7
c001be11:	6a 00                	push   0x0
c001be13:	53                   	push   ebx
c001be14:	e8 5f fa ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001be19:	83 c4 0c             	add    esp,0xc
c001be1c:	6a 07                	push   0x7
c001be1e:	6a 01                	push   0x1
c001be20:	53                   	push   ebx
c001be21:	e8 52 fa ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001be26:	83 c4 0c             	add    esp,0xc
c001be29:	6a 01                	push   0x1
c001be2b:	6a 00                	push   0x0
c001be2d:	53                   	push   ebx
c001be2e:	e8 93 fb ff ff       	call   c001b9c6 <IDE::enableIRQs(unsigned char, bool)>
c001be33:	83 c4 0c             	add    esp,0xc
c001be36:	6a 01                	push   0x1
c001be38:	6a 01                	push   0x1
c001be3a:	53                   	push   ebx
c001be3b:	e8 86 fb ff ff       	call   c001b9c6 <IDE::enableIRQs(unsigned char, bool)>
c001be40:	83 c4 2c             	add    esp,0x2c
c001be43:	31 c0                	xor    eax,eax
c001be45:	5b                   	pop    ebx
c001be46:	5e                   	pop    esi
c001be47:	5f                   	pop    edi
c001be48:	5d                   	pop    ebp
c001be49:	c3                   	ret    

c001be4a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001be4a:	55                   	push   ebp
c001be4b:	57                   	push   edi
c001be4c:	56                   	push   esi
c001be4d:	53                   	push   ebx
c001be4e:	83 ec 1c             	sub    esp,0x1c
c001be51:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001be55:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be59:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be5d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001be61:	8d 42 f8             	lea    eax,[edx-0x8]
c001be64:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001be68:	3c 03                	cmp    al,0x3
c001be6a:	77 5a                	ja     c001bec6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001be6c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be70:	0f b6 db             	movzx  ebx,bl
c001be73:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001be77:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001be7a:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be7f:	0c 80                	or     al,0x80
c001be81:	50                   	push   eax
c001be82:	6a 0c                	push   0xc
c001be84:	53                   	push   ebx
c001be85:	56                   	push   esi
c001be86:	e8 2d f9 ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be8f:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be94:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be98:	0f b6 d2             	movzx  edx,dl
c001be9b:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be9f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bea1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bea6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001beaa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001beae:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001beb6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001beba:	83 c4 2c             	add    esp,0x2c
c001bebd:	5b                   	pop    ebx
c001bebe:	5e                   	pop    esi
c001bebf:	5f                   	pop    edi
c001bec0:	5d                   	pop    ebp
c001bec1:	e9 f2 f8 ff ff       	jmp    c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bec6:	0f b6 c2             	movzx  eax,dl
c001bec9:	83 f8 07             	cmp    eax,0x7
c001becc:	77 12                	ja     c001bee0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001bece:	0f b6 db             	movzx  ebx,bl
c001bed1:	0f b6 c2             	movzx  eax,dl
c001bed4:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001bedc:	01 c2                	add    edx,eax
c001bede:	eb 2f                	jmp    c001bf0f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bee0:	83 f8 0d             	cmp    eax,0xd
c001bee3:	77 13                	ja     c001bef8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001bee5:	0f b6 db             	movzx  ebx,bl
c001bee8:	0f b6 d2             	movzx  edx,dl
c001beeb:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001bef2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bef6:	eb 17                	jmp    c001bf0f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bef8:	83 f8 15             	cmp    eax,0x15
c001befb:	77 14                	ja     c001bf11 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001befd:	0f b6 db             	movzx  ebx,bl
c001bf00:	0f b6 d2             	movzx  edx,dl
c001bf03:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001bf0b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf0f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bf11:	83 c4 1c             	add    esp,0x1c
c001bf14:	5b                   	pop    ebx
c001bf15:	5e                   	pop    esi
c001bf16:	5f                   	pop    edi
c001bf17:	5d                   	pop    ebp
c001bf18:	c3                   	ret    
c001bf19:	90                   	nop

c001bf1a <IDE::detect()>:
c001bf1a:	55                   	push   ebp
c001bf1b:	57                   	push   edi
c001bf1c:	56                   	push   esi
c001bf1d:	53                   	push   ebx
c001bf1e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bf24:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bf2b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bf32:	0f 85 9e 02 00 00    	jne    c001c1d6 <IDE::detect()+0x2bc>
c001bf38:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bf3f:	31 f6                	xor    esi,esi
c001bf41:	31 ff                	xor    edi,edi
c001bf43:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bf4b:	89 f8                	mov    eax,edi
c001bf4d:	c1 e0 06             	shl    eax,0x6
c001bf50:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bf58:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf5c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf64:	c1 e0 04             	shl    eax,0x4
c001bf67:	83 c8 a0             	or     eax,0xffffffa0
c001bf6a:	0f b6 c0             	movzx  eax,al
c001bf6d:	50                   	push   eax
c001bf6e:	6a 06                	push   0x6
c001bf70:	56                   	push   esi
c001bf71:	53                   	push   ebx
c001bf72:	e8 41 f8 ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf77:	83 c4 0c             	add    esp,0xc
c001bf7a:	6a 0c                	push   0xc
c001bf7c:	56                   	push   esi
c001bf7d:	53                   	push   ebx
c001bf7e:	e8 f5 f8 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001bf83:	83 c4 0c             	add    esp,0xc
c001bf86:	6a 0c                	push   0xc
c001bf88:	56                   	push   esi
c001bf89:	53                   	push   ebx
c001bf8a:	e8 e9 f8 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001bf8f:	83 c4 0c             	add    esp,0xc
c001bf92:	6a 0c                	push   0xc
c001bf94:	56                   	push   esi
c001bf95:	53                   	push   ebx
c001bf96:	e8 dd f8 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001bf9b:	83 c4 0c             	add    esp,0xc
c001bf9e:	6a 0c                	push   0xc
c001bfa0:	56                   	push   esi
c001bfa1:	53                   	push   ebx
c001bfa2:	e8 d1 f8 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001bfa7:	68 ec 00 00 00       	push   0xec
c001bfac:	6a 07                	push   0x7
c001bfae:	56                   	push   esi
c001bfaf:	53                   	push   ebx
c001bfb0:	e8 03 f8 ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfb5:	83 c4 1c             	add    esp,0x1c
c001bfb8:	6a 0c                	push   0xc
c001bfba:	56                   	push   esi
c001bfbb:	53                   	push   ebx
c001bfbc:	e8 b7 f8 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001bfc1:	83 c4 0c             	add    esp,0xc
c001bfc4:	6a 0c                	push   0xc
c001bfc6:	56                   	push   esi
c001bfc7:	53                   	push   ebx
c001bfc8:	e8 ab f8 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001bfcd:	83 c4 0c             	add    esp,0xc
c001bfd0:	6a 0c                	push   0xc
c001bfd2:	56                   	push   esi
c001bfd3:	53                   	push   ebx
c001bfd4:	e8 9f f8 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001bfd9:	83 c4 0c             	add    esp,0xc
c001bfdc:	6a 0c                	push   0xc
c001bfde:	56                   	push   esi
c001bfdf:	53                   	push   ebx
c001bfe0:	e8 93 f8 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001bfe5:	83 c4 0c             	add    esp,0xc
c001bfe8:	6a 0c                	push   0xc
c001bfea:	56                   	push   esi
c001bfeb:	53                   	push   ebx
c001bfec:	e8 87 f8 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001bff1:	83 c4 10             	add    esp,0x10
c001bff4:	84 c0                	test   al,al
c001bff6:	0f 84 61 01 00 00    	je     c001c15d <IDE::detect()+0x243>
c001bffc:	31 ed                	xor    ebp,ebp
c001bffe:	50                   	push   eax
c001bfff:	6a 0c                	push   0xc
c001c001:	56                   	push   esi
c001c002:	53                   	push   ebx
c001c003:	e8 70 f8 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001c008:	83 c4 10             	add    esp,0x10
c001c00b:	a8 01                	test   al,0x1
c001c00d:	0f 85 6b 01 00 00    	jne    c001c17e <IDE::detect()+0x264>
c001c013:	a8 80                	test   al,0x80
c001c015:	75 04                	jne    c001c01b <IDE::detect()+0x101>
c001c017:	a8 08                	test   al,0x8
c001c019:	75 23                	jne    c001c03e <IDE::detect()+0x124>
c001c01b:	45                   	inc    ebp
c001c01c:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c022:	7e da                	jle    c001bffe <IDE::detect()+0xe4>
c001c024:	83 ec 0c             	sub    esp,0xc
c001c027:	6a 32                	push   0x32
c001c029:	e8 b6 9d ff ff       	call   c0015de4 <milliTenthSleep(unsigned int)>
c001c02e:	83 c4 10             	add    esp,0x10
c001c031:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c037:	75 c5                	jne    c001bffe <IDE::detect()+0xe4>
c001c039:	e9 40 01 00 00       	jmp    c001c17e <IDE::detect()+0x264>
c001c03e:	31 c9                	xor    ecx,ecx
c001c040:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c044:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c048:	83 ec 0c             	sub    esp,0xc
c001c04b:	68 80 00 00 00       	push   0x80
c001c050:	55                   	push   ebp
c001c051:	6a 00                	push   0x0
c001c053:	56                   	push   esi
c001c054:	53                   	push   ebx
c001c055:	e8 f0 fd ff ff       	call   c001be4a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c05a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c05f:	89 f8                	mov    eax,edi
c001c061:	c1 e0 06             	shl    eax,0x6
c001c064:	01 d8                	add    eax,ebx
c001c066:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c06d:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c074:	89 d1                	mov    ecx,edx
c001c076:	89 f2                	mov    edx,esi
c001c078:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c07e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c082:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c088:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c08c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c093:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c09b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c0a2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c0aa:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c0b0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c0b7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c0bd:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c0c1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c0c5:	83 c4 20             	add    esp,0x20
c001c0c8:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c0cb:	83 c5 02             	add    ebp,0x2
c001c0ce:	83 c0 02             	add    eax,0x2
c001c0d1:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c0d7:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c0da:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c0e0:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c0e4:	75 e2                	jne    c001c0c8 <IDE::detect()+0x1ae>
c001c0e6:	89 f8                	mov    eax,edi
c001c0e8:	c1 e0 06             	shl    eax,0x6
c001c0eb:	01 d8                	add    eax,ebx
c001c0ed:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c0f4:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c0fb:	c1 ea 09             	shr    edx,0x9
c001c0fe:	83 e2 01             	and    edx,0x1
c001c101:	80 e1 01             	and    cl,0x1
c001c104:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c10a:	75 22                	jne    c001c12e <IDE::detect()+0x214>
c001c10c:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c113:	74 47                	je     c001c15c <IDE::detect()+0x242>
c001c115:	83 ec 0c             	sub    esp,0xc
c001c118:	68 7c 01 00 00       	push   0x17c
c001c11d:	e8 b1 b9 fe ff       	call   c0007ad3 <malloc>
c001c122:	89 04 24             	mov    DWORD PTR [esp],eax
c001c125:	89 c5                	mov    ebp,eax
c001c127:	e8 16 05 00 00       	call   c001c642 <ATA::ATA()>
c001c12c:	eb 17                	jmp    c001c145 <IDE::detect()+0x22b>
c001c12e:	83 ec 0c             	sub    esp,0xc
c001c131:	68 84 01 00 00       	push   0x184
c001c136:	e8 98 b9 fe ff       	call   c0007ad3 <malloc>
c001c13b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c13e:	89 c5                	mov    ebp,eax
c001c140:	e8 6f 0e 00 00       	call   c001cfb4 <ATAPI::ATAPI()>
c001c145:	5a                   	pop    edx
c001c146:	59                   	pop    ecx
c001c147:	55                   	push   ebp
c001c148:	53                   	push   ebx
c001c149:	e8 da 04 ff ff       	call   c000c628 <Device::addChild(Device*)>
c001c14e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c151:	53                   	push   ebx
c001c152:	57                   	push   edi
c001c153:	6a 00                	push   0x0
c001c155:	55                   	push   ebp
c001c156:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c159:	83 c4 20             	add    esp,0x20
c001c15c:	47                   	inc    edi
c001c15d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c162:	74 0d                	je     c001c171 <IDE::detect()+0x257>
c001c164:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c16c:	e9 da fd ff ff       	jmp    c001bf4b <IDE::detect()+0x31>
c001c171:	4e                   	dec    esi
c001c172:	74 62                	je     c001c1d6 <IDE::detect()+0x2bc>
c001c174:	be 01 00 00 00       	mov    esi,0x1
c001c179:	e9 c5 fd ff ff       	jmp    c001bf43 <IDE::detect()+0x29>
c001c17e:	50                   	push   eax
c001c17f:	6a 04                	push   0x4
c001c181:	56                   	push   esi
c001c182:	53                   	push   ebx
c001c183:	e8 f0 f6 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001c188:	83 c4 0c             	add    esp,0xc
c001c18b:	6a 05                	push   0x5
c001c18d:	56                   	push   esi
c001c18e:	53                   	push   ebx
c001c18f:	89 c5                	mov    ebp,eax
c001c191:	e8 e2 f6 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001c196:	89 e9                	mov    ecx,ebp
c001c198:	83 c4 10             	add    esp,0x10
c001c19b:	0f b6 e9             	movzx  ebp,cl
c001c19e:	83 fd 14             	cmp    ebp,0x14
c001c1a1:	74 2d                	je     c001c1d0 <IDE::detect()+0x2b6>
c001c1a3:	83 fd 69             	cmp    ebp,0x69
c001c1a6:	75 b5                	jne    c001c15d <IDE::detect()+0x243>
c001c1a8:	3c 96                	cmp    al,0x96
c001c1aa:	75 b1                	jne    c001c15d <IDE::detect()+0x243>
c001c1ac:	68 a1 00 00 00       	push   0xa1
c001c1b1:	6a 07                	push   0x7
c001c1b3:	56                   	push   esi
c001c1b4:	53                   	push   ebx
c001c1b5:	e8 fe f5 ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1ba:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c1c1:	e8 1e 9c ff ff       	call   c0015de4 <milliTenthSleep(unsigned int)>
c001c1c6:	83 c4 10             	add    esp,0x10
c001c1c9:	b1 01                	mov    cl,0x1
c001c1cb:	e9 70 fe ff ff       	jmp    c001c040 <IDE::detect()+0x126>
c001c1d0:	3c eb                	cmp    al,0xeb
c001c1d2:	75 cf                	jne    c001c1a3 <IDE::detect()+0x289>
c001c1d4:	eb d6                	jmp    c001c1ac <IDE::detect()+0x292>
c001c1d6:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c1dc:	5b                   	pop    ebx
c001c1dd:	5e                   	pop    esi
c001c1de:	5f                   	pop    edi
c001c1df:	5d                   	pop    ebp
c001c1e0:	c3                   	ret    
c001c1e1:	90                   	nop

c001c1e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c1e2:	55                   	push   ebp
c001c1e3:	57                   	push   edi
c001c1e4:	56                   	push   esi
c001c1e5:	53                   	push   ebx
c001c1e6:	83 ec 1c             	sub    esp,0x1c
c001c1e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c1ed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c1f1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c1f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c1fd:	88 c3                	mov    bl,al
c001c1ff:	25 ff 00 00 00       	and    eax,0xff
c001c204:	0f 84 88 00 00 00    	je     c001c292 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c20a:	83 ec 0c             	sub    esp,0xc
c001c20d:	89 c7                	mov    edi,eax
c001c20f:	68 8b 2b 02 c0       	push   0xc0022b8b
c001c214:	e8 f1 e6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c219:	83 c4 10             	add    esp,0x10
c001c21c:	83 ff 01             	cmp    edi,0x1
c001c21f:	74 6b                	je     c001c28c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c221:	83 ff 02             	cmp    edi,0x2
c001c224:	75 58                	jne    c001c27e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c226:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c22b:	50                   	push   eax
c001c22c:	6a 01                	push   0x1
c001c22e:	01 ff                	add    edi,edi
c001c230:	09 fe                	or     esi,edi
c001c232:	89 f0                	mov    eax,esi
c001c234:	0f b6 f0             	movzx  esi,al
c001c237:	c1 e6 06             	shl    esi,0x6
c001c23a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c242:	50                   	push   eax
c001c243:	55                   	push   ebp
c001c244:	e8 2f f6 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001c249:	83 c4 10             	add    esp,0x10
c001c24c:	a8 01                	test   al,0x1
c001c24e:	74 02                	je     c001c252 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c250:	b3 07                	mov    bl,0x7
c001c252:	a8 02                	test   al,0x2
c001c254:	74 02                	je     c001c258 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c256:	b3 03                	mov    bl,0x3
c001c258:	a8 04                	test   al,0x4
c001c25a:	74 02                	je     c001c25e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c25c:	b3 14                	mov    bl,0x14
c001c25e:	a8 08                	test   al,0x8
c001c260:	74 02                	je     c001c264 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c262:	b3 03                	mov    bl,0x3
c001c264:	a8 10                	test   al,0x10
c001c266:	74 02                	je     c001c26a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c268:	b3 15                	mov    bl,0x15
c001c26a:	a8 20                	test   al,0x20
c001c26c:	74 02                	je     c001c270 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c26e:	b3 03                	mov    bl,0x3
c001c270:	a8 40                	test   al,0x40
c001c272:	74 02                	je     c001c276 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c274:	b3 16                	mov    bl,0x16
c001c276:	a8 80                	test   al,0x80
c001c278:	74 18                	je     c001c292 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c27a:	b3 0d                	mov    bl,0xd
c001c27c:	eb 14                	jmp    c001c292 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c27e:	83 ff 03             	cmp    edi,0x3
c001c281:	74 0d                	je     c001c290 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c283:	83 ff 04             	cmp    edi,0x4
c001c286:	75 0a                	jne    c001c292 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c288:	b3 08                	mov    bl,0x8
c001c28a:	eb 06                	jmp    c001c292 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c28c:	b3 13                	mov    bl,0x13
c001c28e:	eb 02                	jmp    c001c292 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c290:	b3 17                	mov    bl,0x17
c001c292:	83 c4 1c             	add    esp,0x1c
c001c295:	88 d8                	mov    al,bl
c001c297:	5b                   	pop    ebx
c001c298:	5e                   	pop    esi
c001c299:	5f                   	pop    edi
c001c29a:	5d                   	pop    ebp
c001c29b:	c3                   	ret    

c001c29c <IDE::polling(unsigned char, unsigned int)>:
c001c29c:	57                   	push   edi
c001c29d:	56                   	push   esi
c001c29e:	53                   	push   ebx
c001c29f:	bb 04 00 00 00       	mov    ebx,0x4
c001c2a4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c2a8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c2ad:	52                   	push   edx
c001c2ae:	6a 0c                	push   0xc
c001c2b0:	56                   	push   esi
c001c2b1:	57                   	push   edi
c001c2b2:	e8 c1 f5 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001c2b7:	83 c4 10             	add    esp,0x10
c001c2ba:	4b                   	dec    ebx
c001c2bb:	75 f0                	jne    c001c2ad <IDE::polling(unsigned char, unsigned int)+0x11>
c001c2bd:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c2c2:	50                   	push   eax
c001c2c3:	6a 0c                	push   0xc
c001c2c5:	56                   	push   esi
c001c2c6:	57                   	push   edi
c001c2c7:	e8 ac f5 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001c2cc:	83 c4 10             	add    esp,0x10
c001c2cf:	a8 01                	test   al,0x1
c001c2d1:	75 17                	jne    c001c2ea <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c2d3:	a8 20                	test   al,0x20
c001c2d5:	75 0f                	jne    c001c2e6 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c2d7:	4b                   	dec    ebx
c001c2d8:	74 10                	je     c001c2ea <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c2da:	a8 80                	test   al,0x80
c001c2dc:	75 e4                	jne    c001c2c2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c2de:	a8 08                	test   al,0x8
c001c2e0:	74 e0                	je     c001c2c2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c2e2:	31 c0                	xor    eax,eax
c001c2e4:	eb 06                	jmp    c001c2ec <IDE::polling(unsigned char, unsigned int)+0x50>
c001c2e6:	b0 01                	mov    al,0x1
c001c2e8:	eb 02                	jmp    c001c2ec <IDE::polling(unsigned char, unsigned int)+0x50>
c001c2ea:	b0 02                	mov    al,0x2
c001c2ec:	5b                   	pop    ebx
c001c2ed:	5e                   	pop    esi
c001c2ee:	5f                   	pop    edi
c001c2ef:	c3                   	ret    

c001c2f0 <SATABus::close(int, int, void*)>:
c001c2f0:	31 c0                	xor    eax,eax
c001c2f2:	c3                   	ret    
c001c2f3:	90                   	nop

c001c2f4 <SATABus::detect()>:
c001c2f4:	c3                   	ret    
c001c2f5:	90                   	nop

c001c2f6 <SATABus::SATABus()>:
c001c2f6:	83 ec 0c             	sub    esp,0xc
c001c2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2fd:	83 ec 08             	sub    esp,0x8
c001c300:	68 c4 2b 02 c0       	push   0xc0022bc4
c001c305:	50                   	push   eax
c001c306:	e8 61 06 ff ff       	call   c000c96c <HardDiskController::HardDiskController(char const*)>
c001c30b:	83 c4 10             	add    esp,0x10
c001c30e:	ba f0 2b 02 c0       	mov    edx,0xc0022bf0
c001c313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c317:	89 10                	mov    DWORD PTR [eax],edx
c001c319:	83 ec 0c             	sub    esp,0xc
c001c31c:	6a 50                	push   0x50
c001c31e:	e8 8e bb fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c323:	83 c4 10             	add    esp,0x10
c001c326:	89 c2                	mov    edx,eax
c001c328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c32c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c332:	83 ec 0c             	sub    esp,0xc
c001c335:	6a 50                	push   0x50
c001c337:	e8 b9 d2 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c33c:	83 c4 10             	add    esp,0x10
c001c33f:	89 c2                	mov    edx,eax
c001c341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c345:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c34b:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c350:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c354:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c35a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c35e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c364:	83 ec 0c             	sub    esp,0xc
c001c367:	6a 03                	push   0x3
c001c369:	6a 50                	push   0x50
c001c36b:	51                   	push   ecx
c001c36c:	52                   	push   edx
c001c36d:	50                   	push   eax
c001c36e:	e8 95 db fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c373:	83 c4 20             	add    esp,0x20
c001c376:	90                   	nop
c001c377:	83 c4 0c             	add    esp,0xc
c001c37a:	c3                   	ret    
c001c37b:	90                   	nop

c001c37c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c37c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c380:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c383:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c386:	09 c2                	or     edx,eax
c001c388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c38c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c392:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c394:	31 c0                	xor    eax,eax
c001c396:	c1 e9 08             	shr    ecx,0x8
c001c399:	83 e1 0f             	and    ecx,0xf
c001c39c:	39 c8                	cmp    eax,ecx
c001c39e:	74 0a                	je     c001c3aa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c3a0:	f6 c2 01             	test   dl,0x1
c001c3a3:	74 08                	je     c001c3ad <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c3a5:	d1 ea                	shr    edx,1
c001c3a7:	40                   	inc    eax
c001c3a8:	eb f2                	jmp    c001c39c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c3aa:	83 c8 ff             	or     eax,0xffffffff
c001c3ad:	c3                   	ret    

c001c3ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c3ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3b2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c3b5:	89 c2                	mov    edx,eax
c001c3b7:	c1 ea 08             	shr    edx,0x8
c001c3ba:	83 e2 0f             	and    edx,0xf
c001c3bd:	4a                   	dec    edx
c001c3be:	75 32                	jne    c001c3f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c3c0:	83 e0 0f             	and    eax,0xf
c001c3c3:	83 f8 03             	cmp    eax,0x3
c001c3c6:	75 2a                	jne    c001c3f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c3c8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c3cb:	b8 02 00 00 00       	mov    eax,0x2
c001c3d0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c3d6:	74 1c                	je     c001c3f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c3d8:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c3de:	b8 04 00 00 00       	mov    eax,0x4
c001c3e3:	74 0f                	je     c001c3f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c3e5:	31 c0                	xor    eax,eax
c001c3e7:	83 fa 03             	cmp    edx,0x3
c001c3ea:	0f 94 c0             	sete   al
c001c3ed:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c3f1:	c3                   	ret    
c001c3f2:	31 c0                	xor    eax,eax
c001c3f4:	c3                   	ret    
c001c3f5:	90                   	nop

c001c3f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c3f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3fa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3fd:	0f ba e2 0f          	bt     edx,0xf
c001c401:	72 f7                	jb     c001c3fa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c403:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c406:	83 ca 10             	or     edx,0x10
c001c409:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c40c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c40f:	83 ca 01             	or     edx,0x1
c001c412:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c415:	c3                   	ret    

c001c416 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c416:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c41a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c41d:	83 e2 fe             	and    edx,0xfffffffe
c001c420:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c423:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c426:	83 e2 ef             	and    edx,0xffffffef
c001c429:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c42c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c42f:	0f ba e2 0e          	bt     edx,0xe
c001c433:	72 f7                	jb     c001c42c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c435:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c438:	0f ba e2 0f          	bt     edx,0xf
c001c43c:	72 ee                	jb     c001c42c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c43e:	c3                   	ret    
c001c43f:	90                   	nop

c001c440 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c440:	55                   	push   ebp
c001c441:	57                   	push   edi
c001c442:	56                   	push   esi
c001c443:	53                   	push   ebx
c001c444:	83 ec 1c             	sub    esp,0x1c
c001c447:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c44b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c44f:	53                   	push   ebx
c001c450:	57                   	push   edi
c001c451:	e8 c0 ff ff ff       	call   c001c416 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c456:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c45a:	83 ec 0c             	sub    esp,0xc
c001c45d:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c463:	c1 e5 0a             	shl    ebp,0xa
c001c466:	01 e8                	add    eax,ebp
c001c468:	89 03                	mov    DWORD PTR [ebx],eax
c001c46a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c46c:	68 00 04 00 00       	push   0x400
c001c471:	6a 00                	push   0x0
c001c473:	50                   	push   eax
c001c474:	e8 77 40 fe ff       	call   c00004f0 <memset>
c001c479:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c47f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c483:	83 c4 1c             	add    esp,0x1c
c001c486:	01 e8                	add    eax,ebp
c001c488:	89 03                	mov    DWORD PTR [ebx],eax
c001c48a:	c1 e6 08             	shl    esi,0x8
c001c48d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c494:	81 c6 00 80 00 00    	add    esi,0x8000
c001c49a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c4a0:	01 f0                	add    eax,esi
c001c4a2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c4a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c4a8:	68 00 01 00 00       	push   0x100
c001c4ad:	6a 00                	push   0x0
c001c4af:	50                   	push   eax
c001c4b0:	e8 3b 40 fe ff       	call   c00004f0 <memset>
c001c4b5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c4bb:	31 d2                	xor    edx,edx
c001c4bd:	01 f0                	add    eax,esi
c001c4bf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c4c2:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c4c9:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c4cf:	01 ee                	add    esi,ebp
c001c4d1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c4d5:	83 c4 10             	add    esp,0x10
c001c4d8:	c1 e5 0d             	shl    ebp,0xd
c001c4db:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c4e1:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c4e7:	83 c6 20             	add    esi,0x20
c001c4ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4ee:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c4f4:	01 e8                	add    eax,ebp
c001c4f6:	01 d0                	add    eax,edx
c001c4f8:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c4fb:	52                   	push   edx
c001c4fc:	68 00 01 00 00       	push   0x100
c001c501:	6a 00                	push   0x0
c001c503:	50                   	push   eax
c001c504:	e8 e7 3f fe ff       	call   c00004f0 <memset>
c001c509:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c50f:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c516:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c51a:	83 c4 10             	add    esp,0x10
c001c51d:	01 e8                	add    eax,ebp
c001c51f:	01 d0                	add    eax,edx
c001c521:	81 c2 00 01 00 00    	add    edx,0x100
c001c527:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c52a:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c530:	75 af                	jne    c001c4e1 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c532:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c539:	50                   	push   eax
c001c53a:	50                   	push   eax
c001c53b:	53                   	push   ebx
c001c53c:	57                   	push   edi
c001c53d:	e8 b4 fe ff ff       	call   c001c3f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c542:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c549:	83 c4 2c             	add    esp,0x2c
c001c54c:	5b                   	pop    ebx
c001c54d:	5e                   	pop    esi
c001c54e:	5f                   	pop    edi
c001c54f:	5d                   	pop    ebp
c001c550:	c3                   	ret    
c001c551:	90                   	nop

c001c552 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c552:	55                   	push   ebp
c001c553:	57                   	push   edi
c001c554:	56                   	push   esi
c001c555:	53                   	push   ebx
c001c556:	31 db                	xor    ebx,ebx
c001c558:	83 ec 0c             	sub    esp,0xc
c001c55b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c55f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c563:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c566:	f7 c7 01 00 00 00    	test   edi,0x1
c001c56c:	74 7a                	je     c001c5e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c56e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c572:	89 d8                	mov    eax,ebx
c001c574:	c1 e0 07             	shl    eax,0x7
c001c577:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c57e:	55                   	push   ebp
c001c57f:	56                   	push   esi
c001c580:	e8 29 fe ff ff       	call   c001c3ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c585:	5a                   	pop    edx
c001c586:	59                   	pop    ecx
c001c587:	83 f8 01             	cmp    eax,0x1
c001c58a:	75 21                	jne    c001c5ad <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c58c:	50                   	push   eax
c001c58d:	53                   	push   ebx
c001c58e:	55                   	push   ebp
c001c58f:	56                   	push   esi
c001c590:	e8 ab fe ff ff       	call   c001c440 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c595:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c59c:	e8 32 b5 fe ff       	call   c0007ad3 <malloc>
c001c5a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5a4:	89 c5                	mov    ebp,eax
c001c5a6:	e8 c1 10 00 00       	call   c001d66c <SATA::SATA()>
c001c5ab:	eb 24                	jmp    c001c5d1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c5ad:	83 f8 04             	cmp    eax,0x4
c001c5b0:	75 36                	jne    c001c5e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c5b2:	51                   	push   ecx
c001c5b3:	53                   	push   ebx
c001c5b4:	55                   	push   ebp
c001c5b5:	56                   	push   esi
c001c5b6:	e8 85 fe ff ff       	call   c001c440 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c5bb:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c5c2:	e8 0c b5 fe ff       	call   c0007ad3 <malloc>
c001c5c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5ca:	89 c5                	mov    ebp,eax
c001c5cc:	e8 f5 17 00 00       	call   c001ddc6 <SATAPI::SATAPI()>
c001c5d1:	58                   	pop    eax
c001c5d2:	5a                   	pop    edx
c001c5d3:	55                   	push   ebp
c001c5d4:	56                   	push   esi
c001c5d5:	e8 4e 00 ff ff       	call   c000c628 <Device::addChild(Device*)>
c001c5da:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c5dd:	56                   	push   esi
c001c5de:	6a 00                	push   0x0
c001c5e0:	53                   	push   ebx
c001c5e1:	55                   	push   ebp
c001c5e2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c5e5:	83 c4 20             	add    esp,0x20
c001c5e8:	d1 ef                	shr    edi,1
c001c5ea:	43                   	inc    ebx
c001c5eb:	83 fb 20             	cmp    ebx,0x20
c001c5ee:	0f 85 72 ff ff ff    	jne    c001c566 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c5f4:	83 c4 0c             	add    esp,0xc
c001c5f7:	5b                   	pop    ebx
c001c5f8:	5e                   	pop    esi
c001c5f9:	5f                   	pop    edi
c001c5fa:	5d                   	pop    ebp
c001c5fb:	c3                   	ret    

c001c5fc <SATABus::open(int, int, void*)>:
c001c5fc:	83 ec 14             	sub    esp,0x14
c001c5ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c603:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c609:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c60f:	52                   	push   edx
c001c610:	50                   	push   eax
c001c611:	e8 3c ff ff ff       	call   c001c552 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c616:	31 c0                	xor    eax,eax
c001c618:	83 c4 1c             	add    esp,0x1c
c001c61b:	c3                   	ret    

c001c61c <ATA::close(int, int, void*)>:
c001c61c:	83 ec 0c             	sub    esp,0xc
c001c61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c623:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c629:	85 c0                	test   eax,eax
c001c62b:	74 0c                	je     c001c639 <ATA::close(int, int, void*)+0x1d>
c001c62d:	8b 10                	mov    edx,DWORD PTR [eax]
c001c62f:	83 ec 0c             	sub    esp,0xc
c001c632:	50                   	push   eax
c001c633:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c636:	83 c4 10             	add    esp,0x10
c001c639:	31 c0                	xor    eax,eax
c001c63b:	83 c4 0c             	add    esp,0xc
c001c63e:	c3                   	ret    
c001c63f:	90                   	nop

c001c640 <ATA::powerSaving(PowerSavingLevel)>:
c001c640:	c3                   	ret    
c001c641:	90                   	nop

c001c642 <ATA::ATA()>:
c001c642:	83 ec 0c             	sub    esp,0xc
c001c645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c649:	83 ec 04             	sub    esp,0x4
c001c64c:	68 00 02 00 00       	push   0x200
c001c651:	68 bd 2c 02 c0       	push   0xc0022cbd
c001c656:	50                   	push   eax
c001c657:	e8 9a 03 ff ff       	call   c000c9f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c65c:	83 c4 10             	add    esp,0x10
c001c65f:	ba 30 2c 02 c0       	mov    edx,0xc0022c30
c001c664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c668:	89 10                	mov    DWORD PTR [eax],edx
c001c66a:	90                   	nop
c001c66b:	83 c4 0c             	add    esp,0xc
c001c66e:	c3                   	ret    
c001c66f:	90                   	nop

c001c670 <ATA::flush(bool)>:
c001c670:	53                   	push   ebx
c001c671:	83 ec 08             	sub    esp,0x8
c001c674:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c679:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c67d:	83 f8 01             	cmp    eax,0x1
c001c680:	19 c0                	sbb    eax,eax
c001c682:	83 e0 fd             	and    eax,0xfffffffd
c001c685:	05 ea 00 00 00       	add    eax,0xea
c001c68a:	50                   	push   eax
c001c68b:	6a 07                	push   0x7
c001c68d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c694:	50                   	push   eax
c001c695:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c69b:	e8 18 f1 ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6a0:	83 c4 0c             	add    esp,0xc
c001c6a3:	6a 00                	push   0x0
c001c6a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6ac:	50                   	push   eax
c001c6ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6b3:	e8 e4 fb ff ff       	call   c001c29c <IDE::polling(unsigned char, unsigned int)>
c001c6b8:	83 c4 18             	add    esp,0x18
c001c6bb:	5b                   	pop    ebx
c001c6bc:	c3                   	ret    
c001c6bd:	90                   	nop

c001c6be <ATA::readyForCommand()>:
c001c6be:	56                   	push   esi
c001c6bf:	53                   	push   ebx
c001c6c0:	53                   	push   ebx
c001c6c1:	31 db                	xor    ebx,ebx
c001c6c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6c7:	51                   	push   ecx
c001c6c8:	6a 0c                	push   0xc
c001c6ca:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c6d1:	50                   	push   eax
c001c6d2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c6d8:	e8 9b f1 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001c6dd:	83 c4 10             	add    esp,0x10
c001c6e0:	a8 88                	test   al,0x88
c001c6e2:	74 1f                	je     c001c703 <ATA::readyForCommand()+0x45>
c001c6e4:	43                   	inc    ebx
c001c6e5:	83 fb 63             	cmp    ebx,0x63
c001c6e8:	7e dd                	jle    c001c6c7 <ATA::readyForCommand()+0x9>
c001c6ea:	83 ec 0c             	sub    esp,0xc
c001c6ed:	6a 0a                	push   0xa
c001c6ef:	e8 f0 96 ff ff       	call   c0015de4 <milliTenthSleep(unsigned int)>
c001c6f4:	83 c4 10             	add    esp,0x10
c001c6f7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c6fd:	75 c8                	jne    c001c6c7 <ATA::readyForCommand()+0x9>
c001c6ff:	31 c0                	xor    eax,eax
c001c701:	eb 02                	jmp    c001c705 <ATA::readyForCommand()+0x47>
c001c703:	b0 01                	mov    al,0x1
c001c705:	5a                   	pop    edx
c001c706:	5b                   	pop    ebx
c001c707:	5e                   	pop    esi
c001c708:	c3                   	ret    
c001c709:	90                   	nop

c001c70a <ATA::access(unsigned long long, int, void*, bool)>:
c001c70a:	55                   	push   ebp
c001c70b:	57                   	push   edi
c001c70c:	56                   	push   esi
c001c70d:	53                   	push   ebx
c001c70e:	83 ec 2c             	sub    esp,0x2c
c001c711:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c715:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c719:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c71d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c721:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c725:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c729:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c72d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c733:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c737:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c73d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c741:	c1 e0 06             	shl    eax,0x6
c001c744:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c74c:	74 5b                	je     c001c7a9 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c74e:	89 fa                	mov    edx,edi
c001c750:	89 f0                	mov    eax,esi
c001c752:	c1 ea 1c             	shr    edx,0x1c
c001c755:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c759:	89 d1                	mov    ecx,edx
c001c75b:	09 c1                	or     ecx,eax
c001c75d:	74 25                	je     c001c784 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c75f:	31 ed                	xor    ebp,ebp
c001c761:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c768:	89 fa                	mov    edx,edi
c001c76a:	89 f0                	mov    eax,esi
c001c76c:	0f ad d0             	shrd   eax,edx,cl
c001c76f:	d3 ea                	shr    edx,cl
c001c771:	f6 c1 20             	test   cl,0x20
c001c774:	74 02                	je     c001c778 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c776:	89 d0                	mov    eax,edx
c001c778:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c77c:	45                   	inc    ebp
c001c77d:	83 fd 06             	cmp    ebp,0x6
c001c780:	75 df                	jne    c001c761 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c782:	eb 71                	jmp    c001c7f5 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c784:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c789:	89 f0                	mov    eax,esi
c001c78b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c792:	0f ac f8 10          	shrd   eax,edi,0x10
c001c796:	bf 01 00 00 00       	mov    edi,0x1
c001c79b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c79f:	c1 ee 18             	shr    esi,0x18
c001c7a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c7a7:	eb 53                	jmp    c001c7fc <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c7a9:	6a 00                	push   0x0
c001c7ab:	6a 3f                	push   0x3f
c001c7ad:	57                   	push   edi
c001c7ae:	56                   	push   esi
c001c7af:	e8 cc 2a 00 00       	call   c001f280 <__umoddi3>
c001c7b4:	83 c4 10             	add    esp,0x10
c001c7b7:	40                   	inc    eax
c001c7b8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c7bc:	6a 00                	push   0x0
c001c7be:	68 f0 03 00 00       	push   0x3f0
c001c7c3:	57                   	push   edi
c001c7c4:	56                   	push   esi
c001c7c5:	e8 b6 29 00 00       	call   c001f180 <__udivdi3>
c001c7ca:	83 c4 10             	add    esp,0x10
c001c7cd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c7d2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c7d9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c7de:	6a 00                	push   0x0
c001c7e0:	6a 3f                	push   0x3f
c001c7e2:	57                   	push   edi
c001c7e3:	31 ff                	xor    edi,edi
c001c7e5:	56                   	push   esi
c001c7e6:	e8 95 29 00 00       	call   c001f180 <__udivdi3>
c001c7eb:	83 c4 10             	add    esp,0x10
c001c7ee:	83 e0 0f             	and    eax,0xf
c001c7f1:	89 c6                	mov    esi,eax
c001c7f3:	eb 07                	jmp    c001c7fc <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c7f5:	31 f6                	xor    esi,esi
c001c7f7:	bf 02 00 00 00       	mov    edi,0x2
c001c7fc:	50                   	push   eax
c001c7fd:	6a 00                	push   0x0
c001c7ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c806:	50                   	push   eax
c001c807:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c80b:	e8 b6 f1 ff ff       	call   c001b9c6 <IDE::enableIRQs(unsigned char, bool)>
c001c810:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c813:	e8 a6 fe ff ff       	call   c001c6be <ATA::readyForCommand()>
c001c818:	83 c4 10             	add    esp,0x10
c001c81b:	84 c0                	test   al,al
c001c81d:	75 0a                	jne    c001c829 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c81f:	be 01 00 00 00       	mov    esi,0x1
c001c824:	e9 9b 02 00 00       	jmp    c001cac4 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c829:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c82f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c835:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c83c:	c1 e0 04             	shl    eax,0x4
c001c83f:	09 c6                	or     esi,eax
c001c841:	f7 c7 03 00 00 00    	test   edi,0x3
c001c847:	75 05                	jne    c001c84e <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c849:	83 ce a0             	or     esi,0xffffffa0
c001c84c:	eb 03                	jmp    c001c851 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c84e:	83 ce e0             	or     esi,0xffffffe0
c001c851:	89 f0                	mov    eax,esi
c001c853:	0f b6 f0             	movzx  esi,al
c001c856:	56                   	push   esi
c001c857:	6a 06                	push   0x6
c001c859:	51                   	push   ecx
c001c85a:	52                   	push   edx
c001c85b:	e8 58 ef ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c860:	83 c4 10             	add    esp,0x10
c001c863:	6a 00                	push   0x0
c001c865:	6a 01                	push   0x1
c001c867:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c86e:	50                   	push   eax
c001c86f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c875:	e8 3e ef ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c87a:	89 f8                	mov    eax,edi
c001c87c:	83 c4 10             	add    esp,0x10
c001c87f:	0f b6 f0             	movzx  esi,al
c001c882:	83 fe 02             	cmp    esi,0x2
c001c885:	75 6e                	jne    c001c8f5 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c887:	6a 00                	push   0x0
c001c889:	6a 08                	push   0x8
c001c88b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c892:	50                   	push   eax
c001c893:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c899:	e8 1a ef ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c89e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c8a3:	50                   	push   eax
c001c8a4:	6a 09                	push   0x9
c001c8a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8ad:	50                   	push   eax
c001c8ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8b4:	e8 ff ee ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8b9:	83 c4 20             	add    esp,0x20
c001c8bc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c8c1:	50                   	push   eax
c001c8c2:	6a 0a                	push   0xa
c001c8c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8cb:	50                   	push   eax
c001c8cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8d2:	e8 e1 ee ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8d7:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c8dc:	50                   	push   eax
c001c8dd:	6a 0b                	push   0xb
c001c8df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8e6:	50                   	push   eax
c001c8e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8ed:	e8 c6 ee ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f2:	83 c4 20             	add    esp,0x20
c001c8f5:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c8fa:	50                   	push   eax
c001c8fb:	6a 02                	push   0x2
c001c8fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c904:	50                   	push   eax
c001c905:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c90b:	e8 a8 ee ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c910:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c915:	50                   	push   eax
c001c916:	6a 03                	push   0x3
c001c918:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c91f:	50                   	push   eax
c001c920:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c926:	e8 8d ee ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c92b:	83 c4 20             	add    esp,0x20
c001c92e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c933:	50                   	push   eax
c001c934:	6a 04                	push   0x4
c001c936:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c93d:	50                   	push   eax
c001c93e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c944:	e8 6f ee ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c949:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c94e:	50                   	push   eax
c001c94f:	6a 05                	push   0x5
c001c951:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c958:	50                   	push   eax
c001c959:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c95f:	e8 54 ee ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c964:	83 c4 20             	add    esp,0x20
c001c967:	83 fe 02             	cmp    esi,0x2
c001c96a:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001c96f:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001c974:	85 c9                	test   ecx,ecx
c001c976:	74 07                	je     c001c97f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c978:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c97d:	75 47                	jne    c001c9c6 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001c97f:	89 f8                	mov    eax,edi
c001c981:	0f b6 f8             	movzx  edi,al
c001c984:	31 c0                	xor    eax,eax
c001c986:	83 ff 02             	cmp    edi,0x2
c001c989:	0f 95 c0             	setne  al
c001c98c:	89 c6                	mov    esi,eax
c001c98e:	74 0c                	je     c001c99c <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001c990:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c995:	b8 30 00 00 00       	mov    eax,0x30
c001c99a:	75 2f                	jne    c001c9cb <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c99c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9a0:	83 f2 01             	xor    edx,0x1
c001c9a3:	85 c9                	test   ecx,ecx
c001c9a5:	74 09                	je     c001c9b0 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001c9a7:	84 d2                	test   dl,dl
c001c9a9:	b8 24 00 00 00       	mov    eax,0x24
c001c9ae:	75 1b                	jne    c001c9cb <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c9b0:	85 f6                	test   esi,esi
c001c9b2:	0f 84 67 fe ff ff    	je     c001c81f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c9b8:	84 d2                	test   dl,dl
c001c9ba:	b8 20 00 00 00       	mov    eax,0x20
c001c9bf:	75 0a                	jne    c001c9cb <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c9c1:	e9 59 fe ff ff       	jmp    c001c81f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c9c6:	b8 34 00 00 00       	mov    eax,0x34
c001c9cb:	50                   	push   eax
c001c9cc:	6a 07                	push   0x7
c001c9ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9d5:	50                   	push   eax
c001c9d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9dc:	e8 d7 ed ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9e1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c9e5:	83 c4 10             	add    esp,0x10
c001c9e8:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001c9ed:	85 f6                	test   esi,esi
c001c9ef:	0f 84 b5 00 00 00    	je     c001caaa <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001c9f5:	50                   	push   eax
c001c9f6:	6a 01                	push   0x1
c001c9f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9ff:	50                   	push   eax
c001ca00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca06:	e8 91 f8 ff ff       	call   c001c29c <IDE::polling(unsigned char, unsigned int)>
c001ca0b:	83 c4 10             	add    esp,0x10
c001ca0e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ca14:	0f b6 c0             	movzx  eax,al
c001ca17:	85 c0                	test   eax,eax
c001ca19:	74 1f                	je     c001ca3a <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001ca1b:	50                   	push   eax
c001ca1c:	89 c6                	mov    esi,eax
c001ca1e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ca25:	0f b6 d2             	movzx  edx,dl
c001ca28:	50                   	push   eax
c001ca29:	52                   	push   edx
c001ca2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca30:	e8 ad f7 ff ff       	call   c001c1e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ca35:	e9 87 00 00 00       	jmp    c001cac1 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001ca3a:	85 ed                	test   ebp,ebp
c001ca3c:	74 3b                	je     c001ca79 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001ca3e:	31 ff                	xor    edi,edi
c001ca40:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ca44:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001ca48:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001ca4d:	50                   	push   eax
c001ca4e:	50                   	push   eax
c001ca4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca56:	50                   	push   eax
c001ca57:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca5d:	e8 44 ed ff ff       	call   c001b7a6 <IDE::getBase(unsigned char)>
c001ca62:	89 c2                	mov    edx,eax
c001ca64:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001ca69:	66 ef                	out    dx,ax
c001ca6b:	47                   	inc    edi
c001ca6c:	83 c4 10             	add    esp,0x10
c001ca6f:	81 ff 00 01 00 00    	cmp    edi,0x100
c001ca75:	75 c9                	jne    c001ca40 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001ca77:	eb 23                	jmp    c001ca9c <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001ca79:	51                   	push   ecx
c001ca7a:	0f b6 d2             	movzx  edx,dl
c001ca7d:	51                   	push   ecx
c001ca7e:	52                   	push   edx
c001ca7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca85:	e8 1c ed ff ff       	call   c001b7a6 <IDE::getBase(unsigned char)>
c001ca8a:	b9 00 01 00 00       	mov    ecx,0x100
c001ca8f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ca93:	89 c2                	mov    edx,eax
c001ca95:	fc                   	cld    
c001ca96:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ca99:	83 c4 10             	add    esp,0x10
c001ca9c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001caa4:	4e                   	dec    esi
c001caa5:	e9 43 ff ff ff       	jmp    c001c9ed <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001caaa:	31 f6                	xor    esi,esi
c001caac:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cab1:	74 11                	je     c001cac4 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cab3:	50                   	push   eax
c001cab4:	50                   	push   eax
c001cab5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001caba:	50                   	push   eax
c001cabb:	53                   	push   ebx
c001cabc:	e8 af fb ff ff       	call   c001c670 <ATA::flush(bool)>
c001cac1:	83 c4 10             	add    esp,0x10
c001cac4:	83 c4 2c             	add    esp,0x2c
c001cac7:	89 f0                	mov    eax,esi
c001cac9:	5b                   	pop    ebx
c001caca:	5e                   	pop    esi
c001cacb:	5f                   	pop    edi
c001cacc:	5d                   	pop    ebp
c001cacd:	c3                   	ret    

c001cace <ATA::detectCHS()>:
c001cace:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cad2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cad8:	c1 e0 06             	shl    eax,0x6
c001cadb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cae1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001caeb:	c7 44 24 04 14 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c14
c001caf3:	e9 cd 46 ff ff       	jmp    c00111c5 <KePanic(char const*)>

c001caf8 <ATA::open(int, int, void*)>:
c001caf8:	53                   	push   ebx
c001caf9:	83 ec 08             	sub    esp,0x8
c001cafc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cb00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb08:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cb0e:	c1 e0 06             	shl    eax,0x6
c001cb11:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cb17:	01 d0                	add    eax,edx
c001cb19:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cb20:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cb26:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cb2d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cb37:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cb3e:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cb44:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cb4b:	75 0c                	jne    c001cb59 <ATA::open(int, int, void*)+0x61>
c001cb4d:	83 ec 0c             	sub    esp,0xc
c001cb50:	53                   	push   ebx
c001cb51:	e8 78 ff ff ff       	call   c001cace <ATA::detectCHS()>
c001cb56:	83 c4 10             	add    esp,0x10
c001cb59:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cb5f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cb65:	c1 e0 06             	shl    eax,0x6
c001cb68:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cb6f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cb79:	d1 e8                	shr    eax,1
c001cb7b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cb81:	6a 04                	push   0x4
c001cb83:	6a 0c                	push   0xc
c001cb85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb8c:	50                   	push   eax
c001cb8d:	52                   	push   edx
c001cb8e:	e8 25 ec ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb93:	90                   	nop
c001cb94:	90                   	nop
c001cb95:	6a 00                	push   0x0
c001cb97:	6a 0c                	push   0xc
c001cb99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cba0:	50                   	push   eax
c001cba1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cba7:	e8 0c ec ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbac:	83 c4 14             	add    esp,0x14
c001cbaf:	53                   	push   ebx
c001cbb0:	e8 a9 fe fe ff       	call   c000ca5e <PhysicalDisk::startCache()>
c001cbb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbb8:	e8 ed 10 ff ff       	call   c000dcaa <createPartitionsForDisk(PhysicalDisk*)>
c001cbbd:	83 c4 18             	add    esp,0x18
c001cbc0:	31 c0                	xor    eax,eax
c001cbc2:	5b                   	pop    ebx
c001cbc3:	c3                   	ret    

c001cbc4 <combineCharAndColour(char, unsigned char)>:
c001cbc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbc9:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cbcf:	c1 e0 08             	shl    eax,0x8
c001cbd2:	09 d0                	or     eax,edx
c001cbd4:	c3                   	ret    

c001cbd5 <combineColours(unsigned char, unsigned char)>:
c001cbd5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbda:	c1 e0 04             	shl    eax,0x4
c001cbdd:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cbe1:	c3                   	ret    

c001cbe2 <ATA::read(unsigned long long, int, void*)>:
c001cbe2:	55                   	push   ebp
c001cbe3:	57                   	push   edi
c001cbe4:	56                   	push   esi
c001cbe5:	be 04 00 00 00       	mov    esi,0x4
c001cbea:	53                   	push   ebx
c001cbeb:	83 ec 0c             	sub    esp,0xc
c001cbee:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cbf2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbf6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cbfa:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cbfe:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cc01:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cc07:	0f 87 a1 01 00 00    	ja     c001cdae <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cc0d:	85 c9                	test   ecx,ecx
c001cc0f:	be 06 00 00 00       	mov    esi,0x6
c001cc14:	0f 84 94 01 00 00    	je     c001cdae <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cc1a:	55                   	push   ebp
c001cc1b:	55                   	push   ebp
c001cc1c:	6a 00                	push   0x0
c001cc1e:	51                   	push   ecx
c001cc1f:	53                   	push   ebx
c001cc20:	52                   	push   edx
c001cc21:	50                   	push   eax
c001cc22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc26:	e8 df fa ff ff       	call   c001c70a <ATA::access(unsigned long long, int, void*, bool)>
c001cc2b:	83 c4 20             	add    esp,0x20
c001cc2e:	85 c0                	test   eax,eax
c001cc30:	89 c6                	mov    esi,eax
c001cc32:	0f 85 71 01 00 00    	jne    c001cda9 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cc38:	50                   	push   eax
c001cc39:	bd 10 27 00 00       	mov    ebp,0x2710
c001cc3e:	50                   	push   eax
c001cc3f:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cc45:	6a 0f                	push   0xf
c001cc47:	6a 00                	push   0x0
c001cc49:	89 da                	mov    edx,ebx
c001cc4b:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cc51:	e8 7f ff ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001cc56:	59                   	pop    ecx
c001cc57:	b9 0a 00 00 00       	mov    ecx,0xa
c001cc5c:	5b                   	pop    ebx
c001cc5d:	0f b6 d8             	movzx  ebx,al
c001cc60:	89 d0                	mov    eax,edx
c001cc62:	53                   	push   ebx
c001cc63:	99                   	cdq    
c001cc64:	f7 fd                	idiv   ebp
c001cc66:	99                   	cdq    
c001cc67:	f7 f9                	idiv   ecx
c001cc69:	83 c2 30             	add    edx,0x30
c001cc6c:	0f b6 d2             	movzx  edx,dl
c001cc6f:	52                   	push   edx
c001cc70:	e8 4f ff ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001cc75:	5f                   	pop    edi
c001cc76:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc7b:	5a                   	pop    edx
c001cc7c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cc82:	53                   	push   ebx
c001cc83:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cc88:	99                   	cdq    
c001cc89:	f7 ff                	idiv   edi
c001cc8b:	99                   	cdq    
c001cc8c:	f7 f9                	idiv   ecx
c001cc8e:	8d 42 30             	lea    eax,[edx+0x30]
c001cc91:	0f b6 c0             	movzx  eax,al
c001cc94:	50                   	push   eax
c001cc95:	e8 2a ff ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001cc9a:	5f                   	pop    edi
c001cc9b:	bf 64 00 00 00       	mov    edi,0x64
c001cca0:	5a                   	pop    edx
c001cca1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cca7:	53                   	push   ebx
c001cca8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ccad:	99                   	cdq    
c001ccae:	f7 ff                	idiv   edi
c001ccb0:	99                   	cdq    
c001ccb1:	f7 f9                	idiv   ecx
c001ccb3:	8d 42 30             	lea    eax,[edx+0x30]
c001ccb6:	0f b6 c0             	movzx  eax,al
c001ccb9:	50                   	push   eax
c001ccba:	e8 05 ff ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001ccbf:	5a                   	pop    edx
c001ccc0:	5a                   	pop    edx
c001ccc1:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ccc7:	53                   	push   ebx
c001ccc8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cccd:	99                   	cdq    
c001ccce:	f7 f9                	idiv   ecx
c001ccd0:	99                   	cdq    
c001ccd1:	f7 f9                	idiv   ecx
c001ccd3:	8d 42 30             	lea    eax,[edx+0x30]
c001ccd6:	0f b6 c0             	movzx  eax,al
c001ccd9:	50                   	push   eax
c001ccda:	e8 e5 fe ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001ccdf:	5a                   	pop    edx
c001cce0:	5a                   	pop    edx
c001cce1:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cce7:	53                   	push   ebx
c001cce8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cced:	99                   	cdq    
c001ccee:	f7 f9                	idiv   ecx
c001ccf0:	83 c2 30             	add    edx,0x30
c001ccf3:	0f b6 d2             	movzx  edx,dl
c001ccf6:	52                   	push   edx
c001ccf7:	e8 c8 fe ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001ccfc:	5a                   	pop    edx
c001ccfd:	5a                   	pop    edx
c001ccfe:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cd04:	53                   	push   ebx
c001cd05:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd0a:	99                   	cdq    
c001cd0b:	f7 fd                	idiv   ebp
c001cd0d:	99                   	cdq    
c001cd0e:	f7 f9                	idiv   ecx
c001cd10:	8d 42 30             	lea    eax,[edx+0x30]
c001cd13:	0f b6 c0             	movzx  eax,al
c001cd16:	50                   	push   eax
c001cd17:	e8 a8 fe ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001cd1c:	5d                   	pop    ebp
c001cd1d:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cd22:	5a                   	pop    edx
c001cd23:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cd29:	53                   	push   ebx
c001cd2a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd2f:	99                   	cdq    
c001cd30:	f7 fd                	idiv   ebp
c001cd32:	99                   	cdq    
c001cd33:	f7 f9                	idiv   ecx
c001cd35:	8d 42 30             	lea    eax,[edx+0x30]
c001cd38:	0f b6 c0             	movzx  eax,al
c001cd3b:	50                   	push   eax
c001cd3c:	e8 83 fe ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001cd41:	5d                   	pop    ebp
c001cd42:	5a                   	pop    edx
c001cd43:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cd49:	53                   	push   ebx
c001cd4a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd4f:	99                   	cdq    
c001cd50:	f7 ff                	idiv   edi
c001cd52:	99                   	cdq    
c001cd53:	f7 f9                	idiv   ecx
c001cd55:	8d 42 30             	lea    eax,[edx+0x30]
c001cd58:	0f b6 c0             	movzx  eax,al
c001cd5b:	50                   	push   eax
c001cd5c:	e8 63 fe ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001cd61:	5f                   	pop    edi
c001cd62:	5d                   	pop    ebp
c001cd63:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cd69:	53                   	push   ebx
c001cd6a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd6f:	99                   	cdq    
c001cd70:	f7 f9                	idiv   ecx
c001cd72:	99                   	cdq    
c001cd73:	f7 f9                	idiv   ecx
c001cd75:	8d 42 30             	lea    eax,[edx+0x30]
c001cd78:	0f b6 c0             	movzx  eax,al
c001cd7b:	50                   	push   eax
c001cd7c:	e8 43 fe ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001cd81:	5a                   	pop    edx
c001cd82:	5f                   	pop    edi
c001cd83:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cd89:	53                   	push   ebx
c001cd8a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd8f:	99                   	cdq    
c001cd90:	f7 f9                	idiv   ecx
c001cd92:	83 c2 30             	add    edx,0x30
c001cd95:	0f b6 d2             	movzx  edx,dl
c001cd98:	52                   	push   edx
c001cd99:	e8 26 fe ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001cd9e:	83 c4 10             	add    esp,0x10
c001cda1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cda7:	eb 05                	jmp    c001cdae <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cda9:	be 01 00 00 00       	mov    esi,0x1
c001cdae:	83 c4 0c             	add    esp,0xc
c001cdb1:	89 f0                	mov    eax,esi
c001cdb3:	5b                   	pop    ebx
c001cdb4:	5e                   	pop    esi
c001cdb5:	5f                   	pop    edi
c001cdb6:	5d                   	pop    ebp
c001cdb7:	c3                   	ret    

c001cdb8 <ATA::write(unsigned long long, int, void*)>:
c001cdb8:	55                   	push   ebp
c001cdb9:	57                   	push   edi
c001cdba:	56                   	push   esi
c001cdbb:	be 04 00 00 00       	mov    esi,0x4
c001cdc0:	53                   	push   ebx
c001cdc1:	83 ec 0c             	sub    esp,0xc
c001cdc4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cdc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdcc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cdd0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdd4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cdd7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cddd:	0f 87 9c 01 00 00    	ja     c001cf7f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cde3:	85 c9                	test   ecx,ecx
c001cde5:	be 06 00 00 00       	mov    esi,0x6
c001cdea:	0f 84 8f 01 00 00    	je     c001cf7f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cdf0:	55                   	push   ebp
c001cdf1:	55                   	push   ebp
c001cdf2:	6a 01                	push   0x1
c001cdf4:	51                   	push   ecx
c001cdf5:	53                   	push   ebx
c001cdf6:	52                   	push   edx
c001cdf7:	50                   	push   eax
c001cdf8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cdfc:	e8 09 f9 ff ff       	call   c001c70a <ATA::access(unsigned long long, int, void*, bool)>
c001ce01:	83 c4 20             	add    esp,0x20
c001ce04:	85 c0                	test   eax,eax
c001ce06:	89 c6                	mov    esi,eax
c001ce08:	0f 85 6c 01 00 00    	jne    c001cf7a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001ce0e:	50                   	push   eax
c001ce0f:	bd 10 27 00 00       	mov    ebp,0x2710
c001ce14:	50                   	push   eax
c001ce15:	6a 0f                	push   0xf
c001ce17:	6a 00                	push   0x0
c001ce19:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001ce1f:	e8 b1 fd ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001ce24:	5a                   	pop    edx
c001ce25:	59                   	pop    ecx
c001ce26:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce2b:	0f b6 d8             	movzx  ebx,al
c001ce2e:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce33:	53                   	push   ebx
c001ce34:	99                   	cdq    
c001ce35:	f7 fd                	idiv   ebp
c001ce37:	99                   	cdq    
c001ce38:	f7 f9                	idiv   ecx
c001ce3a:	8d 42 30             	lea    eax,[edx+0x30]
c001ce3d:	0f b6 c0             	movzx  eax,al
c001ce40:	50                   	push   eax
c001ce41:	e8 7e fd ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001ce46:	5f                   	pop    edi
c001ce47:	bf e8 03 00 00       	mov    edi,0x3e8
c001ce4c:	5a                   	pop    edx
c001ce4d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce53:	53                   	push   ebx
c001ce54:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce59:	99                   	cdq    
c001ce5a:	f7 ff                	idiv   edi
c001ce5c:	99                   	cdq    
c001ce5d:	f7 f9                	idiv   ecx
c001ce5f:	8d 42 30             	lea    eax,[edx+0x30]
c001ce62:	0f b6 c0             	movzx  eax,al
c001ce65:	50                   	push   eax
c001ce66:	e8 59 fd ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001ce6b:	5f                   	pop    edi
c001ce6c:	bf 64 00 00 00       	mov    edi,0x64
c001ce71:	5a                   	pop    edx
c001ce72:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce78:	53                   	push   ebx
c001ce79:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce7e:	99                   	cdq    
c001ce7f:	f7 ff                	idiv   edi
c001ce81:	99                   	cdq    
c001ce82:	f7 f9                	idiv   ecx
c001ce84:	8d 42 30             	lea    eax,[edx+0x30]
c001ce87:	0f b6 c0             	movzx  eax,al
c001ce8a:	50                   	push   eax
c001ce8b:	e8 34 fd ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001ce90:	5a                   	pop    edx
c001ce91:	5a                   	pop    edx
c001ce92:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce98:	53                   	push   ebx
c001ce99:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce9e:	99                   	cdq    
c001ce9f:	f7 f9                	idiv   ecx
c001cea1:	99                   	cdq    
c001cea2:	f7 f9                	idiv   ecx
c001cea4:	8d 42 30             	lea    eax,[edx+0x30]
c001cea7:	0f b6 c0             	movzx  eax,al
c001ceaa:	50                   	push   eax
c001ceab:	e8 14 fd ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001ceb0:	5a                   	pop    edx
c001ceb1:	5a                   	pop    edx
c001ceb2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ceb8:	53                   	push   ebx
c001ceb9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cebe:	99                   	cdq    
c001cebf:	f7 f9                	idiv   ecx
c001cec1:	83 c2 30             	add    edx,0x30
c001cec4:	0f b6 d2             	movzx  edx,dl
c001cec7:	52                   	push   edx
c001cec8:	e8 f7 fc ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001cecd:	5a                   	pop    edx
c001cece:	5a                   	pop    edx
c001cecf:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ced5:	53                   	push   ebx
c001ced6:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cedb:	99                   	cdq    
c001cedc:	f7 fd                	idiv   ebp
c001cede:	99                   	cdq    
c001cedf:	f7 f9                	idiv   ecx
c001cee1:	8d 42 30             	lea    eax,[edx+0x30]
c001cee4:	0f b6 c0             	movzx  eax,al
c001cee7:	50                   	push   eax
c001cee8:	e8 d7 fc ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001ceed:	5d                   	pop    ebp
c001ceee:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cef3:	5a                   	pop    edx
c001cef4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cefa:	53                   	push   ebx
c001cefb:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf00:	99                   	cdq    
c001cf01:	f7 fd                	idiv   ebp
c001cf03:	99                   	cdq    
c001cf04:	f7 f9                	idiv   ecx
c001cf06:	8d 42 30             	lea    eax,[edx+0x30]
c001cf09:	0f b6 c0             	movzx  eax,al
c001cf0c:	50                   	push   eax
c001cf0d:	e8 b2 fc ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001cf12:	5d                   	pop    ebp
c001cf13:	5a                   	pop    edx
c001cf14:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf1a:	53                   	push   ebx
c001cf1b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf20:	99                   	cdq    
c001cf21:	f7 ff                	idiv   edi
c001cf23:	99                   	cdq    
c001cf24:	f7 f9                	idiv   ecx
c001cf26:	8d 42 30             	lea    eax,[edx+0x30]
c001cf29:	0f b6 c0             	movzx  eax,al
c001cf2c:	50                   	push   eax
c001cf2d:	e8 92 fc ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001cf32:	5f                   	pop    edi
c001cf33:	5d                   	pop    ebp
c001cf34:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf3a:	53                   	push   ebx
c001cf3b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf40:	99                   	cdq    
c001cf41:	f7 f9                	idiv   ecx
c001cf43:	99                   	cdq    
c001cf44:	f7 f9                	idiv   ecx
c001cf46:	8d 42 30             	lea    eax,[edx+0x30]
c001cf49:	0f b6 c0             	movzx  eax,al
c001cf4c:	50                   	push   eax
c001cf4d:	e8 72 fc ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001cf52:	5a                   	pop    edx
c001cf53:	5f                   	pop    edi
c001cf54:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf5a:	53                   	push   ebx
c001cf5b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf60:	99                   	cdq    
c001cf61:	f7 f9                	idiv   ecx
c001cf63:	83 c2 30             	add    edx,0x30
c001cf66:	0f b6 d2             	movzx  edx,dl
c001cf69:	52                   	push   edx
c001cf6a:	e8 55 fc ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001cf6f:	83 c4 10             	add    esp,0x10
c001cf72:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf78:	eb 05                	jmp    c001cf7f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf7a:	be 01 00 00 00       	mov    esi,0x1
c001cf7f:	83 c4 0c             	add    esp,0xc
c001cf82:	89 f0                	mov    eax,esi
c001cf84:	5b                   	pop    ebx
c001cf85:	5e                   	pop    esi
c001cf86:	5f                   	pop    edi
c001cf87:	5d                   	pop    ebp
c001cf88:	c3                   	ret    
c001cf89:	90                   	nop

c001cf8a <ATAPI::write(unsigned long long, int, void*)>:
c001cf8a:	b8 03 00 00 00       	mov    eax,0x3
c001cf8f:	c3                   	ret    

c001cf90 <ATAPI::close(int, int, void*)>:
c001cf90:	83 ec 0c             	sub    esp,0xc
c001cf93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf97:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf9d:	85 c0                	test   eax,eax
c001cf9f:	74 0c                	je     c001cfad <ATAPI::close(int, int, void*)+0x1d>
c001cfa1:	8b 10                	mov    edx,DWORD PTR [eax]
c001cfa3:	83 ec 0c             	sub    esp,0xc
c001cfa6:	50                   	push   eax
c001cfa7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cfaa:	83 c4 10             	add    esp,0x10
c001cfad:	31 c0                	xor    eax,eax
c001cfaf:	83 c4 0c             	add    esp,0xc
c001cfb2:	c3                   	ret    
c001cfb3:	90                   	nop

c001cfb4 <ATAPI::ATAPI()>:
c001cfb4:	83 ec 0c             	sub    esp,0xc
c001cfb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfbb:	83 ec 04             	sub    esp,0x4
c001cfbe:	68 00 08 00 00       	push   0x800
c001cfc3:	68 5d 2d 02 c0       	push   0xc0022d5d
c001cfc8:	50                   	push   eax
c001cfc9:	e8 28 fa fe ff       	call   c000c9f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cfce:	83 c4 10             	add    esp,0x10
c001cfd1:	ba 78 2c 02 c0       	mov    edx,0xc0022c78
c001cfd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfda:	89 10                	mov    DWORD PTR [eax],edx
c001cfdc:	90                   	nop
c001cfdd:	83 c4 0c             	add    esp,0xc
c001cfe0:	c3                   	ret    
c001cfe1:	90                   	nop

c001cfe2 <ATAPI::readyForCommand()>:
c001cfe2:	56                   	push   esi
c001cfe3:	53                   	push   ebx
c001cfe4:	53                   	push   ebx
c001cfe5:	31 db                	xor    ebx,ebx
c001cfe7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cfeb:	51                   	push   ecx
c001cfec:	6a 0c                	push   0xc
c001cfee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cff5:	50                   	push   eax
c001cff6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cffc:	e8 77 e8 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001d001:	83 c4 10             	add    esp,0x10
c001d004:	a8 88                	test   al,0x88
c001d006:	74 25                	je     c001d02d <ATAPI::readyForCommand()+0x4b>
c001d008:	43                   	inc    ebx
c001d009:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d00f:	7e da                	jle    c001cfeb <ATAPI::readyForCommand()+0x9>
c001d011:	83 ec 0c             	sub    esp,0xc
c001d014:	68 5e 01 00 00       	push   0x15e
c001d019:	e8 c6 8d ff ff       	call   c0015de4 <milliTenthSleep(unsigned int)>
c001d01e:	83 c4 10             	add    esp,0x10
c001d021:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d027:	75 c2                	jne    c001cfeb <ATAPI::readyForCommand()+0x9>
c001d029:	31 c0                	xor    eax,eax
c001d02b:	eb 02                	jmp    c001d02f <ATAPI::readyForCommand()+0x4d>
c001d02d:	b0 01                	mov    al,0x1
c001d02f:	5a                   	pop    edx
c001d030:	5b                   	pop    ebx
c001d031:	5e                   	pop    esi
c001d032:	c3                   	ret    
c001d033:	90                   	nop

c001d034 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d034:	55                   	push   ebp
c001d035:	57                   	push   edi
c001d036:	56                   	push   esi
c001d037:	53                   	push   ebx
c001d038:	83 ec 20             	sub    esp,0x20
c001d03b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d03f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d043:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d047:	6a 01                	push   0x1
c001d049:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d050:	50                   	push   eax
c001d051:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d057:	e8 6a e9 ff ff       	call   c001b9c6 <IDE::enableIRQs(unsigned char, bool)>
c001d05c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d063:	59                   	pop    ecx
c001d064:	5e                   	pop    esi
c001d065:	50                   	push   eax
c001d066:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d06c:	e8 21 e7 ff ff       	call   c001b792 <IDE::prepareInterrupt(unsigned char)>
c001d071:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d074:	e8 69 ff ff ff       	call   c001cfe2 <ATAPI::readyForCommand()>
c001d079:	83 c4 10             	add    esp,0x10
c001d07c:	84 c0                	test   al,al
c001d07e:	75 0a                	jne    c001d08a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d080:	bb 01 00 00 00       	mov    ebx,0x1
c001d085:	e9 5f 02 00 00       	jmp    c001d2e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d08a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d090:	c1 e0 04             	shl    eax,0x4
c001d093:	0f b6 c0             	movzx  eax,al
c001d096:	50                   	push   eax
c001d097:	6a 06                	push   0x6
c001d099:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0a0:	50                   	push   eax
c001d0a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0a7:	e8 0c e7 ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0ac:	6a 00                	push   0x0
c001d0ae:	6a 01                	push   0x1
c001d0b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0b7:	50                   	push   eax
c001d0b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0be:	e8 f5 e6 ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0c3:	83 c4 20             	add    esp,0x20
c001d0c6:	0f b6 c3             	movzx  eax,bl
c001d0c9:	50                   	push   eax
c001d0ca:	0f b6 df             	movzx  ebx,bh
c001d0cd:	6a 04                	push   0x4
c001d0cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0d6:	50                   	push   eax
c001d0d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0dd:	e8 d6 e6 ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0e2:	53                   	push   ebx
c001d0e3:	6a 05                	push   0x5
c001d0e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0ec:	50                   	push   eax
c001d0ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0f3:	e8 c0 e6 ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0f8:	83 c4 20             	add    esp,0x20
c001d0fb:	68 a0 00 00 00       	push   0xa0
c001d100:	6a 07                	push   0x7
c001d102:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d109:	50                   	push   eax
c001d10a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d110:	e8 a3 e6 ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d115:	83 c4 0c             	add    esp,0xc
c001d118:	6a 01                	push   0x1
c001d11a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d121:	50                   	push   eax
c001d122:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d128:	e8 6f f1 ff ff       	call   c001c29c <IDE::polling(unsigned char, unsigned int)>
c001d12d:	83 c4 10             	add    esp,0x10
c001d130:	0f b6 d8             	movzx  ebx,al
c001d133:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d139:	85 db                	test   ebx,ebx
c001d13b:	74 20                	je     c001d15d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d13d:	53                   	push   ebx
c001d13e:	0f b6 c0             	movzx  eax,al
c001d141:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d148:	52                   	push   edx
c001d149:	50                   	push   eax
c001d14a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d150:	e8 8d f0 ff ff       	call   c001c1e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d155:	83 c4 10             	add    esp,0x10
c001d158:	e9 8c 01 00 00       	jmp    c001d2e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d15d:	52                   	push   edx
c001d15e:	0f b6 c0             	movzx  eax,al
c001d161:	52                   	push   edx
c001d162:	50                   	push   eax
c001d163:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d169:	e8 38 e6 ff ff       	call   c001b7a6 <IDE::getBase(unsigned char)>
c001d16e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d172:	b9 06 00 00 00       	mov    ecx,0x6
c001d177:	89 c2                	mov    edx,eax
c001d179:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d17c:	89 e8                	mov    eax,ebp
c001d17e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d182:	83 c4 10             	add    esp,0x10
c001d185:	0f b6 c0             	movzx  eax,al
c001d188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d18c:	85 db                	test   ebx,ebx
c001d18e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d194:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d19b:	0f 84 eb 00 00 00    	je     c001d28c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d1a1:	55                   	push   ebp
c001d1a2:	55                   	push   ebp
c001d1a3:	52                   	push   edx
c001d1a4:	50                   	push   eax
c001d1a5:	e8 82 e7 ff ff       	call   c001b92c <IDE::waitInterrupt(unsigned char)>
c001d1aa:	83 c4 10             	add    esp,0x10
c001d1ad:	84 c0                	test   al,al
c001d1af:	0f 84 cb fe ff ff    	je     c001d080 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d1b5:	56                   	push   esi
c001d1b6:	56                   	push   esi
c001d1b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1be:	50                   	push   eax
c001d1bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1c5:	e8 c8 e5 ff ff       	call   c001b792 <IDE::prepareInterrupt(unsigned char)>
c001d1ca:	83 c4 0c             	add    esp,0xc
c001d1cd:	6a 04                	push   0x4
c001d1cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1d6:	50                   	push   eax
c001d1d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1dd:	e8 96 e6 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001d1e2:	83 c4 0c             	add    esp,0xc
c001d1e5:	6a 05                	push   0x5
c001d1e7:	89 c6                	mov    esi,eax
c001d1e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1f0:	50                   	push   eax
c001d1f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1f7:	e8 7c e6 ff ff       	call   c001b878 <IDE::read(unsigned char, unsigned char)>
c001d1fc:	83 c4 10             	add    esp,0x10
c001d1ff:	0f b6 e8             	movzx  ebp,al
c001d202:	89 f0                	mov    eax,esi
c001d204:	c1 e5 08             	shl    ebp,0x8
c001d207:	0f b6 f0             	movzx  esi,al
c001d20a:	09 f5                	or     ebp,esi
c001d20c:	31 f6                	xor    esi,esi
c001d20e:	d1 fd                	sar    ebp,1
c001d210:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d215:	74 5c                	je     c001d273 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d217:	39 ee                	cmp    esi,ebp
c001d219:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d21f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d226:	75 0d                	jne    c001d235 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d228:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d22b:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d22f:	4b                   	dec    ebx
c001d230:	e9 57 ff ff ff       	jmp    c001d18c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d235:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d239:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d23d:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d242:	51                   	push   ecx
c001d243:	51                   	push   ecx
c001d244:	52                   	push   edx
c001d245:	50                   	push   eax
c001d246:	e8 5b e5 ff ff       	call   c001b7a6 <IDE::getBase(unsigned char)>
c001d24b:	89 c2                	mov    edx,eax
c001d24d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d252:	66 ef                	out    dx,ax
c001d254:	46                   	inc    esi
c001d255:	83 c4 10             	add    esp,0x10
c001d258:	eb bd                	jmp    c001d217 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d25a:	51                   	push   ecx
c001d25b:	51                   	push   ecx
c001d25c:	52                   	push   edx
c001d25d:	50                   	push   eax
c001d25e:	e8 43 e5 ff ff       	call   c001b7a6 <IDE::getBase(unsigned char)>
c001d263:	89 c2                	mov    edx,eax
c001d265:	66 ed                	in     ax,dx
c001d267:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d26b:	83 c4 10             	add    esp,0x10
c001d26e:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d272:	46                   	inc    esi
c001d273:	39 ee                	cmp    esi,ebp
c001d275:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d27b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d282:	75 d6                	jne    c001d25a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d284:	01 f6                	add    esi,esi
c001d286:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d28a:	eb a3                	jmp    c001d22f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d28c:	51                   	push   ecx
c001d28d:	51                   	push   ecx
c001d28e:	52                   	push   edx
c001d28f:	50                   	push   eax
c001d290:	e8 97 e6 ff ff       	call   c001b92c <IDE::waitInterrupt(unsigned char)>
c001d295:	83 c4 10             	add    esp,0x10
c001d298:	84 c0                	test   al,al
c001d29a:	0f 84 e0 fd ff ff    	je     c001d080 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d2a0:	52                   	push   edx
c001d2a1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d2a6:	52                   	push   edx
c001d2a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2ae:	50                   	push   eax
c001d2af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2b5:	e8 d8 e4 ff ff       	call   c001b792 <IDE::prepareInterrupt(unsigned char)>
c001d2ba:	83 c4 10             	add    esp,0x10
c001d2bd:	50                   	push   eax
c001d2be:	50                   	push   eax
c001d2bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2c6:	50                   	push   eax
c001d2c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2cd:	e8 d4 e4 ff ff       	call   c001b7a6 <IDE::getBase(unsigned char)>
c001d2d2:	8d 50 07             	lea    edx,[eax+0x7]
c001d2d5:	ec                   	in     al,dx
c001d2d6:	83 c4 10             	add    esp,0x10
c001d2d9:	a8 88                	test   al,0x88
c001d2db:	74 0a                	je     c001d2e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d2dd:	4b                   	dec    ebx
c001d2de:	75 dd                	jne    c001d2bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d2e0:	bb 02 00 00 00       	mov    ebx,0x2
c001d2e5:	eb 02                	jmp    c001d2e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d2e7:	31 db                	xor    ebx,ebx
c001d2e9:	83 c4 1c             	add    esp,0x1c
c001d2ec:	89 d8                	mov    eax,ebx
c001d2ee:	5b                   	pop    ebx
c001d2ef:	5e                   	pop    esi
c001d2f0:	5f                   	pop    edi
c001d2f1:	5d                   	pop    ebp
c001d2f2:	c3                   	ret    
c001d2f3:	90                   	nop

c001d2f4 <ATAPI::diskRemoved()>:
c001d2f4:	53                   	push   ebx
c001d2f5:	83 ec 14             	sub    esp,0x14
c001d2f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d2fc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d303:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d309:	e8 8a 06 ff ff       	call   c000d998 <LogicalDisk::unmount()>
c001d30e:	58                   	pop    eax
c001d30f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d315:	e8 62 10 ff ff       	call   c000e37c <VCache::writeWriteBuffer()>
c001d31a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d320:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d324:	83 c4 18             	add    esp,0x18
c001d327:	5b                   	pop    ebx
c001d328:	e9 3f 10 ff ff       	jmp    c000e36c <VCache::invalidateReadBuffer()>
c001d32d:	90                   	nop

c001d32e <ATAPI::eject()>:
c001d32e:	57                   	push   edi
c001d32f:	b9 03 00 00 00       	mov    ecx,0x3
c001d334:	53                   	push   ebx
c001d335:	83 ec 14             	sub    esp,0x14
c001d338:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d33c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d340:	fc                   	cld    
c001d341:	31 c0                	xor    eax,eax
c001d343:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d345:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d34a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d34f:	50                   	push   eax
c001d350:	50                   	push   eax
c001d351:	6a 00                	push   0x0
c001d353:	6a 00                	push   0x0
c001d355:	6a 00                	push   0x0
c001d357:	6a 02                	push   0x2
c001d359:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d35d:	50                   	push   eax
c001d35e:	53                   	push   ebx
c001d35f:	e8 d0 fc ff ff       	call   c001d034 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d364:	83 c4 14             	add    esp,0x14
c001d367:	53                   	push   ebx
c001d368:	e8 87 ff ff ff       	call   c001d2f4 <ATAPI::diskRemoved()>
c001d36d:	83 c4 24             	add    esp,0x24
c001d370:	31 c0                	xor    eax,eax
c001d372:	5b                   	pop    ebx
c001d373:	5f                   	pop    edi
c001d374:	c3                   	ret    
c001d375:	90                   	nop

c001d376 <ATAPI::diskInserted()>:
c001d376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d37a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d381:	c3                   	ret    

c001d382 <ATAPI::detectMedia()>:
c001d382:	56                   	push   esi
c001d383:	53                   	push   ebx
c001d384:	83 ec 28             	sub    esp,0x28
c001d387:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d38b:	6a 0c                	push   0xc
c001d38d:	6a 00                	push   0x0
c001d38f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d393:	56                   	push   esi
c001d394:	e8 57 31 fe ff       	call   c00004f0 <memset>
c001d399:	58                   	pop    eax
c001d39a:	5a                   	pop    edx
c001d39b:	6a 00                	push   0x0
c001d39d:	6a 00                	push   0x0
c001d39f:	6a 00                	push   0x0
c001d3a1:	6a 00                	push   0x0
c001d3a3:	56                   	push   esi
c001d3a4:	53                   	push   ebx
c001d3a5:	e8 8a fc ff ff       	call   c001d034 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3aa:	83 c4 1c             	add    esp,0x1c
c001d3ad:	6a 0c                	push   0xc
c001d3af:	6a 00                	push   0x0
c001d3b1:	56                   	push   esi
c001d3b2:	e8 39 31 fe ff       	call   c00004f0 <memset>
c001d3b7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d3bc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d3c1:	59                   	pop    ecx
c001d3c2:	58                   	pop    eax
c001d3c3:	6a 01                	push   0x1
c001d3c5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d3c9:	50                   	push   eax
c001d3ca:	6a 00                	push   0x0
c001d3cc:	6a 12                	push   0x12
c001d3ce:	56                   	push   esi
c001d3cf:	53                   	push   ebx
c001d3d0:	e8 5f fc ff ff       	call   c001d034 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3d5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d3d9:	83 c4 20             	add    esp,0x20
c001d3dc:	83 e0 7f             	and    eax,0x7f
c001d3df:	83 f8 70             	cmp    eax,0x70
c001d3e2:	74 15                	je     c001d3f9 <ATAPI::detectMedia()+0x77>
c001d3e4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3eb:	75 0c                	jne    c001d3f9 <ATAPI::detectMedia()+0x77>
c001d3ed:	83 ec 0c             	sub    esp,0xc
c001d3f0:	53                   	push   ebx
c001d3f1:	e8 80 ff ff ff       	call   c001d376 <ATAPI::diskInserted()>
c001d3f6:	83 c4 10             	add    esp,0x10
c001d3f9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d3fd:	83 e0 0f             	and    eax,0xf
c001d400:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d405:	0f b6 c0             	movzx  eax,al
c001d408:	75 19                	jne    c001d423 <ATAPI::detectMedia()+0xa1>
c001d40a:	83 f8 02             	cmp    eax,0x2
c001d40d:	75 14                	jne    c001d423 <ATAPI::detectMedia()+0xa1>
c001d40f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d416:	74 24                	je     c001d43c <ATAPI::detectMedia()+0xba>
c001d418:	83 ec 0c             	sub    esp,0xc
c001d41b:	53                   	push   ebx
c001d41c:	e8 d3 fe ff ff       	call   c001d2f4 <ATAPI::diskRemoved()>
c001d421:	eb 16                	jmp    c001d439 <ATAPI::detectMedia()+0xb7>
c001d423:	85 c0                	test   eax,eax
c001d425:	75 15                	jne    c001d43c <ATAPI::detectMedia()+0xba>
c001d427:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d42e:	75 0c                	jne    c001d43c <ATAPI::detectMedia()+0xba>
c001d430:	83 ec 0c             	sub    esp,0xc
c001d433:	53                   	push   ebx
c001d434:	e8 3d ff ff ff       	call   c001d376 <ATAPI::diskInserted()>
c001d439:	83 c4 10             	add    esp,0x10
c001d43c:	83 c4 24             	add    esp,0x24
c001d43f:	5b                   	pop    ebx
c001d440:	5e                   	pop    esi
c001d441:	c3                   	ret    

c001d442 <ATAPI::open(int, int, void*)>:
c001d442:	56                   	push   esi
c001d443:	53                   	push   ebx
c001d444:	50                   	push   eax
c001d445:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d449:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d44d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d451:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d457:	c1 e0 06             	shl    eax,0x6
c001d45a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d460:	01 d0                	add    eax,edx
c001d462:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d469:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d46f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d476:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d480:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d487:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d48d:	6a 04                	push   0x4
c001d48f:	6a 0c                	push   0xc
c001d491:	51                   	push   ecx
c001d492:	52                   	push   edx
c001d493:	e8 20 e3 ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d498:	90                   	nop
c001d499:	90                   	nop
c001d49a:	6a 00                	push   0x0
c001d49c:	6a 0c                	push   0xc
c001d49e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4a5:	50                   	push   eax
c001d4a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4ac:	e8 07 e3 ff ff       	call   c001b7b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4b1:	83 c4 14             	add    esp,0x14
c001d4b4:	68 78 01 00 00       	push   0x178
c001d4b9:	e8 15 a6 fe ff       	call   c0007ad3 <malloc>
c001d4be:	83 c4 0c             	add    esp,0xc
c001d4c1:	6a 00                	push   0x0
c001d4c3:	68 ff ff ff 7f       	push   0x7fffffff
c001d4c8:	6a 00                	push   0x0
c001d4ca:	6a 00                	push   0x0
c001d4cc:	53                   	push   ebx
c001d4cd:	68 0f 2e 02 c0       	push   0xc0022e0f
c001d4d2:	89 c6                	mov    esi,eax
c001d4d4:	50                   	push   eax
c001d4d5:	e8 fc 02 ff ff       	call   c000d7d6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d4da:	83 c4 14             	add    esp,0x14
c001d4dd:	56                   	push   esi
c001d4de:	e8 b3 03 ff ff       	call   c000d896 <LogicalDisk::assignDriveLetter()>
c001d4e3:	5a                   	pop    edx
c001d4e4:	59                   	pop    ecx
c001d4e5:	0f be c0             	movsx  eax,al
c001d4e8:	50                   	push   eax
c001d4e9:	68 60 2c 02 c0       	push   0xc0022c60
c001d4ee:	e8 17 d4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d4f3:	58                   	pop    eax
c001d4f4:	5a                   	pop    edx
c001d4f5:	56                   	push   esi
c001d4f6:	53                   	push   ebx
c001d4f7:	e8 2c f1 fe ff       	call   c000c628 <Device::addChild(Device*)>
c001d4fc:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d502:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d505:	e8 54 f5 fe ff       	call   c000ca5e <PhysicalDisk::startCache()>
c001d50a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d511:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d514:	e8 69 fe ff ff       	call   c001d382 <ATAPI::detectMedia()>
c001d519:	83 c4 14             	add    esp,0x14
c001d51c:	31 c0                	xor    eax,eax
c001d51e:	5b                   	pop    ebx
c001d51f:	5e                   	pop    esi
c001d520:	c3                   	ret    
c001d521:	90                   	nop

c001d522 <ATAPI::read(unsigned long long, int, void*)>:
c001d522:	55                   	push   ebp
c001d523:	57                   	push   edi
c001d524:	56                   	push   esi
c001d525:	53                   	push   ebx
c001d526:	83 ec 1c             	sub    esp,0x1c
c001d529:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d52d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d531:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d535:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d53c:	74 3c                	je     c001d57a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d53e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d542:	b9 03 00 00 00       	mov    ecx,0x3
c001d547:	fc                   	cld    
c001d548:	31 c0                	xor    eax,eax
c001d54a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d54c:	89 e8                	mov    eax,ebp
c001d54e:	0f ce                	bswap  esi
c001d550:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d554:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d559:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d55d:	50                   	push   eax
c001d55e:	50                   	push   eax
c001d55f:	55                   	push   ebp
c001d560:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d564:	c1 e5 0b             	shl    ebp,0xb
c001d567:	6a 00                	push   0x0
c001d569:	55                   	push   ebp
c001d56a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d56e:	50                   	push   eax
c001d56f:	53                   	push   ebx
c001d570:	e8 bf fa ff ff       	call   c001d034 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d575:	83 c4 20             	add    esp,0x20
c001d578:	eb 1a                	jmp    c001d594 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d57a:	83 ec 0c             	sub    esp,0xc
c001d57d:	53                   	push   ebx
c001d57e:	e8 ff fd ff ff       	call   c001d382 <ATAPI::detectMedia()>
c001d583:	83 c4 10             	add    esp,0x10
c001d586:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d58d:	75 af                	jne    c001d53e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d58f:	b8 02 00 00 00       	mov    eax,0x2
c001d594:	83 c4 1c             	add    esp,0x1c
c001d597:	5b                   	pop    ebx
c001d598:	5e                   	pop    esi
c001d599:	5f                   	pop    edi
c001d59a:	5d                   	pop    ebp
c001d59b:	c3                   	ret    

c001d59c <SATA::close(int, int, void*)>:
c001d59c:	83 ec 0c             	sub    esp,0xc
c001d59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5a3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5a9:	85 c0                	test   eax,eax
c001d5ab:	74 0c                	je     c001d5b9 <SATA::close(int, int, void*)+0x1d>
c001d5ad:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5af:	83 ec 0c             	sub    esp,0xc
c001d5b2:	50                   	push   eax
c001d5b3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5b6:	83 c4 10             	add    esp,0x10
c001d5b9:	31 c0                	xor    eax,eax
c001d5bb:	83 c4 0c             	add    esp,0xc
c001d5be:	c3                   	ret    
c001d5bf:	90                   	nop

c001d5c0 <SATA::powerSaving(PowerSavingLevel)>:
c001d5c0:	c3                   	ret    
c001d5c1:	90                   	nop

c001d5c2 <SATA::open(int, int, void*)>:
c001d5c2:	56                   	push   esi
c001d5c3:	53                   	push   ebx
c001d5c4:	50                   	push   eax
c001d5c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5cd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d5d7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d5dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5e1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d5eb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d5f5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d5fc:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d602:	e8 db a7 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d607:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d60d:	89 c6                	mov    esi,eax
c001d60f:	e8 ce a7 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d614:	81 c6 00 10 00 00    	add    esi,0x1000
c001d61a:	39 c6                	cmp    esi,eax
c001d61c:	74 10                	je     c001d62e <SATA::open(int, int, void*)+0x6c>
c001d61e:	83 ec 0c             	sub    esp,0xc
c001d621:	68 a8 2c 02 c0       	push   0xc0022ca8
c001d626:	e8 9a 3b ff ff       	call   c00111c5 <KePanic(char const*)>
c001d62b:	83 c4 10             	add    esp,0x10
c001d62e:	83 ec 0c             	sub    esp,0xc
c001d631:	6a 02                	push   0x2
c001d633:	e8 bd bf fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d638:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d63e:	6a 03                	push   0x3
c001d640:	50                   	push   eax
c001d641:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d647:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d64d:	e8 ac c6 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d652:	83 c4 14             	add    esp,0x14
c001d655:	53                   	push   ebx
c001d656:	e8 03 f4 fe ff       	call   c000ca5e <PhysicalDisk::startCache()>
c001d65b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d65e:	e8 47 06 ff ff       	call   c000dcaa <createPartitionsForDisk(PhysicalDisk*)>
c001d663:	83 c4 14             	add    esp,0x14
c001d666:	31 c0                	xor    eax,eax
c001d668:	5b                   	pop    ebx
c001d669:	5e                   	pop    esi
c001d66a:	c3                   	ret    
c001d66b:	90                   	nop

c001d66c <SATA::SATA()>:
c001d66c:	83 ec 0c             	sub    esp,0xc
c001d66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d673:	83 ec 04             	sub    esp,0x4
c001d676:	68 00 02 00 00       	push   0x200
c001d67b:	68 bc 2c 02 c0       	push   0xc0022cbc
c001d680:	50                   	push   eax
c001d681:	e8 70 f3 fe ff       	call   c000c9f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d686:	83 c4 10             	add    esp,0x10
c001d689:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c001d68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d692:	89 10                	mov    DWORD PTR [eax],edx
c001d694:	90                   	nop
c001d695:	83 c4 0c             	add    esp,0xc
c001d698:	c3                   	ret    
c001d699:	90                   	nop

c001d69a <SATA::access(unsigned long long, int, void*, bool)>:
c001d69a:	55                   	push   ebp
c001d69b:	57                   	push   edi
c001d69c:	56                   	push   esi
c001d69d:	53                   	push   ebx
c001d69e:	83 ec 2c             	sub    esp,0x2c
c001d6a1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d6a5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d6aa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d6ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d6b2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d6b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d6ba:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d6be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6c2:	7e 10                	jle    c001d6d4 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d6c4:	83 ec 0c             	sub    esp,0xc
c001d6c7:	68 cc 2c 02 c0       	push   0xc0022ccc
c001d6cc:	e8 f4 3a ff ff       	call   c00111c5 <KePanic(char const*)>
c001d6d1:	83 c4 10             	add    esp,0x10
c001d6d4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d6da:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d6e0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d6e6:	89 e8                	mov    eax,ebp
c001d6e8:	c1 e0 07             	shl    eax,0x7
c001d6eb:	01 d0                	add    eax,edx
c001d6ed:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d6f7:	8d 45 02             	lea    eax,[ebp+0x2]
c001d6fa:	51                   	push   ecx
c001d6fb:	c1 e0 07             	shl    eax,0x7
c001d6fe:	51                   	push   ecx
c001d6ff:	01 d0                	add    eax,edx
c001d701:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d705:	50                   	push   eax
c001d706:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d70c:	e8 6b ec ff ff       	call   c001c37c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d711:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d715:	83 c4 10             	add    esp,0x10
c001d718:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d71d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d721:	0f 84 5b 01 00 00    	je     c001d882 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d727:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d72b:	c1 e0 09             	shl    eax,0x9
c001d72e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d733:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d737:	74 0e                	je     c001d747 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d739:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d73f:	89 c1                	mov    ecx,eax
c001d741:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d745:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d747:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d74b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d751:	8d 45 02             	lea    eax,[ebp+0x2]
c001d754:	c1 e0 07             	shl    eax,0x7
c001d757:	01 d0                	add    eax,edx
c001d759:	8b 00                	mov    eax,DWORD PTR [eax]
c001d75b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d761:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d767:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d76b:	c1 e1 05             	shl    ecx,0x5
c001d76e:	01 c8                	add    eax,ecx
c001d770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d774:	83 e1 01             	and    ecx,0x1
c001d777:	89 ce                	mov    esi,ecx
c001d779:	8a 08                	mov    cl,BYTE PTR [eax]
c001d77b:	c1 e6 06             	shl    esi,0x6
c001d77e:	83 e1 bf             	and    ecx,0xffffffbf
c001d781:	09 f1                	or     ecx,esi
c001d783:	88 08                	mov    BYTE PTR [eax],cl
c001d785:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d787:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d78d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d793:	89 08                	mov    DWORD PTR [eax],ecx
c001d795:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d79b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d7a1:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d7a7:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d7aa:	50                   	push   eax
c001d7ab:	68 90 00 00 00       	push   0x90
c001d7b0:	6a 00                	push   0x0
c001d7b2:	56                   	push   esi
c001d7b3:	e8 38 2d fe ff       	call   c00004f0 <memset>
c001d7b8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d7be:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d7c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7c8:	83 c4 10             	add    esp,0x10
c001d7cb:	48                   	dec    eax
c001d7cc:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d7d1:	89 c1                	mov    ecx,eax
c001d7d3:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d7d9:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d7de:	09 c8                	or     eax,ecx
c001d7e0:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d7e6:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d7ec:	83 c8 80             	or     eax,0xffffff80
c001d7ef:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d7f5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d7f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7fc:	25 00 7f 00 00       	and    eax,0x7f00
c001d801:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d806:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d80b:	66 89 06             	mov    WORD PTR [esi],ax
c001d80e:	b0 35                	mov    al,0x35
c001d810:	75 02                	jne    c001d814 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d812:	b0 25                	mov    al,0x25
c001d814:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d817:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d81b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d81f:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d827:	c1 e8 10             	shr    eax,0x10
c001d82a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d82d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d831:	c1 e8 18             	shr    eax,0x18
c001d834:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d837:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d83b:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d83e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d842:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d845:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d849:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d84d:	89 ee                	mov    esi,ebp
c001d84f:	31 c0                	xor    eax,eax
c001d851:	c1 e6 07             	shl    esi,0x7
c001d854:	01 d6                	add    esi,edx
c001d856:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d85c:	80 e1 88             	and    cl,0x88
c001d85f:	74 0a                	je     c001d86b <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d861:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d866:	74 0a                	je     c001d872 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d868:	40                   	inc    eax
c001d869:	eb eb                	jmp    c001d856 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d86b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d870:	75 17                	jne    c001d889 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d872:	83 ec 0c             	sub    esp,0xc
c001d875:	68 05 2d 02 c0       	push   0xc0022d05
c001d87a:	e8 8b d0 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d87f:	83 c4 10             	add    esp,0x10
c001d882:	b8 01 00 00 00       	mov    eax,0x1
c001d887:	eb 5b                	jmp    c001d8e4 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d889:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d88d:	c1 e5 07             	shl    ebp,0x7
c001d890:	b8 01 00 00 00       	mov    eax,0x1
c001d895:	01 ea                	add    edx,ebp
c001d897:	d3 e0                	shl    eax,cl
c001d899:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d89f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d8a5:	85 c8                	test   eax,ecx
c001d8a7:	74 16                	je     c001d8bf <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d8a9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d8af:	0f ba e1 1e          	bt     ecx,0x1e
c001d8b3:	73 ea                	jae    c001d89f <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d8b5:	83 ec 0c             	sub    esp,0xc
c001d8b8:	68 13 2d 02 c0       	push   0xc0022d13
c001d8bd:	eb bb                	jmp    c001d87a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d8bf:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d8c5:	0f ba e0 1e          	bt     eax,0x1e
c001d8c9:	72 b7                	jb     c001d882 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d8cb:	31 c0                	xor    eax,eax
c001d8cd:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d8d2:	75 10                	jne    c001d8e4 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d8d4:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d8da:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d8de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d8e4:	83 c4 2c             	add    esp,0x2c
c001d8e7:	5b                   	pop    ebx
c001d8e8:	5e                   	pop    esi
c001d8e9:	5f                   	pop    edi
c001d8ea:	5d                   	pop    ebp
c001d8eb:	c3                   	ret    

c001d8ec <SATA::read(unsigned long long, int, void*)>:
c001d8ec:	55                   	push   ebp
c001d8ed:	57                   	push   edi
c001d8ee:	56                   	push   esi
c001d8ef:	be 04 00 00 00       	mov    esi,0x4
c001d8f4:	53                   	push   ebx
c001d8f5:	83 ec 0c             	sub    esp,0xc
c001d8f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d8fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d900:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d904:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d908:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d90b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d911:	0f 87 1a 02 00 00    	ja     c001db31 <SATA::read(unsigned long long, int, void*)+0x245>
c001d917:	85 c9                	test   ecx,ecx
c001d919:	be 06 00 00 00       	mov    esi,0x6
c001d91e:	0f 84 0d 02 00 00    	je     c001db31 <SATA::read(unsigned long long, int, void*)+0x245>
c001d924:	56                   	push   esi
c001d925:	56                   	push   esi
c001d926:	6a 00                	push   0x0
c001d928:	51                   	push   ecx
c001d929:	53                   	push   ebx
c001d92a:	52                   	push   edx
c001d92b:	50                   	push   eax
c001d92c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d930:	e8 65 fd ff ff       	call   c001d69a <SATA::access(unsigned long long, int, void*, bool)>
c001d935:	83 c4 20             	add    esp,0x20
c001d938:	85 c0                	test   eax,eax
c001d93a:	89 c6                	mov    esi,eax
c001d93c:	0f 85 ea 01 00 00    	jne    c001db2c <SATA::read(unsigned long long, int, void*)+0x240>
c001d942:	50                   	push   eax
c001d943:	50                   	push   eax
c001d944:	6a 0f                	push   0xf
c001d946:	6a 00                	push   0x0
c001d948:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001d94e:	bb 0a 00 00 00       	mov    ebx,0xa
c001d953:	e8 7d f2 ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001d958:	5a                   	pop    edx
c001d959:	59                   	pop    ecx
c001d95a:	b9 10 27 00 00       	mov    ecx,0x2710
c001d95f:	0f b6 c0             	movzx  eax,al
c001d962:	50                   	push   eax
c001d963:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d968:	99                   	cdq    
c001d969:	f7 f9                	idiv   ecx
c001d96b:	99                   	cdq    
c001d96c:	f7 fb                	idiv   ebx
c001d96e:	8d 42 30             	lea    eax,[edx+0x30]
c001d971:	0f b6 c0             	movzx  eax,al
c001d974:	50                   	push   eax
c001d975:	e8 4a f2 ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001d97a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d980:	5f                   	pop    edi
c001d981:	5d                   	pop    ebp
c001d982:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d987:	6a 0f                	push   0xf
c001d989:	6a 00                	push   0x0
c001d98b:	e8 45 f2 ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001d990:	5a                   	pop    edx
c001d991:	59                   	pop    ecx
c001d992:	0f b6 c0             	movzx  eax,al
c001d995:	50                   	push   eax
c001d996:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d99b:	99                   	cdq    
c001d99c:	f7 fd                	idiv   ebp
c001d99e:	99                   	cdq    
c001d99f:	f7 fb                	idiv   ebx
c001d9a1:	8d 42 30             	lea    eax,[edx+0x30]
c001d9a4:	0f b6 c0             	movzx  eax,al
c001d9a7:	50                   	push   eax
c001d9a8:	e8 17 f2 ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001d9ad:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d9b3:	5f                   	pop    edi
c001d9b4:	bf 64 00 00 00       	mov    edi,0x64
c001d9b9:	58                   	pop    eax
c001d9ba:	6a 0f                	push   0xf
c001d9bc:	6a 00                	push   0x0
c001d9be:	e8 12 f2 ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001d9c3:	5a                   	pop    edx
c001d9c4:	59                   	pop    ecx
c001d9c5:	0f b6 c0             	movzx  eax,al
c001d9c8:	50                   	push   eax
c001d9c9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d9ce:	99                   	cdq    
c001d9cf:	f7 ff                	idiv   edi
c001d9d1:	99                   	cdq    
c001d9d2:	f7 fb                	idiv   ebx
c001d9d4:	8d 42 30             	lea    eax,[edx+0x30]
c001d9d7:	0f b6 c0             	movzx  eax,al
c001d9da:	50                   	push   eax
c001d9db:	e8 e4 f1 ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001d9e0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d9e6:	58                   	pop    eax
c001d9e7:	5a                   	pop    edx
c001d9e8:	6a 0f                	push   0xf
c001d9ea:	6a 00                	push   0x0
c001d9ec:	e8 e4 f1 ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001d9f1:	59                   	pop    ecx
c001d9f2:	5a                   	pop    edx
c001d9f3:	0f b6 c0             	movzx  eax,al
c001d9f6:	50                   	push   eax
c001d9f7:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d9fc:	99                   	cdq    
c001d9fd:	f7 fb                	idiv   ebx
c001d9ff:	99                   	cdq    
c001da00:	f7 fb                	idiv   ebx
c001da02:	8d 42 30             	lea    eax,[edx+0x30]
c001da05:	0f b6 c0             	movzx  eax,al
c001da08:	50                   	push   eax
c001da09:	e8 b6 f1 ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001da0e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001da14:	59                   	pop    ecx
c001da15:	58                   	pop    eax
c001da16:	6a 0f                	push   0xf
c001da18:	6a 00                	push   0x0
c001da1a:	e8 b6 f1 ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001da1f:	5a                   	pop    edx
c001da20:	59                   	pop    ecx
c001da21:	0f b6 c0             	movzx  eax,al
c001da24:	50                   	push   eax
c001da25:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da2a:	99                   	cdq    
c001da2b:	f7 fb                	idiv   ebx
c001da2d:	83 c2 30             	add    edx,0x30
c001da30:	0f b6 d2             	movzx  edx,dl
c001da33:	52                   	push   edx
c001da34:	e8 8b f1 ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001da39:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001da3f:	58                   	pop    eax
c001da40:	5a                   	pop    edx
c001da41:	6a 0f                	push   0xf
c001da43:	6a 00                	push   0x0
c001da45:	e8 8b f1 ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001da4a:	59                   	pop    ecx
c001da4b:	b9 10 27 00 00       	mov    ecx,0x2710
c001da50:	5a                   	pop    edx
c001da51:	0f b6 c0             	movzx  eax,al
c001da54:	50                   	push   eax
c001da55:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001da5a:	99                   	cdq    
c001da5b:	f7 f9                	idiv   ecx
c001da5d:	99                   	cdq    
c001da5e:	f7 fb                	idiv   ebx
c001da60:	8d 42 30             	lea    eax,[edx+0x30]
c001da63:	0f b6 c0             	movzx  eax,al
c001da66:	50                   	push   eax
c001da67:	e8 58 f1 ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001da6c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001da72:	59                   	pop    ecx
c001da73:	58                   	pop    eax
c001da74:	6a 0f                	push   0xf
c001da76:	6a 00                	push   0x0
c001da78:	e8 58 f1 ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001da7d:	5a                   	pop    edx
c001da7e:	59                   	pop    ecx
c001da7f:	0f b6 c0             	movzx  eax,al
c001da82:	50                   	push   eax
c001da83:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001da88:	99                   	cdq    
c001da89:	f7 fd                	idiv   ebp
c001da8b:	99                   	cdq    
c001da8c:	f7 fb                	idiv   ebx
c001da8e:	8d 42 30             	lea    eax,[edx+0x30]
c001da91:	0f b6 c0             	movzx  eax,al
c001da94:	50                   	push   eax
c001da95:	e8 2a f1 ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001da9a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001daa0:	5d                   	pop    ebp
c001daa1:	58                   	pop    eax
c001daa2:	6a 0f                	push   0xf
c001daa4:	6a 00                	push   0x0
c001daa6:	e8 2a f1 ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001daab:	5a                   	pop    edx
c001daac:	59                   	pop    ecx
c001daad:	0f b6 c0             	movzx  eax,al
c001dab0:	50                   	push   eax
c001dab1:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dab6:	99                   	cdq    
c001dab7:	f7 ff                	idiv   edi
c001dab9:	99                   	cdq    
c001daba:	f7 fb                	idiv   ebx
c001dabc:	8d 42 30             	lea    eax,[edx+0x30]
c001dabf:	0f b6 c0             	movzx  eax,al
c001dac2:	50                   	push   eax
c001dac3:	e8 fc f0 ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001dac8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dace:	5f                   	pop    edi
c001dacf:	5d                   	pop    ebp
c001dad0:	6a 0f                	push   0xf
c001dad2:	6a 00                	push   0x0
c001dad4:	e8 fc f0 ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001dad9:	5a                   	pop    edx
c001dada:	59                   	pop    ecx
c001dadb:	0f b6 c0             	movzx  eax,al
c001dade:	50                   	push   eax
c001dadf:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dae4:	99                   	cdq    
c001dae5:	f7 fb                	idiv   ebx
c001dae7:	99                   	cdq    
c001dae8:	f7 fb                	idiv   ebx
c001daea:	8d 42 30             	lea    eax,[edx+0x30]
c001daed:	0f b6 c0             	movzx  eax,al
c001daf0:	50                   	push   eax
c001daf1:	e8 ce f0 ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001daf6:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dafc:	5f                   	pop    edi
c001dafd:	5d                   	pop    ebp
c001dafe:	6a 0f                	push   0xf
c001db00:	6a 00                	push   0x0
c001db02:	e8 ce f0 ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001db07:	5a                   	pop    edx
c001db08:	59                   	pop    ecx
c001db09:	0f b6 c0             	movzx  eax,al
c001db0c:	50                   	push   eax
c001db0d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db12:	99                   	cdq    
c001db13:	f7 fb                	idiv   ebx
c001db15:	83 c2 30             	add    edx,0x30
c001db18:	0f b6 d2             	movzx  edx,dl
c001db1b:	52                   	push   edx
c001db1c:	e8 a3 f0 ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001db21:	83 c4 10             	add    esp,0x10
c001db24:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001db2a:	eb 05                	jmp    c001db31 <SATA::read(unsigned long long, int, void*)+0x245>
c001db2c:	be 01 00 00 00       	mov    esi,0x1
c001db31:	83 c4 0c             	add    esp,0xc
c001db34:	89 f0                	mov    eax,esi
c001db36:	5b                   	pop    ebx
c001db37:	5e                   	pop    esi
c001db38:	5f                   	pop    edi
c001db39:	5d                   	pop    ebp
c001db3a:	c3                   	ret    
c001db3b:	90                   	nop

c001db3c <SATA::write(unsigned long long, int, void*)>:
c001db3c:	55                   	push   ebp
c001db3d:	57                   	push   edi
c001db3e:	56                   	push   esi
c001db3f:	53                   	push   ebx
c001db40:	83 ec 0c             	sub    esp,0xc
c001db43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001db47:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001db4b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001db4f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db53:	8d 70 ff             	lea    esi,[eax-0x1]
c001db56:	b8 04 00 00 00       	mov    eax,0x4
c001db5b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001db61:	0f 87 2c 02 00 00    	ja     c001dd93 <SATA::write(unsigned long long, int, void*)+0x257>
c001db67:	85 db                	test   ebx,ebx
c001db69:	b8 06 00 00 00       	mov    eax,0x6
c001db6e:	0f 84 1f 02 00 00    	je     c001dd93 <SATA::write(unsigned long long, int, void*)+0x257>
c001db74:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001db78:	c1 e6 09             	shl    esi,0x9
c001db7b:	01 de                	add    esi,ebx
c001db7d:	50                   	push   eax
c001db7e:	89 d7                	mov    edi,edx
c001db80:	50                   	push   eax
c001db81:	83 c7 01             	add    edi,0x1
c001db84:	6a 01                	push   0x1
c001db86:	89 cd                	mov    ebp,ecx
c001db88:	53                   	push   ebx
c001db89:	83 d5 00             	adc    ebp,0x0
c001db8c:	6a 01                	push   0x1
c001db8e:	81 c3 00 02 00 00    	add    ebx,0x200
c001db94:	51                   	push   ecx
c001db95:	52                   	push   edx
c001db96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db9a:	e8 fb fa ff ff       	call   c001d69a <SATA::access(unsigned long long, int, void*, bool)>
c001db9f:	83 c4 20             	add    esp,0x20
c001dba2:	39 f3                	cmp    ebx,esi
c001dba4:	89 fa                	mov    edx,edi
c001dba6:	89 e9                	mov    ecx,ebp
c001dba8:	75 d3                	jne    c001db7d <SATA::write(unsigned long long, int, void*)+0x41>
c001dbaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dbae:	bd 10 27 00 00       	mov    ebp,0x2710
c001dbb3:	bb 0a 00 00 00       	mov    ebx,0xa
c001dbb8:	01 05 b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,eax
c001dbbe:	50                   	push   eax
c001dbbf:	50                   	push   eax
c001dbc0:	6a 0f                	push   0xf
c001dbc2:	6a 00                	push   0x0
c001dbc4:	e8 0c f0 ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001dbc9:	5a                   	pop    edx
c001dbca:	59                   	pop    ecx
c001dbcb:	0f b6 c0             	movzx  eax,al
c001dbce:	50                   	push   eax
c001dbcf:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbd4:	99                   	cdq    
c001dbd5:	f7 fd                	idiv   ebp
c001dbd7:	99                   	cdq    
c001dbd8:	f7 fb                	idiv   ebx
c001dbda:	8d 42 30             	lea    eax,[edx+0x30]
c001dbdd:	0f b6 c0             	movzx  eax,al
c001dbe0:	50                   	push   eax
c001dbe1:	e8 de ef ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001dbe6:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dbec:	5e                   	pop    esi
c001dbed:	5f                   	pop    edi
c001dbee:	bf e8 03 00 00       	mov    edi,0x3e8
c001dbf3:	6a 0f                	push   0xf
c001dbf5:	6a 00                	push   0x0
c001dbf7:	e8 d9 ef ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001dbfc:	5a                   	pop    edx
c001dbfd:	59                   	pop    ecx
c001dbfe:	0f b6 c0             	movzx  eax,al
c001dc01:	50                   	push   eax
c001dc02:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc07:	99                   	cdq    
c001dc08:	f7 ff                	idiv   edi
c001dc0a:	99                   	cdq    
c001dc0b:	f7 fb                	idiv   ebx
c001dc0d:	8d 42 30             	lea    eax,[edx+0x30]
c001dc10:	0f b6 c0             	movzx  eax,al
c001dc13:	50                   	push   eax
c001dc14:	e8 ab ef ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001dc19:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dc1f:	5e                   	pop    esi
c001dc20:	be 64 00 00 00       	mov    esi,0x64
c001dc25:	58                   	pop    eax
c001dc26:	6a 0f                	push   0xf
c001dc28:	6a 00                	push   0x0
c001dc2a:	e8 a6 ef ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001dc2f:	5a                   	pop    edx
c001dc30:	59                   	pop    ecx
c001dc31:	0f b6 c0             	movzx  eax,al
c001dc34:	50                   	push   eax
c001dc35:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc3a:	99                   	cdq    
c001dc3b:	f7 fe                	idiv   esi
c001dc3d:	99                   	cdq    
c001dc3e:	f7 fb                	idiv   ebx
c001dc40:	8d 42 30             	lea    eax,[edx+0x30]
c001dc43:	0f b6 c0             	movzx  eax,al
c001dc46:	50                   	push   eax
c001dc47:	e8 78 ef ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001dc4c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dc52:	58                   	pop    eax
c001dc53:	5a                   	pop    edx
c001dc54:	6a 0f                	push   0xf
c001dc56:	6a 00                	push   0x0
c001dc58:	e8 78 ef ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001dc5d:	59                   	pop    ecx
c001dc5e:	5a                   	pop    edx
c001dc5f:	0f b6 c0             	movzx  eax,al
c001dc62:	50                   	push   eax
c001dc63:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc68:	99                   	cdq    
c001dc69:	f7 fb                	idiv   ebx
c001dc6b:	99                   	cdq    
c001dc6c:	f7 fb                	idiv   ebx
c001dc6e:	8d 42 30             	lea    eax,[edx+0x30]
c001dc71:	0f b6 c0             	movzx  eax,al
c001dc74:	50                   	push   eax
c001dc75:	e8 4a ef ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001dc7a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc80:	59                   	pop    ecx
c001dc81:	58                   	pop    eax
c001dc82:	6a 0f                	push   0xf
c001dc84:	6a 00                	push   0x0
c001dc86:	e8 4a ef ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001dc8b:	5a                   	pop    edx
c001dc8c:	59                   	pop    ecx
c001dc8d:	0f b6 c0             	movzx  eax,al
c001dc90:	50                   	push   eax
c001dc91:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc96:	99                   	cdq    
c001dc97:	f7 fb                	idiv   ebx
c001dc99:	83 c2 30             	add    edx,0x30
c001dc9c:	0f b6 d2             	movzx  edx,dl
c001dc9f:	52                   	push   edx
c001dca0:	e8 1f ef ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001dca5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dcab:	58                   	pop    eax
c001dcac:	5a                   	pop    edx
c001dcad:	6a 0f                	push   0xf
c001dcaf:	6a 00                	push   0x0
c001dcb1:	e8 1f ef ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001dcb6:	59                   	pop    ecx
c001dcb7:	5a                   	pop    edx
c001dcb8:	0f b6 c0             	movzx  eax,al
c001dcbb:	50                   	push   eax
c001dcbc:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcc1:	99                   	cdq    
c001dcc2:	f7 fd                	idiv   ebp
c001dcc4:	99                   	cdq    
c001dcc5:	f7 fb                	idiv   ebx
c001dcc7:	8d 42 30             	lea    eax,[edx+0x30]
c001dcca:	0f b6 c0             	movzx  eax,al
c001dccd:	50                   	push   eax
c001dcce:	e8 f1 ee ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001dcd3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dcd9:	59                   	pop    ecx
c001dcda:	5d                   	pop    ebp
c001dcdb:	6a 0f                	push   0xf
c001dcdd:	6a 00                	push   0x0
c001dcdf:	e8 f1 ee ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001dce4:	5a                   	pop    edx
c001dce5:	59                   	pop    ecx
c001dce6:	0f b6 c0             	movzx  eax,al
c001dce9:	50                   	push   eax
c001dcea:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcef:	99                   	cdq    
c001dcf0:	f7 ff                	idiv   edi
c001dcf2:	99                   	cdq    
c001dcf3:	f7 fb                	idiv   ebx
c001dcf5:	8d 42 30             	lea    eax,[edx+0x30]
c001dcf8:	0f b6 c0             	movzx  eax,al
c001dcfb:	50                   	push   eax
c001dcfc:	e8 c3 ee ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001dd01:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dd07:	5f                   	pop    edi
c001dd08:	5d                   	pop    ebp
c001dd09:	6a 0f                	push   0xf
c001dd0b:	6a 00                	push   0x0
c001dd0d:	e8 c3 ee ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001dd12:	5a                   	pop    edx
c001dd13:	59                   	pop    ecx
c001dd14:	0f b6 c0             	movzx  eax,al
c001dd17:	50                   	push   eax
c001dd18:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd1d:	99                   	cdq    
c001dd1e:	f7 fe                	idiv   esi
c001dd20:	99                   	cdq    
c001dd21:	f7 fb                	idiv   ebx
c001dd23:	8d 42 30             	lea    eax,[edx+0x30]
c001dd26:	0f b6 c0             	movzx  eax,al
c001dd29:	50                   	push   eax
c001dd2a:	e8 95 ee ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001dd2f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dd35:	5e                   	pop    esi
c001dd36:	5f                   	pop    edi
c001dd37:	6a 0f                	push   0xf
c001dd39:	6a 00                	push   0x0
c001dd3b:	e8 95 ee ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001dd40:	5d                   	pop    ebp
c001dd41:	5a                   	pop    edx
c001dd42:	0f b6 c0             	movzx  eax,al
c001dd45:	50                   	push   eax
c001dd46:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd4b:	99                   	cdq    
c001dd4c:	f7 fb                	idiv   ebx
c001dd4e:	99                   	cdq    
c001dd4f:	f7 fb                	idiv   ebx
c001dd51:	8d 42 30             	lea    eax,[edx+0x30]
c001dd54:	0f b6 c0             	movzx  eax,al
c001dd57:	50                   	push   eax
c001dd58:	e8 67 ee ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001dd5d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dd63:	59                   	pop    ecx
c001dd64:	5e                   	pop    esi
c001dd65:	6a 0f                	push   0xf
c001dd67:	6a 00                	push   0x0
c001dd69:	e8 67 ee ff ff       	call   c001cbd5 <combineColours(unsigned char, unsigned char)>
c001dd6e:	5f                   	pop    edi
c001dd6f:	5d                   	pop    ebp
c001dd70:	0f b6 c0             	movzx  eax,al
c001dd73:	50                   	push   eax
c001dd74:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd79:	99                   	cdq    
c001dd7a:	f7 fb                	idiv   ebx
c001dd7c:	83 c2 30             	add    edx,0x30
c001dd7f:	0f b6 d2             	movzx  edx,dl
c001dd82:	52                   	push   edx
c001dd83:	e8 3c ee ff ff       	call   c001cbc4 <combineCharAndColour(char, unsigned char)>
c001dd88:	83 c4 10             	add    esp,0x10
c001dd8b:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dd91:	31 c0                	xor    eax,eax
c001dd93:	83 c4 0c             	add    esp,0xc
c001dd96:	5b                   	pop    ebx
c001dd97:	5e                   	pop    esi
c001dd98:	5f                   	pop    edi
c001dd99:	5d                   	pop    ebp
c001dd9a:	c3                   	ret    
c001dd9b:	90                   	nop

c001dd9c <SATAPI::write(unsigned long long, int, void*)>:
c001dd9c:	b8 03 00 00 00       	mov    eax,0x3
c001dda1:	c3                   	ret    

c001dda2 <SATAPI::close(int, int, void*)>:
c001dda2:	83 ec 0c             	sub    esp,0xc
c001dda5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dda9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ddaf:	85 c0                	test   eax,eax
c001ddb1:	74 0c                	je     c001ddbf <SATAPI::close(int, int, void*)+0x1d>
c001ddb3:	8b 10                	mov    edx,DWORD PTR [eax]
c001ddb5:	83 ec 0c             	sub    esp,0xc
c001ddb8:	50                   	push   eax
c001ddb9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ddbc:	83 c4 10             	add    esp,0x10
c001ddbf:	31 c0                	xor    eax,eax
c001ddc1:	83 c4 0c             	add    esp,0xc
c001ddc4:	c3                   	ret    
c001ddc5:	90                   	nop

c001ddc6 <SATAPI::SATAPI()>:
c001ddc6:	83 ec 0c             	sub    esp,0xc
c001ddc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddcd:	83 ec 04             	sub    esp,0x4
c001ddd0:	68 00 08 00 00       	push   0x800
c001ddd5:	68 5c 2d 02 c0       	push   0xc0022d5c
c001ddda:	50                   	push   eax
c001dddb:	e8 16 ec fe ff       	call   c000c9f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dde0:	83 c4 10             	add    esp,0x10
c001dde3:	ba 50 2e 02 c0       	mov    edx,0xc0022e50
c001dde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddec:	89 10                	mov    DWORD PTR [eax],edx
c001ddee:	90                   	nop
c001ddef:	83 c4 0c             	add    esp,0xc
c001ddf2:	c3                   	ret    
c001ddf3:	90                   	nop

c001ddf4 <SATAPI::diskRemoved()>:
c001ddf4:	c3                   	ret    
c001ddf5:	90                   	nop

c001ddf6 <SATAPI::diskInserted()>:
c001ddf6:	83 ec 18             	sub    esp,0x18
c001ddf9:	68 68 2d 02 c0       	push   0xc0022d68
c001ddfe:	e8 07 cb fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001de03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de07:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001de0e:	83 c4 1c             	add    esp,0x1c
c001de11:	c3                   	ret    

c001de12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001de12:	55                   	push   ebp
c001de13:	57                   	push   edi
c001de14:	56                   	push   esi
c001de15:	53                   	push   ebx
c001de16:	83 ec 34             	sub    esp,0x34
c001de19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001de1d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001de21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de25:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001de29:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de2d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001de33:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de39:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de3d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001de43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001de47:	83 c0 02             	add    eax,0x2
c001de4a:	c1 e0 07             	shl    eax,0x7
c001de4d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de59:	c1 e0 07             	shl    eax,0x7
c001de5c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001de64:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001de6e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001de72:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001de78:	e8 ff e4 ff ff       	call   c001c37c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001de7d:	83 c4 10             	add    esp,0x10
c001de80:	89 c2                	mov    edx,eax
c001de82:	b8 01 00 00 00       	mov    eax,0x1
c001de87:	83 fa ff             	cmp    edx,0xffffffff
c001de8a:	0f 84 5f 02 00 00    	je     c001e0ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001de90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001de94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de98:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de9e:	8b 00                	mov    eax,DWORD PTR [eax]
c001dea0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dea6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001deac:	89 d1                	mov    ecx,edx
c001deae:	c1 e1 05             	shl    ecx,0x5
c001deb1:	01 c8                	add    eax,ecx
c001deb3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001deb5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001debb:	81 c9 25 00 01 00    	or     ecx,0x10025
c001dec1:	89 08                	mov    DWORD PTR [eax],ecx
c001dec3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001dec9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001decf:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001ded5:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001ded8:	50                   	push   eax
c001ded9:	68 90 00 00 00       	push   0x90
c001dede:	6a 00                	push   0x0
c001dee0:	53                   	push   ebx
c001dee1:	e8 0a 26 fe ff       	call   c00004f0 <memset>
c001dee6:	8d 7b 40             	lea    edi,[ebx+0x40]
c001dee9:	b9 0c 00 00 00       	mov    ecx,0xc
c001deee:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001def2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001def4:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001defa:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001defe:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001df02:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001df08:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df0c:	48                   	dec    eax
c001df0d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001df12:	89 c1                	mov    ecx,eax
c001df14:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001df1a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001df1f:	09 c8                	or     eax,ecx
c001df21:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001df27:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001df2d:	83 c8 80             	or     eax,0xffffff80
c001df30:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001df36:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001df39:	25 00 7f 00 00       	and    eax,0x7f00
c001df3e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001df43:	66 89 03             	mov    WORD PTR [ebx],ax
c001df46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df4a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001df4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df52:	c1 e8 10             	shr    eax,0x10
c001df55:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001df58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df5c:	c1 e8 18             	shr    eax,0x18
c001df5f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001df62:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001df66:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001df69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df6d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001df70:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df74:	83 c4 10             	add    esp,0x10
c001df77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df7b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001df7f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001df83:	31 c0                	xor    eax,eax
c001df85:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001df8b:	80 e1 88             	and    cl,0x88
c001df8e:	74 0a                	je     c001df9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001df90:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df95:	74 0a                	je     c001dfa1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001df97:	40                   	inc    eax
c001df98:	eb eb                	jmp    c001df85 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001df9a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df9f:	75 43                	jne    c001dfe4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001dfa1:	83 ec 0c             	sub    esp,0xc
c001dfa4:	68 80 2d 02 c0       	push   0xc0022d80
c001dfa9:	e8 5c c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001dfae:	58                   	pop    eax
c001dfaf:	5a                   	pop    edx
c001dfb0:	68 95 2d 02 c0       	push   0xc0022d95
c001dfb5:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001dfbb:	e8 ec aa fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001dfc0:	59                   	pop    ecx
c001dfc1:	5b                   	pop    ebx
c001dfc2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfc6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dfcc:	e8 45 e4 ff ff       	call   c001c416 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001dfd1:	5e                   	pop    esi
c001dfd2:	5f                   	pop    edi
c001dfd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfd7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dfdd:	e8 14 e4 ff ff       	call   c001c3f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001dfe2:	eb 48                	jmp    c001e02c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001dfe4:	b8 01 00 00 00       	mov    eax,0x1
c001dfe9:	88 d1                	mov    cl,dl
c001dfeb:	d3 e0                	shl    eax,cl
c001dfed:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001dff2:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001dff8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dffc:	89 c7                	mov    edi,eax
c001dffe:	c1 e3 07             	shl    ebx,0x7
c001e001:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e005:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e00b:	85 c7                	test   edi,eax
c001e00d:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e013:	0f 84 a3 00 00 00    	je     c001e0bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e019:	0f ba e0 1e          	bt     eax,0x1e
c001e01d:	73 1a                	jae    c001e039 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e01f:	83 ec 0c             	sub    esp,0xc
c001e022:	68 a7 2d 02 c0       	push   0xc0022da7
c001e027:	e8 de c8 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e02c:	83 c4 10             	add    esp,0x10
c001e02f:	b8 01 00 00 00       	mov    eax,0x1
c001e034:	e9 b6 00 00 00       	jmp    c001e0ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e039:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e03f:	83 f8 0d             	cmp    eax,0xd
c001e042:	77 0a                	ja     c001e04e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e044:	83 ec 0c             	sub    esp,0xc
c001e047:	68 c8 00 00 00       	push   0xc8
c001e04c:	eb 28                	jmp    c001e076 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e04e:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e054:	83 f8 0d             	cmp    eax,0xd
c001e057:	77 0a                	ja     c001e063 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e059:	83 ec 0c             	sub    esp,0xc
c001e05c:	68 58 02 00 00       	push   0x258
c001e061:	eb 13                	jmp    c001e076 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e063:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e069:	83 f8 06             	cmp    eax,0x6
c001e06c:	77 10                	ja     c001e07e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e06e:	83 ec 0c             	sub    esp,0xc
c001e071:	68 dc 05 00 00       	push   0x5dc
c001e076:	e8 69 7d ff ff       	call   c0015de4 <milliTenthSleep(unsigned int)>
c001e07b:	83 c4 10             	add    esp,0x10
c001e07e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e082:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e085:	75 06                	jne    c001e08d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e087:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e08b:	74 15                	je     c001e0a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e08d:	83 fe 06             	cmp    esi,0x6
c001e090:	77 10                	ja     c001e0a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e092:	83 ec 0c             	sub    esp,0xc
c001e095:	68 c4 09 00 00       	push   0x9c4
c001e09a:	e8 45 7d ff ff       	call   c0015de4 <milliTenthSleep(unsigned int)>
c001e09f:	83 c4 10             	add    esp,0x10
c001e0a2:	46                   	inc    esi
c001e0a3:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e0a9:	0f 85 56 ff ff ff    	jne    c001e005 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e0af:	83 ec 0c             	sub    esp,0xc
c001e0b2:	68 ba 2d 02 c0       	push   0xc0022dba
c001e0b7:	e9 6b ff ff ff       	jmp    c001e027 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e0bc:	0f ba e0 1e          	bt     eax,0x1e
c001e0c0:	73 0d                	jae    c001e0cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e0c2:	83 ec 0c             	sub    esp,0xc
c001e0c5:	68 ce 2d 02 c0       	push   0xc0022dce
c001e0ca:	e9 58 ff ff ff       	jmp    c001e027 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e0cf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e0d4:	74 17                	je     c001e0ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e0d6:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e0db:	74 10                	je     c001e0ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e0dd:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e0e3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e0e7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e0eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e0ed:	31 c0                	xor    eax,eax
c001e0ef:	83 c4 2c             	add    esp,0x2c
c001e0f2:	5b                   	pop    ebx
c001e0f3:	5e                   	pop    esi
c001e0f4:	5f                   	pop    edi
c001e0f5:	5d                   	pop    ebp
c001e0f6:	c3                   	ret    
c001e0f7:	90                   	nop

c001e0f8 <SATAPI::eject()>:
c001e0f8:	57                   	push   edi
c001e0f9:	b9 03 00 00 00       	mov    ecx,0x3
c001e0fe:	83 ec 18             	sub    esp,0x18
c001e101:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e105:	fc                   	cld    
c001e106:	31 c0                	xor    eax,eax
c001e108:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e10a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e10f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e114:	50                   	push   eax
c001e115:	6a 00                	push   0x0
c001e117:	6a 00                	push   0x0
c001e119:	6a 00                	push   0x0
c001e11b:	6a 00                	push   0x0
c001e11d:	6a 02                	push   0x2
c001e11f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e123:	50                   	push   eax
c001e124:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e128:	e8 e5 fc ff ff       	call   c001de12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e12d:	83 c4 38             	add    esp,0x38
c001e130:	31 c0                	xor    eax,eax
c001e132:	5f                   	pop    edi
c001e133:	c3                   	ret    

c001e134 <SATAPI::detectMedia()>:
c001e134:	53                   	push   ebx
c001e135:	83 ec 14             	sub    esp,0x14
c001e138:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e13c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e142:	e8 35 02 ff ff       	call   c000e37c <VCache::writeWriteBuffer()>
c001e147:	59                   	pop    ecx
c001e148:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e14e:	e8 19 02 ff ff       	call   c000e36c <VCache::invalidateReadBuffer()>
c001e153:	c7 04 24 e3 2d 02 c0 	mov    DWORD PTR [esp],0xc0022de3
c001e15a:	e8 ab c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e15f:	83 c4 10             	add    esp,0x10
c001e162:	31 c0                	xor    eax,eax
c001e164:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e16b:	85 d2                	test   edx,edx
c001e16d:	74 0f                	je     c001e17e <SATAPI::detectMedia()+0x4a>
c001e16f:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e175:	75 07                	jne    c001e17e <SATAPI::detectMedia()+0x4a>
c001e177:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e17e:	40                   	inc    eax
c001e17f:	83 f8 1a             	cmp    eax,0x1a
c001e182:	75 e0                	jne    c001e164 <SATAPI::detectMedia()+0x30>
c001e184:	83 c4 08             	add    esp,0x8
c001e187:	5b                   	pop    ebx
c001e188:	c3                   	ret    
c001e189:	90                   	nop

c001e18a <SATAPI::open(int, int, void*)>:
c001e18a:	56                   	push   esi
c001e18b:	53                   	push   ebx
c001e18c:	51                   	push   ecx
c001e18d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e191:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e195:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e19f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e1a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1a9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e1b3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e1bd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e1c4:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e1ca:	e8 13 9c fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e1cf:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e1d5:	89 c6                	mov    esi,eax
c001e1d7:	e8 06 9c fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e1dc:	81 c6 00 10 00 00    	add    esi,0x1000
c001e1e2:	39 c6                	cmp    esi,eax
c001e1e4:	74 10                	je     c001e1f6 <SATAPI::open(int, int, void*)+0x6c>
c001e1e6:	83 ec 0c             	sub    esp,0xc
c001e1e9:	68 f8 2d 02 c0       	push   0xc0022df8
c001e1ee:	e8 d2 2f ff ff       	call   c00111c5 <KePanic(char const*)>
c001e1f3:	83 c4 10             	add    esp,0x10
c001e1f6:	83 ec 0c             	sub    esp,0xc
c001e1f9:	6a 02                	push   0x2
c001e1fb:	e8 f5 b3 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e200:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e206:	6a 03                	push   0x3
c001e208:	50                   	push   eax
c001e209:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e20f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e215:	e8 e4 ba fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e21a:	83 c4 14             	add    esp,0x14
c001e21d:	68 78 01 00 00       	push   0x178
c001e222:	e8 ac 98 fe ff       	call   c0007ad3 <malloc>
c001e227:	83 c4 0c             	add    esp,0xc
c001e22a:	6a 00                	push   0x0
c001e22c:	68 ff ff ff 7f       	push   0x7fffffff
c001e231:	6a 00                	push   0x0
c001e233:	6a 00                	push   0x0
c001e235:	53                   	push   ebx
c001e236:	68 0e 2e 02 c0       	push   0xc0022e0e
c001e23b:	89 c6                	mov    esi,eax
c001e23d:	50                   	push   eax
c001e23e:	e8 93 f5 fe ff       	call   c000d7d6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e243:	83 c4 14             	add    esp,0x14
c001e246:	56                   	push   esi
c001e247:	e8 4a f6 fe ff       	call   c000d896 <LogicalDisk::assignDriveLetter()>
c001e24c:	5a                   	pop    edx
c001e24d:	59                   	pop    ecx
c001e24e:	0f be c0             	movsx  eax,al
c001e251:	50                   	push   eax
c001e252:	68 60 2c 02 c0       	push   0xc0022c60
c001e257:	e8 ae c6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e25c:	58                   	pop    eax
c001e25d:	5a                   	pop    edx
c001e25e:	56                   	push   esi
c001e25f:	53                   	push   ebx
c001e260:	e8 c3 e3 fe ff       	call   c000c628 <Device::addChild(Device*)>
c001e265:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e26b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e26e:	e8 eb e7 fe ff       	call   c000ca5e <PhysicalDisk::startCache()>
c001e273:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e27a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e27d:	e8 b2 fe ff ff       	call   c001e134 <SATAPI::detectMedia()>
c001e282:	83 c4 14             	add    esp,0x14
c001e285:	31 c0                	xor    eax,eax
c001e287:	5b                   	pop    ebx
c001e288:	5e                   	pop    esi
c001e289:	c3                   	ret    

c001e28a <SATAPI::read(unsigned long long, int, void*)>:
c001e28a:	55                   	push   ebp
c001e28b:	57                   	push   edi
c001e28c:	56                   	push   esi
c001e28d:	53                   	push   ebx
c001e28e:	83 ec 3c             	sub    esp,0x3c
c001e291:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e295:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e299:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e29d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e2a1:	83 fd 04             	cmp    ebp,0x4
c001e2a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e2a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e2ac:	7e 10                	jle    c001e2be <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e2ae:	83 ec 0c             	sub    esp,0xc
c001e2b1:	68 1c 2e 02 c0       	push   0xc0022e1c
c001e2b6:	e8 0a 2f ff ff       	call   c00111c5 <KePanic(char const*)>
c001e2bb:	83 c4 10             	add    esp,0x10
c001e2be:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e2c4:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e2ca:	51                   	push   ecx
c001e2cb:	50                   	push   eax
c001e2cc:	83 c0 02             	add    eax,0x2
c001e2cf:	c1 e0 07             	shl    eax,0x7
c001e2d2:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e2d8:	50                   	push   eax
c001e2d9:	52                   	push   edx
c001e2da:	e8 61 e1 ff ff       	call   c001c440 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e2df:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e2e3:	b9 03 00 00 00       	mov    ecx,0x3
c001e2e8:	fc                   	cld    
c001e2e9:	31 c0                	xor    eax,eax
c001e2eb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2ed:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e2f2:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e2f7:	83 c4 0c             	add    esp,0xc
c001e2fa:	6a 00                	push   0x0
c001e2fc:	6a 00                	push   0x0
c001e2fe:	6a 00                	push   0x0
c001e300:	6a 00                	push   0x0
c001e302:	6a 02                	push   0x2
c001e304:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e308:	50                   	push   eax
c001e309:	53                   	push   ebx
c001e30a:	e8 03 fb ff ff       	call   c001de12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e30f:	83 c4 20             	add    esp,0x20
c001e312:	85 c0                	test   eax,eax
c001e314:	89 c6                	mov    esi,eax
c001e316:	75 46                	jne    c001e35e <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e318:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e31c:	b9 03 00 00 00       	mov    ecx,0x3
c001e321:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e323:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e327:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e32c:	0f c8                	bswap  eax
c001e32e:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e332:	89 e8                	mov    eax,ebp
c001e334:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e338:	50                   	push   eax
c001e339:	55                   	push   ebp
c001e33a:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e33e:	c1 e5 0b             	shl    ebp,0xb
c001e341:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e345:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e349:	55                   	push   ebp
c001e34a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e34e:	50                   	push   eax
c001e34f:	53                   	push   ebx
c001e350:	e8 bd fa ff ff       	call   c001de12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e355:	83 c4 20             	add    esp,0x20
c001e358:	85 c0                	test   eax,eax
c001e35a:	89 c6                	mov    esi,eax
c001e35c:	74 0c                	je     c001e36a <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e35e:	83 ec 0c             	sub    esp,0xc
c001e361:	53                   	push   ebx
c001e362:	e8 cd fd ff ff       	call   c001e134 <SATAPI::detectMedia()>
c001e367:	83 c4 10             	add    esp,0x10
c001e36a:	83 c4 3c             	add    esp,0x3c
c001e36d:	89 f0                	mov    eax,esi
c001e36f:	5b                   	pop    ebx
c001e370:	5e                   	pop    esi
c001e371:	5f                   	pop    edi
c001e372:	5d                   	pop    ebp
c001e373:	c3                   	ret    

c001e374 <IOAPIC::close(int, int, void*)>:
c001e374:	b8 00 00 00 00       	mov    eax,0x0
c001e379:	c3                   	ret    

c001e37a <apicGetBase()>:
c001e37a:	55                   	push   ebp
c001e37b:	89 e5                	mov    ebp,esp
c001e37d:	83 ec 18             	sub    esp,0x18
c001e380:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e385:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e38b:	83 e0 08             	and    eax,0x8
c001e38e:	0f b6 c0             	movzx  eax,al
c001e391:	85 c0                	test   eax,eax
c001e393:	75 07                	jne    c001e39c <apicGetBase()+0x22>
c001e395:	b8 00 00 00 00       	mov    eax,0x0
c001e39a:	eb 21                	jmp    c001e3bd <apicGetBase()+0x43>
c001e39c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e3a1:	83 ec 08             	sub    esp,0x8
c001e3a4:	6a 1b                	push   0x1b
c001e3a6:	50                   	push   eax
c001e3a7:	e8 36 8d fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e3ac:	83 c4 10             	add    esp,0x10
c001e3af:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e3b2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e3b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e3b8:	25 00 00 ff ff       	and    eax,0xffff0000
c001e3bd:	c9                   	leave  
c001e3be:	c3                   	ret    
c001e3bf:	90                   	nop

c001e3c0 <IOAPIC::IOAPIC()>:
c001e3c0:	83 ec 0c             	sub    esp,0xc
c001e3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c7:	83 ec 08             	sub    esp,0x8
c001e3ca:	68 80 2e 02 c0       	push   0xc0022e80
c001e3cf:	50                   	push   eax
c001e3d0:	e8 eb e3 fe ff       	call   c000c7c0 <Device::Device(char const*)>
c001e3d5:	83 c4 10             	add    esp,0x10
c001e3d8:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c001e3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e1:	89 10                	mov    DWORD PTR [eax],edx
c001e3e3:	90                   	nop
c001e3e4:	83 c4 0c             	add    esp,0xc
c001e3e7:	c3                   	ret    

c001e3e8 <apicOpen()>:
c001e3e8:	55                   	push   ebp
c001e3e9:	89 e5                	mov    ebp,esp
c001e3eb:	53                   	push   ebx
c001e3ec:	83 ec 34             	sub    esp,0x34
c001e3ef:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e3f4:	83 f0 01             	xor    eax,0x1
c001e3f7:	0f b6 c0             	movzx  eax,al
c001e3fa:	85 c0                	test   eax,eax
c001e3fc:	0f 84 a3 00 00 00    	je     c001e4a5 <apicOpen()+0xbd>
c001e402:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e406:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e40b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e40f:	0f b6 c0             	movzx  eax,al
c001e412:	39 c2                	cmp    edx,eax
c001e414:	0f 83 84 00 00 00    	jae    c001e49e <apicOpen()+0xb6>
c001e41a:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e421:	83 ec 0c             	sub    esp,0xc
c001e424:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e427:	e8 a7 96 fe ff       	call   c0007ad3 <malloc>
c001e42c:	83 c4 10             	add    esp,0x10
c001e42f:	89 c3                	mov    ebx,eax
c001e431:	83 ec 0c             	sub    esp,0xc
c001e434:	53                   	push   ebx
c001e435:	e8 86 ff ff ff       	call   c001e3c0 <IOAPIC::IOAPIC()>
c001e43a:	83 c4 10             	add    esp,0x10
c001e43d:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e440:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e444:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e447:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e44e:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e453:	83 c0 01             	add    eax,0x1
c001e456:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e45b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e460:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e466:	83 ec 08             	sub    esp,0x8
c001e469:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e46c:	50                   	push   eax
c001e46d:	e8 b6 e1 fe ff       	call   c000c628 <Device::addChild(Device*)>
c001e472:	83 c4 10             	add    esp,0x10
c001e475:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e478:	8b 00                	mov    eax,DWORD PTR [eax]
c001e47a:	83 c0 08             	add    eax,0x8
c001e47d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e47f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e483:	6a 00                	push   0x0
c001e485:	6a 00                	push   0x0
c001e487:	52                   	push   edx
c001e488:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e48b:	ff d0                	call   eax
c001e48d:	83 c4 10             	add    esp,0x10
c001e490:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e493:	83 c0 01             	add    eax,0x1
c001e496:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e499:	e9 68 ff ff ff       	jmp    c001e406 <apicOpen()+0x1e>
c001e49e:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e4a5:	e8 d0 fe ff ff       	call   c001e37a <apicGetBase()>
c001e4aa:	05 f0 00 00 00       	add    eax,0xf0
c001e4af:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e4b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e4b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4b7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e4ba:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e4c1:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e4c8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e4cb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e4ce:	89 10                	mov    DWORD PTR [eax],edx
c001e4d0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e4d7:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e4dc:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e4df:	7d 7c                	jge    c001e55d <apicOpen()+0x175>
c001e4e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4e4:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e4eb:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e4ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4f1:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e4f8:	c1 e8 08             	shr    eax,0x8
c001e4fb:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e4ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e502:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e509:	c1 e8 18             	shr    eax,0x18
c001e50c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e50f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e513:	3d ff 00 00 00       	cmp    eax,0xff
c001e518:	75 3a                	jne    c001e554 <apicOpen()+0x16c>
c001e51a:	e8 5b fe ff ff       	call   c001e37a <apicGetBase()>
c001e51f:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e523:	83 fa 01             	cmp    edx,0x1
c001e526:	75 07                	jne    c001e52f <apicOpen()+0x147>
c001e528:	ba 60 03 00 00       	mov    edx,0x360
c001e52d:	eb 05                	jmp    c001e534 <apicOpen()+0x14c>
c001e52f:	ba 50 03 00 00       	mov    edx,0x350
c001e534:	01 d0                	add    eax,edx
c001e536:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e539:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e53c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e53e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e541:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e548:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e54c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e54f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e552:	89 10                	mov    DWORD PTR [eax],edx
c001e554:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e558:	e9 7a ff ff ff       	jmp    c001e4d7 <apicOpen()+0xef>
c001e55d:	90                   	nop
c001e55e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e561:	c9                   	leave  
c001e562:	c3                   	ret    
c001e563:	90                   	nop

c001e564 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e564:	55                   	push   ebp
c001e565:	89 e5                	mov    ebp,esp
c001e567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e56a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e570:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e573:	72 1d                	jb     c001e592 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e578:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e57e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e581:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e587:	01 d0                	add    eax,edx
c001e589:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e58c:	73 04                	jae    c001e592 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e58e:	b0 01                	mov    al,0x1
c001e590:	eb 02                	jmp    c001e594 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e592:	b0 00                	mov    al,0x0
c001e594:	5d                   	pop    ebp
c001e595:	c3                   	ret    

c001e596 <IOAPIC::read(int)>:
c001e596:	55                   	push   ebp
c001e597:	89 e5                	mov    ebp,esp
c001e599:	83 ec 10             	sub    esp,0x10
c001e59c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e59f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5a5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5ab:	0f b6 d0             	movzx  edx,al
c001e5ae:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5b1:	89 10                	mov    DWORD PTR [eax],edx
c001e5b3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5b6:	83 c0 10             	add    eax,0x10
c001e5b9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5bb:	c9                   	leave  
c001e5bc:	c3                   	ret    
c001e5bd:	90                   	nop

c001e5be <IOAPIC::open(int, int, void*)>:
c001e5be:	55                   	push   ebp
c001e5bf:	89 e5                	mov    ebp,esp
c001e5c1:	57                   	push   edi
c001e5c2:	56                   	push   esi
c001e5c3:	53                   	push   ebx
c001e5c4:	83 ec 04             	sub    esp,0x4
c001e5c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e5cd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e5d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5d6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e5dc:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e5e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5e6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e5ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e5f5:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e5fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5ff:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e608:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e60e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e611:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e617:	0f b6 f0             	movzx  esi,al
c001e61a:	89 d0                	mov    eax,edx
c001e61c:	ba 00 00 00 00       	mov    edx,0x0
c001e621:	89 c7                	mov    edi,eax
c001e623:	83 e7 ff             	and    edi,0xffffffff
c001e626:	89 f9                	mov    ecx,edi
c001e628:	0f b6 da             	movzx  ebx,dl
c001e62b:	89 c8                	mov    eax,ecx
c001e62d:	89 da                	mov    edx,ebx
c001e62f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e632:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e635:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e639:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e63d:	83 e0 00             	and    eax,0x0
c001e640:	09 d0                	or     eax,edx
c001e642:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e649:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e64f:	8d 50 01             	lea    edx,[eax+0x1]
c001e652:	88 d1                	mov    cl,dl
c001e654:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e657:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e65d:	0f b6 d0             	movzx  edx,al
c001e660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e663:	83 c2 08             	add    edx,0x8
c001e666:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e66a:	0f b6 c9             	movzx  ecx,cl
c001e66d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e673:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e677:	6a 01                	push   0x1
c001e679:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e67c:	e8 15 ff ff ff       	call   c001e596 <IOAPIC::read(int)>
c001e681:	83 c4 08             	add    esp,0x8
c001e684:	c1 f8 10             	sar    eax,0x10
c001e687:	0f b6 c0             	movzx  eax,al
c001e68a:	8d 50 01             	lea    edx,[eax+0x1]
c001e68d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e690:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e696:	b8 00 00 00 00       	mov    eax,0x0
c001e69b:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e69e:	5b                   	pop    ebx
c001e69f:	5e                   	pop    esi
c001e6a0:	5f                   	pop    edi
c001e6a1:	5d                   	pop    ebp
c001e6a2:	c3                   	ret    
c001e6a3:	90                   	nop

c001e6a4 <IOAPIC::write(int, int)>:
c001e6a4:	55                   	push   ebp
c001e6a5:	89 e5                	mov    ebp,esp
c001e6a7:	83 ec 10             	sub    esp,0x10
c001e6aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6ad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6b3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e6b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6b9:	0f b6 d0             	movzx  edx,al
c001e6bc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6bf:	89 10                	mov    DWORD PTR [eax],edx
c001e6c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6c4:	8d 50 10             	lea    edx,[eax+0x10]
c001e6c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e6ca:	89 02                	mov    DWORD PTR [edx],eax
c001e6cc:	90                   	nop
c001e6cd:	c9                   	leave  
c001e6ce:	c3                   	ret    
c001e6cf:	90                   	nop

c001e6d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e6d0:	55                   	push   ebp
c001e6d1:	89 e5                	mov    ebp,esp
c001e6d3:	53                   	push   ebx
c001e6d4:	83 ec 2c             	sub    esp,0x2c
c001e6d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6da:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e6dd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e6e0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e6e3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e6e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e6e9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e6ec:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e6ef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e6f2:	88 d8                	mov    al,bl
c001e6f4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e6f7:	88 c8                	mov    al,cl
c001e6f9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e6fc:	88 d0                	mov    al,dl
c001e6fe:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e701:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e705:	83 c0 08             	add    eax,0x8
c001e708:	d1 e0                	shl    eax,1
c001e70a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e70d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e711:	83 c0 08             	add    eax,0x8
c001e714:	d1 e0                	shl    eax,1
c001e716:	83 c0 01             	add    eax,0x1
c001e719:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e71c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e71f:	50                   	push   eax
c001e720:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e723:	e8 6e fe ff ff       	call   c001e596 <IOAPIC::read(int)>
c001e728:	83 c4 08             	add    esp,0x8
c001e72b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e72e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e735:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e738:	c1 e0 18             	shl    eax,0x18
c001e73b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e73e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e741:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e744:	52                   	push   edx
c001e745:	50                   	push   eax
c001e746:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e749:	e8 56 ff ff ff       	call   c001e6a4 <IOAPIC::write(int, int)>
c001e74e:	83 c4 0c             	add    esp,0xc
c001e751:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e754:	50                   	push   eax
c001e755:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e758:	e8 39 fe ff ff       	call   c001e596 <IOAPIC::read(int)>
c001e75d:	83 c4 08             	add    esp,0x8
c001e760:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e763:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e76a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e771:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e778:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e77c:	85 c0                	test   eax,eax
c001e77e:	74 09                	je     c001e789 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e780:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e787:	eb 07                	jmp    c001e790 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e789:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e790:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e794:	85 c0                	test   eax,eax
c001e796:	74 09                	je     c001e7a1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e798:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e79f:	eb 07                	jmp    c001e7a8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e7a1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e7a8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e7af:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e7b3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e7b6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e7b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e7bc:	52                   	push   edx
c001e7bd:	50                   	push   eax
c001e7be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7c1:	e8 de fe ff ff       	call   c001e6a4 <IOAPIC::write(int, int)>
c001e7c6:	83 c4 0c             	add    esp,0xc
c001e7c9:	90                   	nop
c001e7ca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e7cd:	c9                   	leave  
c001e7ce:	c3                   	ret    
c001e7cf:	90                   	nop

c001e7d0 <APICTimer::close(int, int, void*)>:
c001e7d0:	b8 00 00 00 00       	mov    eax,0x0
c001e7d5:	c3                   	ret    
c001e7d6:	66 90                	xchg   ax,ax

c001e7d8 <apicTimerHandler(regs*, void*)>:
c001e7d8:	83 ec 0c             	sub    esp,0xc
c001e7db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7df:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e7e1:	b8 10 27 00 00       	mov    eax,0x2710
c001e7e6:	ba 00 00 00 00       	mov    edx,0x0
c001e7eb:	f7 f1                	div    ecx
c001e7ed:	83 ec 0c             	sub    esp,0xc
c001e7f0:	50                   	push   eax
c001e7f1:	e8 9e f8 fe ff       	call   c000e094 <timerHandler(unsigned int)>
c001e7f6:	83 c4 10             	add    esp,0x10
c001e7f9:	90                   	nop
c001e7fa:	83 c4 0c             	add    esp,0xc
c001e7fd:	c3                   	ret    
c001e7fe:	66 90                	xchg   ax,ax

c001e800 <APICTimer::open(int, int, void*)>:
c001e800:	83 ec 0c             	sub    esp,0xc
c001e803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e807:	8b 00                	mov    eax,DWORD PTR [eax]
c001e809:	83 c0 24             	add    eax,0x24
c001e80c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e80e:	83 ec 08             	sub    esp,0x8
c001e811:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e815:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e819:	ff d0                	call   eax
c001e81b:	83 c4 10             	add    esp,0x10
c001e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e822:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e826:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e830:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e834:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e83a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e83e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e844:	83 ec 0c             	sub    esp,0xc
c001e847:	51                   	push   ecx
c001e848:	6a 01                	push   0x1
c001e84a:	68 d8 e7 01 c0       	push   0xc001e7d8
c001e84f:	52                   	push   edx
c001e850:	50                   	push   eax
c001e851:	e8 7e dd fe ff       	call   c000c5d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e856:	83 c4 20             	add    esp,0x20
c001e859:	89 c2                	mov    edx,eax
c001e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e85f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e865:	b8 00 00 00 00       	mov    eax,0x0
c001e86a:	83 c4 0c             	add    esp,0xc
c001e86d:	c3                   	ret    
c001e86e:	66 90                	xchg   ax,ax

c001e870 <APICTimer::write(int)>:
c001e870:	83 ec 0c             	sub    esp,0xc
c001e873:	83 ec 0c             	sub    esp,0xc
c001e876:	68 b4 2e 02 c0       	push   0xc0022eb4
c001e87b:	e8 45 29 ff ff       	call   c00111c5 <KePanic(char const*)>
c001e880:	83 c4 10             	add    esp,0x10
c001e883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e88b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e891:	90                   	nop
c001e892:	83 c4 0c             	add    esp,0xc
c001e895:	c3                   	ret    
c001e896:	66 90                	xchg   ax,ax

c001e898 <APICTimer::APICTimer()>:
c001e898:	83 ec 0c             	sub    esp,0xc
c001e89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89f:	83 ec 08             	sub    esp,0x8
c001e8a2:	68 c4 2e 02 c0       	push   0xc0022ec4
c001e8a7:	50                   	push   eax
c001e8a8:	e8 1b f7 fe ff       	call   c000dfc8 <Timer::Timer(char const*)>
c001e8ad:	83 c4 10             	add    esp,0x10
c001e8b0:	ba d8 2e 02 c0       	mov    edx,0xc0022ed8
c001e8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b9:	89 10                	mov    DWORD PTR [eax],edx
c001e8bb:	90                   	nop
c001e8bc:	83 c4 0c             	add    esp,0xc
c001e8bf:	c3                   	ret    

c001e8c0 <PIT::write(int)>:
c001e8c0:	83 ec 10             	sub    esp,0x10
c001e8c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e8d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e8d5:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001e8da:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e8df:	89 c2                	mov    edx,eax
c001e8e1:	c1 fa 1f             	sar    edx,0x1f
c001e8e4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e8e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8ec:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e8f3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e8f8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e8fc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e901:	ee                   	out    dx,al
c001e902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e906:	0f b6 c0             	movzx  eax,al
c001e909:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e910:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e914:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e918:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e91d:	ee                   	out    dx,al
c001e91e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e922:	c1 f8 08             	sar    eax,0x8
c001e925:	0f b6 c0             	movzx  eax,al
c001e928:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e92f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e933:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e937:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e93c:	ee                   	out    dx,al
c001e93d:	90                   	nop
c001e93e:	83 c4 10             	add    esp,0x10
c001e941:	c3                   	ret    
c001e942:	66 90                	xchg   ax,ax

c001e944 <pitHandler(regs*, void*)>:
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001e94d:	b8 10 27 00 00       	mov    eax,0x2710
c001e952:	89 c2                	mov    edx,eax
c001e954:	c1 fa 1f             	sar    edx,0x1f
c001e957:	f7 f9                	idiv   ecx
c001e959:	83 ec 0c             	sub    esp,0xc
c001e95c:	50                   	push   eax
c001e95d:	e8 32 f7 fe ff       	call   c000e094 <timerHandler(unsigned int)>
c001e962:	83 c4 10             	add    esp,0x10
c001e965:	90                   	nop
c001e966:	83 c4 0c             	add    esp,0xc
c001e969:	c3                   	ret    
c001e96a:	66 90                	xchg   ax,ax

c001e96c <PIT::open(int, int, void*)>:
c001e96c:	83 ec 0c             	sub    esp,0xc
c001e96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e973:	8b 00                	mov    eax,DWORD PTR [eax]
c001e975:	83 c0 24             	add    eax,0x24
c001e978:	8b 00                	mov    eax,DWORD PTR [eax]
c001e97a:	83 ec 08             	sub    esp,0x8
c001e97d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e985:	ff d0                	call   eax
c001e987:	83 c4 10             	add    esp,0x10
c001e98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98e:	83 ec 0c             	sub    esp,0xc
c001e991:	6a 00                	push   0x0
c001e993:	6a 01                	push   0x1
c001e995:	68 44 e9 01 c0       	push   0xc001e944
c001e99a:	6a 00                	push   0x0
c001e99c:	50                   	push   eax
c001e99d:	e8 32 dc fe ff       	call   c000c5d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e9a2:	83 c4 20             	add    esp,0x20
c001e9a5:	89 c2                	mov    edx,eax
c001e9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ab:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e9b1:	b8 00 00 00 00       	mov    eax,0x0
c001e9b6:	83 c4 0c             	add    esp,0xc
c001e9b9:	c3                   	ret    
c001e9ba:	66 90                	xchg   ax,ax

c001e9bc <PIT::close(int, int, void*)>:
c001e9bc:	83 ec 0c             	sub    esp,0xc
c001e9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d1:	6a 01                	push   0x1
c001e9d3:	68 44 e9 01 c0       	push   0xc001e944
c001e9d8:	6a 00                	push   0x0
c001e9da:	50                   	push   eax
c001e9db:	e8 2a dc fe ff       	call   c000c60a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e9e0:	83 c4 10             	add    esp,0x10
c001e9e3:	b8 00 00 00 00       	mov    eax,0x0
c001e9e8:	83 c4 0c             	add    esp,0xc
c001e9eb:	c3                   	ret    

c001e9ec <PIT::PIT()>:
c001e9ec:	83 ec 0c             	sub    esp,0xc
c001e9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f3:	83 ec 08             	sub    esp,0x8
c001e9f6:	68 00 2f 02 c0       	push   0xc0022f00
c001e9fb:	50                   	push   eax
c001e9fc:	e8 c7 f5 fe ff       	call   c000dfc8 <Timer::Timer(char const*)>
c001ea01:	83 c4 10             	add    esp,0x10
c001ea04:	ba 28 2f 02 c0       	mov    edx,0xc0022f28
c001ea09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0d:	89 10                	mov    DWORD PTR [eax],edx
c001ea0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea19:	0f b6 d0             	movzx  edx,al
c001ea1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea20:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ea27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea31:	0f b6 d0             	movzx  edx,al
c001ea34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea38:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ea3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea41:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea47:	8d 50 01             	lea    edx,[eax+0x1]
c001ea4a:	88 d1                	mov    cl,dl
c001ea4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea50:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ea56:	0f b6 d0             	movzx  edx,al
c001ea59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea61:	83 e1 3f             	and    ecx,0x3f
c001ea64:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea68:	90                   	nop
c001ea69:	83 c4 0c             	add    esp,0xc
c001ea6c:	c3                   	ret    
c001ea6d:	66 90                	xchg   ax,ax
c001ea6f:	90                   	nop

c001ea70 <avxDetect>:
c001ea70:	b8 01 00 00 00       	mov    eax,0x1
c001ea75:	0f a2                	cpuid  
c001ea77:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ea7d:	74 15                	je     c001ea94 <avxDetect.noAVX>
c001ea7f:	b8 01 00 00 00       	mov    eax,0x1
c001ea84:	0f a2                	cpuid  
c001ea86:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ea8c:	74 06                	je     c001ea94 <avxDetect.noAVX>
c001ea8e:	b8 01 00 00 00       	mov    eax,0x1
c001ea93:	c3                   	ret    

c001ea94 <avxDetect.noAVX>:
c001ea94:	b8 00 00 00 00       	mov    eax,0x0
c001ea99:	c3                   	ret    

c001ea9a <avxSave>:
c001ea9a:	53                   	push   ebx
c001ea9b:	52                   	push   edx
c001ea9c:	31 c0                	xor    eax,eax
c001ea9e:	48                   	dec    eax
c001ea9f:	89 c2                	mov    edx,eax
c001eaa1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eaa5:	0f ae 23             	xsave  [ebx]
c001eaa8:	5a                   	pop    edx
c001eaa9:	5b                   	pop    ebx
c001eaaa:	c3                   	ret    

c001eaab <avxLoad>:
c001eaab:	53                   	push   ebx
c001eaac:	52                   	push   edx
c001eaad:	31 c0                	xor    eax,eax
c001eaaf:	48                   	dec    eax
c001eab0:	89 c2                	mov    edx,eax
c001eab2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eab6:	0f ae 2b             	xrstor [ebx]
c001eab9:	5a                   	pop    edx
c001eaba:	5b                   	pop    ebx
c001eabb:	c3                   	ret    

c001eabc <avxInit>:
c001eabc:	e8 67 03 00 00       	call   c001ee28 <sseInit>
c001eac1:	50                   	push   eax
c001eac2:	51                   	push   ecx
c001eac3:	0f 20 e0             	mov    eax,cr4
c001eac6:	0d 00 00 04 00       	or     eax,0x40000
c001eacb:	0f 22 e0             	mov    cr4,eax
c001eace:	31 c9                	xor    ecx,ecx
c001ead0:	0f 01 d0             	xgetbv 
c001ead3:	0d 07 00 00 00       	or     eax,0x7
c001ead8:	0f 01 d1             	xsetbv 
c001eadb:	59                   	pop    ecx
c001eadc:	58                   	pop    eax
c001eadd:	c3                   	ret    

c001eade <avxClose>:
c001eade:	c3                   	ret    

c001eadf <wouldSheSayYes>:
c001eadf:	c3                   	ret    
c001eae0:	49                   	dec    ecx
c001eae1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001eae5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001eae9:	75 20                	jne    c001eb0b <isr0+0xb>
c001eaeb:	4e                   	dec    esi
c001eaec:	79 61                	jns    c001eb4f <isr7+0x3>
c001eaee:	68 2e 2e 2e 00       	push   0x2e2e2e
c001eaf3:	66 90                	xchg   ax,ax
c001eaf5:	66 90                	xchg   ax,ax
c001eaf7:	66 90                	xchg   ax,ax
c001eaf9:	66 90                	xchg   ax,ax
c001eafb:	66 90                	xchg   ax,ax
c001eafd:	66 90                	xchg   ax,ax
c001eaff:	90                   	nop

c001eb00 <isr0>:
c001eb00:	fa                   	cli    
c001eb01:	68 00 00 00 00       	push   0x0
c001eb06:	68 00 00 00 00       	push   0x0
c001eb0b:	e9 56 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb10 <isr1>:
c001eb10:	fa                   	cli    
c001eb11:	6a 00                	push   0x0
c001eb13:	6a 01                	push   0x1
c001eb15:	e9 4c 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb1a <isr2>:
c001eb1a:	fa                   	cli    
c001eb1b:	6a 00                	push   0x0
c001eb1d:	6a 02                	push   0x2
c001eb1f:	e9 42 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb24 <isr3>:
c001eb24:	fa                   	cli    
c001eb25:	6a 00                	push   0x0
c001eb27:	6a 03                	push   0x3
c001eb29:	e9 38 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb2e <isr4>:
c001eb2e:	fa                   	cli    
c001eb2f:	6a 00                	push   0x0
c001eb31:	6a 04                	push   0x4
c001eb33:	e9 2e 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb38 <isr5>:
c001eb38:	fa                   	cli    
c001eb39:	6a 00                	push   0x0
c001eb3b:	6a 05                	push   0x5
c001eb3d:	e9 24 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb42 <isr6>:
c001eb42:	fa                   	cli    
c001eb43:	6a 00                	push   0x0
c001eb45:	6a 06                	push   0x6
c001eb47:	e9 1a 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb4c <isr7>:
c001eb4c:	fa                   	cli    
c001eb4d:	6a 00                	push   0x0
c001eb4f:	6a 07                	push   0x7
c001eb51:	e9 10 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb56 <isr8>:
c001eb56:	fa                   	cli    
c001eb57:	6a 08                	push   0x8
c001eb59:	e9 08 01 00 00       	jmp    c001ec66 <int_common_stub>

c001eb5e <isr9>:
c001eb5e:	fa                   	cli    
c001eb5f:	6a 00                	push   0x0
c001eb61:	6a 09                	push   0x9
c001eb63:	e9 fe 00 00 00       	jmp    c001ec66 <int_common_stub>

c001eb68 <isr10>:
c001eb68:	fa                   	cli    
c001eb69:	6a 0a                	push   0xa
c001eb6b:	e9 f6 00 00 00       	jmp    c001ec66 <int_common_stub>

c001eb70 <isr11>:
c001eb70:	fa                   	cli    
c001eb71:	6a 0b                	push   0xb
c001eb73:	e9 ee 00 00 00       	jmp    c001ec66 <int_common_stub>

c001eb78 <isr12>:
c001eb78:	fa                   	cli    
c001eb79:	6a 0c                	push   0xc
c001eb7b:	e9 e6 00 00 00       	jmp    c001ec66 <int_common_stub>

c001eb80 <isr13>:
c001eb80:	fa                   	cli    
c001eb81:	6a 0d                	push   0xd
c001eb83:	53                   	push   ebx
c001eb84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb88:	81 fb 56 ed 01 c0    	cmp    ebx,0xc001ed56
c001eb8e:	5b                   	pop    ebx
c001eb8f:	0f 84 c3 01 00 00    	je     c001ed58 <finishSignal2>
c001eb95:	e9 cc 00 00 00       	jmp    c001ec66 <int_common_stub>

c001eb9a <isr14>:
c001eb9a:	fa                   	cli    
c001eb9b:	6a 0e                	push   0xe
c001eb9d:	e9 c4 00 00 00       	jmp    c001ec66 <int_common_stub>

c001eba2 <isr15>:
c001eba2:	fa                   	cli    
c001eba3:	6a 00                	push   0x0
c001eba5:	6a 0f                	push   0xf
c001eba7:	e9 ba 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebac <isr16>:
c001ebac:	fa                   	cli    
c001ebad:	6a 00                	push   0x0
c001ebaf:	6a 10                	push   0x10
c001ebb1:	e9 b0 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebb6 <isr17>:
c001ebb6:	fa                   	cli    
c001ebb7:	6a 00                	push   0x0
c001ebb9:	6a 11                	push   0x11
c001ebbb:	e9 a6 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebc0 <isr18>:
c001ebc0:	fa                   	cli    
c001ebc1:	6a 00                	push   0x0
c001ebc3:	6a 12                	push   0x12
c001ebc5:	e9 9c 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebca <irq3>:
c001ebca:	fa                   	cli    
c001ebcb:	6a 00                	push   0x0
c001ebcd:	6a 23                	push   0x23
c001ebcf:	e9 92 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebd4 <irq4>:
c001ebd4:	fa                   	cli    
c001ebd5:	6a 00                	push   0x0
c001ebd7:	6a 24                	push   0x24
c001ebd9:	e9 88 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebde <irq5>:
c001ebde:	fa                   	cli    
c001ebdf:	6a 00                	push   0x0
c001ebe1:	6a 25                	push   0x25
c001ebe3:	e9 7e 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebe8 <irq6>:
c001ebe8:	fa                   	cli    
c001ebe9:	6a 00                	push   0x0
c001ebeb:	6a 26                	push   0x26
c001ebed:	e9 74 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebf2 <irq7>:
c001ebf2:	fa                   	cli    
c001ebf3:	6a 00                	push   0x0
c001ebf5:	6a 27                	push   0x27
c001ebf7:	e9 6a 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ebfc <irq8>:
c001ebfc:	fa                   	cli    
c001ebfd:	6a 00                	push   0x0
c001ebff:	6a 28                	push   0x28
c001ec01:	e9 60 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec06 <irq9>:
c001ec06:	fa                   	cli    
c001ec07:	6a 00                	push   0x0
c001ec09:	6a 29                	push   0x29
c001ec0b:	e9 56 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec10 <irq10>:
c001ec10:	fa                   	cli    
c001ec11:	6a 00                	push   0x0
c001ec13:	6a 2a                	push   0x2a
c001ec15:	e9 4c 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec1a <irq11>:
c001ec1a:	fa                   	cli    
c001ec1b:	6a 00                	push   0x0
c001ec1d:	6a 2b                	push   0x2b
c001ec1f:	e9 42 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec24 <irq12>:
c001ec24:	fa                   	cli    
c001ec25:	6a 00                	push   0x0
c001ec27:	6a 2c                	push   0x2c
c001ec29:	e9 38 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec2e <irq13>:
c001ec2e:	fa                   	cli    
c001ec2f:	6a 00                	push   0x0
c001ec31:	6a 2d                	push   0x2d
c001ec33:	e9 2e 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec38 <irq14>:
c001ec38:	fa                   	cli    
c001ec39:	6a 00                	push   0x0
c001ec3b:	6a 2e                	push   0x2e
c001ec3d:	e9 24 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec42 <irq15>:
c001ec42:	fa                   	cli    
c001ec43:	6a 00                	push   0x0
c001ec45:	6a 2f                	push   0x2f
c001ec47:	e9 1a 00 00 00       	jmp    c001ec66 <int_common_stub>

c001ec4c <irq1>:
c001ec4c:	fa                   	cli    
c001ec4d:	6a 00                	push   0x0
c001ec4f:	6a 21                	push   0x21
c001ec51:	eb 13                	jmp    c001ec66 <int_common_stub>

c001ec53 <irq2>:
c001ec53:	fa                   	cli    
c001ec54:	6a 00                	push   0x0
c001ec56:	6a 22                	push   0x22
c001ec58:	eb 0c                	jmp    c001ec66 <int_common_stub>

c001ec5a <isr96>:
c001ec5a:	6a 00                	push   0x0
c001ec5c:	6a 60                	push   0x60
c001ec5e:	fb                   	sti    
c001ec5f:	eb 37                	jmp    c001ec98 <syscall_common_stub>

c001ec61 <irq0>:
c001ec61:	fa                   	cli    
c001ec62:	6a 00                	push   0x0
c001ec64:	6a 20                	push   0x20

c001ec66 <int_common_stub>:
c001ec66:	60                   	pusha  
c001ec67:	1e                   	push   ds
c001ec68:	06                   	push   es
c001ec69:	0f a0                	push   fs
c001ec6b:	0f a8                	push   gs
c001ec6d:	66 b8 10 00          	mov    ax,0x10
c001ec71:	66 8e d8             	mov    ds,ax
c001ec74:	66 8e c0             	mov    es,ax
c001ec77:	66 8e e0             	mov    fs,ax
c001ec7a:	66 8e e8             	mov    gs,ax
c001ec7d:	54                   	push   esp
c001ec7e:	fc                   	cld    
c001ec7f:	e8 50 de fe ff       	call   c000cad4 <int_handler>
c001ec84:	81 c4 04 00 00 00    	add    esp,0x4
c001ec8a:	0f a9                	pop    gs
c001ec8c:	0f a1                	pop    fs
c001ec8e:	07                   	pop    es
c001ec8f:	1f                   	pop    ds
c001ec90:	61                   	popa   
c001ec91:	81 c4 08 00 00 00    	add    esp,0x8
c001ec97:	cf                   	iret   

c001ec98 <syscall_common_stub>:
c001ec98:	60                   	pusha  
c001ec99:	1e                   	push   ds
c001ec9a:	06                   	push   es
c001ec9b:	0f a0                	push   fs
c001ec9d:	0f a8                	push   gs
c001ec9f:	66 b8 10 00          	mov    ax,0x10
c001eca3:	66 8e d8             	mov    ds,ax
c001eca6:	66 8e c0             	mov    es,ax
c001eca9:	66 8e e0             	mov    fs,ax
c001ecac:	66 8e e8             	mov    gs,ax
c001ecaf:	54                   	push   esp
c001ecb0:	fc                   	cld    
c001ecb1:	e8 1e de fe ff       	call   c000cad4 <int_handler>
c001ecb6:	81 c4 04 00 00 00    	add    esp,0x4
c001ecbc:	0f a9                	pop    gs
c001ecbe:	0f a1                	pop    fs
c001ecc0:	07                   	pop    es
c001ecc1:	1f                   	pop    ds
c001ecc2:	e8 10 2b ff ff       	call   c00117d7 <KiCheckSignalZ>
c001ecc7:	3d 00 00 00 00       	cmp    eax,0x0
c001eccc:	0f 84 c0 00 00 00    	je     c001ed92 <skipSignals>
c001ecd2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ecd7:	61                   	popa   
c001ecd8:	53                   	push   ebx
c001ecd9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ecdf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ece2:	5b                   	pop    ebx
c001ece3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ece8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001eceb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ecee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ecf1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ecf4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ecf7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ecfa:	81 c4 08 00 00 00    	add    esp,0x8
c001ed00:	5e                   	pop    esi
c001ed01:	5b                   	pop    ebx
c001ed02:	59                   	pop    ecx
c001ed03:	5a                   	pop    edx
c001ed04:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ed07:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ed0a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ed0d:	52                   	push   edx
c001ed0e:	51                   	push   ecx
c001ed0f:	53                   	push   ebx
c001ed10:	56                   	push   esi
c001ed11:	81 ec 08 00 00 00    	sub    esp,0x8
c001ed17:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ed1a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ed1d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ed20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ed23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ed26:	60                   	pusha  
c001ed27:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ed2d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ed30:	89 e3                	mov    ebx,esp
c001ed32:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ed35:	52                   	push   edx
c001ed36:	68 56 ed 01 c0       	push   0xc001ed56
c001ed3b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ed3e:	89 dc                	mov    esp,ebx
c001ed40:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ed43:	68 23 00 00 00       	push   0x23
c001ed48:	51                   	push   ecx
c001ed49:	68 02 02 00 00       	push   0x202
c001ed4e:	68 1b 00 00 00       	push   0x1b
c001ed53:	ff 36                	push   DWORD PTR [esi]
c001ed55:	cf                   	iret   

c001ed56 <finishSignal>:
c001ed56:	cd 0f                	int    0xf

c001ed58 <finishSignal2>:
c001ed58:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ed5e:	e8 f1 2a ff ff       	call   c0011854 <KiFinishSignalZ>
c001ed63:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ed69:	68 23 00 00 00       	push   0x23
c001ed6e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ed71:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ed74:	68 1b 00 00 00       	push   0x1b
c001ed79:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ed7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed7f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ed82:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ed85:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ed88:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ed8b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ed8e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ed91:	cf                   	iret   

c001ed92 <skipSignals>:
c001ed92:	61                   	popa   
c001ed93:	81 c4 08 00 00 00    	add    esp,0x8
c001ed99:	cf                   	iret   
c001ed9a:	90                   	nop
c001ed9b:	90                   	nop

c001ed9c <irq16>:
c001ed9c:	fa                   	cli    
c001ed9d:	6a 00                	push   0x0
c001ed9f:	6a 30                	push   0x30
c001eda1:	e9 c0 fe ff ff       	jmp    c001ec66 <int_common_stub>

c001eda6 <irq17>:
c001eda6:	fa                   	cli    
c001eda7:	6a 00                	push   0x0
c001eda9:	6a 31                	push   0x31
c001edab:	e9 b6 fe ff ff       	jmp    c001ec66 <int_common_stub>

c001edb0 <irq18>:
c001edb0:	fa                   	cli    
c001edb1:	6a 00                	push   0x0
c001edb3:	6a 32                	push   0x32
c001edb5:	e9 ac fe ff ff       	jmp    c001ec66 <int_common_stub>

c001edba <irq19>:
c001edba:	fa                   	cli    
c001edbb:	6a 00                	push   0x0
c001edbd:	6a 33                	push   0x33
c001edbf:	e9 a2 fe ff ff       	jmp    c001ec66 <int_common_stub>

c001edc4 <irq20>:
c001edc4:	fa                   	cli    
c001edc5:	6a 00                	push   0x0
c001edc7:	6a 34                	push   0x34
c001edc9:	e9 98 fe ff ff       	jmp    c001ec66 <int_common_stub>

c001edce <irq21>:
c001edce:	fa                   	cli    
c001edcf:	6a 00                	push   0x0
c001edd1:	6a 35                	push   0x35
c001edd3:	e9 8e fe ff ff       	jmp    c001ec66 <int_common_stub>

c001edd8 <irq22>:
c001edd8:	fa                   	cli    
c001edd9:	6a 00                	push   0x0
c001eddb:	6a 36                	push   0x36
c001eddd:	e9 84 fe ff ff       	jmp    c001ec66 <int_common_stub>

c001ede2 <irq23>:
c001ede2:	fa                   	cli    
c001ede3:	6a 00                	push   0x0
c001ede5:	6a 37                	push   0x37
c001ede7:	e9 7a fe ff ff       	jmp    c001ec66 <int_common_stub>
c001edec:	66 90                	xchg   ax,ax
c001edee:	66 90                	xchg   ax,ax

c001edf0 <i386GetRDRAND>:
c001edf0:	b9 64 00 00 00       	mov    ecx,0x64

c001edf5 <retry>:
c001edf5:	0f c7 f0             	rdrand eax
c001edf8:	72 05                	jb     c001edff <retry.done>
c001edfa:	e2 f9                	loop   c001edf5 <retry>

c001edfc <retry.fail>:
c001edfc:	31 c0                	xor    eax,eax
c001edfe:	c3                   	ret    

c001edff <retry.done>:
c001edff:	c3                   	ret    

c001ee00 <absolutelyNoChanceInHell>:
c001ee00:	b8 01 00 00 00       	mov    eax,0x1
c001ee05:	0f a2                	cpuid  
c001ee07:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ee0d:	74 06                	je     c001ee15 <sseDetect.noSSE>
c001ee0f:	b8 01 00 00 00       	mov    eax,0x1
c001ee14:	c3                   	ret    

c001ee15 <sseDetect.noSSE>:
c001ee15:	31 c0                	xor    eax,eax
c001ee17:	c3                   	ret    

c001ee18 <sseSave>:
c001ee18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee1c:	0f ae 00             	fxsave [eax]
c001ee1f:	c3                   	ret    

c001ee20 <sseLoad>:
c001ee20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee24:	0f ae 08             	fxrstor [eax]
c001ee27:	c3                   	ret    

c001ee28 <sseInit>:
c001ee28:	e8 42 00 00 00       	call   c001ee6f <x87Init>
c001ee2d:	0f 20 e0             	mov    eax,cr4
c001ee30:	66 0d 00 06          	or     ax,0x600
c001ee34:	0f 22 e0             	mov    cr4,eax
c001ee37:	c3                   	ret    

c001ee38 <sseClose>:
c001ee38:	c3                   	ret    
c001ee39:	66 90                	xchg   ax,ax
c001ee3b:	66 90                	xchg   ax,ax
c001ee3d:	66 90                	xchg   ax,ax
c001ee3f:	90                   	nop

c001ee40 <value_37F>:
c001ee40:	7f 03                	jg     c001ee45 <value_37A+0x1>

c001ee42 <value_37E>:
c001ee42:	7e 03                	jle    c001ee47 <x87Detect+0x1>

c001ee44 <value_37A>:
c001ee44:	7a 03                	jp     c001ee49 <x87Detect+0x3>

c001ee46 <x87Detect>:
c001ee46:	b8 01 00 00 00       	mov    eax,0x1
c001ee4b:	0f a2                	cpuid  
c001ee4d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ee53:	74 06                	je     c001ee5b <x87Detect.nox87>
c001ee55:	b8 01 00 00 00       	mov    eax,0x1
c001ee5a:	c3                   	ret    

c001ee5b <x87Detect.nox87>:
c001ee5b:	b8 00 00 00 00       	mov    eax,0x0
c001ee60:	c3                   	ret    

c001ee61 <x87Save>:
c001ee61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee65:	dd 30                	fnsave [eax]
c001ee67:	c3                   	ret    

c001ee68 <x87Load>:
c001ee68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee6c:	dd 20                	frstor [eax]
c001ee6e:	c3                   	ret    

c001ee6f <x87Init>:
c001ee6f:	0f 20 c0             	mov    eax,cr0
c001ee72:	66 25 fb ff          	and    ax,0xfffb
c001ee76:	66 0d 22 00          	or     ax,0x22
c001ee7a:	0f 22 c0             	mov    cr0,eax
c001ee7d:	db e3                	fninit 
c001ee7f:	0f 06                	clts   
c001ee81:	d9 2d 44 ee 01 c0    	fldcw  WORD PTR ds:0xc001ee44
c001ee87:	c3                   	ret    

c001ee88 <x87Close>:
c001ee88:	c3                   	ret    
c001ee89:	66 90                	xchg   ax,ax
c001ee8b:	90                   	nop

c001ee8c <__do_global_ctors_aux>:
c001ee8c:	a1 40 fe 01 c0       	mov    eax,ds:0xc001fe40
c001ee91:	83 f8 ff             	cmp    eax,0xffffffff
c001ee94:	74 1a                	je     c001eeb0 <__do_global_ctors_aux+0x24>
c001ee96:	55                   	push   ebp
c001ee97:	89 e5                	mov    ebp,esp
c001ee99:	53                   	push   ebx
c001ee9a:	52                   	push   edx
c001ee9b:	bb 40 fe 01 c0       	mov    ebx,0xc001fe40
c001eea0:	ff d0                	call   eax
c001eea2:	83 eb 04             	sub    ebx,0x4
c001eea5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eea7:	83 f8 ff             	cmp    eax,0xffffffff
c001eeaa:	75 f4                	jne    c001eea0 <__do_global_ctors_aux+0x14>
c001eeac:	58                   	pop    eax
c001eead:	5b                   	pop    ebx
c001eeae:	5d                   	pop    ebp
c001eeaf:	c3                   	ret    
c001eeb0:	c3                   	ret    
c001eeb1:	66 90                	xchg   ax,ax
c001eeb3:	90                   	nop

c001eeb4 <__divdi3>:
c001eeb4:	55                   	push   ebp
c001eeb5:	57                   	push   edi
c001eeb6:	56                   	push   esi
c001eeb7:	53                   	push   ebx
c001eeb8:	83 ec 1c             	sub    esp,0x1c
c001eebb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001eebf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eec3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001eec6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001eeca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eece:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eed2:	85 db                	test   ebx,ebx
c001eed4:	0f 88 8e 00 00 00    	js     c001ef68 <__divdi3+0xb4>
c001eeda:	89 dd                	mov    ebp,ebx
c001eedc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001eee4:	89 d3                	mov    ebx,edx
c001eee6:	85 d2                	test   edx,edx
c001eee8:	79 0d                	jns    c001eef7 <__divdi3+0x43>
c001eeea:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001eeee:	f7 d8                	neg    eax
c001eef0:	83 d2 00             	adc    edx,0x0
c001eef3:	f7 da                	neg    edx
c001eef5:	89 d3                	mov    ebx,edx
c001eef7:	89 c7                	mov    edi,eax
c001eef9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eefc:	85 db                	test   ebx,ebx
c001eefe:	75 48                	jne    c001ef48 <__divdi3+0x94>
c001ef00:	39 ef                	cmp    edi,ebp
c001ef02:	76 24                	jbe    c001ef28 <__divdi3+0x74>
c001ef04:	89 ea                	mov    edx,ebp
c001ef06:	f7 f7                	div    edi
c001ef08:	89 c1                	mov    ecx,eax
c001ef0a:	31 f6                	xor    esi,esi
c001ef0c:	89 c8                	mov    eax,ecx
c001ef0e:	89 f2                	mov    edx,esi
c001ef10:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ef14:	85 c9                	test   ecx,ecx
c001ef16:	74 07                	je     c001ef1f <__divdi3+0x6b>
c001ef18:	f7 d8                	neg    eax
c001ef1a:	83 d2 00             	adc    edx,0x0
c001ef1d:	f7 da                	neg    edx
c001ef1f:	83 c4 1c             	add    esp,0x1c
c001ef22:	5b                   	pop    ebx
c001ef23:	5e                   	pop    esi
c001ef24:	5f                   	pop    edi
c001ef25:	5d                   	pop    ebp
c001ef26:	c3                   	ret    
c001ef27:	90                   	nop
c001ef28:	85 ff                	test   edi,edi
c001ef2a:	75 0b                	jne    c001ef37 <__divdi3+0x83>
c001ef2c:	b8 01 00 00 00       	mov    eax,0x1
c001ef31:	31 d2                	xor    edx,edx
c001ef33:	f7 f3                	div    ebx
c001ef35:	89 c7                	mov    edi,eax
c001ef37:	31 d2                	xor    edx,edx
c001ef39:	89 e8                	mov    eax,ebp
c001ef3b:	f7 f7                	div    edi
c001ef3d:	89 c6                	mov    esi,eax
c001ef3f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef42:	f7 f7                	div    edi
c001ef44:	89 c1                	mov    ecx,eax
c001ef46:	eb c4                	jmp    c001ef0c <__divdi3+0x58>
c001ef48:	39 eb                	cmp    ebx,ebp
c001ef4a:	77 3c                	ja     c001ef88 <__divdi3+0xd4>
c001ef4c:	0f bd f3             	bsr    esi,ebx
c001ef4f:	83 f6 1f             	xor    esi,0x1f
c001ef52:	75 40                	jne    c001ef94 <__divdi3+0xe0>
c001ef54:	39 eb                	cmp    ebx,ebp
c001ef56:	72 09                	jb     c001ef61 <__divdi3+0xad>
c001ef58:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ef5b:	0f 87 97 00 00 00    	ja     c001eff8 <__divdi3+0x144>
c001ef61:	b9 01 00 00 00       	mov    ecx,0x1
c001ef66:	eb a4                	jmp    c001ef0c <__divdi3+0x58>
c001ef68:	f7 d9                	neg    ecx
c001ef6a:	83 d3 00             	adc    ebx,0x0
c001ef6d:	f7 db                	neg    ebx
c001ef6f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef72:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef76:	89 dd                	mov    ebp,ebx
c001ef78:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ef80:	e9 5f ff ff ff       	jmp    c001eee4 <__divdi3+0x30>
c001ef85:	8d 76 00             	lea    esi,[esi+0x0]
c001ef88:	31 f6                	xor    esi,esi
c001ef8a:	31 c9                	xor    ecx,ecx
c001ef8c:	e9 7b ff ff ff       	jmp    c001ef0c <__divdi3+0x58>
c001ef91:	8d 76 00             	lea    esi,[esi+0x0]
c001ef94:	b8 20 00 00 00       	mov    eax,0x20
c001ef99:	29 f0                	sub    eax,esi
c001ef9b:	89 f1                	mov    ecx,esi
c001ef9d:	d3 e3                	shl    ebx,cl
c001ef9f:	89 fa                	mov    edx,edi
c001efa1:	88 c1                	mov    cl,al
c001efa3:	d3 ea                	shr    edx,cl
c001efa5:	09 da                	or     edx,ebx
c001efa7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001efab:	89 f1                	mov    ecx,esi
c001efad:	d3 e7                	shl    edi,cl
c001efaf:	89 eb                	mov    ebx,ebp
c001efb1:	88 c1                	mov    cl,al
c001efb3:	d3 eb                	shr    ebx,cl
c001efb5:	89 f1                	mov    ecx,esi
c001efb7:	d3 e5                	shl    ebp,cl
c001efb9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001efbc:	88 c1                	mov    cl,al
c001efbe:	d3 ea                	shr    edx,cl
c001efc0:	09 d5                	or     ebp,edx
c001efc2:	89 e8                	mov    eax,ebp
c001efc4:	89 da                	mov    edx,ebx
c001efc6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001efca:	89 d3                	mov    ebx,edx
c001efcc:	89 c5                	mov    ebp,eax
c001efce:	f7 e7                	mul    edi
c001efd0:	39 d3                	cmp    ebx,edx
c001efd2:	72 18                	jb     c001efec <__divdi3+0x138>
c001efd4:	74 0a                	je     c001efe0 <__divdi3+0x12c>
c001efd6:	89 e9                	mov    ecx,ebp
c001efd8:	31 f6                	xor    esi,esi
c001efda:	e9 2d ff ff ff       	jmp    c001ef0c <__divdi3+0x58>
c001efdf:	90                   	nop
c001efe0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001efe3:	89 f1                	mov    ecx,esi
c001efe5:	d3 e7                	shl    edi,cl
c001efe7:	39 c7                	cmp    edi,eax
c001efe9:	73 eb                	jae    c001efd6 <__divdi3+0x122>
c001efeb:	90                   	nop
c001efec:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001efef:	31 f6                	xor    esi,esi
c001eff1:	e9 16 ff ff ff       	jmp    c001ef0c <__divdi3+0x58>
c001eff6:	66 90                	xchg   ax,ax
c001eff8:	31 c9                	xor    ecx,ecx
c001effa:	e9 0d ff ff ff       	jmp    c001ef0c <__divdi3+0x58>
c001efff:	90                   	nop

c001f000 <__moddi3>:
c001f000:	55                   	push   ebp
c001f001:	57                   	push   edi
c001f002:	56                   	push   esi
c001f003:	53                   	push   ebx
c001f004:	83 ec 2c             	sub    esp,0x2c
c001f007:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f00b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f00f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f013:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f017:	85 db                	test   ebx,ebx
c001f019:	0f 88 85 00 00 00    	js     c001f0a4 <__moddi3+0xa4>
c001f01f:	89 de                	mov    esi,ebx
c001f021:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f029:	89 d7                	mov    edi,edx
c001f02b:	85 d2                	test   edx,edx
c001f02d:	79 09                	jns    c001f038 <__moddi3+0x38>
c001f02f:	f7 d8                	neg    eax
c001f031:	83 d2 00             	adc    edx,0x0
c001f034:	f7 da                	neg    edx
c001f036:	89 d7                	mov    edi,edx
c001f038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f03c:	89 cd                	mov    ebp,ecx
c001f03e:	85 ff                	test   edi,edi
c001f040:	75 52                	jne    c001f094 <__moddi3+0x94>
c001f042:	89 c3                	mov    ebx,eax
c001f044:	39 f0                	cmp    eax,esi
c001f046:	76 24                	jbe    c001f06c <__moddi3+0x6c>
c001f048:	89 c8                	mov    eax,ecx
c001f04a:	89 f2                	mov    edx,esi
c001f04c:	f7 f3                	div    ebx
c001f04e:	89 d6                	mov    esi,edx
c001f050:	89 f0                	mov    eax,esi
c001f052:	31 d2                	xor    edx,edx
c001f054:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f058:	85 c9                	test   ecx,ecx
c001f05a:	74 07                	je     c001f063 <__moddi3+0x63>
c001f05c:	f7 d8                	neg    eax
c001f05e:	83 d2 00             	adc    edx,0x0
c001f061:	f7 da                	neg    edx
c001f063:	83 c4 2c             	add    esp,0x2c
c001f066:	5b                   	pop    ebx
c001f067:	5e                   	pop    esi
c001f068:	5f                   	pop    edi
c001f069:	5d                   	pop    ebp
c001f06a:	c3                   	ret    
c001f06b:	90                   	nop
c001f06c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f070:	85 db                	test   ebx,ebx
c001f072:	75 0d                	jne    c001f081 <__moddi3+0x81>
c001f074:	b8 01 00 00 00       	mov    eax,0x1
c001f079:	31 d2                	xor    edx,edx
c001f07b:	f7 f7                	div    edi
c001f07d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f081:	89 f0                	mov    eax,esi
c001f083:	31 d2                	xor    edx,edx
c001f085:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f089:	f7 f7                	div    edi
c001f08b:	89 e8                	mov    eax,ebp
c001f08d:	f7 f7                	div    edi
c001f08f:	89 d6                	mov    esi,edx
c001f091:	eb bd                	jmp    c001f050 <__moddi3+0x50>
c001f093:	90                   	nop
c001f094:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f098:	39 f7                	cmp    edi,esi
c001f09a:	76 20                	jbe    c001f0bc <__moddi3+0xbc>
c001f09c:	89 c8                	mov    eax,ecx
c001f09e:	89 f2                	mov    edx,esi
c001f0a0:	eb b2                	jmp    c001f054 <__moddi3+0x54>
c001f0a2:	66 90                	xchg   ax,ax
c001f0a4:	f7 d9                	neg    ecx
c001f0a6:	83 d3 00             	adc    ebx,0x0
c001f0a9:	f7 db                	neg    ebx
c001f0ab:	89 de                	mov    esi,ebx
c001f0ad:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f0b5:	e9 6f ff ff ff       	jmp    c001f029 <__moddi3+0x29>
c001f0ba:	66 90                	xchg   ax,ax
c001f0bc:	0f bd c7             	bsr    eax,edi
c001f0bf:	83 f0 1f             	xor    eax,0x1f
c001f0c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f0c6:	75 24                	jne    c001f0ec <__moddi3+0xec>
c001f0c8:	39 f7                	cmp    edi,esi
c001f0ca:	72 06                	jb     c001f0d2 <__moddi3+0xd2>
c001f0cc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f0d0:	77 0c                	ja     c001f0de <__moddi3+0xde>
c001f0d2:	89 e9                	mov    ecx,ebp
c001f0d4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f0d8:	19 fe                	sbb    esi,edi
c001f0da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f0de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f0e2:	89 f2                	mov    edx,esi
c001f0e4:	e9 6b ff ff ff       	jmp    c001f054 <__moddi3+0x54>
c001f0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001f0ec:	b8 20 00 00 00       	mov    eax,0x20
c001f0f1:	89 c2                	mov    edx,eax
c001f0f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f0f7:	29 da                	sub    edx,ebx
c001f0f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f0fd:	88 d9                	mov    cl,bl
c001f0ff:	d3 e7                	shl    edi,cl
c001f101:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f105:	88 d1                	mov    cl,dl
c001f107:	d3 e8                	shr    eax,cl
c001f109:	09 c7                	or     edi,eax
c001f10b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f10f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f113:	89 d8                	mov    eax,ebx
c001f115:	88 d9                	mov    cl,bl
c001f117:	d3 e7                	shl    edi,cl
c001f119:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f11d:	89 f3                	mov    ebx,esi
c001f11f:	88 d1                	mov    cl,dl
c001f121:	d3 eb                	shr    ebx,cl
c001f123:	89 c7                	mov    edi,eax
c001f125:	88 c1                	mov    cl,al
c001f127:	d3 e6                	shl    esi,cl
c001f129:	89 e8                	mov    eax,ebp
c001f12b:	88 d1                	mov    cl,dl
c001f12d:	d3 e8                	shr    eax,cl
c001f12f:	09 f0                	or     eax,esi
c001f131:	89 f9                	mov    ecx,edi
c001f133:	d3 e5                	shl    ebp,cl
c001f135:	89 da                	mov    edx,ebx
c001f137:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f13b:	89 d3                	mov    ebx,edx
c001f13d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f141:	89 c6                	mov    esi,eax
c001f143:	89 d1                	mov    ecx,edx
c001f145:	39 d3                	cmp    ebx,edx
c001f147:	72 27                	jb     c001f170 <__moddi3+0x170>
c001f149:	74 21                	je     c001f16c <__moddi3+0x16c>
c001f14b:	29 f5                	sub    ebp,esi
c001f14d:	19 cb                	sbb    ebx,ecx
c001f14f:	89 de                	mov    esi,ebx
c001f151:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f155:	d3 e6                	shl    esi,cl
c001f157:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f15b:	89 f9                	mov    ecx,edi
c001f15d:	d3 ed                	shr    ebp,cl
c001f15f:	09 ee                	or     esi,ebp
c001f161:	89 f0                	mov    eax,esi
c001f163:	d3 eb                	shr    ebx,cl
c001f165:	89 da                	mov    edx,ebx
c001f167:	e9 e8 fe ff ff       	jmp    c001f054 <__moddi3+0x54>
c001f16c:	39 c5                	cmp    ebp,eax
c001f16e:	73 db                	jae    c001f14b <__moddi3+0x14b>
c001f170:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f174:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f178:	89 d1                	mov    ecx,edx
c001f17a:	89 c6                	mov    esi,eax
c001f17c:	eb cd                	jmp    c001f14b <__moddi3+0x14b>
c001f17e:	66 90                	xchg   ax,ax

c001f180 <__udivdi3>:
c001f180:	55                   	push   ebp
c001f181:	57                   	push   edi
c001f182:	56                   	push   esi
c001f183:	53                   	push   ebx
c001f184:	83 ec 1c             	sub    esp,0x1c
c001f187:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f18b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f18f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f193:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f197:	85 d2                	test   edx,edx
c001f199:	75 41                	jne    c001f1dc <__udivdi3+0x5c>
c001f19b:	39 f7                	cmp    edi,esi
c001f19d:	76 15                	jbe    c001f1b4 <__udivdi3+0x34>
c001f19f:	89 e8                	mov    eax,ebp
c001f1a1:	89 f2                	mov    edx,esi
c001f1a3:	f7 f7                	div    edi
c001f1a5:	31 db                	xor    ebx,ebx
c001f1a7:	89 da                	mov    edx,ebx
c001f1a9:	83 c4 1c             	add    esp,0x1c
c001f1ac:	5b                   	pop    ebx
c001f1ad:	5e                   	pop    esi
c001f1ae:	5f                   	pop    edi
c001f1af:	5d                   	pop    ebp
c001f1b0:	c3                   	ret    
c001f1b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f1b4:	89 f9                	mov    ecx,edi
c001f1b6:	85 ff                	test   edi,edi
c001f1b8:	75 0b                	jne    c001f1c5 <__udivdi3+0x45>
c001f1ba:	b8 01 00 00 00       	mov    eax,0x1
c001f1bf:	31 d2                	xor    edx,edx
c001f1c1:	f7 f7                	div    edi
c001f1c3:	89 c1                	mov    ecx,eax
c001f1c5:	31 d2                	xor    edx,edx
c001f1c7:	89 f0                	mov    eax,esi
c001f1c9:	f7 f1                	div    ecx
c001f1cb:	89 c3                	mov    ebx,eax
c001f1cd:	89 e8                	mov    eax,ebp
c001f1cf:	f7 f1                	div    ecx
c001f1d1:	89 da                	mov    edx,ebx
c001f1d3:	83 c4 1c             	add    esp,0x1c
c001f1d6:	5b                   	pop    ebx
c001f1d7:	5e                   	pop    esi
c001f1d8:	5f                   	pop    edi
c001f1d9:	5d                   	pop    ebp
c001f1da:	c3                   	ret    
c001f1db:	90                   	nop
c001f1dc:	39 f2                	cmp    edx,esi
c001f1de:	77 1c                	ja     c001f1fc <__udivdi3+0x7c>
c001f1e0:	0f bd da             	bsr    ebx,edx
c001f1e3:	83 f3 1f             	xor    ebx,0x1f
c001f1e6:	75 24                	jne    c001f20c <__udivdi3+0x8c>
c001f1e8:	39 f2                	cmp    edx,esi
c001f1ea:	72 08                	jb     c001f1f4 <__udivdi3+0x74>
c001f1ec:	39 ef                	cmp    edi,ebp
c001f1ee:	0f 87 84 00 00 00    	ja     c001f278 <__udivdi3+0xf8>
c001f1f4:	b8 01 00 00 00       	mov    eax,0x1
c001f1f9:	eb ac                	jmp    c001f1a7 <__udivdi3+0x27>
c001f1fb:	90                   	nop
c001f1fc:	31 db                	xor    ebx,ebx
c001f1fe:	31 c0                	xor    eax,eax
c001f200:	89 da                	mov    edx,ebx
c001f202:	83 c4 1c             	add    esp,0x1c
c001f205:	5b                   	pop    ebx
c001f206:	5e                   	pop    esi
c001f207:	5f                   	pop    edi
c001f208:	5d                   	pop    ebp
c001f209:	c3                   	ret    
c001f20a:	66 90                	xchg   ax,ax
c001f20c:	b8 20 00 00 00       	mov    eax,0x20
c001f211:	29 d8                	sub    eax,ebx
c001f213:	88 d9                	mov    cl,bl
c001f215:	d3 e2                	shl    edx,cl
c001f217:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f21b:	89 fa                	mov    edx,edi
c001f21d:	88 c1                	mov    cl,al
c001f21f:	d3 ea                	shr    edx,cl
c001f221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f225:	09 d1                	or     ecx,edx
c001f227:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f22b:	88 d9                	mov    cl,bl
c001f22d:	d3 e7                	shl    edi,cl
c001f22f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f233:	89 f7                	mov    edi,esi
c001f235:	88 c1                	mov    cl,al
c001f237:	d3 ef                	shr    edi,cl
c001f239:	88 d9                	mov    cl,bl
c001f23b:	d3 e6                	shl    esi,cl
c001f23d:	89 ea                	mov    edx,ebp
c001f23f:	88 c1                	mov    cl,al
c001f241:	d3 ea                	shr    edx,cl
c001f243:	09 d6                	or     esi,edx
c001f245:	89 f0                	mov    eax,esi
c001f247:	89 fa                	mov    edx,edi
c001f249:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f24d:	89 d7                	mov    edi,edx
c001f24f:	89 c6                	mov    esi,eax
c001f251:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f255:	39 d7                	cmp    edi,edx
c001f257:	72 13                	jb     c001f26c <__udivdi3+0xec>
c001f259:	74 09                	je     c001f264 <__udivdi3+0xe4>
c001f25b:	89 f0                	mov    eax,esi
c001f25d:	31 db                	xor    ebx,ebx
c001f25f:	e9 43 ff ff ff       	jmp    c001f1a7 <__udivdi3+0x27>
c001f264:	88 d9                	mov    cl,bl
c001f266:	d3 e5                	shl    ebp,cl
c001f268:	39 c5                	cmp    ebp,eax
c001f26a:	73 ef                	jae    c001f25b <__udivdi3+0xdb>
c001f26c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f26f:	31 db                	xor    ebx,ebx
c001f271:	e9 31 ff ff ff       	jmp    c001f1a7 <__udivdi3+0x27>
c001f276:	66 90                	xchg   ax,ax
c001f278:	31 c0                	xor    eax,eax
c001f27a:	e9 28 ff ff ff       	jmp    c001f1a7 <__udivdi3+0x27>
c001f27f:	90                   	nop

c001f280 <__umoddi3>:
c001f280:	55                   	push   ebp
c001f281:	57                   	push   edi
c001f282:	56                   	push   esi
c001f283:	53                   	push   ebx
c001f284:	83 ec 1c             	sub    esp,0x1c
c001f287:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f28b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f28f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f293:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f297:	89 da                	mov    edx,ebx
c001f299:	85 c0                	test   eax,eax
c001f29b:	75 37                	jne    c001f2d4 <__umoddi3+0x54>
c001f29d:	39 df                	cmp    edi,ebx
c001f29f:	76 13                	jbe    c001f2b4 <__umoddi3+0x34>
c001f2a1:	89 f0                	mov    eax,esi
c001f2a3:	f7 f7                	div    edi
c001f2a5:	89 d0                	mov    eax,edx
c001f2a7:	31 d2                	xor    edx,edx
c001f2a9:	83 c4 1c             	add    esp,0x1c
c001f2ac:	5b                   	pop    ebx
c001f2ad:	5e                   	pop    esi
c001f2ae:	5f                   	pop    edi
c001f2af:	5d                   	pop    ebp
c001f2b0:	c3                   	ret    
c001f2b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f2b4:	89 fd                	mov    ebp,edi
c001f2b6:	85 ff                	test   edi,edi
c001f2b8:	75 0b                	jne    c001f2c5 <__umoddi3+0x45>
c001f2ba:	b8 01 00 00 00       	mov    eax,0x1
c001f2bf:	31 d2                	xor    edx,edx
c001f2c1:	f7 f7                	div    edi
c001f2c3:	89 c5                	mov    ebp,eax
c001f2c5:	89 d8                	mov    eax,ebx
c001f2c7:	31 d2                	xor    edx,edx
c001f2c9:	f7 f5                	div    ebp
c001f2cb:	89 f0                	mov    eax,esi
c001f2cd:	f7 f5                	div    ebp
c001f2cf:	89 d0                	mov    eax,edx
c001f2d1:	eb d4                	jmp    c001f2a7 <__umoddi3+0x27>
c001f2d3:	90                   	nop
c001f2d4:	89 f1                	mov    ecx,esi
c001f2d6:	39 d8                	cmp    eax,ebx
c001f2d8:	76 0a                	jbe    c001f2e4 <__umoddi3+0x64>
c001f2da:	89 f0                	mov    eax,esi
c001f2dc:	83 c4 1c             	add    esp,0x1c
c001f2df:	5b                   	pop    ebx
c001f2e0:	5e                   	pop    esi
c001f2e1:	5f                   	pop    edi
c001f2e2:	5d                   	pop    ebp
c001f2e3:	c3                   	ret    
c001f2e4:	0f bd e8             	bsr    ebp,eax
c001f2e7:	83 f5 1f             	xor    ebp,0x1f
c001f2ea:	75 1c                	jne    c001f308 <__umoddi3+0x88>
c001f2ec:	39 d8                	cmp    eax,ebx
c001f2ee:	72 04                	jb     c001f2f4 <__umoddi3+0x74>
c001f2f0:	39 f7                	cmp    edi,esi
c001f2f2:	77 08                	ja     c001f2fc <__umoddi3+0x7c>
c001f2f4:	89 da                	mov    edx,ebx
c001f2f6:	29 fe                	sub    esi,edi
c001f2f8:	19 c2                	sbb    edx,eax
c001f2fa:	89 f1                	mov    ecx,esi
c001f2fc:	89 c8                	mov    eax,ecx
c001f2fe:	83 c4 1c             	add    esp,0x1c
c001f301:	5b                   	pop    ebx
c001f302:	5e                   	pop    esi
c001f303:	5f                   	pop    edi
c001f304:	5d                   	pop    ebp
c001f305:	c3                   	ret    
c001f306:	66 90                	xchg   ax,ax
c001f308:	ba 20 00 00 00       	mov    edx,0x20
c001f30d:	29 ea                	sub    edx,ebp
c001f30f:	89 e9                	mov    ecx,ebp
c001f311:	d3 e0                	shl    eax,cl
c001f313:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f317:	89 f8                	mov    eax,edi
c001f319:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f31d:	88 d1                	mov    cl,dl
c001f31f:	d3 e8                	shr    eax,cl
c001f321:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f325:	09 c1                	or     ecx,eax
c001f327:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f32b:	89 e9                	mov    ecx,ebp
c001f32d:	d3 e7                	shl    edi,cl
c001f32f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f333:	89 d8                	mov    eax,ebx
c001f335:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f339:	88 d1                	mov    cl,dl
c001f33b:	d3 e8                	shr    eax,cl
c001f33d:	89 c7                	mov    edi,eax
c001f33f:	89 e9                	mov    ecx,ebp
c001f341:	d3 e3                	shl    ebx,cl
c001f343:	89 f0                	mov    eax,esi
c001f345:	88 d1                	mov    cl,dl
c001f347:	d3 e8                	shr    eax,cl
c001f349:	09 d8                	or     eax,ebx
c001f34b:	89 e9                	mov    ecx,ebp
c001f34d:	d3 e6                	shl    esi,cl
c001f34f:	89 f3                	mov    ebx,esi
c001f351:	89 fa                	mov    edx,edi
c001f353:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f357:	89 d1                	mov    ecx,edx
c001f359:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f35d:	89 c6                	mov    esi,eax
c001f35f:	89 d7                	mov    edi,edx
c001f361:	39 d1                	cmp    ecx,edx
c001f363:	72 27                	jb     c001f38c <__umoddi3+0x10c>
c001f365:	74 21                	je     c001f388 <__umoddi3+0x108>
c001f367:	89 ca                	mov    edx,ecx
c001f369:	29 f3                	sub    ebx,esi
c001f36b:	19 fa                	sbb    edx,edi
c001f36d:	89 d0                	mov    eax,edx
c001f36f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f373:	d3 e0                	shl    eax,cl
c001f375:	89 e9                	mov    ecx,ebp
c001f377:	d3 eb                	shr    ebx,cl
c001f379:	09 d8                	or     eax,ebx
c001f37b:	d3 ea                	shr    edx,cl
c001f37d:	83 c4 1c             	add    esp,0x1c
c001f380:	5b                   	pop    ebx
c001f381:	5e                   	pop    esi
c001f382:	5f                   	pop    edi
c001f383:	5d                   	pop    ebp
c001f384:	c3                   	ret    
c001f385:	8d 76 00             	lea    esi,[esi+0x0]
c001f388:	39 c3                	cmp    ebx,eax
c001f38a:	73 db                	jae    c001f367 <__umoddi3+0xe7>
c001f38c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f390:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f394:	89 d7                	mov    edi,edx
c001f396:	89 c6                	mov    esi,eax
c001f398:	eb cd                	jmp    c001f367 <__umoddi3+0xe7>

Disassembly of section .init:

c001f39a <_init>:
c001f39a:	55                   	push   ebp
c001f39b:	89 e5                	mov    ebp,esp
c001f39d:	e8 52 0d fe ff       	call   c00000f4 <frame_dummy>
c001f3a2:	e8 e5 fa ff ff       	call   c001ee8c <__do_global_ctors_aux>
c001f3a7:	5d                   	pop    ebp
c001f3a8:	c3                   	ret    

Disassembly of section .fini:

c001f3a9 <_fini>:
c001f3a9:	55                   	push   ebp
c001f3aa:	89 e5                	mov    ebp,esp
c001f3ac:	e8 d3 0c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f3b1:	5d                   	pop    ebp
c001f3b2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f3b4 <Computer::~Computer()>:
c001f3b4:	83 ec 0c             	sub    esp,0xc
c001f3b7:	ba d4 06 02 c0       	mov    edx,0xc00206d4
c001f3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c0:	89 10                	mov    DWORD PTR [eax],edx
c001f3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c6:	83 ec 0c             	sub    esp,0xc
c001f3c9:	50                   	push   eax
c001f3ca:	e8 5b d1 fe ff       	call   c000c52a <Device::~Device()>
c001f3cf:	83 c4 10             	add    esp,0x10
c001f3d2:	90                   	nop
c001f3d3:	83 c4 0c             	add    esp,0xc
c001f3d6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f3d8 <Computer::~Computer()>:
c001f3d8:	83 ec 0c             	sub    esp,0xc
c001f3db:	83 ec 0c             	sub    esp,0xc
c001f3de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3e2:	e8 cd ff ff ff       	call   c001f3b4 <Computer::~Computer()>
c001f3e7:	83 c4 10             	add    esp,0x10
c001f3ea:	83 ec 08             	sub    esp,0x8
c001f3ed:	68 70 01 00 00       	push   0x170
c001f3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3f6:	e8 11 b4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f3fb:	83 c4 10             	add    esp,0x10
c001f3fe:	83 c4 0c             	add    esp,0xc
c001f401:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f402 <idleCommon()>:
c001f402:	83 ec 0c             	sub    esp,0xc
c001f405:	fa                   	cli    
c001f406:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f40c:	e8 b7 66 ff ff       	call   c0015ac8 <schedule()>
c001f411:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f416:	48                   	dec    eax
c001f417:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f41c:	75 01                	jne    c001f41f <idleCommon()+0x1d>
c001f41e:	fb                   	sti    
c001f41f:	83 c4 0c             	add    esp,0xc
c001f422:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f424 <LinkedList<UnixFile>::~LinkedList()>:
c001f424:	90                   	nop
c001f425:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f426 <LinkedList<UnixFile>::LinkedList()>:
c001f426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f42a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f434:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f43b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f43f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f44a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f454:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f45b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f45f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f466:	90                   	nop
c001f467:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f468 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f468:	83 ec 0c             	sub    esp,0xc
c001f46b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f470:	75 10                	jne    c001f482 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f472:	83 ec 0c             	sub    esp,0xc
c001f475:	68 e8 08 02 c0       	push   0xc00208e8
c001f47a:	e8 46 1d ff ff       	call   c00111c5 <KePanic(char const*)>
c001f47f:	83 c4 10             	add    esp,0x10
c001f482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f486:	8b 00                	mov    eax,DWORD PTR [eax]
c001f488:	85 c0                	test   eax,eax
c001f48a:	74 34                	je     c001f4c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f490:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f493:	85 c0                	test   eax,eax
c001f495:	74 29                	je     c001f4c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f49b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f49e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4be:	eb 65                	jmp    c001f525 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4c6:	85 c0                	test   eax,eax
c001f4c8:	75 4b                	jne    c001f515 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4d1:	85 c0                	test   eax,eax
c001f4d3:	75 40                	jne    c001f515 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4dd:	89 10                	mov    DWORD PTR [eax],edx
c001f4df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4ff:	85 c0                	test   eax,eax
c001f501:	74 22                	je     c001f525 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f503:	83 ec 0c             	sub    esp,0xc
c001f506:	68 0a 09 02 c0       	push   0xc002090a
c001f50b:	e8 b5 1c ff ff       	call   c00111c5 <KePanic(char const*)>
c001f510:	83 c4 10             	add    esp,0x10
c001f513:	eb 10                	jmp    c001f525 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f515:	83 ec 0c             	sub    esp,0xc
c001f518:	68 14 09 02 c0       	push   0xc0020914
c001f51d:	e8 a3 1c ff ff       	call   c00111c5 <KePanic(char const*)>
c001f522:	83 c4 10             	add    esp,0x10
c001f525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f529:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f52c:	8d 50 01             	lea    edx,[eax+0x1]
c001f52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f533:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f536:	90                   	nop
c001f537:	83 c4 0c             	add    esp,0xc
c001f53a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f53c <LinkedList<UnixFile>::getFirstElement()>:
c001f53c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f540:	8b 00                	mov    eax,DWORD PTR [eax]
c001f542:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f544 <LinkedList<UnixFile>::removeFirst()>:
c001f544:	83 ec 0c             	sub    esp,0xc
c001f547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f54b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f54d:	85 c0                	test   eax,eax
c001f54f:	75 12                	jne    c001f563 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f551:	83 ec 0c             	sub    esp,0xc
c001f554:	68 20 09 02 c0       	push   0xc0020920
c001f559:	e8 67 1c ff ff       	call   c00111c5 <KePanic(char const*)>
c001f55e:	83 c4 10             	add    esp,0x10
c001f561:	eb 7e                	jmp    c001f5e1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f567:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f56a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f56d:	85 c0                	test   eax,eax
c001f56f:	74 10                	je     c001f581 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f571:	83 ec 0c             	sub    esp,0xc
c001f574:	68 6b 09 02 c0       	push   0xc002096b
c001f579:	e8 47 1c ff ff       	call   c00111c5 <KePanic(char const*)>
c001f57e:	83 c4 10             	add    esp,0x10
c001f581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f585:	8b 00                	mov    eax,DWORD PTR [eax]
c001f587:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f58a:	85 c0                	test   eax,eax
c001f58c:	75 33                	jne    c001f5c1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f592:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f59c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5aa:	83 f8 01             	cmp    eax,0x1
c001f5ad:	74 21                	je     c001f5d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f5af:	83 ec 0c             	sub    esp,0xc
c001f5b2:	68 44 09 02 c0       	push   0xc0020944
c001f5b7:	e8 09 1c ff ff       	call   c00111c5 <KePanic(char const*)>
c001f5bc:	83 c4 10             	add    esp,0x10
c001f5bf:	eb 0f                	jmp    c001f5d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f5c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5c7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f5ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ce:	89 10                	mov    DWORD PTR [eax],edx
c001f5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5d7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f5da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5e1:	83 c4 0c             	add    esp,0xc
c001f5e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f5e6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f5e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5ed:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f5ee <DriverlessDevice::~DriverlessDevice()>:
c001f5ee:	ba 7c 14 02 c0       	mov    edx,0xc002147c
c001f5f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5f7:	89 10                	mov    DWORD PTR [eax],edx
c001f5f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5fd:	50                   	push   eax
c001f5fe:	e8 27 cf fe ff       	call   c000c52a <Device::~Device()>
c001f603:	83 c4 04             	add    esp,0x4
c001f606:	90                   	nop
c001f607:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f608 <DriverlessDevice::~DriverlessDevice()>:
c001f608:	83 ec 0c             	sub    esp,0xc
c001f60b:	83 ec 0c             	sub    esp,0xc
c001f60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f612:	e8 d7 ff ff ff       	call   c001f5ee <DriverlessDevice::~DriverlessDevice()>
c001f617:	83 c4 10             	add    esp,0x10
c001f61a:	83 ec 08             	sub    esp,0x8
c001f61d:	68 58 01 00 00       	push   0x158
c001f622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f626:	e8 e1 b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f62b:	83 c4 10             	add    esp,0x10
c001f62e:	83 c4 0c             	add    esp,0xc
c001f631:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f632 <LinkedList<Device>::addElement(Device*)>:
c001f632:	83 ec 0c             	sub    esp,0xc
c001f635:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f63a:	75 10                	jne    c001f64c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f63c:	83 ec 0c             	sub    esp,0xc
c001f63f:	68 e8 08 02 c0       	push   0xc00208e8
c001f644:	e8 7c 1b ff ff       	call   c00111c5 <KePanic(char const*)>
c001f649:	83 c4 10             	add    esp,0x10
c001f64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f650:	8b 00                	mov    eax,DWORD PTR [eax]
c001f652:	85 c0                	test   eax,eax
c001f654:	74 3a                	je     c001f690 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f65a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f65d:	85 c0                	test   eax,eax
c001f65f:	74 2f                	je     c001f690 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f665:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f668:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f66c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f676:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f67a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f67d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f681:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f684:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f68e:	eb 68                	jmp    c001f6f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f694:	8b 00                	mov    eax,DWORD PTR [eax]
c001f696:	85 c0                	test   eax,eax
c001f698:	75 4e                	jne    c001f6e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6a1:	85 c0                	test   eax,eax
c001f6a3:	75 43                	jne    c001f6e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6ad:	89 10                	mov    DWORD PTR [eax],edx
c001f6af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6c1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6d2:	85 c0                	test   eax,eax
c001f6d4:	74 22                	je     c001f6f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f6d6:	83 ec 0c             	sub    esp,0xc
c001f6d9:	68 0a 09 02 c0       	push   0xc002090a
c001f6de:	e8 e2 1a ff ff       	call   c00111c5 <KePanic(char const*)>
c001f6e3:	83 c4 10             	add    esp,0x10
c001f6e6:	eb 10                	jmp    c001f6f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f6e8:	83 ec 0c             	sub    esp,0xc
c001f6eb:	68 14 09 02 c0       	push   0xc0020914
c001f6f0:	e8 d0 1a ff ff       	call   c00111c5 <KePanic(char const*)>
c001f6f5:	83 c4 10             	add    esp,0x10
c001f6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6ff:	8d 50 01             	lea    edx,[eax+0x1]
c001f702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f706:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f709:	90                   	nop
c001f70a:	83 c4 0c             	add    esp,0xc
c001f70d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f70e <LinkedList<Device>::LinkedList()>:
c001f70e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f712:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f71c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f723:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f727:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f72e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f732:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f73c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f747:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f74e:	90                   	nop
c001f74f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f750 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f754:	8b 00                	mov    eax,DWORD PTR [eax]
c001f756:	85 c0                	test   eax,eax
c001f758:	75 0e                	jne    c001f768 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f75a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f75e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f761:	85 c0                	test   eax,eax
c001f763:	75 03                	jne    c001f768 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f765:	b0 01                	mov    al,0x1
c001f767:	c3                   	ret    
c001f768:	b0 00                	mov    al,0x0
c001f76a:	90                   	nop
c001f76b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f76c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f76c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f770:	8b 00                	mov    eax,DWORD PTR [eax]
c001f772:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f774 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f774:	83 ec 0c             	sub    esp,0xc
c001f777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f77b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f77d:	85 c0                	test   eax,eax
c001f77f:	75 17                	jne    c001f798 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f781:	83 ec 0c             	sub    esp,0xc
c001f784:	68 20 09 02 c0       	push   0xc0020920
c001f789:	e8 37 1a ff ff       	call   c00111c5 <KePanic(char const*)>
c001f78e:	83 c4 10             	add    esp,0x10
c001f791:	e9 96 00 00 00       	jmp    c001f82c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f796:	66 90                	xchg   ax,ax
c001f798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f79f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f7a2:	85 c0                	test   eax,eax
c001f7a4:	0f 95 c0             	setne  al
c001f7a7:	0f b6 c0             	movzx  eax,al
c001f7aa:	85 c0                	test   eax,eax
c001f7ac:	74 12                	je     c001f7c0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f7ae:	83 ec 0c             	sub    esp,0xc
c001f7b1:	68 6b 09 02 c0       	push   0xc002096b
c001f7b6:	e8 0a 1a ff ff       	call   c00111c5 <KePanic(char const*)>
c001f7bb:	83 c4 10             	add    esp,0x10
c001f7be:	66 90                	xchg   ax,ax
c001f7c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7c6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f7c9:	85 c0                	test   eax,eax
c001f7cb:	0f 94 c0             	sete   al
c001f7ce:	0f b6 c0             	movzx  eax,al
c001f7d1:	85 c0                	test   eax,eax
c001f7d3:	74 33                	je     c001f808 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7f1:	83 f8 01             	cmp    eax,0x1
c001f7f4:	74 22                	je     c001f818 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f7f6:	83 ec 0c             	sub    esp,0xc
c001f7f9:	68 44 09 02 c0       	push   0xc0020944
c001f7fe:	e8 c2 19 ff ff       	call   c00111c5 <KePanic(char const*)>
c001f803:	83 c4 10             	add    esp,0x10
c001f806:	eb 10                	jmp    c001f818 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f80e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f815:	89 10                	mov    DWORD PTR [eax],edx
c001f817:	90                   	nop
c001f818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f81f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f826:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f829:	8d 76 00             	lea    esi,[esi+0x0]
c001f82c:	83 c4 0c             	add    esp,0xc
c001f82f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f830:	83 ec 0c             	sub    esp,0xc
c001f833:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f838:	75 12                	jne    c001f84c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f83a:	83 ec 0c             	sub    esp,0xc
c001f83d:	68 e8 08 02 c0       	push   0xc00208e8
c001f842:	e8 7e 19 ff ff       	call   c00111c5 <KePanic(char const*)>
c001f847:	83 c4 10             	add    esp,0x10
c001f84a:	66 90                	xchg   ax,ax
c001f84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f850:	8b 00                	mov    eax,DWORD PTR [eax]
c001f852:	85 c0                	test   eax,eax
c001f854:	74 36                	je     c001f88c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f85d:	85 c0                	test   eax,eax
c001f85f:	74 2b                	je     c001f88c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f865:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f868:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f86c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f873:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f877:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f881:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f888:	eb 6a                	jmp    c001f8f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f88a:	66 90                	xchg   ax,ax
c001f88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f890:	8b 00                	mov    eax,DWORD PTR [eax]
c001f892:	85 c0                	test   eax,eax
c001f894:	75 4e                	jne    c001f8e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f89d:	85 c0                	test   eax,eax
c001f89f:	75 43                	jne    c001f8e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f8a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8a9:	89 10                	mov    DWORD PTR [eax],edx
c001f8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8cb:	85 c0                	test   eax,eax
c001f8cd:	74 25                	je     c001f8f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f8cf:	83 ec 0c             	sub    esp,0xc
c001f8d2:	68 0a 09 02 c0       	push   0xc002090a
c001f8d7:	e8 e9 18 ff ff       	call   c00111c5 <KePanic(char const*)>
c001f8dc:	83 c4 10             	add    esp,0x10
c001f8df:	eb 13                	jmp    c001f8f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f8e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	68 14 09 02 c0       	push   0xc0020914
c001f8ec:	e8 d4 18 ff ff       	call   c00111c5 <KePanic(char const*)>
c001f8f1:	83 c4 10             	add    esp,0x10
c001f8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8fb:	8d 50 01             	lea    edx,[eax+0x1]
c001f8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f902:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f905:	90                   	nop
c001f906:	83 c4 0c             	add    esp,0xc
c001f909:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f90c <ACPI::~ACPI()>:
c001f90c:	83 ec 0c             	sub    esp,0xc
c001f90f:	ba 64 1a 02 c0       	mov    edx,0xc0021a64
c001f914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f918:	89 10                	mov    DWORD PTR [eax],edx
c001f91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91e:	83 ec 0c             	sub    esp,0xc
c001f921:	50                   	push   eax
c001f922:	e8 03 cc fe ff       	call   c000c52a <Device::~Device()>
c001f927:	83 c4 10             	add    esp,0x10
c001f92a:	90                   	nop
c001f92b:	83 c4 0c             	add    esp,0xc
c001f92e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f930 <ACPI::~ACPI()>:
c001f930:	83 ec 0c             	sub    esp,0xc
c001f933:	83 ec 0c             	sub    esp,0xc
c001f936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f93a:	e8 cd ff ff ff       	call   c001f90c <ACPI::~ACPI()>
c001f93f:	83 c4 10             	add    esp,0x10
c001f942:	83 ec 08             	sub    esp,0x8
c001f945:	68 64 12 00 00       	push   0x1264
c001f94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f94e:	e8 b9 ae fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f953:	83 c4 10             	add    esp,0x10
c001f956:	83 c4 0c             	add    esp,0xc
c001f959:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f95c <LinkedList<Device>::~LinkedList()>:
c001f95c:	90                   	nop
c001f95d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f960 <LinkedList<Device>::isEmpty()>:
c001f960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f964:	8b 00                	mov    eax,DWORD PTR [eax]
c001f966:	85 c0                	test   eax,eax
c001f968:	75 0e                	jne    c001f978 <LinkedList<Device>::isEmpty()+0x18>
c001f96a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f96e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f971:	85 c0                	test   eax,eax
c001f973:	75 03                	jne    c001f978 <LinkedList<Device>::isEmpty()+0x18>
c001f975:	b0 01                	mov    al,0x1
c001f977:	c3                   	ret    
c001f978:	b0 00                	mov    al,0x0
c001f97a:	90                   	nop
c001f97b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f97c <LinkedList<Device>::getFirstElement()>:
c001f97c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f980:	8b 00                	mov    eax,DWORD PTR [eax]
c001f982:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f984 <LinkedList<Device>::removeFirst()>:
c001f984:	83 ec 0c             	sub    esp,0xc
c001f987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f98d:	85 c0                	test   eax,eax
c001f98f:	75 17                	jne    c001f9a8 <LinkedList<Device>::removeFirst()+0x24>
c001f991:	83 ec 0c             	sub    esp,0xc
c001f994:	68 20 09 02 c0       	push   0xc0020920
c001f999:	e8 27 18 ff ff       	call   c00111c5 <KePanic(char const*)>
c001f99e:	83 c4 10             	add    esp,0x10
c001f9a1:	e9 92 00 00 00       	jmp    c001fa38 <LinkedList<Device>::removeFirst()+0xb4>
c001f9a6:	66 90                	xchg   ax,ax
c001f9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9af:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f9b5:	85 c0                	test   eax,eax
c001f9b7:	74 13                	je     c001f9cc <LinkedList<Device>::removeFirst()+0x48>
c001f9b9:	83 ec 0c             	sub    esp,0xc
c001f9bc:	68 6b 09 02 c0       	push   0xc002096b
c001f9c1:	e8 ff 17 ff ff       	call   c00111c5 <KePanic(char const*)>
c001f9c6:	83 c4 10             	add    esp,0x10
c001f9c9:	8d 76 00             	lea    esi,[esi+0x0]
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9d2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f9d8:	85 c0                	test   eax,eax
c001f9da:	75 34                	jne    c001fa10 <LinkedList<Device>::removeFirst()+0x8c>
c001f9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9f8:	83 f8 01             	cmp    eax,0x1
c001f9fb:	74 27                	je     c001fa24 <LinkedList<Device>::removeFirst()+0xa0>
c001f9fd:	83 ec 0c             	sub    esp,0xc
c001fa00:	68 44 09 02 c0       	push   0xc0020944
c001fa05:	e8 bb 17 ff ff       	call   c00111c5 <KePanic(char const*)>
c001fa0a:	83 c4 10             	add    esp,0x10
c001fa0d:	eb 15                	jmp    c001fa24 <LinkedList<Device>::removeFirst()+0xa0>
c001fa0f:	90                   	nop
c001fa10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa16:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fa1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa20:	89 10                	mov    DWORD PTR [eax],edx
c001fa22:	66 90                	xchg   ax,ax
c001fa24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa2b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fa2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa35:	8d 76 00             	lea    esi,[esi+0x0]
c001fa38:	83 c4 0c             	add    esp,0xc
c001fa3b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fa3c <CPU::~CPU()>:
c001fa3c:	83 ec 0c             	sub    esp,0xc
c001fa3f:	ba 0c 1c 02 c0       	mov    edx,0xc0021c0c
c001fa44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa48:	89 10                	mov    DWORD PTR [eax],edx
c001fa4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4e:	83 ec 0c             	sub    esp,0xc
c001fa51:	50                   	push   eax
c001fa52:	e8 d3 ca fe ff       	call   c000c52a <Device::~Device()>
c001fa57:	83 c4 10             	add    esp,0x10
c001fa5a:	90                   	nop
c001fa5b:	83 c4 0c             	add    esp,0xc
c001fa5e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fa60 <CPU::~CPU()>:
c001fa60:	83 ec 0c             	sub    esp,0xc
c001fa63:	83 ec 0c             	sub    esp,0xc
c001fa66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa6a:	e8 cd ff ff ff       	call   c001fa3c <CPU::~CPU()>
c001fa6f:	83 c4 10             	add    esp,0x10
c001fa72:	83 ec 08             	sub    esp,0x8
c001fa75:	68 94 11 00 00       	push   0x1194
c001fa7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa7e:	e8 89 ad fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fa83:	83 c4 10             	add    esp,0x10
c001fa86:	83 c4 0c             	add    esp,0xc
c001fa89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fa8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fa8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fa94 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fa94:	90                   	nop
c001fa95:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fa98 <ThreadControlBlock::ThreadControlBlock()>:
c001fa98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa9c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001faa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001faae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fabd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001facf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fadb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fadf:	90                   	nop
c001fae0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fae4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fae8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fafd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb24:	90                   	nop
c001fb25:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fb26 <PCI::~PCI()>:
c001fb26:	83 ec 0c             	sub    esp,0xc
c001fb29:	ba ec 2a 02 c0       	mov    edx,0xc0022aec
c001fb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb32:	89 10                	mov    DWORD PTR [eax],edx
c001fb34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	50                   	push   eax
c001fb3c:	e8 7b c4 fe ff       	call   c000bfbc <Bus::~Bus()>
c001fb41:	83 c4 10             	add    esp,0x10
c001fb44:	90                   	nop
c001fb45:	83 c4 0c             	add    esp,0xc
c001fb48:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fb4a <PCI::~PCI()>:
c001fb4a:	83 ec 0c             	sub    esp,0xc
c001fb4d:	83 ec 0c             	sub    esp,0xc
c001fb50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb54:	e8 cd ff ff ff       	call   c001fb26 <PCI::~PCI()>
c001fb59:	83 c4 10             	add    esp,0x10
c001fb5c:	83 ec 08             	sub    esp,0x8
c001fb5f:	68 5c 01 00 00       	push   0x15c
c001fb64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb68:	e8 9f ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb6d:	83 c4 10             	add    esp,0x10
c001fb70:	83 c4 0c             	add    esp,0xc
c001fb73:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fb74 <IDE::~IDE()>:
c001fb74:	83 ec 0c             	sub    esp,0xc
c001fb77:	ba a0 2b 02 c0       	mov    edx,0xc0022ba0
c001fb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb80:	89 10                	mov    DWORD PTR [eax],edx
c001fb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb86:	83 ec 0c             	sub    esp,0xc
c001fb89:	50                   	push   eax
c001fb8a:	e8 15 ce fe ff       	call   c000c9a4 <HardDiskController::~HardDiskController()>
c001fb8f:	83 c4 10             	add    esp,0x10
c001fb92:	90                   	nop
c001fb93:	83 c4 0c             	add    esp,0xc
c001fb96:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fb98 <IDE::~IDE()>:
c001fb98:	83 ec 0c             	sub    esp,0xc
c001fb9b:	83 ec 0c             	sub    esp,0xc
c001fb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fba2:	e8 cd ff ff ff       	call   c001fb74 <IDE::~IDE()>
c001fba7:	83 c4 10             	add    esp,0x10
c001fbaa:	83 ec 08             	sub    esp,0x8
c001fbad:	68 70 02 00 00       	push   0x270
c001fbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbb6:	e8 51 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fbbb:	83 c4 10             	add    esp,0x10
c001fbbe:	83 c4 0c             	add    esp,0xc
c001fbc1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fbc2 <SATABus::~SATABus()>:
c001fbc2:	83 ec 0c             	sub    esp,0xc
c001fbc5:	ba f0 2b 02 c0       	mov    edx,0xc0022bf0
c001fbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbce:	89 10                	mov    DWORD PTR [eax],edx
c001fbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd4:	83 ec 0c             	sub    esp,0xc
c001fbd7:	50                   	push   eax
c001fbd8:	e8 c7 cd fe ff       	call   c000c9a4 <HardDiskController::~HardDiskController()>
c001fbdd:	83 c4 10             	add    esp,0x10
c001fbe0:	90                   	nop
c001fbe1:	83 c4 0c             	add    esp,0xc
c001fbe4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fbe6 <SATABus::~SATABus()>:
c001fbe6:	83 ec 0c             	sub    esp,0xc
c001fbe9:	83 ec 0c             	sub    esp,0xc
c001fbec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbf0:	e8 cd ff ff ff       	call   c001fbc2 <SATABus::~SATABus()>
c001fbf5:	83 c4 10             	add    esp,0x10
c001fbf8:	83 ec 08             	sub    esp,0x8
c001fbfb:	68 64 01 00 00       	push   0x164
c001fc00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc04:	e8 03 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc09:	83 c4 10             	add    esp,0x10
c001fc0c:	83 c4 0c             	add    esp,0xc
c001fc0f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fc10 <ATA::~ATA()>:
c001fc10:	83 ec 0c             	sub    esp,0xc
c001fc13:	ba 30 2c 02 c0       	mov    edx,0xc0022c30
c001fc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1c:	89 10                	mov    DWORD PTR [eax],edx
c001fc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc22:	83 ec 0c             	sub    esp,0xc
c001fc25:	50                   	push   eax
c001fc26:	e8 5b ce fe ff       	call   c000ca86 <PhysicalDisk::~PhysicalDisk()>
c001fc2b:	83 c4 10             	add    esp,0x10
c001fc2e:	90                   	nop
c001fc2f:	83 c4 0c             	add    esp,0xc
c001fc32:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fc34 <ATA::~ATA()>:
c001fc34:	83 ec 0c             	sub    esp,0xc
c001fc37:	83 ec 0c             	sub    esp,0xc
c001fc3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc3e:	e8 cd ff ff ff       	call   c001fc10 <ATA::~ATA()>
c001fc43:	83 c4 10             	add    esp,0x10
c001fc46:	83 ec 08             	sub    esp,0x8
c001fc49:	68 7c 01 00 00       	push   0x17c
c001fc4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc52:	e8 b5 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc57:	83 c4 10             	add    esp,0x10
c001fc5a:	83 c4 0c             	add    esp,0xc
c001fc5d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fc5e <ATAPI::~ATAPI()>:
c001fc5e:	83 ec 0c             	sub    esp,0xc
c001fc61:	ba 78 2c 02 c0       	mov    edx,0xc0022c78
c001fc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6a:	89 10                	mov    DWORD PTR [eax],edx
c001fc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc70:	83 ec 0c             	sub    esp,0xc
c001fc73:	50                   	push   eax
c001fc74:	e8 0d ce fe ff       	call   c000ca86 <PhysicalDisk::~PhysicalDisk()>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	90                   	nop
c001fc7d:	83 c4 0c             	add    esp,0xc
c001fc80:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fc82 <ATAPI::~ATAPI()>:
c001fc82:	83 ec 0c             	sub    esp,0xc
c001fc85:	83 ec 0c             	sub    esp,0xc
c001fc88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc8c:	e8 cd ff ff ff       	call   c001fc5e <ATAPI::~ATAPI()>
c001fc91:	83 c4 10             	add    esp,0x10
c001fc94:	83 ec 08             	sub    esp,0x8
c001fc97:	68 84 01 00 00       	push   0x184
c001fc9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fca0:	e8 67 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fca5:	83 c4 10             	add    esp,0x10
c001fca8:	83 c4 0c             	add    esp,0xc
c001fcab:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fcac <SATA::~SATA()>:
c001fcac:	83 ec 0c             	sub    esp,0xc
c001fcaf:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c001fcb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb8:	89 10                	mov    DWORD PTR [eax],edx
c001fcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcbe:	83 ec 0c             	sub    esp,0xc
c001fcc1:	50                   	push   eax
c001fcc2:	e8 bf cd fe ff       	call   c000ca86 <PhysicalDisk::~PhysicalDisk()>
c001fcc7:	83 c4 10             	add    esp,0x10
c001fcca:	90                   	nop
c001fccb:	83 c4 0c             	add    esp,0xc
c001fcce:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fcd0 <SATA::~SATA()>:
c001fcd0:	83 ec 0c             	sub    esp,0xc
c001fcd3:	83 ec 0c             	sub    esp,0xc
c001fcd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcda:	e8 cd ff ff ff       	call   c001fcac <SATA::~SATA()>
c001fcdf:	83 c4 10             	add    esp,0x10
c001fce2:	83 ec 08             	sub    esp,0x8
c001fce5:	68 7c 01 00 00       	push   0x17c
c001fcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcee:	e8 19 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fcf3:	83 c4 10             	add    esp,0x10
c001fcf6:	83 c4 0c             	add    esp,0xc
c001fcf9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fcfa <SATAPI::~SATAPI()>:
c001fcfa:	83 ec 0c             	sub    esp,0xc
c001fcfd:	ba 50 2e 02 c0       	mov    edx,0xc0022e50
c001fd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd06:	89 10                	mov    DWORD PTR [eax],edx
c001fd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0c:	83 ec 0c             	sub    esp,0xc
c001fd0f:	50                   	push   eax
c001fd10:	e8 71 cd fe ff       	call   c000ca86 <PhysicalDisk::~PhysicalDisk()>
c001fd15:	83 c4 10             	add    esp,0x10
c001fd18:	90                   	nop
c001fd19:	83 c4 0c             	add    esp,0xc
c001fd1c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fd1e <SATAPI::~SATAPI()>:
c001fd1e:	83 ec 0c             	sub    esp,0xc
c001fd21:	83 ec 0c             	sub    esp,0xc
c001fd24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd28:	e8 cd ff ff ff       	call   c001fcfa <SATAPI::~SATAPI()>
c001fd2d:	83 c4 10             	add    esp,0x10
c001fd30:	83 ec 08             	sub    esp,0x8
c001fd33:	68 84 01 00 00       	push   0x184
c001fd38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd3c:	e8 cb aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd41:	83 c4 10             	add    esp,0x10
c001fd44:	83 c4 0c             	add    esp,0xc
c001fd47:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fd48 <IOAPIC::~IOAPIC()>:
c001fd48:	83 ec 0c             	sub    esp,0xc
c001fd4b:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c001fd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd54:	89 10                	mov    DWORD PTR [eax],edx
c001fd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5a:	83 ec 0c             	sub    esp,0xc
c001fd5d:	50                   	push   eax
c001fd5e:	e8 c7 c7 fe ff       	call   c000c52a <Device::~Device()>
c001fd63:	83 c4 10             	add    esp,0x10
c001fd66:	90                   	nop
c001fd67:	83 c4 0c             	add    esp,0xc
c001fd6a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fd6c <IOAPIC::~IOAPIC()>:
c001fd6c:	83 ec 0c             	sub    esp,0xc
c001fd6f:	83 ec 0c             	sub    esp,0xc
c001fd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd76:	e8 cd ff ff ff       	call   c001fd48 <IOAPIC::~IOAPIC()>
c001fd7b:	83 c4 10             	add    esp,0x10
c001fd7e:	83 ec 08             	sub    esp,0x8
c001fd81:	68 68 01 00 00       	push   0x168
c001fd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd8a:	e8 7d aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd8f:	83 c4 10             	add    esp,0x10
c001fd92:	83 c4 0c             	add    esp,0xc
c001fd95:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fd98 <APICTimer::~APICTimer()>:
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	ba d8 2e 02 c0       	mov    edx,0xc0022ed8
c001fda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda4:	89 10                	mov    DWORD PTR [eax],edx
c001fda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdaa:	83 ec 0c             	sub    esp,0xc
c001fdad:	50                   	push   eax
c001fdae:	e8 4d e2 fe ff       	call   c000e000 <Timer::~Timer()>
c001fdb3:	83 c4 10             	add    esp,0x10
c001fdb6:	90                   	nop
c001fdb7:	83 c4 0c             	add    esp,0xc
c001fdba:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fdbc <APICTimer::~APICTimer()>:
c001fdbc:	83 ec 0c             	sub    esp,0xc
c001fdbf:	83 ec 0c             	sub    esp,0xc
c001fdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc6:	e8 cd ff ff ff       	call   c001fd98 <APICTimer::~APICTimer()>
c001fdcb:	83 c4 10             	add    esp,0x10
c001fdce:	83 ec 08             	sub    esp,0x8
c001fdd1:	68 60 01 00 00       	push   0x160
c001fdd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdda:	e8 2d aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fddf:	83 c4 10             	add    esp,0x10
c001fde2:	83 c4 0c             	add    esp,0xc
c001fde5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fde8 <PIT::~PIT()>:
c001fde8:	83 ec 0c             	sub    esp,0xc
c001fdeb:	ba 28 2f 02 c0       	mov    edx,0xc0022f28
c001fdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf4:	89 10                	mov    DWORD PTR [eax],edx
c001fdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfa:	83 ec 0c             	sub    esp,0xc
c001fdfd:	50                   	push   eax
c001fdfe:	e8 fd e1 fe ff       	call   c000e000 <Timer::~Timer()>
c001fe03:	83 c4 10             	add    esp,0x10
c001fe06:	90                   	nop
c001fe07:	83 c4 0c             	add    esp,0xc
c001fe0a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fe0c <PIT::~PIT()>:
c001fe0c:	83 ec 0c             	sub    esp,0xc
c001fe0f:	83 ec 0c             	sub    esp,0xc
c001fe12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe16:	e8 cd ff ff ff       	call   c001fde8 <PIT::~PIT()>
c001fe1b:	83 c4 10             	add    esp,0x10
c001fe1e:	83 ec 08             	sub    esp,0x8
c001fe21:	68 5c 01 00 00       	push   0x15c
c001fe26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe2a:	e8 dd a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe2f:	83 c4 10             	add    esp,0x10
c001fe32:	83 c4 0c             	add    esp,0xc
c001fe35:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 3d 1d 02 c0       	mov    esi,0xc0021d3d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 59 1d 02 c0       	mov    esi,0xc0021d59
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
